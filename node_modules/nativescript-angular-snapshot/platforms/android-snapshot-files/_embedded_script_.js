(function(modules) {
var installedModules = {};
function __webpack_require__(moduleId) {
if (installedModules[moduleId]) return installedModules[moduleId].exports;
var module = installedModules[moduleId] = {
exports: {},
id: moduleId,
loaded: false
};
modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
module.loaded = true;
return module.exports;
}
__webpack_require__.m = modules;
__webpack_require__.c = installedModules;
__webpack_require__.p = "";
return __webpack_require__(0);
})([ function(module, exports, __webpack_require__) {
__webpack_require__(1);
__webpack_require__(2);
module.exports = __webpack_require__(146);
}, function(module, exports) {
var global = Function("return this")();
global.global = global;
}, function(module, exports, __webpack_require__) {
__webpack_require__(3);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var platform_common_1 = __webpack_require__(4);
var compiler_1 = __webpack_require__(141);
var core_1 = __webpack_require__(92);
if (global.___TS_UNUSED) {
(function() {
return core_1.InjectionToken;
})();
(function() {
return core_1.ViewEncapsulation;
})();
(function() {
return core_1.MissingTranslationStrategy;
})();
}
__webpack_require__(142);
var schema_registry_1 = __webpack_require__(144);
var resource_loader_1 = __webpack_require__(145);
exports.NS_COMPILER_PROVIDERS = [ compiler_1.COMPILER_PROVIDERS, {
provide: core_1.COMPILER_OPTIONS,
useValue: {
providers: [ {
provide: compiler_1.ResourceLoader,
useClass: resource_loader_1.FileSystemResourceLoader
}, {
provide: compiler_1.ElementSchemaRegistry,
useClass: schema_registry_1.NativeScriptElementSchemaRegistry
} ]
},
multi: true
} ];
var _platformNativeScriptDynamic = core_1.createPlatformFactory(compiler_1.platformCoreDynamic, "nativeScriptDynamic", platform_common_1.COMMON_PROVIDERS.concat(exports.NS_COMPILER_PROVIDERS));
function platformNativeScriptDynamic(options, extraProviders) {
if (options && options.bootInExistingPage === true) {
return _platformNativeScriptDynamic(extraProviders);
} else {
return new platform_common_1.NativeScriptPlatformRef(_platformNativeScriptDynamic(extraProviders), options);
}
}
exports.platformNativeScriptDynamic = platformNativeScriptDynamic;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
__webpack_require__(5);
__webpack_require__(18);
__webpack_require__(88);
__webpack_require__(89);
__webpack_require__(90);
__webpack_require__(91);
var core_1 = __webpack_require__(92);
if (global.___TS_UNUSED) {
(function() {
return core_1.OpaqueToken;
})();
}
var trace_1 = __webpack_require__(126);
var platform_providers_1 = __webpack_require__(127);
var application_1 = __webpack_require__(18);
var frame_1 = __webpack_require__(10);
var page_1 = __webpack_require__(128);
var text_view_1 = __webpack_require__(137);
__webpack_require__(138);
exports.onBeforeLivesync = new core_1.EventEmitter();
exports.onAfterLivesync = new core_1.EventEmitter();
var lastBootstrappedModule;
var NativeScriptSanitizer = function(_super) {
__extends(NativeScriptSanitizer, _super);
function NativeScriptSanitizer() {
return _super !== null && _super.apply(this, arguments) || this;
}
NativeScriptSanitizer.prototype.sanitize = function(_context, value) {
return value;
};
return NativeScriptSanitizer;
}(core_1.Sanitizer);
exports.NativeScriptSanitizer = NativeScriptSanitizer;
exports.COMMON_PROVIDERS = [ platform_providers_1.defaultPageFactoryProvider, {
provide: core_1.Sanitizer,
useClass: NativeScriptSanitizer
} ];
var NativeScriptPlatformRef = function(_super) {
__extends(NativeScriptPlatformRef, _super);
function NativeScriptPlatformRef(platform, appOptions) {
var _this = _super.call(this) || this;
_this.platform = platform;
_this.appOptions = appOptions;
return _this;
}
NativeScriptPlatformRef.prototype.bootstrapModuleFactory = function(moduleFactory) {
var _this = this;
this._bootstrapper = function() {
return _this.platform.bootstrapModuleFactory(moduleFactory);
};
this.bootstrapApp();
return null;
};
NativeScriptPlatformRef.prototype.bootstrapModule = function(moduleType, compilerOptions) {
var _this = this;
if (compilerOptions === void 0) {
compilerOptions = [];
}
this._bootstrapper = function() {
return _this.platform.bootstrapModule(moduleType, compilerOptions);
};
this.bootstrapApp();
return null;
};
NativeScriptPlatformRef.prototype.bootstrapApp = function() {
var _this = this;
global.__onLiveSyncCore = function() {
return _this.livesyncModule();
};
var mainPageEntry = this.createNavigationEntry(this._bootstrapper);
if (this.appOptions && typeof this.appOptions.cssFile === "string") {
application_1.setCssFileName(this.appOptions.cssFile);
}
application_1.start(mainPageEntry);
};
NativeScriptPlatformRef.prototype.livesyncModule = function() {
trace_1.rendererLog("ANGULAR LiveSync Started");
exports.onBeforeLivesync.next(lastBootstrappedModule ? lastBootstrappedModule.get() : null);
var mainPageEntry = this.createNavigationEntry(this._bootstrapper, function(compRef) {
return exports.onAfterLivesync.next(compRef);
}, function(error) {
return exports.onAfterLivesync.error(error);
}, true);
mainPageEntry.animated = false;
mainPageEntry.clearHistory = true;
var frame = frame_1.topmost();
if (frame) {
if (frame.currentPage && frame.currentPage.modal) {
frame.currentPage.modal.closeModal();
}
frame.navigate(mainPageEntry);
}
};
NativeScriptPlatformRef.prototype.onDestroy = function(callback) {
this.platform.onDestroy(callback);
};
Object.defineProperty(NativeScriptPlatformRef.prototype, "injector", {
get: function() {
return this.platform.injector;
},
enumerable: true,
configurable: true
});
NativeScriptPlatformRef.prototype.destroy = function() {
this.platform.destroy();
};
Object.defineProperty(NativeScriptPlatformRef.prototype, "destroyed", {
get: function() {
return this.platform.destroyed;
},
enumerable: true,
configurable: true
});
NativeScriptPlatformRef.prototype.createNavigationEntry = function(bootstrapAction, resolve, reject, isLivesync, isReboot) {
var _this = this;
if (isLivesync === void 0) {
isLivesync = false;
}
if (isReboot === void 0) {
isReboot = false;
}
var pageFactory = this.platform.injector.get(platform_providers_1.PAGE_FACTORY);
var navEntry = {
create: function() {
var page = pageFactory({
isBootstrap: true,
isLivesync: isLivesync
});
platform_providers_1.setRootPage(page);
if (_this.appOptions) {
page.actionBarHidden = _this.appOptions.startPageActionBarHidden;
}
var initHandler = function() {
page.off(page_1.Page.navigatingToEvent, initHandler);
trace_1.rendererLog("Page loaded");
trace_1.rendererLog("BOOTSTRAPPING...");
bootstrapAction().then(function(moduleRef) {
trace_1.rendererLog("ANGULAR BOOTSTRAP DONE.");
lastBootstrappedModule = new WeakRef(moduleRef);
if (resolve) {
resolve(moduleRef);
}
return moduleRef;
}, function(err) {
trace_1.rendererError("ERROR BOOTSTRAPPING ANGULAR");
var errorMessage = err.message + "\n\n" + err.stack;
trace_1.rendererError(errorMessage);
var view = new text_view_1.TextView();
view.text = errorMessage;
page.content = view;
if (reject) {
reject(err);
}
});
};
page.on(page_1.Page.navigatingToEvent, initHandler);
return page;
}
};
if (isReboot) {
navEntry.animated = false;
navEntry.clearHistory = true;
}
return navEntry;
};
NativeScriptPlatformRef.prototype.liveSyncApp = function() {};
return NativeScriptPlatformRef;
}(core_1.PlatformRef);
exports.NativeScriptPlatformRef = NativeScriptPlatformRef;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
__webpack_require__(6);
global.__extends = global.__extends || function(d, b) {
for (var p in b) {
if (b.hasOwnProperty(p)) {
d[p] = b[p];
}
}
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
global.moduleMerge = function(sourceExports, destExports) {
for (var key in sourceExports) {
destExports[key] = sourceExports[key];
}
};
var modules = new Map();
global.registerModule = function(name, loader) {
modules.set(name, loader);
};
global.moduleExists = function(name) {
return modules.has(name);
};
global.loadModule = function(name) {
var loader = modules.get(name);
if (loader) {
return loader();
} else {
var result_1 = global.require(name);
modules.set(name, function() {
return result_1;
});
return result_1;
}
};
global.zonedCallback = function(callback) {
if (global.zone) {
return global.zone.bind(callback);
}
if (global.Zone) {
return global.Zone.current.wrap(callback);
} else {
return callback;
}
};
global.registerModule("timer", function() {
return __webpack_require__(7);
});
global.registerModule("ui/dialogs", function() {
return __webpack_require__(8);
});
global.registerModule("xhr", function() {
return __webpack_require__(81);
});
global.registerModule("fetch", function() {
return __webpack_require__(86);
});
var __tnsGlobalMergedModules = new Map();
function registerOnGlobalContext(name, module) {
Object.defineProperty(global, name, {
get: function() {
var m = global.loadModule(module);
if (!__tnsGlobalMergedModules.has(module)) {
__tnsGlobalMergedModules.set(module, true);
global.moduleMerge(m, global);
}
var resolvedValue = m[name];
Object.defineProperty(this, name, {
value: resolvedValue,
configurable: true,
writable: true
});
return resolvedValue;
},
configurable: true
});
}
if (true) {
var timer = __webpack_require__(7);
global.setTimeout = timer.setTimeout;
global.clearTimeout = timer.clearTimeout;
global.setInterval = timer.setInterval;
global.clearInterval = timer.clearInterval;
var dialogs = __webpack_require__(8);
global.alert = dialogs.alert;
global.confirm = dialogs.confirm;
global.prompt = dialogs.prompt;
var xhr = __webpack_require__(81);
global.XMLHttpRequest = xhr.XMLHttpRequest;
global.FormData = xhr.FormData;
var fetch = __webpack_require__(86);
global.fetch = fetch.fetch;
global.Headers = fetch.Headers;
global.Request = fetch.Request;
global.Response = fetch.Response;
} else {
registerOnGlobalContext("setTimeout", "timer");
registerOnGlobalContext("clearTimeout", "timer");
registerOnGlobalContext("setInterval", "timer");
registerOnGlobalContext("clearInterval", "timer");
registerOnGlobalContext("alert", "ui/dialogs");
registerOnGlobalContext("confirm", "ui/dialogs");
registerOnGlobalContext("prompt", "ui/dialogs");
registerOnGlobalContext("XMLHttpRequest", "xhr");
registerOnGlobalContext("FormData", "xhr");
registerOnGlobalContext("fetch", "fetch");
}
if (global.android || true) {
var consoleModule = __webpack_require__(87);
global.console = new consoleModule.Console();
}
function Deprecated(target, key, descriptor) {
if (descriptor) {
var originalMethod = descriptor.value;
descriptor.value = function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i] = arguments[_i];
}
console.log(key + " is deprecated");
return originalMethod.apply(this, args);
};
return descriptor;
} else {
console.log((target && target.name || target) + " is deprecated");
return target;
}
}
exports.Deprecated = Deprecated;
global.Deprecated = Deprecated;
function Experimental(target, key, descriptor) {
if (descriptor) {
var originalMethod = descriptor.value;
descriptor.value = function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i] = arguments[_i];
}
console.log(key + " is experimental");
return originalMethod.apply(this, args);
};
return descriptor;
} else {
console.log((target && target.name || target) + " is experimental");
return target;
}
}
exports.Experimental = Experimental;
global.Experimental = Experimental;
}, function(module, exports) {
if (typeof global.__decorate !== "function") {
global.__decorate = function(decorators, target, key, desc) {
var c = arguments.length;
var r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof global.Reflect === "object" && typeof global.Reflect.decorate === "function") {
r = global.Reflect.decorate(decorators, target, key, desc);
} else {
for (var i = decorators.length - 1; i >= 0; i--) {
if (d = decorators[i]) {
r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
}
}
}
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
}
if (typeof global.__metadata !== "function") {
global.__metadata = function(k, v) {
if (typeof global.Reflect === "object" && typeof global.Reflect.metadata === "function") {
return global.Reflect.metadata(k, v);
}
};
}
if (typeof global.__param !== "function") {
global.__param = global && global.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
}
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var timeoutHandler;
var timeoutCallbacks = {};
var timerId = 0;
function createHandlerAndGetId() {
if (!timeoutHandler) {
timeoutHandler = new android.os.Handler(android.os.Looper.myLooper());
}
timerId++;
return timerId;
}
function setTimeout(callback, milliseconds) {
if (milliseconds === void 0) {
milliseconds = 0;
}
var id = createHandlerAndGetId();
var zoneBound = zonedCallback(callback);
var runnable = new java.lang.Runnable({
run: function() {
zoneBound();
if (timeoutCallbacks[id]) {
delete timeoutCallbacks[id];
}
}
});
if (!timeoutCallbacks[id]) {
timeoutCallbacks[id] = runnable;
}
timeoutHandler.postDelayed(runnable, long(milliseconds));
return id;
}
exports.setTimeout = setTimeout;
function clearTimeout(id) {
var index = id;
if (timeoutCallbacks[index]) {
timeoutHandler.removeCallbacks(timeoutCallbacks[index]);
delete timeoutCallbacks[index];
}
}
exports.clearTimeout = clearTimeout;
function setInterval(callback, milliseconds) {
if (milliseconds === void 0) {
milliseconds = 0;
}
var id = createHandlerAndGetId();
var handler = timeoutHandler;
var zoneBound = zonedCallback(callback);
var runnable = new java.lang.Runnable({
run: function() {
zoneBound();
if (timeoutCallbacks[id]) {
handler.postDelayed(runnable, long(milliseconds));
}
}
});
if (!timeoutCallbacks[id]) {
timeoutCallbacks[id] = runnable;
}
timeoutHandler.postDelayed(runnable, long(milliseconds));
return id;
}
exports.setInterval = setInterval;
exports.clearInterval = clearTimeout;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var dialogs_common_1 = __webpack_require__(9);
var application_1 = __webpack_require__(18);
__export(__webpack_require__(9));
function isString(value) {
return typeof value === "string";
}
function createAlertDialog(options) {
var alert = new android.app.AlertDialog.Builder(application_1.android.foregroundActivity);
alert.setTitle(options && isString(options.title) ? options.title : "");
alert.setMessage(options && isString(options.message) ? options.message : "");
if (options && options.cancelable === false) {
alert.setCancelable(false);
}
return alert;
}
function showDialog(builder) {
var dlg = builder.show();
var labelColor = dialogs_common_1.getLabelColor();
if (labelColor) {
var textViewId = dlg.getContext().getResources().getIdentifier("android:id/alertTitle", null, null);
if (textViewId) {
var tv = dlg.findViewById(textViewId);
if (tv) {
tv.setTextColor(labelColor.android);
}
}
var messageTextViewId = dlg.getContext().getResources().getIdentifier("android:id/message", null, null);
if (messageTextViewId) {
var messageTextView = dlg.findViewById(messageTextViewId);
if (messageTextView) {
messageTextView.setTextColor(labelColor.android);
}
}
}
var buttonColor = dialogs_common_1.getButtonColor();
var buttonBackgroundColor = dialogs_common_1.getButtonBackgroundColor();
if (buttonColor) {
var buttons = [];
for (var i = 0; i < 3; i++) {
var id = dlg.getContext().getResources().getIdentifier("android:id/button" + i, null, null);
buttons[i] = dlg.findViewById(id);
}
buttons.forEach(function(button) {
if (button) {
if (buttonColor) {
button.setTextColor(buttonColor.android);
}
if (buttonBackgroundColor) {
button.setBackgroundColor(buttonBackgroundColor.android);
}
}
});
}
}
function addButtonsToAlertDialog(alert, options, callback) {
if (!options) {
return;
}
if (options.okButtonText) {
alert.setPositiveButton(options.okButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(true);
}
}));
}
if (options.cancelButtonText) {
alert.setNegativeButton(options.cancelButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(false);
}
}));
}
if (options.neutralButtonText) {
alert.setNeutralButton(options.neutralButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(undefined);
}
}));
}
alert.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
callback(false);
}
}));
}
function alert(arg) {
return new Promise(function(resolve, reject) {
try {
var options = !dialogs_common_1.isDialogOptions(arg) ? {
title: dialogs_common_1.ALERT,
okButtonText: dialogs_common_1.OK,
message: arg + ""
} : arg;
var alert_1 = createAlertDialog(options);
alert_1.setPositiveButton(options.okButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
resolve();
}
}));
alert_1.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
resolve();
}
}));
showDialog(alert_1);
} catch (ex) {
reject(ex);
}
});
}
exports.alert = alert;
function confirm(arg) {
return new Promise(function(resolve, reject) {
try {
var options = !dialogs_common_1.isDialogOptions(arg) ? {
title: dialogs_common_1.CONFIRM,
okButtonText: dialogs_common_1.OK,
cancelButtonText: dialogs_common_1.CANCEL,
message: arg + ""
} : arg;
var alert_2 = createAlertDialog(options);
addButtonsToAlertDialog(alert_2, options, function(result) {
resolve(result);
});
showDialog(alert_2);
} catch (ex) {
reject(ex);
}
});
}
exports.confirm = confirm;
function prompt(arg) {
var options;
var defaultOptions = {
title: dialogs_common_1.PROMPT,
okButtonText: dialogs_common_1.OK,
cancelButtonText: dialogs_common_1.CANCEL,
inputType: dialogs_common_1.inputType.text
};
if (arguments.length === 1) {
if (isString(arg)) {
options = defaultOptions;
options.message = arg;
} else {
options = arg;
}
} else if (arguments.length === 2) {
if (isString(arguments[0]) && isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.defaultText = arguments[1];
}
}
return new Promise(function(resolve, reject) {
try {
var alert_3 = createAlertDialog(options);
var input_1 = new android.widget.EditText(application_1.android.foregroundActivity);
if (options) {
if (options.inputType === dialogs_common_1.inputType.password) {
input_1.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
} else if (options.inputType === dialogs_common_1.inputType.email) {
input_1.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
}
}
input_1.setText(options && options.defaultText || "");
alert_3.setView(input_1);
var getText_1 = function() {
return input_1.getText().toString();
};
addButtonsToAlertDialog(alert_3, options, function(r) {
resolve({
result: r,
text: getText_1()
});
});
showDialog(alert_3);
} catch (ex) {
reject(ex);
}
});
}
exports.prompt = prompt;
function login(arg) {
var options;
var defaultOptions = {
title: dialogs_common_1.LOGIN,
okButtonText: dialogs_common_1.OK,
cancelButtonText: dialogs_common_1.CANCEL
};
if (arguments.length === 1) {
if (isString(arguments[0])) {
options = defaultOptions;
options.message = arguments[0];
} else {
options = arguments[0];
}
} else if (arguments.length === 2) {
if (isString(arguments[0]) && isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.userName = arguments[1];
}
} else if (arguments.length === 3) {
if (isString(arguments[0]) && isString(arguments[1]) && isString(arguments[2])) {
options = defaultOptions;
options.message = arguments[0];
options.userName = arguments[1];
options.password = arguments[2];
}
}
return new Promise(function(resolve, reject) {
try {
var context = application_1.android.foregroundActivity;
var alert_4 = createAlertDialog(options);
var userNameInput_1 = new android.widget.EditText(context);
userNameInput_1.setText(options.userName ? options.userName : "");
var passwordInput_1 = new android.widget.EditText(context);
passwordInput_1.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
passwordInput_1.setText(options.password ? options.password : "");
var layout = new android.widget.LinearLayout(context);
layout.setOrientation(1);
layout.addView(userNameInput_1);
layout.addView(passwordInput_1);
alert_4.setView(layout);
addButtonsToAlertDialog(alert_4, options, function(r) {
resolve({
result: r,
userName: userNameInput_1.getText().toString(),
password: passwordInput_1.getText().toString()
});
});
showDialog(alert_4);
} catch (ex) {
reject(ex);
}
});
}
exports.login = login;
function action(arg) {
var options;
var defaultOptions = {
title: null,
cancelButtonText: dialogs_common_1.CANCEL
};
if (arguments.length === 1) {
if (isString(arguments[0])) {
options = defaultOptions;
options.message = arguments[0];
} else {
options = arguments[0];
}
} else if (arguments.length === 2) {
if (isString(arguments[0]) && isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.cancelButtonText = arguments[1];
}
} else if (arguments.length === 3) {
if (isString(arguments[0]) && isString(arguments[1]) && typeof arguments[2] !== "undefined") {
options = defaultOptions;
options.message = arguments[0];
options.cancelButtonText = arguments[1];
options.actions = arguments[2];
}
}
return new Promise(function(resolve, reject) {
try {
var activity = application_1.android.foregroundActivity || application_1.android.startActivity;
var alert_5 = new android.app.AlertDialog.Builder(activity);
var message = options && isString(options.message) ? options.message : "";
var title = options && isString(options.title) ? options.title : "";
if (options && options.cancelable === false) {
alert_5.setCancelable(false);
}
if (title) {
alert_5.setTitle(title);
if (!options.actions) {
alert_5.setMessage(message);
}
} else {
alert_5.setTitle(message);
}
if (options.actions) {
alert_5.setItems(options.actions, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, which) {
resolve(options.actions[which]);
}
}));
}
if (isString(options.cancelButtonText)) {
alert_5.setNegativeButton(options.cancelButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
resolve(options.cancelButtonText);
}
}));
}
alert_5.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
if (isString(options.cancelButtonText)) {
resolve(options.cancelButtonText);
} else {
resolve("");
}
}
}));
showDialog(alert_5);
} catch (ex) {
reject(ex);
}
});
}
exports.action = action;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
exports.STRING = "string";
exports.PROMPT = "Prompt";
exports.CONFIRM = "Confirm";
exports.ALERT = "Alert";
exports.LOGIN = "Login";
exports.OK = "OK";
exports.CANCEL = "Cancel";
var inputType;
(function(inputType) {
inputType.text = "text";
inputType.password = "password";
inputType.email = "email";
})(inputType = exports.inputType || (exports.inputType = {}));
var frame;
function getCurrentPage() {
if (!frame) {
frame = __webpack_require__(10);
}
var topmostFrame = frame.topmost();
if (topmostFrame) {
return topmostFrame.currentPage;
}
return undefined;
}
exports.getCurrentPage = getCurrentPage;
function applySelectors(view) {
var currentPage = getCurrentPage();
if (currentPage) {
var styleScope = currentPage._getStyleScope();
if (styleScope) {
styleScope.applySelectors(view);
}
}
}
var buttonColor;
var buttonBackgroundColor;
function getButtonColors() {
var Button = __webpack_require__(69).Button;
var btn = new Button();
applySelectors(btn);
buttonColor = btn.color;
buttonBackgroundColor = btn.backgroundColor;
btn.onUnloaded();
}
function getButtonColor() {
if (!buttonColor) {
getButtonColors();
}
return buttonColor;
}
exports.getButtonColor = getButtonColor;
function getButtonBackgroundColor() {
if (!buttonBackgroundColor) {
getButtonColors();
}
return buttonBackgroundColor;
}
exports.getButtonBackgroundColor = getButtonBackgroundColor;
var textFieldColor;
function getTextFieldColor() {
if (!textFieldColor) {
var TextField = __webpack_require__(76).TextField;
var tf = new TextField();
applySelectors(tf);
textFieldColor = tf.color;
tf.onUnloaded();
}
return textFieldColor;
}
exports.getTextFieldColor = getTextFieldColor;
var labelColor;
function getLabelColor() {
if (!labelColor) {
var Label = __webpack_require__(80).Label;
var lbl = new Label();
applySelectors(lbl);
labelColor = lbl.color;
lbl.onUnloaded();
}
return labelColor;
}
exports.getLabelColor = getLabelColor;
function isDialogOptions(arg) {
return arg && (arg.message || arg.title);
}
exports.isDialogOptions = isDialogOptions;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var frame_common_1 = __webpack_require__(11);
var constants_1 = __webpack_require__(63);
var transitionModule = __webpack_require__(64);
__export(__webpack_require__(11));
var HIDDEN = "_hidden";
var INTENT_EXTRA = "com.tns.activity";
var FRAMEID = "_frameId";
var CALLBACKS = "_callbacks";
var navDepth = -1;
var fragmentId = -1;
var activityInitialized = false;
function onFragmentShown(fragment) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("SHOWN " + fragment, frame_common_1.traceCategories.NativeLifecycle);
}
var callbacks = fragment[CALLBACKS];
if (callbacks.clearHistory) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite(fragment + " has been shown, but it is being cleared from history. Returning.", frame_common_1.traceCategories.NativeLifecycle);
}
return null;
}
var frame = callbacks.frame;
var entry = callbacks.entry;
var page = entry.resolvedPage;
page._fragmentTag = entry.fragmentTag;
var currentNavigationContext;
var navigationQueue = frame._navigationQueue;
for (var i = 0; i < navigationQueue.length; i++) {
if (navigationQueue[i].entry === entry) {
currentNavigationContext = navigationQueue[i];
break;
}
}
var isBack = currentNavigationContext ? currentNavigationContext.isBackNavigation : false;
frame._addView(page);
if (!frame.isLoaded) {
frame._currentEntry = entry;
frame.onLoaded();
}
transitionModule._onFragmentShown(fragment, isBack);
}
function onFragmentHidden(fragment, destroyed) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("HIDDEN " + fragment + "; destroyed: " + destroyed, frame_common_1.traceCategories.NativeLifecycle);
}
var callbacks = fragment[CALLBACKS];
var isBack = callbacks.entry.isBack;
callbacks.entry.isBack = undefined;
callbacks.entry.resolvedPage._fragmentTag = undefined;
transitionModule._onFragmentHidden(fragment, isBack, destroyed);
}
var Frame = function(_super) {
__extends(Frame, _super);
function Frame() {
var _this = _super.call(this) || this;
_this._containerViewId = -1;
_this._android = new AndroidFrame(_this);
return _this;
}
Object.defineProperty(Frame, "defaultAnimatedNavigation", {
get: function() {
return frame_common_1.FrameBase.defaultAnimatedNavigation;
},
set: function(value) {
frame_common_1.FrameBase.defaultAnimatedNavigation = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame, "defaultTransition", {
get: function() {
return frame_common_1.FrameBase.defaultTransition;
},
set: function(value) {
frame_common_1.FrameBase.defaultTransition = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "containerViewId", {
get: function() {
return this._containerViewId;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Frame.prototype._navigateCore = function(backstackEntry) {
_super.prototype._navigateCore.call(this, backstackEntry);
var activity = this._android.activity;
if (!activity) {
var currentActivity = this._android.currentActivity;
if (currentActivity) {
startActivity(currentActivity, this._android.frameId);
}
this._delayedNavigationEntry = backstackEntry;
return;
}
var manager = activity.getFragmentManager();
var currentFragment;
if (this._currentEntry) {
this._currentEntry.isNavigation = true;
currentFragment = manager.findFragmentByTag(this._currentEntry.fragmentTag);
}
var clearHistory = backstackEntry.entry.clearHistory;
if (clearHistory) {
navDepth = -1;
}
navDepth++;
fragmentId++;
var newFragmentTag = "fragment" + fragmentId + "[" + navDepth + "]";
ensureFragmentClass();
var newFragment = new fragmentClass();
var args = new android.os.Bundle();
args.putInt(FRAMEID, this._android.frameId);
newFragment.setArguments(args);
setFragmentCallbacks(newFragment);
var callbacks = newFragment[CALLBACKS];
callbacks.frame = this;
callbacks.entry = backstackEntry;
backstackEntry.isNavigation = true;
backstackEntry.fragmentTag = newFragmentTag;
backstackEntry.navDepth = navDepth;
var fragmentTransaction = manager.beginTransaction();
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("BEGIN TRANSACTION " + fragmentTransaction, frame_common_1.traceCategories.Navigation);
}
var animated = this._getIsAnimatedNavigation(backstackEntry.entry);
var navigationTransition = this._getNavigationTransition(backstackEntry.entry);
if (currentFragment) {
transitionModule._clearForwardTransitions(currentFragment);
if (animated && navigationTransition) {
transitionModule._setAndroidFragmentTransitions(this.android.cachePagesOnNavigate, navigationTransition, currentFragment, newFragment, fragmentTransaction);
}
}
var length = manager.getBackStackEntryCount();
var emptyNativeBackStack = clearHistory && length > 0;
if (emptyNativeBackStack) {
for (var i = 0; i < length; i++) {
var fragmentToRemove = manager.findFragmentByTag(manager.getBackStackEntryAt(i).getName());
Frame._clearHistory(fragmentToRemove);
}
if (currentFragment) {
transitionModule._prepareCurrentFragmentForClearHistory(currentFragment);
}
var firstEntryName = manager.getBackStackEntryAt(0).getName();
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("POP BACK STACK " + firstEntryName, frame_common_1.traceCategories.Navigation);
}
manager.popBackStackImmediate(firstEntryName, android.app.FragmentManager.POP_BACK_STACK_INCLUSIVE);
}
if (currentFragment && !emptyNativeBackStack) {
if (this.android.cachePagesOnNavigate && !clearHistory) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("\tHIDE " + currentFragment, frame_common_1.traceCategories.Navigation);
}
fragmentTransaction.hide(currentFragment);
} else {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("\tREMOVE " + currentFragment, frame_common_1.traceCategories.Navigation);
}
fragmentTransaction.remove(currentFragment);
}
}
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("\tADD " + newFragmentTag + "<" + callbacks.entry.resolvedPage + ">", frame_common_1.traceCategories.Navigation);
}
fragmentTransaction.add(this.containerViewId, newFragment, newFragmentTag);
if (this.backStack.length > 0 && currentFragment && !clearHistory) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("\tADD TO BACK STACK " + currentFragment, frame_common_1.traceCategories.Navigation);
}
fragmentTransaction.addToBackStack(this._currentEntry.fragmentTag);
}
if (currentFragment) {
ensureAnimationFixed();
var trans = void 0;
if (this.android.cachePagesOnNavigate && animationFixed < 0 && !navigationTransition) {
trans = android.app.FragmentTransaction.TRANSIT_NONE;
} else {
trans = animated ? android.app.FragmentTransaction.TRANSIT_FRAGMENT_OPEN : android.app.FragmentTransaction.TRANSIT_NONE;
}
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("\tSET TRANSITION " + (trans === 0 ? "NONE" : "OPEN"), frame_common_1.traceCategories.Navigation);
}
fragmentTransaction.setTransition(trans);
}
fragmentTransaction.commit();
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("END TRANSACTION " + fragmentTransaction, frame_common_1.traceCategories.Navigation);
}
};
Frame._clearHistory = function(fragment) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("CLEAR HISTORY FOR " + fragment, frame_common_1.traceCategories.Navigation);
}
var callbacks = fragment[CALLBACKS];
callbacks.clearHistory = true;
transitionModule._clearBackwardTransitions(fragment);
transitionModule._clearForwardTransitions(fragment);
transitionModule._removePageNativeViewFromAndroidParent(callbacks.entry.resolvedPage);
};
Frame.prototype._goBackCore = function(backstackEntry) {
_super.prototype._goBackCore.call(this, backstackEntry);
navDepth = backstackEntry.navDepth;
backstackEntry.isNavigation = true;
if (this._currentEntry) {
this._currentEntry.isBack = true;
this._currentEntry.isNavigation = true;
}
var manager = this._android.activity.getFragmentManager();
if (manager.getBackStackEntryCount() > 0) {
manager.popBackStack(backstackEntry.fragmentTag, android.app.FragmentManager.POP_BACK_STACK_INCLUSIVE);
}
};
Frame.prototype.createNativeView = function() {
var root = new org.nativescript.widgets.ContentLayout(this._context);
if (this._containerViewId < 0) {
this._containerViewId = android.view.View.generateViewId();
}
return root;
};
Frame.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
this._android.rootViewGroup = this.nativeView;
this._android.rootViewGroup.setId(this._containerViewId);
};
Frame.prototype.disposeNativeView = function() {
this._android.rootViewGroup = null;
_super.prototype.disposeNativeView.call(this);
};
Frame.prototype._popFromFrameStack = function() {
if (!this._isInFrameStack) {
return;
}
_super.prototype._popFromFrameStack.call(this);
if (this._android.hasOwnActivity) {
this._android.activity.finish();
}
};
Frame.prototype._printNativeBackStack = function() {
if (!this._android.activity) {
return;
}
var manager = this._android.activity.getFragmentManager();
var length = manager.getBackStackEntryCount();
var i = length - 1;
console.log("Fragment Manager Back Stack: ");
while (i >= 0) {
var fragment = manager.findFragmentByTag(manager.getBackStackEntryAt(i--).getName());
console.log("\t" + fragment);
}
};
Frame.prototype._getNavBarVisible = function(page) {
if (page.actionBarHidden !== undefined) {
return !page.actionBarHidden;
}
if (this._android && this._android.showActionBar !== undefined) {
return this._android.showActionBar;
}
return true;
};
Frame.prototype._processNavigationContext = function(navigationContext) {
var _this = this;
var activity = this._android.activity;
if (activity) {
var isForegroundActivity = activity === frame_common_1.application.android.foregroundActivity;
var isPaused = frame_common_1.application.android.paused;
if (activity && !isForegroundActivity || isForegroundActivity && isPaused) {
var weakActivity_1 = new WeakRef(activity);
var resume_1 = function(args) {
var weakActivityInstance = weakActivity_1.get();
var isCurrent = args.activity === weakActivityInstance;
if (!weakActivityInstance) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("Frame _processNavigationContext: Drop For Activity GC-ed", frame_common_1.traceCategories.Navigation);
}
unsubscribe_1();
return;
}
if (isCurrent) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("Frame _processNavigationContext: Activity.Resumed, Continue", frame_common_1.traceCategories.Navigation);
}
_super.prototype._processNavigationContext.call(_this, navigationContext);
unsubscribe_1();
}
};
var unsubscribe_1 = function() {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("Frame _processNavigationContext: Unsubscribe from Activity.Resumed", frame_common_1.traceCategories.Navigation);
}
frame_common_1.application.android.off(frame_common_1.application.AndroidApplication.activityResumedEvent, resume_1);
frame_common_1.application.android.off(frame_common_1.application.AndroidApplication.activityStoppedEvent, unsubscribe_1);
frame_common_1.application.android.off(frame_common_1.application.AndroidApplication.activityDestroyedEvent, unsubscribe_1);
};
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("Frame._processNavigationContext: Subscribe for Activity.Resumed", frame_common_1.traceCategories.Navigation);
}
frame_common_1.application.android.on(frame_common_1.application.AndroidApplication.activityResumedEvent, resume_1);
frame_common_1.application.android.on(frame_common_1.application.AndroidApplication.activityStoppedEvent, unsubscribe_1);
frame_common_1.application.android.on(frame_common_1.application.AndroidApplication.activityDestroyedEvent, unsubscribe_1);
return;
}
}
_super.prototype._processNavigationContext.call(this, navigationContext);
};
return Frame;
}(frame_common_1.FrameBase);
exports.Frame = Frame;
var framesCounter = 0;
var framesCache = new Array();
var AndroidFrame = function(_super) {
__extends(AndroidFrame, _super);
function AndroidFrame(owner) {
var _this = _super.call(this) || this;
_this.hasOwnActivity = false;
_this._showActionBar = true;
_this._owner = owner;
_this.frameId = framesCounter++;
framesCache.push(new WeakRef(_this));
return _this;
}
Object.defineProperty(AndroidFrame.prototype, "showActionBar", {
get: function() {
return this._showActionBar;
},
set: function(value) {
if (this._showActionBar !== value) {
this._showActionBar = value;
if (this.owner.currentPage) {
this.owner.currentPage.actionBar.update();
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "activity", {
get: function() {
var activity = this.owner._context;
if (activity) {
return activity;
}
var currView = this._owner.parent;
while (currView) {
if (currView instanceof Frame) {
return currView.android.activity;
}
currView = currView.parent;
}
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "actionBar", {
get: function() {
var activity = this.currentActivity;
if (!activity) {
return undefined;
}
var bar = activity.getActionBar();
if (!bar) {
return undefined;
}
return bar;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "currentActivity", {
get: function() {
var activity = this.activity;
if (activity) {
return activity;
}
var frames = frame_common_1.stack();
for (var length_1 = frames.length, i = length_1 - 1; i >= 0; i--) {
activity = frames[i].android.activity;
if (activity) {
return activity;
}
}
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "owner", {
get: function() {
return this._owner;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "cachePagesOnNavigate", {
get: function() {
return this._cachePagesOnNavigate;
},
set: function(value) {
if (this._cachePagesOnNavigate !== value) {
if (this._owner.backStack.length > 0) {
this._owner._printFrameBackStack();
this._owner._printNativeBackStack();
console.log("currentPage: " + this._owner.currentPage);
throw new Error("Cannot set cachePagesOnNavigate if there are items in the back stack.");
}
this._cachePagesOnNavigate = value;
}
},
enumerable: true,
configurable: true
});
AndroidFrame.prototype.canGoBack = function() {
if (!this.activity) {
return false;
}
return this.activity.getIntent().getAction() !== android.content.Intent.ACTION_MAIN;
};
AndroidFrame.prototype.fragmentForPage = function(page) {
if (!page) {
return undefined;
}
var tag = page._fragmentTag;
if (tag) {
var manager = this.activity.getFragmentManager();
return manager.findFragmentByTag(tag);
}
return undefined;
};
return AndroidFrame;
}(frame_common_1.Observable);
function findPageForFragment(fragment, frame) {
var fragmentTag = fragment.getTag();
var page;
var entry;
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("Finding page for " + fragmentTag + ".", frame_common_1.traceCategories.NativeLifecycle);
}
if (fragmentTag === constants_1.DIALOG_FRAGMENT_TAG) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("No need to find page for dialog fragment.", frame_common_1.traceCategories.NativeLifecycle);
}
return;
}
if (frame._currentEntry && frame._currentEntry.fragmentTag === fragmentTag) {
page = frame.currentPage;
entry = frame._currentEntry;
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("Current page matches fragment " + fragmentTag + ".", frame_common_1.traceCategories.NativeLifecycle);
}
} else {
var backStack = frame.backStack;
for (var i = 0; i < backStack.length; i++) {
if (backStack[i].fragmentTag === fragmentTag) {
entry = backStack[i];
break;
}
}
if (entry) {
page = entry.resolvedPage;
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("Found " + page + " for " + fragmentTag, frame_common_1.traceCategories.NativeLifecycle);
}
}
}
if (page) {
var callbacks = fragment[CALLBACKS];
callbacks.frame = frame;
callbacks.entry = entry;
} else {
throw new Error("Could not find a page for " + fragmentTag + ".");
}
}
function startActivity(activity, frameId) {
var intent = new android.content.Intent(activity, activity.getClass());
intent.setAction(android.content.Intent.ACTION_DEFAULT);
intent.putExtra(INTENT_EXTRA, frameId);
activity.startActivity(intent);
}
function getFrameById(frameId) {
for (var i = 0; i < framesCache.length; i++) {
var aliveFrame = framesCache[i].get();
if (aliveFrame && aliveFrame.frameId === frameId) {
return aliveFrame.owner;
}
}
return null;
}
var animationFixed;
function ensureAnimationFixed() {
if (!animationFixed) {
animationFixed = android.os.Build.VERSION.SDK_INT >= 19 ? 1 : -1;
}
}
function ensureFragmentClass() {
if (fragmentClass) {
return;
}
__webpack_require__(68);
if (!fragmentClass) {
throw new Error("Failed to initialize the extended android.app.Fragment class");
}
}
var fragmentClass;
function setFragmentClass(clazz) {
if (fragmentClass) {
throw new Error("Fragment class already initialized");
}
fragmentClass = clazz;
}
exports.setFragmentClass = setFragmentClass;
var FragmentCallbacksImplementation = function() {
function FragmentCallbacksImplementation() {}
FragmentCallbacksImplementation.prototype.onHiddenChanged = function(fragment, hidden, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite(fragment + ".onHiddenChanged(" + hidden + ")", frame_common_1.traceCategories.NativeLifecycle);
}
superFunc.call(fragment, hidden);
if (hidden) {
onFragmentHidden(fragment, false);
} else {
onFragmentShown(fragment);
}
};
FragmentCallbacksImplementation.prototype.onCreateAnimator = function(fragment, transit, enter, nextAnim, superFunc) {
var nextAnimString;
switch (nextAnim) {
case -10:
nextAnimString = "enter";
break;

case -20:
nextAnimString = "exit";
break;

case -30:
nextAnimString = "popEnter";
break;

case -40:
nextAnimString = "popExit";
break;
}
var animator = transitionModule._onFragmentCreateAnimator(fragment, nextAnim);
if (!animator) {
animator = superFunc.call(fragment, transit, enter, nextAnim);
}
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite(fragment + ".onCreateAnimator(" + transit + ", " + (enter ? "enter" : "exit") + ", " + nextAnimString + "): " + animator, frame_common_1.traceCategories.NativeLifecycle);
}
return animator;
};
FragmentCallbacksImplementation.prototype.onCreate = function(fragment, savedInstanceState, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite(fragment + ".onCreate(" + savedInstanceState + ")", frame_common_1.traceCategories.NativeLifecycle);
}
superFunc.call(fragment, savedInstanceState);
if (!this.entry) {
var frameId = fragment.getArguments().getInt(FRAMEID);
var frame = getFrameById(frameId);
if (frame) {
this.frame = frame;
} else {
throw new Error("Cannot find Frame for " + fragment);
}
findPageForFragment(fragment, this.frame);
}
};
FragmentCallbacksImplementation.prototype.onCreateView = function(fragment, inflater, container, savedInstanceState, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite(fragment + ".onCreateView(inflater, container, " + savedInstanceState + ")", frame_common_1.traceCategories.NativeLifecycle);
}
var entry = this.entry;
var page = entry.resolvedPage;
try {
if (savedInstanceState && savedInstanceState.getBoolean(HIDDEN, false)) {
fragment.getFragmentManager().beginTransaction().hide(fragment).commit();
this.frame._addView(page);
} else {
onFragmentShown(fragment);
}
} catch (ex) {
var label = new android.widget.TextView(container.getContext());
label.setText(ex.message + ", " + ex.stackTrace);
return label;
}
return page.nativeView;
};
FragmentCallbacksImplementation.prototype.onSaveInstanceState = function(fragment, outState, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite(fragment + ".onSaveInstanceState(" + outState + ")", frame_common_1.traceCategories.NativeLifecycle);
}
superFunc.call(fragment, outState);
if (fragment.isHidden()) {
outState.putBoolean(HIDDEN, true);
}
};
FragmentCallbacksImplementation.prototype.onDestroyView = function(fragment, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite(fragment + ".onDestroyView()", frame_common_1.traceCategories.NativeLifecycle);
}
superFunc.call(fragment);
onFragmentHidden(fragment, true);
};
FragmentCallbacksImplementation.prototype.onDestroy = function(fragment, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite(fragment + ".onDestroy()", frame_common_1.traceCategories.NativeLifecycle);
}
superFunc.call(fragment);
};
FragmentCallbacksImplementation.prototype.toStringOverride = function(fragment, superFunc) {
return fragment.getTag() + "<" + (this.entry ? this.entry.resolvedPage : "") + ">";
};
return FragmentCallbacksImplementation;
}();
var ActivityCallbacksImplementation = function() {
function ActivityCallbacksImplementation() {}
ActivityCallbacksImplementation.prototype.onCreate = function(activity, savedInstanceState, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("Activity.onCreate(" + savedInstanceState + ")", frame_common_1.traceCategories.NativeLifecycle);
}
var app = frame_common_1.application.android;
var intent = activity.getIntent();
var launchArgs = {
eventName: frame_common_1.application.launchEvent,
object: app,
android: intent
};
frame_common_1.application.notify(launchArgs);
var frameId = -1;
var rootView = launchArgs.root;
var extras = intent.getExtras();
if (extras) {
frameId = extras.getInt(INTENT_EXTRA, -1);
}
if (savedInstanceState && frameId < 0) {
frameId = savedInstanceState.getInt(INTENT_EXTRA, -1);
}
var frame;
var navParam;
if (frameId >= 0) {
rootView = getFrameById(frameId);
}
if (!rootView) {
navParam = frame_common_1.application.getMainEntry();
if (navParam) {
frame = new Frame();
} else {
throw new Error("A Frame must be used to navigate to a Page.");
}
rootView = frame;
}
var isRestart = !!savedInstanceState && activityInitialized;
superFunc.call(activity, isRestart ? savedInstanceState : null);
this._rootView = rootView;
rootView._setupUI(activity);
activity.setContentView(rootView.nativeView, new org.nativescript.widgets.CommonLayoutParams());
if (frame) {
frame.navigate(navParam);
}
activityInitialized = true;
};
ActivityCallbacksImplementation.prototype.onSaveInstanceState = function(activity, outState, superFunc) {
superFunc.call(activity, outState);
var view = this._rootView;
if (view instanceof Frame) {
outState.putInt(INTENT_EXTRA, view.android.frameId);
}
};
ActivityCallbacksImplementation.prototype.onStart = function(activity, superFunc) {
superFunc.call(activity);
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("NativeScriptActivity.onStart();", frame_common_1.traceCategories.NativeLifecycle);
}
var rootView = this._rootView;
if (rootView && !rootView.isLoaded) {
rootView.onLoaded();
}
};
ActivityCallbacksImplementation.prototype.onStop = function(activity, superFunc) {
superFunc.call(activity);
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("NativeScriptActivity.onStop();", frame_common_1.traceCategories.NativeLifecycle);
}
var rootView = this._rootView;
if (rootView && rootView.isLoaded) {
rootView.onUnloaded();
}
};
ActivityCallbacksImplementation.prototype.onDestroy = function(activity, superFunc) {
var rootView = this._rootView;
if (rootView && rootView._context) {
rootView._tearDownUI(true);
}
superFunc.call(activity);
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("NativeScriptActivity.onDestroy();", frame_common_1.traceCategories.NativeLifecycle);
}
var exitArgs = {
eventName: frame_common_1.application.exitEvent,
object: frame_common_1.application.android,
android: activity
};
frame_common_1.application.notify(exitArgs);
};
ActivityCallbacksImplementation.prototype.onBackPressed = function(activity, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("NativeScriptActivity.onBackPressed;", frame_common_1.traceCategories.NativeLifecycle);
}
var args = {
eventName: "activityBackPressed",
object: frame_common_1.application.android,
activity: activity,
cancel: false
};
frame_common_1.application.android.notify(args);
if (args.cancel) {
return;
}
if (!frame_common_1.goBack()) {
superFunc.call(activity);
}
};
ActivityCallbacksImplementation.prototype.onRequestPermissionsResult = function(activity, requestCode, permissions, grantResults, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("NativeScriptActivity.onRequestPermissionsResult;", frame_common_1.traceCategories.NativeLifecycle);
}
frame_common_1.application.android.notify({
eventName: "activityRequestPermissions",
object: frame_common_1.application.android,
activity: activity,
requestCode: requestCode,
permissions: permissions,
grantResults: grantResults
});
};
ActivityCallbacksImplementation.prototype.onActivityResult = function(activity, requestCode, resultCode, data, superFunc) {
superFunc.call(activity, requestCode, resultCode, data);
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("NativeScriptActivity.onActivityResult(" + requestCode + ", " + resultCode + ", " + data + ")", frame_common_1.traceCategories.NativeLifecycle);
}
frame_common_1.application.android.notify({
eventName: "activityResult",
object: frame_common_1.application.android,
activity: activity,
requestCode: requestCode,
resultCode: resultCode,
intent: data
});
};
return ActivityCallbacksImplementation;
}();
function setActivityCallbacks(activity) {
activity[CALLBACKS] = new ActivityCallbacksImplementation();
}
exports.setActivityCallbacks = setActivityCallbacks;
function setFragmentCallbacks(fragment) {
fragment[CALLBACKS] = new FragmentCallbacksImplementation();
}
exports.setFragmentCallbacks = setFragmentCallbacks;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
var file_name_resolver_1 = __webpack_require__(58);
var file_system_1 = __webpack_require__(22);
var builder_1 = __webpack_require__(59);
var application = __webpack_require__(18);
exports.application = application;
__export(__webpack_require__(12));
function onLivesync(args) {
setTimeout(function() {
var g = global;
if (g.errorPage) {
g.errorPage.closeModal();
g.errorPage = undefined;
}
try {
reloadPage();
} catch (ex) {
g.errorPage = builder_1.parse('<Page><ScrollView><Label text="' + ex + '" textWrap="true" style="color: red;" /></ScrollView></Page>');
g.errorPage.showModal();
}
});
}
application.on("livesync", onLivesync);
var frameStack = [];
function buildEntryFromArgs(arg) {
var entry;
if (typeof arg === "string") {
entry = {
moduleName: arg
};
} else if (typeof arg === "function") {
entry = {
create: arg
};
} else {
entry = arg;
}
return entry;
}
function reloadPage() {
var frame = topmost();
if (frame) {
if (frame.currentPage && frame.currentPage.modal) {
frame.currentPage.modal.closeModal();
}
var currentEntry = frame._currentEntry.entry;
var newEntry = {
animated: false,
clearHistory: true,
context: currentEntry.context,
create: currentEntry.create,
moduleName: currentEntry.moduleName,
backstackVisible: currentEntry.backstackVisible
};
frame.navigate(newEntry);
}
}
exports.reloadPage = reloadPage;
function resolvePageFromEntry(entry) {
var page;
if (entry.create) {
page = entry.create();
if (!page) {
throw new Error("Failed to create Page with entry.create() function.");
}
page._refreshCss();
} else if (entry.moduleName) {
var currentAppPath = file_system_1.knownFolders.currentApp().path;
var moduleNamePath = file_system_1.path.join(currentAppPath, entry.moduleName);
view_1.traceWrite("frame module path: " + moduleNamePath, view_1.traceCategories.Navigation);
view_1.traceWrite("frame module module: " + entry.moduleName, view_1.traceCategories.Navigation);
var moduleExports = void 0;
if (global.moduleExists(entry.moduleName)) {
if (view_1.traceEnabled()) {
view_1.traceWrite("Loading pre-registered JS module: " + entry.moduleName, view_1.traceCategories.Navigation);
}
moduleExports = global.loadModule(entry.moduleName);
} else {
var moduleExportsResolvedPath = file_name_resolver_1.resolveFileName(moduleNamePath, "js");
if (moduleExportsResolvedPath) {
if (view_1.traceEnabled()) {
view_1.traceWrite("Loading JS file: " + moduleExportsResolvedPath, view_1.traceCategories.Navigation);
}
moduleExportsResolvedPath = moduleExportsResolvedPath.substr(0, moduleExportsResolvedPath.length - 3);
moduleExports = global.loadModule(moduleExportsResolvedPath);
}
}
if (moduleExports && moduleExports.createPage) {
if (view_1.traceEnabled()) {
view_1.traceWrite("Calling createPage()", view_1.traceCategories.Navigation);
}
page = moduleExports.createPage();
var cssFileName = file_name_resolver_1.resolveFileName(moduleNamePath, "css");
if (cssFileName) {
page.addCssFile(cssFileName);
}
} else {
page = pageFromBuilder(moduleNamePath, moduleExports);
}
if (!page) {
throw new Error("Failed to load Page from entry.moduleName: " + entry.moduleName);
}
}
return page;
}
exports.resolvePageFromEntry = resolvePageFromEntry;
function pageFromBuilder(moduleNamePath, moduleExports) {
var page;
var fileName = file_name_resolver_1.resolveFileName(moduleNamePath, "xml");
if (fileName) {
if (view_1.traceEnabled()) {
view_1.traceWrite("Loading XML file: " + fileName, view_1.traceCategories.Navigation);
}
page = builder_1.loadPage(moduleNamePath, fileName, moduleExports);
}
return page;
}
var FrameBase = function(_super) {
__extends(FrameBase, _super);
function FrameBase() {
var _this = _super.call(this) || this;
_this._isInFrameStack = false;
_this._backStack = new Array();
_this._navigationQueue = new Array();
return _this;
}
FrameBase.prototype.canGoBack = function() {
return this._backStack.length > 0;
};
FrameBase.prototype.goBack = function(backstackEntry) {
if (view_1.traceEnabled()) {
view_1.traceWrite("GO BACK", view_1.traceCategories.Navigation);
}
if (!this.canGoBack()) {
return;
}
if (!backstackEntry) {
backstackEntry = this._backStack.pop();
} else {
var backIndex = this._backStack.indexOf(backstackEntry);
if (backIndex < 0) {
return;
}
this._backStack.splice(backIndex);
}
var navigationContext = {
entry: backstackEntry,
isBackNavigation: true
};
this._navigationQueue.push(navigationContext);
if (this._navigationQueue.length === 1) {
this._processNavigationContext(navigationContext);
} else {
if (view_1.traceEnabled()) {
view_1.traceWrite("Going back scheduled", view_1.traceCategories.Navigation);
}
}
};
FrameBase.prototype.navigate = function(param) {
if (view_1.traceEnabled()) {
view_1.traceWrite("NAVIGATE", view_1.traceCategories.Navigation);
}
var entry = buildEntryFromArgs(param);
var page = resolvePageFromEntry(entry);
this._pushInFrameStack();
var backstackEntry = {
entry: entry,
resolvedPage: page,
navDepth: undefined,
fragmentTag: undefined,
isBack: undefined,
isNavigation: true
};
var navigationContext = {
entry: backstackEntry,
isBackNavigation: false
};
this._navigationQueue.push(navigationContext);
if (this._navigationQueue.length === 1) {
this._processNavigationContext(navigationContext);
} else {
if (view_1.traceEnabled()) {
view_1.traceWrite("Navigation scheduled", view_1.traceCategories.Navigation);
}
}
};
FrameBase.prototype._processNavigationQueue = function(page) {
if (this._navigationQueue.length === 0) {
return;
}
var entry = this._navigationQueue[0].entry;
var currentNavigationPage = entry.resolvedPage;
if (page !== currentNavigationPage) {
throw new Error("Corrupted navigation stack; page: " + page + "; currentNavigationPage: " + currentNavigationPage);
}
this._navigationQueue.shift();
if (this._navigationQueue.length > 0) {
var navigationContext = this._navigationQueue[0];
this._processNavigationContext(navigationContext);
}
this._updateActionBar();
};
FrameBase.prototype.navigationQueueIsEmpty = function() {
return this._navigationQueue.length === 0;
};
FrameBase._isEntryBackstackVisible = function(entry) {
if (!entry) {
return false;
}
var backstackVisibleValue = entry.entry.backstackVisible;
var backstackHidden = backstackVisibleValue !== undefined && !backstackVisibleValue;
return !backstackHidden;
};
FrameBase.prototype._updateActionBar = function(page, disableNavBarAnimation) {};
FrameBase.prototype._processNavigationContext = function(navigationContext) {
if (navigationContext.isBackNavigation) {
this.performGoBack(navigationContext);
} else {
this.performNavigation(navigationContext);
}
};
FrameBase.prototype.performNavigation = function(navigationContext) {
var navContext = navigationContext.entry;
if (navigationContext.entry.entry.clearHistory) {
this._backStack.length = 0;
} else if (FrameBase._isEntryBackstackVisible(this._currentEntry)) {
this._backStack.push(this._currentEntry);
}
this._onNavigatingTo(navContext, navigationContext.isBackNavigation);
this._navigateCore(navContext);
};
FrameBase.prototype.performGoBack = function(navigationContext) {
var navContext = navigationContext.entry;
this._onNavigatingTo(navContext, navigationContext.isBackNavigation);
this._goBackCore(navContext);
};
FrameBase.prototype._goBackCore = function(backstackEntry) {
if (view_1.traceEnabled()) {
view_1.traceWrite("GO BACK CORE(" + this._backstackEntryTrace(backstackEntry) + "); currentPage: " + this.currentPage, view_1.traceCategories.Navigation);
}
};
FrameBase.prototype._navigateCore = function(backstackEntry) {
if (view_1.traceEnabled()) {
view_1.traceWrite("NAVIGATE CORE(" + this._backstackEntryTrace(backstackEntry) + "); currentPage: " + this.currentPage, view_1.traceCategories.Navigation);
}
};
FrameBase.prototype._onNavigatingTo = function(backstackEntry, isBack) {
if (this.currentPage) {
this.currentPage.onNavigatingFrom(isBack);
}
backstackEntry.resolvedPage.onNavigatingTo(backstackEntry.entry.context, isBack, backstackEntry.entry.bindingContext);
};
Object.defineProperty(FrameBase.prototype, "animated", {
get: function() {
return this._animated;
},
set: function(value) {
this._animated = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FrameBase.prototype, "transition", {
get: function() {
return this._transition;
},
set: function(value) {
this._transition = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FrameBase.prototype, "backStack", {
get: function() {
return this._backStack.slice();
},
enumerable: true,
configurable: true
});
Object.defineProperty(FrameBase.prototype, "currentPage", {
get: function() {
if (this._currentEntry) {
return this._currentEntry.resolvedPage;
}
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FrameBase.prototype, "currentEntry", {
get: function() {
if (this._currentEntry) {
return this._currentEntry.entry;
}
return null;
},
enumerable: true,
configurable: true
});
FrameBase.prototype._pushInFrameStack = function() {
if (this._isInFrameStack) {
return;
}
frameStack.push(this);
this._isInFrameStack = true;
};
FrameBase.prototype._popFromFrameStack = function() {
if (!this._isInFrameStack) {
return;
}
var top = topmost();
if (top !== this) {
throw new Error("Cannot pop a Frame which is not at the top of the navigation stack.");
}
frameStack.pop();
this._isInFrameStack = false;
};
Object.defineProperty(FrameBase.prototype, "_childrenCount", {
get: function() {
if (this.currentPage) {
return 1;
}
return 0;
},
enumerable: true,
configurable: true
});
FrameBase.prototype.eachChildView = function(callback) {
if (this.currentPage) {
callback(this.currentPage);
}
};
FrameBase.prototype._getIsAnimatedNavigation = function(entry) {
if (entry && entry.animated !== undefined) {
return entry.animated;
}
if (this.animated !== undefined) {
return this.animated;
}
return FrameBase.defaultAnimatedNavigation;
};
FrameBase.prototype._getNavigationTransition = function(entry) {
if (entry) {
if (view_1.isIOS && entry.transitioniOS !== undefined) {
return entry.transitioniOS;
}
if (view_1.isAndroid && entry.transitionAndroid !== undefined) {
return entry.transitionAndroid;
}
if (entry.transition !== undefined) {
return entry.transition;
}
}
if (this.transition !== undefined) {
return this.transition;
}
return FrameBase.defaultTransition;
};
Object.defineProperty(FrameBase.prototype, "navigationBarHeight", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
FrameBase.prototype._getNavBarVisible = function(page) {
throw new Error();
};
FrameBase.prototype._addViewToNativeVisualTree = function(child) {
return true;
};
FrameBase.prototype._removeViewFromNativeVisualTree = function(child) {
child._isAddedToNativeVisualTree = false;
};
FrameBase.prototype._printFrameBackStack = function() {
var length = this.backStack.length;
var i = length - 1;
console.log("Frame Back Stack: ");
while (i >= 0) {
var backstackEntry = this.backStack[i--];
console.log("\t" + backstackEntry.resolvedPage);
}
};
FrameBase.prototype._backstackEntryTrace = function(b) {
var result = "" + b.resolvedPage;
var backstackVisible = FrameBase._isEntryBackstackVisible(b);
if (!backstackVisible) {
result += " | INVISIBLE";
}
if (b.entry.clearHistory) {
result += " | CLEAR HISTORY";
}
var animated = this._getIsAnimatedNavigation(b.entry);
if (!animated) {
result += " | NOT ANIMATED";
}
var t = this._getNavigationTransition(b.entry);
if (t) {
result += " | Transition[" + JSON.stringify(t) + "]";
}
return result;
};
return FrameBase;
}(view_1.CustomLayoutView);
FrameBase.androidOptionSelectedEvent = "optionSelected";
FrameBase.defaultAnimatedNavigation = true;
exports.FrameBase = FrameBase;
function topmost() {
if (frameStack.length > 0) {
return frameStack[frameStack.length - 1];
}
return undefined;
}
exports.topmost = topmost;
function goBack() {
var top = topmost();
if (top.canGoBack()) {
top.goBack();
return true;
}
if (frameStack.length > 1) {
top._popFromFrameStack();
}
return false;
}
exports.goBack = goBack;
function stack() {
return frameStack;
}
exports.stack = stack;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var background_1 = __webpack_require__(13);
var view_common_1 = __webpack_require__(30);
var style_properties_1 = __webpack_require__(31);
__export(__webpack_require__(30));
var TouchListener;
var disableUserInteractionListener;
function initializeDisabledListener() {
if (disableUserInteractionListener) {
return;
}
disableUserInteractionListener = new org.nativescript.widgets.DisableUserInteractionListener();
}
function initializeTouchListener() {
if (TouchListener) {
return;
}
var TouchListenerImpl = function(_super) {
__extends(TouchListenerImpl, _super);
function TouchListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
TouchListenerImpl.prototype.onTouch = function(view, event) {
var owner = this.owner;
for (var type in owner._gestureObservers) {
var list = owner._gestureObservers[type];
list.forEach(function(element) {
element.androidOnTouchEvent(event);
});
}
var nativeView = owner.nativeView;
if (!nativeView || !nativeView.onTouchEvent) {
return false;
}
return nativeView.onTouchEvent(event);
};
return TouchListenerImpl;
}(java.lang.Object);
TouchListenerImpl = __decorate([ Interfaces([ android.view.View.OnTouchListener ]) ], TouchListenerImpl);
TouchListener = TouchListenerImpl;
}
var View = function(_super) {
__extends(View, _super);
function View() {
return _super !== null && _super.apply(this, arguments) || this;
}
View.prototype.observe = function(type, callback, thisArg) {
_super.prototype.observe.call(this, type, callback, thisArg);
if (this.isLoaded && !this.touchListenerIsSet) {
this.setOnTouchListener();
}
};
View.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.setOnTouchListener();
};
View.prototype.onUnloaded = function() {
if (this.touchListenerIsSet) {
this.nativeView.setOnTouchListener(null);
this.touchListenerIsSet = false;
}
this._cancelAllAnimations();
_super.prototype.onUnloaded.call(this);
};
View.prototype.hasGestureObservers = function() {
return this._gestureObservers && Object.keys(this._gestureObservers).length > 0;
};
View.prototype.setOnTouchListener = function() {
if (this.nativeView && this.hasGestureObservers()) {
this.touchListenerIsSet = true;
if (this.nativeView.setClickable) {
this.nativeView.setClickable(true);
}
initializeTouchListener();
this.touchListener = this.touchListener || new TouchListener(this);
this.nativeView.setOnTouchListener(this.touchListener);
}
};
Object.defineProperty(View.prototype, "isLayoutRequired", {
get: function() {
return !this.isLayoutValid;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLayoutValid", {
get: function() {
if (this.nativeView) {
return !this.nativeView.isLayoutRequested();
}
return false;
},
enumerable: true,
configurable: true
});
View.prototype.layoutNativeView = function(left, top, right, bottom) {
if (this.nativeView) {
this.nativeView.layout(left, top, right, bottom);
}
};
View.prototype.requestLayout = function() {
_super.prototype.requestLayout.call(this);
if (this.nativeView) {
return this.nativeView.requestLayout();
}
};
View.prototype.measure = function(widthMeasureSpec, heightMeasureSpec) {
_super.prototype.measure.call(this, widthMeasureSpec, heightMeasureSpec);
this.onMeasure(widthMeasureSpec, heightMeasureSpec);
};
View.prototype.layout = function(left, top, right, bottom) {
_super.prototype.layout.call(this, left, top, right, bottom);
this.onLayout(left, top, right, bottom);
};
View.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var view = this.nativeView;
if (view) {
view.measure(widthMeasureSpec, heightMeasureSpec);
this.setMeasuredDimension(view.getMeasuredWidth(), view.getMeasuredHeight());
}
};
View.prototype.onLayout = function(left, top, right, bottom) {
var view = this.nativeView;
if (view) {
this.layoutNativeView(left, top, right, bottom);
}
};
View.prototype._getCurrentLayoutBounds = function() {
if (this.nativeView && !this.isCollapsed) {
return {
left: this.nativeView.getLeft(),
top: this.nativeView.getTop(),
right: this.nativeView.getRight(),
bottom: this.nativeView.getBottom()
};
} else {
return {
left: 0,
top: 0,
right: 0,
bottom: 0
};
}
};
View.prototype.getMeasuredWidth = function() {
if (this.nativeView) {
return this.nativeView.getMeasuredWidth();
}
return _super.prototype.getMeasuredWidth.call(this);
};
View.prototype.getMeasuredHeight = function() {
if (this.nativeView) {
return this.nativeView.getMeasuredHeight();
}
return _super.prototype.getMeasuredHeight.call(this);
};
View.prototype.focus = function() {
if (this.nativeView) {
return this.nativeView.requestFocus();
}
return false;
};
View.prototype.getLocationInWindow = function() {
if (!this.nativeView || !this.nativeView.getWindowToken()) {
return undefined;
}
var nativeArray = Array.create("int", 2);
this.nativeView.getLocationInWindow(nativeArray);
return {
x: view_common_1.layout.toDeviceIndependentPixels(nativeArray[0]),
y: view_common_1.layout.toDeviceIndependentPixels(nativeArray[1])
};
};
View.prototype.getLocationOnScreen = function() {
if (!this.nativeView || !this.nativeView.getWindowToken()) {
return undefined;
}
var nativeArray = Array.create("int", 2);
this.nativeView.getLocationOnScreen(nativeArray);
return {
x: view_common_1.layout.toDeviceIndependentPixels(nativeArray[0]),
y: view_common_1.layout.toDeviceIndependentPixels(nativeArray[1])
};
};
View.prototype.getLocationRelativeTo = function(otherView) {
if (!this.nativeView || !this.nativeView.getWindowToken() || !otherView.nativeView || !otherView.nativeView.getWindowToken() || this.nativeView.getWindowToken() !== otherView.nativeView.getWindowToken()) {
return undefined;
}
var myArray = Array.create("int", 2);
this.nativeView.getLocationOnScreen(myArray);
var otherArray = Array.create("int", 2);
otherView.nativeView.getLocationOnScreen(otherArray);
return {
x: view_common_1.layout.toDeviceIndependentPixels(myArray[0] - otherArray[0]),
y: view_common_1.layout.toDeviceIndependentPixels(myArray[1] - otherArray[1])
};
};
View.resolveSizeAndState = function(size, specSize, specMode, childMeasuredState) {
var result = size;
switch (specMode) {
case view_common_1.layout.UNSPECIFIED:
result = size;
break;

case view_common_1.layout.AT_MOST:
if (specSize < size) {
result = specSize | view_common_1.layout.MEASURED_STATE_TOO_SMALL;
}
break;

case view_common_1.layout.EXACTLY:
result = specSize;
break;
}
return result | childMeasuredState & view_common_1.layout.MEASURED_STATE_MASK;
};
View.prototype[view_common_1.isEnabledProperty.getDefault] = function() {
return this.nativeView.isEnabled();
};
View.prototype[view_common_1.isEnabledProperty.setNative] = function(value) {
this.nativeView.setEnabled(value);
};
View.prototype[view_common_1.originXProperty.getDefault] = function() {
return this.nativeView.getPivotX();
};
View.prototype[view_common_1.originXProperty.setNative] = function(value) {
org.nativescript.widgets.OriginPoint.setX(this.nativeView, value);
};
View.prototype[view_common_1.originYProperty.getDefault] = function() {
return this.nativeView.getPivotY();
};
View.prototype[view_common_1.originYProperty.setNative] = function(value) {
org.nativescript.widgets.OriginPoint.setY(this.nativeView, value);
};
View.prototype[view_common_1.automationTextProperty.getDefault] = function() {
return this.nativeView.getContentDescription();
};
View.prototype[view_common_1.automationTextProperty.setNative] = function(value) {
this.nativeView.setContentDescription(value);
};
View.prototype[view_common_1.isUserInteractionEnabledProperty.getDefault] = function() {
return true;
};
View.prototype[view_common_1.isUserInteractionEnabledProperty.setNative] = function(value) {
if (!value) {
initializeDisabledListener();
this.nativeView.setOnTouchListener(disableUserInteractionListener);
} else {
this.setOnTouchListener();
}
};
View.prototype[style_properties_1.visibilityProperty.getDefault] = function() {
var nativeVisibility = this.nativeView.getVisibility();
switch (nativeVisibility) {
case android.view.View.VISIBLE:
return "visible";

case android.view.View.INVISIBLE:
return "hidden";

case android.view.View.GONE:
return "collapse";

default:
throw new Error("Unsupported android.view.View visibility: " + nativeVisibility + ". Currently supported values are android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE.");
}
};
View.prototype[style_properties_1.visibilityProperty.setNative] = function(value) {
switch (value) {
case "visible":
this.nativeView.setVisibility(android.view.View.VISIBLE);
break;

case "hidden":
this.nativeView.setVisibility(android.view.View.INVISIBLE);
break;

case "collapse":
this.nativeView.setVisibility(android.view.View.GONE);
break;

default:
throw new Error("Invalid visibility value: " + value + ". Valid values are: visible, hidden, collapse.");
}
};
View.prototype[style_properties_1.opacityProperty.getDefault] = function() {
return this.nativeView.getAlpha();
};
View.prototype[style_properties_1.opacityProperty.setNative] = function(value) {
this.nativeView.setAlpha(float(value));
};
View.prototype[style_properties_1.horizontalAlignmentProperty.getDefault] = function() {
return org.nativescript.widgets.ViewHelper.getHorizontalAlignment(this.nativeView);
};
View.prototype[style_properties_1.horizontalAlignmentProperty.setNative] = function(value) {
var nativeView = this.nativeView;
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();
if (lp.gravity !== undefined) {
switch (value) {
case "left":
lp.gravity = android.view.Gravity.LEFT | lp.gravity & android.view.Gravity.VERTICAL_GRAVITY_MASK;
break;

case "center":
lp.gravity = android.view.Gravity.CENTER_HORIZONTAL | lp.gravity & android.view.Gravity.VERTICAL_GRAVITY_MASK;
break;

case "right":
lp.gravity = android.view.Gravity.RIGHT | lp.gravity & android.view.Gravity.VERTICAL_GRAVITY_MASK;
break;

case "stretch":
lp.gravity = android.view.Gravity.FILL_HORIZONTAL | lp.gravity & android.view.Gravity.VERTICAL_GRAVITY_MASK;
break;
}
nativeView.setLayoutParams(lp);
}
};
View.prototype[style_properties_1.verticalAlignmentProperty.getDefault] = function() {
return org.nativescript.widgets.ViewHelper.getVerticalAlignment(this.nativeView);
};
View.prototype[style_properties_1.verticalAlignmentProperty.setNative] = function(value) {
var nativeView = this.nativeView;
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();
if (lp.gravity !== undefined) {
switch (value) {
case "top":
lp.gravity = android.view.Gravity.TOP | lp.gravity & android.view.Gravity.HORIZONTAL_GRAVITY_MASK;
break;

case "middle":
lp.gravity = android.view.Gravity.CENTER_VERTICAL | lp.gravity & android.view.Gravity.HORIZONTAL_GRAVITY_MASK;
break;

case "bottom":
lp.gravity = android.view.Gravity.BOTTOM | lp.gravity & android.view.Gravity.HORIZONTAL_GRAVITY_MASK;
break;

case "stretch":
lp.gravity = android.view.Gravity.FILL_VERTICAL | lp.gravity & android.view.Gravity.HORIZONTAL_GRAVITY_MASK;
break;
}
nativeView.setLayoutParams(lp);
}
};
View.prototype[style_properties_1.rotateProperty.getDefault] = function() {
return org.nativescript.widgets.ViewHelper.getRotate(this.nativeView);
};
View.prototype[style_properties_1.rotateProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setRotate(this.nativeView, float(value));
};
View.prototype[style_properties_1.scaleXProperty.getDefault] = function() {
return org.nativescript.widgets.ViewHelper.getScaleX(this.nativeView);
};
View.prototype[style_properties_1.scaleXProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setScaleX(this.nativeView, float(value));
};
View.prototype[style_properties_1.scaleYProperty.getDefault] = function() {
return org.nativescript.widgets.ViewHelper.getScaleY(this.nativeView);
};
View.prototype[style_properties_1.scaleYProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setScaleY(this.nativeView, float(value));
};
View.prototype[style_properties_1.translateXProperty.getDefault] = function() {
return view_common_1.layout.toDeviceIndependentPixels(org.nativescript.widgets.ViewHelper.getTranslateX(this.nativeView));
};
View.prototype[style_properties_1.translateXProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setTranslateX(this.nativeView, view_common_1.layout.toDevicePixels(value));
};
View.prototype[style_properties_1.translateYProperty.getDefault] = function() {
return view_common_1.layout.toDeviceIndependentPixels(org.nativescript.widgets.ViewHelper.getTranslateY(this.nativeView));
};
View.prototype[style_properties_1.translateYProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setTranslateY(this.nativeView, view_common_1.layout.toDevicePixels(value));
};
View.prototype[style_properties_1.zIndexProperty.getDefault] = function() {
return org.nativescript.widgets.ViewHelper.getZIndex(this.nativeView);
};
View.prototype[style_properties_1.zIndexProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setZIndex(this.nativeView, value);
};
View.prototype[style_properties_1.backgroundInternalProperty.getDefault] = function() {
return this.nativeView.getBackground();
};
View.prototype[style_properties_1.backgroundInternalProperty.setNative] = function(value) {
if (value instanceof android.graphics.drawable.Drawable) {
this.nativeView.setBackground(value);
} else {
background_1.ad.onBackgroundOrBorderPropertyChanged(this);
}
};
View.prototype[style_properties_1.minWidthProperty.setNative] = function(value) {
if (this.parent instanceof CustomLayoutView && this.parent.nativeView) {
this.parent._setChildMinWidthNative(this);
} else {
this._setMinWidthNative(this.minWidth);
}
};
View.prototype[style_properties_1.minHeightProperty.setNative] = function(value) {
if (this.parent instanceof CustomLayoutView && this.parent.nativeView) {
this.parent._setChildMinHeightNative(this);
} else {
this._setMinHeightNative(this.minHeight);
}
};
return View;
}(view_common_1.ViewCommon);
exports.View = View;
var CustomLayoutView = function(_super) {
__extends(CustomLayoutView, _super);
function CustomLayoutView() {
return _super !== null && _super.apply(this, arguments) || this;
}
CustomLayoutView.prototype.createNativeView = function() {
return new org.nativescript.widgets.ContentLayout(this._context);
};
CustomLayoutView.prototype._addViewToNativeVisualTree = function(child, atIndex) {
if (atIndex === void 0) {
atIndex = -1;
}
_super.prototype._addViewToNativeVisualTree.call(this, child);
if (this.nativeView && child.nativeView) {
if (view_common_1.traceEnabled()) {
view_common_1.traceWrite(this + ".nativeView.addView(" + child + ".nativeView, " + atIndex + ")", view_common_1.traceCategories.VisualTreeEvents);
}
this.nativeView.addView(child.nativeView, atIndex);
if (child instanceof View) {
this._updateNativeLayoutParams(child);
}
return true;
}
return false;
};
CustomLayoutView.prototype._updateNativeLayoutParams = function(child) {
this._setChildMinWidthNative(child);
this._setChildMinHeightNative(child);
};
CustomLayoutView.prototype._setChildMinWidthNative = function(child) {
child._setMinWidthNative(child.minWidth);
};
CustomLayoutView.prototype._setChildMinHeightNative = function(child) {
child._setMinHeightNative(child.minHeight);
};
CustomLayoutView.prototype._removeViewFromNativeVisualTree = function(child) {
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
if (this.nativeView && child.nativeView) {
this.nativeView.removeView(child.nativeView);
if (view_common_1.traceEnabled()) {
view_common_1.traceWrite(this + ".nativeView.removeView(" + child + ".nativeView)", view_common_1.traceCategories.VisualTreeEvents);
view_common_1.traceNotifyEvent(child, "childInLayoutRemovedFromNativeVisualTree");
}
}
};
return CustomLayoutView;
}(View);
exports.CustomLayoutView = CustomLayoutView;
var percentNotSupported = function(view, value) {
throw new Error("PercentLength is not supported.");
};
function createNativePercentLengthProperty(options) {
var getter = options.getter, setter = options.setter, _a = options.auto, auto = _a === void 0 ? 0 : _a;
var setPixels, getPixels, setPercent;
if (getter) {
View.prototype[getter] = function() {
if (options) {
setPixels = options.setPixels;
getPixels = options.getPixels;
setPercent = options.setPercent || percentNotSupported;
options = null;
}
var value = getPixels(this.nativeView);
if (value == auto) {
return "auto";
} else {
return {
value: value,
unit: "px"
};
}
};
}
if (setter) {
View.prototype[setter] = function(length) {
if (options) {
setPixels = options.setPixels;
getPixels = options.getPixels;
setPercent = options.setPercent || percentNotSupported;
options = null;
}
if (length == "auto") {
setPixels(this.nativeView, auto);
} else if (typeof length === "number") {
setPixels(this.nativeView, view_common_1.layout.round(view_common_1.layout.toDevicePixels(length)));
} else if (length.unit == "dip") {
setPixels(this.nativeView, view_common_1.layout.round(view_common_1.layout.toDevicePixels(length.value)));
} else if (length.unit == "px") {
setPixels(this.nativeView, view_common_1.layout.round(length.value));
} else if (length.unit == "%") {
setPercent(this.nativeView, length.value);
} else {
throw new Error("Unsupported PercentLength " + length);
}
};
}
}
createNativePercentLengthProperty({
getter: style_properties_1.marginTopProperty.getDefault,
setter: style_properties_1.marginTopProperty.setNative,
get getPixels() {
return org.nativescript.widgets.ViewHelper.getMarginTop;
},
get setPixels() {
return org.nativescript.widgets.ViewHelper.setMarginTop;
},
get setPercent() {
return org.nativescript.widgets.ViewHelper.setMarginTopPercent;
}
});
createNativePercentLengthProperty({
getter: style_properties_1.marginRightProperty.getDefault,
setter: style_properties_1.marginRightProperty.setNative,
get getPixels() {
return org.nativescript.widgets.ViewHelper.getMarginRight;
},
get setPixels() {
return org.nativescript.widgets.ViewHelper.setMarginRight;
},
get setPercent() {
return org.nativescript.widgets.ViewHelper.setMarginRightPercent;
}
});
createNativePercentLengthProperty({
getter: style_properties_1.marginBottomProperty.getDefault,
setter: style_properties_1.marginBottomProperty.setNative,
get getPixels() {
return org.nativescript.widgets.ViewHelper.getMarginBottom;
},
get setPixels() {
return org.nativescript.widgets.ViewHelper.setMarginBottom;
},
get setPercent() {
return org.nativescript.widgets.ViewHelper.setMarginBottomPercent;
}
});
createNativePercentLengthProperty({
getter: style_properties_1.marginLeftProperty.getDefault,
setter: style_properties_1.marginLeftProperty.setNative,
get getPixels() {
return org.nativescript.widgets.ViewHelper.getMarginLeft;
},
get setPixels() {
return org.nativescript.widgets.ViewHelper.setMarginLeft;
},
get setPercent() {
return org.nativescript.widgets.ViewHelper.setMarginLeftPercent;
}
});
createNativePercentLengthProperty({
getter: style_properties_1.widthProperty.getDefault,
setter: style_properties_1.widthProperty.setNative,
auto: -1,
get getPixels() {
return org.nativescript.widgets.ViewHelper.getWidth;
},
get setPixels() {
return org.nativescript.widgets.ViewHelper.setWidth;
},
get setPercent() {
return org.nativescript.widgets.ViewHelper.setWidthPercent;
}
});
createNativePercentLengthProperty({
getter: style_properties_1.heightProperty.getDefault,
setter: style_properties_1.heightProperty.setNative,
auto: -1,
get getPixels() {
return org.nativescript.widgets.ViewHelper.getHeight;
},
get setPixels() {
return org.nativescript.widgets.ViewHelper.setHeight;
},
get setPercent() {
return org.nativescript.widgets.ViewHelper.setHeightPercent;
}
});
createNativePercentLengthProperty({
setter: "_setMinWidthNative",
get setPixels() {
return org.nativescript.widgets.ViewHelper.setMinWidth;
}
});
createNativePercentLengthProperty({
setter: "_setMinHeightNative",
get setPixels() {
return org.nativescript.widgets.ViewHelper.setMinHeight;
}
});
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var utils_1 = __webpack_require__(14);
var css_value_1 = __webpack_require__(21);
var file_system_1 = __webpack_require__(22);
var application_1 = __webpack_require__(18);
__export(__webpack_require__(26));
var ad;
(function(ad) {
var SDK;
function getSDK() {
if (!SDK) {
SDK = android.os.Build.VERSION.SDK_INT;
}
return SDK;
}
function isSetColorFilterOnlyWidget(nativeView) {
return nativeView instanceof android.widget.Button || nativeView instanceof android.support.v7.widget.Toolbar && getSDK() >= 21;
}
function onBackgroundOrBorderPropertyChanged(view) {
var nativeView = view.nativeView;
if (!nativeView) {
return;
}
var background = view.style.backgroundInternal;
var cache = view.nativeView;
var drawable = nativeView.getBackground();
var androidView = view;
if (androidView.background === undefined && drawable) {
androidView.background = drawable.getConstantState();
}
if (isSetColorFilterOnlyWidget(nativeView) && drawable && !background.hasBorderWidth() && !background.hasBorderRadius() && !background.clipPath && !background.image && background.color) {
var backgroundColor = drawable.backgroundColor = background.color.android;
drawable.mutate();
drawable.setColorFilter(backgroundColor, android.graphics.PorterDuff.Mode.SRC_IN);
drawable.invalidateSelf();
drawable.backgroundColor = backgroundColor;
} else if (!background.isEmpty()) {
var backgroundDrawable = drawable;
if (!(drawable instanceof org.nativescript.widgets.BorderDrawable)) {
backgroundDrawable = new org.nativescript.widgets.BorderDrawable(utils_1.layout.getDisplayDensity(), view.toString());
refreshBorderDrawable(view, backgroundDrawable);
org.nativescript.widgets.ViewHelper.setBackground(nativeView, backgroundDrawable);
} else {
refreshBorderDrawable(view, backgroundDrawable);
}
if ((background.hasBorderWidth() || background.hasBorderRadius() || background.clipPath) && getSDK() < 18) {
if (cache.layerType === undefined) {
cache.layerType = cache.getLayerType();
cache.setLayerType(android.view.View.LAYER_TYPE_SOFTWARE, null);
}
}
} else {
var defaultDrawable = androidView.background ? androidView.background.newDrawable() : null;
org.nativescript.widgets.ViewHelper.setBackground(nativeView, defaultDrawable);
androidView.background = undefined;
if (cache.layerType !== undefined) {
cache.setLayerType(cache.layerType, null);
cache.layerType = undefined;
}
}
var leftPadding = Math.ceil(view.effectiveBorderLeftWidth + view.effectivePaddingLeft);
var topPadding = Math.ceil(view.effectiveBorderTopWidth + view.effectivePaddingTop);
var rightPadding = Math.ceil(view.effectiveBorderRightWidth + view.effectivePaddingRight);
var bottomPadding = Math.ceil(view.effectiveBorderBottomWidth + view.effectivePaddingBottom);
nativeView.setPadding(leftPadding, topPadding, rightPadding, bottomPadding);
}
ad.onBackgroundOrBorderPropertyChanged = onBackgroundOrBorderPropertyChanged;
})(ad = exports.ad || (exports.ad = {}));
function fromBase64(source) {
var bytes = android.util.Base64.decode(source, android.util.Base64.DEFAULT);
return android.graphics.BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
}
var pattern = /url\(('|")(.*?)\1\)/;
function refreshBorderDrawable(view, borderDrawable) {
var nativeView = view.nativeView;
var context = nativeView.getContext();
var background = view.style.backgroundInternal;
if (background) {
var backgroundPositionParsedCSSValues = createNativeCSSValueArray(background.position);
var backgroundSizeParsedCSSValues = createNativeCSSValueArray(background.size);
var blackColor = -16777216;
var imageUri = background.image;
if (imageUri) {
var match = imageUri.match(pattern);
if (match && match[2]) {
imageUri = match[2];
}
}
var bitmap = null;
if (utils_1.isDataURI(imageUri)) {
var base64Data = imageUri.split(",")[1];
if (base64Data !== undefined) {
bitmap = fromBase64(base64Data);
imageUri = null;
}
} else if (utils_1.isFileOrResourcePath(imageUri)) {
if (imageUri.indexOf(utils_1.RESOURCE_PREFIX) !== 0) {
var fileName = imageUri;
if (fileName.indexOf("~/") === 0) {
fileName = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, fileName.replace("~/", ""));
}
imageUri = utils_1.FILE_PREFIX + fileName;
}
}
borderDrawable.refresh(background.borderTopColor ? background.borderTopColor.android : blackColor, background.borderRightColor ? background.borderRightColor.android : blackColor, background.borderBottomColor ? background.borderBottomColor.android : blackColor, background.borderLeftColor ? background.borderLeftColor.android : blackColor, background.borderTopWidth, background.borderRightWidth, background.borderBottomWidth, background.borderLeftWidth, background.borderTopLeftRadius, background.borderTopRightRadius, background.borderBottomRightRadius, background.borderBottomLeftRadius, background.clipPath, background.color ? background.color.android : 0, imageUri, bitmap, context, background.repeat, background.position, backgroundPositionParsedCSSValues, background.size, backgroundSizeParsedCSSValues);
}
}
function createNativeCSSValueArray(css) {
if (!css) {
return null;
}
var cssValues = css_value_1.parse(css);
var nativeArray = Array.create(org.nativescript.widgets.CSSValue, cssValues.length);
for (var i = 0, length_1 = cssValues.length; i < length_1; i++) {
nativeArray[i] = new org.nativescript.widgets.CSSValue(cssValues[i].type, cssValues[i].string, cssValues[i].unit, cssValues[i].value);
}
return nativeArray;
}
var CacheMode;
(function(CacheMode) {
CacheMode[CacheMode["none"] = 0] = "none";
CacheMode[CacheMode["memory"] = 1] = "memory";
CacheMode[CacheMode["diskAndMemory"] = 2] = "diskAndMemory";
})(CacheMode = exports.CacheMode || (exports.CacheMode = {}));
var currentCacheMode;
var imageFetcher;
function initImageCache(context, mode, memoryCacheSize, diskCacheSize) {
if (mode === void 0) {
mode = CacheMode.diskAndMemory;
}
if (memoryCacheSize === void 0) {
memoryCacheSize = .25;
}
if (diskCacheSize === void 0) {
diskCacheSize = 10 * 1024 * 1024;
}
if (currentCacheMode === mode) {
return;
}
currentCacheMode = mode;
if (!imageFetcher) {
imageFetcher = org.nativescript.widgets.image.Fetcher.getInstance(context);
} else {
imageFetcher.clearCache();
}
var params = new org.nativescript.widgets.image.Cache.CacheParams();
params.memoryCacheEnabled = mode !== CacheMode.none;
params.setMemCacheSizePercent(memoryCacheSize);
params.diskCacheEnabled = mode === CacheMode.diskAndMemory;
params.diskCacheSize = diskCacheSize;
var imageCache = org.nativescript.widgets.image.Cache.getInstance(params);
imageFetcher.addImageCache(imageCache);
imageFetcher.initCache();
}
exports.initImageCache = initImageCache;
application_1.android.on("activityStarted", function(args) {
if (!imageFetcher) {
initImageCache(args.activity);
} else {
imageFetcher.initCache();
}
});
application_1.android.on("activityStopped", function(args) {
if (imageFetcher) {
imageFetcher.closeCache();
}
});
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var trace_1 = __webpack_require__(15);
__export(__webpack_require__(16));
var application_1 = __webpack_require__(18);
var layout;
(function(layout) {
var density;
var MODE_SHIFT = 30;
var MODE_MASK = 3 << MODE_SHIFT;
var sdkVersion;
var useOldMeasureSpec = false;
function makeMeasureSpec(size, mode) {
if (sdkVersion === undefined) {
sdkVersion = ad.getApplicationContext().getApplicationInfo().targetSdkVersion;
useOldMeasureSpec = sdkVersion <= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
}
if (useOldMeasureSpec) {
return size + mode;
}
return size & ~MODE_MASK | mode & MODE_MASK;
}
layout.makeMeasureSpec = makeMeasureSpec;
function getDisplayDensity() {
if (density === undefined) {
density = ad.getResources().getDisplayMetrics().density;
}
return density;
}
layout.getDisplayDensity = getDisplayDensity;
function toDevicePixels(value) {
return value * getDisplayDensity();
}
layout.toDevicePixels = toDevicePixels;
function toDeviceIndependentPixels(value) {
return value / getDisplayDensity();
}
layout.toDeviceIndependentPixels = toDeviceIndependentPixels;
function measureNativeView(nativeView, width, widthMode, height, heightMode) {
var view = nativeView;
view.measure(makeMeasureSpec(width, widthMode), makeMeasureSpec(height, heightMode));
return {
width: view.getMeasuredWidth(),
height: view.getMeasuredHeight()
};
}
layout.measureNativeView = measureNativeView;
})(layout = exports.layout || (exports.layout = {}));
var ad;
(function(ad) {
var application;
var applicationContext;
var contextResources;
var packageName;
function getApplicationContext() {
if (!applicationContext) {
applicationContext = getApplication().getApplicationContext();
}
return applicationContext;
}
ad.getApplicationContext = getApplicationContext;
function getApplication() {
if (!application) {
application = application_1.getNativeApplication();
}
return application;
}
ad.getApplication = getApplication;
function getResources() {
if (!contextResources) {
contextResources = getApplication().getResources();
}
return contextResources;
}
ad.getResources = getResources;
function getPackageName() {
if (!packageName) {
packageName = getApplicationContext().getPackageName();
}
return packageName;
}
var inputMethodManager;
function getInputMethodManager() {
if (!inputMethodManager) {
inputMethodManager = getApplicationContext().getSystemService(android.content.Context.INPUT_METHOD_SERVICE);
}
return inputMethodManager;
}
ad.getInputMethodManager = getInputMethodManager;
function showSoftInput(nativeView) {
var inputManager = getInputMethodManager();
if (inputManager && nativeView instanceof android.view.View) {
inputManager.showSoftInput(nativeView, android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT);
}
}
ad.showSoftInput = showSoftInput;
function dismissSoftInput(nativeView) {
var inputManager = getInputMethodManager();
var windowToken;
if (nativeView instanceof android.view.View) {
windowToken = nativeView.getWindowToken();
} else if (application_1.android.foregroundActivity instanceof android.app.Activity) {
var decorView = application_1.android.foregroundActivity.getWindow().getDecorView();
windowToken = decorView ? decorView.getWindowToken() : null;
}
if (inputManager && windowToken) {
inputManager.hideSoftInputFromWindow(windowToken, 0);
}
}
ad.dismissSoftInput = dismissSoftInput;
var collections;
(function(collections) {
function stringArrayToStringSet(str) {
var hashSet = new java.util.HashSet();
if (str !== undefined) {
for (var element in str) {
hashSet.add("" + str[element]);
}
}
return hashSet;
}
collections.stringArrayToStringSet = stringArrayToStringSet;
function stringSetToStringArray(stringSet) {
var arr = [];
if (stringSet !== undefined) {
var it = stringSet.iterator();
while (it.hasNext()) {
var element = "" + it.next();
arr.push(element);
}
}
return arr;
}
collections.stringSetToStringArray = stringSetToStringArray;
})(collections = ad.collections || (ad.collections = {}));
var resources;
(function(resources_1) {
var attr;
var attrCache = new Map();
function getDrawableId(name) {
return getId(":drawable/" + name);
}
resources_1.getDrawableId = getDrawableId;
function getStringId(name) {
return getId(":string/" + name);
}
resources_1.getStringId = getStringId;
function getId(name) {
var resources = getResources();
var packageName = getPackageName();
var uri = packageName + name;
return resources.getIdentifier(uri, null, null);
}
resources_1.getId = getId;
function getPalleteColor(name, context) {
if (attrCache.has(name)) {
return attrCache.get(name);
}
var result = 0;
try {
if (!attr) {
attr = java.lang.Class.forName("android.support.v7.appcompat.R$attr");
}
var colorID = 0;
var field = attr.getField(name);
if (field) {
colorID = field.getInt(null);
}
if (colorID) {
var typedValue = new android.util.TypedValue();
context.getTheme().resolveAttribute(colorID, typedValue, true);
result = typedValue.data;
}
} catch (ex) {
trace_1.write("Cannot get pallete color: " + name, trace_1.categories.Error, trace_1.messageType.error);
}
attrCache.set(name, result);
return result;
}
resources_1.getPalleteColor = getPalleteColor;
})(resources = ad.resources || (ad.resources = {}));
})(ad = exports.ad || (exports.ad = {}));
function GC() {
gc();
}
exports.GC = GC;
function openUrl(location) {
var context = ad.getApplicationContext();
try {
var intent = new android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse(location.trim()));
intent.addFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
context.startActivity(intent);
} catch (e) {
trace_1.write("Error in OpenURL", trace_1.categories.Error, trace_1.messageType.error);
return false;
}
return true;
}
exports.openUrl = openUrl;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var enabled = false;
var _categories = {};
var _writers = [];
var _eventListeners = [];
function enable() {
enabled = true;
}
exports.enable = enable;
function disable() {
enabled = false;
}
exports.disable = disable;
function isEnabled() {
return enabled;
}
exports.isEnabled = isEnabled;
function isCategorySet(category) {
return category in _categories;
}
exports.isCategorySet = isCategorySet;
function addWriter(writer) {
_writers.push(writer);
}
exports.addWriter = addWriter;
function removeWriter(writer) {
var index = _writers.indexOf(writer);
if (index >= 0) {
_writers.splice(index, 1);
}
}
exports.removeWriter = removeWriter;
function clearWriters() {
if (_writers.length > 0) {
_writers.splice(0, _writers.length);
}
}
exports.clearWriters = clearWriters;
function setCategories(categories) {
_categories = {};
addCategories(categories);
}
exports.setCategories = setCategories;
function addCategories(categories) {
var split = categories.split(",");
for (var i = 0; i < split.length; i++) {
_categories[split[i].trim()] = true;
}
}
exports.addCategories = addCategories;
function write(message, category, type) {
var i;
if (type === messageType.error) {
for (i = 0; i < _writers.length; i++) {
_writers[i].write(message, category, type);
}
return;
}
if (!enabled) {
return;
}
if (!(category in _categories)) {
return;
}
for (i = 0; i < _writers.length; i++) {
_writers[i].write(message, category, type);
}
}
exports.write = write;
function notifyEvent(object, name, data) {
if (!enabled) {
return;
}
var i, listener, filters;
for (i = 0; i < _eventListeners.length; i++) {
listener = _eventListeners[i];
if (listener.filter) {
filters = listener.filter.split(",");
filters.forEach(function(value) {
if (value.trim() === name) {
listener.on(object, name, data);
}
});
} else {
listener.on(object, name, data);
}
}
}
exports.notifyEvent = notifyEvent;
function addEventListener(listener) {
_eventListeners.push(listener);
}
exports.addEventListener = addEventListener;
function removeEventListener(listener) {
var index = _eventListeners.indexOf(listener);
if (index >= 0) {
_eventListeners.splice(index, 1);
}
}
exports.removeEventListener = removeEventListener;
var messageType;
(function(messageType) {
messageType.log = 0;
messageType.info = 1;
messageType.warn = 2;
messageType.error = 3;
})(messageType = exports.messageType || (exports.messageType = {}));
var categories;
(function(categories) {
categories.VisualTreeEvents = "VisualTreeEvents";
categories.Layout = "Layout";
categories.Style = "Style";
categories.ViewHierarchy = "ViewHierarchy";
categories.NativeLifecycle = "NativeLifecycle";
categories.Debug = "Debug";
categories.Navigation = "Navigation";
categories.Test = "Test";
categories.Binding = "Binding";
categories.BindingError = "BindingError";
categories.Error = "Error";
categories.Animation = "Animation";
categories.Transition = "Transition";
categories.All = categories.VisualTreeEvents + "," + categories.Layout + "," + categories.Style + "," + categories.ViewHierarchy + "," + categories.NativeLifecycle + "," + categories.Debug + "," + categories.Navigation + "," + categories.Test + "," + categories.Binding + "," + categories.Error + "," + categories.Animation + "," + categories.Transition;
categories.separator = ",";
function concat() {
var i;
var result;
for (i = 0; i < arguments.length; i++) {
if (!result) {
result = arguments[i];
continue;
}
result = result.concat(categories.separator, arguments[i]);
}
return result;
}
categories.concat = concat;
})(categories = exports.categories || (exports.categories = {}));
var ConsoleWriter = function() {
function ConsoleWriter() {}
ConsoleWriter.prototype.write = function(message, category, type) {
if (!console) {
return;
}
var msgType;
if (type === undefined) {
msgType = messageType.log;
} else {
msgType = type;
}
switch (msgType) {
case messageType.log:
console.log(category + ": " + message);
break;

case messageType.info:
console.info(category + ": " + message);
break;

case messageType.warn:
console.warn(category + ": " + message);
break;

case messageType.error:
console.error(category + ": " + message);
break;
}
};
return ConsoleWriter;
}();
addWriter(new ConsoleWriter());
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var types = __webpack_require__(17);
exports.RESOURCE_PREFIX = "res://";
exports.FILE_PREFIX = "file:///";
function escapeRegexSymbols(source) {
var escapeRegex = /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g;
return source.replace(escapeRegex, "\\$&");
}
exports.escapeRegexSymbols = escapeRegexSymbols;
function convertString(value) {
var result;
if (!types.isString(value)) {
result = value;
} else if (value.trim() === "") {
result = value;
} else {
var valueAsNumber = +value;
if (!isNaN(valueAsNumber)) {
result = valueAsNumber;
} else if (value && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
result = value.toLowerCase() === "true" ? true : false;
} else {
result = value;
}
}
return result;
}
exports.convertString = convertString;
var layout;
(function(layout) {
var MODE_SHIFT = 30;
var MODE_MASK = 3 << MODE_SHIFT;
layout.UNSPECIFIED = 0 << MODE_SHIFT;
layout.EXACTLY = 1 << MODE_SHIFT;
layout.AT_MOST = 2 << MODE_SHIFT;
layout.MEASURED_HEIGHT_STATE_SHIFT = 16;
layout.MEASURED_STATE_TOO_SMALL = 16777216;
layout.MEASURED_STATE_MASK = 4278190080;
layout.MEASURED_SIZE_MASK = 16777215;
function getMode(mode) {
switch (mode) {
case layout.EXACTLY:
return "Exact";

case layout.AT_MOST:
return "AtMost";

default:
return "Unspecified";
}
}
layout.getMode = getMode;
function getMeasureSpecMode(spec) {
return spec & MODE_MASK;
}
layout.getMeasureSpecMode = getMeasureSpecMode;
function getMeasureSpecSize(spec) {
return spec & ~MODE_MASK;
}
layout.getMeasureSpecSize = getMeasureSpecSize;
function measureSpecToString(measureSpec) {
var mode = getMeasureSpecMode(measureSpec);
var size = getMeasureSpecSize(measureSpec);
var text = "MeasureSpec: ";
if (mode === layout.UNSPECIFIED) {
text += "UNSPECIFIED ";
} else if (mode === layout.EXACTLY) {
text += "EXACTLY ";
} else if (mode === layout.AT_MOST) {
text += "AT_MOST ";
} else {
text += mode + " ";
}
text += size;
return text;
}
layout.measureSpecToString = measureSpecToString;
function round(value) {
var res = Math.floor(value + .5);
if (res !== 0) {
return res;
} else if (value === 0) {
return 0;
} else if (value > 0) {
return 1;
}
return -1;
}
layout.round = round;
})(layout = exports.layout || (exports.layout = {}));
function isFileOrResourcePath(path) {
if (!types.isString(path)) {
return false;
}
return path.indexOf("~/") === 0 || path.indexOf("/") === 0 || path.indexOf(exports.RESOURCE_PREFIX) === 0;
}
exports.isFileOrResourcePath = isFileOrResourcePath;
function isDataURI(uri) {
if (!types.isString(uri)) {
return false;
}
var firstSegment = uri.trim().split(",")[0];
return firstSegment && firstSegment.indexOf("data:") === 0 && firstSegment.indexOf("base64") >= 0;
}
exports.isDataURI = isDataURI;
function mergeSort(arr, compareFunc) {
if (arr.length < 2) {
return arr;
}
var middle = arr.length / 2;
var left = arr.slice(0, middle);
var right = arr.slice(middle, arr.length);
return merge(mergeSort(left, compareFunc), mergeSort(right, compareFunc), compareFunc);
}
exports.mergeSort = mergeSort;
function merge(left, right, compareFunc) {
var result = [];
while (left.length && right.length) {
if (compareFunc(left[0], right[0]) <= 0) {
result.push(left.shift());
} else {
result.push(right.shift());
}
}
while (left.length) {
result.push(left.shift());
}
while (right.length) {
result.push(right.shift());
}
return result;
}
exports.merge = merge;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
function isString(value) {
return typeof value === "string" || value instanceof String;
}
exports.isString = isString;
function isNumber(value) {
return typeof value === "number" || value instanceof Number;
}
exports.isNumber = isNumber;
function isBoolean(value) {
return typeof value === "boolean" || value instanceof Boolean;
}
exports.isBoolean = isBoolean;
function isFunction(value) {
if (!value) {
return false;
}
return typeof value === "function";
}
exports.isFunction = isFunction;
function isObject(value) {
if (!value) {
return false;
}
return typeof value === "object";
}
exports.isObject = isObject;
function isUndefined(value) {
return value === undefined;
}
exports.isUndefined = isUndefined;
function isDefined(value) {
return typeof value !== "undefined";
}
exports.isDefined = isDefined;
function isNullOrUndefined(value) {
return value === undefined || value === null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function verifyCallback(value) {
if (value && !isFunction(value)) {
throw new TypeError("Callback must be a valid function.");
}
}
exports.verifyCallback = verifyCallback;
var classInfosMap = new Map();
var funcNameRegex = /function ([_a-zA-Z0-9]{1,})\(/;
function getClass(object) {
return getClassInfo(object).name;
}
exports.getClass = getClass;
function getClassInfo(object) {
var constructor = object.constructor;
var result = classInfosMap.get(constructor);
if (!result) {
result = new ClassInfo(constructor);
classInfosMap.set(constructor, result);
}
return result;
}
exports.getClassInfo = getClassInfo;
function getBaseClasses(object) {
var result = [];
var info = getClassInfo(object);
while (info) {
result.push(info.name);
info = info.baseClassInfo;
}
return result;
}
exports.getBaseClasses = getBaseClasses;
var ClassInfo = function() {
function ClassInfo(typeCosntructor) {
this._typeCosntructor = typeCosntructor;
}
Object.defineProperty(ClassInfo.prototype, "name", {
get: function() {
if (!this._name) {
var results = funcNameRegex.exec(this._typeCosntructor.toString());
this._name = results && results.length > 1 ? results[1] : "";
}
return this._name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ClassInfo.prototype, "baseClassInfo", {
get: function() {
if (isUndefined(this._baseClassInfo)) {
this._baseClassInfo = ClassInfo._getBase(this);
if (this._baseClassInfo && this._baseClassInfo.name === this.name) {
this._baseClassInfo = ClassInfo._getBase(this._baseClassInfo);
}
}
return this._baseClassInfo;
},
enumerable: true,
configurable: true
});
ClassInfo._getBase = function(info) {
var result = null;
var constructorProto = info._typeCosntructor.prototype;
if (constructorProto.__proto__) {
result = getClassInfo(constructorProto.__proto__);
}
return result;
};
return ClassInfo;
}();
exports.ClassInfo = ClassInfo;
function toUIString(obj) {
return isNullOrUndefined(obj) ? "" : obj + "";
}
exports.toUIString = toUIString;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var application_common_1 = __webpack_require__(19);
__export(__webpack_require__(19));
var ActivityCreated = "activityCreated";
var ActivityDestroyed = "activityDestroyed";
var ActivityStarted = "activityStarted";
var ActivityPaused = "activityPaused";
var ActivityResumed = "activityResumed";
var ActivityStopped = "activityStopped";
var SaveActivityState = "saveActivityState";
var ActivityResult = "activityResult";
var ActivityBackPressed = "activityBackPressed";
var ActivityRequestPermissions = "activityRequestPermissions";
var AndroidApplication = function(_super) {
__extends(AndroidApplication, _super);
function AndroidApplication() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._registeredReceivers = {};
_this._pendingReceiverRegistrations = new Array();
return _this;
}
Object.defineProperty(AndroidApplication.prototype, "currentContext", {
get: function() {
return this.foregroundActivity;
},
enumerable: true,
configurable: true
});
AndroidApplication.prototype.init = function(nativeApp) {
if (this.nativeApp === nativeApp) {
return;
}
if (this.nativeApp) {
throw new Error("application.android already initialized.");
}
this.nativeApp = nativeApp;
this.packageName = nativeApp.getPackageName();
this.context = nativeApp.getApplicationContext();
var lifecycleCallbacks = initLifecycleCallbacks();
var componentCallbacks = initComponentCallbacks();
this.nativeApp.registerActivityLifecycleCallbacks(lifecycleCallbacks);
this.nativeApp.registerComponentCallbacks(componentCallbacks);
this._registerPendingReceivers();
};
AndroidApplication.prototype._registerPendingReceivers = function() {
var _this = this;
this._pendingReceiverRegistrations.forEach(function(func) {
return func(_this.context);
});
this._pendingReceiverRegistrations.length = 0;
};
AndroidApplication.prototype.registerBroadcastReceiver = function(intentFilter, onReceiveCallback) {
ensureBroadCastReceiverClass();
var that = this;
var registerFunc = function(context) {
var receiver = new BroadcastReceiverClass(onReceiveCallback);
context.registerReceiver(receiver, new android.content.IntentFilter(intentFilter));
that._registeredReceivers[intentFilter] = receiver;
};
if (this.context) {
registerFunc(this.context);
} else {
this._pendingReceiverRegistrations.push(registerFunc);
}
};
AndroidApplication.prototype.unregisterBroadcastReceiver = function(intentFilter) {
var receiver = this._registeredReceivers[intentFilter];
if (receiver) {
this.context.unregisterReceiver(receiver);
this._registeredReceivers[intentFilter] = undefined;
delete this._registeredReceivers[intentFilter];
}
};
return AndroidApplication;
}(application_common_1.Observable);
AndroidApplication.activityCreatedEvent = ActivityCreated;
AndroidApplication.activityDestroyedEvent = ActivityDestroyed;
AndroidApplication.activityStartedEvent = ActivityStarted;
AndroidApplication.activityPausedEvent = ActivityPaused;
AndroidApplication.activityResumedEvent = ActivityResumed;
AndroidApplication.activityStoppedEvent = ActivityStopped;
AndroidApplication.saveActivityStateEvent = SaveActivityState;
AndroidApplication.activityResultEvent = ActivityResult;
AndroidApplication.activityBackPressedEvent = ActivityBackPressed;
AndroidApplication.activityRequestPermissionsEvent = ActivityRequestPermissions;
exports.AndroidApplication = AndroidApplication;
var androidApp = new AndroidApplication();
exports.android = androidApp;
application_common_1.setApplication(androidApp);
var mainEntry;
var started = false;
function start(entry) {
if (started) {
throw new Error("Application is already started.");
}
started = true;
mainEntry = typeof entry === "string" ? {
moduleName: entry
} : entry;
if (!androidApp.nativeApp) {
var nativeApp = getNativeApplication();
androidApp.init(nativeApp);
}
}
exports.start = start;
function getMainEntry() {
return mainEntry;
}
exports.getMainEntry = getMainEntry;
function getNativeApplication() {
var nativeApp = androidApp.nativeApp;
if (!nativeApp) {
if (!nativeApp && com.tns.NativeScriptApplication) {
nativeApp = com.tns.NativeScriptApplication.getInstance();
}
if (!nativeApp) {
var clazz = java.lang.Class.forName("android.app.ActivityThread");
if (clazz) {
var method = clazz.getMethod("currentApplication", null);
if (method) {
nativeApp = method.invoke(null, null);
}
}
}
if (!nativeApp) {
throw new Error("Failed to retrieve native Android Application object. If you have a custom android.app.Application type implemented make sure that you've called the '<application-module>.android.init' method.");
}
}
return nativeApp;
}
exports.getNativeApplication = getNativeApplication;
global.__onLiveSync = function() {
if (androidApp && androidApp.paused) {
return;
}
application_common_1.livesync();
};
function initLifecycleCallbacks() {
var lifecycleCallbacks = new android.app.Application.ActivityLifecycleCallbacks({
onActivityCreated: function(activity, savedInstanceState) {
var activityInfo = activity.getPackageManager().getActivityInfo(activity.getComponentName(), android.content.pm.PackageManager.GET_META_DATA);
if (activityInfo.metaData) {
var setThemeOnLaunch = activityInfo.metaData.getInt("SET_THEME_ON_LAUNCH", -1);
if (setThemeOnLaunch !== -1) {
activity.setTheme(setThemeOnLaunch);
}
}
if (!androidApp.startActivity) {
androidApp.startActivity = activity;
}
androidApp.notify({
eventName: ActivityCreated,
object: androidApp,
activity: activity,
bundle: savedInstanceState
});
},
onActivityDestroyed: function(activity) {
if (activity === androidApp.foregroundActivity) {
androidApp.foregroundActivity = undefined;
}
if (activity === androidApp.startActivity) {
androidApp.startActivity = undefined;
}
androidApp.notify({
eventName: ActivityDestroyed,
object: androidApp,
activity: activity
});
gc();
},
onActivityPaused: function(activity) {
if (activity.isNativeScriptActivity) {
androidApp.paused = true;
application_common_1.notify({
eventName: application_common_1.suspendEvent,
object: androidApp,
android: activity
});
}
androidApp.notify({
eventName: ActivityPaused,
object: androidApp,
activity: activity
});
},
onActivityResumed: function(activity) {
androidApp.foregroundActivity = activity;
if (activity.isNativeScriptActivity) {
application_common_1.notify({
eventName: application_common_1.resumeEvent,
object: androidApp,
android: activity
});
androidApp.paused = false;
}
androidApp.notify({
eventName: ActivityResumed,
object: androidApp,
activity: activity
});
},
onActivitySaveInstanceState: function(activity, outState) {
androidApp.notify({
eventName: SaveActivityState,
object: androidApp,
activity: activity,
bundle: outState
});
},
onActivityStarted: function(activity) {
androidApp.notify({
eventName: ActivityStarted,
object: androidApp,
activity: activity
});
},
onActivityStopped: function(activity) {
androidApp.notify({
eventName: ActivityStopped,
object: androidApp,
activity: activity
});
}
});
return lifecycleCallbacks;
}
var currentOrientation;
function initComponentCallbacks() {
var componentCallbacks = new android.content.ComponentCallbacks2({
onLowMemory: function() {
gc();
java.lang.System.gc();
application_common_1.notify({
eventName: application_common_1.lowMemoryEvent,
object: this,
android: this
});
},
onTrimMemory: function(level) {},
onConfigurationChanged: function(newConfig) {
var newOrientation = newConfig.orientation;
if (newOrientation === currentOrientation) {
return;
}
currentOrientation = newOrientation;
var newValue;
switch (newOrientation) {
case android.content.res.Configuration.ORIENTATION_LANDSCAPE:
newValue = "landscape";
break;

case android.content.res.Configuration.ORIENTATION_PORTRAIT:
newValue = "portrait";
break;

default:
newValue = "unknown";
break;
}
application_common_1.notify({
eventName: application_common_1.orientationChangedEvent,
android: androidApp.nativeApp,
newValue: newValue,
object: androidApp
});
}
});
return componentCallbacks;
}
var BroadcastReceiverClass;
function ensureBroadCastReceiverClass() {
if (BroadcastReceiverClass) {
return;
}
var BroadcastReceiver = function(_super) {
__extends(BroadcastReceiver, _super);
function BroadcastReceiver(onReceiveCallback) {
var _this = _super.call(this) || this;
_this._onReceiveCallback = onReceiveCallback;
return global.__native(_this);
}
BroadcastReceiver.prototype.onReceive = function(context, intent) {
if (this._onReceiveCallback) {
this._onReceiveCallback(context, intent);
}
};
return BroadcastReceiver;
}(android.content.BroadcastReceiver);
BroadcastReceiverClass = BroadcastReceiver;
}
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
__webpack_require__(5);
var observable_1 = __webpack_require__(20);
exports.Observable = observable_1.Observable;
var events = new observable_1.Observable();
var launched = false;
function setLaunched() {
launched = true;
events.off("launch", setLaunched);
}
events.on("launch", setLaunched);
function hasLaunched() {
return launched;
}
exports.hasLaunched = hasLaunched;
exports.launchEvent = "launch";
exports.suspendEvent = "suspend";
exports.resumeEvent = "resume";
exports.exitEvent = "exit";
exports.lowMemoryEvent = "lowMemory";
exports.uncaughtErrorEvent = "uncaughtError";
exports.orientationChangedEvent = "orientationChanged";
var cssFile = "app.css";
var resources = {};
function getResources() {
return resources;
}
exports.getResources = getResources;
function setResources(res) {
resources = res;
}
exports.setResources = setResources;
exports.android = undefined;
exports.ios = undefined;
exports.on = events.on.bind(events);
exports.off = events.off.bind(events);
exports.notify = events.notify.bind(events);
var app;
function setApplication(instance) {
app = instance;
}
exports.setApplication = setApplication;
function livesync() {
events.notify({
eventName: "livesync",
object: app
});
}
exports.livesync = livesync;
function setCssFileName(cssFileName) {
cssFile = cssFileName;
events.notify({
eventName: "cssChanged",
object: app,
cssFile: cssFileName
});
}
exports.setCssFileName = setCssFileName;
function getCssFileName() {
return cssFile;
}
exports.getCssFileName = getCssFileName;
function addCss(cssText) {
events.notify({
eventName: "cssChanged",
object: app,
cssText: cssText
});
}
exports.addCss = addCss;
global.__onUncaughtError = function(error) {
events.notify({
eventName: exports.uncaughtErrorEvent,
object: app,
android: error,
ios: error,
error: error
});
};
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var _wrappedIndex = 0;
var WrappedValue = function() {
function WrappedValue(wrapped) {
this.wrapped = wrapped;
}
WrappedValue.unwrap = function(value) {
return value && value.wrapped ? value.wrapped : value;
};
WrappedValue.wrap = function(value) {
var w = _wrappedValues[_wrappedIndex++ % 5];
w.wrapped = value;
return w;
};
return WrappedValue;
}();
exports.WrappedValue = WrappedValue;
var _wrappedValues = [ new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null) ];
var Observable = function() {
function Observable() {
this._observers = {};
}
Observable.prototype.get = function(name) {
return this[name];
};
Observable.prototype.set = function(name, value) {
var oldValue = this[name];
if (this[name] === value) {
return;
}
var newValue = WrappedValue.unwrap(value);
this[name] = newValue;
this.notifyPropertyChange(name, newValue, oldValue);
};
Observable.prototype.on = function(eventNames, callback, thisArg) {
this.addEventListener(eventNames, callback, thisArg);
};
Observable.prototype.off = function(eventNames, callback, thisArg) {
this.removeEventListener(eventNames, callback, thisArg);
};
Observable.prototype.addEventListener = function(eventNames, callback, thisArg) {
if (typeof eventNames !== "string") {
throw new TypeError("Events name(s) must be string.");
}
if (typeof callback !== "function") {
throw new TypeError("callback must be function.");
}
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event_1 = events[i].trim();
var list = this._getEventList(event_1, true);
list.push({
callback: callback,
thisArg: thisArg
});
}
};
Observable.prototype.removeEventListener = function(eventNames, callback, thisArg) {
if (typeof eventNames !== "string") {
throw new TypeError("Events name(s) must be string.");
}
if (callback && typeof callback !== "function") {
throw new TypeError("callback must be function.");
}
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event_2 = events[i].trim();
if (callback) {
var list = this._getEventList(event_2, false);
if (list) {
var index_1 = this._indexOfListener(list, callback, thisArg);
if (index_1 >= 0) {
list.splice(index_1, 1);
}
if (list.length === 0) {
delete this._observers[event_2];
}
}
} else {
this._observers[event_2] = undefined;
delete this._observers[event_2];
}
}
};
Observable.prototype.notify = function(data) {
var observers = this._observers[data.eventName];
if (!observers) {
return;
}
for (var i = observers.length - 1; i >= 0; i--) {
var entry = observers[i];
if (entry.thisArg) {
entry.callback.apply(entry.thisArg, [ data ]);
} else {
entry.callback(data);
}
}
};
Observable.prototype.notifyPropertyChange = function(name, value, oldValue) {
this.notify(this._createPropertyChangeData(name, value, oldValue));
};
Observable.prototype.hasListeners = function(eventName) {
return eventName in this._observers;
};
Observable.prototype._createPropertyChangeData = function(propertyName, value, oldValue) {
return {
eventName: Observable.propertyChangeEvent,
object: this,
propertyName: propertyName,
value: value,
oldValue: oldValue
};
};
Observable.prototype._emit = function(eventNames) {
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event_3 = events[i].trim();
this.notify({
eventName: event_3,
object: this
});
}
};
Observable.prototype._getEventList = function(eventName, createIfNeeded) {
if (!eventName) {
throw new TypeError("EventName must be valid string.");
}
var list = this._observers[eventName];
if (!list && createIfNeeded) {
list = [];
this._observers[eventName] = list;
}
return list;
};
Observable.prototype._indexOfListener = function(list, callback, thisArg) {
for (var i = 0; i < list.length; i++) {
var entry = list[i];
if (thisArg) {
if (entry.callback === callback && entry.thisArg === thisArg) {
return i;
}
} else {
if (entry.callback === callback) {
return i;
}
}
}
return -1;
};
return Observable;
}();
Observable.propertyChangeEvent = "propertyChange";
exports.Observable = Observable;
var ObservableFromObject = function(_super) {
__extends(ObservableFromObject, _super);
function ObservableFromObject() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._map = {};
return _this;
}
ObservableFromObject.prototype.set = function(name, value) {
var currentValue = this._map[name];
if (currentValue === value) {
return;
}
var newValue = WrappedValue.unwrap(value);
this._map[name] = newValue;
this.notifyPropertyChange(name, newValue, currentValue);
};
return ObservableFromObject;
}(Observable);
function defineNewProperty(target, propertyName) {
Object.defineProperty(target, propertyName, {
get: function() {
return target._map[propertyName];
},
set: function(value) {
target.set(propertyName, value);
},
enumerable: true,
configurable: true
});
}
function addPropertiesFromObject(observable, source, recursive) {
if (recursive === void 0) {
recursive = false;
}
var isRecursive = recursive;
for (var prop in source) {
if (source.hasOwnProperty(prop)) {
if (isRecursive) {
if (!Array.isArray(source[prop]) && source[prop] && typeof source[prop] === "object" && !(source[prop] instanceof Observable)) {
source[prop] = fromObjectRecursive(source[prop]);
}
}
defineNewProperty(observable, prop);
observable.set(prop, source[prop]);
}
}
}
function fromObject(source) {
var observable = new ObservableFromObject();
addPropertiesFromObject(observable, source, false);
return observable;
}
exports.fromObject = fromObject;
function fromObjectRecursive(source) {
var observable = new ObservableFromObject();
addPropertiesFromObject(observable, source, true);
return observable;
}
exports.fromObjectRecursive = fromObjectRecursive;
}, function(module, exports) {
exports.parse = parse;
function parse(str) {
return new Parser(str).parse();
}
function Parser(str) {
this.str = str;
}
Parser.prototype.skip = function(m) {
this.str = this.str.slice(m[0].length);
};
Parser.prototype.comma = function() {
var m = /^, */.exec(this.str);
if (!m) return;
this.skip(m);
return {
type: "comma",
string: ","
};
};
Parser.prototype.ident = function() {
var m = /^([\w-]+) */.exec(this.str);
if (!m) return;
this.skip(m);
return {
type: "ident",
string: m[1]
};
};
Parser.prototype.int = function() {
var m = /^(([-\+]?\d+)(\S+)?) */.exec(this.str);
if (!m) return;
this.skip(m);
var n = ~~m[2];
var u = m[3];
return {
type: "number",
string: m[1],
unit: u || "",
value: n
};
};
Parser.prototype.float = function() {
var m = /^(((?:[-\+]?\d+)?\.\d+)(\S+)?) */.exec(this.str);
if (!m) return;
this.skip(m);
var n = parseFloat(m[2]);
var u = m[3];
return {
type: "number",
string: m[1],
unit: u || "",
value: n
};
};
Parser.prototype.number = function() {
return this.float() || this.int();
};
Parser.prototype.double = function() {
var m = /^"([^"]*)" */.exec(this.str);
if (!m) return m;
this.skip(m);
return {
type: "string",
quote: '"',
string: '"' + m[1] + '"',
value: m[1]
};
};
Parser.prototype.single = function() {
var m = /^'([^']*)' */.exec(this.str);
if (!m) return m;
this.skip(m);
return {
type: "string",
quote: "'",
string: "'" + m[1] + "'",
value: m[1]
};
};
Parser.prototype.string = function() {
return this.single() || this.double();
};
Parser.prototype.value = function() {
return this.number() || this.ident() || this.string() || this.comma();
};
Parser.prototype.parse = function() {
var vals = [];
while (this.str.length) {
var obj = this.value();
if (!obj) throw new Error("failed to parse near `" + this.str.slice(0, 10) + "...`");
vals.push(obj);
}
return vals;
};
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var file_access_module = __webpack_require__(23);
var fileAccess;
var getFileAccess = function() {
if (!fileAccess) {
fileAccess = new file_access_module.FileSystemAccess();
}
return fileAccess;
};
var platform;
function ensurePlatform() {
if (!platform) {
platform = __webpack_require__(25);
}
}
var nameProperty = "_name";
var pathProperty = "_path";
var isKnownProperty = "_isKnown";
var fileLockedProperty = "_locked";
var extensionProperty = "_extension";
var lastModifiedProperty = "_lastModified";
var createFile = function(info) {
var file = new File();
file[pathProperty] = info.path;
file[nameProperty] = info.name;
file[extensionProperty] = info.extension;
return file;
};
var createFolder = function(info) {
var documents = knownFolders.documents();
if (info.path === documents.path) {
return documents;
}
var temp = knownFolders.temp();
if (info.path === temp.path) {
return temp;
}
var folder = new Folder();
folder[pathProperty] = info.path;
folder[nameProperty] = info.name;
return folder;
};
var FileSystemEntity = function() {
function FileSystemEntity() {}
Object.defineProperty(FileSystemEntity.prototype, "parent", {
get: function() {
var onError = function(error) {
throw error;
};
var folderInfo = getFileAccess().getParent(this.path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
},
enumerable: true,
configurable: true
});
FileSystemEntity.prototype.remove = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.removeSync(localError);
if (!hasError) {
resolve();
}
});
};
FileSystemEntity.prototype.removeSync = function(onError) {
if (this[isKnownProperty]) {
if (onError) {
onError({
message: "Cannot delete known folder."
});
}
return;
}
var fileAccess = getFileAccess();
if (this instanceof File) {
fileAccess.deleteFile(this.path, onError);
} else if (this instanceof Folder) {
fileAccess.deleteFolder(this.path, onError);
}
};
FileSystemEntity.prototype.rename = function(newName) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.renameSync(newName, localError);
if (!hasError) {
resolve();
}
});
};
FileSystemEntity.prototype.renameSync = function(newName, onError) {
if (this[isKnownProperty]) {
if (onError) {
onError(new Error("Cannot rename known folder."));
}
return;
}
var parentFolder = this.parent;
if (!parentFolder) {
if (onError) {
onError(new Error("No parent folder."));
}
return;
}
var fileAccess = getFileAccess();
var path = parentFolder.path;
var newPath = fileAccess.joinPath(path, newName);
var hasError = false;
var localError = function(error) {
hasError = true;
if (onError) {
onError(error);
}
return null;
};
fileAccess.rename(this.path, newPath, localError);
this[pathProperty] = newPath;
this[nameProperty] = newName;
if (this instanceof File) {
this[extensionProperty] = fileAccess.getFileExtension(newPath);
}
};
Object.defineProperty(FileSystemEntity.prototype, "name", {
get: function() {
return this[nameProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(FileSystemEntity.prototype, "path", {
get: function() {
return this[pathProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(FileSystemEntity.prototype, "lastModified", {
get: function() {
var value = this[lastModifiedProperty];
if (!this[lastModifiedProperty]) {
value = this[lastModifiedProperty] = getFileAccess().getLastModified(this.path);
}
return value;
},
enumerable: true,
configurable: true
});
return FileSystemEntity;
}();
exports.FileSystemEntity = FileSystemEntity;
var File = function(_super) {
__extends(File, _super);
function File() {
return _super !== null && _super.apply(this, arguments) || this;
}
File.fromPath = function(path) {
var onError = function(error) {
throw error;
};
var fileInfo = getFileAccess().getFile(path, onError);
if (!fileInfo) {
return undefined;
}
return createFile(fileInfo);
};
File.exists = function(path) {
return getFileAccess().fileExists(path);
};
Object.defineProperty(File.prototype, "extension", {
get: function() {
return this[extensionProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(File.prototype, "isLocked", {
get: function() {
return !!this[fileLockedProperty];
},
enumerable: true,
configurable: true
});
File.prototype.readSync = function(onError) {
this.checkAccess();
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
var content = getFileAccess().read(this.path, localError);
this[fileLockedProperty] = false;
return content;
};
File.prototype.writeSync = function(content, onError) {
this.checkAccess();
try {
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
getFileAccess().write(this.path, content, localError);
} finally {
this[fileLockedProperty] = false;
}
};
File.prototype.readText = function(encoding) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
var content = _this.readTextSync(localError, encoding);
if (!hasError) {
resolve(content);
}
});
};
File.prototype.readTextSync = function(onError, encoding) {
this.checkAccess();
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
var content = getFileAccess().readText(this.path, localError, encoding);
this[fileLockedProperty] = false;
return content;
};
File.prototype.writeText = function(content, encoding) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.writeTextSync(content, localError, encoding);
if (!hasError) {
resolve();
}
});
};
File.prototype.writeTextSync = function(content, onError, encoding) {
this.checkAccess();
try {
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
getFileAccess().writeText(this.path, content, localError, encoding);
} finally {
this[fileLockedProperty] = false;
}
};
File.prototype.checkAccess = function() {
if (this.isLocked) {
throw new Error("Cannot access a locked file.");
}
};
return File;
}(FileSystemEntity);
exports.File = File;
var Folder = function(_super) {
__extends(Folder, _super);
function Folder() {
return _super !== null && _super.apply(this, arguments) || this;
}
Folder.fromPath = function(path) {
var onError = function(error) {
throw error;
};
var folderInfo = getFileAccess().getFolder(path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
};
Folder.exists = function(path) {
return getFileAccess().folderExists(path);
};
Folder.prototype.contains = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
if (fileAccess.fileExists(path)) {
return true;
}
return fileAccess.folderExists(path);
};
Folder.prototype.clear = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var onError = function(error) {
hasError = true;
reject(error);
};
_this.clearSync(onError);
if (!hasError) {
resolve();
}
});
};
Folder.prototype.clearSync = function(onError) {
getFileAccess().emptyFolder(this.path, onError);
};
Object.defineProperty(Folder.prototype, "isKnown", {
get: function() {
return this[isKnownProperty];
},
enumerable: true,
configurable: true
});
Folder.prototype.getFile = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
var onError = function(error) {
throw error;
};
var fileInfo = fileAccess.getFile(path, onError);
if (!fileInfo) {
return undefined;
}
return createFile(fileInfo);
};
Folder.prototype.getFolder = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
var onError = function(error) {
throw error;
};
var folderInfo = fileAccess.getFolder(path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
};
Folder.prototype.getEntities = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
var entities = _this.getEntitiesSync(localError);
if (!hasError) {
resolve(entities);
}
});
};
Folder.prototype.getEntitiesSync = function(onError) {
var fileInfos = getFileAccess().getEntities(this.path, onError);
if (!fileInfos) {
return null;
}
var entities = new Array();
var i;
for (i = 0; i < fileInfos.length; i++) {
if (fileInfos[i].extension) {
entities.push(createFile(fileInfos[i]));
} else {
entities.push(createFolder(fileInfos[i]));
}
}
return entities;
};
Folder.prototype.eachEntity = function(onEntity) {
if (!onEntity) {
return;
}
var onSuccess = function(fileInfo) {
var entity;
if (fileInfo.extension) {
entity = createFile(fileInfo);
} else {
entity = createFolder(fileInfo);
}
return onEntity(entity);
};
var onError = function(error) {
throw error;
};
getFileAccess().eachEntity(this.path, onSuccess, onError);
};
return Folder;
}(FileSystemEntity);
exports.Folder = Folder;
var knownFolders;
(function(knownFolders) {
var _documents;
var _temp;
var _app;
knownFolders.documents = function() {
if (!_documents) {
var path = getFileAccess().getDocumentsFolderPath();
_documents = new Folder();
_documents[pathProperty] = path;
_documents[isKnownProperty] = true;
}
return _documents;
};
knownFolders.temp = function() {
if (!_temp) {
var path = getFileAccess().getTempFolderPath();
_temp = new Folder();
_temp[pathProperty] = path;
_temp[isKnownProperty] = true;
}
return _temp;
};
knownFolders.currentApp = function() {
if (!_app) {
var path = getFileAccess().getCurrentAppPath();
_app = new Folder();
_app[pathProperty] = path;
_app[isKnownProperty] = true;
}
return _app;
};
var ios;
(function(ios) {
function _checkPlatform(knownFolderName) {
ensurePlatform();
if (!platform.isIOS) {
throw new Error('The "' + knownFolderName + '" known folder is available on iOS only!');
}
}
var _library;
ios.library = function() {
_checkPlatform("library");
if (!_library) {
var existingFolderInfo = getExistingFolderInfo(5);
if (existingFolderInfo) {
_library = existingFolderInfo.folder;
_library[pathProperty] = existingFolderInfo.path;
_library[isKnownProperty] = true;
}
}
return _library;
};
var _developer;
ios.developer = function() {
_checkPlatform("developer");
if (!_developer) {
var existingFolderInfo = getExistingFolderInfo(6);
if (existingFolderInfo) {
_developer = existingFolderInfo.folder;
_developer[pathProperty] = existingFolderInfo.path;
_developer[isKnownProperty] = true;
}
}
return _developer;
};
var _desktop;
ios.desktop = function() {
_checkPlatform("desktop");
if (!_desktop) {
var existingFolderInfo = getExistingFolderInfo(12);
if (existingFolderInfo) {
_desktop = existingFolderInfo.folder;
_desktop[pathProperty] = existingFolderInfo.path;
_desktop[isKnownProperty] = true;
}
}
return _desktop;
};
var _downloads;
ios.downloads = function() {
_checkPlatform("downloads");
if (!_downloads) {
var existingFolderInfo = getExistingFolderInfo(15);
if (existingFolderInfo) {
_downloads = existingFolderInfo.folder;
_downloads[pathProperty] = existingFolderInfo.path;
_downloads[isKnownProperty] = true;
}
}
return _downloads;
};
var _movies;
ios.movies = function() {
_checkPlatform("movies");
if (!_movies) {
var existingFolderInfo = getExistingFolderInfo(17);
if (existingFolderInfo) {
_movies = existingFolderInfo.folder;
_movies[pathProperty] = existingFolderInfo.path;
_movies[isKnownProperty] = true;
}
}
return _movies;
};
var _music;
ios.music = function() {
_checkPlatform("music");
if (!_music) {
var existingFolderInfo = getExistingFolderInfo(18);
if (existingFolderInfo) {
_music = existingFolderInfo.folder;
_music[pathProperty] = existingFolderInfo.path;
_music[isKnownProperty] = true;
}
}
return _music;
};
var _pictures;
ios.pictures = function() {
_checkPlatform("pictures");
if (!_pictures) {
var existingFolderInfo = getExistingFolderInfo(19);
if (existingFolderInfo) {
_pictures = existingFolderInfo.folder;
_pictures[pathProperty] = existingFolderInfo.path;
_pictures[isKnownProperty] = true;
}
}
return _pictures;
};
var _sharedPublic;
ios.sharedPublic = function() {
_checkPlatform("sharedPublic");
if (!_sharedPublic) {
var existingFolderInfo = getExistingFolderInfo(21);
if (existingFolderInfo) {
_sharedPublic = existingFolderInfo.folder;
_sharedPublic[pathProperty] = existingFolderInfo.path;
_sharedPublic[isKnownProperty] = true;
}
}
return _sharedPublic;
};
function getExistingFolderInfo(pathDirectory) {
var fileAccess = getFileAccess();
var folderPath = fileAccess.getKnownPath(pathDirectory);
var folderInfo = fileAccess.getExistingFolder(folderPath);
if (folderInfo) {
return {
folder: createFolder(folderInfo),
path: folderPath
};
}
return undefined;
}
})(ios = knownFolders.ios || (knownFolders.ios = {}));
})(knownFolders = exports.knownFolders || (exports.knownFolders = {}));
var path;
(function(path_1) {
function normalize(path) {
return getFileAccess().normalizePath(path);
}
path_1.normalize = normalize;
function join() {
var paths = [];
for (var _i = 0; _i < arguments.length; _i++) {
paths[_i] = arguments[_i];
}
var fileAccess = getFileAccess();
return fileAccess.joinPaths(paths);
}
path_1.join = join;
path_1.separator = getFileAccess().getPathSeparator();
})(path = exports.path || (exports.path = {}));
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var textModule = __webpack_require__(24);
var application_1 = __webpack_require__(18);
var applicationContext;
function getApplicationContext() {
if (!applicationContext) {
applicationContext = application_1.getNativeApplication().getApplicationContext();
}
return applicationContext;
}
var FileSystemAccess = function() {
function FileSystemAccess() {
this._pathSeparator = "/";
}
FileSystemAccess.prototype.getLastModified = function(path) {
var javaFile = new java.io.File(path);
return new Date(javaFile.lastModified());
};
FileSystemAccess.prototype.getParent = function(path, onError) {
try {
var javaFile = new java.io.File(path);
var parent = javaFile.getParentFile();
return {
path: parent.getAbsolutePath(),
name: parent.getName()
};
} catch (exception) {
if (onError) {
onError(exception);
}
return undefined;
}
};
FileSystemAccess.prototype.getFile = function(path, onError) {
return this.ensureFile(new java.io.File(path), false, onError);
};
FileSystemAccess.prototype.getFolder = function(path, onError) {
var javaFile = new java.io.File(path);
var dirInfo = this.ensureFile(javaFile, true, onError);
if (!dirInfo) {
return undefined;
}
return {
path: dirInfo.path,
name: dirInfo.name
};
};
FileSystemAccess.prototype.eachEntity = function(path, onEntity, onError) {
if (!onEntity) {
return;
}
this.enumEntities(path, onEntity, onError);
};
FileSystemAccess.prototype.getEntities = function(path, onError) {
var fileInfos = new Array();
var onEntity = function(entity) {
fileInfos.push(entity);
return true;
};
var errorOccurred;
var localError = function(error) {
if (onError) {
onError(error);
}
errorOccurred = true;
};
this.enumEntities(path, onEntity, localError);
if (!errorOccurred) {
return fileInfos;
}
return null;
};
FileSystemAccess.prototype.fileExists = function(path) {
var file = new java.io.File(path);
return file.exists();
};
FileSystemAccess.prototype.folderExists = function(path) {
var file = new java.io.File(path);
return file.exists() && file.isDirectory();
};
FileSystemAccess.prototype.deleteFile = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.isFile()) {
if (onError) {
onError({
message: "The specified parameter is not a File entity."
});
}
return;
}
if (!javaFile.delete()) {
if (onError) {
onError({
message: "File deletion failed"
});
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.deleteFolder = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError({
message: "The specified parameter is not a Folder entity."
});
}
return;
}
this.deleteFolderContent(javaFile);
if (!javaFile.delete()) {
if (onError) {
onError({
message: "Folder deletion failed."
});
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.emptyFolder = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError({
message: "The specified parameter is not a Folder entity."
});
}
return;
}
this.deleteFolderContent(javaFile);
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.rename = function(path, newPath, onError) {
var javaFile = new java.io.File(path);
if (!javaFile.exists()) {
if (onError) {
onError(new Error("The file to rename does not exist"));
}
return;
}
var newFile = new java.io.File(newPath);
if (newFile.exists()) {
if (onError) {
onError(new Error("A file with the same name already exists."));
}
return;
}
if (!javaFile.renameTo(newFile)) {
if (onError) {
onError(new Error("Failed to rename file '" + path + "' to '" + newPath + "'"));
}
}
};
FileSystemAccess.prototype.getDocumentsFolderPath = function() {
var dir = getApplicationContext().getFilesDir();
return dir.getAbsolutePath();
};
FileSystemAccess.prototype.getLogicalRootPath = function() {
var dir = getApplicationContext().getFilesDir();
return dir.getCanonicalPath();
};
FileSystemAccess.prototype.getTempFolderPath = function() {
var dir = getApplicationContext().getCacheDir();
return dir.getAbsolutePath();
};
FileSystemAccess.prototype.getCurrentAppPath = function() {
return this.getLogicalRootPath() + "/app";
};
FileSystemAccess.prototype.read = function(path, onError) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileInputStream(javaFile);
var bytes = Array.create("byte", javaFile.length());
var dataInputStream = new java.io.DataInputStream(stream);
dataInputStream.readFully(bytes);
return bytes;
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.write = function(path, bytes, onError) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileOutputStream(javaFile);
stream.write(bytes, 0, bytes.length);
stream.close();
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.readText = function(path, onError, encoding) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileInputStream(javaFile);
var actualEncoding = encoding;
if (!actualEncoding) {
actualEncoding = textModule.encoding.UTF_8;
}
var reader = new java.io.InputStreamReader(stream, actualEncoding);
var bufferedReader = new java.io.BufferedReader(reader);
var line = undefined;
var result = "";
while (true) {
line = bufferedReader.readLine();
if (line === null) {
break;
}
if (result.length > 0) {
result += "\n";
}
result += line;
}
if (actualEncoding === textModule.encoding.UTF_8) {
result = FileSystemAccess._removeUtf8Bom(result);
}
bufferedReader.close();
return result;
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess._removeUtf8Bom = function(s) {
if (s.charCodeAt(0) === 65279) {
s = s.slice(1);
}
return s;
};
FileSystemAccess.prototype.writeText = function(path, content, onError, encoding) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileOutputStream(javaFile);
var actualEncoding = encoding;
if (!actualEncoding) {
actualEncoding = textModule.encoding.UTF_8;
}
var writer = new java.io.OutputStreamWriter(stream, actualEncoding);
writer.write(content);
writer.close();
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.deleteFolderContent = function(file) {
var filesList = file.listFiles();
if (filesList.length === 0) {
return true;
}
var i, childFile, success = false;
for (i = 0; i < filesList.length; i++) {
childFile = filesList[i];
if (childFile.getCanonicalFile().isDirectory()) {
success = this.deleteFolderContent(childFile);
if (!success) {
break;
}
}
success = childFile.delete();
}
return success;
};
FileSystemAccess.prototype.ensureFile = function(javaFile, isFolder, onError) {
try {
if (!javaFile.exists()) {
var created;
if (isFolder) {
created = javaFile.mkdirs();
} else {
javaFile.getParentFile().mkdirs();
created = javaFile.createNewFile();
}
if (!created) {
if (onError) {
onError("Failed to create new java File for path " + javaFile.getAbsolutePath());
}
return undefined;
} else {
javaFile.setReadable(true);
javaFile.setWritable(true);
}
}
var path = javaFile.getAbsolutePath();
return {
path: path,
name: javaFile.getName(),
extension: this.getFileExtension(path)
};
} catch (exception) {
if (onError) {
onError(exception);
}
return undefined;
}
};
FileSystemAccess.prototype.getFileExtension = function(path) {
var dotIndex = path.lastIndexOf(".");
if (dotIndex && dotIndex >= 0 && dotIndex < path.length) {
return path.substring(dotIndex);
}
return "";
};
FileSystemAccess.prototype.enumEntities = function(path, callback, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError("There is no folder existing at path " + path);
}
return;
}
var filesList = javaFile.listFiles();
var length = filesList.length;
var i;
var info;
var retVal;
for (i = 0; i < length; i++) {
javaFile = filesList[i];
info = {
path: javaFile.getAbsolutePath(),
name: javaFile.getName()
};
if (javaFile.isFile()) {
info.extension = this.getFileExtension(info.path);
}
retVal = callback(info);
if (retVal === false) {
break;
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.getPathSeparator = function() {
return this._pathSeparator;
};
FileSystemAccess.prototype.normalizePath = function(path) {
var file = new java.io.File(path);
return file.getAbsolutePath();
};
FileSystemAccess.prototype.joinPath = function(left, right) {
var file1 = new java.io.File(left);
var file2 = new java.io.File(file1, right);
return file2.getPath();
};
FileSystemAccess.prototype.joinPaths = function(paths) {
if (!paths || paths.length === 0) {
return "";
}
if (paths.length === 1) {
return paths[0];
}
var i, result = paths[0];
for (i = 1; i < paths.length; i++) {
result = this.joinPath(result, paths[i]);
}
return result;
};
return FileSystemAccess;
}();
exports.FileSystemAccess = FileSystemAccess;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var encoding;
(function(encoding) {
encoding.ISO_8859_1 = "ISO-8859-1";
encoding.US_ASCII = "US-ASCII";
encoding.UTF_16 = "UTF-16";
encoding.UTF_16BE = "UTF-16BE";
encoding.UTF_16LE = "UTF-16LE";
encoding.UTF_8 = "UTF-8";
})(encoding = exports.encoding || (exports.encoding = {}));
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var appModule = __webpack_require__(18);
var MIN_TABLET_PIXELS = 600;
var platformNames;
(function(platformNames) {
platformNames.android = "Android";
platformNames.ios = "iOS";
})(platformNames = exports.platformNames || (exports.platformNames = {}));
var Device = function() {
function Device() {}
Object.defineProperty(Device.prototype, "os", {
get: function() {
return platformNames.android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "manufacturer", {
get: function() {
if (!this._manufacturer) {
this._manufacturer = android.os.Build.MANUFACTURER;
}
return this._manufacturer;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "osVersion", {
get: function() {
if (!this._osVersion) {
this._osVersion = android.os.Build.VERSION.RELEASE;
}
return this._osVersion;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "model", {
get: function() {
if (!this._model) {
this._model = android.os.Build.MODEL;
}
return this._model;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "sdkVersion", {
get: function() {
if (!this._sdkVersion) {
this._sdkVersion = android.os.Build.VERSION.SDK;
}
return this._sdkVersion;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "deviceType", {
get: function() {
if (!this._deviceType) {
var dips = Math.min(screen.mainScreen.widthPixels, screen.mainScreen.heightPixels) / screen.mainScreen.scale;
if (dips >= MIN_TABLET_PIXELS) {
this._deviceType = "Tablet";
} else {
this._deviceType = "Phone";
}
}
return this._deviceType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "uuid", {
get: function() {
if (!this._uuid) {
var nativeApp = appModule.android.nativeApp;
this._uuid = android.provider.Settings.Secure.getString(nativeApp.getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);
}
return this._uuid;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "language", {
get: function() {
if (!this._language) {
this._language = java.util.Locale.getDefault().getLanguage().replace("_", "-");
}
return this._language;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "region", {
get: function() {
if (!this._region) {
this._region = java.util.Locale.getDefault().getCountry();
}
return this._region;
},
enumerable: true,
configurable: true
});
return Device;
}();
var MainScreen = function() {
function MainScreen() {}
MainScreen.prototype.cssChanged = function(args) {
if (!this._metrics) {
this._metrics = new android.util.DisplayMetrics();
}
this.initMetrics();
};
MainScreen.prototype.initMetrics = function() {
var nativeApp = appModule.getNativeApplication();
nativeApp.getSystemService(android.content.Context.WINDOW_SERVICE).getDefaultDisplay().getRealMetrics(this._metrics);
};
Object.defineProperty(MainScreen.prototype, "metrics", {
get: function() {
if (!this._metrics) {
appModule.on("cssChanged", this.cssChanged, this);
this._metrics = new android.util.DisplayMetrics();
this.initMetrics();
}
return this._metrics;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "widthPixels", {
get: function() {
return this.metrics.widthPixels;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "heightPixels", {
get: function() {
return this.metrics.heightPixels;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "scale", {
get: function() {
return this.metrics.density;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "widthDIPs", {
get: function() {
return this.metrics.widthPixels / this.metrics.density;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "heightDIPs", {
get: function() {
return this.metrics.heightPixels / this.metrics.density;
},
enumerable: true,
configurable: true
});
return MainScreen;
}();
exports.device = new Device();
var screen;
(function(screen) {
screen.mainScreen = new MainScreen();
})(screen = exports.screen || (exports.screen = {}));
exports.isAndroid = true;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var color_1 = __webpack_require__(27);
var Background = function() {
function Background() {
this.borderTopWidth = 0;
this.borderRightWidth = 0;
this.borderBottomWidth = 0;
this.borderLeftWidth = 0;
this.borderTopLeftRadius = 0;
this.borderTopRightRadius = 0;
this.borderBottomLeftRadius = 0;
this.borderBottomRightRadius = 0;
}
Background.prototype.clone = function() {
var clone = new Background();
clone.color = this.color;
clone.image = this.image;
clone.repeat = this.repeat;
clone.position = this.position;
clone.size = this.size;
clone.borderTopColor = this.borderTopColor;
clone.borderRightColor = this.borderRightColor;
clone.borderBottomColor = this.borderBottomColor;
clone.borderLeftColor = this.borderLeftColor;
clone.borderTopWidth = this.borderTopWidth;
clone.borderRightWidth = this.borderRightWidth;
clone.borderBottomWidth = this.borderBottomWidth;
clone.borderLeftWidth = this.borderLeftWidth;
clone.borderTopLeftRadius = this.borderTopLeftRadius;
clone.borderTopRightRadius = this.borderTopRightRadius;
clone.borderBottomRightRadius = this.borderBottomRightRadius;
clone.borderBottomLeftRadius = this.borderBottomLeftRadius;
clone.clipPath = this.clipPath;
return clone;
};
Background.prototype.withColor = function(value) {
var clone = this.clone();
clone.color = value;
return clone;
};
Background.prototype.withImage = function(value) {
var clone = this.clone();
clone.image = value;
return clone;
};
Background.prototype.withRepeat = function(value) {
var clone = this.clone();
clone.repeat = value;
return clone;
};
Background.prototype.withPosition = function(value) {
var clone = this.clone();
clone.position = value;
return clone;
};
Background.prototype.withSize = function(value) {
var clone = this.clone();
clone.size = value;
return clone;
};
Background.prototype.withBorderTopColor = function(value) {
var clone = this.clone();
clone.borderTopColor = value;
return clone;
};
Background.prototype.withBorderRightColor = function(value) {
var clone = this.clone();
clone.borderRightColor = value;
return clone;
};
Background.prototype.withBorderBottomColor = function(value) {
var clone = this.clone();
clone.borderBottomColor = value;
return clone;
};
Background.prototype.withBorderLeftColor = function(value) {
var clone = this.clone();
clone.borderLeftColor = value;
return clone;
};
Background.prototype.withBorderTopWidth = function(value) {
var clone = this.clone();
clone.borderTopWidth = value;
return clone;
};
Background.prototype.withBorderRightWidth = function(value) {
var clone = this.clone();
clone.borderRightWidth = value;
return clone;
};
Background.prototype.withBorderBottomWidth = function(value) {
var clone = this.clone();
clone.borderBottomWidth = value;
return clone;
};
Background.prototype.withBorderLeftWidth = function(value) {
var clone = this.clone();
clone.borderLeftWidth = value;
return clone;
};
Background.prototype.withBorderTopLeftRadius = function(value) {
var clone = this.clone();
clone.borderTopLeftRadius = value;
return clone;
};
Background.prototype.withBorderTopRightRadius = function(value) {
var clone = this.clone();
clone.borderTopRightRadius = value;
return clone;
};
Background.prototype.withBorderBottomRightRadius = function(value) {
var clone = this.clone();
clone.borderBottomRightRadius = value;
return clone;
};
Background.prototype.withBorderBottomLeftRadius = function(value) {
var clone = this.clone();
clone.borderBottomLeftRadius = value;
return clone;
};
Background.prototype.withClipPath = function(value) {
var clone = this.clone();
clone.clipPath = value;
return clone;
};
Background.prototype.isEmpty = function() {
return !this.color && !this.image && !this.hasBorderWidth() && !this.hasBorderRadius() && !this.clipPath;
};
Background.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return color_1.Color.equals(value1.color, value2.color) && value1.image === value2.image && value1.position === value2.position && value1.repeat === value2.repeat && value1.size === value2.size && color_1.Color.equals(value1.borderTopColor, value2.borderTopColor) && color_1.Color.equals(value1.borderRightColor, value2.borderRightColor) && color_1.Color.equals(value1.borderBottomColor, value2.borderBottomColor) && color_1.Color.equals(value1.borderLeftColor, value2.borderLeftColor) && value1.borderTopWidth === value2.borderTopWidth && value1.borderRightWidth === value2.borderRightWidth && value1.borderBottomWidth === value2.borderBottomWidth && value1.borderLeftWidth === value2.borderLeftWidth && value1.borderTopLeftRadius === value2.borderTopLeftRadius && value1.borderTopRightRadius === value2.borderTopRightRadius && value1.borderBottomRightRadius === value2.borderBottomRightRadius && value1.borderBottomLeftRadius === value2.borderBottomLeftRadius && value1.clipPath === value2.clipPath;
};
Background.prototype.hasBorderColor = function() {
return !!this.borderTopColor || !!this.borderRightColor || !!this.borderBottomColor || !!this.borderLeftColor;
};
Background.prototype.hasBorderWidth = function() {
return this.borderTopWidth > 0 || this.borderRightWidth > 0 || this.borderBottomWidth > 0 || this.borderLeftWidth > 0;
};
Background.prototype.hasBorderRadius = function() {
return this.borderTopLeftRadius > 0 || this.borderTopRightRadius > 0 || this.borderBottomRightRadius > 0 || this.borderBottomLeftRadius > 0;
};
Background.prototype.hasUniformBorderColor = function() {
return color_1.Color.equals(this.borderTopColor, this.borderRightColor) && color_1.Color.equals(this.borderTopColor, this.borderBottomColor) && color_1.Color.equals(this.borderTopColor, this.borderLeftColor);
};
Background.prototype.hasUniformBorderWidth = function() {
return this.borderTopWidth === this.borderRightWidth && this.borderTopWidth === this.borderBottomWidth && this.borderTopWidth === this.borderLeftWidth;
};
Background.prototype.hasUniformBorderRadius = function() {
return this.borderTopLeftRadius === this.borderTopRightRadius && this.borderTopLeftRadius === this.borderBottomRightRadius && this.borderTopLeftRadius === this.borderBottomLeftRadius;
};
Background.prototype.hasUniformBorder = function() {
return this.hasUniformBorderColor() && this.hasUniformBorderWidth() && this.hasUniformBorderRadius();
};
Background.prototype.getUniformBorderColor = function() {
if (this.hasUniformBorderColor()) {
return this.borderTopColor;
}
return undefined;
};
Background.prototype.getUniformBorderWidth = function() {
if (this.hasUniformBorderWidth()) {
return this.borderTopWidth;
}
return 0;
};
Background.prototype.getUniformBorderRadius = function() {
if (this.hasUniformBorderRadius()) {
return this.borderTopLeftRadius;
}
return 0;
};
Background.prototype.toString = function() {
return "isEmpty: " + this.isEmpty() + "; color: " + this.color + "; image: " + this.image + "; repeat: " + this.repeat + "; position: " + this.position + "; size: " + this.size + "; borderTopColor: " + this.borderTopColor + "; borderRightColor: " + this.borderRightColor + "; borderBottomColor: " + this.borderBottomColor + "; borderLeftColor: " + this.borderLeftColor + "; borderTopWidth: " + this.borderTopWidth + "; borderRightWidth: " + this.borderRightWidth + "; borderBottomWidth: " + this.borderBottomWidth + "; borderLeftWidth: " + this.borderLeftWidth + "; borderTopLeftRadius: " + this.borderTopLeftRadius + "; borderTopRightRadius: " + this.borderTopRightRadius + "; borderBottomRightRadius: " + this.borderBottomRightRadius + "; borderBottomLeftRadius: " + this.borderBottomLeftRadius + "; clipPath: " + this.clipPath + ";";
};
return Background;
}();
Background.default = new Background();
exports.Background = Background;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var common = __webpack_require__(28);
var Color = function(_super) {
__extends(Color, _super);
function Color() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(Color.prototype, "android", {
get: function() {
return this.argb >> 0;
},
enumerable: true,
configurable: true
});
return Color;
}(common.Color);
exports.Color = Color;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var types = __webpack_require__(17);
var knownColors = __webpack_require__(29);
var SHARP = "#";
var HEX_REGEX = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i;
var Color = function() {
function Color() {
if (arguments.length === 1) {
var arg = arguments[0];
if (types.isString(arg)) {
if (isRgbOrRgba(arg)) {
this._argb = argbFromRgbOrRgba(arg);
} else if (knownColors.isKnownName(arg)) {
var hex = knownColors.getKnownColor(arg);
this._name = arg;
this._argb = this._argbFromString(hex);
} else if (HEX_REGEX.test(arg)) {
var hex = this._normalizeHex(arg);
this._argb = this._argbFromString(hex);
} else {
throw new Error("Invalid color: " + arg);
}
} else if (types.isNumber(arg)) {
this._argb = arg >>> 0;
} else {
throw new Error("Expected 1 or 4 constructor parameters.");
}
} else if (arguments.length === 4) {
this._argb = (arguments[0] & 255) * 16777216 + (arguments[1] & 255) * 65536 + (arguments[2] & 255) * 256 + (arguments[3] & 255) * 1;
} else {
throw new Error("Expected 1 or 4 constructor parameters.");
}
}
Object.defineProperty(Color.prototype, "a", {
get: function() {
return this._argb / 16777216 & 255;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "r", {
get: function() {
return this._argb / 65536 & 255;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "g", {
get: function() {
return this._argb / 256 & 255;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "b", {
get: function() {
return this._argb / 1 & 255;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "argb", {
get: function() {
return this._argb;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "hex", {
get: function() {
if (this.a === 255) {
return ("#" + this._componentToHex(this.r) + this._componentToHex(this.g) + this._componentToHex(this.b)).toUpperCase();
} else {
return ("#" + this._componentToHex(this.a) + this._componentToHex(this.r) + this._componentToHex(this.g) + this._componentToHex(this.b)).toUpperCase();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "name", {
get: function() {
return this._name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "ios", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "android", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Color.prototype._argbFromString = function(hex) {
if (hex.charAt(0) === "#") {
hex = hex.substr(1);
}
if (hex.length === 3) {
hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
} else if (hex.length === 4) {
hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
}
var intVal = parseInt(hex, 16);
if (hex.length === 6) {
intVal = (intVal & 16777215) + 4278190080;
}
return intVal;
};
Color.prototype.equals = function(value) {
return value && this.argb === value.argb;
};
Color.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return value1.equals(value2);
};
Color.isValid = function(value) {
if (types.isNullOrUndefined(value) || value instanceof Color) {
return true;
}
if (!types.isString(value)) {
return false;
}
if (knownColors.isKnownName(value)) {
return true;
}
return HEX_REGEX.test(value) || isRgbOrRgba(value);
};
Color.prototype._componentToHex = function(component) {
var hex = component.toString(16);
if (hex.length === 1) {
hex = "0" + hex;
}
return hex;
};
Color.prototype._normalizeHex = function(hexStr) {
if (hexStr.charAt(0) === SHARP && hexStr.length === 4) {
hexStr = hexStr.charAt(0) + hexStr.charAt(1) + hexStr.charAt(1) + hexStr.charAt(2) + hexStr.charAt(2) + hexStr.charAt(3) + hexStr.charAt(3);
}
return hexStr;
};
Color.prototype.toString = function() {
return this.hex;
};
return Color;
}();
exports.Color = Color;
function isRgbOrRgba(value) {
var toLower = value.toLowerCase();
return (toLower.indexOf("rgb(") === 0 || toLower.indexOf("rgba(") === 0) && toLower.indexOf(")") === toLower.length - 1;
}
function argbFromRgbOrRgba(value) {
var toLower = value.toLowerCase();
var parts = toLower.replace("rgba(", "").replace("rgb(", "").replace(")", "").trim().split(",");
var r = 255;
var g = 255;
var b = 255;
var a = 255;
if (parts[0]) {
r = parseInt(parts[0].trim());
}
if (parts[1]) {
g = parseInt(parts[1].trim());
}
if (parts[2]) {
b = parseInt(parts[2].trim());
}
if (parts[3]) {
a = Math.round(parseFloat(parts[3].trim()) * 255);
}
return (a & 255) * 16777216 + (r & 255) * 65536 + (g & 255) * 256 + (b & 255) * 1;
}
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
exports.Transparent = "#00000000";
exports.AliceBlue = "#F0F8FF";
exports.AntiqueWhite = "#FAEBD7";
exports.Aqua = "#00FFFF";
exports.Aquamarine = "#7FFFD4";
exports.Azure = "#F0FFFF";
exports.Beige = "#F5F5DC";
exports.Bisque = "#FFE4C4";
exports.Black = "#000000";
exports.BlanchedAlmond = "#FFEBCD";
exports.Blue = "#0000FF";
exports.BlueViolet = "#8A2BE2";
exports.Brown = "#A52A2A";
exports.BurlyWood = "#DEB887";
exports.CadetBlue = "#5F9EA0";
exports.Chartreuse = "#7FFF00";
exports.Chocolate = "#D2691E";
exports.Coral = "#FF7F50";
exports.CornflowerBlue = "#6495ED";
exports.Cornsilk = "#FFF8DC";
exports.Crimson = "#DC143C";
exports.Cyan = "#00FFFF";
exports.DarkBlue = "#00008B";
exports.DarkCyan = "#008B8B";
exports.DarkGoldenRod = "#B8860B";
exports.DarkGray = "#A9A9A9";
exports.DarkGreen = "#006400";
exports.DarkKhaki = "#BDB76B";
exports.DarkMagenta = "#8B008B";
exports.DarkOliveGreen = "#556B2F";
exports.DarkOrange = "#FF8C00";
exports.DarkOrchid = "#9932CC";
exports.DarkRed = "#8B0000";
exports.DarkSalmon = "#E9967A";
exports.DarkSeaGreen = "#8FBC8F";
exports.DarkSlateBlue = "#483D8B";
exports.DarkSlateGray = "#2F4F4F";
exports.DarkTurquoise = "#00CED1";
exports.DarkViolet = "#9400D3";
exports.DeepPink = "#FF1493";
exports.DeepSkyBlue = "#00BFFF";
exports.DimGray = "#696969";
exports.DodgerBlue = "#1E90FF";
exports.FireBrick = "#B22222";
exports.FloralWhite = "#FFFAF0";
exports.ForestGreen = "#228B22";
exports.Fuchsia = "#FF00FF";
exports.Gainsboro = "#DCDCDC";
exports.GhostWhite = "#F8F8FF";
exports.Gold = "#FFD700";
exports.GoldenRod = "#DAA520";
exports.Gray = "#808080";
exports.Green = "#008000";
exports.GreenYellow = "#ADFF2F";
exports.HoneyDew = "#F0FFF0";
exports.HotPink = "#FF69B4";
exports.IndianRed = "#CD5C5C";
exports.Indigo = "#4B0082";
exports.Ivory = "#FFFFF0";
exports.Khaki = "#F0E68C";
exports.Lavender = "#E6E6FA";
exports.LavenderBlush = "#FFF0F5";
exports.LawnGreen = "#7CFC00";
exports.LemonChiffon = "#FFFACD";
exports.LightBlue = "#ADD8E6";
exports.LightCoral = "#F08080";
exports.LightCyan = "#E0FFFF";
exports.LightGoldenRodYellow = "#FAFAD2";
exports.LightGray = "#D3D3D3";
exports.LightGreen = "#90EE90";
exports.LightPink = "#FFB6C1";
exports.LightSalmon = "#FFA07A";
exports.LightSeaGreen = "#20B2AA";
exports.LightSkyBlue = "#87CEFA";
exports.LightSlateGray = "#778899";
exports.LightSteelBlue = "#B0C4DE";
exports.LightYellow = "#FFFFE0";
exports.Lime = "#00FF00";
exports.LimeGreen = "#32CD32";
exports.Linen = "#FAF0E6";
exports.Magenta = "#FF00FF";
exports.Maroon = "#800000";
exports.MediumAquaMarine = "#66CDAA";
exports.MediumBlue = "#0000CD";
exports.MediumOrchid = "#BA55D3";
exports.MediumPurple = "#9370DB";
exports.MediumSeaGreen = "#3CB371";
exports.MediumSlateBlue = "#7B68EE";
exports.MediumSpringGreen = "#00FA9A";
exports.MediumTurquoise = "#48D1CC";
exports.MediumVioletRed = "#C71585";
exports.MidnightBlue = "#191970";
exports.MintCream = "#F5FFFA";
exports.MistyRose = "#FFE4E1";
exports.Moccasin = "#FFE4B5";
exports.NavajoWhite = "#FFDEAD";
exports.Navy = "#000080";
exports.OldLace = "#FDF5E6";
exports.Olive = "#808000";
exports.OliveDrab = "#6B8E23";
exports.Orange = "#FFA500";
exports.OrangeRed = "#FF4500";
exports.Orchid = "#DA70D6";
exports.PaleGoldenRod = "#EEE8AA";
exports.PaleGreen = "#98FB98";
exports.PaleTurquoise = "#AFEEEE";
exports.PaleVioletRed = "#DB7093";
exports.PapayaWhip = "#FFEFD5";
exports.PeachPuff = "#FFDAB9";
exports.Peru = "#CD853F";
exports.Pink = "#FFC0CB";
exports.Plum = "#DDA0DD";
exports.PowderBlue = "#B0E0E6";
exports.Purple = "#800080";
exports.Red = "#FF0000";
exports.RosyBrown = "#BC8F8F";
exports.RoyalBlue = "#4169E1";
exports.SaddleBrown = "#8B4513";
exports.Salmon = "#FA8072";
exports.SandyBrown = "#F4A460";
exports.SeaGreen = "#2E8B57";
exports.SeaShell = "#FFF5EE";
exports.Sienna = "#A0522D";
exports.Silver = "#C0C0C0";
exports.SkyBlue = "#87CEEB";
exports.SlateBlue = "#6A5ACD";
exports.SlateGray = "#708090";
exports.Snow = "#FFFAFA";
exports.SpringGreen = "#00FF7F";
exports.SteelBlue = "#4682B4";
exports.Tan = "#D2B48C";
exports.Teal = "#008080";
exports.Thistle = "#D8BFD8";
exports.Tomato = "#FF6347";
exports.Turquoise = "#40E0D0";
exports.Violet = "#EE82EE";
exports.Wheat = "#F5DEB3";
exports.White = "#FFFFFF";
exports.WhiteSmoke = "#F5F5F5";
exports.Yellow = "#FFFF00";
exports.YellowGreen = "#9ACD32";
var _allColors = {};
(function() {
var name;
var underscore = "_";
for (var p in exports) {
name = p;
if (name.charAt(0) !== underscore) {
_allColors[name.toLowerCase()] = exports[p];
}
}
})();
function isKnownName(name) {
if (!name) {
return undefined;
}
return name.toLowerCase() in _allColors;
}
exports.isKnownName = isKnownName;
function getKnownColor(name) {
if (!name) {
return undefined;
}
return _allColors[name.toLowerCase()];
}
exports.getKnownColor = getKnownColor;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var style_properties_1 = __webpack_require__(31);
var debug_1 = __webpack_require__(36);
var view_base_1 = __webpack_require__(38);
var gestures_1 = __webpack_require__(56);
__export(__webpack_require__(31));
__export(__webpack_require__(38));
var animationModule;
function ensureAnimationModule() {
if (!animationModule) {
animationModule = __webpack_require__(51);
}
}
function PseudoClassHandler() {
var pseudoClasses = [];
for (var _i = 0; _i < arguments.length; _i++) {
pseudoClasses[_i] = arguments[_i];
}
var stateEventNames = pseudoClasses.map(function(s) {
return ":" + s;
});
var listeners = Symbol("listeners");
return function(target, propertyKey, descriptor) {
function update(change) {
var prev = this[listeners] || 0;
var next = prev + change;
if (prev <= 0 && next > 0) {
this[propertyKey](true);
} else if (prev > 0 && next <= 0) {
this[propertyKey](false);
}
}
stateEventNames.forEach(function(s) {
return target[s] = update;
});
};
}
exports.PseudoClassHandler = PseudoClassHandler;
var ViewCommon = function(_super) {
__extends(ViewCommon, _super);
function ViewCommon() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._gestureObservers = {};
return _this;
}
ViewCommon.prototype.observe = function(type, callback, thisArg) {
if (!this._gestureObservers[type]) {
this._gestureObservers[type] = [];
}
this._gestureObservers[type].push(gestures_1.observe(this, type, callback, thisArg));
};
ViewCommon.prototype.getGestureObservers = function(type) {
return this._gestureObservers[type];
};
ViewCommon.prototype.addEventListener = function(arg, callback, thisArg) {
if (typeof arg === "string") {
arg = view_base_1.getEventOrGestureName(arg);
var gesture = gestures_1.fromString(arg);
if (gesture && !this._isEvent(arg)) {
this.observe(gesture, callback, thisArg);
} else {
var events = arg.split(",");
if (events.length > 0) {
for (var i = 0; i < events.length; i++) {
var evt = events[i].trim();
var gst = gestures_1.fromString(evt);
if (gst && !this._isEvent(arg)) {
this.observe(gst, callback, thisArg);
} else {
_super.prototype.addEventListener.call(this, evt, callback, thisArg);
}
}
} else {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
}
}
} else if (typeof arg === "number") {
this.observe(arg, callback, thisArg);
}
};
ViewCommon.prototype.removeEventListener = function(arg, callback, thisArg) {
if (typeof arg === "string") {
var gesture = gestures_1.fromString(arg);
if (gesture && !this._isEvent(arg)) {
this._disconnectGestureObservers(gesture);
} else {
var events = arg.split(",");
if (events.length > 0) {
for (var i = 0; i < events.length; i++) {
var evt = events[i].trim();
var gst = gestures_1.fromString(evt);
if (gst && !this._isEvent(arg)) {
this._disconnectGestureObservers(gst);
} else {
_super.prototype.removeEventListener.call(this, evt, callback, thisArg);
}
}
} else {
_super.prototype.removeEventListener.call(this, arg, callback, thisArg);
}
}
} else if (typeof arg === "number") {
this._disconnectGestureObservers(arg);
}
};
ViewCommon.prototype._isEvent = function(name) {
return this.constructor && name + "Event" in this.constructor;
};
ViewCommon.prototype._disconnectGestureObservers = function(type) {
var observers = this.getGestureObservers(type);
if (observers) {
for (var i = 0; i < observers.length; i++) {
observers[i].disconnect();
}
}
};
Object.defineProperty(ViewCommon.prototype, "borderColor", {
get: function() {
return this.style.borderColor;
},
set: function(value) {
this.style.borderColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderTopColor", {
get: function() {
return this.style.borderTopColor;
},
set: function(value) {
this.style.borderTopColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderRightColor", {
get: function() {
return this.style.borderRightColor;
},
set: function(value) {
this.style.borderRightColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderBottomColor", {
get: function() {
return this.style.borderBottomColor;
},
set: function(value) {
this.style.borderBottomColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderLeftColor", {
get: function() {
return this.style.borderLeftColor;
},
set: function(value) {
this.style.borderLeftColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderWidth", {
get: function() {
return this.style.borderWidth;
},
set: function(value) {
this.style.borderWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderTopWidth", {
get: function() {
return this.style.borderTopWidth;
},
set: function(value) {
this.style.borderTopWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderRightWidth", {
get: function() {
return this.style.borderRightWidth;
},
set: function(value) {
this.style.borderRightWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderBottomWidth", {
get: function() {
return this.style.borderBottomWidth;
},
set: function(value) {
this.style.borderBottomWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderLeftWidth", {
get: function() {
return this.style.borderLeftWidth;
},
set: function(value) {
this.style.borderLeftWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderRadius", {
get: function() {
return this.style.borderRadius;
},
set: function(value) {
this.style.borderRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderTopLeftRadius", {
get: function() {
return this.style.borderTopLeftRadius;
},
set: function(value) {
this.style.borderTopLeftRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderTopRightRadius", {
get: function() {
return this.style.borderTopRightRadius;
},
set: function(value) {
this.style.borderTopRightRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderBottomRightRadius", {
get: function() {
return this.style.borderBottomRightRadius;
},
set: function(value) {
this.style.borderBottomRightRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderBottomLeftRadius", {
get: function() {
return this.style.borderBottomLeftRadius;
},
set: function(value) {
this.style.borderBottomLeftRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "color", {
get: function() {
return this.style.color;
},
set: function(value) {
this.style.color = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "backgroundColor", {
get: function() {
return this.style.backgroundColor;
},
set: function(value) {
this.style.backgroundColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "backgroundImage", {
get: function() {
return this.style.backgroundImage;
},
set: function(value) {
this.style.backgroundImage = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "minWidth", {
get: function() {
return this.style.minWidth;
},
set: function(value) {
this.style.minWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "minHeight", {
get: function() {
return this.style.minHeight;
},
set: function(value) {
this.style.minHeight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "width", {
get: function() {
return this.style.width;
},
set: function(value) {
this.style.width = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "height", {
get: function() {
return this.style.height;
},
set: function(value) {
this.style.height = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "margin", {
get: function() {
return this.style.margin;
},
set: function(value) {
this.style.margin = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "marginLeft", {
get: function() {
return this.style.marginLeft;
},
set: function(value) {
this.style.marginLeft = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "marginTop", {
get: function() {
return this.style.marginTop;
},
set: function(value) {
this.style.marginTop = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "marginRight", {
get: function() {
return this.style.marginRight;
},
set: function(value) {
this.style.marginRight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "marginBottom", {
get: function() {
return this.style.marginBottom;
},
set: function(value) {
this.style.marginBottom = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "horizontalAlignment", {
get: function() {
return this.style.horizontalAlignment;
},
set: function(value) {
this.style.horizontalAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "verticalAlignment", {
get: function() {
return this.style.verticalAlignment;
},
set: function(value) {
this.style.verticalAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "visibility", {
get: function() {
return this.style.visibility;
},
set: function(value) {
this.style.visibility = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "opacity", {
get: function() {
return this.style.opacity;
},
set: function(value) {
this.style.opacity = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "rotate", {
get: function() {
return this.style.rotate;
},
set: function(value) {
this.style.rotate = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "translateX", {
get: function() {
return this.style.translateX;
},
set: function(value) {
this.style.translateX = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "translateY", {
get: function() {
return this.style.translateY;
},
set: function(value) {
this.style.translateY = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "scaleX", {
get: function() {
return this.style.scaleX;
},
set: function(value) {
this.style.scaleX = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "scaleY", {
get: function() {
return this.style.scaleY;
},
set: function(value) {
this.style.scaleY = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "isLayoutValid", {
get: function() {
return this._isLayoutValid;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "cssType", {
get: function() {
if (!this._cssType) {
this._cssType = this.typeName.toLowerCase();
}
return this._cssType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "isLayoutRequired", {
get: function() {
return true;
},
enumerable: true,
configurable: true
});
ViewCommon.prototype.measure = function(widthMeasureSpec, heightMeasureSpec) {
this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);
};
ViewCommon.prototype.layout = function(left, top, right, bottom) {
this._setCurrentLayoutBounds(left, top, right, bottom);
};
ViewCommon.prototype.getMeasuredWidth = function() {
return this._measuredWidth & view_base_1.layout.MEASURED_SIZE_MASK || 0;
};
ViewCommon.prototype.getMeasuredHeight = function() {
return this._measuredHeight & view_base_1.layout.MEASURED_SIZE_MASK || 0;
};
ViewCommon.prototype.getMeasuredState = function() {
return this._measuredWidth & view_base_1.layout.MEASURED_STATE_MASK | this._measuredHeight >> view_base_1.layout.MEASURED_HEIGHT_STATE_SHIFT & view_base_1.layout.MEASURED_STATE_MASK >> view_base_1.layout.MEASURED_HEIGHT_STATE_SHIFT;
};
ViewCommon.prototype.setMeasuredDimension = function(measuredWidth, measuredHeight) {
this._measuredWidth = measuredWidth;
this._measuredHeight = measuredHeight;
if (view_base_1.traceEnabled()) {
view_base_1.traceWrite(this + " :setMeasuredDimension: " + measuredWidth + ", " + measuredHeight, view_base_1.traceCategories.Layout);
}
};
ViewCommon.prototype.requestLayout = function() {
this._isLayoutValid = false;
};
ViewCommon.resolveSizeAndState = function(size, specSize, specMode, childMeasuredState) {
var result = size;
switch (specMode) {
case view_base_1.layout.UNSPECIFIED:
result = Math.ceil(size);
break;

case view_base_1.layout.AT_MOST:
if (specSize < size) {
result = Math.ceil(specSize) | view_base_1.layout.MEASURED_STATE_TOO_SMALL;
}
break;

case view_base_1.layout.EXACTLY:
result = Math.ceil(specSize);
break;
}
return result | childMeasuredState & view_base_1.layout.MEASURED_STATE_MASK;
};
ViewCommon.combineMeasuredStates = function(curState, newState) {
return curState | newState;
};
ViewCommon.layoutChild = function(parent, child, left, top, right, bottom) {
if (!child || child.isCollapsed) {
return;
}
var childStyle = child.style;
var childTop;
var childLeft;
var childWidth = child.getMeasuredWidth();
var childHeight = child.getMeasuredHeight();
var effectiveMarginTop = child.effectiveMarginTop;
var effectiveMarginBottom = child.effectiveMarginBottom;
var vAlignment;
if (child.effectiveHeight >= 0 && childStyle.verticalAlignment === "stretch") {
vAlignment = "middle";
} else {
vAlignment = childStyle.verticalAlignment;
}
switch (vAlignment) {
case "top":
childTop = top + effectiveMarginTop;
break;

case "middle":
childTop = top + (bottom - top - childHeight + (effectiveMarginTop - effectiveMarginBottom)) / 2;
break;

case "bottom":
childTop = bottom - childHeight - effectiveMarginBottom;
break;

case "stretch":
default:
childTop = top + effectiveMarginTop;
childHeight = bottom - top - (effectiveMarginTop + effectiveMarginBottom);
break;
}
var effectiveMarginLeft = child.effectiveMarginLeft;
var effectiveMarginRight = child.effectiveMarginRight;
var hAlignment;
if (child.effectiveWidth >= 0 && childStyle.horizontalAlignment === "stretch") {
hAlignment = "center";
} else {
hAlignment = childStyle.horizontalAlignment;
}
switch (hAlignment) {
case "left":
childLeft = left + effectiveMarginLeft;
break;

case "center":
childLeft = left + (right - left - childWidth + (effectiveMarginLeft - effectiveMarginRight)) / 2;
break;

case "right":
childLeft = right - childWidth - effectiveMarginRight;
break;

case "stretch":
default:
childLeft = left + effectiveMarginLeft;
childWidth = right - left - (effectiveMarginLeft + effectiveMarginRight);
break;
}
var childRight = Math.round(childLeft + childWidth);
var childBottom = Math.round(childTop + childHeight);
childLeft = Math.round(childLeft);
childTop = Math.round(childTop);
if (view_base_1.traceEnabled()) {
view_base_1.traceWrite(child.parent + " :layoutChild: " + child + " " + childLeft + ", " + childTop + ", " + childRight + ", " + childBottom, view_base_1.traceCategories.Layout);
}
child.layout(childLeft, childTop, childRight, childBottom);
};
ViewCommon.measureChild = function(parent, child, widthMeasureSpec, heightMeasureSpec) {
var measureWidth = 0;
var measureHeight = 0;
if (child && !child.isCollapsed) {
child._updateEffectiveLayoutValues(parent);
var style = child.style;
var horizontalMargins = child.effectiveMarginLeft + child.effectiveMarginRight;
var verticalMargins = child.effectiveMarginTop + child.effectiveMarginBottom;
var childWidthMeasureSpec = ViewCommon.getMeasureSpec(widthMeasureSpec, horizontalMargins, child.effectiveWidth, style.horizontalAlignment === "stretch");
var childHeightMeasureSpec = ViewCommon.getMeasureSpec(heightMeasureSpec, verticalMargins, child.effectiveHeight, style.verticalAlignment === "stretch");
if (view_base_1.traceEnabled()) {
view_base_1.traceWrite(child.parent + " :measureChild: " + child + " " + view_base_1.layout.measureSpecToString(childWidthMeasureSpec) + ", " + view_base_1.layout.measureSpecToString(childHeightMeasureSpec), view_base_1.traceCategories.Layout);
}
child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
measureWidth = Math.round(child.getMeasuredWidth() + horizontalMargins);
measureHeight = Math.round(child.getMeasuredHeight() + verticalMargins);
}
return {
measuredWidth: measureWidth,
measuredHeight: measureHeight
};
};
ViewCommon.getMeasureSpec = function(parentSpec, margins, childLength, stretched) {
var parentLength = view_base_1.layout.getMeasureSpecSize(parentSpec);
var parentSpecMode = view_base_1.layout.getMeasureSpecMode(parentSpec);
var resultSize;
var resultMode;
if (childLength >= 0) {
resultSize = parentSpecMode === view_base_1.layout.UNSPECIFIED ? childLength : Math.min(parentLength, childLength);
resultMode = view_base_1.layout.EXACTLY;
} else {
switch (parentSpecMode) {
case view_base_1.layout.EXACTLY:
resultSize = Math.max(0, parentLength - margins);
resultMode = stretched ? view_base_1.layout.EXACTLY : view_base_1.layout.AT_MOST;
break;

case view_base_1.layout.AT_MOST:
resultSize = Math.max(0, parentLength - margins);
resultMode = view_base_1.layout.AT_MOST;
break;

case view_base_1.layout.UNSPECIFIED:
resultSize = 0;
resultMode = view_base_1.layout.UNSPECIFIED;
break;
}
}
return view_base_1.layout.makeMeasureSpec(resultSize, resultMode);
};
ViewCommon.prototype._setCurrentMeasureSpecs = function(widthMeasureSpec, heightMeasureSpec) {
var changed = this._currentWidthMeasureSpec !== widthMeasureSpec || this._currentHeightMeasureSpec !== heightMeasureSpec;
this._currentWidthMeasureSpec = widthMeasureSpec;
this._currentHeightMeasureSpec = heightMeasureSpec;
return changed;
};
ViewCommon.prototype._getCurrentLayoutBounds = function() {
return {
left: this._oldLeft,
top: this._oldTop,
right: this._oldRight,
bottom: this._oldBottom
};
};
ViewCommon.prototype._setCurrentLayoutBounds = function(left, top, right, bottom) {
this._isLayoutValid = true;
var boundsChanged = this._oldLeft !== left || this._oldTop !== top || this._oldRight !== right || this._oldBottom !== bottom;
var sizeChanged = this._oldRight - this._oldLeft !== right - left || this._oldBottom - this._oldTop !== bottom - top;
this._oldLeft = left;
this._oldTop = top;
this._oldRight = right;
this._oldBottom = bottom;
return {
boundsChanged: boundsChanged,
sizeChanged: sizeChanged
};
};
ViewCommon.prototype.eachChild = function(callback) {
this.eachChildView(callback);
};
ViewCommon.prototype.eachChildView = function(callback) {};
ViewCommon.prototype._getNativeViewsCount = function() {
return this._isAddedToNativeVisualTree ? 1 : 0;
};
ViewCommon.prototype._eachLayoutView = function(callback) {
return callback(this);
};
ViewCommon.prototype._updateLayout = function() {};
ViewCommon.prototype.focus = function() {
return undefined;
};
ViewCommon.prototype.getLocationInWindow = function() {
return undefined;
};
ViewCommon.prototype.getLocationOnScreen = function() {
return undefined;
};
ViewCommon.prototype.getLocationRelativeTo = function(otherView) {
return undefined;
};
ViewCommon.prototype.getActualSize = function() {
var currentBounds = this._getCurrentLayoutBounds();
if (!currentBounds) {
return undefined;
}
return {
width: view_base_1.layout.toDeviceIndependentPixels(currentBounds.right - currentBounds.left),
height: view_base_1.layout.toDeviceIndependentPixels(currentBounds.bottom - currentBounds.top)
};
};
ViewCommon.prototype.animate = function(animation) {
return this.createAnimation(animation).play();
};
ViewCommon.prototype.createAnimation = function(animation) {
ensureAnimationModule();
animation.target = this;
return new animationModule.Animation([ animation ]);
};
ViewCommon.prototype.toString = function() {
var str = this.typeName;
if (this.id) {
str += "<" + this.id + ">";
} else {
str += "(" + this._domId + ")";
}
var source = debug_1.Source.get(this);
if (source) {
str += "@" + source + ";";
}
return str;
};
ViewCommon.prototype._setNativeViewFrame = function(nativeView, frame) {};
ViewCommon.prototype._getValue = function() {
throw new Error("The View._setValue is obsolete. There is a new property system.");
};
ViewCommon.prototype._setValue = function() {
throw new Error("The View._setValue is obsolete. There is a new property system.");
};
ViewCommon.prototype._updateEffectiveLayoutValues = function(parent) {
var style = this.style;
var parentWidthMeasureSpec = parent._currentWidthMeasureSpec;
var parentWidthMeasureSize = view_base_1.layout.getMeasureSpecSize(parentWidthMeasureSpec);
var parentWidthMeasureMode = view_base_1.layout.getMeasureSpecMode(parentWidthMeasureSpec);
var parentAvailableWidth = parentWidthMeasureMode === view_base_1.layout.UNSPECIFIED ? -1 : parentWidthMeasureSize;
this.effectiveWidth = style_properties_1.PercentLength.toDevicePixels(style.width, -2, parentAvailableWidth);
this.effectiveMarginLeft = style_properties_1.PercentLength.toDevicePixels(style.marginLeft, 0, parentAvailableWidth);
this.effectiveMarginRight = style_properties_1.PercentLength.toDevicePixels(style.marginRight, 0, parentAvailableWidth);
var parentHeightMeasureSpec = parent._currentHeightMeasureSpec;
var parentHeightMeasureSize = view_base_1.layout.getMeasureSpecSize(parentHeightMeasureSpec);
var parentHeightMeasureMode = view_base_1.layout.getMeasureSpecMode(parentHeightMeasureSpec);
var parentAvailableHeight = parentHeightMeasureMode === view_base_1.layout.UNSPECIFIED ? -1 : parentHeightMeasureSize;
this.effectiveHeight = style_properties_1.PercentLength.toDevicePixels(style.height, -2, parentAvailableHeight);
this.effectiveMarginTop = style_properties_1.PercentLength.toDevicePixels(style.marginTop, 0, parentAvailableHeight);
this.effectiveMarginBottom = style_properties_1.PercentLength.toDevicePixels(style.marginBottom, 0, parentAvailableHeight);
};
ViewCommon.prototype._setNativeClipToBounds = function() {};
return ViewCommon;
}(view_base_1.ViewBase);
exports.ViewCommon = ViewCommon;
exports.automationTextProperty = new view_base_1.Property({
name: "automationText"
});
exports.automationTextProperty.register(ViewCommon);
exports.originXProperty = new view_base_1.Property({
name: "originX",
defaultValue: .5,
valueConverter: function(v) {
return parseFloat(v);
}
});
exports.originXProperty.register(ViewCommon);
exports.originYProperty = new view_base_1.Property({
name: "originY",
defaultValue: .5,
valueConverter: function(v) {
return parseFloat(v);
}
});
exports.originYProperty.register(ViewCommon);
exports.isEnabledProperty = new view_base_1.Property({
name: "isEnabled",
defaultValue: true,
valueConverter: view_base_1.booleanConverter,
valueChanged: function(target, oldValue, newValue) {
target._goToVisualState(newValue ? "normal" : "disabled");
}
});
exports.isEnabledProperty.register(ViewCommon);
exports.isUserInteractionEnabledProperty = new view_base_1.Property({
name: "isUserInteractionEnabled",
defaultValue: true,
valueConverter: view_base_1.booleanConverter
});
exports.isUserInteractionEnabledProperty.register(ViewCommon);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var color_1 = __webpack_require__(27);
var font_1 = __webpack_require__(32);
var utils_1 = __webpack_require__(14);
var background_1 = __webpack_require__(13);
var platform_1 = __webpack_require__(25);
var style_1 = __webpack_require__(35);
var properties_1 = __webpack_require__(34);
function equalsCommon(a, b) {
if (a == "auto") {
return b == "auto";
}
if (typeof a === "number") {
if (b == "auto") {
return false;
}
if (typeof b === "number") {
return a == b;
}
return b.unit == "dip" && a == b.value;
}
if (b == "auto") {
return false;
}
if (typeof b === "number") {
return a.unit == "dip" && a.value == b;
}
return a.value == b.value && a.unit == b.unit;
}
function convertToStringCommon(length) {
if (length == "auto") {
return "auto";
}
if (typeof length === "number") {
return length.toString();
}
var val = length.value;
if (length.unit === "%") {
val *= 100;
}
return val + length.unit;
}
function toDevicePixelsCommon(length, auto, parentAvailableWidth) {
if (auto === void 0) {
auto = Number.NaN;
}
if (parentAvailableWidth === void 0) {
parentAvailableWidth = Number.NaN;
}
if (length == "auto") {
return auto;
}
if (typeof length === "number") {
return utils_1.layout.round(utils_1.layout.toDevicePixels(length));
}
switch (length.unit) {
case "px":
return utils_1.layout.round(length.value);

case "%":
return utils_1.layout.round(parentAvailableWidth * length.value);

case "dip":
default:
return utils_1.layout.round(utils_1.layout.toDevicePixels(length.value));
}
}
var PercentLength;
(function(PercentLength) {
function parse(fromValue) {
if (fromValue == "auto") {
return "auto";
}
if (typeof fromValue === "string") {
var stringValue = fromValue.trim();
var percentIndex = stringValue.indexOf("%");
if (percentIndex !== -1) {
var value = void 0;
if (percentIndex !== stringValue.length - 1 || percentIndex === 0) {
value = Number.NaN;
} else {
value = parseFloat(stringValue.substring(0, stringValue.length - 1).trim()) / 100;
}
if (isNaN(value) || !isFinite(value)) {
throw new Error("Invalid value: " + fromValue);
}
return {
unit: "%",
value: value
};
} else if (stringValue.indexOf("px") !== -1) {
stringValue = stringValue.replace("px", "").trim();
var value = parseFloat(stringValue);
if (isNaN(value) || !isFinite(value)) {
throw new Error("Invalid value: " + fromValue);
}
return {
unit: "px",
value: value
};
} else {
var value = parseFloat(stringValue);
if (isNaN(value) || !isFinite(value)) {
throw new Error("Invalid value: " + fromValue);
}
return value;
}
} else {
return fromValue;
}
}
PercentLength.parse = parse;
PercentLength.equals = equalsCommon;
PercentLength.toDevicePixels = toDevicePixelsCommon;
PercentLength.convertToString = convertToStringCommon;
})(PercentLength = exports.PercentLength || (exports.PercentLength = {}));
var Length;
(function(Length) {
function parse(fromValue) {
if (fromValue == "auto") {
return "auto";
}
if (typeof fromValue === "string") {
var stringValue = fromValue.trim();
if (stringValue.indexOf("px") !== -1) {
stringValue = stringValue.replace("px", "").trim();
var value = parseFloat(stringValue);
if (isNaN(value) || !isFinite(value)) {
throw new Error("Invalid value: " + stringValue);
}
return {
unit: "px",
value: value
};
} else {
var value = parseFloat(stringValue);
if (isNaN(value) || !isFinite(value)) {
throw new Error("Invalid value: " + stringValue);
}
return value;
}
} else {
return fromValue;
}
}
Length.parse = parse;
Length.equals = equalsCommon;
Length.toDevicePixels = toDevicePixelsCommon;
Length.convertToString = convertToStringCommon;
})(Length = exports.Length || (exports.Length = {}));
exports.zeroLength = {
value: 0,
unit: "px"
};
exports.minWidthProperty = new properties_1.CssProperty({
name: "minWidth",
cssName: "min-width",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
target.view.effectiveMinWidth = Length.toDevicePixels(newValue, 0);
},
valueConverter: Length.parse
});
exports.minWidthProperty.register(style_1.Style);
exports.minHeightProperty = new properties_1.CssProperty({
name: "minHeight",
cssName: "min-height",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
target.view.effectiveMinHeight = Length.toDevicePixels(newValue, 0);
},
valueConverter: Length.parse
});
exports.minHeightProperty.register(style_1.Style);
exports.widthProperty = new properties_1.CssProperty({
name: "width",
cssName: "width",
defaultValue: "auto",
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueConverter: PercentLength.parse
});
exports.widthProperty.register(style_1.Style);
exports.heightProperty = new properties_1.CssProperty({
name: "height",
cssName: "height",
defaultValue: "auto",
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueConverter: PercentLength.parse
});
exports.heightProperty.register(style_1.Style);
var marginProperty = new properties_1.ShorthandProperty({
name: "margin",
cssName: "margin",
getter: function() {
if (PercentLength.equals(this.marginTop, this.marginRight) && PercentLength.equals(this.marginTop, this.marginBottom) && PercentLength.equals(this.marginTop, this.marginLeft)) {
return this.marginTop;
}
return PercentLength.convertToString(this.marginTop) + " " + PercentLength.convertToString(this.marginRight) + " " + PercentLength.convertToString(this.marginBottom) + " " + PercentLength.convertToString(this.marginLeft);
},
converter: convertToMargins
});
marginProperty.register(style_1.Style);
exports.marginLeftProperty = new properties_1.CssProperty({
name: "marginLeft",
cssName: "margin-left",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueConverter: PercentLength.parse
});
exports.marginLeftProperty.register(style_1.Style);
exports.marginRightProperty = new properties_1.CssProperty({
name: "marginRight",
cssName: "margin-right",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueConverter: PercentLength.parse
});
exports.marginRightProperty.register(style_1.Style);
exports.marginTopProperty = new properties_1.CssProperty({
name: "marginTop",
cssName: "margin-top",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueConverter: PercentLength.parse
});
exports.marginTopProperty.register(style_1.Style);
exports.marginBottomProperty = new properties_1.CssProperty({
name: "marginBottom",
cssName: "margin-bottom",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueConverter: PercentLength.parse
});
exports.marginBottomProperty.register(style_1.Style);
var paddingProperty = new properties_1.ShorthandProperty({
name: "padding",
cssName: "padding",
getter: function() {
if (Length.equals(this.paddingTop, this.paddingRight) && Length.equals(this.paddingTop, this.paddingBottom) && Length.equals(this.paddingTop, this.paddingLeft)) {
return this.paddingTop;
}
return Length.convertToString(this.paddingTop) + " " + Length.convertToString(this.paddingRight) + " " + Length.convertToString(this.paddingBottom) + " " + Length.convertToString(this.paddingLeft);
},
converter: convertToPaddings
});
paddingProperty.register(style_1.Style);
exports.paddingLeftProperty = new properties_1.CssProperty({
name: "paddingLeft",
cssName: "padding-left",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
target.view.effectivePaddingLeft = Length.toDevicePixels(newValue, 0);
},
valueConverter: Length.parse
});
exports.paddingLeftProperty.register(style_1.Style);
exports.paddingRightProperty = new properties_1.CssProperty({
name: "paddingRight",
cssName: "padding-right",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
target.view.effectivePaddingRight = Length.toDevicePixels(newValue, 0);
},
valueConverter: Length.parse
});
exports.paddingRightProperty.register(style_1.Style);
exports.paddingTopProperty = new properties_1.CssProperty({
name: "paddingTop",
cssName: "padding-top",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
target.view.effectivePaddingTop = Length.toDevicePixels(newValue, 0);
},
valueConverter: Length.parse
});
exports.paddingTopProperty.register(style_1.Style);
exports.paddingBottomProperty = new properties_1.CssProperty({
name: "paddingBottom",
cssName: "padding-bottom",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
target.view.effectivePaddingBottom = Length.toDevicePixels(newValue, 0);
},
valueConverter: Length.parse
});
exports.paddingBottomProperty.register(style_1.Style);
var HorizontalAlignment;
(function(HorizontalAlignment) {
HorizontalAlignment.LEFT = "left";
HorizontalAlignment.CENTER = "center";
HorizontalAlignment.RIGHT = "right";
HorizontalAlignment.STRETCH = "stretch";
HorizontalAlignment.isValid = properties_1.makeValidator(HorizontalAlignment.LEFT, HorizontalAlignment.CENTER, HorizontalAlignment.RIGHT, HorizontalAlignment.STRETCH);
HorizontalAlignment.parse = properties_1.makeParser(HorizontalAlignment.isValid);
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));
exports.horizontalAlignmentProperty = new properties_1.CssProperty({
name: "horizontalAlignment",
cssName: "horizontal-align",
defaultValue: HorizontalAlignment.STRETCH,
affectsLayout: platform_1.isIOS,
valueConverter: HorizontalAlignment.parse
});
exports.horizontalAlignmentProperty.register(style_1.Style);
var VerticalAlignment;
(function(VerticalAlignment) {
VerticalAlignment.TOP = "top";
VerticalAlignment.MIDDLE = "middle";
VerticalAlignment.BOTTOM = "bottom";
VerticalAlignment.STRETCH = "stretch";
VerticalAlignment.isValid = properties_1.makeValidator(VerticalAlignment.TOP, VerticalAlignment.MIDDLE, VerticalAlignment.BOTTOM, VerticalAlignment.STRETCH);
VerticalAlignment.parse = function(value) {
return value.toLowerCase() === "center" ? VerticalAlignment.MIDDLE : parseStrict(value);
};
var parseStrict = properties_1.makeParser(VerticalAlignment.isValid);
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));
exports.verticalAlignmentProperty = new properties_1.CssProperty({
name: "verticalAlignment",
cssName: "vertical-align",
defaultValue: VerticalAlignment.STRETCH,
affectsLayout: platform_1.isIOS,
valueConverter: VerticalAlignment.parse
});
exports.verticalAlignmentProperty.register(style_1.Style);
function parseThickness(value) {
if (typeof value === "string") {
var arr = value.split(/[ ,]+/);
var top_1;
var right = void 0;
var bottom = void 0;
var left = void 0;
if (arr.length === 1) {
top_1 = arr[0];
right = arr[0];
bottom = arr[0];
left = arr[0];
} else if (arr.length === 2) {
top_1 = arr[0];
bottom = arr[0];
right = arr[1];
left = arr[1];
} else if (arr.length === 3) {
top_1 = arr[0];
right = arr[1];
left = arr[1];
bottom = arr[2];
} else if (arr.length === 4) {
top_1 = arr[0];
right = arr[1];
bottom = arr[2];
left = arr[3];
} else {
throw new Error("Expected 1, 2, 3 or 4 parameters. Actual: " + value);
}
return {
top: top_1,
right: right,
bottom: bottom,
left: left
};
} else {
return value;
}
}
function convertToMargins(value) {
if (typeof value === "string" && value !== "auto") {
var thickness = parseThickness(value);
return [ [ exports.marginTopProperty, PercentLength.parse(thickness.top) ], [ exports.marginRightProperty, PercentLength.parse(thickness.right) ], [ exports.marginBottomProperty, PercentLength.parse(thickness.bottom) ], [ exports.marginLeftProperty, PercentLength.parse(thickness.left) ] ];
} else {
return [ [ exports.marginTopProperty, value ], [ exports.marginRightProperty, value ], [ exports.marginBottomProperty, value ], [ exports.marginLeftProperty, value ] ];
}
}
function convertToPaddings(value) {
if (typeof value === "string" && value !== "auto") {
var thickness = parseThickness(value);
return [ [ exports.paddingTopProperty, Length.parse(thickness.top) ], [ exports.paddingRightProperty, Length.parse(thickness.right) ], [ exports.paddingBottomProperty, Length.parse(thickness.bottom) ], [ exports.paddingLeftProperty, Length.parse(thickness.left) ] ];
} else {
return [ [ exports.paddingTopProperty, value ], [ exports.paddingRightProperty, value ], [ exports.paddingBottomProperty, value ], [ exports.paddingLeftProperty, value ] ];
}
}
exports.rotateProperty = new properties_1.CssAnimationProperty({
name: "rotate",
cssName: "rotate",
defaultValue: 0,
valueConverter: parseFloat
});
exports.rotateProperty.register(style_1.Style);
exports.scaleXProperty = new properties_1.CssAnimationProperty({
name: "scaleX",
cssName: "scaleX",
defaultValue: 1,
valueConverter: parseFloat
});
exports.scaleXProperty.register(style_1.Style);
exports.scaleYProperty = new properties_1.CssAnimationProperty({
name: "scaleY",
cssName: "scaleY",
defaultValue: 1,
valueConverter: parseFloat
});
exports.scaleYProperty.register(style_1.Style);
function parseDIPs(value) {
if (value.indexOf("px") !== -1) {
return utils_1.layout.toDeviceIndependentPixels(parseFloat(value.replace("px", "").trim()));
} else {
return parseFloat(value.replace("dip", "").trim());
}
}
exports.translateXProperty = new properties_1.CssAnimationProperty({
name: "translateX",
cssName: "translateX",
defaultValue: 0,
valueConverter: parseDIPs
});
exports.translateXProperty.register(style_1.Style);
exports.translateYProperty = new properties_1.CssAnimationProperty({
name: "translateY",
cssName: "translateY",
defaultValue: 0,
valueConverter: parseDIPs
});
exports.translateYProperty.register(style_1.Style);
var transformProperty = new properties_1.ShorthandProperty({
name: "transform",
cssName: "transform",
getter: function() {
var scaleX = this.scaleX;
var scaleY = this.scaleY;
var translateX = this.translateX;
var translateY = this.translateY;
var rotate = this.rotate;
var result = "";
if (translateX !== 0 || translateY !== 0) {
result += "translate(" + translateX + ", " + translateY + ") ";
}
if (scaleX !== 1 || scaleY !== 1) {
result += "scale(" + scaleX + ", " + scaleY + ") ";
}
if (rotate !== 0) {
result += "rotate (" + rotate + ")";
}
return result.trim();
},
converter: convertToTransform
});
transformProperty.register(style_1.Style);
function transformConverter(value) {
if (value.indexOf("none") !== -1) {
var operations_1 = {};
operations_1[value] = value;
return operations_1;
}
var operations = {};
var operator = "";
var pos = 0;
while (pos < value.length) {
if (value[pos] === " " || value[pos] === ",") {
pos++;
} else if (value[pos] === "(") {
var start = pos + 1;
while (pos < value.length && value[pos] !== ")") {
pos++;
}
var operand = value.substring(start, pos);
operations[operator] = operand.trim();
operator = "";
pos++;
} else {
operator += value[pos++];
}
}
return operations;
}
function convertToTransform(value) {
var newTransform = value === properties_1.unsetValue ? {
none: "none"
} : transformConverter(value);
var array = [];
var values;
for (var transform in newTransform) {
switch (transform) {
case "scaleX":
array.push([ exports.scaleXProperty, newTransform[transform] ]);
break;

case "scaleY":
array.push([ exports.scaleYProperty, newTransform[transform] ]);
break;

case "scale":
case "scale3d":
values = newTransform[transform].split(",");
if (values.length >= 2) {
array.push([ exports.scaleXProperty, values[0] ]);
array.push([ exports.scaleYProperty, values[1] ]);
} else if (values.length === 1) {
array.push([ exports.scaleXProperty, values[0] ]);
array.push([ exports.scaleYProperty, values[0] ]);
}
break;

case "translateX":
array.push([ exports.translateXProperty, newTransform[transform] ]);
break;

case "translateY":
array.push([ exports.translateYProperty, newTransform[transform] ]);
break;

case "translate":
case "translate3d":
values = newTransform[transform].split(",");
if (values.length >= 2) {
array.push([ exports.translateXProperty, values[0] ]);
array.push([ exports.translateYProperty, values[1] ]);
} else if (values.length === 1) {
array.push([ exports.translateXProperty, values[0] ]);
array.push([ exports.translateYProperty, values[0] ]);
}
break;

case "rotate":
var text = newTransform[transform];
var val = parseFloat(text);
if (text.slice(-3) === "rad") {
val = val * (180 / Math.PI);
}
array.push([ exports.rotateProperty, val ]);
break;

case "none":
array.push([ exports.scaleXProperty, 1 ]);
array.push([ exports.scaleYProperty, 1 ]);
array.push([ exports.translateXProperty, 0 ]);
array.push([ exports.translateYProperty, 0 ]);
array.push([ exports.rotateProperty, 0 ]);
break;
}
}
return array;
}
exports.backgroundInternalProperty = new properties_1.CssProperty({
name: "backgroundInternal",
cssName: "_backgroundInternal",
defaultValue: background_1.Background.default
});
exports.backgroundInternalProperty.register(style_1.Style);
exports.backgroundImageProperty = new properties_1.CssProperty({
name: "backgroundImage",
cssName: "background-image",
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withImage(newValue);
}
});
exports.backgroundImageProperty.register(style_1.Style);
exports.backgroundColorProperty = new properties_1.CssAnimationProperty({
name: "backgroundColor",
cssName: "background-color",
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withColor(newValue);
},
equalityComparer: color_1.Color.equals,
valueConverter: function(value) {
return new color_1.Color(value);
}
});
exports.backgroundColorProperty.register(style_1.Style);
var BackgroundRepeat;
(function(BackgroundRepeat) {
BackgroundRepeat.REPEAT = "repeat";
BackgroundRepeat.REPEAT_X = "repeat-x";
BackgroundRepeat.REPEAT_Y = "repeat-y";
BackgroundRepeat.NO_REPEAT = "no-repeat";
BackgroundRepeat.isValid = properties_1.makeValidator(BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT_X, BackgroundRepeat.REPEAT_Y, BackgroundRepeat.NO_REPEAT);
BackgroundRepeat.parse = properties_1.makeParser(BackgroundRepeat.isValid);
})(BackgroundRepeat = exports.BackgroundRepeat || (exports.BackgroundRepeat = {}));
exports.backgroundRepeatProperty = new properties_1.CssProperty({
name: "backgroundRepeat",
cssName: "background-repeat",
valueConverter: BackgroundRepeat.parse,
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withRepeat(newValue);
}
});
exports.backgroundRepeatProperty.register(style_1.Style);
exports.backgroundSizeProperty = new properties_1.CssProperty({
name: "backgroundSize",
cssName: "background-size",
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withSize(newValue);
}
});
exports.backgroundSizeProperty.register(style_1.Style);
exports.backgroundPositionProperty = new properties_1.CssProperty({
name: "backgroundPosition",
cssName: "background-position",
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withPosition(newValue);
}
});
exports.backgroundPositionProperty.register(style_1.Style);
function parseBorderColor(value) {
var result = {
top: undefined,
right: undefined,
bottom: undefined,
left: undefined
};
if (value.indexOf("rgb") === 0) {
result.top = result.right = result.bottom = result.left = new color_1.Color(value);
return result;
}
var arr = value.split(/[ ,]+/);
if (arr.length === 1) {
var arr0 = new color_1.Color(arr[0]);
result.top = arr0;
result.right = arr0;
result.bottom = arr0;
result.left = arr0;
} else if (arr.length === 2) {
var arr0 = new color_1.Color(arr[0]);
var arr1 = new color_1.Color(arr[1]);
result.top = arr0;
result.right = arr1;
result.bottom = arr0;
result.left = arr1;
} else if (arr.length === 3) {
var arr0 = new color_1.Color(arr[0]);
var arr1 = new color_1.Color(arr[1]);
var arr2 = new color_1.Color(arr[2]);
result.top = arr0;
result.right = arr1;
result.bottom = arr2;
result.left = arr1;
} else if (arr.length === 4) {
var arr0 = new color_1.Color(arr[0]);
var arr1 = new color_1.Color(arr[1]);
var arr2 = new color_1.Color(arr[2]);
var arr3 = new color_1.Color(arr[3]);
result.top = arr0;
result.right = arr1;
result.bottom = arr2;
result.left = arr3;
} else {
throw new Error("Expected 1, 2, 3 or 4 parameters. Actual: " + value);
}
return result;
}
var borderColorProperty = new properties_1.ShorthandProperty({
name: "borderColor",
cssName: "border-color",
getter: function() {
if (color_1.Color.equals(this.borderTopColor, this.borderRightColor) && color_1.Color.equals(this.borderTopColor, this.borderBottomColor) && color_1.Color.equals(this.borderTopColor, this.borderLeftColor)) {
return this.borderTopColor;
} else {
return this.borderTopColor + " " + this.borderRightColor + " " + this.borderBottomColor + " " + this.borderLeftColor;
}
},
converter: function(value) {
if (typeof value === "string") {
var fourColors = parseBorderColor(value);
return [ [ exports.borderTopColorProperty, fourColors.top ], [ exports.borderRightColorProperty, fourColors.right ], [ exports.borderBottomColorProperty, fourColors.bottom ], [ exports.borderLeftColorProperty, fourColors.left ] ];
} else {
return [ [ exports.borderTopColorProperty, value ], [ exports.borderRightColorProperty, value ], [ exports.borderBottomColorProperty, value ], [ exports.borderLeftColorProperty, value ] ];
}
}
});
borderColorProperty.register(style_1.Style);
exports.borderTopColorProperty = new properties_1.CssProperty({
name: "borderTopColor",
cssName: "border-top-color",
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderTopColor(newValue);
},
equalityComparer: color_1.Color.equals,
valueConverter: function(value) {
return new color_1.Color(value);
}
});
exports.borderTopColorProperty.register(style_1.Style);
exports.borderRightColorProperty = new properties_1.CssProperty({
name: "borderRightColor",
cssName: "border-right-color",
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderRightColor(newValue);
},
equalityComparer: color_1.Color.equals,
valueConverter: function(value) {
return new color_1.Color(value);
}
});
exports.borderRightColorProperty.register(style_1.Style);
exports.borderBottomColorProperty = new properties_1.CssProperty({
name: "borderBottomColor",
cssName: "border-bottom-color",
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderBottomColor(newValue);
},
equalityComparer: color_1.Color.equals,
valueConverter: function(value) {
return new color_1.Color(value);
}
});
exports.borderBottomColorProperty.register(style_1.Style);
exports.borderLeftColorProperty = new properties_1.CssProperty({
name: "borderLeftColor",
cssName: "border-left-color",
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderLeftColor(newValue);
},
equalityComparer: color_1.Color.equals,
valueConverter: function(value) {
return new color_1.Color(value);
}
});
exports.borderLeftColorProperty.register(style_1.Style);
var borderWidthProperty = new properties_1.ShorthandProperty({
name: "borderWidth",
cssName: "border-width",
getter: function() {
if (Length.equals(this.borderTopWidth, this.borderRightWidth) && Length.equals(this.borderTopWidth, this.borderBottomWidth) && Length.equals(this.borderTopWidth, this.borderLeftWidth)) {
return this.borderTopWidth;
} else {
return Length.convertToString(this.borderTopWidth) + " " + Length.convertToString(this.borderRightWidth) + " " + Length.convertToString(this.borderBottomWidth) + " " + Length.convertToString(this.borderLeftWidth);
}
},
converter: function(value) {
if (typeof value === "string" && value !== "auto") {
var borderWidths = parseThickness(value);
return [ [ exports.borderTopWidthProperty, borderWidths.top ], [ exports.borderRightWidthProperty, borderWidths.right ], [ exports.borderBottomWidthProperty, borderWidths.bottom ], [ exports.borderLeftWidthProperty, borderWidths.left ] ];
} else {
return [ [ exports.borderTopWidthProperty, value ], [ exports.borderRightWidthProperty, value ], [ exports.borderBottomWidthProperty, value ], [ exports.borderLeftWidthProperty, value ] ];
}
}
});
borderWidthProperty.register(style_1.Style);
exports.borderTopWidthProperty = new properties_1.CssProperty({
name: "borderTopWidth",
cssName: "border-top-width",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
var value = Length.toDevicePixels(newValue, 0);
if (!isNonNegativeFiniteNumber(value)) {
throw new Error("border-top-width should be Non-Negative Finite number. Value: " + value);
}
target.view.effectiveBorderTopWidth = value;
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderTopWidth(value);
},
valueConverter: Length.parse
});
exports.borderTopWidthProperty.register(style_1.Style);
exports.borderRightWidthProperty = new properties_1.CssProperty({
name: "borderRightWidth",
cssName: "border-right-width",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
var value = Length.toDevicePixels(newValue, 0);
if (!isNonNegativeFiniteNumber(value)) {
throw new Error("border-right-width should be Non-Negative Finite number. Value: " + value);
}
target.view.effectiveBorderRightWidth = value;
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderRightWidth(value);
},
valueConverter: Length.parse
});
exports.borderRightWidthProperty.register(style_1.Style);
exports.borderBottomWidthProperty = new properties_1.CssProperty({
name: "borderBottomWidth",
cssName: "border-bottom-width",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
var value = Length.toDevicePixels(newValue, 0);
if (!isNonNegativeFiniteNumber(value)) {
throw new Error("border-bottom-width should be Non-Negative Finite number. Value: " + value);
}
target.view.effectiveBorderBottomWidth = value;
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderBottomWidth(value);
},
valueConverter: Length.parse
});
exports.borderBottomWidthProperty.register(style_1.Style);
exports.borderLeftWidthProperty = new properties_1.CssProperty({
name: "borderLeftWidth",
cssName: "border-left-width",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
var value = Length.toDevicePixels(newValue, 0);
if (!isNonNegativeFiniteNumber(value)) {
throw new Error("border-left-width should be Non-Negative Finite number. Value: " + value);
}
target.view.effectiveBorderLeftWidth = value;
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderLeftWidth(value);
},
valueConverter: Length.parse
});
exports.borderLeftWidthProperty.register(style_1.Style);
var borderRadiusProperty = new properties_1.ShorthandProperty({
name: "borderRadius",
cssName: "border-radius",
getter: function() {
if (Length.equals(this.borderTopLeftRadius, this.borderTopRightRadius) && Length.equals(this.borderTopLeftRadius, this.borderBottomRightRadius) && Length.equals(this.borderTopLeftRadius, this.borderBottomLeftRadius)) {
return this.borderTopLeftRadius;
}
return Length.convertToString(this.borderTopLeftRadius) + " " + Length.convertToString(this.borderTopRightRadius) + " " + Length.convertToString(this.borderBottomRightRadius) + " " + Length.convertToString(this.borderBottomLeftRadius);
},
converter: function(value) {
if (typeof value === "string") {
var borderRadius = parseThickness(value);
return [ [ exports.borderTopLeftRadiusProperty, borderRadius.top ], [ exports.borderTopRightRadiusProperty, borderRadius.right ], [ exports.borderBottomRightRadiusProperty, borderRadius.bottom ], [ exports.borderBottomLeftRadiusProperty, borderRadius.left ] ];
} else {
return [ [ exports.borderTopLeftRadiusProperty, value ], [ exports.borderTopRightRadiusProperty, value ], [ exports.borderBottomRightRadiusProperty, value ], [ exports.borderBottomLeftRadiusProperty, value ] ];
}
}
});
borderRadiusProperty.register(style_1.Style);
exports.borderTopLeftRadiusProperty = new properties_1.CssProperty({
name: "borderTopLeftRadius",
cssName: "border-top-left-radius",
defaultValue: 0,
affectsLayout: platform_1.isIOS,
valueChanged: function(target, oldValue, newValue) {
var value = Length.toDevicePixels(newValue, 0);
if (!isNonNegativeFiniteNumber(value)) {
throw new Error("border-top-left-radius should be Non-Negative Finite number. Value: " + value);
}
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderTopLeftRadius(value);
},
valueConverter: Length.parse
});
exports.borderTopLeftRadiusProperty.register(style_1.Style);
exports.borderTopRightRadiusProperty = new properties_1.CssProperty({
name: "borderTopRightRadius",
cssName: "border-top-right-radius",
defaultValue: 0,
affectsLayout: platform_1.isIOS,
valueChanged: function(target, oldValue, newValue) {
var value = Length.toDevicePixels(newValue, 0);
if (!isNonNegativeFiniteNumber(value)) {
throw new Error("border-top-right-radius should be Non-Negative Finite number. Value: " + value);
}
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderTopRightRadius(value);
},
valueConverter: Length.parse
});
exports.borderTopRightRadiusProperty.register(style_1.Style);
exports.borderBottomRightRadiusProperty = new properties_1.CssProperty({
name: "borderBottomRightRadius",
cssName: "border-bottom-right-radius",
defaultValue: 0,
affectsLayout: platform_1.isIOS,
valueChanged: function(target, oldValue, newValue) {
var value = Length.toDevicePixels(newValue, 0);
if (!isNonNegativeFiniteNumber(value)) {
throw new Error("border-bottom-right-radius should be Non-Negative Finite number. Value: " + value);
}
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderBottomRightRadius(value);
},
valueConverter: Length.parse
});
exports.borderBottomRightRadiusProperty.register(style_1.Style);
exports.borderBottomLeftRadiusProperty = new properties_1.CssProperty({
name: "borderBottomLeftRadius",
cssName: "border-bottom-left-radius",
defaultValue: 0,
affectsLayout: platform_1.isIOS,
valueChanged: function(target, oldValue, newValue) {
var value = Length.toDevicePixels(newValue, 0);
if (!isNonNegativeFiniteNumber(value)) {
throw new Error("border-bottom-left-radius should be Non-Negative Finite number. Value: " + value);
}
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderBottomLeftRadius(value);
},
valueConverter: Length.parse
});
exports.borderBottomLeftRadiusProperty.register(style_1.Style);
function isNonNegativeFiniteNumber(value) {
return isFinite(value) && !isNaN(value) && value >= 0;
}
var supportedPaths = [ "rect", "circle", "ellipse", "polygon", "inset" ];
function isClipPathValid(value) {
if (!value) {
return true;
}
var functionName = value.substring(0, value.indexOf("(")).trim();
return supportedPaths.indexOf(functionName) !== -1;
}
exports.clipPathProperty = new properties_1.CssProperty({
name: "clipPath",
cssName: "clip-path",
valueChanged: function(target, oldValue, newValue) {
if (!isClipPathValid(newValue)) {
throw new Error("clip-path is not valid.");
}
var background = target.backgroundInternal;
target.backgroundInternal = background.withClipPath(newValue);
}
});
exports.clipPathProperty.register(style_1.Style);
function isFloatValueConverter(value) {
var newValue = parseFloat(value);
if (isNaN(newValue)) {
throw new Error("Invalid value: " + newValue);
}
return newValue;
}
exports.zIndexProperty = new properties_1.CssProperty({
name: "zIndex",
cssName: "z-index",
defaultValue: Number.NaN,
valueConverter: isFloatValueConverter
});
exports.zIndexProperty.register(style_1.Style);
function opacityConverter(value) {
var newValue = parseFloat(value);
if (!isNaN(newValue) && 0 <= newValue && newValue <= 1) {
return newValue;
}
throw new Error("Opacity should be between [0, 1]. Value: " + newValue);
}
exports.opacityProperty = new properties_1.CssAnimationProperty({
name: "opacity",
cssName: "opacity",
defaultValue: 1,
valueConverter: opacityConverter
});
exports.opacityProperty.register(style_1.Style);
exports.colorProperty = new properties_1.InheritedCssProperty({
name: "color",
cssName: "color",
equalityComparer: color_1.Color.equals,
valueConverter: function(v) {
return new color_1.Color(v);
}
});
exports.colorProperty.register(style_1.Style);
exports.fontInternalProperty = new properties_1.CssProperty({
name: "fontInternal",
cssName: "_fontInternal",
defaultValue: font_1.Font.default
});
exports.fontInternalProperty.register(style_1.Style);
exports.fontFamilyProperty = new properties_1.InheritedCssProperty({
name: "fontFamily",
cssName: "font-family",
affectsLayout: platform_1.isIOS,
valueChanged: function(target, oldValue, newValue) {
var currentFont = target.fontInternal;
if (currentFont.fontFamily !== newValue) {
var newFont = currentFont.withFontFamily(newValue);
target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
}
}
});
exports.fontFamilyProperty.register(style_1.Style);
exports.fontSizeProperty = new properties_1.InheritedCssProperty({
name: "fontSize",
cssName: "font-size",
affectsLayout: platform_1.isIOS,
valueChanged: function(target, oldValue, newValue) {
var currentFont = target.fontInternal;
if (currentFont.fontSize !== newValue) {
var newFont = currentFont.withFontSize(newValue);
target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
}
},
valueConverter: function(v) {
return parseFloat(v);
}
});
exports.fontSizeProperty.register(style_1.Style);
exports.fontStyleProperty = new properties_1.InheritedCssProperty({
name: "fontStyle",
cssName: "font-style",
affectsLayout: platform_1.isIOS,
defaultValue: font_1.FontStyle.NORMAL,
valueConverter: font_1.FontStyle.parse,
valueChanged: function(target, oldValue, newValue) {
var currentFont = target.fontInternal;
if (currentFont.fontStyle !== newValue) {
var newFont = currentFont.withFontStyle(newValue);
target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
}
}
});
exports.fontStyleProperty.register(style_1.Style);
exports.fontWeightProperty = new properties_1.InheritedCssProperty({
name: "fontWeight",
cssName: "font-weight",
affectsLayout: platform_1.isIOS,
defaultValue: font_1.FontWeight.NORMAL,
valueConverter: font_1.FontWeight.parse,
valueChanged: function(target, oldValue, newValue) {
var currentFont = target.fontInternal;
if (currentFont.fontWeight !== newValue) {
var newFont = currentFont.withFontWeight(newValue);
target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
}
}
});
exports.fontWeightProperty.register(style_1.Style);
var fontProperty = new properties_1.ShorthandProperty({
name: "font",
cssName: "font",
getter: function() {
return this.fontStyle + " " + this.fontWeight + " " + this.fontSize + " " + this.fontFamily;
},
converter: function(value) {
if (value === properties_1.unsetValue) {
return [ [ exports.fontStyleProperty, properties_1.unsetValue ], [ exports.fontWeightProperty, properties_1.unsetValue ], [ exports.fontSizeProperty, properties_1.unsetValue ], [ exports.fontFamilyProperty, properties_1.unsetValue ] ];
} else {
var font = font_1.parseFont(value);
var fontSize = parseFloat(font.fontSize);
return [ [ exports.fontStyleProperty, font.fontStyle ], [ exports.fontWeightProperty, font.fontWeight ], [ exports.fontSizeProperty, fontSize ], [ exports.fontFamilyProperty, font.fontFamily ] ];
}
}
});
fontProperty.register(style_1.Style);
var Visibility;
(function(Visibility) {
Visibility.VISIBLE = "visible";
Visibility.HIDDEN = "hidden";
Visibility.COLLAPSE = "collapse";
Visibility.isValid = properties_1.makeValidator(Visibility.VISIBLE, Visibility.HIDDEN, Visibility.COLLAPSE);
Visibility.parse = function(value) {
return value.toLowerCase() === "collapsed" ? Visibility.COLLAPSE : parseStrict(value);
};
var parseStrict = properties_1.makeParser(Visibility.isValid);
})(Visibility = exports.Visibility || (exports.Visibility = {}));
exports.visibilityProperty = new properties_1.CssProperty({
name: "visibility",
cssName: "visibility",
defaultValue: Visibility.VISIBLE,
affectsLayout: platform_1.isIOS,
valueConverter: Visibility.parse,
valueChanged: function(target, oldValue, newValue) {
target.view.isCollapsed = newValue === Visibility.COLLAPSE;
}
});
exports.visibilityProperty.register(style_1.Style);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var font_common_1 = __webpack_require__(33);
var trace_1 = __webpack_require__(15);
var application = __webpack_require__(18);
var fs = __webpack_require__(22);
__export(__webpack_require__(33));
var FONTS_BASE_PATH = "/fonts/";
var typefaceCache = new Map();
var appAssets;
var Font = function(_super) {
__extends(Font, _super);
function Font(family, size, style, weight) {
return _super.call(this, family, size, style, weight) || this;
}
Font.prototype.withFontFamily = function(family) {
return new Font(family, this.fontSize, this.fontStyle, this.fontWeight);
};
Font.prototype.withFontStyle = function(style) {
return new Font(this.fontFamily, this.fontSize, style, this.fontWeight);
};
Font.prototype.withFontWeight = function(weight) {
return new Font(this.fontFamily, this.fontSize, this.fontStyle, weight);
};
Font.prototype.withFontSize = function(size) {
return new Font(this.fontFamily, size, this.fontStyle, this.fontWeight);
};
Font.prototype.getAndroidTypeface = function() {
if (!this._typeface) {
var fontStyle = 0;
if (this.isBold) {
fontStyle |= android.graphics.Typeface.BOLD;
}
if (this.isItalic) {
fontStyle |= android.graphics.Typeface.ITALIC;
}
this._typeface = createTypeface(this, fontStyle);
}
return this._typeface;
};
Font.prototype.getUIFont = function(defaultFont) {
return undefined;
};
return Font;
}(font_common_1.FontBase);
Font.default = new Font(undefined, undefined, "normal", "normal");
exports.Font = Font;
function loadFontFromFile(fontFamily) {
appAssets = appAssets || application.android.context.getAssets();
if (!appAssets) {
return null;
}
var result = typefaceCache.get(fontFamily);
if (result === undefined) {
result = null;
var fontAssetPath = void 0;
var basePath = fs.path.join(fs.knownFolders.currentApp().path, "fonts", fontFamily);
if (fs.File.exists(basePath + ".ttf")) {
fontAssetPath = FONTS_BASE_PATH + fontFamily + ".ttf";
} else if (fs.File.exists(basePath + ".otf")) {
fontAssetPath = FONTS_BASE_PATH + fontFamily + ".otf";
} else {
if (trace_1.isEnabled()) {
trace_1.write("Could not find font file for " + fontFamily, trace_1.categories.Error, trace_1.messageType.error);
}
}
if (fontAssetPath) {
try {
fontAssetPath = fs.path.join(fs.knownFolders.currentApp().path, fontAssetPath);
result = android.graphics.Typeface.createFromFile(fontAssetPath);
} catch (e) {
if (trace_1.isEnabled()) {
trace_1.write("Error loading font asset: " + fontAssetPath, trace_1.categories.Error, trace_1.messageType.error);
}
}
}
typefaceCache.set(fontFamily, result);
}
return result;
}
function createTypeface(font, fontStyle) {
var fonts = font_common_1.parseFontFamily(font.fontFamily);
var result = null;
for (var i = 0; i < fonts.length && !result; i++) {
switch (fonts[i].toLowerCase()) {
case font_common_1.genericFontFamilies.serif:
result = android.graphics.Typeface.create("serif" + getFontWeightSuffix(font.fontWeight), fontStyle);
break;

case font_common_1.genericFontFamilies.sansSerif:
case font_common_1.genericFontFamilies.system:
result = android.graphics.Typeface.create("sans-serif" + getFontWeightSuffix(font.fontWeight), fontStyle);
break;

case font_common_1.genericFontFamilies.monospace:
result = android.graphics.Typeface.create("monospace" + getFontWeightSuffix(font.fontWeight), fontStyle);
break;

default:
result = loadFontFromFile(fonts[i]);
if (fontStyle) {
result = android.graphics.Typeface.create(result, fontStyle);
}
break;
}
}
if (fontStyle && !result) {
result = android.graphics.Typeface.create(result, fontStyle);
}
return result;
}
function getFontWeightSuffix(fontWeight) {
switch (fontWeight) {
case font_common_1.FontWeight.THIN:
return android.os.Build.VERSION.SDK_INT >= 16 ? "-thin" : "";

case font_common_1.FontWeight.EXTRA_LIGHT:
case font_common_1.FontWeight.LIGHT:
return android.os.Build.VERSION.SDK_INT >= 16 ? "-light" : "";

case font_common_1.FontWeight.NORMAL:
case "400":
case undefined:
case null:
return "";

case font_common_1.FontWeight.MEDIUM:
case font_common_1.FontWeight.SEMI_BOLD:
return android.os.Build.VERSION.SDK_INT >= 21 ? "-medium" : "";

case font_common_1.FontWeight.BOLD:
case "700":
case font_common_1.FontWeight.EXTRA_BOLD:
return "";

case font_common_1.FontWeight.BLACK:
return android.os.Build.VERSION.SDK_INT >= 21 ? "-black" : "";

default:
throw new Error('Invalid font weight: "' + fontWeight + '"');
}
}
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var properties_1 = __webpack_require__(34);
var FontBase = function() {
function FontBase(fontFamily, fontSize, fontStyle, fontWeight) {
this.fontFamily = fontFamily;
this.fontSize = fontSize;
this.fontStyle = fontStyle;
this.fontWeight = fontWeight;
}
Object.defineProperty(FontBase.prototype, "isItalic", {
get: function() {
return this.fontStyle === FontStyle.ITALIC;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FontBase.prototype, "isBold", {
get: function() {
return this.fontWeight === FontWeight.BOLD || this.fontWeight === "700";
},
enumerable: true,
configurable: true
});
FontBase.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return value1.fontFamily === value2.fontFamily && value1.fontSize === value2.fontSize && value1.fontStyle === value2.fontStyle && value1.fontWeight === value2.fontWeight;
};
return FontBase;
}();
FontBase.default = undefined;
exports.FontBase = FontBase;
var FontStyle;
(function(FontStyle) {
FontStyle.NORMAL = "normal";
FontStyle.ITALIC = "italic";
FontStyle.isValid = properties_1.makeValidator(FontStyle.NORMAL, FontStyle.ITALIC);
FontStyle.parse = properties_1.makeParser(FontStyle.isValid);
})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));
var FontWeight;
(function(FontWeight) {
FontWeight.THIN = "100";
FontWeight.EXTRA_LIGHT = "200";
FontWeight.LIGHT = "300";
FontWeight.NORMAL = "normal";
FontWeight.MEDIUM = "500";
FontWeight.SEMI_BOLD = "600";
FontWeight.BOLD = "bold";
FontWeight.EXTRA_BOLD = "800";
FontWeight.BLACK = "900";
FontWeight.isValid = properties_1.makeValidator(FontWeight.THIN, FontWeight.EXTRA_LIGHT, FontWeight.LIGHT, FontWeight.NORMAL, "400", FontWeight.MEDIUM, FontWeight.SEMI_BOLD, FontWeight.BOLD, "700", FontWeight.EXTRA_BOLD, FontWeight.BLACK);
FontWeight.parse = properties_1.makeParser(FontWeight.isValid);
})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));
function parseFontFamily(value) {
var result = new Array();
if (!value) {
return result;
}
var split = value.split(",");
for (var i = 0; i < split.length; i++) {
var str = split[i].trim().replace(/['"]+/g, "");
if (str) {
result.push(str);
}
}
return result;
}
exports.parseFontFamily = parseFontFamily;
var genericFontFamilies;
(function(genericFontFamilies) {
genericFontFamilies.serif = "serif";
genericFontFamilies.sansSerif = "sans-serif";
genericFontFamilies.monospace = "monospace";
genericFontFamilies.system = "system";
})(genericFontFamilies = exports.genericFontFamilies || (exports.genericFontFamilies = {}));
var styles = new Set();
[ FontStyle.NORMAL, FontStyle.ITALIC ].forEach(function(val, i, a) {
return styles.add(val);
});
var weights = new Set();
[ FontWeight.THIN, FontWeight.EXTRA_LIGHT, FontWeight.LIGHT, FontWeight.NORMAL, "400", FontWeight.MEDIUM, FontWeight.SEMI_BOLD, FontWeight.BOLD, "700", FontWeight.EXTRA_BOLD, FontWeight.BLACK ].forEach(function(val, i, a) {
return weights.add(val);
});
function parseFont(fontValue) {
var result = {
fontStyle: "normal",
fontVariant: "normal",
fontWeight: "normal"
};
var parts = fontValue.split(/\s+/);
var part;
while (part = parts.shift()) {
if (part === "normal") {} else if (part === "small-caps") {
result.fontVariant = part;
} else if (styles.has(part)) {
result.fontStyle = part;
} else if (weights.has(part)) {
result.fontWeight = part;
} else if (!result.fontSize) {
var sizes = part.split("/");
result.fontSize = sizes[0];
result.lineHeight = sizes.length > 1 ? sizes[1] : undefined;
} else {
result.fontFamily = part;
if (parts.length) {
result.fontFamily += " " + parts.join(" ");
}
break;
}
}
return result;
}
exports.parseFont = parseFont;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var observable_1 = __webpack_require__(20);
var style_1 = __webpack_require__(35);
exports.Style = style_1.Style;
exports.unsetValue = new Object();
var symbolPropertyMap = {};
var cssSymbolPropertyMap = {};
var inheritableProperties = new Array();
var inheritableCssProperties = new Array();
function print(map) {
var symbols = Object.getOwnPropertySymbols(map);
for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {
var symbol = symbols_1[_i];
var prop = map[symbol];
if (!prop.registered) {
console.log("Property " + prop.name + " not Registered!!!!!");
}
}
}
function _printUnregisteredProperties() {
print(symbolPropertyMap);
print(cssSymbolPropertyMap);
}
exports._printUnregisteredProperties = _printUnregisteredProperties;
var Property = function() {
function Property(options) {
this.enumerable = true;
this.configurable = true;
var name = options.name;
this.name = name;
var key = Symbol(name + ":propertyKey");
this.key = key;
var getDefault = Symbol(name + ":getDefault");
this.getDefault = getDefault;
var setNative = Symbol(name + ":setNative");
this.setNative = setNative;
var defaultValueKey = Symbol(name + ":nativeDefaultValue");
this.defaultValueKey = defaultValueKey;
var defaultValue = options.defaultValue;
this.defaultValue = defaultValue;
var eventName = name + "Change";
var equalityComparer = options.equalityComparer;
var affectsLayout = options.affectsLayout;
var valueChanged = options.valueChanged;
var valueConverter = options.valueConverter;
this.set = function(value) {
var reset = value === exports.unsetValue;
var unboxedValue;
var wrapped;
if (reset) {
unboxedValue = defaultValue;
} else {
wrapped = value && value.wrapped;
unboxedValue = wrapped ? observable_1.WrappedValue.unwrap(value) : value;
if (valueConverter && typeof unboxedValue === "string") {
unboxedValue = valueConverter(unboxedValue);
}
}
var currentValue = key in this ? this[key] : defaultValue;
var changed = equalityComparer ? !equalityComparer(currentValue, unboxedValue) : currentValue !== unboxedValue;
if (wrapped || changed) {
var setNativeValue = this.nativeView && this[setNative];
if (reset) {
delete this[key];
if (valueChanged) {
valueChanged(this, currentValue, unboxedValue);
}
if (setNativeValue) {
if (defaultValueKey in this) {
this[setNative](this[defaultValueKey]);
delete this[defaultValueKey];
} else {
this[setNative](defaultValue);
}
}
} else {
this[key] = unboxedValue;
if (valueChanged) {
valueChanged(this, currentValue, unboxedValue);
}
if (setNativeValue) {
if (!(defaultValueKey in this)) {
this[defaultValueKey] = this[getDefault] ? this[getDefault]() : defaultValue;
}
this[setNative](unboxedValue);
}
}
if (this.hasListeners(eventName)) {
this.notify({
eventName: eventName,
propertyName: name,
object: this,
value: unboxedValue,
oldValue: currentValue
});
}
if (affectsLayout) {
this.requestLayout();
}
}
};
this.get = function() {
return key in this ? this[key] : defaultValue;
};
this.nativeValueChange = function(owner, value) {
var currentValue = key in owner ? owner[key] : defaultValue;
var changed = equalityComparer ? !equalityComparer(currentValue, value) : currentValue !== value;
if (changed) {
owner[key] = value;
if (valueChanged) {
valueChanged(owner, currentValue, value);
}
if (owner.nativeView && !(defaultValueKey in owner)) {
owner[defaultValueKey] = owner[getDefault] ? owner[getDefault]() : defaultValue;
}
if (owner.hasListeners(eventName)) {
owner.notify({
eventName: eventName,
propertyName: name,
object: owner,
value: value,
oldValue: currentValue
});
}
if (affectsLayout) {
owner.requestLayout();
}
}
};
symbolPropertyMap[key] = this;
}
Property.prototype.register = function(cls) {
if (this.registered) {
throw new Error("Property " + this.name + " already registered.");
}
this.registered = true;
Object.defineProperty(cls.prototype, this.name, this);
};
Property.prototype.isSet = function(instance) {
return this.key in instance;
};
return Property;
}();
exports.Property = Property;
var CoercibleProperty = function(_super) {
__extends(CoercibleProperty, _super);
function CoercibleProperty(options) {
var _this = _super.call(this, options) || this;
var name = options.name;
var key = _this.key;
var getDefault = _this.getDefault;
var setNative = _this.setNative;
var defaultValueKey = _this.defaultValueKey;
var defaultValue = _this.defaultValue;
var coerceKey = Symbol(name + ":coerceKey");
var eventName = name + "Change";
var affectsLayout = options.affectsLayout;
var equalityComparer = options.equalityComparer;
var valueChanged = options.valueChanged;
var valueConverter = options.valueConverter;
var coerceCallback = options.coerceValue;
_this.coerce = function(target) {
var originalValue = coerceKey in target ? target[coerceKey] : defaultValue;
target[name] = originalValue;
};
_this.set = function(value) {
var reset = value === exports.unsetValue;
var unboxedValue;
var wrapped;
if (reset) {
unboxedValue = defaultValue;
delete this[coerceKey];
} else {
wrapped = value && value.wrapped;
unboxedValue = wrapped ? observable_1.WrappedValue.unwrap(value) : value;
if (valueConverter && typeof unboxedValue === "string") {
unboxedValue = valueConverter(unboxedValue);
}
this[coerceKey] = unboxedValue;
unboxedValue = coerceCallback(this, unboxedValue);
}
var currentValue = key in this ? this[key] : defaultValue;
var changed = equalityComparer ? !equalityComparer(currentValue, unboxedValue) : currentValue !== unboxedValue;
if (wrapped || changed) {
var setNativeValue = this.nativeView && this[setNative];
if (reset) {
delete this[key];
if (valueChanged) {
valueChanged(this, currentValue, unboxedValue);
}
if (setNativeValue) {
if (defaultValueKey in this) {
this[setNative](this[defaultValueKey]);
delete this[defaultValueKey];
} else {
this[setNative](defaultValue);
}
}
} else {
this[key] = unboxedValue;
if (valueChanged) {
valueChanged(this, currentValue, unboxedValue);
}
if (setNativeValue) {
if (!(defaultValueKey in this)) {
this[defaultValueKey] = this[getDefault] ? this[getDefault]() : defaultValue;
}
this[setNative](unboxedValue);
}
}
if (this.hasListeners(eventName)) {
this.notify({
eventName: eventName,
propertyName: name,
object: this,
value: unboxedValue,
oldValue: currentValue
});
}
if (affectsLayout) {
this.requestLayout();
}
}
};
return _this;
}
return CoercibleProperty;
}(Property);
exports.CoercibleProperty = CoercibleProperty;
var InheritedProperty = function(_super) {
__extends(InheritedProperty, _super);
function InheritedProperty(options) {
var _this = _super.call(this, options) || this;
var name = options.name;
var key = _this.key;
var defaultValue = options.defaultValue;
var sourceKey = Symbol(name + ":valueSourceKey");
_this.sourceKey = sourceKey;
var setBase = _this.set;
var setFunc = function(valueSource) {
return function(value) {
var that = this;
var unboxedValue;
var newValueSource;
if (value === exports.unsetValue) {
var parent_1 = that.parent;
if (parent_1 && parent_1[sourceKey] !== 0) {
unboxedValue = parent_1[name];
newValueSource = 1;
} else {
unboxedValue = defaultValue;
newValueSource = 0;
}
} else {
unboxedValue = value;
newValueSource = valueSource;
}
var currentValue = that[key];
setBase.call(that, unboxedValue);
var newValue = that[key];
that[sourceKey] = newValueSource;
if (currentValue !== newValue) {
var reset_1 = newValueSource === 0;
that.eachChild(function(child) {
var childValueSource = child[sourceKey] || 0;
if (reset_1) {
if (childValueSource === 1) {
setFunc.call(child, exports.unsetValue);
}
} else {
if (childValueSource <= 1) {
setInheritedValue.call(child, newValue);
}
}
return true;
});
}
};
};
var setInheritedValue = setFunc(1);
_this.setInheritedValue = setInheritedValue;
_this.set = setFunc(3);
inheritableProperties.push(_this);
return _this;
}
return InheritedProperty;
}(Property);
exports.InheritedProperty = InheritedProperty;
var CssProperty = function() {
function CssProperty(options) {
var name = options.name;
this.name = name;
this.cssName = "css:" + options.cssName;
this.cssLocalName = options.cssName;
var key = Symbol(name + ":propertyKey");
this.key = key;
var sourceKey = Symbol(name + ":valueSourceKey");
this.sourceKey = sourceKey;
var getDefault = Symbol(name + ":getDefault");
this.getDefault = getDefault;
var setNative = Symbol(name + ":setNative");
this.setNative = setNative;
var defaultValueKey = Symbol(name + ":nativeDefaultValue");
this.defaultValueKey = defaultValueKey;
var defaultValue = options.defaultValue;
this.defaultValue = defaultValue;
var eventName = name + "Change";
var affectsLayout = options.affectsLayout;
var equalityComparer = options.equalityComparer;
var valueChanged = options.valueChanged;
var valueConverter = options.valueConverter;
function setLocalValue(value) {
var reset = value === exports.unsetValue;
if (reset) {
value = defaultValue;
delete this[sourceKey];
} else {
this[sourceKey] = 3;
if (valueConverter && typeof value === "string") {
value = valueConverter(value);
}
}
var currentValue = key in this ? this[key] : defaultValue;
var changed = equalityComparer ? !equalityComparer(currentValue, value) : currentValue !== value;
if (changed) {
var view = this.view;
var setNativeValue = view.nativeView && view[setNative];
if (reset) {
delete this[key];
if (valueChanged) {
valueChanged(this, currentValue, value);
}
if (setNativeValue) {
if (defaultValueKey in this) {
view[setNative](this[defaultValueKey]);
delete this[defaultValueKey];
} else {
view[setNative](defaultValue);
}
}
} else {
this[key] = value;
if (valueChanged) {
valueChanged(this, currentValue, value);
}
if (setNativeValue) {
if (!(defaultValueKey in this)) {
this[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
}
view[setNative](value);
}
}
if (this.hasListeners(eventName)) {
this.notify({
eventName: eventName,
propertyName: name,
object: this,
value: value,
oldValue: currentValue
});
}
if (affectsLayout) {
view.requestLayout();
}
}
}
function setCssValue(value) {
var reset = value === exports.unsetValue;
var currentValueSource = this[sourceKey] || 0;
if (currentValueSource === 3) {
return;
}
if (reset) {
value = defaultValue;
delete this[sourceKey];
} else {
if (valueConverter && typeof value === "string") {
value = valueConverter(value);
}
this[sourceKey] = 2;
}
var currentValue = key in this ? this[key] : defaultValue;
var changed = equalityComparer ? !equalityComparer(currentValue, value) : currentValue !== value;
if (changed) {
var view = this.view;
var setNativeValue = view.nativeView && view[setNative];
if (reset) {
delete this[key];
if (valueChanged) {
valueChanged(this, currentValue, value);
}
if (setNativeValue) {
if (defaultValueKey in this) {
view[setNative](this[defaultValueKey]);
delete this[defaultValueKey];
} else {
view[setNative](defaultValue);
}
}
} else {
this[key] = value;
if (valueChanged) {
valueChanged(this, currentValue, value);
}
if (setNativeValue) {
if (!(defaultValueKey in this)) {
this[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
}
view[setNative](value);
}
}
if (this.hasListeners(eventName)) {
this.notify({
eventName: eventName,
propertyName: name,
object: this,
value: value,
oldValue: currentValue
});
}
if (affectsLayout) {
view.requestLayout();
}
}
}
function get() {
return key in this ? this[key] : defaultValue;
}
this.cssValueDescriptor = {
enumerable: true,
configurable: true,
get: get,
set: setCssValue
};
this.localValueDescriptor = {
enumerable: true,
configurable: true,
get: get,
set: setLocalValue
};
cssSymbolPropertyMap[key] = this;
}
CssProperty.prototype.register = function(cls) {
if (this.registered) {
throw new Error("Property " + this.name + " already registered.");
}
this.registered = true;
Object.defineProperty(cls.prototype, this.name, this.localValueDescriptor);
Object.defineProperty(cls.prototype, this.cssName, this.cssValueDescriptor);
if (this.cssLocalName !== this.cssName) {
Object.defineProperty(cls.prototype, this.cssLocalName, this.localValueDescriptor);
}
};
CssProperty.prototype.isSet = function(instance) {
return this.key in instance;
};
return CssProperty;
}();
exports.CssProperty = CssProperty;
var CssAnimationProperty = function() {
function CssAnimationProperty(options) {
this.options = options;
var valueConverter = options.valueConverter, equalityComparer = options.equalityComparer, valueChanged = options.valueChanged, defaultValue = options.defaultValue;
var propertyName = options.name;
this.name = propertyName;
CssAnimationProperty.properties[propertyName] = this;
if (options.cssName && options.cssName !== propertyName) {
CssAnimationProperty.properties[options.cssName] = this;
}
this._valueConverter = options.valueConverter;
var cssName = "css:" + (options.cssName || propertyName);
this.cssName = cssName;
var keyframeName = "keyframe:" + propertyName;
this.keyframe = keyframeName;
var defaultName = "default:" + propertyName;
var defaultValueKey = Symbol(defaultName);
this.defaultValueKey = defaultValueKey;
this.defaultValue = defaultValue;
var cssValue = Symbol(cssName);
var styleValue = Symbol(propertyName);
var keyframeValue = Symbol(keyframeName);
var computedValue = Symbol("computed-value:" + propertyName);
this.computedValueKey = computedValue;
var computedSource = Symbol("computed-source:" + propertyName);
this.getDefault = Symbol(propertyName + ":getDefault");
var setNative = this.setNative = Symbol(propertyName + ":setNative");
var eventName = propertyName + "Change";
function descriptor(symbol, propertySource, enumerable, configurable, getsComputed) {
return {
enumerable: enumerable,
configurable: configurable,
get: getsComputed ? function() {
return this[computedValue];
} : function() {
return this[symbol];
},
set: function(value) {
var prev = this[computedValue];
if (value === exports.unsetValue) {
this[symbol] = exports.unsetValue;
if (this[computedSource] === propertySource) {
if (this[styleValue] !== exports.unsetValue) {
this[computedSource] = 3;
this[computedValue] = this[styleValue];
} else if (this[cssValue] !== exports.unsetValue) {
this[computedSource] = 2;
this[computedValue] = this[cssValue];
} else {
this[computedSource] = 0;
this[computedValue] = defaultValue;
}
}
} else {
if (valueConverter && typeof value === "string") {
value = valueConverter(value);
}
this[symbol] = value;
if (this[computedSource] <= propertySource) {
this[computedSource] = propertySource;
this[computedValue] = value;
}
}
var next = this[computedValue];
if (prev !== next && (!equalityComparer || !equalityComparer(prev, next))) {
if (valueChanged) {
valueChanged(this, prev, next);
}
if (this.view.nativeView && this.view[setNative]) {
this.view[setNative](next);
}
if (this.hasListeners(eventName)) {
this.notify({
eventName: eventName,
object: this,
propertyName: propertyName,
value: value,
oldValue: prev
});
}
}
}
};
}
var defaultPropertyDescriptor = descriptor(defaultValueKey, 0, false, false, false);
var cssPropertyDescriptor = descriptor(cssValue, 2, false, false, false);
var stylePropertyDescriptor = descriptor(styleValue, 3, true, true, true);
var keyframePropertyDescriptor = descriptor(keyframeValue, 4, false, false, false);
symbolPropertyMap[computedValue] = this;
cssSymbolPropertyMap[computedValue] = this;
this.register = function(cls) {
cls.prototype[defaultValueKey] = options.defaultValue;
cls.prototype[computedValue] = options.defaultValue;
cls.prototype[computedSource] = 0;
cls.prototype[cssValue] = exports.unsetValue;
cls.prototype[styleValue] = exports.unsetValue;
cls.prototype[keyframeValue] = exports.unsetValue;
Object.defineProperty(cls.prototype, defaultName, defaultPropertyDescriptor);
Object.defineProperty(cls.prototype, cssName, cssPropertyDescriptor);
Object.defineProperty(cls.prototype, propertyName, stylePropertyDescriptor);
if (options.cssName && options.cssName !== options.name) {
Object.defineProperty(cls.prototype, options.cssName, stylePropertyDescriptor);
}
Object.defineProperty(cls.prototype, keyframeName, keyframePropertyDescriptor);
};
}
CssAnimationProperty._getByCssName = function(name) {
return this.properties[name];
};
CssAnimationProperty.prototype.isSet = function(instance) {
return instance[this.computedValueKey] !== exports.unsetValue;
};
return CssAnimationProperty;
}();
CssAnimationProperty.properties = {};
exports.CssAnimationProperty = CssAnimationProperty;
var InheritedCssProperty = function(_super) {
__extends(InheritedCssProperty, _super);
function InheritedCssProperty(options) {
var _this = _super.call(this, options) || this;
var name = options.name;
var key = _this.key;
var sourceKey = _this.sourceKey;
var getDefault = _this.getDefault;
var setNative = _this.setNative;
var defaultValueKey = _this.defaultValueKey;
var eventName = name + "Change";
var defaultValue = options.defaultValue;
var affectsLayout = options.affectsLayout;
var equalityComparer = options.equalityComparer;
var valueChanged = options.valueChanged;
var valueConverter = options.valueConverter;
var setFunc = function(valueSource) {
return function(value) {
var reset = value === exports.unsetValue;
var currentValueSource = this[sourceKey] || 0;
if (reset) {
if (valueSource === 2 && currentValueSource === 3) {
return;
}
} else {
if (currentValueSource > valueSource) {
return;
}
}
var view = this.view;
var newValue;
if (reset) {
var parent_2 = view.parent;
var style = parent_2 ? parent_2.style : null;
if (style && style[sourceKey] > 0) {
newValue = style[name];
this[sourceKey] = 1;
} else {
newValue = defaultValue;
delete this[sourceKey];
}
} else {
this[sourceKey] = valueSource;
if (valueConverter && typeof value === "string") {
newValue = valueConverter(value);
} else {
newValue = value;
}
}
var currentValue = key in this ? this[key] : defaultValue;
var changed = equalityComparer ? !equalityComparer(currentValue, newValue) : currentValue !== newValue;
if (changed) {
var view_1 = this.view;
var setNativeValue = view_1.nativeView && view_1[setNative];
if (reset) {
delete this[key];
if (valueChanged) {
valueChanged(this, currentValue, newValue);
}
if (setNativeValue) {
if (defaultValueKey in this) {
view_1[setNative](this[defaultValueKey]);
delete this[defaultValueKey];
} else {
view_1[setNative](defaultValue);
}
}
} else {
this[key] = newValue;
if (valueChanged) {
valueChanged(this, currentValue, newValue);
}
if (setNativeValue) {
if (!(defaultValueKey in this)) {
this[defaultValueKey] = view_1[getDefault] ? view_1[getDefault]() : defaultValue;
}
view_1[setNative](newValue);
}
}
if (this.hasListeners(eventName)) {
this.notify({
eventName: eventName,
propertyName: name,
object: this,
value: newValue,
oldValue: currentValue
});
}
if (affectsLayout) {
view_1.requestLayout();
}
view_1.eachChild(function(child) {
var childStyle = child.style;
var childValueSource = childStyle[sourceKey] || 0;
if (reset) {
if (childValueSource === 1) {
setDefaultFunc.call(childStyle, exports.unsetValue);
}
} else {
if (childValueSource <= 1) {
setInheritedFunc.call(childStyle, newValue);
}
}
return true;
});
}
};
};
var setDefaultFunc = setFunc(0);
var setInheritedFunc = setFunc(1);
_this.setInheritedValue = setInheritedFunc;
_this.cssValueDescriptor.set = setFunc(2);
_this.localValueDescriptor.set = setFunc(3);
inheritableCssProperties.push(_this);
return _this;
}
return InheritedCssProperty;
}(CssProperty);
exports.InheritedCssProperty = InheritedCssProperty;
var ShorthandProperty = function() {
function ShorthandProperty(options) {
this.name = options.name;
var key = Symbol(this.name + ":propertyKey");
this.key = key;
this.cssName = "css:" + options.cssName;
this.cssLocalName = "" + options.cssName;
var converter = options.converter;
function setLocalValue(value) {
if (this[key] !== value) {
this[key] = value;
for (var _i = 0, _a = converter(value); _i < _a.length; _i++) {
var _b = _a[_i], p = _b[0], v = _b[1];
this[p.name] = v;
}
}
}
function setCssValue(value) {
if (this[key] !== value) {
this[key] = value;
for (var _i = 0, _a = converter(value); _i < _a.length; _i++) {
var _b = _a[_i], p = _b[0], v = _b[1];
this[p.cssName] = v;
}
}
}
this.cssValueDescriptor = {
enumerable: true,
configurable: true,
get: options.getter,
set: setCssValue
};
this.localValueDescriptor = {
enumerable: true,
configurable: true,
get: options.getter,
set: setLocalValue
};
cssSymbolPropertyMap[key] = this;
}
ShorthandProperty.prototype.register = function(cls) {
if (this.registered) {
throw new Error("Property " + this.name + " already registered.");
}
this.registered = true;
Object.defineProperty(cls.prototype, this.name, this.localValueDescriptor);
Object.defineProperty(cls.prototype, this.cssName, this.cssValueDescriptor);
if (this.cssLocalName !== this.cssName) {
Object.defineProperty(cls.prototype, this.cssLocalName, this.localValueDescriptor);
}
};
return ShorthandProperty;
}();
exports.ShorthandProperty = ShorthandProperty;
function inheritablePropertyValuesOn(view) {
var array = new Array();
for (var _i = 0, inheritableProperties_1 = inheritableProperties; _i < inheritableProperties_1.length; _i++) {
var prop = inheritableProperties_1[_i];
var sourceKey = prop.sourceKey;
var valueSource = view[sourceKey] || 0;
if (valueSource !== 0) {
array.push({
property: prop,
value: view[prop.name]
});
}
}
return array;
}
function inheritableCssPropertyValuesOn(style) {
var array = new Array();
for (var _i = 0, inheritableCssProperties_1 = inheritableCssProperties; _i < inheritableCssProperties_1.length; _i++) {
var prop = inheritableCssProperties_1[_i];
var sourceKey = prop.sourceKey;
var valueSource = style[sourceKey] || 0;
if (valueSource !== 0) {
array.push({
property: prop,
value: style[prop.name]
});
}
}
return array;
}
function initNativeView(view) {
var symbols = Object.getOwnPropertySymbols(view);
for (var _i = 0, symbols_2 = symbols; _i < symbols_2.length; _i++) {
var symbol = symbols_2[_i];
var property = symbolPropertyMap[symbol];
if (!property) {
continue;
}
var setNative = property.setNative;
var getDefault = property.getDefault;
if (setNative in view) {
var defaultValueKey = property.defaultValueKey;
if (!(defaultValueKey in view)) {
view[defaultValueKey] = view[getDefault] ? view[getDefault]() : property.defaultValue;
}
var value = view[symbol];
view[setNative](value);
}
}
var style = view.style;
symbols = Object.getOwnPropertySymbols(style);
for (var _a = 0, symbols_3 = symbols; _a < symbols_3.length; _a++) {
var symbol = symbols_3[_a];
var property = cssSymbolPropertyMap[symbol];
if (!property) {
continue;
}
if (view[property.setNative]) {
if (view[property.getDefault]) {
var defaultValueKey = property.defaultValueKey;
if (!(defaultValueKey in style)) {
style[defaultValueKey] = view[property.getDefault] ? view[property.getDefault]() : property.defaultValue;
}
}
var value = style[symbol];
view[property.setNative](value);
}
}
}
exports.initNativeView = initNativeView;
function resetNativeView(view) {
var symbols = Object.getOwnPropertySymbols(view);
for (var _i = 0, symbols_4 = symbols; _i < symbols_4.length; _i++) {
var symbol = symbols_4[_i];
var property = symbolPropertyMap[symbol];
if (!property) {
continue;
}
if (view[property.setNative]) {
if (property.defaultValueKey in view) {
view[property.setNative](view[property.defaultValueKey]);
delete view[property.defaultValueKey];
} else {
view[property.setNative](property.defaultValue);
}
}
}
var style = view.style;
symbols = Object.getOwnPropertySymbols(style);
for (var _a = 0, symbols_5 = symbols; _a < symbols_5.length; _a++) {
var symbol = symbols_5[_a];
var property = cssSymbolPropertyMap[symbol];
if (!property) {
continue;
}
if (view[property.setNative]) {
if (property.defaultValueKey in style) {
view[property.setNative](style[property.defaultValueKey]);
delete style[property.defaultValueKey];
} else {
view[property.setNative](property.defaultValue);
}
}
}
}
exports.resetNativeView = resetNativeView;
function clearInheritedProperties(view) {
for (var _i = 0, inheritableProperties_2 = inheritableProperties; _i < inheritableProperties_2.length; _i++) {
var prop = inheritableProperties_2[_i];
var sourceKey = prop.sourceKey;
if (view[sourceKey] === 1) {
prop.set.call(view, exports.unsetValue);
}
}
var style = view.style;
for (var _a = 0, inheritableCssProperties_2 = inheritableCssProperties; _a < inheritableCssProperties_2.length; _a++) {
var prop = inheritableCssProperties_2[_a];
var sourceKey = prop.sourceKey;
if (style[sourceKey] === 1) {
prop.setInheritedValue.call(style, exports.unsetValue);
}
}
}
exports.clearInheritedProperties = clearInheritedProperties;
function resetCSSProperties(style) {
var symbols = Object.getOwnPropertySymbols(style);
for (var _i = 0, symbols_6 = symbols; _i < symbols_6.length; _i++) {
var symbol = symbols_6[_i];
var cssProperty = void 0;
if (cssProperty = cssSymbolPropertyMap[symbol]) {
style[cssProperty.cssName] = exports.unsetValue;
if (cssProperty instanceof CssAnimationProperty) {
style[cssProperty.keyframe] = exports.unsetValue;
}
}
}
}
exports.resetCSSProperties = resetCSSProperties;
function propagateInheritableProperties(view, child) {
var inheritablePropertyValues = inheritablePropertyValuesOn(view);
for (var _i = 0, inheritablePropertyValues_1 = inheritablePropertyValues; _i < inheritablePropertyValues_1.length; _i++) {
var pair = inheritablePropertyValues_1[_i];
var prop = pair.property;
var sourceKey = prop.sourceKey;
var currentValueSource = child[sourceKey] || 0;
if (currentValueSource <= 1) {
prop.setInheritedValue.call(child, pair.value);
}
}
}
exports.propagateInheritableProperties = propagateInheritableProperties;
function propagateInheritableCssProperties(parentStyle, childStyle) {
var inheritableCssPropertyValues = inheritableCssPropertyValuesOn(parentStyle);
for (var _i = 0, inheritableCssPropertyValues_1 = inheritableCssPropertyValues; _i < inheritableCssPropertyValues_1.length; _i++) {
var pair = inheritableCssPropertyValues_1[_i];
var prop = pair.property;
var sourceKey = prop.sourceKey;
var currentValueSource = childStyle[sourceKey] || 0;
if (currentValueSource <= 1) {
prop.setInheritedValue.call(childStyle, pair.value, 1);
}
}
}
exports.propagateInheritableCssProperties = propagateInheritableCssProperties;
function makeValidator() {
var values = [];
for (var _i = 0; _i < arguments.length; _i++) {
values[_i] = arguments[_i];
}
var set = new Set(values);
return function(value) {
return set.has(value);
};
}
exports.makeValidator = makeValidator;
function makeParser(isValid) {
return function(value) {
var lower = value && value.toLowerCase();
if (isValid(lower)) {
return lower;
} else {
throw new Error("Invalid value: " + value);
}
};
}
exports.makeParser = makeParser;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var observable_1 = __webpack_require__(20);
var Style = function(_super) {
__extends(Style, _super);
function Style(view) {
var _this = _super.call(this) || this;
_this.view = view;
return _this;
}
return Style;
}(observable_1.Observable);
exports.Style = Style;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
__export(__webpack_require__(37));
var ScopeError = function(_super) {
__extends(ScopeError, _super);
function ScopeError(inner, message) {
var _this = this;
var formattedMessage;
if (message && inner.message) {
formattedMessage = message + "\n > " + inner.message.replace("\n", "\n  ");
} else {
formattedMessage = message || inner.message || undefined;
}
_this = _super.call(this, formattedMessage) || this;
_this.stack = "Error: " + _this.message + "\n" + inner.stack.substr(inner.stack.indexOf("\n") + 1);
_this.message = formattedMessage;
return _this;
}
return ScopeError;
}(Error);
exports.ScopeError = ScopeError;
var SourceError = function(_super) {
__extends(SourceError, _super);
function SourceError(child, source, message) {
return _super.call(this, child, message ? message + " @" + source + "" : source + "") || this;
}
return SourceError;
}(ScopeError);
exports.SourceError = SourceError;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var file_system_1 = __webpack_require__(22);
exports.debug = true;
var applicationRootPath;
function ensureAppRootPath() {
if (!applicationRootPath) {
applicationRootPath = file_system_1.knownFolders.currentApp().path;
applicationRootPath = applicationRootPath.substr(0, applicationRootPath.length - "app/".length);
}
}
var Source = function() {
function Source(uri, line, column) {
ensureAppRootPath();
if (uri.length > applicationRootPath.length && uri.substr(0, applicationRootPath.length) === applicationRootPath) {
this._uri = "file://" + uri.substr(applicationRootPath.length);
} else {
this._uri = uri;
}
this._line = line;
this._column = column;
}
Object.defineProperty(Source.prototype, "uri", {
get: function() {
return this._uri;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Source.prototype, "line", {
get: function() {
return this._line;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Source.prototype, "column", {
get: function() {
return this._column;
},
enumerable: true,
configurable: true
});
Source.prototype.toString = function() {
return this._uri + ":" + this._line + ":" + this._column;
};
Source.get = function(object) {
return object[Source._source];
};
Source.set = function(object, src) {
object[Source._source] = src;
};
return Source;
}();
Source._source = Symbol("source");
exports.Source = Source;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var properties_1 = __webpack_require__(34);
var bindable_1 = __webpack_require__(39);
var platform_1 = __webpack_require__(25);
exports.isIOS = platform_1.isIOS;
exports.isAndroid = platform_1.isAndroid;
var utils_1 = __webpack_require__(14);
exports.layout = utils_1.layout;
var style_properties_1 = __webpack_require__(31);
var types = __webpack_require__(17);
var color_1 = __webpack_require__(27);
exports.Color = color_1.Color;
__export(__webpack_require__(39));
__export(__webpack_require__(34));
var styleScopeModule;
function ensureStyleScopeModule() {
if (!styleScopeModule) {
styleScopeModule = __webpack_require__(45);
}
}
var defaultBindingSource = {};
function getAncestor(view, criterion) {
var matcher = null;
if (typeof criterion === "string") {
matcher = function(view) {
return view.typeName === criterion;
};
} else {
matcher = function(view) {
return view instanceof criterion;
};
}
for (var parent_1 = view.parent; parent_1 != null; parent_1 = parent_1.parent) {
if (matcher(parent_1)) {
return parent_1;
}
}
return null;
}
exports.getAncestor = getAncestor;
function getViewById(view, id) {
if (!view) {
return undefined;
}
if (view.id === id) {
return view;
}
var retVal;
var descendantsCallback = function(child) {
if (child.id === id) {
retVal = child;
return false;
}
return true;
};
eachDescendant(view, descendantsCallback);
return retVal;
}
exports.getViewById = getViewById;
function eachDescendant(view, callback) {
if (!callback || !view) {
return;
}
var continueIteration;
var localCallback = function(child) {
continueIteration = callback(child);
if (continueIteration) {
child.eachChild(localCallback);
}
return continueIteration;
};
view.eachChild(localCallback);
}
exports.eachDescendant = eachDescendant;
var viewIdCounter = 1;
var contextMap = new Map();
function getNativeView(context, typeName) {
var typeMap = contextMap.get(context);
if (!typeMap) {
typeMap = new Map();
contextMap.set(context, typeMap);
return undefined;
}
var array = typeMap.get(typeName);
if (array) {
var nativeView = void 0;
while (array.length > 0) {
var weakRef = array.pop();
nativeView = weakRef.get();
if (nativeView) {
return nativeView;
}
}
}
return undefined;
}
function putNativeView(context, view) {
var typeMap = contextMap.get(context);
var typeName = view.typeName;
var list = typeMap.get(typeName);
if (!list) {
list = [];
typeMap.set(typeName, list);
}
list.push(new WeakRef(view.nativeView));
}
var ViewBase = function(_super) {
__extends(ViewBase, _super);
function ViewBase() {
var _this = _super.call(this) || this;
_this.pseudoClassAliases = {
highlighted: [ "active", "pressed" ]
};
_this.cssClasses = new Set();
_this.cssPseudoClasses = new Set();
_this._domId = viewIdCounter++;
_this._style = new properties_1.Style(_this);
return _this;
}
Object.defineProperty(ViewBase.prototype, "typeName", {
get: function() {
return types.getClass(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewBase.prototype, "style", {
get: function() {
return this._style;
},
set: function(value) {
throw new Error("View.style property is read-only.");
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewBase.prototype, "android", {
get: function() {
return this._androidView;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewBase.prototype, "ios", {
get: function() {
return this._iosView;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewBase.prototype, "isLoaded", {
get: function() {
return this._isLoaded;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewBase.prototype, "class", {
get: function() {
return this.className;
},
set: function(v) {
this.className = v;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewBase.prototype, "inlineStyleSelector", {
get: function() {
return this._inlineStyleSelector;
},
set: function(value) {
this._inlineStyleSelector = value;
},
enumerable: true,
configurable: true
});
ViewBase.prototype.getViewById = function(id) {
return getViewById(this, id);
};
Object.defineProperty(ViewBase.prototype, "page", {
get: function() {
if (this.parent) {
return this.parent.page;
}
return null;
},
enumerable: true,
configurable: true
});
ViewBase.prototype.set = function(name, value) {
this[name] = bindable_1.WrappedValue.unwrap(value);
};
ViewBase.prototype.onLoaded = function() {
this._isLoaded = true;
this._loadEachChild();
this._emit("loaded");
};
ViewBase.prototype._loadEachChild = function() {
this.eachChild(function(child) {
child.onLoaded();
return true;
});
};
ViewBase.prototype.onUnloaded = function() {
this._unloadEachChild();
this._isLoaded = false;
this._emit("unloaded");
};
ViewBase.prototype._batchUpdate = function(callback) {
try {
++this._batchUpdateScope;
return callback();
} finally {
--this._batchUpdateScope;
}
};
ViewBase.prototype._unloadEachChild = function() {
this.eachChild(function(child) {
if (child.isLoaded) {
child.onUnloaded();
}
return true;
});
};
ViewBase.prototype._applyStyleFromScope = function() {
var scope = this._styleScope;
if (scope) {
scope.applySelectors(this);
} else {
this._setCssState(null);
}
};
ViewBase.prototype._setCssState = function(next) {
var _this = this;
var previous = this._cssState;
this._cssState = next;
if (!this._invalidateCssHandler) {
this._invalidateCssHandler = function() {
if (_this._invalidateCssHandlerSuspended) {
return;
}
_this.applyCssState();
};
}
try {
this._invalidateCssHandlerSuspended = true;
if (next) {
next.changeMap.forEach(function(changes, view) {
if (changes.attributes) {
changes.attributes.forEach(function(attribute) {
view.addEventListener(attribute + "Change", _this._invalidateCssHandler);
});
}
if (changes.pseudoClasses) {
changes.pseudoClasses.forEach(function(pseudoClass) {
var eventName = ":" + pseudoClass;
view.addEventListener(":" + pseudoClass, _this._invalidateCssHandler);
if (view[eventName]) {
view[eventName](+1);
}
});
}
});
}
if (previous) {
previous.changeMap.forEach(function(changes, view) {
if (changes.attributes) {
changes.attributes.forEach(function(attribute) {
view.removeEventListener("onPropertyChanged:" + attribute, _this._invalidateCssHandler);
});
}
if (changes.pseudoClasses) {
changes.pseudoClasses.forEach(function(pseudoClass) {
var eventName = ":" + pseudoClass;
view.removeEventListener(eventName, _this._invalidateCssHandler);
if (view[eventName]) {
view[eventName](-1);
}
});
}
});
}
} finally {
this._invalidateCssHandlerSuspended = false;
}
this.applyCssState();
};
ViewBase.prototype.notifyPseudoClassChanged = function(pseudoClass) {
this.notify({
eventName: ":" + pseudoClass,
object: this
});
};
ViewBase.prototype.applyCssState = function() {
var _this = this;
this._batchUpdate(function() {
if (!_this._cssState) {
_this._cancelAllAnimations();
properties_1.resetCSSProperties(_this.style);
return;
}
_this._cssState.apply();
});
};
ViewBase.prototype.getAllAliasedStates = function(name) {
var allStates = [];
allStates.push(name);
if (name in this.pseudoClassAliases) {
for (var i = 0; i < this.pseudoClassAliases[name].length; i++) {
allStates.push(this.pseudoClassAliases[name][i]);
}
}
return allStates;
};
ViewBase.prototype.addPseudoClass = function(name) {
var allStates = this.getAllAliasedStates(name);
for (var i = 0; i < allStates.length; i++) {
if (!this.cssPseudoClasses.has(allStates[i])) {
this.cssPseudoClasses.add(allStates[i]);
this.notifyPseudoClassChanged(allStates[i]);
}
}
};
ViewBase.prototype.deletePseudoClass = function(name) {
var allStates = this.getAllAliasedStates(name);
for (var i = 0; i < allStates.length; i++) {
if (this.cssPseudoClasses.has(allStates[i])) {
this.cssPseudoClasses.delete(allStates[i]);
this.notifyPseudoClassChanged(allStates[i]);
}
}
};
ViewBase.prototype._applyInlineStyle = function(inlineStyle) {
if (typeof inlineStyle === "string") {
try {
ensureStyleScopeModule();
styleScopeModule.applyInlineStyle(this, inlineStyle);
} finally {}
}
};
ViewBase.prototype.bindingContextChanged = function(data) {
this.bindings.get("bindingContext").bind(data.value);
};
ViewBase.prototype.bind = function(options, source) {
if (source === void 0) {
source = defaultBindingSource;
}
var targetProperty = options.targetProperty;
this.unbind(targetProperty);
if (!this.bindings) {
this.bindings = new Map();
}
var binding = new bindable_1.Binding(this, options);
this.bindings.set(targetProperty, binding);
var bindingSource = source;
if (bindingSource === defaultBindingSource) {
bindingSource = this.bindingContext;
binding.sourceIsBindingContext = true;
if (targetProperty === "bindingContext") {
this.bindingContextBoundToParentBindingContextChanged = true;
var parent_2 = this.parent;
if (parent_2) {
parent_2.on("bindingContextChange", this.bindingContextChanged, this);
} else {
this.shouldAddHandlerToParentBindingContextChanged = true;
}
}
}
binding.bind(bindingSource);
};
ViewBase.prototype.unbind = function(property) {
var bindings = this.bindings;
if (!bindings) {
return;
}
var binding = bindings.get(property);
if (binding) {
binding.unbind();
bindings.delete(property);
if (binding.sourceIsBindingContext) {
if (property === "bindingContext") {
this.shouldAddHandlerToParentBindingContextChanged = false;
this.bindingContextBoundToParentBindingContextChanged = false;
var parent_3 = this.parent;
if (parent_3) {
parent_3.off("bindingContextChange", this.bindingContextChanged, this);
}
}
}
}
};
ViewBase.prototype.requestLayout = function() {
var parent = this.parent;
if (parent) {
parent.requestLayout();
}
};
ViewBase.prototype.eachChild = function(callback) {};
ViewBase.prototype._addView = function(view, atIndex) {
if (bindable_1.traceEnabled()) {
bindable_1.traceWrite(this + "._addView(" + view + ", " + atIndex + ")", bindable_1.traceCategories.ViewHierarchy);
}
if (!view) {
throw new Error("Expecting a valid View instance.");
}
if (!(view instanceof ViewBase)) {
throw new Error(view + " is not a valid View instance.");
}
if (view.parent) {
throw new Error("View already has a parent. View: " + view + " Parent: " + view.parent);
}
view.parent = this;
this._addViewCore(view, atIndex);
view._parentChanged(null);
};
ViewBase.prototype._setStyleScope = function(scope) {
this._styleScope = scope;
this._applyStyleFromScope();
this.eachChild(function(v) {
v._setStyleScope(scope);
return true;
});
};
ViewBase.prototype._addViewCore = function(view, atIndex) {
properties_1.propagateInheritableProperties(this, view);
var styleScope = this._styleScope;
if (styleScope) {
view._setStyleScope(styleScope);
}
properties_1.propagateInheritableCssProperties(this.style, view.style);
if (this._context) {
view._setupUI(this._context, atIndex);
}
if (this._isLoaded) {
view.onLoaded();
}
};
ViewBase.prototype._removeView = function(view) {
if (bindable_1.traceEnabled()) {
bindable_1.traceWrite(this + "._removeView(" + view + ")", bindable_1.traceCategories.ViewHierarchy);
}
if (view.parent !== this) {
throw new Error("View not added to this instance. View: " + view + " CurrentParent: " + view.parent + " ExpectedParent: " + this);
}
this._removeViewCore(view);
view.parent = undefined;
view._parentChanged(this);
};
ViewBase.prototype._removeViewCore = function(view) {
if (this._styleScope === view._styleScope) {
view._setStyleScope(null);
}
if (view.isLoaded) {
view.onUnloaded();
}
if (view._context) {
view._tearDownUI();
}
};
ViewBase.prototype.createNativeView = function() {
return undefined;
};
ViewBase.prototype.disposeNativeView = function() {};
ViewBase.prototype.initNativeView = function() {
if (this._cssState) {
this._cssState.playPendingKeyframeAnimations();
}
};
ViewBase.prototype.resetNativeView = function() {
if (this.nativeView && this.recycleNativeView && platform_1.isAndroid) {
properties_1.resetNativeView(this);
}
if (this._cssState) {
this._cancelAllAnimations();
}
};
ViewBase.prototype._setupUI = function(context, atIndex, parentIsLoaded) {
bindable_1.traceNotifyEvent(this, "_setupUI");
if (bindable_1.traceEnabled()) {
bindable_1.traceWrite(this + "._setupUI(" + context + ")", bindable_1.traceCategories.VisualTreeEvents);
}
if (this._context === context) {
return;
}
this._context = context;
bindable_1.traceNotifyEvent(this, "_onContextChanged");
var currentNativeView = this.nativeView;
if (platform_1.isAndroid) {
var nativeView = void 0;
if (this.recycleNativeView) {
nativeView = getNativeView(context, this.typeName);
}
if (!nativeView) {
nativeView = this.createNativeView();
}
this._androidView = this.nativeView = nativeView;
if (nativeView) {
var result = nativeView.defaultPaddings;
if (result === undefined) {
result = org.nativescript.widgets.ViewHelper.getPadding(nativeView);
nativeView.defaultPaddings = result;
}
this._defaultPaddingTop = result.top;
this._defaultPaddingRight = result.right;
this._defaultPaddingBottom = result.bottom;
this._defaultPaddingLeft = result.left;
var style = this.style;
if (!style_properties_1.paddingTopProperty.isSet(style)) {
this.effectivePaddingTop = this._defaultPaddingTop;
}
if (!style_properties_1.paddingRightProperty.isSet(style)) {
this.effectivePaddingRight = this._defaultPaddingRight;
}
if (!style_properties_1.paddingBottomProperty.isSet(style)) {
this.effectivePaddingBottom = this._defaultPaddingBottom;
}
if (!style_properties_1.paddingLeftProperty.isSet(style)) {
this.effectivePaddingLeft = this._defaultPaddingLeft;
}
}
} else {
var nativeView = this.createNativeView();
if (!currentNativeView && nativeView) {
this.nativeView = this._iosView = nativeView;
}
}
this.initNativeView();
if (this.parent) {
var nativeIndex = this.parent._childIndexToNativeChildIndex(atIndex);
this._isAddedToNativeVisualTree = this.parent._addViewToNativeVisualTree(this, nativeIndex);
}
if (this.nativeView) {
if (currentNativeView !== this.nativeView) {
properties_1.initNativeView(this);
}
}
this.eachChild(function(child) {
child._setupUI(context);
return true;
});
};
ViewBase.prototype._tearDownUI = function(force) {
if (!this._context) {
return;
}
if (bindable_1.traceEnabled()) {
bindable_1.traceWrite(this + "._tearDownUI(" + force + ")", bindable_1.traceCategories.VisualTreeEvents);
}
this.resetNativeView();
this.eachChild(function(child) {
child._tearDownUI(force);
return true;
});
if (this.parent) {
this.parent._removeViewFromNativeVisualTree(this);
}
var nativeView = this.nativeView;
if (nativeView && this.recycleNativeView && platform_1.isAndroid) {
var nativeParent = platform_1.isAndroid ? nativeView.getParent() : nativeView.superview;
if (!nativeParent) {
putNativeView(this._context, this);
}
}
this.disposeNativeView();
if (platform_1.isAndroid) {
this.nativeView = null;
this._androidView = null;
}
this._context = null;
bindable_1.traceNotifyEvent(this, "_onContextChanged");
bindable_1.traceNotifyEvent(this, "_tearDownUI");
};
ViewBase.prototype._childIndexToNativeChildIndex = function(index) {
return index;
};
ViewBase.prototype._addViewToNativeVisualTree = function(view, atIndex) {
if (view._isAddedToNativeVisualTree) {
throw new Error("Child already added to the native visual tree.");
}
return true;
};
ViewBase.prototype._removeViewFromNativeVisualTree = function(view) {
bindable_1.traceNotifyEvent(view, "_removeViewFromNativeVisualTree");
view._isAddedToNativeVisualTree = false;
};
ViewBase.prototype._goToVisualState = function(state) {
if (bindable_1.traceEnabled()) {
bindable_1.traceWrite(this + " going to state: " + state, bindable_1.traceCategories.Style);
}
if (state === this._visualState) {
return;
}
this.deletePseudoClass(this._visualState);
this._visualState = state;
this.addPseudoClass(state);
};
ViewBase.prototype._applyXmlAttribute = function(attribute, value) {
if (attribute === "style") {
this._applyInlineStyle(value);
return true;
}
return false;
};
ViewBase.prototype.setInlineStyle = function(style) {
if (typeof style !== "string") {
throw new Error("Parameter should be valid CSS string!");
}
this._applyInlineStyle(style);
};
ViewBase.prototype._parentChanged = function(oldParent) {
if (oldParent) {
properties_1.clearInheritedProperties(this);
if (this.bindingContextBoundToParentBindingContextChanged) {
oldParent.off("bindingContextChange", this.bindingContextChanged, this);
}
} else if (this.shouldAddHandlerToParentBindingContextChanged) {
var parent_4 = this.parent;
parent_4.on("bindingContextChange", this.bindingContextChanged, this);
this.bindings.get("bindingContext").bind(parent_4.bindingContext);
}
};
ViewBase.prototype._registerAnimation = function(animation) {
if (this._registeredAnimations === undefined) {
this._registeredAnimations = new Array();
}
this._registeredAnimations.push(animation);
};
ViewBase.prototype._unregisterAnimation = function(animation) {
if (this._registeredAnimations) {
var index_1 = this._registeredAnimations.indexOf(animation);
if (index_1 >= 0) {
this._registeredAnimations.splice(index_1, 1);
}
}
};
ViewBase.prototype._cancelAllAnimations = function() {
if (this._registeredAnimations) {
for (var _i = 0, _a = this._registeredAnimations; _i < _a.length; _i++) {
var animation = _a[_i];
animation.cancel();
}
}
};
return ViewBase;
}(bindable_1.Observable);
ViewBase.loadedEvent = "loaded";
ViewBase.unloadedEvent = "unloaded";
exports.ViewBase = ViewBase;
ViewBase.prototype.isCollapsed = false;
ViewBase.prototype._oldLeft = 0;
ViewBase.prototype._oldTop = 0;
ViewBase.prototype._oldRight = 0;
ViewBase.prototype._oldBottom = 0;
ViewBase.prototype.effectiveMinWidth = 0;
ViewBase.prototype.effectiveMinHeight = 0;
ViewBase.prototype.effectiveWidth = 0;
ViewBase.prototype.effectiveHeight = 0;
ViewBase.prototype.effectiveMarginTop = 0;
ViewBase.prototype.effectiveMarginRight = 0;
ViewBase.prototype.effectiveMarginBottom = 0;
ViewBase.prototype.effectiveMarginLeft = 0;
ViewBase.prototype.effectivePaddingTop = 0;
ViewBase.prototype.effectivePaddingRight = 0;
ViewBase.prototype.effectivePaddingBottom = 0;
ViewBase.prototype.effectivePaddingLeft = 0;
ViewBase.prototype.effectiveBorderTopWidth = 0;
ViewBase.prototype.effectiveBorderRightWidth = 0;
ViewBase.prototype.effectiveBorderBottomWidth = 0;
ViewBase.prototype.effectiveBorderLeftWidth = 0;
ViewBase.prototype._defaultPaddingTop = 0;
ViewBase.prototype._defaultPaddingRight = 0;
ViewBase.prototype._defaultPaddingBottom = 0;
ViewBase.prototype._defaultPaddingLeft = 0;
ViewBase.prototype._batchUpdateScope = 0;
exports.bindingContextProperty = new properties_1.InheritedProperty({
name: "bindingContext"
});
exports.bindingContextProperty.register(ViewBase);
exports.classNameProperty = new properties_1.Property({
name: "className",
valueChanged: function(view, oldValue, newValue) {
var classes = view.cssClasses;
classes.clear();
if (typeof newValue === "string") {
newValue.split(" ").forEach(function(c) {
return classes.add(c);
});
}
resetStyles(view);
}
});
exports.classNameProperty.register(ViewBase);
function resetStyles(view) {
view._applyStyleFromScope();
view.eachChild(function(child) {
resetStyles(child);
return true;
});
}
exports.idProperty = new properties_1.Property({
name: "id",
valueChanged: function(view, oldValue, newValue) {
return resetStyles(view);
}
});
exports.idProperty.register(ViewBase);
function booleanConverter(v) {
var lowercase = (v + "").toLowerCase();
if (lowercase === "true") {
return true;
} else if (lowercase === "false") {
return false;
}
throw new Error("Invalid boolean: " + v);
}
exports.booleanConverter = booleanConverter;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var properties_1 = __webpack_require__(34);
var observable_1 = __webpack_require__(20);
exports.Observable = observable_1.Observable;
exports.WrappedValue = observable_1.WrappedValue;
var weak_event_listener_1 = __webpack_require__(40);
var binding_builder_1 = __webpack_require__(41);
var utils_1 = __webpack_require__(14);
var trace_1 = __webpack_require__(15);
exports.traceEnabled = trace_1.isEnabled;
exports.traceWrite = trace_1.write;
exports.traceCategories = trace_1.categories;
exports.traceNotifyEvent = trace_1.notifyEvent;
exports.isCategorySet = trace_1.isCategorySet;
exports.traceMessageType = trace_1.messageType;
var types = __webpack_require__(17);
var application = __webpack_require__(18);
var polymerExpressions = __webpack_require__(42);
var contextKey = "context";
var paramsRegex = /\[\s*(['"])*(\w*)\1\s*\]/;
var bc = binding_builder_1.bindingConstants;
var emptyArray = [];
function getProperties(property) {
var result = emptyArray;
if (property) {
var parentsMatches = property.match(binding_builder_1.parentsRegex);
result = property.replace(binding_builder_1.parentsRegex, "parentsMatch").replace(/\]/g, "").split(/\.|\[/);
var parentsMatchesCounter = 0;
for (var i = 0, resultLength = result.length; i < resultLength; i++) {
if (result[i] === "parentsMatch") {
result[i] = parentsMatches[parentsMatchesCounter++];
}
}
}
return result;
}
function getEventOrGestureName(name) {
return name.indexOf("on") === 0 ? name.substr(2, name.length - 2) : name;
}
exports.getEventOrGestureName = getEventOrGestureName;
function isGesture(eventOrGestureName) {
var t = eventOrGestureName.trim().toLowerCase();
return t === "tap" || t === "doubletap" || t === "pinch" || t === "pan" || t === "swipe" || t === "rotation" || t === "longpress" || t === "touch";
}
exports.isGesture = isGesture;
function isEventOrGesture(name, view) {
if (typeof name === "string") {
var eventOrGestureName = getEventOrGestureName(name);
var evt = eventOrGestureName + "Event";
return view.constructor && evt in view.constructor || isGesture(eventOrGestureName.toLowerCase());
}
return false;
}
exports.isEventOrGesture = isEventOrGesture;
var Binding = function() {
function Binding(target, options) {
this.propertyChangeListeners = new Map();
this.target = new WeakRef(target);
this.options = options;
this.sourceProperties = getProperties(options.sourceProperty);
this.targetOptions = this.resolveOptions(target, getProperties(options.targetProperty));
if (!this.targetOptions) {
throw new Error("Invalid property: " + options.targetProperty + " for target: " + target);
}
if (options.twoWay) {
var target_1 = this.targetOptions.instance.get();
if (target_1 instanceof observable_1.Observable) {
target_1.on(this.targetOptions.property + "Change", this.onTargetPropertyChanged, this);
}
}
}
Binding.prototype.onTargetPropertyChanged = function(data) {
this.updateTwoWay(data.value);
};
Binding.prototype.loadedHandlerVisualTreeBinding = function(args) {
var target = args.object;
target.off("loaded", this.loadedHandlerVisualTreeBinding, this);
var context = target.bindingContext;
if (context !== undefined && context !== null) {
this.update(context);
}
};
Binding.prototype.clearSource = function() {
var _this = this;
this.propertyChangeListeners.forEach(function(observable, index, map) {
weak_event_listener_1.removeWeakEventListener(observable, observable_1.Observable.propertyChangeEvent, _this.onSourcePropertyChanged, _this);
});
this.propertyChangeListeners.clear();
this.sourcesAndProperties = null;
if (this.source) {
this.source.clear();
}
if (this.sourceOptions) {
this.sourceOptions.instance.clear();
this.sourceOptions = undefined;
}
};
Binding.prototype.sourceAsObject = function(source) {
var objectType = typeof source;
if (objectType === "number") {
source = new Number(source);
} else if (objectType === "boolean") {
source = new Boolean(source);
} else if (objectType === "string") {
source = new String(source);
}
return source;
};
Binding.prototype.bindingContextChanged = function(data) {
var target = this.targetOptions.instance.get();
if (!target) {
this.unbind();
return;
}
if (data.value) {
this.update(data.value);
} else {
this.clearBinding();
}
};
Binding.prototype.bind = function(source) {
var target = this.targetOptions.instance.get();
if (this.sourceIsBindingContext && target instanceof observable_1.Observable && this.targetOptions.property !== "bindingContext") {
target.on("bindingContextChange", this.bindingContextChanged, this);
}
this.update(source);
};
Binding.prototype.update = function(source) {
this.clearSource();
source = this.sourceAsObject(source);
if (!types.isNullOrUndefined(source)) {
this.source = new WeakRef(source);
this.sourceOptions = this.resolveOptions(source, this.sourceProperties);
var sourceValue = this.getSourcePropertyValue();
this.updateTarget(sourceValue);
this.addPropertyChangeListeners(this.source, this.sourceProperties);
} else if (!this.sourceIsBindingContext) {
var sourceValue = this.getSourcePropertyValue();
this.updateTarget(sourceValue ? sourceValue : source);
}
};
Binding.prototype.unbind = function() {
var target = this.targetOptions.instance.get();
if (target instanceof observable_1.Observable) {
if (this.options.twoWay) {
target.off(this.targetOptions.property + "Change", this.onTargetPropertyChanged, this);
}
if (this.sourceIsBindingContext && this.targetOptions.property !== "bindingContext") {
target.off("bindingContextChange", this.bindingContextChanged, this);
}
}
if (this.targetOptions) {
this.targetOptions = undefined;
}
this.sourceProperties = undefined;
if (!this.source) {
return;
}
this.clearSource();
};
Binding.prototype.resolveObjectsAndProperties = function(source, properties) {
var result = [];
var currentObject = source;
var currentObjectChanged = false;
for (var i = 0, propsArrayLength = properties.length; i < propsArrayLength; i++) {
var property = properties[i];
if (property === bc.bindingValueKey) {
currentObjectChanged = true;
}
if (property === bc.parentValueKey || property.indexOf(bc.parentsValueKey) === 0) {
var parentView = this.getParentView(this.target.get(), property).view;
if (parentView) {
currentObject = parentView.bindingContext;
} else {
var targetInstance = this.target.get();
targetInstance.off("loaded", this.loadedHandlerVisualTreeBinding, this);
targetInstance.on("loaded", this.loadedHandlerVisualTreeBinding, this);
}
currentObjectChanged = true;
}
if (currentObject) {
result.push({
instance: currentObject,
property: property
});
} else {
break;
}
if (!currentObjectChanged && i < propsArrayLength - 1) {
currentObject = currentObject ? currentObject[properties[i]] : null;
}
currentObjectChanged = false;
}
return result;
};
Binding.prototype.addPropertyChangeListeners = function(source, sourceProperty, parentProperies) {
var objectsAndProperties = this.resolveObjectsAndProperties(source.get(), sourceProperty);
var prop = parentProperies || "";
for (var i = 0, length_1 = objectsAndProperties.length; i < length_1; i++) {
prop += "$" + objectsAndProperties[i].property;
var currentObject = objectsAndProperties[i].instance;
if (!this.propertyChangeListeners.has(prop) && currentObject instanceof observable_1.Observable) {
weak_event_listener_1.addWeakEventListener(currentObject, observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
this.propertyChangeListeners.set(prop, currentObject);
}
}
};
Binding.prototype.prepareExpressionForUpdate = function() {
var escapedSourceProperty = utils_1.escapeRegexSymbols(this.options.sourceProperty);
var expRegex = new RegExp(escapedSourceProperty, "g");
var resultExp = this.options.expression.replace(expRegex, bc.newPropertyValueKey);
return resultExp;
};
Binding.prototype.updateTwoWay = function(value) {
if (this.updating || !this.options.twoWay) {
return;
}
var newValue = value;
if (this.options.expression) {
var changedModel = {};
changedModel[bc.bindingValueKey] = value;
changedModel[bc.newPropertyValueKey] = value;
var sourcePropertyName = "";
if (this.sourceOptions) {
sourcePropertyName = this.sourceOptions.property;
} else if (typeof this.options.sourceProperty === "string" && this.options.sourceProperty.indexOf(".") === -1) {
sourcePropertyName = this.options.sourceProperty;
}
if (sourcePropertyName !== "") {
changedModel[sourcePropertyName] = value;
}
var updateExpression = this.prepareExpressionForUpdate();
this.prepareContextForExpression(changedModel, updateExpression, undefined);
var expressionValue = this._getExpressionValue(updateExpression, true, changedModel);
if (expressionValue instanceof Error) {
trace_1.write(expressionValue.message, trace_1.categories.Binding, trace_1.messageType.error);
}
newValue = expressionValue;
}
this.updateSource(newValue);
};
Binding.prototype._getExpressionValue = function(expression, isBackConvert, changedModel) {
try {
var exp_1 = polymerExpressions.PolymerExpressions.getExpression(expression);
if (exp_1) {
var context = this.source && this.source.get && this.source.get() || global;
var model = {};
var addedProps = [];
var resources = application.getResources();
for (var prop in resources) {
if (resources.hasOwnProperty(prop) && !context.hasOwnProperty(prop)) {
context[prop] = resources[prop];
addedProps.push(prop);
}
}
this.prepareContextForExpression(context, expression, addedProps);
model[contextKey] = context;
var result = exp_1.getValue(model, isBackConvert, changedModel ? changedModel : model);
var addedPropsLength = addedProps.length;
for (var i = 0; i < addedPropsLength; i++) {
delete context[addedProps[i]];
}
addedProps.length = 0;
return result;
}
return new Error(expression + " is not a valid expression.");
} catch (e) {
var errorMessage = "Run-time error occured in file: " + e.sourceURL + " at line: " + e.line + " and column: " + e.column;
return new Error(errorMessage);
}
};
Binding.prototype.onSourcePropertyChanged = function(data) {
var sourceProps = this.sourceProperties;
var sourcePropsLength = sourceProps.length;
var changedPropertyIndex = sourceProps.indexOf(data.propertyName);
var parentProps = "";
if (changedPropertyIndex > -1) {
parentProps = "$" + sourceProps.slice(0, changedPropertyIndex + 1).join("$");
while (this.propertyChangeListeners.get(parentProps) !== data.object) {
changedPropertyIndex += sourceProps.slice(changedPropertyIndex + 1).indexOf(data.propertyName) + 1;
parentProps = "$" + sourceProps.slice(0, changedPropertyIndex + 1).join("$");
}
}
if (this.options.expression) {
var expressionValue = this._getExpressionValue(this.options.expression, false, undefined);
if (expressionValue instanceof Error) {
trace_1.write(expressionValue.message, trace_1.categories.Binding, trace_1.messageType.error);
} else {
this.updateTarget(expressionValue);
}
} else {
if (changedPropertyIndex > -1) {
var props = sourceProps.slice(changedPropertyIndex + 1);
var propsLength = props.length;
if (propsLength > 0) {
var value = data.value;
for (var i = 0; i < propsLength; i++) {
value = value[props[i]];
}
this.updateTarget(value);
} else if (data.propertyName === this.sourceOptions.property) {
this.updateTarget(data.value);
}
}
}
if (changedPropertyIndex > -1 && changedPropertyIndex < sourcePropsLength - 1) {
var probablyChangedObject = this.propertyChangeListeners.get(parentProps);
if (probablyChangedObject && probablyChangedObject !== data.object[sourceProps[changedPropertyIndex]]) {
for (var i = sourcePropsLength - 1; i > changedPropertyIndex; i--) {
var prop = "$" + sourceProps.slice(0, i + 1).join("$");
if (this.propertyChangeListeners.has(prop)) {
weak_event_listener_1.removeWeakEventListener(this.propertyChangeListeners.get(prop), observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
this.propertyChangeListeners.delete(prop);
}
}
var newProps = sourceProps.slice(changedPropertyIndex + 1);
var newObject = data.object[sourceProps[changedPropertyIndex]];
if (!types.isNullOrUndefined(newObject) && typeof newObject === "object") {
this.addPropertyChangeListeners(new WeakRef(newObject), newProps, parentProps);
}
}
}
};
Binding.prototype.prepareContextForExpression = function(model, expression, newProps) {
var parentViewAndIndex;
var parentView;
var addedProps = newProps || [];
if (expression.indexOf(bc.bindingValueKey) > -1) {
model[bc.bindingValueKey] = model;
addedProps.push(bc.bindingValueKey);
}
if (expression.indexOf(bc.parentValueKey) > -1) {
parentView = this.getParentView(this.target.get(), bc.parentValueKey).view;
if (parentView) {
model[bc.parentValueKey] = parentView.bindingContext;
addedProps.push(bc.parentValueKey);
}
}
var parentsArray = expression.match(binding_builder_1.parentsRegex);
if (parentsArray) {
for (var i = 0; i < parentsArray.length; i++) {
parentViewAndIndex = this.getParentView(this.target.get(), parentsArray[i]);
if (parentViewAndIndex.view) {
model[bc.parentsValueKey] = model[bc.parentsValueKey] || {};
model[bc.parentsValueKey][parentViewAndIndex.index] = parentViewAndIndex.view.bindingContext;
addedProps.push(bc.parentsValueKey);
}
}
}
};
Binding.prototype.getSourcePropertyValue = function() {
if (this.options.expression) {
var changedModel = {};
changedModel[bc.bindingValueKey] = this.source ? this.source.get() : undefined;
var expressionValue = this._getExpressionValue(this.options.expression, false, changedModel);
if (expressionValue instanceof Error) {
trace_1.write(expressionValue.message, trace_1.categories.Binding, trace_1.messageType.error);
} else {
return expressionValue;
}
}
if (this.sourceOptions) {
var sourceOptionsInstance = this.sourceOptions.instance.get();
if (this.sourceOptions.property === bc.bindingValueKey) {
return sourceOptionsInstance;
} else if (sourceOptionsInstance instanceof observable_1.Observable && (this.sourceOptions.property && this.sourceOptions.property !== "")) {
return sourceOptionsInstance.get(this.sourceOptions.property);
} else if (sourceOptionsInstance && this.sourceOptions.property && this.sourceOptions.property !== "" && this.sourceOptions.property in sourceOptionsInstance) {
return sourceOptionsInstance[this.sourceOptions.property];
} else {
trace_1.write("Property: '" + this.sourceOptions.property + "' is invalid or does not exist. SourceProperty: '" + this.options.sourceProperty + "'", trace_1.categories.Binding, trace_1.messageType.error);
}
}
return null;
};
Binding.prototype.clearBinding = function() {
this.clearSource();
this.updateTarget(properties_1.unsetValue);
};
Binding.prototype.updateTarget = function(value) {
if (this.updating) {
return;
}
this.updateOptions(this.targetOptions, types.isNullOrUndefined(value) ? properties_1.unsetValue : value);
};
Binding.prototype.updateSource = function(value) {
if (this.updating || !this.source || !this.source.get()) {
return;
}
this.updateOptions(this.sourceOptions, value);
};
Binding.prototype.getParentView = function(target, property) {
if (!target) {
return {
view: null,
index: null
};
}
var result;
if (property === bc.parentValueKey) {
result = target.parent;
}
var index = null;
if (property.indexOf(bc.parentsValueKey) === 0) {
result = target.parent;
var indexParams = paramsRegex.exec(property);
if (indexParams && indexParams.length > 1) {
index = indexParams[2];
}
if (!isNaN(index)) {
var indexAsInt = parseInt(index);
while (indexAsInt > 0) {
result = result.parent;
indexAsInt--;
}
} else if (types.isString(index)) {
while (result && result.typeName !== index) {
result = result.parent;
}
}
}
return {
view: result,
index: index
};
};
Binding.prototype.resolveOptions = function(obj, properties) {
var objectsAndProperties = this.resolveObjectsAndProperties(obj, properties);
if (objectsAndProperties.length > 0) {
var resolvedObj = objectsAndProperties[objectsAndProperties.length - 1].instance;
var prop = objectsAndProperties[objectsAndProperties.length - 1].property;
return {
instance: new WeakRef(this.sourceAsObject(resolvedObj)),
property: prop
};
}
return null;
};
Binding.prototype.updateOptions = function(options, value) {
var optionsInstance;
if (options && options.instance) {
optionsInstance = options.instance.get();
}
if (!optionsInstance) {
return;
}
this.updating = true;
try {
if (isEventOrGesture(options.property, optionsInstance) && types.isFunction(value)) {
optionsInstance.off(options.property, null, optionsInstance.bindingContext);
optionsInstance.on(options.property, value, optionsInstance.bindingContext);
} else if (optionsInstance instanceof observable_1.Observable) {
optionsInstance.set(options.property, value);
} else {
optionsInstance[options.property] = value;
}
} catch (ex) {
trace_1.write("Binding error while setting property " + options.property + " of " + optionsInstance + ": " + ex, trace_1.categories.Binding, trace_1.messageType.error);
}
this.updating = false;
};
return Binding;
}();
exports.Binding = Binding;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var handlersForEventName = new Map();
var sourcesMap = new WeakMap();
var TargetHandlerPair = function() {
function TargetHandlerPair(target, handler) {
this.tagetRef = new WeakRef(target);
this.handler = handler;
}
return TargetHandlerPair;
}();
function getHandlerForEventName(eventName) {
var handler = handlersForEventName.get(eventName);
if (!handler) {
handler = function(eventData) {
var source = eventData.object;
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
source.removeEventListener(eventName, handlersForEventName.get(eventName));
return;
}
var targetHandlerPairList = sourceEventMap.get(eventName);
if (!targetHandlerPairList) {
return;
}
var deadPairsIndexes = [];
for (var i = 0; i < targetHandlerPairList.length; i++) {
var pair = targetHandlerPairList[i];
var target = pair.tagetRef.get();
if (target) {
pair.handler.call(target, eventData);
} else {
deadPairsIndexes.push(i);
}
}
if (deadPairsIndexes.length === targetHandlerPairList.length) {
source.removeEventListener(eventName, handlersForEventName.get(eventName));
sourceEventMap.delete(eventName);
} else {
for (var j = deadPairsIndexes.length - 1; j >= 0; j--) {
targetHandlerPairList.splice(deadPairsIndexes[j], 1);
}
}
};
handlersForEventName.set(eventName, handler);
}
return handler;
}
function validateArgs(source, eventName, handler, target) {
if (!source) {
throw new Error("source is null or undefined");
}
if (!target) {
throw new Error("target is null or undefined");
}
if (typeof eventName !== "string") {
throw new Error("eventName is not a string");
}
if (typeof handler !== "function") {
throw new Error("handler is not a function");
}
}
function addWeakEventListener(source, eventName, handler, target) {
validateArgs(source, eventName, handler, target);
var shouldAttach = false;
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
sourceEventMap = new Map();
sourcesMap.set(source, sourceEventMap);
shouldAttach = true;
}
var pairList = sourceEventMap.get(eventName);
if (!pairList) {
pairList = new Array();
sourceEventMap.set(eventName, pairList);
shouldAttach = true;
}
pairList.push(new TargetHandlerPair(target, handler));
if (shouldAttach) {
source.addEventListener(eventName, getHandlerForEventName(eventName));
}
}
exports.addWeakEventListener = addWeakEventListener;
function removeWeakEventListener(source, eventName, handler, target) {
validateArgs(source, eventName, handler, target);
var handlerForEventWithName = handlersForEventName.get(eventName);
if (!handlerForEventWithName) {
return;
}
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
return;
}
var targetHandlerPairList = sourceEventMap.get(eventName);
if (!targetHandlerPairList) {
return;
}
var targetHandlerPairsToRemove = [];
for (var i = 0; i < targetHandlerPairList.length; i++) {
var pair = targetHandlerPairList[i];
var registeredTarget = pair.tagetRef.get();
if (!registeredTarget || registeredTarget === target && handler === pair.handler) {
targetHandlerPairsToRemove.push(i);
}
}
if (targetHandlerPairsToRemove.length === targetHandlerPairList.length) {
source.removeEventListener(eventName, handlerForEventWithName);
sourceEventMap.delete(eventName);
} else {
for (var j = targetHandlerPairsToRemove.length - 1; j >= 0; j--) {
targetHandlerPairList.splice(targetHandlerPairsToRemove[j], 1);
}
}
}
exports.removeWeakEventListener = removeWeakEventListener;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var expressionSymbolsRegex = /[\+\-\*\/%\?:<>=!\|&\(\)^~]/;
var bindingConstants;
(function(bindingConstants) {
bindingConstants.sourceProperty = "sourceProperty";
bindingConstants.targetProperty = "targetProperty";
bindingConstants.expression = "expression";
bindingConstants.twoWay = "twoWay";
bindingConstants.source = "source";
bindingConstants.bindingValueKey = "$value";
bindingConstants.parentValueKey = "$parent";
bindingConstants.parentsValueKey = "$parents";
bindingConstants.newPropertyValueKey = "$newPropertyValue";
})(bindingConstants = exports.bindingConstants || (exports.bindingConstants = {}));
var hasEqualSignRegex = /=+/;
var equalSignComparisionOperatorsRegex = /(==|===|>=|<=|!=|!==)/;
exports.parentsRegex = /\$parents\s*\[\s*(['"]*)\w*\1\s*\]/g;
function isNamedParam(value) {
var equalSignIndex = value.search(hasEqualSignRegex);
if (equalSignIndex > -1) {
var equalSignSurround = value.substr(equalSignIndex > 0 ? equalSignIndex - 1 : 0, 3);
if (equalSignSurround.search(equalSignComparisionOperatorsRegex) === -1) {
return true;
}
}
return false;
}
function areNamedParams(params) {
var i;
for (i = 0; i < params.length; i++) {
if (isNamedParam(params[i])) {
return true;
}
}
return false;
}
var namedParamConstants = {
propName: "propName",
propValue: "propValue"
};
function getPropertyNameValuePair(param, knownOptions, callback) {
var nameValuePair = {};
var propertyName = param.substr(0, param.indexOf("=")).trim();
var propertyValue = param.substr(param.indexOf("=") + 1).trim();
if (knownOptions) {
if (!propertyName) {
propertyName = knownOptions.defaultProperty;
} else {
propertyName = propertyName in knownOptions ? propertyName : null;
}
}
if (propertyName) {
if (callback) {
nameValuePair = callback(propertyName, propertyValue);
} else {
nameValuePair[namedParamConstants.propName] = propertyName;
nameValuePair[namedParamConstants.propValue] = propertyValue;
}
return nameValuePair;
}
return null;
}
function parseNamedProperties(parameterList, knownOptions, callback) {
var result = {};
var i;
for (i = 0; i < parameterList.length; i++) {
var nameValuePair = getPropertyNameValuePair(parameterList[i], knownOptions, callback);
if (nameValuePair) {
result[nameValuePair[namedParamConstants.propName]] = nameValuePair[namedParamConstants.propValue];
}
}
return result;
}
function getParamsArray(value) {
var result = [];
var i;
var skipComma = 0;
var indexReached = 0;
var singleQuoteBlock, doubleQuoteBlock = false;
for (i = 0; i < value.length; i++) {
if (value[i] === '"') {
doubleQuoteBlock = !doubleQuoteBlock;
}
if (value[i] === "'") {
singleQuoteBlock = !singleQuoteBlock;
}
if (value[i] === "(" || value[i] === "[") {
skipComma++;
}
if (value[i] === ")" || value[i] === "]") {
skipComma--;
}
if (value[i] === "," && skipComma === 0 && !(singleQuoteBlock || doubleQuoteBlock)) {
result.push(value.substr(indexReached, i - indexReached));
indexReached = i + 1;
}
}
result.push(value.substr(indexReached));
return result;
}
function isExpression(expression) {
if (expression.search(expressionSymbolsRegex) > -1) {
var parentsMatches = expression.match(exports.parentsRegex);
if (parentsMatches) {
var restOfExpression = expression.substr(expression.indexOf(parentsMatches[0]) + parentsMatches[0].length);
if (!(restOfExpression.search(expressionSymbolsRegex) > -1)) {
return false;
}
}
return true;
}
return false;
}
function getBindingOptions(name, value) {
var namedParams = [];
var params = getParamsArray(value);
if (!areNamedParams(params)) {
if (params.length === 1) {
var trimmedValue = params[0].trim();
var sourceProp;
if (isExpression(trimmedValue)) {
sourceProp = bindingConstants.bindingValueKey;
namedParams.push(bindingConstants.expression + " = " + trimmedValue);
} else {
sourceProp = trimmedValue;
}
namedParams.push(bindingConstants.sourceProperty + " = " + sourceProp);
namedParams.push(bindingConstants.twoWay + " = true");
} else {
namedParams.push(bindingConstants.sourceProperty + " = " + params[0].trim());
namedParams.push(bindingConstants.expression + " = " + params[1].trim());
var twoWay = params[2] ? params[2].toLowerCase().trim() === "true" : true;
namedParams.push(bindingConstants.twoWay + " = " + twoWay);
}
} else {
namedParams = params;
}
var bindingPropertyHandler = function(prop, value) {
var result = {};
result[namedParamConstants.propName] = prop;
if (prop === bindingConstants.twoWay) {
if (value === "true") {
result[namedParamConstants.propValue] = true;
} else {
result[namedParamConstants.propValue] = false;
}
} else {
result[namedParamConstants.propValue] = value;
}
return result;
};
var bindingOptionsParameters = parseNamedProperties(namedParams, xmlBindingProperties, bindingPropertyHandler);
var bindOptions = {
targetProperty: name
};
for (var prop in bindingOptionsParameters) {
if (bindingOptionsParameters.hasOwnProperty(prop)) {
bindOptions[prop] = bindingOptionsParameters[prop];
}
}
if (bindOptions[bindingConstants.twoWay] === undefined) {
bindOptions[bindingConstants.twoWay] = true;
}
return bindOptions;
}
exports.getBindingOptions = getBindingOptions;
var xmlBindingProperties = {
sourceProperty: true,
expression: true,
twoWay: true,
source: true,
defaultProperty: bindingConstants.sourceProperty
};
}, function(module, exports, __webpack_require__) {
var esprima = __webpack_require__(43).esprima;
var Path = __webpack_require__(44).Path;
(function(global) {
"use strict";
var expressionParseCache = Object.create(null);
function getExpression(expressionText) {
var expression = expressionParseCache[expressionText];
if (!expression) {
var delegate = new ASTDelegate();
esprima.parse(expressionText, delegate);
expression = new Expression(delegate);
expressionParseCache[expressionText] = expression;
}
return expression;
}
function Literal(value) {
this.value = value;
this.valueFn_ = undefined;
}
Literal.prototype = {
valueFn: function() {
if (!this.valueFn_) {
var value = this.value;
this.valueFn_ = function() {
return value;
};
}
return this.valueFn_;
}
};
function IdentPath(name) {
this.name = name;
this.path = Path.get(name);
}
IdentPath.prototype = {
valueFn: function() {
if (!this.valueFn_) {
var name = this.name;
var path = this.path;
this.valueFn_ = function(model, observer, changedModel) {
if (observer) observer.addPath(model, path);
if (changedModel) {
var result = path.getValueFrom(changedModel);
if (result !== undefined) {
return result;
}
}
return path.getValueFrom(model);
};
}
return this.valueFn_;
},
setValue: function(model, newValue) {
if (this.path.length == 1) {
model = findScope(model, this.path[0]);
}
return this.path.setValueFrom(model, newValue);
}
};
function MemberExpression(object, property, accessor) {
this.computed = accessor == "[";
this.dynamicDeps = typeof object == "function" || object.dynamicDeps || this.computed && !(property instanceof Literal);
this.simplePath = !this.dynamicDeps && (property instanceof IdentPath || property instanceof Literal) && (object instanceof MemberExpression || object instanceof IdentPath);
this.object = this.simplePath ? object : getFn(object);
this.property = !this.computed || this.simplePath ? property : getFn(property);
}
MemberExpression.prototype = {
get fullPath() {
if (!this.fullPath_) {
var parts = this.object instanceof MemberExpression ? this.object.fullPath.slice() : [ this.object.name ];
parts.push(this.property instanceof IdentPath ? this.property.name : this.property.value);
this.fullPath_ = Path.get(parts);
}
return this.fullPath_;
},
valueFn: function() {
if (!this.valueFn_) {
var object = this.object;
if (this.simplePath) {
var path = this.fullPath;
this.valueFn_ = function(model, observer) {
if (observer) observer.addPath(model, path);
return path.getValueFrom(model);
};
} else if (!this.computed) {
var path = Path.get(this.property.name);
this.valueFn_ = function(model, observer, filterRegistry) {
var context = object(model, observer, filterRegistry);
if (observer) observer.addPath(context, path);
return path.getValueFrom(context);
};
} else {
var property = this.property;
this.valueFn_ = function(model, observer, filterRegistry) {
var context = object(model, observer, filterRegistry);
var propName = property(model, observer, filterRegistry);
if (observer) observer.addPath(context, [ propName ]);
return context ? context[propName] : undefined;
};
}
}
return this.valueFn_;
},
setValue: function(model, newValue) {
if (this.simplePath) {
this.fullPath.setValueFrom(model, newValue);
return newValue;
}
var object = this.object(model);
var propName = this.property instanceof IdentPath ? this.property.name : this.property(model);
return object[propName] = newValue;
}
};
function Filter(name, args) {
this.name = name;
this.args = [];
for (var i = 0; i < args.length; i++) {
this.args[i] = getFn(args[i]);
}
}
Filter.prototype = {
transform: function(model, observer, filterRegistry, toModelDirection, initialArgs) {
var fn = filterRegistry[this.name];
var context = model;
if (fn) {
context = undefined;
} else {
fn = context[this.name];
if (!fn) {
console.error("Cannot find function or filter: " + this.name);
return;
}
}
if (toModelDirection) {
fn = fn.toModel;
} else if (typeof fn.toView == "function") {
fn = fn.toView;
}
if (typeof fn != "function") {
console.error("Cannot find function or filter: " + this.name);
return;
}
var args = initialArgs || [];
for (var i = 0; i < this.args.length; i++) {
args.push(getFn(this.args[i])(model, observer, filterRegistry));
}
return fn.apply(context, args);
}
};
function notImplemented() {
throw Error("Not Implemented");
}
var unaryOperators = {
"+": function(v) {
return +v;
},
"-": function(v) {
return -v;
},
"!": function(v) {
return !v;
}
};
var binaryOperators = {
"+": function(l, r) {
return l + r;
},
"-": function(l, r) {
return l - r;
},
"*": function(l, r) {
return l * r;
},
"/": function(l, r) {
return l / r;
},
"%": function(l, r) {
return l % r;
},
"<": function(l, r) {
return l < r;
},
">": function(l, r) {
return l > r;
},
"<=": function(l, r) {
return l <= r;
},
">=": function(l, r) {
return l >= r;
},
"==": function(l, r) {
return l == r;
},
"!=": function(l, r) {
return l != r;
},
"===": function(l, r) {
return l === r;
},
"!==": function(l, r) {
return l !== r;
},
"&&": function(l, r) {
return l && r;
},
"||": function(l, r) {
return l || r;
}
};
function getFn(arg) {
return typeof arg == "function" ? arg : arg.valueFn();
}
function ASTDelegate() {
this.expression = null;
this.filters = [];
this.deps = {};
this.currentPath = undefined;
this.scopeIdent = undefined;
this.indexIdent = undefined;
this.dynamicDeps = false;
}
ASTDelegate.prototype = {
createUnaryExpression: function(op, argument) {
if (!unaryOperators[op]) throw Error("Disallowed operator: " + op);
argument = getFn(argument);
return function(model, observer, filterRegistry) {
return unaryOperators[op](argument(model, observer, filterRegistry));
};
},
createBinaryExpression: function(op, left, right) {
if (!binaryOperators[op]) throw Error("Disallowed operator: " + op);
left = getFn(left);
right = getFn(right);
switch (op) {
case "||":
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return left(model, observer, filterRegistry) || right(model, observer, filterRegistry);
};

case "&&":
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return left(model, observer, filterRegistry) && right(model, observer, filterRegistry);
};
}
return function(model, observer, filterRegistry) {
return binaryOperators[op](left(model, observer, filterRegistry), right(model, observer, filterRegistry));
};
},
createConditionalExpression: function(test, consequent, alternate) {
test = getFn(test);
consequent = getFn(consequent);
alternate = getFn(alternate);
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return test(model, observer, filterRegistry) ? consequent(model, observer, filterRegistry) : alternate(model, observer, filterRegistry);
};
},
createIdentifier: function(name) {
var ident = new IdentPath(name);
ident.type = "Identifier";
return ident;
},
createMemberExpression: function(accessor, object, property) {
var ex = new MemberExpression(object, property, accessor);
if (ex.dynamicDeps) this.dynamicDeps = true;
return ex;
},
createCallExpression: function(expression, args) {
if (!(expression instanceof IdentPath)) throw Error("Only identifier function invocations are allowed");
var filter = new Filter(expression.name, args);
return function(model, observer, filterRegistry) {
return filter.transform(model, observer, filterRegistry, false);
};
},
createLiteral: function(token) {
return new Literal(token.value);
},
createArrayExpression: function(elements) {
for (var i = 0; i < elements.length; i++) elements[i] = getFn(elements[i]);
return function(model, observer, filterRegistry) {
var arr = [];
for (var i = 0; i < elements.length; i++) arr.push(elements[i](model, observer, filterRegistry));
return arr;
};
},
createProperty: function(kind, key, value) {
return {
key: key instanceof IdentPath ? key.name : key.value,
value: value
};
},
createObjectExpression: function(properties) {
for (var i = 0; i < properties.length; i++) properties[i].value = getFn(properties[i].value);
return function(model, observer, filterRegistry) {
var obj = {};
for (var i = 0; i < properties.length; i++) obj[properties[i].key] = properties[i].value(model, observer, filterRegistry);
return obj;
};
},
createFilter: function(name, args) {
this.filters.push(new Filter(name, args));
},
createAsExpression: function(expression, scopeIdent) {
this.expression = expression;
this.scopeIdent = scopeIdent;
},
createInExpression: function(scopeIdent, indexIdent, expression) {
this.expression = expression;
this.scopeIdent = scopeIdent;
this.indexIdent = indexIdent;
},
createTopLevel: function(expression) {
this.expression = expression;
},
createThisExpression: notImplemented
};
function Expression(delegate) {
this.scopeIdent = delegate.scopeIdent;
this.indexIdent = delegate.indexIdent;
if (!delegate.expression) throw Error("No expression found.");
this.expression = delegate.expression;
getFn(this.expression);
this.filters = delegate.filters;
this.dynamicDeps = delegate.dynamicDeps;
}
Expression.prototype = {
getValue: function(model, isBackConvert, changedModel, observer) {
var value = getFn(this.expression)(model.context, observer, changedModel);
for (var i = 0; i < this.filters.length; i++) {
value = this.filters[i].transform(model.context, observer, model.context, isBackConvert, [ value ]);
}
return value;
},
setValue: function(model, newValue, filterRegistry) {
var count = this.filters ? this.filters.length : 0;
while (count-- > 0) {
newValue = this.filters[count].transform(model, undefined, filterRegistry, true, [ newValue ]);
}
if (this.expression.setValue) return this.expression.setValue(model, newValue);
}
};
function convertStylePropertyName(name) {
return String(name).replace(/[A-Z]/g, function(c) {
return "-" + c.toLowerCase();
});
}
var parentScopeName = "@" + Math.random().toString(36).slice(2);
function findScope(model, prop) {
while (model[parentScopeName] && !Object.prototype.hasOwnProperty.call(model, prop)) {
model = model[parentScopeName];
}
return model;
}
function isLiteralExpression(pathString) {
switch (pathString) {
case "":
return false;

case "false":
case "null":
case "true":
return true;
}
if (!isNaN(Number(pathString))) return true;
return false;
}
function PolymerExpressions() {}
PolymerExpressions.prototype = {
styleObject: function(value) {
var parts = [];
for (var key in value) {
parts.push(convertStylePropertyName(key) + ": " + value[key]);
}
return parts.join("; ");
},
tokenList: function(value) {
var tokens = [];
for (var key in value) {
if (value[key]) tokens.push(key);
}
return tokens.join(" ");
},
prepareInstancePositionChanged: function(template) {
var indexIdent = template.polymerExpressionIndexIdent_;
if (!indexIdent) return;
return function(templateInstance, index) {
templateInstance.model[indexIdent] = index;
};
},
prepareInstanceModel: function(template) {
var scopeName = template.polymerExpressionScopeIdent_;
if (!scopeName) return;
var parentScope = template.templateInstance ? template.templateInstance.model : template.model;
var indexName = template.polymerExpressionIndexIdent_;
return function(model) {
return createScopeObject(parentScope, model, scopeName, indexName);
};
}
};
var createScopeObject = "__proto__" in {} ? function(parentScope, model, scopeName, indexName) {
var scope = {};
scope[scopeName] = model;
scope[indexName] = undefined;
scope[parentScopeName] = parentScope;
scope.__proto__ = parentScope;
return scope;
} : function(parentScope, model, scopeName, indexName) {
var scope = Object.create(parentScope);
Object.defineProperty(scope, scopeName, {
value: model,
configurable: true,
writable: true
});
Object.defineProperty(scope, indexName, {
value: undefined,
configurable: true,
writable: true
});
Object.defineProperty(scope, parentScopeName, {
value: parentScope,
configurable: true,
writable: true
});
return scope;
};
global.PolymerExpressions = PolymerExpressions;
PolymerExpressions.getExpression = getExpression;
})(module.exports);
}, function(module, exports) {
(function(global) {
"use strict";
var Token, TokenName, Syntax, Messages, source, index, length, delegate, lookahead, state;
Token = {
BooleanLiteral: 1,
EOF: 2,
Identifier: 3,
Keyword: 4,
NullLiteral: 5,
NumericLiteral: 6,
Punctuator: 7,
StringLiteral: 8
};
TokenName = {};
TokenName[Token.BooleanLiteral] = "Boolean";
TokenName[Token.EOF] = "<end>";
TokenName[Token.Identifier] = "Identifier";
TokenName[Token.Keyword] = "Keyword";
TokenName[Token.NullLiteral] = "Null";
TokenName[Token.NumericLiteral] = "Numeric";
TokenName[Token.Punctuator] = "Punctuator";
TokenName[Token.StringLiteral] = "String";
Syntax = {
ArrayExpression: "ArrayExpression",
BinaryExpression: "BinaryExpression",
CallExpression: "CallExpression",
ConditionalExpression: "ConditionalExpression",
EmptyStatement: "EmptyStatement",
ExpressionStatement: "ExpressionStatement",
Identifier: "Identifier",
Literal: "Literal",
LabeledStatement: "LabeledStatement",
LogicalExpression: "LogicalExpression",
MemberExpression: "MemberExpression",
ObjectExpression: "ObjectExpression",
Program: "Program",
Property: "Property",
ThisExpression: "ThisExpression",
UnaryExpression: "UnaryExpression"
};
Messages = {
UnexpectedToken: "Unexpected token %0",
UnknownLabel: "Undefined label '%0'",
Redeclaration: "%0 '%1' has already been declared"
};
function assert(condition, message) {
if (!condition) {
throw new Error("ASSERT: " + message);
}
}
function isDecimalDigit(ch) {
return ch >= 48 && ch <= 57;
}
function isWhiteSpace(ch) {
return ch === 32 || ch === 9 || ch === 11 || ch === 12 || ch === 160 || ch >= 5760 && " ᠎             　\ufeff".indexOf(String.fromCharCode(ch)) > 0;
}
function isLineTerminator(ch) {
return ch === 10 || ch === 13 || ch === 8232 || ch === 8233;
}
function isIdentifierStart(ch) {
return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
}
function isIdentifierPart(ch) {
return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 48 && ch <= 57;
}
function isKeyword(id) {
return id === "this";
}
function skipWhitespace() {
while (index < length && isWhiteSpace(source.charCodeAt(index))) {
++index;
}
}
function getIdentifier() {
var start, ch;
start = index++;
while (index < length) {
ch = source.charCodeAt(index);
if (isIdentifierPart(ch)) {
++index;
} else {
break;
}
}
return source.slice(start, index);
}
function scanIdentifier() {
var start, id, type;
start = index;
id = getIdentifier();
if (id.length === 1) {
type = Token.Identifier;
} else if (isKeyword(id)) {
type = Token.Keyword;
} else if (id === "null") {
type = Token.NullLiteral;
} else if (id === "true" || id === "false") {
type = Token.BooleanLiteral;
} else {
type = Token.Identifier;
}
return {
type: type,
value: id,
range: [ start, index ]
};
}
function scanPunctuator() {
var start = index, code = source.charCodeAt(index), code2, ch1 = source[index], ch2;
switch (code) {
case 46:
case 40:
case 41:
case 59:
case 44:
case 123:
case 125:
case 91:
case 93:
case 58:
case 63:
++index;
return {
type: Token.Punctuator,
value: String.fromCharCode(code),
range: [ start, index ]
};

default:
code2 = source.charCodeAt(index + 1);
if (code2 === 61) {
switch (code) {
case 37:
case 38:
case 42:
case 43:
case 45:
case 47:
case 60:
case 62:
case 124:
index += 2;
return {
type: Token.Punctuator,
value: String.fromCharCode(code) + String.fromCharCode(code2),
range: [ start, index ]
};

case 33:
case 61:
index += 2;
if (source.charCodeAt(index) === 61) {
++index;
}
return {
type: Token.Punctuator,
value: source.slice(start, index),
range: [ start, index ]
};

default:
break;
}
}
break;
}
ch2 = source[index + 1];
if (ch1 === ch2 && "&|".indexOf(ch1) >= 0) {
index += 2;
return {
type: Token.Punctuator,
value: ch1 + ch2,
range: [ start, index ]
};
}
if ("<>=!+-*%&|^/".indexOf(ch1) >= 0) {
++index;
return {
type: Token.Punctuator,
value: ch1,
range: [ start, index ]
};
}
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
function scanNumericLiteral() {
var number, start, ch;
ch = source[index];
assert(isDecimalDigit(ch.charCodeAt(0)) || ch === ".", "Numeric literal must start with a decimal digit or a decimal point");
start = index;
number = "";
if (ch !== ".") {
number = source[index++];
ch = source[index];
if (number === "0") {
if (ch && isDecimalDigit(ch.charCodeAt(0))) {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
}
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
ch = source[index];
}
if (ch === ".") {
number += source[index++];
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
ch = source[index];
}
if (ch === "e" || ch === "E") {
number += source[index++];
ch = source[index];
if (ch === "+" || ch === "-") {
number += source[index++];
}
if (isDecimalDigit(source.charCodeAt(index))) {
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
} else {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
}
if (isIdentifierStart(source.charCodeAt(index))) {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
return {
type: Token.NumericLiteral,
value: parseFloat(number),
range: [ start, index ]
};
}
function scanStringLiteral() {
var str = "", quote, start, ch, octal = false;
quote = source[index];
assert(quote === "'" || quote === '"', "String literal must starts with a quote");
start = index;
++index;
while (index < length) {
ch = source[index++];
if (ch === quote) {
quote = "";
break;
} else if (ch === "\\") {
ch = source[index++];
if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
switch (ch) {
case "n":
str += "\n";
break;

case "r":
str += "\r";
break;

case "t":
str += "\t";
break;

case "b":
str += "\b";
break;

case "f":
str += "\f";
break;

case "v":
str += "\v";
break;

default:
str += ch;
break;
}
} else {
if (ch === "\r" && source[index] === "\n") {
++index;
}
}
} else if (isLineTerminator(ch.charCodeAt(0))) {
break;
} else {
str += ch;
}
}
if (quote !== "") {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
return {
type: Token.StringLiteral,
value: str,
octal: octal,
range: [ start, index ]
};
}
function isIdentifierName(token) {
return token.type === Token.Identifier || token.type === Token.Keyword || token.type === Token.BooleanLiteral || token.type === Token.NullLiteral;
}
function advance() {
var ch;
skipWhitespace();
if (index >= length) {
return {
type: Token.EOF,
range: [ index, index ]
};
}
ch = source.charCodeAt(index);
if (ch === 40 || ch === 41 || ch === 58) {
return scanPunctuator();
}
if (ch === 39 || ch === 34) {
return scanStringLiteral();
}
if (isIdentifierStart(ch)) {
return scanIdentifier();
}
if (ch === 46) {
if (isDecimalDigit(source.charCodeAt(index + 1))) {
return scanNumericLiteral();
}
return scanPunctuator();
}
if (isDecimalDigit(ch)) {
return scanNumericLiteral();
}
return scanPunctuator();
}
function lex() {
var token;
token = lookahead;
index = token.range[1];
lookahead = advance();
index = token.range[1];
return token;
}
function peek() {
var pos;
pos = index;
lookahead = advance();
index = pos;
}
function throwError(token, messageFormat) {
var error, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, function(whole, index) {
assert(index < args.length, "Message reference must be in range");
return args[index];
});
error = new Error(msg);
error.index = index;
error.description = msg;
throw error;
}
function throwUnexpected(token) {
throwError(token, Messages.UnexpectedToken, token.value);
}
function expect(value) {
var token = lex();
if (token.type !== Token.Punctuator || token.value !== value) {
throwUnexpected(token);
}
}
function match(value) {
return lookahead.type === Token.Punctuator && lookahead.value === value;
}
function matchKeyword(keyword) {
return lookahead.type === Token.Keyword && lookahead.value === keyword;
}
function consumeSemicolon() {
if (source.charCodeAt(index) === 59) {
lex();
return;
}
skipWhitespace();
if (match(";")) {
lex();
return;
}
if (lookahead.type !== Token.EOF && !match("}")) {
throwUnexpected(lookahead);
}
}
function parseArrayInitialiser() {
var elements = [];
expect("[");
while (!match("]")) {
if (match(",")) {
lex();
elements.push(null);
} else {
elements.push(parseExpression());
if (!match("]")) {
expect(",");
}
}
}
expect("]");
return delegate.createArrayExpression(elements);
}
function parseObjectPropertyKey() {
var token;
skipWhitespace();
token = lex();
if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
return delegate.createLiteral(token);
}
return delegate.createIdentifier(token.value);
}
function parseObjectProperty() {
var token, key;
token = lookahead;
skipWhitespace();
if (token.type === Token.EOF || token.type === Token.Punctuator) {
throwUnexpected(token);
}
key = parseObjectPropertyKey();
expect(":");
return delegate.createProperty("init", key, parseExpression());
}
function parseObjectInitialiser() {
var properties = [];
expect("{");
while (!match("}")) {
properties.push(parseObjectProperty());
if (!match("}")) {
expect(",");
}
}
expect("}");
return delegate.createObjectExpression(properties);
}
function parseGroupExpression() {
var expr;
expect("(");
expr = parseExpression();
expect(")");
return expr;
}
function parsePrimaryExpression() {
var type, token, expr;
if (match("(")) {
return parseGroupExpression();
}
type = lookahead.type;
if (type === Token.Identifier) {
expr = delegate.createIdentifier(lex().value);
} else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
expr = delegate.createLiteral(lex());
} else if (type === Token.Keyword) {
if (matchKeyword("this")) {
lex();
expr = delegate.createThisExpression();
}
} else if (type === Token.BooleanLiteral) {
token = lex();
token.value = token.value === "true";
expr = delegate.createLiteral(token);
} else if (type === Token.NullLiteral) {
token = lex();
token.value = null;
expr = delegate.createLiteral(token);
} else if (match("[")) {
expr = parseArrayInitialiser();
} else if (match("{")) {
expr = parseObjectInitialiser();
}
if (expr) {
return expr;
}
throwUnexpected(lex());
}
function parseArguments() {
var args = [];
expect("(");
if (!match(")")) {
while (index < length) {
args.push(parseExpression());
if (match(")")) {
break;
}
expect(",");
}
}
expect(")");
return args;
}
function parseNonComputedProperty() {
var token;
token = lex();
if (!isIdentifierName(token)) {
throwUnexpected(token);
}
return delegate.createIdentifier(token.value);
}
function parseNonComputedMember() {
expect(".");
return parseNonComputedProperty();
}
function parseComputedMember() {
var expr;
expect("[");
expr = parseExpression();
expect("]");
return expr;
}
function parseLeftHandSideExpression() {
var expr, args, property;
expr = parsePrimaryExpression();
while (true) {
if (match("[")) {
property = parseComputedMember();
expr = delegate.createMemberExpression("[", expr, property);
} else if (match(".")) {
property = parseNonComputedMember();
expr = delegate.createMemberExpression(".", expr, property);
} else if (match("(")) {
args = parseArguments();
expr = delegate.createCallExpression(expr, args);
} else {
break;
}
}
return expr;
}
var parsePostfixExpression = parseLeftHandSideExpression;
function parseUnaryExpression() {
var token, expr;
if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
expr = parsePostfixExpression();
} else if (match("+") || match("-") || match("!")) {
token = lex();
expr = parseUnaryExpression();
expr = delegate.createUnaryExpression(token.value, expr);
} else if (matchKeyword("delete") || matchKeyword("void") || matchKeyword("typeof")) {
throwError({}, Messages.UnexpectedToken);
} else {
expr = parsePostfixExpression();
}
return expr;
}
function binaryPrecedence(token) {
var prec = 0;
if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
return 0;
}
switch (token.value) {
case "||":
prec = 1;
break;

case "&&":
prec = 2;
break;

case "==":
case "!=":
case "===":
case "!==":
prec = 6;
break;

case "<":
case ">":
case "<=":
case ">=":
case "instanceof":
prec = 7;
break;

case "in":
prec = 7;
break;

case "+":
case "-":
prec = 9;
break;

case "*":
case "/":
case "%":
prec = 11;
break;

default:
break;
}
return prec;
}
function parseBinaryExpression() {
var expr, token, prec, stack, right, operator, left, i;
left = parseUnaryExpression();
token = lookahead;
prec = binaryPrecedence(token);
if (prec === 0) {
return left;
}
token.prec = prec;
lex();
right = parseUnaryExpression();
stack = [ left, token, right ];
while ((prec = binaryPrecedence(lookahead)) > 0) {
while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {
right = stack.pop();
operator = stack.pop().value;
left = stack.pop();
expr = delegate.createBinaryExpression(operator, left, right);
stack.push(expr);
}
token = lex();
token.prec = prec;
stack.push(token);
expr = parseUnaryExpression();
stack.push(expr);
}
i = stack.length - 1;
expr = stack[i];
while (i > 1) {
expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
i -= 2;
}
return expr;
}
function parseConditionalExpression() {
var expr, consequent, alternate;
expr = parseBinaryExpression();
if (match("?")) {
lex();
consequent = parseConditionalExpression();
expect(":");
alternate = parseConditionalExpression();
expr = delegate.createConditionalExpression(expr, consequent, alternate);
}
return expr;
}
var parseExpression = parseConditionalExpression;
function parseFilter() {
var identifier, args;
identifier = lex();
if (identifier.type !== Token.Identifier) {
throwUnexpected(identifier);
}
args = match("(") ? parseArguments() : [];
return delegate.createFilter(identifier.value, args);
}
function parseFilters() {
while (match("|")) {
lex();
parseFilter();
}
}
function parseTopLevel() {
skipWhitespace();
peek();
var expr = parseExpression();
if (expr) {
if (lookahead.value === "," || lookahead.value == "in" && expr.type === Syntax.Identifier) {
parseInExpression(expr);
} else {
parseFilters();
if (lookahead.value === "as") {
parseAsExpression(expr);
} else {
delegate.createTopLevel(expr);
}
}
}
if (lookahead.type !== Token.EOF) {
throwUnexpected(lookahead);
}
}
function parseAsExpression(expr) {
lex();
var identifier = lex().value;
delegate.createAsExpression(expr, identifier);
}
function parseInExpression(identifier) {
var indexName;
if (lookahead.value === ",") {
lex();
if (lookahead.type !== Token.Identifier) throwUnexpected(lookahead);
indexName = lex().value;
}
lex();
var expr = parseExpression();
parseFilters();
delegate.createInExpression(identifier.name, indexName, expr);
}
function parse(code, inDelegate) {
delegate = inDelegate;
source = code;
index = 0;
length = source.length;
lookahead = null;
state = {
labelSet: {}
};
return parseTopLevel();
}
global.esprima = {
parse: parse
};
})(module.exports);
}, function(module, exports) {
"use strict";
function detectEval() {
if (typeof chrome !== "undefined" && chrome.app && chrome.app.runtime) {
return false;
}
if (typeof navigator != "undefined" && navigator.getDeviceStorage) {
return false;
}
try {
var f = new Function("", "return true;");
return f();
} catch (ex) {
return false;
}
}
var hasEval = detectEval();
function isIndex(s) {
return +s === s >>> 0 && s !== "";
}
function toNumber(s) {
return +s;
}
function isObject(obj) {
return obj === Object(obj);
}
var numberIsNaN = Number.isNaN || function(value) {
return typeof value === "number" && isNaN(value);
};
function areSameValue(left, right) {
if (left === right) return left !== 0 || 1 / left === 1 / right;
if (numberIsNaN(left) && numberIsNaN(right)) return true;
return left !== left && right !== right;
}
var createObject = "__proto__" in {} ? function(obj) {
return obj;
} : function(obj) {
var proto = obj.__proto__;
if (!proto) return obj;
var newObject = Object.create(proto);
Object.getOwnPropertyNames(obj).forEach(function(name) {
Object.defineProperty(newObject, name, Object.getOwnPropertyDescriptor(obj, name));
});
return newObject;
};
var identStart = "[$_a-zA-Z]";
var identPart = "[$_a-zA-Z0-9]";
var identRegExp = new RegExp("^" + identStart + "+" + identPart + "*" + "$");
function getPathCharType(char) {
if (char === undefined) return "eof";
var code = char.charCodeAt(0);
switch (code) {
case 91:
case 93:
case 46:
case 34:
case 39:
case 48:
return char;

case 95:
case 36:
return "ident";

case 32:
case 9:
case 10:
case 13:
case 160:
case 65279:
case 8232:
case 8233:
return "ws";
}
if (97 <= code && code <= 122 || 65 <= code && code <= 90) return "ident";
if (49 <= code && code <= 57) return "number";
return "else";
}
var pathStateMachine = {
beforePath: {
ws: [ "beforePath" ],
ident: [ "inIdent", "append" ],
"[": [ "beforeElement" ],
eof: [ "afterPath" ]
},
inPath: {
ws: [ "inPath" ],
".": [ "beforeIdent" ],
"[": [ "beforeElement" ],
eof: [ "afterPath" ]
},
beforeIdent: {
ws: [ "beforeIdent" ],
ident: [ "inIdent", "append" ]
},
inIdent: {
ident: [ "inIdent", "append" ],
0: [ "inIdent", "append" ],
number: [ "inIdent", "append" ],
ws: [ "inPath", "push" ],
".": [ "beforeIdent", "push" ],
"[": [ "beforeElement", "push" ],
eof: [ "afterPath", "push" ]
},
beforeElement: {
ws: [ "beforeElement" ],
0: [ "afterZero", "append" ],
number: [ "inIndex", "append" ],
"'": [ "inSingleQuote", "append", "" ],
'"': [ "inDoubleQuote", "append", "" ]
},
afterZero: {
ws: [ "afterElement", "push" ],
"]": [ "inPath", "push" ]
},
inIndex: {
0: [ "inIndex", "append" ],
number: [ "inIndex", "append" ],
ws: [ "afterElement" ],
"]": [ "inPath", "push" ]
},
inSingleQuote: {
"'": [ "afterElement" ],
eof: [ "error" ],
else: [ "inSingleQuote", "append" ]
},
inDoubleQuote: {
'"': [ "afterElement" ],
eof: [ "error" ],
else: [ "inDoubleQuote", "append" ]
},
afterElement: {
ws: [ "afterElement" ],
"]": [ "inPath", "push" ]
}
};
function noop() {}
function parsePath(path) {
var keys = [];
var index = -1;
var c, newChar, key, type, transition, action, typeMap, mode = "beforePath";
var actions = {
push: function() {
if (key === undefined) return;
keys.push(key);
key = undefined;
},
append: function() {
if (key === undefined) key = newChar; else key += newChar;
}
};
function maybeUnescapeQuote() {
if (index >= path.length) return;
var nextChar = path[index + 1];
if (mode == "inSingleQuote" && nextChar == "'" || mode == "inDoubleQuote" && nextChar == '"') {
index++;
newChar = nextChar;
actions.append();
return true;
}
}
while (mode) {
index++;
c = path[index];
if (c == "\\" && maybeUnescapeQuote(mode)) continue;
type = getPathCharType(c);
typeMap = pathStateMachine[mode];
transition = typeMap[type] || typeMap["else"] || "error";
if (transition == "error") return;
mode = transition[0];
action = actions[transition[1]] || noop;
newChar = transition[2] === undefined ? c : transition[2];
action();
if (mode === "afterPath") {
return keys;
}
}
return;
}
function isIdent(s) {
return identRegExp.test(s);
}
var constructorIsPrivate = {};
function Path(parts, privateToken) {
if (privateToken !== constructorIsPrivate) throw Error("Use Path.get to retrieve path objects");
for (var i = 0; i < parts.length; i++) {
this.push(String(parts[i]));
}
if (hasEval && this.length) {
this.getValueFrom = this.compiledGetValueFromFn();
}
}
var pathCache = {};
function getPath(pathString) {
if (pathString instanceof Path) return pathString;
if (pathString == null || pathString.length == 0) pathString = "";
if (typeof pathString != "string") {
if (isIndex(pathString.length)) {
return new Path(pathString, constructorIsPrivate);
}
pathString = String(pathString);
}
var path = pathCache[pathString];
if (path) return path;
var parts = parsePath(pathString);
if (!parts) return invalidPath;
var path = new Path(parts, constructorIsPrivate);
pathCache[pathString] = path;
return path;
}
Path.get = getPath;
function formatAccessor(key) {
if (isIndex(key)) {
return "[" + key + "]";
} else {
return '["' + key.replace(/"/g, '\\"') + '"]';
}
}
Path.prototype = createObject({
__proto__: [],
valid: true,
toString: function() {
var pathString = "";
for (var i = 0; i < this.length; i++) {
var key = this[i];
if (isIdent(key)) {
pathString += i ? "." + key : key;
} else {
pathString += formatAccessor(key);
}
}
return pathString;
},
getValueFrom: function(obj, directObserver) {
for (var i = 0; i < this.length; i++) {
if (obj == null) return;
obj = obj[this[i]];
}
return obj;
},
iterateObjects: function(obj, observe) {
for (var i = 0; i < this.length; i++) {
if (i) obj = obj[this[i - 1]];
if (!isObject(obj)) return;
observe(obj, this[i]);
}
},
compiledGetValueFromFn: function() {
var str = "";
var pathString = "obj";
str += "if (obj != null";
var i = 0;
var key;
for (;i < this.length - 1; i++) {
key = this[i];
pathString += isIdent(key) ? "." + key : formatAccessor(key);
str += " &&\n     " + pathString + " != null";
}
str += ")\n";
var key = this[i];
pathString += isIdent(key) ? "." + key : formatAccessor(key);
str += "  return " + pathString + ";\nelse\n  return undefined;";
return new Function("obj", str);
},
setValueFrom: function(obj, value) {
if (!this.length) return false;
for (var i = 0; i < this.length - 1; i++) {
if (!isObject(obj)) return false;
obj = obj[this[i]];
}
if (!isObject(obj)) return false;
obj[this[i]] = value;
return true;
}
});
var invalidPath = new Path("", constructorIsPrivate);
invalidPath.valid = false;
invalidPath.getValueFrom = invalidPath.setValueFrom = function() {};
exports.Path = Path;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var properties_1 = __webpack_require__(34);
var css_1 = __webpack_require__(46);
var css_selector_1 = __webpack_require__(48);
var trace_1 = __webpack_require__(15);
var file_system_1 = __webpack_require__(22);
var application = __webpack_require__(18);
var keyframeAnimationModule;
function ensureKeyframeAnimationModule() {
if (!keyframeAnimationModule) {
keyframeAnimationModule = __webpack_require__(50);
}
}
var cssAnimationParserModule;
function ensureCssAnimationParserModule() {
if (!cssAnimationParserModule) {
cssAnimationParserModule = __webpack_require__(54);
}
}
function mergeCssSelectors() {
applicationCssSelectors = applicationSelectors.slice();
applicationCssSelectors.push.apply(applicationCssSelectors, applicationAdditionalSelectors);
applicationCssSelectorVersion++;
}
exports.mergeCssSelectors = mergeCssSelectors;
var applicationCssSelectors = [];
var applicationCssSelectorVersion = 0;
var applicationSelectors = [];
var applicationAdditionalSelectors = [];
var applicationKeyframes = {};
var animationsSymbol = Symbol("animations");
var pattern = /('|")(.*?)\1/;
function onCssChanged(args) {
if (args.cssText) {
var parsed = createSelectorsFromCss(args.cssText, args.cssFile, applicationKeyframes);
if (parsed) {
applicationAdditionalSelectors.push.apply(applicationAdditionalSelectors, parsed);
mergeCssSelectors();
}
} else if (args.cssFile) {
loadCss(args.cssFile);
}
}
function onLiveSync(args) {
loadCss(application.getCssFileName());
}
function loadCss(cssFile) {
if (!cssFile) {
return undefined;
}
var result;
var cssFileName = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, cssFile);
if (file_system_1.File.exists(cssFileName)) {
var file = file_system_1.File.fromPath(cssFileName);
var applicationCss = file.readTextSync();
if (applicationCss) {
result = createSelectorsFromCss(applicationCss, cssFileName, applicationKeyframes);
applicationSelectors = result;
mergeCssSelectors();
}
}
}
application.on("cssChanged", onCssChanged);
application.on("livesync", onLiveSync);
function loadCssOnLaunch() {
loadCss(application.getCssFileName());
application.off("launch", loadCssOnLaunch);
}
if (application.hasLaunched()) {
loadCssOnLaunch();
} else {
application.on("launch", loadCssOnLaunch);
}
var CssState = function() {
function CssState(view, match) {
this.view = view;
this.match = match;
}
Object.defineProperty(CssState.prototype, "changeMap", {
get: function() {
return this.match.changeMap;
},
enumerable: true,
configurable: true
});
CssState.prototype.apply = function() {
var _this = this;
this.view._cancelAllAnimations();
properties_1.resetCSSProperties(this.view.style);
var matchingSelectors = this.match.selectors.filter(function(sel) {
return sel.dynamic ? sel.match(_this.view) : true;
});
if (this.view.inlineStyleSelector) {
matchingSelectors.push(this.view.inlineStyleSelector);
}
matchingSelectors.forEach(function(s) {
return _this.applyDescriptors(s.ruleset);
});
this._pendingKeyframeAnimations = matchingSelectors;
this.playPendingKeyframeAnimations();
};
CssState.prototype.playPendingKeyframeAnimations = function() {
var _this = this;
if (this._pendingKeyframeAnimations && this.view.nativeView) {
this._pendingKeyframeAnimations.forEach(function(s) {
return _this.playKeyframeAnimationsFromRuleSet(s.ruleset);
});
this._pendingKeyframeAnimations = null;
}
};
CssState.prototype.applyDescriptors = function(ruleset) {
var _this = this;
var style = this.view.style;
ruleset.declarations.forEach(function(d) {
try {
var cssPropName = "css:" + d.property;
if (cssPropName in style) {
style[cssPropName] = d.value;
} else {
_this.view[d.property] = d.value;
}
} catch (e) {
trace_1.write("Failed to apply property [" + d.property + "] with value [" + d.value + "] to " + _this.view + ". " + e, trace_1.categories.Error, trace_1.messageType.error);
}
});
};
CssState.prototype.playKeyframeAnimationsFromRuleSet = function(ruleset) {
var _this = this;
var ruleAnimations = ruleset[animationsSymbol];
if (ruleAnimations) {
ensureKeyframeAnimationModule();
var _loop_1 = function(animationInfo) {
var animation = keyframeAnimationModule.KeyframeAnimation.keyframeAnimationFromInfo(animationInfo);
if (animation) {
this_1.view._registerAnimation(animation);
animation.play(this_1.view).then(function() {
_this.view._unregisterAnimation(animation);
}).catch(function(e) {
_this.view._unregisterAnimation(animation);
});
}
};
var this_1 = this;
for (var _i = 0, ruleAnimations_1 = ruleAnimations; _i < ruleAnimations_1.length; _i++) {
var animationInfo = ruleAnimations_1[_i];
_loop_1(animationInfo);
}
}
};
return CssState;
}();
exports.CssState = CssState;
var StyleScope = function() {
function StyleScope() {
this._statesByKey = {};
this._viewIdToKey = {};
this._css = "";
this._localCssSelectors = [];
this._localCssSelectorVersion = 0;
this._localCssSelectorsAppliedVersion = 0;
this._applicationCssSelectorsAppliedVersion = 0;
this._keyframes = {};
}
Object.defineProperty(StyleScope.prototype, "css", {
get: function() {
return this._css;
},
set: function(value) {
this._cssFileName = undefined;
this.setCss(value);
},
enumerable: true,
configurable: true
});
StyleScope.prototype.addCss = function(cssString, cssFileName) {
this.appendCss(cssString, cssFileName);
};
StyleScope.prototype.setCss = function(cssString, cssFileName) {
this._css = cssString;
this._reset();
this._localCssSelectors = createSelectorsFromCss(this._css, cssFileName, this._keyframes);
this._localCssSelectorVersion++;
this.ensureSelectors();
};
StyleScope.prototype.appendCss = function(cssString, cssFileName) {
if (!cssString) {
return;
}
this._css = this._css + cssString;
this._reset();
var parsedCssSelectors = createSelectorsFromCss(cssString, cssFileName, this._keyframes);
this._localCssSelectors.push.apply(this._localCssSelectors, parsedCssSelectors);
this._localCssSelectorVersion++;
this.ensureSelectors();
};
StyleScope.prototype.getKeyframeAnimationWithName = function(animationName) {
var keyframes = this._keyframes[animationName];
if (keyframes !== undefined) {
ensureKeyframeAnimationModule();
var animation = new keyframeAnimationModule.KeyframeAnimationInfo();
ensureCssAnimationParserModule();
animation.keyframes = cssAnimationParserModule.CssAnimationParser.keyframesArrayFromCSS(keyframes);
return animation;
}
return undefined;
};
StyleScope.prototype.ensureSelectors = function() {
var toMerge;
if (this._applicationCssSelectorsAppliedVersion !== applicationCssSelectorVersion || this._localCssSelectorVersion !== this._localCssSelectorsAppliedVersion || !this._mergedCssSelectors) {
toMerge = [];
toMerge.push(applicationCssSelectors);
this._applicationCssSelectorsAppliedVersion = applicationCssSelectorVersion;
toMerge.push(this._localCssSelectors);
this._localCssSelectorsAppliedVersion = this._localCssSelectorVersion;
for (var keyframe in applicationKeyframes) {
this._keyframes[keyframe] = applicationKeyframes[keyframe];
}
}
if (toMerge && toMerge.length > 0) {
this._mergedCssSelectors = toMerge.filter(function(m) {
return !!m;
}).reduce(function(merged, next) {
return merged.concat(next);
}, []);
this._applyKeyframesOnSelectors();
this._selectors = new css_selector_1.SelectorsMap(this._mergedCssSelectors);
}
return this._getSelectorsVersion();
};
StyleScope.prototype.applySelectors = function(view) {
this.ensureSelectors();
var state = this._selectors.query(view);
var nextState = new CssState(view, state);
view._setCssState(nextState);
};
StyleScope.prototype.query = function(node) {
this.ensureSelectors();
return this._selectors.query(node).selectors;
};
StyleScope.prototype._reset = function() {
this._statesByKey = {};
this._viewIdToKey = {};
};
StyleScope.prototype._getSelectorsVersion = function() {
return 1e5 * this._applicationCssSelectorsAppliedVersion + this._localCssSelectorsAppliedVersion;
};
StyleScope.prototype._applyKeyframesOnSelectors = function() {
for (var i = this._mergedCssSelectors.length - 1; i >= 0; i--) {
var ruleset = this._mergedCssSelectors[i];
var animations = ruleset[animationsSymbol];
if (animations !== undefined && animations.length) {
ensureCssAnimationParserModule();
for (var _i = 0, animations_1 = animations; _i < animations_1.length; _i++) {
var animation = animations_1[_i];
var keyframe = this._keyframes[animation.name];
if (keyframe !== undefined) {
animation.keyframes = cssAnimationParserModule.CssAnimationParser.keyframesArrayFromCSS(keyframe);
}
}
}
}
};
StyleScope.prototype.getAnimations = function(ruleset) {
return ruleset[animationsSymbol];
};
return StyleScope;
}();
exports.StyleScope = StyleScope;
function createSelectorsFromCss(css, cssFileName, keyframes) {
try {
var pageCssSyntaxTree = css ? css_1.parse(css, {
source: cssFileName
}) : null;
var pageCssSelectors = [];
if (pageCssSyntaxTree) {
pageCssSelectors = pageCssSelectors.concat(createSelectorsFromImports(pageCssSyntaxTree, keyframes));
pageCssSelectors = pageCssSelectors.concat(createSelectorsFromSyntaxTree(pageCssSyntaxTree, keyframes));
}
return pageCssSelectors;
} catch (e) {
trace_1.write("Css styling failed: " + e, trace_1.categories.Error, trace_1.messageType.error);
}
}
function createSelectorsFromImports(tree, keyframes) {
var selectors = [];
if (tree !== null && tree !== undefined) {
var imports = tree["stylesheet"]["rules"].filter(function(r) {
return r.type === "import";
});
for (var i = 0; i < imports.length; i++) {
var importItem = imports[i]["import"];
var match = importItem && importItem.match(pattern);
var url = match && match[2];
if (url !== null && url !== undefined) {
var appDirectory = file_system_1.knownFolders.currentApp().path;
var fileName = resolveFileNameFromUrl(url, appDirectory, file_system_1.File.exists);
if (fileName !== null) {
var file = file_system_1.File.fromPath(fileName);
var text = file.readTextSync();
if (text) {
selectors = selectors.concat(createSelectorsFromCss(text, fileName, keyframes));
}
}
}
}
}
return selectors;
}
function createSelectorsFromSyntaxTree(ast, keyframes) {
var nodes = ast.stylesheet.rules;
nodes.filter(isKeyframe).forEach(function(node) {
return keyframes[node.name] = node;
});
var rulesets = css_selector_1.fromAstNodes(nodes);
if (rulesets && rulesets.length) {
ensureCssAnimationParserModule();
rulesets.forEach(function(rule) {
return rule[animationsSymbol] = cssAnimationParserModule.CssAnimationParser.keyframeAnimationsFromCSSDeclarations(rule.declarations);
});
}
return rulesets;
}
function resolveFileNameFromUrl(url, appDirectory, fileExists) {
var fileName = typeof url === "string" ? url.trim() : "";
if (fileName.indexOf("~/") === 0) {
fileName = fileName.replace("~/", "");
}
var local = file_system_1.path.join(appDirectory, fileName);
if (fileExists(local)) {
return local;
}
var external = file_system_1.path.join(appDirectory, "tns_modules", fileName);
if (fileExists(external)) {
return external;
}
return null;
}
exports.resolveFileNameFromUrl = resolveFileNameFromUrl;
function applyInlineStyle(view, styleStr) {
var localStyle = "local { " + styleStr + " }";
var inlineRuleSet = createSelectorsFromCss(localStyle, null, {});
var style = view.style;
inlineRuleSet[0].declarations.forEach(function(d) {
var name = d.property;
try {
if (name in style) {
style[name] = d.value;
} else {
view[name] = d.value;
}
} catch (e) {
trace_1.write("Failed to apply property [" + d.property + "] with value [" + d.value + "] to " + view + ". " + e, trace_1.categories.Error, trace_1.messageType.error);
}
});
}
exports.applyInlineStyle = applyInlineStyle;
function isKeyframe(node) {
return node.type === "keyframes";
}
var InlineSelector = function(_super) {
__extends(InlineSelector, _super);
function InlineSelector(ruleSet) {
var _this = _super.call(this) || this;
_this.specificity = 16777216;
_this.rarity = 0;
_this.dynamic = false;
_this.ruleset = ruleSet;
return _this;
}
InlineSelector.prototype.match = function(node) {
return true;
};
return InlineSelector;
}(css_selector_1.SelectorCore);
}, function(module, exports, __webpack_require__) {
exports.parse = __webpack_require__(47);
}, function(module, exports) {
var commentre = /\/\*[^*]*\*+([^\/*][^*]*\*+)*\//g;
module.exports = function(css, options) {
options = options || {};
var lineno = 1;
var column = 1;
function updatePosition(str) {
var lines = str.match(/\n/g);
if (lines) lineno += lines.length;
var i = str.lastIndexOf("\n");
column = ~i ? str.length - i : column + str.length;
}
function position() {
var start = {
line: lineno,
column: column
};
return function(node) {
node.position = new Position(start);
whitespace();
return node;
};
}
function Position(start) {
this.start = start;
this.end = {
line: lineno,
column: column
};
this.source = options.source;
}
Position.prototype.content = css;
var errorsList = [];
function error(msg) {
var err = new Error(options.source + ":" + lineno + ":" + column + ": " + msg);
err.reason = msg;
err.filename = options.source;
err.line = lineno;
err.column = column;
err.source = css;
if (options.silent) {
errorsList.push(err);
} else {
throw err;
}
}
function stylesheet() {
var rulesList = rules();
return {
type: "stylesheet",
stylesheet: {
rules: rulesList,
parsingErrors: errorsList
}
};
}
function open() {
return match(/^{\s*/);
}
function close() {
return match(/^}/);
}
function rules() {
var node;
var rules = [];
whitespace();
comments(rules);
while (css.length && css.charAt(0) != "}" && (node = atrule() || rule())) {
if (node !== false) {
rules.push(node);
comments(rules);
}
}
return rules;
}
function match(re) {
var m = re.exec(css);
if (!m) return;
var str = m[0];
updatePosition(str);
css = css.slice(str.length);
return m;
}
function whitespace() {
match(/^\s*/);
}
function comments(rules) {
var c;
rules = rules || [];
while (c = comment()) {
if (c !== false) {
rules.push(c);
}
}
return rules;
}
function comment() {
var pos = position();
if ("/" != css.charAt(0) || "*" != css.charAt(1)) return;
var i = 2;
while ("" != css.charAt(i) && ("*" != css.charAt(i) || "/" != css.charAt(i + 1))) ++i;
i += 2;
if ("" === css.charAt(i - 1)) {
return error("End of comment missing");
}
var str = css.slice(2, i - 2);
column += 2;
updatePosition(str);
css = css.slice(i);
column += 2;
return pos({
type: "comment",
comment: str
});
}
function selector() {
var m = match(/^([^{]+)/);
if (!m) return;
return trim(m[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*\/+/g, "").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function(m) {
return m.replace(/,/g, "‌");
}).split(/\s*(?![^(]*\)),\s*/).map(function(s) {
return s.replace(/\u200C/g, ",");
});
}
function declaration() {
var pos = position();
var prop = match(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
if (!prop) return;
prop = trim(prop[0]);
if (!match(/^:\s*/)) return error("property missing ':'");
var val = match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/);
var ret = pos({
type: "declaration",
property: prop.replace(commentre, ""),
value: val ? trim(val[0]).replace(commentre, "") : ""
});
match(/^[;\s]*/);
return ret;
}
function declarations() {
var decls = [];
if (!open()) return error("missing '{'");
comments(decls);
var decl;
while (decl = declaration()) {
if (decl !== false) {
decls.push(decl);
comments(decls);
}
}
if (!close()) return error("missing '}'");
return decls;
}
function keyframe() {
var m;
var vals = [];
var pos = position();
while (m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
vals.push(m[1]);
match(/^,\s*/);
}
if (!vals.length) return;
return pos({
type: "keyframe",
values: vals,
declarations: declarations()
});
}
function atkeyframes() {
var pos = position();
var m = match(/^@([-\w]+)?keyframes\s*/);
if (!m) return;
var vendor = m[1];
var m = match(/^([-\w]+)\s*/);
if (!m) return error("@keyframes missing name");
var name = m[1];
if (!open()) return error("@keyframes missing '{'");
var frame;
var frames = comments();
while (frame = keyframe()) {
frames.push(frame);
frames = frames.concat(comments());
}
if (!close()) return error("@keyframes missing '}'");
return pos({
type: "keyframes",
name: name,
vendor: vendor,
keyframes: frames
});
}
function atsupports() {
var pos = position();
var m = match(/^@supports *([^{]+)/);
if (!m) return;
var supports = trim(m[1]);
if (!open()) return error("@supports missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@supports missing '}'");
return pos({
type: "supports",
supports: supports,
rules: style
});
}
function athost() {
var pos = position();
var m = match(/^@host\s*/);
if (!m) return;
if (!open()) return error("@host missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@host missing '}'");
return pos({
type: "host",
rules: style
});
}
function atmedia() {
var pos = position();
var m = match(/^@media *([^{]+)/);
if (!m) return;
var media = trim(m[1]);
if (!open()) return error("@media missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@media missing '}'");
return pos({
type: "media",
media: media,
rules: style
});
}
function atcustommedia() {
var pos = position();
var m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
if (!m) return;
return pos({
type: "custom-media",
name: trim(m[1]),
media: trim(m[2])
});
}
function atpage() {
var pos = position();
var m = match(/^@page */);
if (!m) return;
var sel = selector() || [];
if (!open()) return error("@page missing '{'");
var decls = comments();
var decl;
while (decl = declaration()) {
decls.push(decl);
decls = decls.concat(comments());
}
if (!close()) return error("@page missing '}'");
return pos({
type: "page",
selectors: sel,
declarations: decls
});
}
function atdocument() {
var pos = position();
var m = match(/^@([-\w]+)?document *([^{]+)/);
if (!m) return;
var vendor = trim(m[1]);
var doc = trim(m[2]);
if (!open()) return error("@document missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@document missing '}'");
return pos({
type: "document",
document: doc,
vendor: vendor,
rules: style
});
}
function atfontface() {
var pos = position();
var m = match(/^@font-face\s*/);
if (!m) return;
if (!open()) return error("@font-face missing '{'");
var decls = comments();
var decl;
while (decl = declaration()) {
decls.push(decl);
decls = decls.concat(comments());
}
if (!close()) return error("@font-face missing '}'");
return pos({
type: "font-face",
declarations: decls
});
}
var atimport = _compileAtrule("import");
var atcharset = _compileAtrule("charset");
var atnamespace = _compileAtrule("namespace");
function _compileAtrule(name) {
var re = new RegExp("^@" + name + "\\s*([^;]+);");
return function() {
var pos = position();
var m = match(re);
if (!m) return;
var ret = {
type: name
};
ret[name] = m[1].trim();
return pos(ret);
};
}
function atrule() {
if (css[0] != "@") return;
return atkeyframes() || atmedia() || atcustommedia() || atsupports() || atimport() || atcharset() || atnamespace() || atdocument() || atpage() || athost() || atfontface();
}
function rule() {
var pos = position();
var sel = selector();
if (!sel) return error("selector missing");
comments();
return pos({
type: "rule",
selectors: sel,
declarations: declarations()
});
}
return addParent(stylesheet());
};
function trim(str) {
return str ? str.replace(/^\s+|\s+$/g, "") : "";
}
function addParent(obj, parent) {
var isNode = obj && typeof obj.type === "string";
var childParent = isNode ? obj : parent;
for (var k in obj) {
var value = obj[k];
if (Array.isArray(value)) {
value.forEach(function(v) {
addParent(v, childParent);
});
} else if (value && typeof value === "object") {
addParent(value, childParent);
}
}
if (isNode) {
Object.defineProperty(obj, "parent", {
configurable: true,
writable: true,
enumerable: false,
value: parent || null
});
}
return obj;
}
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var types_1 = __webpack_require__(17);
var utils_1 = __webpack_require__(14);
var selectorParser = __webpack_require__(49);
var Match;
(function(Match) {
Match.Dynamic = true;
Match.Static = false;
})(Match || (Match = {}));
function SelectorProperties(specificity, rarity, dynamic) {
if (dynamic === void 0) {
dynamic = false;
}
return function(cls) {
cls.prototype.specificity = specificity;
cls.prototype.rarity = rarity;
cls.prototype.combinator = "";
cls.prototype.dynamic = dynamic;
return cls;
};
}
var SelectorCore = function() {
function SelectorCore() {}
SelectorCore.prototype.lookupSort = function(sorter, base) {
sorter.sortAsUniversal(base || this);
};
return SelectorCore;
}();
SelectorCore = __decorate([ SelectorProperties(0, 0, Match.Static) ], SelectorCore);
exports.SelectorCore = SelectorCore;
var SimpleSelector = function(_super) {
__extends(SimpleSelector, _super);
function SimpleSelector() {
return _super !== null && _super.apply(this, arguments) || this;
}
SimpleSelector.prototype.accumulateChanges = function(node, map) {
if (!this.dynamic) {
return this.match(node);
} else if (this.mayMatch(node)) {
this.trackChanges(node, map);
return true;
}
return false;
};
SimpleSelector.prototype.mayMatch = function(node) {
return this.match(node);
};
SimpleSelector.prototype.trackChanges = function(node, map) {};
return SimpleSelector;
}(SelectorCore);
exports.SimpleSelector = SimpleSelector;
function wrap(text) {
return text ? " " + text + " " : "";
}
var InvalidSelector = function(_super) {
__extends(InvalidSelector, _super);
function InvalidSelector(e) {
var _this = _super.call(this) || this;
_this.e = e;
return _this;
}
InvalidSelector.prototype.toString = function() {
return "<error: " + this.e + ">";
};
InvalidSelector.prototype.match = function(node) {
return false;
};
InvalidSelector.prototype.lookupSort = function(sorter, base) {};
return InvalidSelector;
}(SimpleSelector);
InvalidSelector = __decorate([ SelectorProperties(0, 4, Match.Static) ], InvalidSelector);
exports.InvalidSelector = InvalidSelector;
var UniversalSelector = function(_super) {
__extends(UniversalSelector, _super);
function UniversalSelector() {
return _super !== null && _super.apply(this, arguments) || this;
}
UniversalSelector.prototype.toString = function() {
return "*" + wrap(this.combinator);
};
UniversalSelector.prototype.match = function(node) {
return true;
};
return UniversalSelector;
}(SimpleSelector);
UniversalSelector = __decorate([ SelectorProperties(0, 0, Match.Static) ], UniversalSelector);
exports.UniversalSelector = UniversalSelector;
var IdSelector = function(_super) {
__extends(IdSelector, _super);
function IdSelector(id) {
var _this = _super.call(this) || this;
_this.id = id;
return _this;
}
IdSelector.prototype.toString = function() {
return "#" + this.id + wrap(this.combinator);
};
IdSelector.prototype.match = function(node) {
return node.id === this.id;
};
IdSelector.prototype.lookupSort = function(sorter, base) {
sorter.sortById(this.id, base || this);
};
return IdSelector;
}(SimpleSelector);
IdSelector = __decorate([ SelectorProperties(65536, 3, Match.Static) ], IdSelector);
exports.IdSelector = IdSelector;
var TypeSelector = function(_super) {
__extends(TypeSelector, _super);
function TypeSelector(cssType) {
var _this = _super.call(this) || this;
_this.cssType = cssType;
return _this;
}
TypeSelector.prototype.toString = function() {
return "" + this.cssType + wrap(this.combinator);
};
TypeSelector.prototype.match = function(node) {
return node.cssType === this.cssType;
};
TypeSelector.prototype.lookupSort = function(sorter, base) {
sorter.sortByType(this.cssType, base || this);
};
return TypeSelector;
}(SimpleSelector);
TypeSelector = __decorate([ SelectorProperties(1, 1, Match.Static) ], TypeSelector);
exports.TypeSelector = TypeSelector;
var ClassSelector = function(_super) {
__extends(ClassSelector, _super);
function ClassSelector(cssClass) {
var _this = _super.call(this) || this;
_this.cssClass = cssClass;
return _this;
}
ClassSelector.prototype.toString = function() {
return "." + this.cssClass + wrap(this.combinator);
};
ClassSelector.prototype.match = function(node) {
return node.cssClasses && node.cssClasses.has(this.cssClass);
};
ClassSelector.prototype.lookupSort = function(sorter, base) {
sorter.sortByClass(this.cssClass, base || this);
};
return ClassSelector;
}(SimpleSelector);
ClassSelector = __decorate([ SelectorProperties(256, 2, Match.Static) ], ClassSelector);
exports.ClassSelector = ClassSelector;
var AttributeSelector = function(_super) {
__extends(AttributeSelector, _super);
function AttributeSelector(attribute, test, value) {
var _this = _super.call(this) || this;
_this.attribute = attribute;
_this.test = test;
_this.value = value;
if (!test) {
_this.match = function(node) {
return !types_1.isNullOrUndefined(node[attribute]);
};
return _this;
}
if (!value) {
_this.match = function(node) {
return false;
};
}
var escapedValue = utils_1.escapeRegexSymbols(value);
var regexp = null;
switch (test) {
case "^=":
regexp = new RegExp("^" + escapedValue);
break;

case "$=":
regexp = new RegExp(escapedValue + "$");
break;

case "*=":
regexp = new RegExp(escapedValue);
break;

case "=":
regexp = new RegExp("^" + escapedValue + "$");
break;

case "~=":
if (/\s/.test(value)) {
_this.match = function(node) {
return false;
};
return _this;
}
regexp = new RegExp("(^|\\s)" + escapedValue + "(\\s|$)");
break;

case "|=":
regexp = new RegExp("^" + escapedValue + "(-|$)");
break;
}
if (regexp) {
_this.match = function(node) {
return regexp.test(node[attribute] + "");
};
return _this;
} else {
_this.match = function(node) {
return false;
};
return _this;
}
}
AttributeSelector.prototype.toString = function() {
return "[" + this.attribute + wrap(this.test) + (this.test && this.value || "") + "]" + wrap(this.combinator);
};
AttributeSelector.prototype.match = function(node) {
return false;
};
AttributeSelector.prototype.mayMatch = function(node) {
return true;
};
AttributeSelector.prototype.trackChanges = function(node, map) {
map.addAttribute(node, this.attribute);
};
return AttributeSelector;
}(SimpleSelector);
AttributeSelector = __decorate([ SelectorProperties(256, 0, Match.Dynamic) ], AttributeSelector);
exports.AttributeSelector = AttributeSelector;
var PseudoClassSelector = function(_super) {
__extends(PseudoClassSelector, _super);
function PseudoClassSelector(cssPseudoClass) {
var _this = _super.call(this) || this;
_this.cssPseudoClass = cssPseudoClass;
return _this;
}
PseudoClassSelector.prototype.toString = function() {
return ":" + this.cssPseudoClass + wrap(this.combinator);
};
PseudoClassSelector.prototype.match = function(node) {
return node.cssPseudoClasses && node.cssPseudoClasses.has(this.cssPseudoClass);
};
PseudoClassSelector.prototype.mayMatch = function(node) {
return true;
};
PseudoClassSelector.prototype.trackChanges = function(node, map) {
map.addPseudoClass(node, this.cssPseudoClass);
};
return PseudoClassSelector;
}(SimpleSelector);
PseudoClassSelector = __decorate([ SelectorProperties(256, 0, Match.Dynamic) ], PseudoClassSelector);
exports.PseudoClassSelector = PseudoClassSelector;
var SimpleSelectorSequence = function(_super) {
__extends(SimpleSelectorSequence, _super);
function SimpleSelectorSequence(selectors) {
var _this = _super.call(this) || this;
_this.selectors = selectors;
_this.specificity = selectors.reduce(function(sum, sel) {
return sel.specificity + sum;
}, 0);
_this.head = _this.selectors.reduce(function(prev, curr) {
return !prev || curr.rarity > prev.rarity ? curr : prev;
}, null);
_this.dynamic = selectors.some(function(sel) {
return sel.dynamic;
});
return _this;
}
SimpleSelectorSequence.prototype.toString = function() {
return "" + this.selectors.join("") + wrap(this.combinator);
};
SimpleSelectorSequence.prototype.match = function(node) {
return this.selectors.every(function(sel) {
return sel.match(node);
});
};
SimpleSelectorSequence.prototype.mayMatch = function(node) {
return this.selectors.every(function(sel) {
return sel.mayMatch(node);
});
};
SimpleSelectorSequence.prototype.trackChanges = function(node, map) {
this.selectors.forEach(function(sel) {
return sel.trackChanges(node, map);
});
};
SimpleSelectorSequence.prototype.lookupSort = function(sorter, base) {
this.head.lookupSort(sorter, base || this);
};
return SimpleSelectorSequence;
}(SimpleSelector);
exports.SimpleSelectorSequence = SimpleSelectorSequence;
var Selector = function(_super) {
__extends(Selector, _super);
function Selector(selectors) {
var _this = _super.call(this) || this;
_this.selectors = selectors;
var lastGroup;
var groups = [];
selectors.reverse().forEach(function(sel) {
switch (sel.combinator) {
case undefined:
case " ":
groups.push(lastGroup = []);

case ">":
lastGroup.push(sel);
break;

default:
throw new Error('Unsupported combinator "' + sel.combinator + '".');
}
});
_this.groups = groups.map(function(g) {
return new Selector.ChildGroup(g);
});
_this.last = selectors[0];
_this.specificity = selectors.reduce(function(sum, sel) {
return sel.specificity + sum;
}, 0);
_this.dynamic = selectors.some(function(sel) {
return sel.dynamic;
});
return _this;
}
Selector.prototype.toString = function() {
return this.selectors.join("");
};
Selector.prototype.match = function(node) {
return this.groups.every(function(group, i) {
if (i === 0) {
node = group.match(node);
return !!node;
} else {
var ancestor = node;
while (ancestor = ancestor.parent) {
if (node = group.match(ancestor)) {
return true;
}
}
return false;
}
});
};
Selector.prototype.lookupSort = function(sorter, base) {
this.last.lookupSort(sorter, this);
};
Selector.prototype.accumulateChanges = function(node, map) {
if (!this.dynamic) {
return this.match(node);
}
var bounds = [];
var mayMatch = this.groups.every(function(group, i) {
if (i === 0) {
var nextNode = group.mayMatch(node);
bounds.push({
left: node,
right: node
});
node = nextNode;
return !!node;
} else {
var ancestor = node;
while (ancestor = ancestor.parent) {
var nextNode = group.mayMatch(ancestor);
if (nextNode) {
bounds.push({
left: ancestor,
right: null
});
node = nextNode;
return true;
}
}
return false;
}
});
if (!mayMatch) {
return false;
}
if (!map) {
return mayMatch;
}
for (var i = 0; i < this.groups.length; i++) {
var group_1 = this.groups[i];
if (!group_1.dynamic) {
continue;
}
var bound = bounds[i];
var node_1 = bound.left;
do {
if (group_1.mayMatch(node_1)) {
group_1.trackChanges(node_1, map);
}
} while (node_1 !== bound.right && (node_1 = node_1.parent));
}
return mayMatch;
};
return Selector;
}(SelectorCore);
exports.Selector = Selector;
(function(Selector) {
var ChildGroup = function() {
function ChildGroup(selectors) {
this.selectors = selectors;
this.dynamic = selectors.some(function(sel) {
return sel.dynamic;
});
}
ChildGroup.prototype.match = function(node) {
return this.selectors.every(function(sel, i) {
return (i === 0 ? node : node = node.parent) && sel.match(node);
}) ? node : null;
};
ChildGroup.prototype.mayMatch = function(node) {
return this.selectors.every(function(sel, i) {
return (i === 0 ? node : node = node.parent) && sel.mayMatch(node);
}) ? node : null;
};
ChildGroup.prototype.trackChanges = function(node, map) {
this.selectors.forEach(function(sel, i) {
return (i === 0 ? node : node = node.parent) && sel.trackChanges(node, map);
});
};
return ChildGroup;
}();
Selector.ChildGroup = ChildGroup;
})(Selector = exports.Selector || (exports.Selector = {}));
exports.Selector = Selector;
var RuleSet = function() {
function RuleSet(selectors, declarations) {
var _this = this;
this.selectors = selectors;
this.declarations = declarations;
this.selectors.forEach(function(sel) {
return sel.ruleset = _this;
});
}
RuleSet.prototype.toString = function() {
return this.selectors.join(", ") + " {" + this.declarations.map(function(d, i) {
return "" + (i === 0 ? " " : "") + d.property + ": " + d.value;
}).join("; ") + " }";
};
RuleSet.prototype.lookupSort = function(sorter) {
this.selectors.forEach(function(sel) {
return sel.lookupSort(sorter);
});
};
return RuleSet;
}();
exports.RuleSet = RuleSet;
function fromAstNodes(astRules) {
return astRules.filter(isRule).map(function(rule) {
var declarations = rule.declarations.filter(isDeclaration).map(createDeclaration);
var selectors = rule.selectors.map(createSelector);
var ruleset = new RuleSet(selectors, declarations);
return ruleset;
});
}
exports.fromAstNodes = fromAstNodes;
function createDeclaration(decl) {
return {
property: decl.property.toLowerCase(),
value: decl.value
};
}
function createSelector(sel) {
try {
var ast = selectorParser.parse(sel);
if (ast.length === 0) {
return new InvalidSelector(new Error("Empty selector"));
}
var selectors = ast.map(createSimpleSelector);
var sequences = [];
for (var seqStart = 0, seqEnd = 0, last = selectors.length - 1; seqEnd <= last; seqEnd++) {
var sel_1 = selectors[seqEnd];
var astComb = ast[seqEnd].comb;
if (astComb || seqEnd === last) {
if (seqStart === seqEnd) {
sel_1.combinator = astComb;
sequences.push(sel_1);
} else {
var sequence = new SimpleSelectorSequence(selectors.slice(seqStart, seqEnd + 1));
sequence.combinator = astComb;
sequences.push(sequence);
}
seqStart = seqEnd + 1;
}
}
if (sequences.length === 1) {
return sequences[0];
} else {
return new Selector(sequences);
}
} catch (e) {
return new InvalidSelector(e);
}
}
function createSimpleSelector(sel) {
if (selectorParser.isUniversal(sel)) {
return new UniversalSelector();
} else if (selectorParser.isId(sel)) {
return new IdSelector(sel.ident);
} else if (selectorParser.isType(sel)) {
return new TypeSelector(sel.ident.replace(/-/, "").toLowerCase());
} else if (selectorParser.isClass(sel)) {
return new ClassSelector(sel.ident);
} else if (selectorParser.isPseudo(sel)) {
return new PseudoClassSelector(sel.ident);
} else if (selectorParser.isAttribute(sel)) {
if (sel.test) {
return new AttributeSelector(sel.prop, sel.test, sel.value);
} else {
return new AttributeSelector(sel.prop);
}
}
}
function isRule(node) {
return node.type === "rule";
}
function isDeclaration(node) {
return node.type === "declaration";
}
var SelectorsMap = function() {
function SelectorsMap(rulesets) {
var _this = this;
this.id = {};
this.class = {};
this.type = {};
this.universal = [];
this.position = 0;
rulesets.forEach(function(rule) {
return rule.lookupSort(_this);
});
}
SelectorsMap.prototype.query = function(node) {
var _this = this;
var selectorClasses = [ this.universal, this.id[node.id], this.type[node.cssType] ];
if (node.cssClasses) {
node.cssClasses.forEach(function(c) {
return selectorClasses.push(_this.class[c]);
});
}
var selectors = selectorClasses.filter(function(arr) {
return !!arr;
}).reduce(function(cur, next) {
return cur.concat(next);
}, []);
var selectorsMatch = new SelectorsMatch();
selectorsMatch.selectors = selectors.filter(function(sel) {
return sel.sel.accumulateChanges(node, selectorsMatch);
}).sort(function(a, b) {
return a.sel.specificity - b.sel.specificity || a.pos - b.pos;
}).map(function(docSel) {
return docSel.sel;
});
return selectorsMatch;
};
SelectorsMap.prototype.sortById = function(id, sel) {
this.addToMap(this.id, id, sel);
};
SelectorsMap.prototype.sortByClass = function(cssClass, sel) {
this.addToMap(this.class, cssClass, sel);
};
SelectorsMap.prototype.sortByType = function(cssType, sel) {
this.addToMap(this.type, cssType, sel);
};
SelectorsMap.prototype.sortAsUniversal = function(sel) {
this.universal.push(this.makeDocSelector(sel));
};
SelectorsMap.prototype.addToMap = function(map, head, sel) {
this.position++;
var list = map[head];
if (list) {
list.push(this.makeDocSelector(sel));
} else {
map[head] = [ this.makeDocSelector(sel) ];
}
};
SelectorsMap.prototype.makeDocSelector = function(sel) {
return {
sel: sel,
pos: this.position++
};
};
return SelectorsMap;
}();
exports.SelectorsMap = SelectorsMap;
var SelectorsMatch = function() {
function SelectorsMatch() {
this.changeMap = new Map();
}
SelectorsMatch.prototype.addAttribute = function(node, attribute) {
var deps = this.properties(node);
if (!deps.attributes) {
deps.attributes = new Set();
}
deps.attributes.add(attribute);
};
SelectorsMatch.prototype.addPseudoClass = function(node, pseudoClass) {
var deps = this.properties(node);
if (!deps.pseudoClasses) {
deps.pseudoClasses = new Set();
}
deps.pseudoClasses.add(pseudoClass);
};
SelectorsMatch.prototype.properties = function(node) {
var set = this.changeMap.get(node);
if (!set) {
this.changeMap.set(node, set = {});
}
return set;
};
return SelectorsMatch;
}();
exports.SelectorsMatch = SelectorsMatch;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
function isUniversal(sel) {
return sel.type === "*";
}
exports.isUniversal = isUniversal;
function isType(sel) {
return sel.type === "";
}
exports.isType = isType;
function isClass(sel) {
return sel.type === ".";
}
exports.isClass = isClass;
function isId(sel) {
return sel.type === "#";
}
exports.isId = isId;
function isPseudo(sel) {
return sel.type === ":";
}
exports.isPseudo = isPseudo;
function isAttribute(sel) {
return sel.type === "[]";
}
exports.isAttribute = isAttribute;
var regex = /(\s*)(?:(\*)|(#|\.|:|\b)([_-\w][_-\w\d]*)|\[\s*([_-\w][_-\w\d]*)\s*(?:(=|\^=|\$=|\*=|\~=|\|=)\s*(?:([_-\w][_-\w\d]*)|"((?:[^\\"]|\\(?:"|n|r|f|\\|0-9a-f))*)"|'((?:[^\\']|\\(?:'|n|r|f|\\|0-9a-f))*)')\s*)?\])(?:\s*(\+|~|>|\s))?/g;
function parse(selector) {
var selectors = [];
var result;
var lastIndex = regex.lastIndex = 0;
while (result = regex.exec(selector)) {
var pos = result.index;
if (lastIndex !== pos) {
throw new Error("Unexpected characters at index, near: " + lastIndex + ": " + result.input.substr(lastIndex, 32));
} else if (!result[0] || result[0].length === 0) {
throw new Error("Last selector match got zero character result at index " + lastIndex + ", near: " + result.input.substr(lastIndex, 32));
}
pos += getLeadingWhiteSpace(result).length;
lastIndex = regex.lastIndex;
var type = getType(result);
var selector_1 = void 0;
switch (type) {
case "*":
selector_1 = {
pos: pos,
type: type
};
break;

case "#":
case ".":
case ":":
case "":
var ident = getIdentifier(result);
selector_1 = {
pos: pos,
type: type,
ident: ident
};
break;

case "[]":
var prop = getProperty(result);
var test = getPropertyTest(result);
var value = getPropertyValue(result);
selector_1 = test ? {
pos: pos,
type: type,
prop: prop,
test: test,
value: value
} : {
pos: pos,
type: type,
prop: prop
};
break;

default:
throw new Error("Unhandled type.");
}
var comb = getCombinator(result);
if (comb) {
selector_1.comb = comb;
}
selectors.push(selector_1);
}
if (selectors.length > 0) {
delete selectors[selectors.length - 1].comb;
}
return selectors;
}
exports.parse = parse;
function getLeadingWhiteSpace(result) {
return result[1] || "";
}
function getType(result) {
return result[5] && "[]" || result[2] || result[3];
}
function getIdentifier(result) {
return result[4];
}
function getProperty(result) {
return result[5];
}
function getPropertyTest(result) {
return result[6] || undefined;
}
function getPropertyValue(result) {
return result[7] || result[8] || result[9];
}
function getCombinator(result) {
return result[result.length - 1] || undefined;
}
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var properties_1 = __webpack_require__(34);
var animation_1 = __webpack_require__(51);
var style_properties_1 = __webpack_require__(31);
var KeyframeDeclaration = function() {
function KeyframeDeclaration() {}
return KeyframeDeclaration;
}();
exports.KeyframeDeclaration = KeyframeDeclaration;
var KeyframeInfo = function() {
function KeyframeInfo() {}
return KeyframeInfo;
}();
exports.KeyframeInfo = KeyframeInfo;
var KeyframeAnimationInfo = function() {
function KeyframeAnimationInfo() {
this.name = "";
this.duration = .3;
this.delay = 0;
this.iterations = 1;
this.curve = "ease";
this.isForwards = false;
this.isReverse = false;
}
return KeyframeAnimationInfo;
}();
exports.KeyframeAnimationInfo = KeyframeAnimationInfo;
var KeyframeAnimation = function() {
function KeyframeAnimation() {
this.delay = 0;
this.iterations = 1;
}
KeyframeAnimation.keyframeAnimationFromInfo = function(info) {
var animations = new Array();
var length = info.keyframes.length;
var startDuration = 0;
if (info.isReverse) {
for (var index_1 = length - 1; index_1 >= 0; index_1--) {
var keyframe = info.keyframes[index_1];
startDuration = KeyframeAnimation.parseKeyframe(info, keyframe, animations, startDuration);
}
} else {
for (var index_2 = 0; index_2 < length; index_2++) {
var keyframe = info.keyframes[index_2];
startDuration = KeyframeAnimation.parseKeyframe(info, keyframe, animations, startDuration);
}
for (var index_3 = length - 1; index_3 > 0; index_3--) {
var a1 = animations[index_3];
var a2 = animations[index_3 - 1];
if (a2["curve"] !== undefined) {
a1["curve"] = a2["curve"];
a2["curve"] = undefined;
}
}
}
for (var index_4 = 1; index_4 < length; index_4++) {
var a = animations[index_4];
if (a["curve"] === undefined) {
a["curve"] = info.curve;
}
}
var animation = new KeyframeAnimation();
animation.delay = info.delay;
animation.iterations = info.iterations;
animation.animations = animations;
animation._isForwards = info.isForwards;
return animation;
};
KeyframeAnimation.parseKeyframe = function(info, keyframe, animations, startDuration) {
var animation = {};
for (var _i = 0, _a = keyframe.declarations; _i < _a.length; _i++) {
var declaration = _a[_i];
animation[declaration.property] = declaration.value;
}
var duration = keyframe.duration;
if (duration === 0) {
duration = .01;
} else {
duration = info.duration * duration - startDuration;
startDuration += duration;
}
animation.duration = info.isReverse ? info.duration - duration : duration;
animation.curve = keyframe.curve;
animation.forceLayer = true;
animation.valueSource = "keyframe";
animations.push(animation);
return startDuration;
};
Object.defineProperty(KeyframeAnimation.prototype, "isPlaying", {
get: function() {
return this._isPlaying;
},
enumerable: true,
configurable: true
});
KeyframeAnimation.prototype.cancel = function() {
if (this._isPlaying) {
this._isPlaying = false;
for (var i = this._nativeAnimations.length - 1; i >= 0; i--) {
var animation = this._nativeAnimations[i];
if (animation.isPlaying) {
animation.cancel();
}
}
if (this._nativeAnimations.length > 0) {
var animation = this._nativeAnimations[0];
this._resetAnimationValues(this._target, animation);
}
this._rejectAnimationFinishedPromise();
}
};
KeyframeAnimation.prototype.play = function(view) {
var _this = this;
if (this._isPlaying) {
throw new Error("Animation is already playing.");
}
var animationFinishedPromise = new Promise(function(resolve, reject) {
_this._resolve = resolve;
_this._reject = reject;
});
this._isPlaying = true;
this._nativeAnimations = new Array();
this._target = view;
if (this.delay !== 0) {
setTimeout(function() {
return _this.animate(view, 0, _this.iterations);
}, this.delay);
} else {
this.animate(view, 0, this.iterations);
}
return animationFinishedPromise;
};
KeyframeAnimation.prototype.animate = function(view, index, iterations) {
var _this = this;
if (!this._isPlaying) {
return;
}
if (index === 0) {
var animation = this.animations[0];
if ("backgroundColor" in animation) {
view.style[style_properties_1.backgroundColorProperty.keyframe] = animation.backgroundColor;
}
if ("scale" in animation) {
view.style[style_properties_1.scaleXProperty.keyframe] = animation.scale.x;
view.style[style_properties_1.scaleYProperty.keyframe] = animation.scale.y;
}
if ("translate" in animation) {
view.style[style_properties_1.translateXProperty.keyframe] = animation.translate.x;
view.style[style_properties_1.translateYProperty.keyframe] = animation.translate.y;
}
if ("rotate" in animation) {
view.style[style_properties_1.rotateProperty.keyframe] = animation.rotate;
}
if ("opacity" in animation) {
view.style[style_properties_1.opacityProperty.keyframe] = animation.opacity;
}
setTimeout(function() {
return _this.animate(view, 1, iterations);
}, 1);
} else if (index < 0 || index >= this.animations.length) {
iterations -= 1;
if (iterations > 0) {
this.animate(view, 0, iterations);
} else {
if (this._isForwards === false) {
var animation = this.animations[this.animations.length - 1];
this._resetAnimationValues(view, animation);
}
this._resolveAnimationFinishedPromise();
}
} else {
var animationDef = this.animations[index];
animationDef.target = view;
var animation = new animation_1.Animation([ animationDef ]);
animation.play().then(function() {
_this.animate(view, index + 1, iterations);
}).catch(function(error) {
if (error.message.indexOf("Animation cancelled") < 0) {
throw error;
}
});
this._nativeAnimations.push(animation);
}
};
KeyframeAnimation.prototype._resolveAnimationFinishedPromise = function() {
this._nativeAnimations = new Array();
this._isPlaying = false;
this._target = null;
this._resolve();
};
KeyframeAnimation.prototype._rejectAnimationFinishedPromise = function() {
this._nativeAnimations = new Array();
this._isPlaying = false;
this._target = null;
this._reject(new Error("Animation cancelled."));
};
KeyframeAnimation.prototype._resetAnimationValues = function(view, animation) {
if ("backgroundColor" in animation) {
view.style[style_properties_1.backgroundColorProperty.keyframe] = properties_1.unsetValue;
}
if ("scale" in animation) {
view.style[style_properties_1.scaleXProperty.keyframe] = properties_1.unsetValue;
view.style[style_properties_1.scaleYProperty.keyframe] = properties_1.unsetValue;
}
if ("translate" in animation) {
view.style[style_properties_1.translateXProperty.keyframe] = properties_1.unsetValue;
view.style[style_properties_1.translateYProperty.keyframe] = properties_1.unsetValue;
}
if ("rotate" in animation) {
view.style[style_properties_1.rotateProperty.keyframe] = properties_1.unsetValue;
}
if ("opacity" in animation) {
view.style[style_properties_1.opacityProperty.keyframe] = properties_1.unsetValue;
}
};
return KeyframeAnimation;
}();
exports.KeyframeAnimation = KeyframeAnimation;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var animation_common_1 = __webpack_require__(52);
var style_properties_1 = __webpack_require__(31);
var utils_1 = __webpack_require__(14);
var lazy_1 = __webpack_require__(53);
__export(__webpack_require__(52));
var argbEvaluator;
function ensureArgbEvaluator() {
if (!argbEvaluator) {
argbEvaluator = new android.animation.ArgbEvaluator();
}
}
var easeIn = lazy_1.default(function() {
return new android.view.animation.AccelerateInterpolator(1);
});
var easeOut = lazy_1.default(function() {
return new android.view.animation.DecelerateInterpolator(1);
});
var easeInOut = lazy_1.default(function() {
return new android.view.animation.AccelerateDecelerateInterpolator();
});
var linear = lazy_1.default(function() {
return new android.view.animation.LinearInterpolator();
});
var bounce = lazy_1.default(function() {
return new android.view.animation.BounceInterpolator();
});
var keyPrefix = "ui.animation.";
var propertyKeys = {};
propertyKeys[animation_common_1.Properties.backgroundColor] = Symbol(keyPrefix + animation_common_1.Properties.backgroundColor);
propertyKeys[animation_common_1.Properties.opacity] = Symbol(keyPrefix + animation_common_1.Properties.opacity);
propertyKeys[animation_common_1.Properties.rotate] = Symbol(keyPrefix + animation_common_1.Properties.rotate);
propertyKeys[animation_common_1.Properties.scale] = Symbol(keyPrefix + animation_common_1.Properties.scale);
propertyKeys[animation_common_1.Properties.translate] = Symbol(keyPrefix + animation_common_1.Properties.translate);
function _resolveAnimationCurve(curve) {
switch (curve) {
case "easeIn":
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Animation curve resolved to android.view.animation.AccelerateInterpolator(1).", animation_common_1.traceCategories.Animation);
}
return easeIn();

case "easeOut":
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Animation curve resolved to android.view.animation.DecelerateInterpolator(1).", animation_common_1.traceCategories.Animation);
}
return easeOut();

case "easeInOut":
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Animation curve resolved to android.view.animation.AccelerateDecelerateInterpolator().", animation_common_1.traceCategories.Animation);
}
return easeInOut();

case "linear":
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Animation curve resolved to android.view.animation.LinearInterpolator().", animation_common_1.traceCategories.Animation);
}
return linear();

case "spring":
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Animation curve resolved to android.view.animation.BounceInterpolator().", animation_common_1.traceCategories.Animation);
}
return bounce();

case "ease":
return android.support.v4.view.animation.PathInterpolatorCompat.create(.25, .1, .25, 1);

default:
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Animation curve resolved to original: " + curve, animation_common_1.traceCategories.Animation);
}
if (curve instanceof animation_common_1.CubicBezierAnimationCurve) {
return android.support.v4.view.animation.PathInterpolatorCompat.create(curve.x1, curve.y1, curve.x2, curve.y2);
} else if (curve && curve.getInterpolation) {
return curve;
} else if (curve instanceof android.view.animation.LinearInterpolator) {
return curve;
} else {
throw new Error("Invalid animation curve: " + curve);
}
}
}
exports._resolveAnimationCurve = _resolveAnimationCurve;
var Animation = function(_super) {
__extends(Animation, _super);
function Animation(animationDefinitions, playSequentially) {
var _this = _super.call(this, animationDefinitions, playSequentially) || this;
_this._valueSource = "animation";
if (animationDefinitions.length > 0 && animationDefinitions[0].valueSource !== undefined) {
_this._valueSource = animationDefinitions[0].valueSource;
}
var that = new WeakRef(_this);
_this._animatorListener = new android.animation.Animator.AnimatorListener({
onAnimationStart: function(animator) {
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("MainAnimatorListener.onAndroidAnimationStart(" + animator + ")", animation_common_1.traceCategories.Animation);
}
},
onAnimationRepeat: function(animator) {
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("MainAnimatorListener.onAnimationRepeat(" + animator + ")", animation_common_1.traceCategories.Animation);
}
},
onAnimationEnd: function(animator) {
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("MainAnimatorListener.onAnimationEnd(" + animator + ")", animation_common_1.traceCategories.Animation);
}
var thisRef = that.get();
if (thisRef) {
thisRef._onAndroidAnimationEnd();
}
},
onAnimationCancel: function(animator) {
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("MainAnimatorListener.onAnimationCancel(" + animator + ")", animation_common_1.traceCategories.Animation);
}
var thisRef = that.get();
if (thisRef) {
thisRef._onAndroidAnimationCancel();
}
}
});
return _this;
}
Animation.prototype.play = function() {
var animationFinishedPromise = _super.prototype.play.call(this);
this._animators = new Array();
this._propertyUpdateCallbacks = new Array();
this._propertyResetCallbacks = new Array();
for (var i = 0, length_1 = this._propertyAnimations.length; i < length_1; i++) {
this._createAnimators(this._propertyAnimations[i]);
}
this._nativeAnimatorsArray = Array.create(android.animation.Animator, this._animators.length);
for (var i = 0, length_2 = this._animators.length; i < length_2; i++) {
this._nativeAnimatorsArray[i] = this._animators[i];
}
this._animatorSet = new android.animation.AnimatorSet();
this._animatorSet.addListener(this._animatorListener);
if (this._animators.length > 0) {
if (this._playSequentially) {
this._animatorSet.playSequentially(this._nativeAnimatorsArray);
} else {
this._animatorSet.playTogether(this._nativeAnimatorsArray);
}
}
this._enableHardwareAcceleration();
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Starting " + this._nativeAnimatorsArray.length + " animations " + (this._playSequentially ? "sequentially." : "together."), animation_common_1.traceCategories.Animation);
}
this._animatorSet.setupStartValues();
this._animatorSet.start();
return animationFinishedPromise;
};
Animation.prototype.cancel = function() {
_super.prototype.cancel.call(this);
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Cancelling AnimatorSet.", animation_common_1.traceCategories.Animation);
}
this._animatorSet.cancel();
};
Animation.prototype._resolveAnimationCurve = function(curve) {
return _resolveAnimationCurve(curve);
};
Animation.prototype._onAndroidAnimationEnd = function() {
if (!this.isPlaying) {
return;
}
var i = 0;
var length = this._propertyUpdateCallbacks.length;
for (;i < length; i++) {
this._propertyUpdateCallbacks[i]();
}
this._disableHardwareAcceleration();
this._resolveAnimationFinishedPromise();
};
Animation.prototype._onAndroidAnimationCancel = function() {
var i = 0;
var length = this._propertyResetCallbacks.length;
for (;i < length; i++) {
this._propertyResetCallbacks[i]();
}
this._disableHardwareAcceleration();
this._rejectAnimationFinishedPromise();
};
Animation.prototype._createAnimators = function(propertyAnimation) {
if (!propertyAnimation.target.nativeView) {
return;
}
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Creating ObjectAnimator(s) for animation: " + Animation._getAnimationInfo(propertyAnimation) + "...", animation_common_1.traceCategories.Animation);
}
if (propertyAnimation.target === null || propertyAnimation.target === undefined) {
throw new Error("Animation target cannot be null or undefined; property: " + propertyAnimation.property + "; value: " + propertyAnimation.value + ";");
}
if (propertyAnimation.property === null || propertyAnimation.property === undefined) {
throw new Error("Animation property cannot be null or undefined; target: " + propertyAnimation.target + "; value: " + propertyAnimation.value + ";");
}
if (propertyAnimation.value === null || propertyAnimation.value === undefined) {
throw new Error("Animation value cannot be null or undefined; target: " + propertyAnimation.target + "; property: " + propertyAnimation.property + ";");
}
var nativeArray;
var nativeView = propertyAnimation.target.nativeView;
var animators = new Array();
var propertyUpdateCallbacks = new Array();
var propertyResetCallbacks = new Array();
var originalValue1;
var originalValue2;
var density = utils_1.layout.getDisplayDensity();
var xyObjectAnimators;
var animatorSet;
var key = propertyKeys[propertyAnimation.property];
if (key) {
propertyAnimation.target[key] = propertyAnimation;
}
function checkAnimation(cb) {
return function() {
if (propertyAnimation.target[key] === propertyAnimation) {
delete propertyAnimation.target[key];
cb();
}
};
}
var setLocal = this._valueSource === "animation";
switch (propertyAnimation.property) {
case animation_common_1.Properties.opacity:
originalValue1 = nativeView.getAlpha();
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value;
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style[setLocal ? style_properties_1.opacityProperty.name : style_properties_1.opacityProperty.keyframe] = propertyAnimation.value;
}));
propertyResetCallbacks.push(checkAnimation(function() {
if (setLocal) {
propertyAnimation.target.style[style_properties_1.opacityProperty.name] = originalValue1;
} else {
propertyAnimation.target.style[style_properties_1.opacityProperty.keyframe] = originalValue1;
}
if (propertyAnimation.target.nativeView) {
propertyAnimation.target[style_properties_1.opacityProperty.setNative](propertyAnimation.target.style.opacity);
}
}));
animators.push(android.animation.ObjectAnimator.ofFloat(nativeView, "alpha", nativeArray));
break;

case animation_common_1.Properties.backgroundColor:
ensureArgbEvaluator();
originalValue1 = propertyAnimation.target.backgroundColor;
nativeArray = Array.create(java.lang.Object, 2);
nativeArray[0] = propertyAnimation.target.backgroundColor ? java.lang.Integer.valueOf(propertyAnimation.target.backgroundColor.argb) : java.lang.Integer.valueOf(-1);
nativeArray[1] = java.lang.Integer.valueOf(propertyAnimation.value.argb);
var animator = android.animation.ValueAnimator.ofObject(argbEvaluator, nativeArray);
animator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener({
onAnimationUpdate: function(animator) {
var argb = animator.getAnimatedValue().intValue();
propertyAnimation.target.style[setLocal ? style_properties_1.backgroundColorProperty.name : style_properties_1.backgroundColorProperty.keyframe] = new animation_common_1.Color(argb);
}
}));
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style[setLocal ? style_properties_1.backgroundColorProperty.name : style_properties_1.backgroundColorProperty.keyframe] = propertyAnimation.value;
}));
propertyResetCallbacks.push(checkAnimation(function() {
if (setLocal) {
propertyAnimation.target.style[style_properties_1.backgroundColorProperty.name] = originalValue1;
} else {
propertyAnimation.target.style[style_properties_1.backgroundColorProperty.keyframe] = originalValue1;
if (propertyAnimation.target.nativeView && propertyAnimation.target[style_properties_1.backgroundColorProperty.setNative]) {
propertyAnimation.target[style_properties_1.backgroundColorProperty.setNative](propertyAnimation.target.style.backgroundColor);
}
}
}));
animators.push(animator);
break;

case animation_common_1.Properties.translate:
xyObjectAnimators = Array.create(android.animation.Animator, 2);
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.x * density;
xyObjectAnimators[0] = android.animation.ObjectAnimator.ofFloat(nativeView, "translationX", nativeArray);
xyObjectAnimators[0].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.y * density;
xyObjectAnimators[1] = android.animation.ObjectAnimator.ofFloat(nativeView, "translationY", nativeArray);
xyObjectAnimators[1].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
originalValue1 = nativeView.getTranslationX() / density;
originalValue2 = nativeView.getTranslationY() / density;
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style[setLocal ? style_properties_1.translateXProperty.name : style_properties_1.translateXProperty.keyframe] = propertyAnimation.value.x;
propertyAnimation.target.style[setLocal ? style_properties_1.translateYProperty.name : style_properties_1.translateYProperty.keyframe] = propertyAnimation.value.y;
}));
propertyResetCallbacks.push(checkAnimation(function() {
if (setLocal) {
propertyAnimation.target.style[style_properties_1.translateXProperty.name] = originalValue1;
propertyAnimation.target.style[style_properties_1.translateYProperty.name] = originalValue2;
} else {
propertyAnimation.target.style[style_properties_1.translateXProperty.keyframe] = originalValue1;
propertyAnimation.target.style[style_properties_1.translateYProperty.keyframe] = originalValue2;
if (propertyAnimation.target.nativeView) {
propertyAnimation.target[style_properties_1.translateXProperty.setNative](propertyAnimation.target.style.translateX);
propertyAnimation.target[style_properties_1.translateYProperty.setNative](propertyAnimation.target.style.translateY);
}
}
}));
animatorSet = new android.animation.AnimatorSet();
animatorSet.playTogether(xyObjectAnimators);
animatorSet.setupStartValues();
animators.push(animatorSet);
break;

case animation_common_1.Properties.scale:
xyObjectAnimators = Array.create(android.animation.Animator, 2);
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.x;
xyObjectAnimators[0] = android.animation.ObjectAnimator.ofFloat(nativeView, "scaleX", nativeArray);
xyObjectAnimators[0].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.y;
xyObjectAnimators[1] = android.animation.ObjectAnimator.ofFloat(nativeView, "scaleY", nativeArray);
xyObjectAnimators[1].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
originalValue1 = nativeView.getScaleX();
originalValue2 = nativeView.getScaleY();
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style[setLocal ? style_properties_1.scaleXProperty.name : style_properties_1.scaleXProperty.keyframe] = propertyAnimation.value.x;
propertyAnimation.target.style[setLocal ? style_properties_1.scaleYProperty.name : style_properties_1.scaleYProperty.keyframe] = propertyAnimation.value.y;
}));
propertyResetCallbacks.push(checkAnimation(function() {
if (setLocal) {
propertyAnimation.target.style[style_properties_1.scaleXProperty.name] = originalValue1;
propertyAnimation.target.style[style_properties_1.scaleYProperty.name] = originalValue2;
} else {
propertyAnimation.target.style[style_properties_1.scaleXProperty.keyframe] = originalValue1;
propertyAnimation.target.style[style_properties_1.scaleYProperty.keyframe] = originalValue2;
if (propertyAnimation.target.nativeView) {
propertyAnimation.target[style_properties_1.scaleXProperty.setNative](propertyAnimation.target.style.scaleX);
propertyAnimation.target[style_properties_1.scaleYProperty.setNative](propertyAnimation.target.style.scaleY);
}
}
}));
animatorSet = new android.animation.AnimatorSet();
animatorSet.playTogether(xyObjectAnimators);
animatorSet.setupStartValues();
animators.push(animatorSet);
break;

case animation_common_1.Properties.rotate:
originalValue1 = nativeView.getRotation();
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value;
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style[setLocal ? style_properties_1.rotateProperty.name : style_properties_1.rotateProperty.keyframe] = propertyAnimation.value;
}));
propertyResetCallbacks.push(checkAnimation(function() {
if (setLocal) {
propertyAnimation.target.style[style_properties_1.rotateProperty.name] = originalValue1;
} else {
propertyAnimation.target.style[style_properties_1.rotateProperty.keyframe] = originalValue1;
if (propertyAnimation.target.nativeView) {
propertyAnimation.target[style_properties_1.rotateProperty.setNative](propertyAnimation.target.style.rotate);
}
}
}));
animators.push(android.animation.ObjectAnimator.ofFloat(nativeView, "rotation", nativeArray));
break;

default:
throw new Error("Cannot animate " + propertyAnimation.property);
}
for (var i = 0, length_3 = animators.length; i < length_3; i++) {
if (propertyAnimation.duration !== undefined) {
animators[i].setDuration(propertyAnimation.duration);
}
if (propertyAnimation.delay !== undefined) {
animators[i].setStartDelay(propertyAnimation.delay);
}
if (propertyAnimation.iterations !== undefined && animators[i] instanceof android.animation.ValueAnimator) {
animators[i].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
}
if (propertyAnimation.curve !== undefined) {
animators[i].setInterpolator(propertyAnimation.curve);
}
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Animator created: " + animators[i], animation_common_1.traceCategories.Animation);
}
}
this._animators = this._animators.concat(animators);
this._propertyUpdateCallbacks = this._propertyUpdateCallbacks.concat(propertyUpdateCallbacks);
this._propertyResetCallbacks = this._propertyResetCallbacks.concat(propertyResetCallbacks);
};
Animation._getAndroidRepeatCount = function(iterations) {
return iterations === Number.POSITIVE_INFINITY ? android.view.animation.Animation.INFINITE : iterations - 1;
};
Animation.prototype._enableHardwareAcceleration = function() {
for (var i = 0, length_4 = this._propertyAnimations.length; i < length_4; i++) {
var cache = this._propertyAnimations[i].target.nativeView;
if (cache) {
var layerType = cache.getLayerType();
if (layerType !== android.view.View.LAYER_TYPE_HARDWARE) {
cache.layerType = layerType;
cache.setLayerType(android.view.View.LAYER_TYPE_HARDWARE, null);
}
}
}
};
Animation.prototype._disableHardwareAcceleration = function() {
for (var i = 0, length_5 = this._propertyAnimations.length; i < length_5; i++) {
var cache = this._propertyAnimations[i].target.nativeView;
if (cache && cache.layerType !== undefined) {
cache.setLayerType(cache.layerType, null);
cache.layerType = undefined;
}
}
};
return Animation;
}(animation_common_1.AnimationBase);
exports.Animation = Animation;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var color_1 = __webpack_require__(27);
exports.Color = color_1.Color;
var trace_1 = __webpack_require__(15);
exports.traceEnabled = trace_1.isEnabled;
exports.traceWrite = trace_1.write;
exports.traceCategories = trace_1.categories;
var Properties;
(function(Properties) {
Properties.opacity = "opacity";
Properties.backgroundColor = "backgroundColor";
Properties.translate = "translate";
Properties.rotate = "rotate";
Properties.scale = "scale";
})(Properties = exports.Properties || (exports.Properties = {}));
var CubicBezierAnimationCurve = function() {
function CubicBezierAnimationCurve(x1, y1, x2, y2) {
this.x1 = x1;
this.y1 = y1;
this.x2 = x2;
this.y2 = y2;
}
return CubicBezierAnimationCurve;
}();
exports.CubicBezierAnimationCurve = CubicBezierAnimationCurve;
var AnimationBase = function() {
function AnimationBase(animationDefinitions, playSequentially) {
if (!animationDefinitions || animationDefinitions.length === 0) {
throw new Error("No animation definitions specified");
}
if (trace_1.isEnabled()) {
trace_1.write("Analyzing " + animationDefinitions.length + " animation definitions...", trace_1.categories.Animation);
}
this._propertyAnimations = new Array();
for (var i = 0, length_1 = animationDefinitions.length; i < length_1; i++) {
if (animationDefinitions[i].curve) {
animationDefinitions[i].curve = this._resolveAnimationCurve(animationDefinitions[i].curve);
}
this._propertyAnimations = this._propertyAnimations.concat(AnimationBase._createPropertyAnimations(animationDefinitions[i]));
}
if (this._propertyAnimations.length === 0) {
throw new Error("Nothing to animate.");
}
if (trace_1.isEnabled()) {
trace_1.write("Created " + this._propertyAnimations.length + " individual property animations.", trace_1.categories.Animation);
}
this._playSequentially = playSequentially;
}
AnimationBase.prototype.play = function() {
var _this = this;
if (this.isPlaying) {
throw new Error("Animation is already playing.");
}
var animationFinishedPromise = new Promise(function(resolve, reject) {
_this._resolve = resolve;
_this._reject = reject;
});
this.fixupAnimationPromise(animationFinishedPromise);
this._isPlaying = true;
return animationFinishedPromise;
};
AnimationBase.prototype.fixupAnimationPromise = function(promise) {
var _this = this;
promise.cancel = function() {
_this.cancel();
};
var _then = promise.then;
promise.then = function() {
var r = _then.apply(promise, arguments);
_this.fixupAnimationPromise(r);
return r;
};
var _catch = promise.catch;
promise.catch = function() {
var r = _catch.apply(promise, arguments);
_this.fixupAnimationPromise(r);
return r;
};
};
AnimationBase.prototype.cancel = function() {
if (!this.isPlaying) {
throw new Error("Animation is not currently playing.");
}
};
Object.defineProperty(AnimationBase.prototype, "isPlaying", {
get: function() {
return this._isPlaying;
},
enumerable: true,
configurable: true
});
AnimationBase.prototype._resolveAnimationFinishedPromise = function() {
this._isPlaying = false;
this._resolve();
};
AnimationBase.prototype._rejectAnimationFinishedPromise = function() {
this._isPlaying = false;
this._reject(new Error("Animation cancelled."));
};
AnimationBase._createPropertyAnimations = function(animationDefinition) {
if (!animationDefinition.target) {
throw new Error("No animation target specified.");
}
for (var item in animationDefinition) {
if (animationDefinition[item] === undefined) {
continue;
}
if ((item === Properties.opacity || item === Properties.rotate || item === "duration" || item === "delay" || item === "iterations") && typeof animationDefinition[item] !== "number") {
throw new Error("Property " + item + " must be valid number. Value: " + animationDefinition[item]);
} else if ((item === Properties.scale || item === Properties.translate) && (typeof animationDefinition[item].x !== "number" || typeof animationDefinition[item].y !== "number")) {
throw new Error("Property " + item + " must be valid Pair. Value: " + animationDefinition[item]);
} else if (item === Properties.backgroundColor && !color_1.Color.isValid(animationDefinition.backgroundColor)) {
throw new Error("Property " + item + " must be valid color. Value: " + animationDefinition[item]);
}
}
var propertyAnimations = new Array();
if (animationDefinition.opacity !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.opacity,
value: animationDefinition.opacity,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.backgroundColor !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.backgroundColor,
value: typeof animationDefinition.backgroundColor === "string" ? new color_1.Color(animationDefinition.backgroundColor) : animationDefinition.backgroundColor,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.translate !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.translate,
value: animationDefinition.translate,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.scale !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.scale,
value: animationDefinition.scale,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.rotate !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.rotate,
value: animationDefinition.rotate,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (propertyAnimations.length === 0) {
throw new Error("No animation property specified.");
}
return propertyAnimations;
};
AnimationBase._getAnimationInfo = function(animation) {
return JSON.stringify({
target: animation.target.id,
property: animation.property,
value: animation.value,
duration: animation.duration,
delay: animation.delay,
iterations: animation.iterations,
curve: animation.curve
});
};
return AnimationBase;
}();
exports.AnimationBase = AnimationBase;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
function lazy(action) {
var _value;
return function() {
return _value || (_value = action());
};
}
exports.default = lazy;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var color_1 = __webpack_require__(27);
var keyframe_animation_1 = __webpack_require__(50);
var converters_1 = __webpack_require__(55);
var animationProperties = {
"animation-name": function(info, declaration) {
return info.name = declaration.value;
},
"animation-duration": function(info, declaration) {
return info.duration = converters_1.timeConverter(declaration.value);
},
"animation-delay": function(info, declaration) {
return info.delay = converters_1.timeConverter(declaration.value);
},
"animation-timing-function": function(info, declaration) {
return info.curve = converters_1.animationTimingFunctionConverter(declaration.value);
},
"animation-iteration-count": function(info, declaration) {
return declaration.value === "infinite" ? info.iterations = Number.MAX_VALUE : info.iterations = converters_1.numberConverter(declaration.value);
},
"animation-direction": function(info, declaration) {
return info.isReverse = declaration.value === "reverse";
},
"animation-fill-mode": function(info, declaration) {
return info.isForwards = declaration.value === "forwards";
}
};
var CssAnimationParser = function() {
function CssAnimationParser() {}
CssAnimationParser.keyframeAnimationsFromCSSDeclarations = function(declarations) {
var animations = new Array();
var animationInfo = undefined;
if (declarations === null || declarations === undefined) {
return undefined;
}
for (var _i = 0, declarations_1 = declarations; _i < declarations_1.length; _i++) {
var declaration = declarations_1[_i];
if (declaration.property === "animation") {
keyframeAnimationsFromCSSProperty(declaration.value, animations);
} else {
var propertyHandler = animationProperties[declaration.property];
if (propertyHandler) {
if (animationInfo === undefined) {
animationInfo = new keyframe_animation_1.KeyframeAnimationInfo();
animations.push(animationInfo);
}
propertyHandler(animationInfo, declaration);
}
}
}
return animations.length === 0 ? undefined : animations;
};
CssAnimationParser.keyframesArrayFromCSS = function(cssKeyframes) {
var parsedKeyframes = new Array();
for (var _i = 0, _a = cssKeyframes.keyframes; _i < _a.length; _i++) {
var keyframe = _a[_i];
var declarations = parseKeyframeDeclarations(keyframe);
for (var _b = 0, _c = keyframe.values; _b < _c.length; _b++) {
var time_1 = _c[_b];
if (time_1 === "from") {
time_1 = 0;
} else if (time_1 === "to") {
time_1 = 1;
} else {
time_1 = parseFloat(time_1) / 100;
if (time_1 < 0) {
time_1 = 0;
}
if (time_1 > 100) {
time_1 = 100;
}
}
var current = parsedKeyframes[time_1];
if (current === undefined) {
current = {};
current.duration = time_1;
parsedKeyframes[time_1] = current;
}
for (var _d = 0, _e = keyframe.declarations; _d < _e.length; _d++) {
var declaration = _e[_d];
if (declaration.property === "animation-timing-function") {
current.curve = converters_1.animationTimingFunctionConverter(declaration.value);
}
}
current.declarations = declarations;
}
}
var array = new Array();
for (var parsedKeyframe in parsedKeyframes) {
array.push(parsedKeyframes[parsedKeyframe]);
}
array.sort(function(a, b) {
return a.duration - b.duration;
});
return array;
};
return CssAnimationParser;
}();
exports.CssAnimationParser = CssAnimationParser;
function keyframeAnimationsFromCSSProperty(value, animations) {
if (typeof value === "string") {
var values = value.split(/[,]+/);
for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
var parsedValue = values_1[_i];
var animationInfo = new keyframe_animation_1.KeyframeAnimationInfo();
var arr = parsedValue.trim().split(/[ ]+/);
if (arr.length > 0) {
animationInfo.name = arr[0];
}
if (arr.length > 1) {
animationInfo.duration = converters_1.timeConverter(arr[1]);
}
if (arr.length > 2) {
animationInfo.curve = converters_1.animationTimingFunctionConverter(arr[2]);
}
if (arr.length > 3) {
animationInfo.delay = converters_1.timeConverter(arr[3]);
}
if (arr.length > 4) {
animationInfo.iterations = parseInt(arr[4]);
}
if (arr.length > 5) {
animationInfo.isReverse = arr[4] === "reverse";
}
if (arr.length > 6) {
animationInfo.isForwards = arr[5] === "forwards";
}
if (arr.length > 7) {
throw new Error("Invalid value for animation: " + value);
}
animations.push(animationInfo);
}
}
}
function getTransformationValues(value) {
var newTransform = converters_1.transformConverter(value);
var array = new Array();
var values = undefined;
for (var transform in newTransform) {
switch (transform) {
case "scaleX":
array.push({
propertyName: "scaleX",
value: parseFloat(newTransform[transform])
});
break;

case "scaleY":
array.push({
propertyName: "scaleY",
value: parseFloat(newTransform[transform])
});
break;

case "scale":
case "scale3d":
values = newTransform[transform].split(",");
if (values.length === 2 || values.length === 3) {
array.push({
propertyName: "scaleX",
value: parseFloat(values[0])
});
array.push({
propertyName: "scaleY",
value: parseFloat(values[1])
});
}
break;

case "translateX":
array.push({
propertyName: "translateX",
value: parseFloat(newTransform[transform])
});
break;

case "translateY":
array.push({
propertyName: "translateY",
value: parseFloat(newTransform[transform])
});
break;

case "translate":
case "translate3d":
values = newTransform[transform].split(",");
if (values.length === 2 || values.length === 3) {
array.push({
propertyName: "translateX",
value: parseFloat(values[0])
});
array.push({
propertyName: "translateY",
value: parseFloat(values[1])
});
}
break;

case "rotate":
var text = newTransform[transform];
var val = parseFloat(text);
if (text.slice(-3) === "rad") {
val = val * (180 / Math.PI);
}
array.push({
propertyName: "rotate",
value: val
});
break;

case "none":
array.push({
propertyName: "scaleX",
value: 1
});
array.push({
propertyName: "scaleY",
value: 1
});
array.push({
propertyName: "translateX",
value: 0
});
array.push({
propertyName: "translateY",
value: 0
});
array.push({
propertyName: "rotate",
value: 0
});
break;
}
}
return array;
}
function parseKeyframeDeclarations(keyframe) {
var declarations = {};
var transforms = {
scale: undefined,
translate: undefined
};
for (var _i = 0, _a = keyframe.declarations; _i < _a.length; _i++) {
var declaration = _a[_i];
var propertyName = declaration.property;
var value = declaration.value;
if (propertyName === "opacity") {
declarations[propertyName] = parseFloat(value);
} else if (propertyName === "transform") {
var values = getTransformationValues(value);
if (values) {
for (var _b = 0, values_2 = values; _b < values_2.length; _b++) {
var pair = values_2[_b];
if (!preprocessAnimationValues(pair.propertyName, pair.value, transforms)) {
declarations[pair.propertyName] = pair.value;
}
}
}
delete declarations[propertyName];
} else if (propertyName === "backgroundColor" || propertyName === "background-color") {
declarations["backgroundColor"] = new color_1.Color(value);
} else {
declarations[propertyName] = value;
}
}
if (transforms.scale !== undefined) {
declarations["scale"] = transforms.scale;
}
if (transforms.translate !== undefined) {
declarations["translate"] = transforms.translate;
}
var array = new Array();
for (var declaration in declarations) {
var keyframeDeclaration = {};
keyframeDeclaration.property = declaration;
keyframeDeclaration.value = declarations[declaration];
array.push(keyframeDeclaration);
}
return array;
}
function preprocessAnimationValues(propertyName, value, transforms) {
if (propertyName === "scaleX") {
if (transforms.scale === undefined) {
transforms.scale = {
x: 1,
y: 1
};
}
transforms.scale.x = value;
return true;
}
if (propertyName === "scaleY") {
if (transforms.scale === undefined) {
transforms.scale = {
x: 1,
y: 1
};
}
transforms.scale.y = value;
return true;
}
if (propertyName === "translateX") {
if (transforms.translate === undefined) {
transforms.translate = {
x: 0,
y: 0
};
}
transforms.translate.x = value;
return true;
}
if (propertyName === "translateY") {
if (transforms.translate === undefined) {
transforms.translate = {
x: 0,
y: 0
};
}
transforms.translate.y = value;
return true;
}
return false;
}
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var color_1 = __webpack_require__(27);
var animation_1 = __webpack_require__(51);
function colorConverter(value) {
return new color_1.Color(value);
}
exports.colorConverter = colorConverter;
function floatConverter(value) {
var result = parseFloat(value);
return result;
}
exports.floatConverter = floatConverter;
function fontSizeConverter(value) {
return floatConverter(value);
}
exports.fontSizeConverter = fontSizeConverter;
exports.numberConverter = parseFloat;
function opacityConverter(value) {
var result = parseFloat(value);
result = Math.max(0, result);
result = Math.min(1, result);
return result;
}
exports.opacityConverter = opacityConverter;
function timeConverter(value) {
var result = parseFloat(value);
if (value.indexOf("ms") === -1) {
result = result * 1e3;
}
return Math.max(0, result);
}
exports.timeConverter = timeConverter;
function bezieArgumentConverter(value) {
var result = parseFloat(value);
result = Math.max(0, result);
result = Math.min(1, result);
return result;
}
exports.bezieArgumentConverter = bezieArgumentConverter;
function animationTimingFunctionConverter(value) {
var result = "ease";
switch (value) {
case "ease":
result = "ease";
break;

case "linear":
result = "linear";
break;

case "ease-in":
result = "easeIn";
break;

case "ease-out":
result = "easeOut";
break;

case "ease-in-out":
result = "easeInOut";
break;

case "spring":
result = "spring";
break;

default:
if (value.indexOf("cubic-bezier(") === 0) {
var bezierArr = value.substring(13).split(/[,]+/);
if (bezierArr.length !== 4) {
throw new Error("Invalid value for animation: " + value);
}
result = new animation_1.CubicBezierAnimationCurve(bezieArgumentConverter(bezierArr[0]), bezieArgumentConverter(bezierArr[1]), bezieArgumentConverter(bezierArr[2]), bezieArgumentConverter(bezierArr[3]));
} else {
throw new Error("Invalid value for animation: " + value);
}
break;
}
return result;
}
exports.animationTimingFunctionConverter = animationTimingFunctionConverter;
function transformConverter(value) {
if (value === "none") {
var operations = {};
operations[value] = value;
return operations;
} else if (typeof value === "string") {
var operations = {};
var operator = "";
var pos = 0;
while (pos < value.length) {
if (value[pos] === " " || value[pos] === ",") {
pos++;
} else if (value[pos] === "(") {
var start = pos + 1;
while (pos < value.length && value[pos] !== ")") {
pos++;
}
var operand = value.substring(start, pos);
operations[operator] = operand.trim();
operator = "";
pos++;
} else {
operator += value[pos++];
}
}
return operations;
} else {
return undefined;
}
}
exports.transformConverter = transformConverter;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var gestures_common_1 = __webpack_require__(57);
var utils_1 = __webpack_require__(14);
__export(__webpack_require__(57));
var TapAndDoubleTapGestureListener;
function initializeTapAndDoubleTapGestureListener() {
if (TapAndDoubleTapGestureListener) {
return;
}
var TapAndDoubleTapGestureListenerImpl = function(_super) {
__extends(TapAndDoubleTapGestureListenerImpl, _super);
function TapAndDoubleTapGestureListenerImpl(observer, target, type) {
var _this = _super.call(this) || this;
_this._observer = observer;
_this._target = target;
_this._type = type;
return global.__native(_this);
}
TapAndDoubleTapGestureListenerImpl.prototype.onSingleTapUp = function(motionEvent) {
if (this._type & gestures_common_1.GestureTypes.tap) {
var args = _getArgs(gestures_common_1.GestureTypes.tap, this._target, motionEvent);
_executeCallback(this._observer, args);
}
return true;
};
TapAndDoubleTapGestureListenerImpl.prototype.onDoubleTap = function(motionEvent) {
if (this._type & gestures_common_1.GestureTypes.doubleTap) {
var args = _getArgs(gestures_common_1.GestureTypes.doubleTap, this._target, motionEvent);
_executeCallback(this._observer, args);
}
return true;
};
TapAndDoubleTapGestureListenerImpl.prototype.onDown = function(motionEvent) {
return true;
};
TapAndDoubleTapGestureListenerImpl.prototype.onLongPress = function(motionEvent) {
if (this._type & gestures_common_1.GestureTypes.longPress) {
var args = _getArgs(gestures_common_1.GestureTypes.longPress, this._target, motionEvent);
_executeCallback(this._observer, args);
}
};
return TapAndDoubleTapGestureListenerImpl;
}(android.view.GestureDetector.SimpleOnGestureListener);
TapAndDoubleTapGestureListener = TapAndDoubleTapGestureListenerImpl;
}
var PinchGestureListener;
function initializePinchGestureListener() {
if (PinchGestureListener) {
return;
}
var PinchGestureListenerImpl = function(_super) {
__extends(PinchGestureListenerImpl, _super);
function PinchGestureListenerImpl(observer, target) {
var _this = _super.call(this) || this;
_this._observer = observer;
_this._target = target;
_this._density = utils_1.layout.getDisplayDensity();
return global.__native(_this);
}
PinchGestureListenerImpl.prototype.onScaleBegin = function(detector) {
this._scale = detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, gestures_common_1.GestureStateTypes.began);
_executeCallback(this._observer, args);
return true;
};
PinchGestureListenerImpl.prototype.onScale = function(detector) {
this._scale *= detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, gestures_common_1.GestureStateTypes.changed);
_executeCallback(this._observer, args);
return true;
};
PinchGestureListenerImpl.prototype.onScaleEnd = function(detector) {
this._scale *= detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, gestures_common_1.GestureStateTypes.ended);
_executeCallback(this._observer, args);
};
return PinchGestureListenerImpl;
}(android.view.ScaleGestureDetector.SimpleOnScaleGestureListener);
PinchGestureListener = PinchGestureListenerImpl;
}
var SwipeGestureListener;
function initializeSwipeGestureListener() {
if (SwipeGestureListener) {
return;
}
var SwipeGestureListenerImpl = function(_super) {
__extends(SwipeGestureListenerImpl, _super);
function SwipeGestureListenerImpl(observer, target) {
var _this = _super.call(this) || this;
_this._observer = observer;
_this._target = target;
return global.__native(_this);
}
SwipeGestureListenerImpl.prototype.onDown = function(motionEvent) {
return true;
};
SwipeGestureListenerImpl.prototype.onFling = function(initialEvent, currentEvent, velocityX, velocityY) {
var result = false;
var args;
try {
var deltaY = currentEvent.getY() - initialEvent.getY();
var deltaX = currentEvent.getX() - initialEvent.getX();
if (Math.abs(deltaX) > Math.abs(deltaY)) {
if (Math.abs(deltaX) > SWIPE_THRESHOLD && Math.abs(velocityX) > SWIPE_VELOCITY_THRESHOLD) {
if (deltaX > 0) {
args = _getSwipeArgs(gestures_common_1.SwipeDirection.right, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
} else {
args = _getSwipeArgs(gestures_common_1.SwipeDirection.left, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
}
}
} else {
if (Math.abs(deltaY) > SWIPE_THRESHOLD && Math.abs(velocityY) > SWIPE_VELOCITY_THRESHOLD) {
if (deltaY > 0) {
args = _getSwipeArgs(gestures_common_1.SwipeDirection.down, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
} else {
args = _getSwipeArgs(gestures_common_1.SwipeDirection.up, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
}
}
}
} catch (ex) {}
return result;
};
return SwipeGestureListenerImpl;
}(android.view.GestureDetector.SimpleOnGestureListener);
SwipeGestureListener = SwipeGestureListenerImpl;
}
var SWIPE_THRESHOLD = 100;
var SWIPE_VELOCITY_THRESHOLD = 100;
var INVALID_POINTER_ID = -1;
var TO_DEGREES = 180 / Math.PI;
function observe(target, type, callback, context) {
var observer = new GesturesObserver(target, callback, context);
observer.observe(type);
return observer;
}
exports.observe = observe;
var GesturesObserver = function(_super) {
__extends(GesturesObserver, _super);
function GesturesObserver() {
return _super !== null && _super.apply(this, arguments) || this;
}
GesturesObserver.prototype.observe = function(type) {
var _this = this;
if (this.target) {
this.type = type;
this._onTargetLoaded = function(args) {
_this._attach(_this.target, type);
};
this._onTargetUnloaded = function(args) {
_this._detach();
};
this.target.on("loaded", this._onTargetLoaded);
this.target.on("unloaded", this._onTargetUnloaded);
if (this.target.isLoaded) {
this._attach(this.target, type);
}
}
};
GesturesObserver.prototype.disconnect = function() {
this._detach();
if (this.target) {
this.target.off("loaded", this._onTargetLoaded);
this.target.off("unloaded", this._onTargetUnloaded);
this._onTargetLoaded = null;
this._onTargetUnloaded = null;
}
_super.prototype.disconnect.call(this);
};
GesturesObserver.prototype._detach = function() {
this._notifyTouch = false;
this._simpleGestureDetector = null;
this._scaleGestureDetector = null;
this._swipeGestureDetector = null;
this._panGestureDetector = null;
this._rotateGestureDetector = null;
this._eventData = null;
};
GesturesObserver.prototype._attach = function(target, type) {
this._detach();
if (type & gestures_common_1.GestureTypes.tap || type & gestures_common_1.GestureTypes.doubleTap || type & gestures_common_1.GestureTypes.longPress) {
initializeTapAndDoubleTapGestureListener();
this._simpleGestureDetector = new android.support.v4.view.GestureDetectorCompat(target._context, new TapAndDoubleTapGestureListener(this, this.target, type));
}
if (type & gestures_common_1.GestureTypes.pinch) {
initializePinchGestureListener();
this._scaleGestureDetector = new android.view.ScaleGestureDetector(target._context, new PinchGestureListener(this, this.target));
}
if (type & gestures_common_1.GestureTypes.swipe) {
initializeSwipeGestureListener();
this._swipeGestureDetector = new android.support.v4.view.GestureDetectorCompat(target._context, new SwipeGestureListener(this, this.target));
}
if (type & gestures_common_1.GestureTypes.pan) {
this._panGestureDetector = new CustomPanGestureDetector(this, this.target);
}
if (type & gestures_common_1.GestureTypes.rotation) {
this._rotateGestureDetector = new CustomRotateGestureDetector(this, this.target);
}
if (type & gestures_common_1.GestureTypes.touch) {
this._notifyTouch = true;
}
};
GesturesObserver.prototype.androidOnTouchEvent = function(motionEvent) {
if (this._notifyTouch) {
if (!this._eventData) {
this._eventData = new TouchGestureEventData();
}
this._eventData.prepare(this.target, motionEvent);
_executeCallback(this, this._eventData);
}
if (this._simpleGestureDetector) {
this._simpleGestureDetector.onTouchEvent(motionEvent);
}
if (this._scaleGestureDetector) {
this._scaleGestureDetector.onTouchEvent(motionEvent);
}
if (this._swipeGestureDetector) {
this._swipeGestureDetector.onTouchEvent(motionEvent);
}
if (this._panGestureDetector) {
this._panGestureDetector.onTouchEvent(motionEvent);
}
if (this._rotateGestureDetector) {
this._rotateGestureDetector.onTouchEvent(motionEvent);
}
};
return GesturesObserver;
}(gestures_common_1.GesturesObserverBase);
exports.GesturesObserver = GesturesObserver;
function _getArgs(type, view, e) {
return {
type: type,
view: view,
android: e,
ios: undefined,
object: view,
eventName: gestures_common_1.toString(type)
};
}
function _getSwipeArgs(direction, view, initialEvent, currentEvent) {
return {
type: gestures_common_1.GestureTypes.swipe,
view: view,
android: {
initial: initialEvent,
current: currentEvent
},
direction: direction,
ios: undefined,
object: view,
eventName: gestures_common_1.toString(gestures_common_1.GestureTypes.swipe)
};
}
function _getPanArgs(deltaX, deltaY, view, state, initialEvent, currentEvent) {
return {
type: gestures_common_1.GestureTypes.pan,
view: view,
android: {
initial: initialEvent,
current: currentEvent
},
deltaX: deltaX,
deltaY: deltaY,
ios: undefined,
object: view,
eventName: gestures_common_1.toString(gestures_common_1.GestureTypes.pan),
state: state
};
}
function _executeCallback(observer, args) {
if (observer && observer.callback) {
observer.callback.call(observer._context, args);
}
}
var PinchGestureEventData = function() {
function PinchGestureEventData(view, android, scale, object, state) {
this.view = view;
this.android = android;
this.scale = scale;
this.object = object;
this.state = state;
this.type = gestures_common_1.GestureTypes.pinch;
this.eventName = gestures_common_1.toString(gestures_common_1.GestureTypes.pinch);
}
PinchGestureEventData.prototype.getFocusX = function() {
return this.android.getFocusX() / utils_1.layout.getDisplayDensity();
};
PinchGestureEventData.prototype.getFocusY = function() {
return this.android.getFocusY() / utils_1.layout.getDisplayDensity();
};
return PinchGestureEventData;
}();
var CustomPanGestureDetector = function() {
function CustomPanGestureDetector(observer, target) {
this.observer = observer;
this.target = target;
this.isTracking = false;
this.density = utils_1.layout.getDisplayDensity();
}
CustomPanGestureDetector.prototype.onTouchEvent = function(event) {
switch (event.getActionMasked()) {
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
this.trackStop(event, false);
break;

case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
case android.view.MotionEvent.ACTION_POINTER_UP:
this.trackStop(event, true);
break;

case android.view.MotionEvent.ACTION_MOVE:
if (!this.isTracking) {
this.trackStart(event);
}
this.trackChange(event);
break;
}
return true;
};
CustomPanGestureDetector.prototype.trackStop = function(currentEvent, cahceEvent) {
if (this.isTracking) {
var args = _getPanArgs(this.deltaX, this.deltaY, this.target, gestures_common_1.GestureStateTypes.ended, null, currentEvent);
_executeCallback(this.observer, args);
this.deltaX = undefined;
this.deltaY = undefined;
this.isTracking = false;
}
if (cahceEvent) {
this.lastEventCache = currentEvent;
} else {
this.lastEventCache = undefined;
}
};
CustomPanGestureDetector.prototype.trackStart = function(currentEvent) {
var inital = this.getEventCoordinates(this.lastEventCache ? this.lastEventCache : currentEvent);
this.initialX = inital.x;
this.initialY = inital.y;
this.isTracking = true;
var args = _getPanArgs(0, 0, this.target, gestures_common_1.GestureStateTypes.began, null, currentEvent);
_executeCallback(this.observer, args);
};
CustomPanGestureDetector.prototype.trackChange = function(currentEvent) {
var current = this.getEventCoordinates(currentEvent);
this.deltaX = current.x - this.initialX;
this.deltaY = current.y - this.initialY;
var args = _getPanArgs(this.deltaX, this.deltaY, this.target, gestures_common_1.GestureStateTypes.changed, null, currentEvent);
_executeCallback(this.observer, args);
};
CustomPanGestureDetector.prototype.getEventCoordinates = function(event) {
var count = event.getPointerCount();
if (count === 1) {
return {
x: event.getRawX() / this.density,
y: event.getRawY() / this.density
};
} else {
var offX = event.getRawX() - event.getX();
var offY = event.getRawY() - event.getY();
var res = {
x: 0,
y: 0
};
for (var i = 0; i < count; i++) {
res.x += event.getX(i) + offX;
res.y += event.getY(i) + offY;
}
res.x /= count * this.density;
res.y /= count * this.density;
return res;
}
};
return CustomPanGestureDetector;
}();
var CustomRotateGestureDetector = function() {
function CustomRotateGestureDetector(observer, target) {
this.observer = observer;
this.target = target;
this.trackedPtrId1 = INVALID_POINTER_ID;
this.trackedPtrId2 = INVALID_POINTER_ID;
}
Object.defineProperty(CustomRotateGestureDetector.prototype, "isTracking", {
get: function() {
return this.trackedPtrId1 !== INVALID_POINTER_ID && this.trackedPtrId2 !== INVALID_POINTER_ID;
},
enumerable: true,
configurable: true
});
CustomRotateGestureDetector.prototype.onTouchEvent = function(event) {
var pointerID = event.getPointerId(event.getActionIndex());
var wasTracking = this.isTracking;
switch (event.getActionMasked()) {
case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
var assigned = false;
if (this.trackedPtrId1 === INVALID_POINTER_ID && pointerID !== this.trackedPtrId2) {
this.trackedPtrId1 = pointerID;
assigned = true;
} else if (this.trackedPtrId2 === INVALID_POINTER_ID && pointerID !== this.trackedPtrId1) {
this.trackedPtrId2 = pointerID;
assigned = true;
}
if (assigned && this.isTracking) {
this.angle = 0;
this.initalPointersAngle = this.getPointersAngle(event);
this.executeCallback(event, gestures_common_1.GestureStateTypes.began);
}
break;

case android.view.MotionEvent.ACTION_MOVE:
if (this.isTracking) {
this.updateAngle(event);
this.executeCallback(event, gestures_common_1.GestureStateTypes.changed);
}
break;

case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_POINTER_UP:
if (pointerID === this.trackedPtrId1) {
this.trackedPtrId1 = INVALID_POINTER_ID;
} else if (pointerID === this.trackedPtrId2) {
this.trackedPtrId2 = INVALID_POINTER_ID;
}
if (wasTracking && !this.isTracking) {
this.executeCallback(event, gestures_common_1.GestureStateTypes.ended);
}
break;

case android.view.MotionEvent.ACTION_CANCEL:
this.trackedPtrId1 = INVALID_POINTER_ID;
this.trackedPtrId2 = INVALID_POINTER_ID;
if (wasTracking) {
this.executeCallback(event, gestures_common_1.GestureStateTypes.cancelled);
}
break;
}
return true;
};
CustomRotateGestureDetector.prototype.executeCallback = function(event, state) {
var args = {
type: gestures_common_1.GestureTypes.rotation,
view: this.target,
android: event,
rotation: this.angle,
ios: undefined,
object: this.target,
eventName: gestures_common_1.toString(gestures_common_1.GestureTypes.rotation),
state: state
};
_executeCallback(this.observer, args);
};
CustomRotateGestureDetector.prototype.updateAngle = function(event) {
var newPointersAngle = this.getPointersAngle(event);
var result = (newPointersAngle - this.initalPointersAngle) * TO_DEGREES % 360;
if (result < -180) {
result += 360;
}
if (result > 180) {
result -= 360;
}
this.angle = result;
};
CustomRotateGestureDetector.prototype.getPointersAngle = function(event) {
var firstX = event.getX(event.findPointerIndex(this.trackedPtrId1));
var firstY = event.getY(event.findPointerIndex(this.trackedPtrId1));
var secondX = event.getX(event.findPointerIndex(this.trackedPtrId2));
var secondY = event.getY(event.findPointerIndex(this.trackedPtrId2));
return Math.atan2(secondY - firstY, secondX - firstX);
};
return CustomRotateGestureDetector;
}();
var Pointer = function() {
function Pointer(id, event) {
this.event = event;
this.ios = undefined;
this.android = id;
}
Pointer.prototype.getX = function() {
return this.event.getX(this.android) / utils_1.layout.getDisplayDensity();
};
Pointer.prototype.getY = function() {
return this.event.getY(this.android) / utils_1.layout.getDisplayDensity();
};
return Pointer;
}();
var TouchGestureEventData = function() {
function TouchGestureEventData() {
this.eventName = gestures_common_1.toString(gestures_common_1.GestureTypes.touch);
this.type = gestures_common_1.GestureTypes.touch;
this.ios = undefined;
}
TouchGestureEventData.prototype.prepare = function(view, e) {
this.view = view;
this.object = view;
this.android = e;
this.action = this.getActionType(e);
this._activePointers = undefined;
this._allPointers = undefined;
};
TouchGestureEventData.prototype.getPointerCount = function() {
return this.android.getPointerCount();
};
TouchGestureEventData.prototype.getActivePointers = function() {
if (!this._activePointers) {
this._activePointers = [ new Pointer(this.android.getActionIndex(), this.android) ];
}
return this._activePointers;
};
TouchGestureEventData.prototype.getAllPointers = function() {
if (!this._allPointers) {
this._allPointers = [];
for (var i = 0; i < this.getPointerCount(); i++) {
this._allPointers.push(new Pointer(i, this.android));
}
}
return this._allPointers;
};
TouchGestureEventData.prototype.getX = function() {
return this.getActivePointers()[0].getX();
};
TouchGestureEventData.prototype.getY = function() {
return this.getActivePointers()[0].getY();
};
TouchGestureEventData.prototype.getActionType = function(e) {
switch (e.getActionMasked()) {
case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
return gestures_common_1.TouchAction.down;

case android.view.MotionEvent.ACTION_MOVE:
return gestures_common_1.TouchAction.move;

case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_POINTER_UP:
return gestures_common_1.TouchAction.up;

case android.view.MotionEvent.ACTION_CANCEL:
return gestures_common_1.TouchAction.cancel;
}
return "";
};
return TouchGestureEventData;
}();
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var GestureTypes;
(function(GestureTypes) {
GestureTypes[GestureTypes["tap"] = 1] = "tap";
GestureTypes[GestureTypes["doubleTap"] = 2] = "doubleTap";
GestureTypes[GestureTypes["pinch"] = 4] = "pinch";
GestureTypes[GestureTypes["pan"] = 8] = "pan";
GestureTypes[GestureTypes["swipe"] = 16] = "swipe";
GestureTypes[GestureTypes["rotation"] = 32] = "rotation";
GestureTypes[GestureTypes["longPress"] = 64] = "longPress";
GestureTypes[GestureTypes["touch"] = 128] = "touch";
})(GestureTypes = exports.GestureTypes || (exports.GestureTypes = {}));
var GestureStateTypes;
(function(GestureStateTypes) {
GestureStateTypes[GestureStateTypes["cancelled"] = 0] = "cancelled";
GestureStateTypes[GestureStateTypes["began"] = 1] = "began";
GestureStateTypes[GestureStateTypes["changed"] = 2] = "changed";
GestureStateTypes[GestureStateTypes["ended"] = 3] = "ended";
})(GestureStateTypes = exports.GestureStateTypes || (exports.GestureStateTypes = {}));
var SwipeDirection;
(function(SwipeDirection) {
SwipeDirection[SwipeDirection["right"] = 1] = "right";
SwipeDirection[SwipeDirection["left"] = 2] = "left";
SwipeDirection[SwipeDirection["up"] = 4] = "up";
SwipeDirection[SwipeDirection["down"] = 8] = "down";
})(SwipeDirection = exports.SwipeDirection || (exports.SwipeDirection = {}));
var TouchAction;
(function(TouchAction) {
TouchAction.down = "down";
TouchAction.up = "up";
TouchAction.move = "move";
TouchAction.cancel = "cancel";
})(TouchAction = exports.TouchAction || (exports.TouchAction = {}));
function toString(type, separator) {
var types = new Array();
if (type & GestureTypes.tap) {
types.push("tap");
}
if (type & GestureTypes.doubleTap) {
types.push("doubleTap");
}
if (type & GestureTypes.pinch) {
types.push("pinch");
}
if (type & GestureTypes.pan) {
types.push("pan");
}
if (type & GestureTypes.swipe) {
types.push("swipe");
}
if (type & GestureTypes.rotation) {
types.push("rotation");
}
if (type & GestureTypes.longPress) {
types.push("longPress");
}
if (type & GestureTypes.touch) {
types.push("touch");
}
return types.join(separator);
}
exports.toString = toString;
function fromString(type) {
var t = type.trim().toLowerCase();
if (t === "tap") {
return GestureTypes.tap;
} else if (t === "doubletap") {
return GestureTypes.doubleTap;
} else if (t === "pinch") {
return GestureTypes.pinch;
} else if (t === "pan") {
return GestureTypes.pan;
} else if (t === "swipe") {
return GestureTypes.swipe;
} else if (t === "rotation") {
return GestureTypes.rotation;
} else if (t === "longpress") {
return GestureTypes.longPress;
} else if (t === "touch") {
return GestureTypes.touch;
}
return undefined;
}
exports.fromString = fromString;
var GesturesObserverBase = function() {
function GesturesObserverBase(target, callback, context) {
this._target = target;
this._callback = callback;
this._context = context;
}
Object.defineProperty(GesturesObserverBase.prototype, "callback", {
get: function() {
return this._callback;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GesturesObserverBase.prototype, "target", {
get: function() {
return this._target;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GesturesObserverBase.prototype, "context", {
get: function() {
return this._context;
},
enumerable: true,
configurable: true
});
GesturesObserverBase.prototype.disconnect = function() {
if (this.target) {
var list = this.target.getGestureObservers(this.type);
if (list && list.length > 0) {
for (var i = 0; i < list.length; i++) {
if (list[i].callback === this.callback) {
break;
}
}
list.length = 0;
this.target._gestureObservers[this.type] = undefined;
delete this.target._gestureObservers[this.type];
}
}
this._target = null;
this._callback = null;
this._context = null;
};
return GesturesObserverBase;
}();
exports.GesturesObserverBase = GesturesObserverBase;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var platform_1 = __webpack_require__(25);
var file_system_1 = __webpack_require__(22);
var trace = __webpack_require__(15);
var appModule = __webpack_require__(18);
var MIN_WH = "minWH";
var MIN_W = "minW";
var MIN_H = "minH";
var PRIORITY_STEP = 1e4;
var minWidthHeightQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_WH) === 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_WH.length));
if (isNaN(numVal)) {
return -1;
}
var actualLength = Math.min(context.width, context.height);
if (actualLength < numVal) {
return -1;
}
return PRIORITY_STEP - (actualLength - numVal);
}
};
var minWidthQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_W) === 0 && value.indexOf(MIN_WH) < 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_W.length));
if (isNaN(numVal)) {
return -1;
}
var actualWidth = context.width;
if (actualWidth < numVal) {
return -1;
}
return PRIORITY_STEP - (actualWidth - numVal);
}
};
var minHeightQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_H) === 0 && value.indexOf(MIN_WH) < 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_H.length));
if (isNaN(numVal)) {
return -1;
}
var actualHeight = context.height;
if (actualHeight < numVal) {
return -1;
}
return PRIORITY_STEP - (actualHeight - numVal);
}
};
var platformQualifier = {
isMatch: function(value) {
return value === "android" || value === "ios";
},
getMatchValue: function(value, context) {
return value === context.os.toLowerCase() ? 1 : -1;
}
};
var orientationQualifier = {
isMatch: function(value) {
return value === "land" || value === "port";
},
getMatchValue: function(value, context) {
var isLandscape = context.width > context.height ? 1 : -1;
return value === "land" ? isLandscape : -isLandscape;
}
};
var supportedQualifiers = [ minWidthHeightQualifier, minWidthQualifier, minHeightQualifier, orientationQualifier, platformQualifier ];
var FileNameResolver = function() {
function FileNameResolver(context) {
this._cache = {};
this._context = context;
}
FileNameResolver.prototype.resolveFileName = function(path, ext) {
var key = path + ext;
var result = this._cache[key];
if (result === undefined) {
result = this.resolveFileNameImpl(path, ext);
this._cache[key] = result;
}
return result;
};
FileNameResolver.prototype.clearCache = function() {
this._cache = {};
};
FileNameResolver.prototype.resolveFileNameImpl = function(path, ext) {
var result = null;
path = file_system_1.path.normalize(path);
ext = "." + ext;
var candidates = this.getFileCandidatesFromFolder(path, ext);
result = _findFileMatch(path, ext, candidates, this._context);
return result;
};
FileNameResolver.prototype.getFileCandidatesFromFolder = function(path, ext) {
var candidates = new Array();
var folderPath = path.substring(0, path.lastIndexOf(file_system_1.path.separator) + 1);
if (file_system_1.Folder.exists(folderPath)) {
var folder = file_system_1.Folder.fromPath(folderPath);
folder.eachEntity(function(e) {
if (e instanceof file_system_1.File) {
var file = e;
if (file.path.indexOf(path) === 0 && file.extension === ext) {
candidates.push(file.path);
}
}
return true;
});
} else {
if (trace.isEnabled()) {
trace.write("Could not find folder " + folderPath + " when loading " + path + ext, trace.categories.Navigation);
}
}
return candidates;
};
return FileNameResolver;
}();
exports.FileNameResolver = FileNameResolver;
function _findFileMatch(path, ext, candidates, context) {
var bestValue = -1;
var result = null;
for (var i = 0; i < candidates.length; i++) {
var filePath = candidates[i];
var qualifiersStr = filePath.substr(path.length, filePath.length - path.length - ext.length);
var qualifiers = qualifiersStr.split(".");
var value = checkQualifiers(qualifiers, context);
if (value >= 0 && value > bestValue) {
bestValue = value;
result = candidates[i];
}
}
return result;
}
exports._findFileMatch = _findFileMatch;
function checkQualifiers(qualifiers, context) {
var result = 0;
for (var i = 0; i < qualifiers.length; i++) {
if (qualifiers[i]) {
var value = checkQualifier(qualifiers[i], context);
if (value < 0) {
return -1;
}
result += value;
}
}
return result;
}
function checkQualifier(value, context) {
for (var i = 0; i < supportedQualifiers.length; i++) {
if (supportedQualifiers[i].isMatch(value)) {
var result = supportedQualifiers[i].getMatchValue(value, context);
if (result > 0) {
result += (supportedQualifiers.length - i) * PRIORITY_STEP;
}
return result;
}
}
return -1;
}
var resolverInstance;
function resolveFileName(path, ext) {
if (!resolverInstance) {
resolverInstance = new FileNameResolver({
width: platform_1.screen.mainScreen.widthDIPs,
height: platform_1.screen.mainScreen.heightDIPs,
os: platform_1.device.os,
deviceType: platform_1.device.deviceType
});
}
return resolverInstance.resolveFileName(path, ext);
}
exports.resolveFileName = resolveFileName;
appModule.on("cssChanged", function(args) {
return resolverInstance = undefined;
});
appModule.on("livesync", function(args) {
return resolverInstance && resolverInstance.clearCache();
});
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var debug_1 = __webpack_require__(36);
var xml = __webpack_require__(60);
var file_system_1 = __webpack_require__(22);
var types_1 = __webpack_require__(17);
var component_builder_1 = __webpack_require__(62);
var platform_1 = __webpack_require__(25);
var file_name_resolver_1 = __webpack_require__(58);
var ios = platform_1.platformNames.ios.toLowerCase();
var android = platform_1.platformNames.android.toLowerCase();
var defaultNameSpaceMatcher = /tns\.xsd$/i;
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(15);
}
}
function parse(value, context) {
if (typeof value === "function") {
return value();
} else {
var exports_1 = context ? getExports(context) : undefined;
var componentModule = parseInternal(value, exports_1);
if (componentModule) {
return componentModule.component;
}
return undefined;
}
}
exports.parse = parse;
function parseMultipleTemplates(value, context) {
var dummyComponent = "<ListView><ListView.itemTemplates>" + value + "</ListView.itemTemplates></ListView>";
return parseInternal(dummyComponent, context).component["itemTemplates"];
}
exports.parseMultipleTemplates = parseMultipleTemplates;
function parseInternal(value, context, uri, moduleNamePath) {
var start;
var ui;
var errorFormat = debug_1.debug && uri ? xml2ui.SourceErrorFormat(uri) : xml2ui.PositionErrorFormat;
var componentSourceTracker = debug_1.debug && uri ? xml2ui.ComponentSourceTracker(uri) : function() {};
(start = new xml2ui.XmlStringParser(errorFormat)).pipe(new xml2ui.PlatformFilter()).pipe(new xml2ui.XmlStateParser(ui = new xml2ui.ComponentParser(context, errorFormat, componentSourceTracker, moduleNamePath)));
start.parse(value);
return ui.rootComponentModule;
}
function loadCustomComponent(componentPath, componentName, attributes, context, parentPage) {
if (!parentPage && context) {
parentPage = context["_parentPage"];
delete context["_parentPage"];
}
var result;
componentPath = componentPath.replace("~/", "");
var moduleName = componentPath + "/" + componentName;
var fullComponentPathFilePathWithoutExt = componentPath;
if (!file_system_1.File.exists(componentPath) || componentPath === "." || componentPath === "./") {
fullComponentPathFilePathWithoutExt = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, componentPath, componentName);
}
var xmlFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "xml");
if (xmlFilePath) {
var jsFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "js");
var subExports = context;
if (global.moduleExists(moduleName)) {
subExports = global.loadModule(moduleName);
} else {
if (jsFilePath) {
subExports = global.loadModule(jsFilePath);
}
}
if (!subExports) {
subExports = {};
}
subExports["_parentPage"] = parentPage;
result = loadInternal(xmlFilePath, subExports);
if (types_1.isDefined(result) && types_1.isDefined(result.component) && types_1.isDefined(attributes)) {
for (var attr in attributes) {
component_builder_1.setPropertyValue(result.component, subExports, context, attr, attributes[attr]);
}
}
} else {
result = component_builder_1.getComponentModule(componentName, componentPath, attributes, context);
}
var cssFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "css");
if (cssFilePath) {
if (parentPage && typeof parentPage.addCssFile === "function") {
parentPage.addCssFile(cssFilePath);
} else {
ensureTrace();
trace.write("CSS file found but no page specified. Please specify page in the options!", trace.categories.Error, trace.messageType.error);
}
}
return result;
}
function load(pathOrOptions, context) {
var viewToReturn;
var componentModule;
if (!context) {
if (!types_1.isString(pathOrOptions)) {
var options = pathOrOptions;
componentModule = loadCustomComponent(options.path, options.name, options.attributes, options.exports, options.page);
} else {
var path_1 = pathOrOptions;
componentModule = loadInternal(path_1);
}
} else {
var path_2 = pathOrOptions;
componentModule = loadInternal(path_2, context);
}
if (componentModule) {
viewToReturn = componentModule.component;
}
return viewToReturn;
}
exports.load = load;
function loadPage(moduleNamePath, fileName, context) {
var componentModule;
if (file_system_1.File.exists(fileName)) {
var file = file_system_1.File.fromPath(fileName);
var onError = function(error) {
throw new Error("Error loading file " + fileName + " :" + error.message);
};
var text = file.readTextSync(onError);
componentModule = parseInternal(text, context, fileName, moduleNamePath);
}
if (componentModule && componentModule.component) {
componentModule.component.exports = context;
}
return componentModule.component;
}
exports.loadPage = loadPage;
function loadInternal(fileName, context) {
var componentModule;
if (file_system_1.File.exists(fileName)) {
var file = file_system_1.File.fromPath(fileName);
var onError = function(error) {
throw new Error("Error loading file " + fileName + " :" + error.message);
};
var text = file.readTextSync(onError);
componentModule = parseInternal(text, context, fileName);
}
if (componentModule && componentModule.component) {
componentModule.component.exports = context;
}
return componentModule;
}
function getExports(instance) {
var isView = !!instance._domId;
if (!isView) {
return instance.exports || instance;
}
var exportObject = instance.exports;
var parent = instance.parent;
while (exportObject === undefined && parent) {
exportObject = parent.exports;
parent = parent.parent;
}
return exportObject;
}
var xml2ui;
(function(xml2ui) {
var XmlProducerBase = function() {
function XmlProducerBase() {}
XmlProducerBase.prototype.pipe = function(next) {
this._next = next;
return next;
};
XmlProducerBase.prototype.next = function(args) {
this._next.parse(args);
};
return XmlProducerBase;
}();
xml2ui.XmlProducerBase = XmlProducerBase;
var XmlStringParser = function(_super) {
__extends(XmlStringParser, _super);
function XmlStringParser(error) {
var _this = _super.call(this) || this;
_this.error = error || PositionErrorFormat;
return _this;
}
XmlStringParser.prototype.parse = function(value) {
var _this = this;
var xmlParser = new xml.XmlParser(function(args) {
try {
_this.next(args);
} catch (e) {
throw _this.error(e, args.position);
}
}, function(e, p) {
throw _this.error(e, p);
}, true);
if (types_1.isString(value)) {
xmlParser.parse(value);
}
};
return XmlStringParser;
}(XmlProducerBase);
xml2ui.XmlStringParser = XmlStringParser;
function PositionErrorFormat(e, p) {
return new debug_1.ScopeError(e, "Parsing XML at " + p.line + ":" + p.column);
}
xml2ui.PositionErrorFormat = PositionErrorFormat;
function SourceErrorFormat(uri) {
return function(e, p) {
var source = p ? new debug_1.Source(uri, p.line, p.column) : new debug_1.Source(uri, -1, -1);
e = new debug_1.SourceError(e, source, "Building UI from XML.");
return e;
};
}
xml2ui.SourceErrorFormat = SourceErrorFormat;
function ComponentSourceTracker(uri) {
return function(component, p) {
if (!debug_1.Source.get(component)) {
var source = p ? new debug_1.Source(uri, p.line, p.column) : new debug_1.Source(uri, -1, -1);
debug_1.Source.set(component, source);
}
};
}
xml2ui.ComponentSourceTracker = ComponentSourceTracker;
var PlatformFilter = function(_super) {
__extends(PlatformFilter, _super);
function PlatformFilter() {
return _super !== null && _super.apply(this, arguments) || this;
}
PlatformFilter.prototype.parse = function(args) {
if (args.eventType === xml.ParserEventType.StartElement) {
if (PlatformFilter.isPlatform(args.elementName)) {
if (this.currentPlatformContext) {
throw new Error("Already in '" + this.currentPlatformContext + "' platform context and cannot switch to '" + args.elementName + "' platform! Platform tags cannot be nested.");
}
this.currentPlatformContext = args.elementName;
return;
}
}
if (args.eventType === xml.ParserEventType.EndElement) {
if (PlatformFilter.isPlatform(args.elementName)) {
this.currentPlatformContext = undefined;
return;
}
}
if (this.currentPlatformContext && !PlatformFilter.isCurentPlatform(this.currentPlatformContext)) {
return;
}
this.next(args);
};
PlatformFilter.isPlatform = function(value) {
if (value) {
var toLower = value.toLowerCase();
return toLower === android || toLower === ios;
}
return false;
};
PlatformFilter.isCurentPlatform = function(value) {
return value && value.toLowerCase() === platform_1.device.os.toLowerCase();
};
return PlatformFilter;
}(XmlProducerBase);
xml2ui.PlatformFilter = PlatformFilter;
var XmlArgsReplay = function(_super) {
__extends(XmlArgsReplay, _super);
function XmlArgsReplay(args, errorFormat) {
var _this = _super.call(this) || this;
_this.args = args;
_this.error = errorFormat;
return _this;
}
XmlArgsReplay.prototype.replay = function() {
var _this = this;
this.args.forEach(function(args) {
try {
_this.next(args);
} catch (e) {
throw _this.error(e, args.position);
}
});
};
return XmlArgsReplay;
}(XmlProducerBase);
xml2ui.XmlArgsReplay = XmlArgsReplay;
var XmlStateParser = function() {
function XmlStateParser(state) {
this.state = state;
}
XmlStateParser.prototype.parse = function(args) {
this.state = this.state.parse(args);
};
return XmlStateParser;
}();
xml2ui.XmlStateParser = XmlStateParser;
var TemplateParser = function() {
function TemplateParser(parent, templateProperty, setTemplateProperty) {
if (setTemplateProperty === void 0) {
setTemplateProperty = true;
}
this.parent = parent;
this._context = templateProperty.context;
this._recordedXmlStream = new Array();
this._templateProperty = templateProperty;
this._nestingLevel = 0;
this._state = 0;
this._setTemplateProperty = setTemplateProperty;
}
TemplateParser.prototype.parse = function(args) {
if (args.eventType === xml.ParserEventType.StartElement) {
this.parseStartElement(args.prefix, args.namespace, args.elementName, args.attributes);
} else if (args.eventType === xml.ParserEventType.EndElement) {
this.parseEndElement(args.prefix, args.elementName);
}
this._recordedXmlStream.push(args);
return this._state === 2 ? this.parent : this;
};
Object.defineProperty(TemplateParser.prototype, "elementName", {
get: function() {
return this._templateProperty.elementName;
},
enumerable: true,
configurable: true
});
TemplateParser.prototype.parseStartElement = function(prefix, namespace, elementName, attributes) {
if (this._state === 0) {
this._state = 1;
} else if (this._state === 2) {
throw new Error("Template must have exactly one root element but multiple elements were found.");
}
this._nestingLevel++;
};
TemplateParser.prototype.parseEndElement = function(prefix, elementName) {
if (this._state === 0) {
throw new Error("Template must have exactly one root element but none was found.");
} else if (this._state === 2) {
throw new Error("No more closing elements expected for this template.");
}
this._nestingLevel--;
if (this._nestingLevel === 0) {
this._state = 2;
if (this._setTemplateProperty && this._templateProperty.name in this._templateProperty.parent.component) {
var template = this._build();
this._templateProperty.parent.component[this._templateProperty.name] = template;
}
}
};
TemplateParser.prototype._build = function() {
var _this = this;
var context = this._context;
var errorFormat = this._templateProperty.errorFormat;
var sourceTracker = this._templateProperty.sourceTracker;
var template = function() {
var start;
var ui;
(start = new xml2ui.XmlArgsReplay(_this._recordedXmlStream, errorFormat)).pipe(new XmlStateParser(ui = new ComponentParser(context, errorFormat, sourceTracker)));
start.replay();
return ui.rootComponentModule.component;
};
return template;
};
return TemplateParser;
}();
xml2ui.TemplateParser = TemplateParser;
var MultiTemplateParser = function() {
function MultiTemplateParser(parent, templateProperty) {
this.parent = parent;
this.templateProperty = templateProperty;
this._childParsers = new Array();
}
MultiTemplateParser.prototype.parse = function(args) {
if (args.eventType === xml.ParserEventType.StartElement && args.elementName === "template") {
var childParser = new TemplateParser(this, this.templateProperty, false);
childParser["key"] = args.attributes["key"];
this._childParsers.push(childParser);
return childParser;
}
if (args.eventType === xml.ParserEventType.EndElement) {
var name_1 = ComponentParser.getComplexPropertyName(args.elementName);
if (name_1 === this.templateProperty.name) {
var templates = new Array();
for (var i = 0; i < this._childParsers.length; i++) {
templates.push({
key: this._childParsers[i]["key"],
createView: this._childParsers[i]._build()
});
}
this.templateProperty.parent.component[this.templateProperty.name] = templates;
return this.parent;
}
}
return this;
};
return MultiTemplateParser;
}();
xml2ui.MultiTemplateParser = MultiTemplateParser;
var ComponentParser = function() {
function ComponentParser(context, errorFormat, sourceTracker, moduleNamePath) {
this.moduleNamePath = moduleNamePath;
this.parents = new Array();
this.complexProperties = new Array();
this.context = context;
this.error = errorFormat;
this.sourceTracker = sourceTracker;
}
ComponentParser.prototype.parse = function(args) {
var parent = this.parents[this.parents.length - 1];
var complexProperty = this.complexProperties[this.complexProperties.length - 1];
if (args.eventType === xml.ParserEventType.StartElement) {
if (ComponentParser.isComplexProperty(args.elementName)) {
var name = ComponentParser.getComplexPropertyName(args.elementName);
this.complexProperties.push({
parent: parent,
name: name,
items: []
});
if (ComponentParser.isKnownTemplate(name, parent.exports)) {
return new TemplateParser(this, {
context: (parent ? getExports(parent.component) : null) || this.context,
parent: parent,
name: name,
elementName: args.elementName,
templateItems: [],
errorFormat: this.error,
sourceTracker: this.sourceTracker
});
}
if (ComponentParser.isKnownMultiTemplate(name, parent.exports)) {
return new MultiTemplateParser(this, {
context: (parent ? getExports(parent.component) : null) || this.context,
parent: parent,
name: name,
elementName: args.elementName,
templateItems: [],
errorFormat: this.error,
sourceTracker: this.sourceTracker
});
}
} else {
var componentModule;
if (args.prefix && args.namespace) {
componentModule = loadCustomComponent(args.namespace, args.elementName, args.attributes, this.context, this.currentRootView);
} else {
var namespace = args.namespace;
if (defaultNameSpaceMatcher.test(namespace || "")) {
namespace = undefined;
}
componentModule = component_builder_1.getComponentModule(args.elementName, namespace, args.attributes, this.context, this.moduleNamePath);
}
if (componentModule) {
this.sourceTracker(componentModule.component, args.position);
if (parent) {
if (complexProperty) {
ComponentParser.addToComplexProperty(parent, complexProperty, componentModule);
} else if (parent.component._addChildFromBuilder) {
parent.component._addChildFromBuilder(args.elementName, componentModule.component);
}
} else if (this.parents.length === 0) {
this.rootComponentModule = componentModule;
if (this.rootComponentModule) {
this.currentRootView = this.rootComponentModule.component;
if (this.currentRootView.exports) {
this.context = this.currentRootView.exports;
}
}
}
this.parents.push(componentModule);
}
}
} else if (args.eventType === xml.ParserEventType.EndElement) {
if (ComponentParser.isComplexProperty(args.elementName)) {
if (complexProperty) {
if (parent && parent.component._addArrayFromBuilder) {
parent.component._addArrayFromBuilder(complexProperty.name, complexProperty.items);
complexProperty.items = [];
}
}
this.complexProperties.pop();
} else {
this.parents.pop();
}
}
return this;
};
ComponentParser.isComplexProperty = function(name) {
return types_1.isString(name) && name.indexOf(".") !== -1;
};
ComponentParser.getComplexPropertyName = function(fullName) {
var name;
if (types_1.isString(fullName)) {
var names = fullName.split(".");
name = names[names.length - 1];
}
return name;
};
ComponentParser.isKnownTemplate = function(name, exports) {
return ComponentParser.KNOWNTEMPLATES in exports && exports[ComponentParser.KNOWNTEMPLATES] && name in exports[ComponentParser.KNOWNTEMPLATES];
};
ComponentParser.isKnownMultiTemplate = function(name, exports) {
return ComponentParser.KNOWNMULTITEMPLATES in exports && exports[ComponentParser.KNOWNMULTITEMPLATES] && name in exports[ComponentParser.KNOWNMULTITEMPLATES];
};
ComponentParser.addToComplexProperty = function(parent, complexProperty, elementModule) {
var parentComponent = parent.component;
if (ComponentParser.isKnownCollection(complexProperty.name, parent.exports)) {
complexProperty.items.push(elementModule.component);
} else if (parentComponent._addChildFromBuilder) {
parentComponent._addChildFromBuilder(complexProperty.name, elementModule.component);
} else {
parentComponent[complexProperty.name] = elementModule.component;
}
};
ComponentParser.isKnownCollection = function(name, context) {
return ComponentParser.KNOWNCOLLECTIONS in context && context[ComponentParser.KNOWNCOLLECTIONS] && name in context[ComponentParser.KNOWNCOLLECTIONS];
};
return ComponentParser;
}();
ComponentParser.KNOWNCOLLECTIONS = "knownCollections";
ComponentParser.KNOWNTEMPLATES = "knownTemplates";
ComponentParser.KNOWNMULTITEMPLATES = "knownMultiTemplates";
xml2ui.ComponentParser = ComponentParser;
})(xml2ui || (xml2ui = {}));
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var easysax = __webpack_require__(61);
var ParserEventType = function() {
function ParserEventType() {}
return ParserEventType;
}();
ParserEventType.StartElement = "StartElement";
ParserEventType.EndElement = "EndElement";
ParserEventType.Text = "Text";
ParserEventType.CDATA = "CDATA";
ParserEventType.Comment = "Comment";
exports.ParserEventType = ParserEventType;
var ParserEvent = function() {
function ParserEvent(eventType, position, prefix, namespace, elementName, attributes, data) {
this._eventType = eventType;
this._position = position;
this._prefix = prefix;
this._namespace = namespace;
this._elementName = elementName;
this._attributes = attributes;
this._data = data;
}
ParserEvent.prototype.toString = function() {
return JSON.stringify({
eventType: this.eventType,
position: this.position,
prefix: this.prefix,
namespace: this.namespace,
elementName: this.elementName,
attributes: this.attributes,
data: this.data
});
};
Object.defineProperty(ParserEvent.prototype, "eventType", {
get: function() {
return this._eventType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "position", {
get: function() {
return this._position;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "prefix", {
get: function() {
return this._prefix;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "namespace", {
get: function() {
return this._namespace;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "elementName", {
get: function() {
return this._elementName;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "attributes", {
get: function() {
return this._attributes;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "data", {
get: function() {
return this._data;
},
enumerable: true,
configurable: true
});
return ParserEvent;
}();
exports.ParserEvent = ParserEvent;
var _ampCodes;
var _entitySearchRegEx = /&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/gi;
function _generateAmpMap() {
var objCodes = {
Tab: 9,
NewLine: 10,
excl: 33,
quot: 34,
QUOT: 34,
num: 35,
dollar: 36,
percent: 37,
amp: 38,
AMP: 38,
apos: 39,
lpar: 40,
rpar: 41,
ast: 42,
midast: 42,
plus: 43,
comma: 44,
period: 46,
sol: 47,
colon: 58,
semi: 59,
lt: 60,
LT: 60,
equals: 61,
gt: 62,
GT: 62,
quest: 63,
commat: 64,
lsqb: 91,
lbrack: 91,
bsol: 92,
rsqb: 92,
rbrack: 92,
Hat: 94,
lowbar: 95,
grave: 96,
DiacriticalGrave: 96,
lcub: 123,
lbrace: 123,
verbar: 124,
vert: 124,
VerticalLine: 124,
rcub: 125,
rbrace: 125,
nbsp: 160,
iexcl: 161,
cent: 162,
pound: 163,
curren: 164,
yen: 165,
brvbar: 166,
brkbar: 166,
sect: 167,
uml: 168,
copy: 169,
ordf: 170,
laquo: 171,
not: 172,
shy: 173,
reg: 174,
macr: 175,
hibar: 175,
deg: 176,
plusmn: 177,
sup2: 178,
sup3: 179,
acute: 180,
micro: 181,
para: 182,
middot: 183,
cedil: 184,
sup1: 185,
ordm: 186,
raquo: 187,
frac14: 188,
frac12: 189,
frac34: 190,
iquest: 191,
Agrave: 192,
Aacute: 193,
Acirc: 194,
Atilde: 195,
Auml: 196,
Aring: 197,
AElig: 198,
Ccedil: 199,
Egrave: 200,
Eacute: 201,
Ecirc: 202,
Euml: 203,
Igrave: 204,
Iacute: 205,
Icirc: 206,
Iuml: 207,
ETH: 208,
Dstrok: 208,
Ntilde: 209,
Ograve: 210,
Oacute: 211,
Ocirc: 212,
Otilde: 213,
Ouml: 214,
times: 215,
Oslash: 216,
Ugrave: 217,
Uacute: 218,
Ucirc: 219,
Uuml: 220,
Yacute: 221,
THORN: 222,
szlig: 223,
agrave: 224,
aacute: 225,
acirc: 226,
atilde: 227,
auml: 228,
aring: 229,
aelig: 230,
ccedil: 231,
egrave: 232,
eacute: 233,
ecirc: 234,
euml: 235,
igrave: 236,
iacute: 237,
icirc: 238,
iuml: 239,
eth: 240,
ntilde: 241,
ograve: 242,
oacute: 243,
ocirc: 244,
otilde: 245,
ouml: 246,
divide: 247,
oslash: 248,
ugrave: 249,
uacute: 250,
ucirc: 251,
uuml: 252,
yacute: 253,
thorn: 254,
yuml: 255,
fnof: 402,
imped: 437,
gacute: 501,
jmath: 567,
circ: 710,
caron: 711,
Hacek: 711,
breve: 728,
Breve: 728,
dot: 729,
DiacriticalDot: 729,
ring: 730,
ogon: 731,
tilde: 732,
DiacriticalTilde: 732,
dblac: 733,
DiacriticalDoubleAcute: 733,
DownBreve: 785,
UnderBar: 818,
Alpha: 913,
Beta: 914,
Gamma: 915,
Delta: 916,
Epsilon: 917,
Zeta: 918,
Eta: 919,
Theta: 920,
Iota: 921,
Kappa: 922,
Lambda: 923,
Mu: 924,
Nu: 925,
Xi: 926,
Omicron: 927,
Pi: 928,
Rho: 929,
Sigma: 931,
Tau: 932,
Upsilon: 933,
Phi: 934,
Chi: 935,
Psi: 936,
Omega: 937,
alpha: 945,
beta: 946,
gamma: 947,
delta: 948,
epsilon: 949,
epsiv: 949,
varepsilon: 949,
zeta: 950,
eta: 951,
theta: 952,
iota: 953,
kappa: 954,
lambda: 955,
mu: 956,
nu: 957,
xi: 958,
omicron: 959,
pi: 960,
rho: 961,
sigmaf: 962,
sigmav: 962,
varsigma: 962,
sigma: 963,
tau: 964,
upsilon: 965,
phi: 966,
chi: 967,
psi: 968,
omega: 969,
thetav: 977,
vartheta: 977,
thetasym: 977,
Upsi: 978,
upsih: 978,
straightphi: 981,
piv: 982,
varpi: 982,
Gammad: 988,
gammad: 989,
digamma: 989,
kappav: 1008,
varkappa: 1008,
rhov: 1009,
varrho: 1009,
epsi: 1013,
straightepsilon: 1013,
bepsi: 1014,
backepsilon: 1014,
euro: 8364,
trade: 8482,
TRADE: 8482,
forall: 8704,
part: 8706,
larr: 8592,
rarr: 8593,
hyphen: 8208,
dash: 8208,
ndash: 8211,
mdash: 8212,
horbar: 8213,
Vert: 8214,
Verbar: 8214,
lsquo: 8216,
OpenCurlyQuote: 8216,
rsquo: 8217,
rsquor: 8217,
CloseCurlyQuote: 8217,
lsquor: 8218,
sbquo: 8218,
ldquo: 8220,
OpenCurlyDoubleQuote: 8220,
rdquo: 8221,
rdquor: 8221,
CloseCurlyDoubleQuote: 8221,
ldquor: 8222,
bdquo: 8222,
dagger: 8224,
Dagger: 8225,
ddagger: 8225,
bull: 8226,
bullet: 8226,
nldr: 8229,
hellip: 8230,
mldr: 8230,
hybull: 8259,
tdot: 8411,
TripleDot: 8411,
DotDot: 8412,
star: 9734,
phone: 9742,
spades: 9824,
clubs: 9827,
hearts: 9829,
diams: 9830,
female: 9792,
male: 9794,
check: 10003,
checkmark: 10003,
cross: 10007,
VerticalSeparator: 10072,
EmptySmallSquare: 9723,
FilledSmallSquare: 9724,
starf: 9733,
bigstar: 9733,
square: 9633,
squ: 9633,
Square: 9633
};
var ampCodes = new Map();
for (var key in objCodes) {
if (objCodes.hasOwnProperty(key)) {
ampCodes.set(key, objCodes[key]);
}
}
return ampCodes;
}
if (true) {
_ampCodes = _generateAmpMap();
}
function _HandleAmpEntities(found, decimalValue, hexValue, wordValue) {
if (wordValue) {
if (!_ampCodes) {
_ampCodes = _generateAmpMap();
}
var res = _ampCodes.get(wordValue);
if (res) {
return String.fromCharCode(res);
}
return found;
}
if (decimalValue) {
return String.fromCharCode(parseInt(decimalValue, 10));
}
return String.fromCharCode(parseInt(hexValue, 16));
}
var XmlParser = function() {
function XmlParser(onEvent, onError, processNamespaces) {
this._processNamespaces = processNamespaces;
this._parser = new easysax.EasySAXParser();
var that = this;
this._parser.on("startNode", function(elem, attr, uq, tagend, str, pos) {
var attributes = attr();
if (attributes === true) {
attributes = undefined;
}
if (attributes) {
var key;
for (key in attributes) {
if (attributes.hasOwnProperty(key)) {
attributes[key] = XmlParser._dereferenceEntities(attributes[key]);
}
}
}
var prefix = undefined;
var namespace = undefined;
var name = elem;
if (that._processNamespaces) {
var stackEntry = XmlParser._getNamespacesStackEntry(attributes);
that._namespaceStack.push(stackEntry);
var resolved = that._resolveNamespace(name);
prefix = resolved.prefix;
namespace = resolved.namespace;
name = resolved.name;
}
onEvent(new ParserEvent(ParserEventType.StartElement, pos(), prefix, namespace, name, attributes, undefined));
});
this._parser.on("textNode", function(text, uq, pos) {
var data = uq(XmlParser._dereferenceEntities(text));
onEvent(new ParserEvent(ParserEventType.Text, pos(), undefined, undefined, undefined, undefined, data));
});
this._parser.on("endNode", function(elem, uq, tagstart, str, pos) {
var prefix = undefined;
var namespace = undefined;
var name = elem;
if (that._processNamespaces) {
var resolved = that._resolveNamespace(name);
prefix = resolved.prefix;
namespace = resolved.namespace;
name = resolved.name;
}
onEvent(new ParserEvent(ParserEventType.EndElement, pos(), prefix, namespace, name, undefined, undefined));
if (that._processNamespaces) {
that._namespaceStack.pop();
}
});
this._parser.on("cdata", function(data, res, pos) {
onEvent(new ParserEvent(ParserEventType.CDATA, pos(), undefined, undefined, undefined, undefined, data));
});
this._parser.on("comment", function(text, uq, pos) {
onEvent(new ParserEvent(ParserEventType.Comment, pos(), undefined, undefined, undefined, undefined, text));
});
if (onError) {
this._parser.on("error", function(msg, pos) {
onError(new Error(msg), pos());
});
}
}
Object.defineProperty(XmlParser.prototype, "angularSyntax", {
get: function() {
return this._parser.angularSyntax;
},
set: function(value) {
this._parser.angularSyntax = value;
},
enumerable: true,
configurable: true
});
XmlParser.prototype.parse = function(xmlString) {
if (this._processNamespaces) {
this._namespaceStack = [];
}
this._parser.parse(xmlString);
};
XmlParser._getNamespacesStackEntry = function(attributes) {
var stackEntry = {};
if (!attributes) {
return stackEntry;
}
for (var key in attributes) {
if (!attributes.hasOwnProperty(key)) {
continue;
}
var attributeName = key;
if (attributeName.indexOf("xmlns") !== 0) {
continue;
}
var namespacePrefix = "";
if (attributeName.indexOf(":") !== -1) {
namespacePrefix = attributeName.split(":")[1];
}
stackEntry[namespacePrefix] = attributes[key];
}
return stackEntry;
};
XmlParser.prototype._resolveNamespace = function(fullName) {
var result = {
prefix: undefined,
namespace: undefined,
name: undefined
};
result.prefix = "";
if (fullName.indexOf(":") !== -1) {
var split = fullName.split(":");
result.prefix = split[0];
result.name = split[1];
} else {
result.name = fullName;
}
var i;
var stackEntry;
for (i = this._namespaceStack.length - 1; i >= 0; i--) {
stackEntry = this._namespaceStack[i];
for (var key in stackEntry) {
if (!stackEntry.hasOwnProperty(key)) {
continue;
}
if (result.prefix === key) {
result.namespace = stackEntry[key];
return result;
}
}
}
return result;
};
XmlParser._dereferenceEntities = function(s) {
s = String(s);
if (s.length > 3 && s.indexOf("&") !== -1) {
s = s.replace(_entitySearchRegEx, _HandleAmpEntities);
}
return s;
};
return XmlParser;
}();
exports.XmlParser = XmlParser;
}, function(module, exports, __webpack_require__) {
if (true) {
module.exports.EasySAXParser = EasySAXParser;
}
function EasySAXParser() {
"use strict";
if (!this) return null;
this.angularSyntax = false;
function nullFunc() {}
this.onTextNode = nullFunc;
this.onStartNode = nullFunc;
this.onEndNode = nullFunc;
this.onCDATA = nullFunc;
this.onError = nullFunc;
this.onComment = null;
this.onQuestion = null;
this.onAttention = null;
this.is_onComment = this.is_onQuestion = this.is_onAttention = false;
this.isNamespace = false;
this.useNS = null;
this.default_xmlns = null;
this.xmlns = null;
this.nsmatrix = {
xmlns: this.xmlns
};
this.hasSurmiseNS = false;
this.attr_string = "";
this.attr_posstart = 0;
this.attr_res;
}
EasySAXParser.prototype.on = function(name, cb) {
if (typeof cb !== "function") {
if (cb !== null) return;
}
switch (name) {
case "error":
this.onError = cb || nullFunc;
break;

case "startNode":
this.onStartNode = cb || nullFunc;
break;

case "endNode":
this.onEndNode = cb || nullFunc;
break;

case "textNode":
this.onTextNode = cb || nullFunc;
break;

case "cdata":
this.onCDATA = cb || nullFunc;
break;

case "comment":
this.onComment = cb;
this.is_onComment = !!cb;
break;

case "question":
this.onQuestion = cb;
this.is_onQuestion = !!cb;
break;

case "attention":
this.onAttention = cb;
this.is_onAttention = !!cb;
break;
}
};
EasySAXParser.prototype.ns = function(root, ns) {
if (!root || typeof root !== "string" || !ns) {
return;
}
var u, x = {}, ok, v, i;
for (i in ns) {
v = ns[i];
if (typeof v === "string") {
if (root === v) ok = true;
x[i] = v;
}
}
if (ok) {
this.isNamespace = true;
this.default_xmlns = root;
this.useNS = x;
}
};
EasySAXParser.prototype.parse = function(xml) {
if (typeof xml !== "string") {
return;
}
if (this.isNamespace) {
this.nsmatrix = {
xmlns: this.default_xmlns
};
parse(xml);
this.nsmatrix = false;
} else {
parse(xml);
}
this.attr_res = true;
};
var xharsQuot = {
constructor: false,
hasOwnProperty: false,
isPrototypeOf: false,
propertyIsEnumerable: false,
toLocaleString: false,
toString: false,
valueOf: false,
quot: '"',
QUOT: '"',
amp: "&",
AMP: "&",
nbsp: " ",
apos: "'",
lt: "<",
LT: "<",
gt: ">",
GT: ">",
copy: "©",
laquo: "«",
raquo: "»",
reg: "®",
deg: "°",
plusmn: "±",
sup2: "²",
sup3: "³",
micro: "µ",
para: "¶"
};
function rpEntities(s, d, x, z) {
if (z) {
return xharsQuot[z] || "";
}
if (d) {
return String.fromCharCode(d);
}
return String.fromCharCode(parseInt(x, 16));
}
function unEntities(s, i) {
s = String(s);
if (s.length > 3 && s.indexOf("&") !== -1) {
if (s.indexOf("&gt;") !== -1) s = s.replace(/&gt;/g, ">");
if (s.indexOf("&lt;") !== -1) s = s.replace(/&lt;/g, "<");
if (s.indexOf("&quot;") !== -1) s = s.replace(/&quot;/g, '"');
if (s.indexOf("&") !== -1) {
s = s.replace(/&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/gi, rpEntities);
}
}
return s;
}
EasySAXParser.prototype.allowedAngularAttributeChars = function(w) {
if (!this.angularSyntax) {
return false;
} else {
return w === 40 || w === 41 || w === 91 || w === 93 || w === 94 || w === 35;
}
};
EasySAXParser.prototype.getAttrs = function() {
if (this.attr_res !== null) {
return this.attr_res;
}
var u, res = {}, s = this.attr_string, i = this.attr_posstart, l = s.length, attr_list = this.hasSurmiseNS ? [] : false, name, value = "", ok = false, noValueAttribute = false, j, w, nn, n, hasNewMatrix, alias, newalias;
aa: for (;i < l; i++) {
w = s.charCodeAt(i);
if (w === 32 || w < 14 && w > 8) {
continue;
}
if (w < 65 && !this.allowedAngularAttributeChars(w) || w > 122 || w > 90 && w < 97 && !this.allowedAngularAttributeChars(w)) {
return this.attr_res = false;
}
for (j = i + 1; j < l; j++) {
w = s.charCodeAt(j);
if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46) {
if (noValueAttribute) {
j--;
break;
} else {
continue;
}
}
if (this.allowedAngularAttributeChars(w)) {
continue;
}
if (w === 32 || w > 8 && w < 14) {
noValueAttribute = true;
continue;
} else if (w === 61) {
noValueAttribute = false;
break;
} else {
if (!noValueAttribute) return this.attr_res = false;
}
break;
}
name = s.substring(i, j).trim();
ok = true;
if (name === "xmlns:xmlns") {
return this.attr_res = false;
}
w = s.charCodeAt(j + 1);
while (w = s.charCodeAt(j + 1)) {
if (w === 32 || w > 8 && w < 14) {
j++;
} else {
break;
}
}
if (!noValueAttribute) {
if (w === 34) {
j = s.indexOf('"', i = j + 2);
} else {
if (w === 39) {
j = s.indexOf("'", i = j + 2);
} else {
return this.attr_res = false;
}
}
}
if (j === -1) {
return this.attr_res = false;
}
if (j + 1 < l && !noValueAttribute) {
w = s.charCodeAt(j + 1);
if (w > 32 || w < 9 || w < 32 && w > 13) {
return this.attr_res = false;
}
}
if (noValueAttribute) {
value = "";
} else {
value = s.substring(i, j);
}
i = j;
if (this.isNamespace) {
if (this.hasSurmiseNS) {
if (newalias = name === "xmlns" ? "xmlns" : name.charCodeAt(0) === 120 && name.substr(0, 6) === "xmlns:" && name.substr(6)) {
alias = this.useNS[unEntities(value)];
if (alias) {
if (this.nsmatrix[newalias] !== alias) {
if (!hasNewMatrix) {
hasNewMatrix = true;
nn = {};
for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];
this.nsmatrix = nn;
}
this.nsmatrix[newalias] = alias;
}
} else {
if (this.nsmatrix[newalias]) {
if (!hasNewMatrix) {
hasNewMatrix = true;
nn = {};
for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];
this.nsmatrix = nn;
}
this.nsmatrix[newalias] = false;
}
}
res[name] = value;
continue;
}
attr_list.push(name, value);
continue;
}
w = name.length;
while (--w) {
if (name.charCodeAt(w) === 58) {
if (w = this.nsmatrix[name.substring(0, w)]) {
res[w + name.substr(w)] = value;
}
continue aa;
}
}
}
res[name] = value;
noValueAttribute = false;
}
if (!ok) {
return this.attr_res = true;
}
if (this.hasSurmiseNS) {
bb: for (i = 0, l = attr_list.length; i < l; i++) {
name = attr_list[i++];
w = name.length;
while (--w) {
if (name.charCodeAt(w) === 58) {
if (w = this.nsmatrix[name.substring(0, w)]) {
res[w + name.substr(w)] = attr_list[i];
}
continue bb;
break;
}
}
res[name] = attr_list[i];
}
}
return this.attr_res = res;
};
EasySAXParser.prototype.parse = function(xml) {
var u, xml = String(xml), nodestack = [], stacknsmatrix = [], elem, tagend = false, tagstart = false, j = 0, i = 0, k = 0, len, x, y, q, w, xmlns, stopIndex = 0, stop, _nsmatrix, ok, pos = 0, ln = 0, lnStart = -2, lnEnd = -1;
len = xml.length;
function getStringNode() {
return xml.substring(i, j + 1);
}
function findLineAndColumnFromPos() {
while (lnStart < lnEnd && lnEnd < pos) {
lnStart = lnEnd;
lnEnd = xml.indexOf("\n", lnEnd + 1);
++ln;
}
return {
line: ln,
column: pos - lnStart
};
}
function position(p) {
pos = p;
return findLineAndColumnFromPos;
}
while (j !== -1) {
stop = stopIndex > 0;
if (xml.charCodeAt(j) === 60) {
i = j;
} else {
i = xml.indexOf("<", j);
}
if (i === -1) {
if (nodestack.length) {
this.onError("end file", position(j));
return;
}
return;
}
if (j !== i && !stop) {
ok = this.onTextNode(xml.substring(j, i), unEntities, position(j));
if (ok === false) return;
}
w = xml.charCodeAt(i + 1);
if (w === 33) {
w = xml.charCodeAt(i + 2);
if (w === 91 && xml.substr(i + 3, 6) === "CDATA[") {
j = xml.indexOf("]]>", i);
if (j === -1) {
this.onError("cdata", position(i));
return;
}
if (!stop) {
ok = this.onCDATA(xml.substring(i + 9, j), false, position(i));
if (ok === false) return;
}
j += 3;
continue;
}
if (w === 45 && xml.charCodeAt(i + 3) === 45) {
j = xml.indexOf("--\x3e", i);
if (j === -1) {
this.onError("expected --\x3e", position(i));
return;
}
if (this.is_onComment && !stop) {
ok = this.onComment(xml.substring(i + 4, j), unEntities, position(i));
if (ok === false) return;
}
j += 3;
continue;
}
j = xml.indexOf(">", i + 1);
if (j === -1) {
this.onError('expected ">"', position(i + 1));
return;
}
if (this.is_onAttention && !stop) {
ok = this.onAttention(xml.substring(i, j + 1), unEntities, position(i));
if (ok === false) return;
}
j += 1;
continue;
} else {
if (w === 63) {
j = xml.indexOf("?>", i);
if (j === -1) {
this.onError("...?>", position(i));
return;
}
if (this.is_onQuestion) {
ok = this.onQuestion(xml.substring(i, j + 2), position(i));
if (ok === false) return;
}
j += 2;
continue;
}
}
var inside = false;
for (k = i, j = -1; k < len; k++) {
var c = xml.charCodeAt(k);
if (!inside) {
if (c === 34) {
inside = c;
} else if (c === 39) {
inside = c;
} else if (c === 62) {
j = k;
break;
}
} else {
if (c === inside) {
inside = false;
}
}
}
if (j == -1) {
this.onError("...>", position(i + 1));
return;
}
this.attr_res = true;
if (w === 47) {
tagstart = false;
tagend = true;
x = elem = nodestack.pop();
q = i + 2 + x.length;
if (xml.substring(i + 2, q) !== x) {
this.onError("close tagname", position(i + 2));
return;
}
for (;q < j; q++) {
w = xml.charCodeAt(q);
if (w === 32 || w > 8 && w < 14) {
continue;
}
this.onError("close tag", position(i + 2));
return;
}
} else {
if (xml.charCodeAt(j - 1) === 47) {
x = elem = xml.substring(i + 1, j - 1);
tagstart = true;
tagend = true;
} else {
x = elem = xml.substring(i + 1, j);
tagstart = true;
tagend = false;
}
if (!(w > 96 && w < 123 || w > 64 && w < 91)) {
this.onError("first char nodeName", position(i + 1));
return;
}
for (q = 1, y = x.length; q < y; q++) {
w = x.charCodeAt(q);
if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46) {
continue;
}
if (w === 32 || w < 14 && w > 8) {
elem = x.substring(0, q);
this.attr_res = null;
break;
}
this.onError("invalid nodeName", position(i + 1));
return;
}
if (!tagend) {
nodestack.push(elem);
}
}
if (this.isNamespace) {
if (stop) {
if (tagend) {
if (!tagstart) {
if (--stopIndex === 0) {
this.nsmatrix = stacknsmatrix.pop();
}
}
} else {
stopIndex += 1;
}
j += 1;
continue;
}
_nsmatrix = this.nsmatrix;
if (!tagend) {
stacknsmatrix.push(this.nsmatrix);
if (this.attr_res !== true) {
if (this.hasSurmiseNS = x.indexOf("xmlns", q) !== -1) {
this.attr_string = x;
this.attr_posstart = q;
this.getAttrs();
this.hasSurmiseNS = false;
}
}
}
w = elem.indexOf(":");
if (w !== -1) {
xmlns = this.nsmatrix[elem.substring(0, w)];
elem = elem.substr(w + 1);
} else {
xmlns = this.nsmatrix.xmlns;
}
if (!xmlns) {
if (tagend) {
if (tagstart) {
this.nsmatrix = _nsmatrix;
} else {
this.nsmatrix = stacknsmatrix.pop();
}
} else {
stopIndex = 1;
this.attr_res = true;
}
j += 1;
continue;
}
elem = xmlns + ":" + elem;
}
if (tagstart) {
this.attr_string = x;
this.attr_posstart = q;
var that = this;
ok = this.onStartNode(elem, function() {
return that.getAttrs();
}, unEntities, tagend, getStringNode, position(i));
if (ok === false) {
return;
}
this.attr_res = true;
}
if (tagend) {
ok = this.onEndNode(elem, unEntities, tagstart, getStringNode, position(i));
if (ok === false) {
return;
}
if (this.isNamespace) {
if (tagstart) {
this.nsmatrix = _nsmatrix;
} else {
this.nsmatrix = stacknsmatrix.pop();
}
}
}
j += 1;
}
};
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var bindable_1 = __webpack_require__(39);
var file_system_1 = __webpack_require__(22);
var binding_builder_1 = __webpack_require__(41);
var file_name_resolver_1 = __webpack_require__(58);
var platform = __webpack_require__(25);
var UI_PATH = "ui/";
var MODULES = {
TabViewItem: "ui/tab-view",
FormattedString: "text/formatted-string",
Span: "text/span",
ActionItem: "ui/action-bar",
NavigationButton: "ui/action-bar",
SegmentedBarItem: "ui/segmented-bar"
};
var CODEFILE = "codeFile";
var CSSFILE = "cssFile";
var IMPORT = "import";
function getComponentModule(elementName, namespace, attributes, exports, moduleNamePath) {
var instance;
var instanceModule;
var componentModule;
elementName = elementName.split("-").map(function(s) {
return s[0].toUpperCase() + s.substring(1);
}).join("");
var moduleId = MODULES[elementName] || UI_PATH + (elementName.toLowerCase().indexOf("layout") !== -1 ? "layouts/" : "") + elementName.split(/(?=[A-Z])/).join("-").toLowerCase();
try {
if (typeof namespace === "string") {
if (global.moduleExists(namespace)) {
moduleId = namespace;
} else {
var pathInsideTNSModules = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, "tns_modules", namespace);
try {
instanceModule = global.require(pathInsideTNSModules);
moduleId = pathInsideTNSModules;
} catch (e) {
moduleId = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, namespace);
}
}
}
if (!instanceModule) {
instanceModule = global.loadModule(moduleId);
}
var instanceType = instanceModule[elementName] || Object;
instance = new instanceType();
} catch (ex) {
var debug = __webpack_require__(36);
throw new debug.ScopeError(ex, "Module '" + moduleId + "' not found for element '" + (namespace ? namespace + ":" : "") + elementName + "'.");
}
var cssApplied = false;
if (attributes) {
if (attributes[IMPORT]) {
var importPath = attributes[IMPORT].trim();
if (importPath.indexOf("~/") === 0) {
importPath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, importPath.replace("~/", ""));
}
exports = global.loadModule(importPath);
instance.exports = exports;
}
if (attributes[CODEFILE]) {
var codeFilePath = attributes[CODEFILE].trim();
if (codeFilePath.indexOf("~/") === 0) {
codeFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, codeFilePath.replace("~/", ""));
}
var codeFilePathWithExt = codeFilePath.indexOf(".js") !== -1 ? codeFilePath : codeFilePath + ".js";
if (file_system_1.File.exists(codeFilePathWithExt)) {
exports = global.loadModule(codeFilePath);
instance.exports = exports;
} else {
throw new Error('Code file with path "' + codeFilePathWithExt + '" cannot be found!');
}
}
if (attributes[CSSFILE] && typeof instance.addCssFile === "function") {
var cssFilePath = attributes[CSSFILE].trim();
if (cssFilePath.indexOf("~/") === 0) {
cssFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, cssFilePath.replace("~/", ""));
}
if (file_system_1.File.exists(cssFilePath)) {
instance.addCssFile(cssFilePath);
cssApplied = true;
} else {
throw new Error('Css file with path "' + cssFilePath + '" cannot be found!');
}
}
}
if (typeof instance.addCssFile === "function") {
if (moduleNamePath && !cssApplied) {
var cssFilePath = file_name_resolver_1.resolveFileName(moduleNamePath, "css");
if (cssFilePath) {
instance.addCssFile(cssFilePath);
cssApplied = true;
}
}
if (!cssApplied) {
instance._refreshCss();
}
}
if (instance && instanceModule) {
for (var attr in attributes) {
var attrValue = attributes[attr];
if (attr.indexOf(":") !== -1) {
var platformName = attr.split(":")[0].trim();
if (platformName.toLowerCase() === platform.device.os.toLowerCase()) {
attr = attr.split(":")[1].trim();
} else {
continue;
}
}
if (attr.indexOf(".") !== -1) {
var subObj = instance;
var properties = attr.split(".");
var subPropName = properties[properties.length - 1];
for (var i = 0; i < properties.length - 1; i++) {
if (subObj !== undefined && subObj !== null) {
subObj = subObj[properties[i]];
}
}
if (subObj !== undefined && subObj !== null) {
setPropertyValue(subObj, instanceModule, exports, subPropName, attrValue);
}
} else {
setPropertyValue(instance, instanceModule, exports, attr, attrValue);
}
}
componentModule = {
component: instance,
exports: instanceModule
};
}
return componentModule;
}
exports.getComponentModule = getComponentModule;
function setPropertyValue(instance, instanceModule, exports, propertyName, propertyValue) {
if (isBinding(propertyValue) && instance.bind) {
var bindOptions = binding_builder_1.getBindingOptions(propertyName, getBindingExpressionFromAttribute(propertyValue));
instance.bind({
sourceProperty: bindOptions[binding_builder_1.bindingConstants.sourceProperty],
targetProperty: bindOptions[binding_builder_1.bindingConstants.targetProperty],
expression: bindOptions[binding_builder_1.bindingConstants.expression],
twoWay: bindOptions[binding_builder_1.bindingConstants.twoWay]
}, bindOptions[binding_builder_1.bindingConstants.source]);
} else if (bindable_1.isEventOrGesture(propertyName, instance)) {
var handler = exports && exports[propertyValue];
if (typeof handler === "function") {
instance.on(propertyName, handler);
}
} else if (isKnownFunction(propertyName, instance) && exports && typeof exports[propertyValue] === "function") {
instance[propertyName] = exports[propertyValue];
} else {
var attrHandled = false;
if (!attrHandled && instance._applyXmlAttribute) {
attrHandled = instance._applyXmlAttribute(propertyName, propertyValue);
}
if (!attrHandled) {
instance[propertyName] = propertyValue;
}
}
}
exports.setPropertyValue = setPropertyValue;
function getBindingExpressionFromAttribute(value) {
return value.replace("{{", "").replace("}}", "").trim();
}
function isBinding(value) {
var isBinding;
if (typeof value === "string") {
var str = value.trim();
isBinding = str.indexOf("{{") === 0 && str.lastIndexOf("}}") === str.length - 2;
}
return isBinding;
}
var KNOWN_FUNCTIONS = "knownFunctions";
function isKnownFunction(name, instance) {
return instance.constructor && KNOWN_FUNCTIONS in instance.constructor && instance.constructor[KNOWN_FUNCTIONS].indexOf(name) !== -1;
}
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
exports.DIALOG_FRAGMENT_TAG = "dialog";
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var types_1 = __webpack_require__(17);
var platform_1 = __webpack_require__(25);
var animation_1 = __webpack_require__(51);
var lazy_1 = __webpack_require__(53);
var trace_1 = __webpack_require__(15);
var slideTransition;
function ensureSlideTransition() {
if (!slideTransition) {
slideTransition = __webpack_require__(65);
}
}
var fadeTransition;
function ensureFadeTransition() {
if (!fadeTransition) {
fadeTransition = __webpack_require__(66);
}
}
var flipTransition;
function ensureFlipTransition() {
if (!flipTransition) {
flipTransition = __webpack_require__(67);
}
}
var _sdkVersion = lazy_1.default(function() {
return parseInt(platform_1.device.sdkVersion);
});
var _defaultInterpolator = lazy_1.default(function() {
return new android.view.animation.AccelerateDecelerateInterpolator();
});
var enterFakeResourceId = -10;
var exitFakeResourceId = -20;
var popEnterFakeResourceId = -30;
var popExitFakeResourceId = -40;
var AndroidTransitionType;
(function(AndroidTransitionType) {
AndroidTransitionType.enter = "enter";
AndroidTransitionType.exit = "exit";
AndroidTransitionType.popEnter = "popEnter";
AndroidTransitionType.popExit = "popExit";
})(AndroidTransitionType = exports.AndroidTransitionType || (exports.AndroidTransitionType = {}));
function _clearBackwardTransitions(fragment) {
var expandedFragment = fragment;
if (expandedFragment.enterPopExitTransition) {
if (trace_1.isEnabled()) {
trace_1.write("Cleared enterPopExitTransition " + expandedFragment.enterPopExitTransition + " for " + fragment, trace_1.categories.Transition);
}
if (expandedFragment.enterPopExitTransitionListener) {
expandedFragment.enterPopExitTransitionListener.remove();
}
expandedFragment.enterPopExitTransition = undefined;
}
if (_sdkVersion() >= 21) {
var enterTransition = fragment.getEnterTransition();
if (enterTransition) {
if (trace_1.isEnabled()) {
trace_1.write("Cleared Enter " + enterTransition.getClass().getSimpleName() + " transition for " + fragment, trace_1.categories.Transition);
}
if (enterTransition.transitionListener) {
enterTransition.transitionListener.remove();
}
fragment.setEnterTransition(null);
}
var returnTransition = fragment.getReturnTransition();
if (returnTransition) {
if (trace_1.isEnabled()) {
trace_1.write("Cleared Pop Exit " + returnTransition.getClass().getSimpleName() + " transition for " + fragment, trace_1.categories.Transition);
}
if (returnTransition.transitionListener) {
returnTransition.transitionListener.remove();
}
fragment.setReturnTransition(null);
}
}
}
exports._clearBackwardTransitions = _clearBackwardTransitions;
function _clearForwardTransitions(fragment) {
var expandedFragment = fragment;
if (expandedFragment.exitPopEnterTransition) {
if (trace_1.isEnabled()) {
trace_1.write("Cleared exitPopEnterTransition " + expandedFragment.exitPopEnterTransition + " for " + fragment, trace_1.categories.Transition);
}
if (expandedFragment.exitPopEnterTransitionListener) {
expandedFragment.exitPopEnterTransitionListener.remove();
}
expandedFragment.exitPopEnterTransition = undefined;
}
if (_sdkVersion() >= 21) {
var exitTransition = fragment.getExitTransition();
if (exitTransition) {
if (trace_1.isEnabled()) {
trace_1.write("Cleared Exit " + exitTransition.getClass().getSimpleName() + " transition for " + fragment, trace_1.categories.Transition);
}
if (exitTransition.transitionListener) {
exitTransition.transitionListener.remove();
}
fragment.setExitTransition(null);
}
var reenterTransition = fragment.getReenterTransition();
if (reenterTransition) {
if (trace_1.isEnabled()) {
trace_1.write("Cleared Pop Enter " + reenterTransition.getClass().getSimpleName() + " transition for " + fragment, trace_1.categories.Transition);
}
if (reenterTransition.transitionListener) {
reenterTransition.transitionListener.remove();
}
fragment.setReenterTransition(null);
}
}
}
exports._clearForwardTransitions = _clearForwardTransitions;
function _setAndroidFragmentTransitions(cachePagesOnNavigate, navigationTransition, currentFragment, newFragment, fragmentTransaction) {
trace_1.write("Setting Android Fragment Transitions...", trace_1.categories.Transition);
var name;
if (navigationTransition.name) {
name = navigationTransition.name.toLowerCase();
}
var useLollipopTransition = name && (name.indexOf("slide") === 0 || name === "fade" || name === "explode") && _sdkVersion() >= 21;
if (cachePagesOnNavigate && _sdkVersion() === 23) {
useLollipopTransition = false;
}
if (useLollipopTransition) {
newFragment.setAllowEnterTransitionOverlap(true);
newFragment.setAllowReturnTransitionOverlap(true);
if (currentFragment) {
currentFragment.setAllowEnterTransitionOverlap(true);
currentFragment.setAllowReturnTransitionOverlap(true);
}
if (name.indexOf("slide") === 0) {
var direction = name.substr("slide".length) || "left";
switch (direction) {
case "left":
var rightEdge = new android.transition.Slide(android.view.Gravity.RIGHT);
_setUpNativeTransition(navigationTransition, rightEdge);
_addNativeTransitionListener(newFragment, rightEdge);
newFragment.setEnterTransition(rightEdge);
if (currentFragment) {
var leftEdge_1 = new android.transition.Slide(android.view.Gravity.LEFT);
_setUpNativeTransition(navigationTransition, leftEdge_1);
_addNativeTransitionListener(currentFragment, leftEdge_1);
currentFragment.setExitTransition(leftEdge_1);
}
break;

case "right":
var leftEdge = new android.transition.Slide(android.view.Gravity.LEFT);
_setUpNativeTransition(navigationTransition, leftEdge);
_addNativeTransitionListener(newFragment, leftEdge);
newFragment.setEnterTransition(leftEdge);
if (currentFragment) {
var rightEdge_1 = new android.transition.Slide(android.view.Gravity.RIGHT);
_setUpNativeTransition(navigationTransition, rightEdge_1);
_addNativeTransitionListener(currentFragment, rightEdge_1);
currentFragment.setExitTransition(rightEdge_1);
}
break;

case "top":
var bottomEdge = new android.transition.Slide(android.view.Gravity.BOTTOM);
_setUpNativeTransition(navigationTransition, bottomEdge);
_addNativeTransitionListener(newFragment, bottomEdge);
newFragment.setEnterTransition(bottomEdge);
if (currentFragment) {
var topEdge_1 = new android.transition.Slide(android.view.Gravity.TOP);
_setUpNativeTransition(navigationTransition, topEdge_1);
_addNativeTransitionListener(currentFragment, topEdge_1);
currentFragment.setExitTransition(topEdge_1);
}
break;

case "bottom":
var topEdge = new android.transition.Slide(android.view.Gravity.TOP);
_setUpNativeTransition(navigationTransition, topEdge);
_addNativeTransitionListener(newFragment, topEdge);
newFragment.setEnterTransition(topEdge);
if (currentFragment) {
var bottomEdge_1 = new android.transition.Slide(android.view.Gravity.BOTTOM);
_setUpNativeTransition(navigationTransition, bottomEdge_1);
_addNativeTransitionListener(currentFragment, bottomEdge_1);
currentFragment.setExitTransition(bottomEdge_1);
}
break;
}
} else if (name === "fade") {
var fadeEnter = new android.transition.Fade(android.transition.Fade.IN);
_setUpNativeTransition(navigationTransition, fadeEnter);
_addNativeTransitionListener(newFragment, fadeEnter);
newFragment.setEnterTransition(fadeEnter);
var fadeReturn = new android.transition.Fade(android.transition.Fade.OUT);
_setUpNativeTransition(navigationTransition, fadeReturn);
_addNativeTransitionListener(newFragment, fadeReturn);
newFragment.setReturnTransition(fadeReturn);
if (currentFragment) {
var fadeExit = new android.transition.Fade(android.transition.Fade.OUT);
_setUpNativeTransition(navigationTransition, fadeExit);
_addNativeTransitionListener(currentFragment, fadeExit);
currentFragment.setExitTransition(fadeExit);
var fadeReenter = new android.transition.Fade(android.transition.Fade.IN);
_setUpNativeTransition(navigationTransition, fadeReenter);
_addNativeTransitionListener(currentFragment, fadeReenter);
currentFragment.setReenterTransition(fadeReenter);
}
} else if (name === "explode") {
var explodeEnter = new android.transition.Explode();
_setUpNativeTransition(navigationTransition, explodeEnter);
_addNativeTransitionListener(newFragment, explodeEnter);
newFragment.setEnterTransition(explodeEnter);
if (currentFragment) {
var explodeExit = new android.transition.Explode();
_setUpNativeTransition(navigationTransition, explodeExit);
_addNativeTransitionListener(currentFragment, explodeExit);
currentFragment.setExitTransition(explodeExit);
}
}
} else {
var transition = void 0;
if (name) {
if (name.indexOf("slide") === 0) {
var direction = name.substr("slide".length) || "left";
ensureSlideTransition();
transition = new slideTransition.SlideTransition(direction, navigationTransition.duration, navigationTransition.curve);
} else if (name === "fade") {
ensureFadeTransition();
transition = new fadeTransition.FadeTransition(navigationTransition.duration, navigationTransition.curve);
} else if (name.indexOf("flip") === 0) {
var direction = name.substr("flip".length) || "right";
ensureFlipTransition();
transition = new flipTransition.FlipTransition(direction, navigationTransition.duration, navigationTransition.curve);
}
} else {
transition = navigationTransition.instance;
}
if (transition) {
var newExpandedFragment = newFragment;
newExpandedFragment.enterPopExitTransition = transition;
if (currentFragment) {
var currentExpandedFragment = currentFragment;
currentExpandedFragment.exitPopEnterTransition = transition;
}
fragmentTransaction.setCustomAnimations(enterFakeResourceId, exitFakeResourceId, popEnterFakeResourceId, popExitFakeResourceId);
}
}
_printTransitions(currentFragment);
_printTransitions(newFragment);
}
exports._setAndroidFragmentTransitions = _setAndroidFragmentTransitions;
function _setUpNativeTransition(navigationTransition, nativeTransition) {
if (navigationTransition.duration) {
nativeTransition.setDuration(navigationTransition.duration);
}
if (navigationTransition.curve) {
var interpolator = animation_1._resolveAnimationCurve(navigationTransition.curve);
nativeTransition.setInterpolator(interpolator);
} else {
nativeTransition.setInterpolator(_defaultInterpolator());
}
}
function _onFragmentShown(fragment, isBack) {
if (trace_1.isEnabled()) {
trace_1.write("_onFragmentShown(" + fragment + ", isBack: " + isBack + ")", trace_1.categories.Transition);
}
var expandedFragment = fragment;
var transitionType = isBack ? "Pop Enter" : "Enter";
var relevantTransition = isBack ? expandedFragment.exitPopEnterTransition : expandedFragment.enterPopExitTransition;
if (relevantTransition) {
if (trace_1.isEnabled()) {
trace_1.write(fragment + " has been shown when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + relevantTransition + ". Will complete page addition when transition ends.", trace_1.categories.Transition);
}
expandedFragment.completePageAdditionWhenTransitionEnds = {
isBack: isBack
};
} else if (_sdkVersion() >= 21) {
var nativeTransition = isBack ? fragment.getReenterTransition() : fragment.getEnterTransition();
if (nativeTransition) {
if (trace_1.isEnabled()) {
trace_1.write(fragment + " has been shown when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + nativeTransition.getClass().getSimpleName() + " transition. Will complete page addition when transition ends.", trace_1.categories.Transition);
}
expandedFragment.completePageAdditionWhenTransitionEnds = {
isBack: isBack
};
}
}
if (!expandedFragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(fragment, isBack);
}
}
exports._onFragmentShown = _onFragmentShown;
function _onFragmentHidden(fragment, isBack, destroyed) {
if (trace_1.isEnabled()) {
trace_1.write("_onFragmentHidden(" + fragment + ", isBack: " + isBack + ", destroyed: " + destroyed + ")", trace_1.categories.Transition);
}
var expandedFragment = fragment;
var transitionType = isBack ? "Pop Exit" : "Exit";
var relevantTransition = isBack ? expandedFragment.enterPopExitTransition : expandedFragment.exitPopEnterTransition;
if (relevantTransition) {
if (trace_1.isEnabled()) {
trace_1.write(fragment + " has been hidden when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + relevantTransition + ". Will complete page removal when transition ends.", trace_1.categories.Transition);
}
expandedFragment.completePageRemovalWhenTransitionEnds = {
isBack: isBack
};
} else if (_sdkVersion() >= 21) {
var nativeTransition = isBack ? fragment.getReturnTransition() : fragment.getExitTransition();
if (nativeTransition) {
if (trace_1.isEnabled()) {
trace_1.write(fragment + " has been hidden when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + nativeTransition.getClass().getSimpleName() + " transition. Will complete page removal when transition ends.", trace_1.categories.Transition);
}
expandedFragment.completePageRemovalWhenTransitionEnds = {
isBack: isBack
};
}
}
expandedFragment.isDestroyed = destroyed;
if (expandedFragment.completePageRemovalWhenTransitionEnds === undefined) {
_completePageRemoval(fragment, isBack);
}
}
exports._onFragmentHidden = _onFragmentHidden;
function _completePageAddition(fragment, isBack) {
var expandedFragment = fragment;
expandedFragment.completePageAdditionWhenTransitionEnds = undefined;
var frame = fragment._callbacks.frame;
var entry = fragment._callbacks.entry;
var page = entry.resolvedPage;
if (trace_1.isEnabled()) {
trace_1.write("STARTING ADDITION of " + page + "...", trace_1.categories.Transition);
}
frame._currentEntry = entry;
page.onNavigatedTo(isBack);
frame._processNavigationQueue(page);
entry.isNavigation = undefined;
if (trace_1.isEnabled()) {
trace_1.write("ADDITION of " + page + " completed", trace_1.categories.Transition);
}
}
function _completePageRemoval(fragment, isBack) {
var expandedFragment = fragment;
expandedFragment.completePageRemovalWhenTransitionEnds = undefined;
var frame = fragment._callbacks.frame;
var entry = fragment._callbacks.entry;
var page = entry.resolvedPage;
if (trace_1.isEnabled()) {
trace_1.write("STARTING REMOVAL of " + page + "...", trace_1.categories.Transition);
}
if (page.frame) {
frame._removeView(page);
if (entry.isNavigation) {
page.onNavigatedFrom(isBack);
}
if (trace_1.isEnabled()) {
trace_1.write("REMOVAL of " + page + " completed", trace_1.categories.Transition);
}
} else {
if (trace_1.isEnabled()) {
trace_1.write("REMOVAL of " + page + " has already been done", trace_1.categories.Transition);
}
}
if (expandedFragment.isDestroyed) {
expandedFragment.isDestroyed = undefined;
if (page._context) {
page._tearDownUI(true);
if (trace_1.isEnabled()) {
trace_1.write("DETACHMENT of " + page + " completed", trace_1.categories.Transition);
}
} else {
if (trace_1.isEnabled()) {
trace_1.write("DETACHMENT of " + page + " has already been done", trace_1.categories.Transition);
}
_removePageNativeViewFromAndroidParent(page);
}
}
entry.isNavigation = undefined;
}
function _removePageNativeViewFromAndroidParent(page) {
if (page.nativeView && page.nativeView.getParent) {
var androidParent = page.nativeView.getParent();
if (androidParent && androidParent.removeView) {
if (trace_1.isEnabled()) {
trace_1.write("REMOVED " + page + ".nativeView from its Android parent", trace_1.categories.Transition);
}
if (page._context) {
page._tearDownUI(true);
}
androidParent.removeView(page.nativeView);
}
}
}
exports._removePageNativeViewFromAndroidParent = _removePageNativeViewFromAndroidParent;
function _toShortString(nativeTransition) {
return nativeTransition.getClass().getSimpleName() + "@" + nativeTransition.hashCode().toString(16);
}
function _addNativeTransitionListener(fragment, nativeTransition) {
var transitionListener = new android.transition.Transition.TransitionListener({
onTransitionCancel: function(transition) {
var expandedFragment = this.fragment;
if (!expandedFragment) {
return;
}
if (trace_1.isEnabled()) {
trace_1.write("CANCEL " + _toShortString(transition) + " transition for " + expandedFragment, trace_1.categories.Transition);
}
if (expandedFragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(expandedFragment, expandedFragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (expandedFragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(expandedFragment, expandedFragment.completePageAdditionWhenTransitionEnds.isBack);
}
this.checkedRemove();
},
onTransitionEnd: function(transition) {
var expandedFragment = this.fragment;
if (!expandedFragment) {
return;
}
if (trace_1.isEnabled()) {
trace_1.write("END " + _toShortString(transition) + " transition for " + expandedFragment, trace_1.categories.Transition);
}
if (expandedFragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(expandedFragment, expandedFragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (expandedFragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(expandedFragment, expandedFragment.completePageAdditionWhenTransitionEnds.isBack);
}
this.checkedRemove();
},
onTransitionPause: function(transition) {
var expandedFragment = this.fragment;
if (trace_1.isEnabled()) {
trace_1.write("PAUSE " + _toShortString(transition) + " transition for " + expandedFragment, trace_1.categories.Transition);
}
},
onTransitionResume: function(transition) {
var expandedFragment = this.fragment;
if (trace_1.isEnabled()) {
trace_1.write("RESUME " + _toShortString(transition) + " transition for " + expandedFragment, trace_1.categories.Transition);
}
},
onTransitionStart: function(transition) {
var expandedFragment = this.fragment;
if (trace_1.isEnabled()) {
trace_1.write("START " + _toShortString(transition) + " transition for " + expandedFragment, trace_1.categories.Transition);
}
}
});
transitionListener.fragment = fragment;
transitionListener.count = 2;
transitionListener.transition = nativeTransition;
transitionListener.listener = transitionListener;
transitionListener.checkedRemove = function() {
if (--this.count) {
return;
}
this.remove();
};
transitionListener.remove = function() {
if (!this.listener) {
return;
}
this.transition.removeListener(this.listener);
this.fragment = null;
this.listener = null;
this.transition.transitionListener = null;
this.transition = null;
};
nativeTransition.addListener(transitionListener);
nativeTransition.transitionListener = transitionListener;
}
function _onFragmentCreateAnimator(fragment, nextAnim) {
var transitionType;
switch (nextAnim) {
case enterFakeResourceId:
transitionType = AndroidTransitionType.enter;
break;

case exitFakeResourceId:
transitionType = AndroidTransitionType.exit;
break;

case popEnterFakeResourceId:
transitionType = AndroidTransitionType.popEnter;
break;

case popExitFakeResourceId:
transitionType = AndroidTransitionType.popExit;
break;
}
if ((nextAnim === popExitFakeResourceId || !nextAnim) && fragment.exitHack) {
trace_1.write("HACK EXIT FOR " + fragment, trace_1.categories.Transition);
transitionType = AndroidTransitionType.exit;
}
var transition;
switch (transitionType) {
case AndroidTransitionType.enter:
case AndroidTransitionType.popExit:
transition = fragment.enterPopExitTransition;
break;

case AndroidTransitionType.exit:
case AndroidTransitionType.popEnter:
transition = fragment.exitPopEnterTransition;
break;
}
var animator;
if (transition) {
animator = transition.createAndroidAnimator(transitionType);
trace_1.write(transition + ".createAndroidAnimator(" + transitionType + "): " + animator, trace_1.categories.Transition);
var transitionListener = new android.animation.Animator.AnimatorListener({
onAnimationStart: function(animator) {
if (trace_1.isEnabled()) {
trace_1.write("START " + transitionType + " " + this.transition + " for " + this.fragment, trace_1.categories.Transition);
}
},
onAnimationRepeat: function(animator) {
if (trace_1.isEnabled()) {
trace_1.write("REPEAT " + transitionType + " " + this.transition + " for " + this.fragment, trace_1.categories.Transition);
}
},
onAnimationEnd: function(animator) {
if (trace_1.isEnabled()) {
trace_1.write("END " + transitionType + " " + this.transition + " for " + this.fragment, trace_1.categories.Transition);
}
if (this.fragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(this.fragment, this.fragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (this.fragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(this.fragment, this.fragment.completePageAdditionWhenTransitionEnds.isBack);
}
this.checkedRemove();
},
onAnimationCancel: function(animator) {
if (trace_1.isEnabled()) {
trace_1.write("CANCEL " + transitionType + " " + this.transition + " for " + this.fragment, trace_1.categories.Transition);
}
if (this.fragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(this.fragment, this.fragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (this.fragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(this.fragment, this.fragment.completePageAdditionWhenTransitionEnds.isBack);
}
this.checkedRemove();
}
});
transitionListener.fragment = fragment;
transitionListener.transitionType = transitionType;
transitionListener.count = 2;
transitionListener.listener = transitionListener;
transitionListener.animator = animator;
transitionListener.checkedRemove = function() {
if (--this.count) {
return;
}
this.remove();
};
transitionListener.remove = function() {
if (!this.listener) {
return;
}
this.animator.removeListener(this.listener);
switch (this.transitionType) {
case AndroidTransitionType.enter:
case AndroidTransitionType.popExit:
this.fragment.enterPopExitTransitionListener = null;
break;

case AndroidTransitionType.exit:
case AndroidTransitionType.popEnter:
this.fragment.exitPopEnterTransitionListener = null;
break;
}
this.transitionType = null;
this.fragment = null;
this.listener = null;
this.animator.transitionListener = null;
this.animator = null;
this.transitionType = null;
};
animator.transitionListener = transitionListener;
animator.addListener(transitionListener);
switch (transitionType) {
case AndroidTransitionType.enter:
case AndroidTransitionType.popExit:
fragment.enterPopExitTransitionListener = transitionListener;
break;

case AndroidTransitionType.exit:
case AndroidTransitionType.popEnter:
fragment.exitPopEnterTransitionListener = transitionListener;
break;
}
}
if (transitionType && !animator) {
animator = _createDummyZeroDurationAnimator();
}
return animator;
}
exports._onFragmentCreateAnimator = _onFragmentCreateAnimator;
function _prepareCurrentFragmentForClearHistory(fragment) {
trace_1.write("Preparing " + fragment + " transitions fro clear history...", trace_1.categories.Transition);
var expandedFragment = fragment;
expandedFragment.exitHack = true;
if (_sdkVersion() >= 21) {
var exitTransition = fragment.getExitTransition();
fragment.setReturnTransition(exitTransition);
}
_printTransitions(fragment);
}
exports._prepareCurrentFragmentForClearHistory = _prepareCurrentFragmentForClearHistory;
var intEvaluator;
function ensureIntEvaluator() {
if (!intEvaluator) {
intEvaluator = new android.animation.IntEvaluator();
}
}
function _createDummyZeroDurationAnimator() {
if (trace_1.isEnabled()) {
trace_1.write("_createDummyZeroDurationAnimator()", trace_1.categories.Transition);
}
ensureIntEvaluator();
var nativeArray = Array.create(java.lang.Object, 2);
nativeArray[0] = java.lang.Integer.valueOf(0);
nativeArray[1] = java.lang.Integer.valueOf(1);
var animator = android.animation.ValueAnimator.ofObject(intEvaluator, nativeArray);
animator.setDuration(0);
return animator;
}
function _printTransitions(f) {
if (f && trace_1.isEnabled) {
var ef = f;
var result = ef + " Transitions:";
result += "" + (ef.enterPopExitTransition ? " enterPopExit=" + ef.enterPopExitTransition : "");
result += "" + (ef.exitPopEnterTransition ? " exitPopEnter=" + ef.exitPopEnterTransition : "");
if (_sdkVersion() >= 21) {
result += "" + (f.getEnterTransition() ? " enter=" + _toShortString(f.getEnterTransition()) : "");
result += "" + (f.getExitTransition() ? " exit=" + _toShortString(f.getExitTransition()) : "");
result += "" + (f.getReenterTransition() ? " popEnter=" + _toShortString(f.getReenterTransition()) : "");
result += "" + (f.getReturnTransition() ? " popExit=" + _toShortString(f.getReturnTransition()) : "");
}
trace_1.write(result, trace_1.categories.Transition);
}
}
var Transition = function() {
function Transition(duration, curve) {
this._duration = duration;
if (curve) {
this._interpolator = animation_1._resolveAnimationCurve(curve);
} else {
this._interpolator = _defaultInterpolator();
}
this._id = Transition.transitionId++;
}
Transition.prototype.getDuration = function() {
return this._duration;
};
Transition.prototype.getCurve = function() {
return this._interpolator;
};
Transition.prototype.animateIOSTransition = function(containerView, fromView, toView, operation, completion) {
throw new Error("Abstract method call");
};
Transition.prototype.createAndroidAnimator = function(transitionType) {
throw new Error("Abstract method call");
};
Transition.prototype.toString = function() {
return types_1.getClass(this) + "@" + this._id;
};
return Transition;
}();
Transition.transitionId = 0;
exports.Transition = Transition;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var transition = __webpack_require__(64);
var platform = __webpack_require__(25);
var lazy_1 = __webpack_require__(53);
var screenWidth = lazy_1.default(function() {
return platform.screen.mainScreen.widthPixels;
});
var screenHeight = lazy_1.default(function() {
return platform.screen.mainScreen.heightPixels;
});
var SlideTransition = function(_super) {
__extends(SlideTransition, _super);
function SlideTransition(direction, duration, curve) {
var _this = _super.call(this, duration, curve) || this;
_this._direction = direction;
return _this;
}
SlideTransition.prototype.createAndroidAnimator = function(transitionType) {
var translationValues = Array.create("float", 2);
switch (this._direction) {
case "left":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = -screenWidth();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = -screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = screenWidth();
break;
}
break;

case "right":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = -screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = screenWidth();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = -screenWidth();
break;
}
break;

case "top":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = -screenHeight();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = -screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = screenHeight();
break;
}
break;

case "bottom":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = -screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = screenHeight();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = -screenHeight();
break;
}
break;
}
var prop;
if (this._direction === "left" || this._direction === "right") {
prop = "translationX";
} else {
prop = "translationY";
}
var animator = android.animation.ObjectAnimator.ofFloat(null, prop, translationValues);
var duration = this.getDuration();
if (duration !== undefined) {
animator.setDuration(duration);
}
animator.setInterpolator(this.getCurve());
return animator;
};
SlideTransition.prototype.toString = function() {
return _super.prototype.toString.call(this) + " " + this._direction;
};
return SlideTransition;
}(transition.Transition);
exports.SlideTransition = SlideTransition;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var transition_1 = __webpack_require__(64);
var FadeTransition = function(_super) {
__extends(FadeTransition, _super);
function FadeTransition() {
return _super !== null && _super.apply(this, arguments) || this;
}
FadeTransition.prototype.createAndroidAnimator = function(transitionType) {
var alphaValues = Array.create("float", 2);
switch (transitionType) {
case transition_1.AndroidTransitionType.enter:
case transition_1.AndroidTransitionType.popEnter:
alphaValues[0] = 0;
alphaValues[1] = 1;
break;

case transition_1.AndroidTransitionType.exit:
case transition_1.AndroidTransitionType.popExit:
alphaValues[0] = 1;
alphaValues[1] = 0;
break;
}
var animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", alphaValues);
var duration = this.getDuration();
if (duration !== undefined) {
animator.setDuration(duration);
}
animator.setInterpolator(this.getCurve());
return animator;
};
return FadeTransition;
}(transition_1.Transition);
exports.FadeTransition = FadeTransition;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var transition_1 = __webpack_require__(64);
var FlipTransition = function(_super) {
__extends(FlipTransition, _super);
function FlipTransition(direction, duration, curve) {
var _this = _super.call(this, duration, curve) || this;
_this._direction = direction;
return _this;
}
FlipTransition.prototype.createAndroidAnimator = function(transitionType) {
var objectAnimators;
var values;
var animator;
var animatorSet = new android.animation.AnimatorSet();
var fullDuration = this.getDuration() || 300;
var interpolator = this.getCurve();
var rotationY = this._direction === "right" ? 180 : -180;
switch (transitionType) {
case transition_1.AndroidTransitionType.enter:
objectAnimators = Array.create(android.animation.Animator, 3);
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setDuration(0);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = rotationY;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[1] = animator;
values = Array.create("float", 2);
values[0] = 0;
values[1] = 1;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[2] = animator;
break;

case transition_1.AndroidTransitionType.exit:
objectAnimators = Array.create(android.animation.Animator, 2);
values = Array.create("float", 2);
values[0] = 0;
values[1] = -rotationY;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[1] = animator;
break;

case transition_1.AndroidTransitionType.popEnter:
objectAnimators = Array.create(android.animation.Animator, 3);
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setDuration(0);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = -rotationY;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[1] = animator;
values = Array.create("float", 2);
values[0] = 0;
values[1] = 1;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[2] = animator;
break;

case transition_1.AndroidTransitionType.popExit:
objectAnimators = Array.create(android.animation.Animator, 2);
values = Array.create("float", 2);
values[0] = 0;
values[1] = rotationY;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[1] = animator;
break;
}
animatorSet.playTogether(objectAnimators);
return animatorSet;
};
return FlipTransition;
}(transition_1.Transition);
exports.FlipTransition = FlipTransition;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var frame_1 = __webpack_require__(10);
var FragmentClass = function(_super) {
__extends(FragmentClass, _super);
function FragmentClass() {
var _this = _super.call(this) || this;
return global.__native(_this);
}
FragmentClass.prototype.onHiddenChanged = function(hidden) {
this._callbacks.onHiddenChanged(this, hidden, _super.prototype.onHiddenChanged);
};
FragmentClass.prototype.onCreateAnimator = function(transit, enter, nextAnim) {
var result = this._callbacks.onCreateAnimator(this, transit, enter, nextAnim, _super.prototype.onCreateAnimator);
return result;
};
FragmentClass.prototype.onCreate = function(savedInstanceState) {
if (!this._callbacks) {
frame_1.setFragmentCallbacks(this);
}
this.setHasOptionsMenu(true);
this._callbacks.onCreate(this, savedInstanceState, _super.prototype.onCreate);
};
FragmentClass.prototype.onCreateView = function(inflater, container, savedInstanceState) {
var result = this._callbacks.onCreateView(this, inflater, container, savedInstanceState, _super.prototype.onCreateView);
return result;
};
FragmentClass.prototype.onSaveInstanceState = function(outState) {
this._callbacks.onSaveInstanceState(this, outState, _super.prototype.onSaveInstanceState);
};
FragmentClass.prototype.onDestroyView = function() {
this._callbacks.onDestroyView(this, _super.prototype.onDestroyView);
};
FragmentClass.prototype.onDestroy = function() {
this._callbacks.onDestroy(this, _super.prototype.onDestroy);
};
FragmentClass.prototype.toString = function() {
return this._callbacks.toStringOverride(this, _super.prototype.toString);
};
return FragmentClass;
}(android.app.Fragment);
FragmentClass = __decorate([ JavaProxy("com.tns.FragmentClass") ], FragmentClass);
frame_1.setFragmentClass(FragmentClass);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var button_common_1 = __webpack_require__(70);
var gestures_1 = __webpack_require__(56);
__export(__webpack_require__(70));
var ClickListener;
var APILEVEL;
function initializeClickListener() {
if (ClickListener) {
return;
}
var ClickListenerImpl = function(_super) {
__extends(ClickListenerImpl, _super);
function ClickListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
ClickListenerImpl.prototype.onClick = function(v) {
this.owner._emit(button_common_1.ButtonBase.tapEvent);
};
return ClickListenerImpl;
}(java.lang.Object);
ClickListenerImpl = __decorate([ Interfaces([ android.view.View.OnClickListener ]) ], ClickListenerImpl);
ClickListener = ClickListenerImpl;
APILEVEL = android.os.Build.VERSION.SDK_INT;
}
var Button = function(_super) {
__extends(Button, _super);
function Button() {
return _super !== null && _super.apply(this, arguments) || this;
}
Button.prototype.createNativeView = function() {
initializeClickListener();
var button = new android.widget.Button(this._context);
var clickListener = new ClickListener(this);
button.setOnClickListener(clickListener);
button.clickListener = clickListener;
return button;
};
Button.prototype.initNativeView = function() {
this.nativeView.clickListener.owner = this;
_super.prototype.initNativeView.call(this);
};
Button.prototype.disposeNativeView = function() {
this.nativeView.clickListener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
Button.prototype._updateHandler = function(subscribe) {
var _this = this;
if (subscribe) {
this._highlightedHandler = this._highlightedHandler || function(args) {
switch (args.action) {
case gestures_1.TouchAction.up:
_this._goToVisualState("normal");
break;

case gestures_1.TouchAction.down:
_this._goToVisualState("highlighted");
break;
}
};
this.on(gestures_1.GestureTypes.touch, this._highlightedHandler);
} else {
this.off(gestures_1.GestureTypes.touch, this._highlightedHandler);
}
};
Button.prototype[button_common_1.paddingTopProperty.getDefault] = function() {
return {
value: this._defaultPaddingTop,
unit: "px"
};
};
Button.prototype[button_common_1.paddingTopProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingTop(this.nativeView, button_common_1.Length.toDevicePixels(value, 0) + button_common_1.Length.toDevicePixels(this.style.borderTopWidth, 0));
};
Button.prototype[button_common_1.paddingRightProperty.getDefault] = function() {
return {
value: this._defaultPaddingRight,
unit: "px"
};
};
Button.prototype[button_common_1.paddingRightProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingRight(this.nativeView, button_common_1.Length.toDevicePixels(value, 0) + button_common_1.Length.toDevicePixels(this.style.borderRightWidth, 0));
};
Button.prototype[button_common_1.paddingBottomProperty.getDefault] = function() {
return {
value: this._defaultPaddingBottom,
unit: "px"
};
};
Button.prototype[button_common_1.paddingBottomProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingBottom(this.nativeView, button_common_1.Length.toDevicePixels(value, 0) + button_common_1.Length.toDevicePixels(this.style.borderBottomWidth, 0));
};
Button.prototype[button_common_1.paddingLeftProperty.getDefault] = function() {
return {
value: this._defaultPaddingLeft,
unit: "px"
};
};
Button.prototype[button_common_1.paddingLeftProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingLeft(this.nativeView, button_common_1.Length.toDevicePixels(value, 0) + button_common_1.Length.toDevicePixels(this.style.borderLeftWidth, 0));
};
Button.prototype[button_common_1.zIndexProperty.getDefault] = function() {
return org.nativescript.widgets.ViewHelper.getZIndex(this.nativeView);
};
Button.prototype[button_common_1.zIndexProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setZIndex(this.nativeView, value);
if (APILEVEL >= 21) {
this.nativeView.setStateListAnimator(null);
}
};
Button.prototype[button_common_1.textAlignmentProperty.setNative] = function(value) {
var newValue = value === "initial" ? "center" : value;
_super.prototype[button_common_1.textAlignmentProperty.setNative].call(this, newValue);
};
return Button;
}(button_common_1.ButtonBase);
__decorate([ button_common_1.PseudoClassHandler("normal", "highlighted", "pressed", "active") ], Button.prototype, "_updateHandler", null);
exports.Button = Button;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var text_base_1 = __webpack_require__(71);
__export(__webpack_require__(71));
var ButtonBase = function(_super) {
__extends(ButtonBase, _super);
function ButtonBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(ButtonBase.prototype, "textWrap", {
get: function() {
return this.style.whiteSpace === "normal";
},
set: function(value) {
this.style.whiteSpace = value ? "normal" : "nowrap";
},
enumerable: true,
configurable: true
});
return ButtonBase;
}(text_base_1.TextBase);
ButtonBase.tapEvent = "tap";
exports.ButtonBase = ButtonBase;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var font_1 = __webpack_require__(32);
var style_properties_1 = __webpack_require__(31);
var text_base_common_1 = __webpack_require__(72);
__export(__webpack_require__(72));
var TextTransformation;
function initializeTextTransformation() {
if (TextTransformation) {
return;
}
var TextTransformationImpl = function(_super) {
__extends(TextTransformationImpl, _super);
function TextTransformationImpl(textBase) {
var _this = _super.call(this) || this;
_this.textBase = textBase;
return global.__native(_this);
}
TextTransformationImpl.prototype.getTransformation = function(charSeq, view) {
var formattedText = this.textBase.formattedText;
if (formattedText) {
return createSpannableStringBuilder(formattedText);
} else {
return getTransformedText(this.textBase.text, this.textBase.textTransform);
}
};
TextTransformationImpl.prototype.onFocusChanged = function(view, sourceText, focused, direction, previouslyFocusedRect) {};
return TextTransformationImpl;
}(java.lang.Object);
TextTransformationImpl = __decorate([ Interfaces([ android.text.method.TransformationMethod ]) ], TextTransformationImpl);
TextTransformation = TextTransformationImpl;
}
var TextBase = function(_super) {
__extends(TextBase, _super);
function TextBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
TextBase.prototype.initNativeView = function() {
this._defaultTransformationMethod = this.nativeView.getTransformationMethod();
_super.prototype.initNativeView.call(this);
};
TextBase.prototype.resetNativeView = function() {
_super.prototype.resetNativeView.call(this);
this.nativeView.setTransformationMethod(this._defaultTransformationMethod);
this._defaultTransformationMethod = null;
};
TextBase.prototype[text_base_common_1.textProperty.setNative] = function(value) {
if (this.formattedText) {
return;
}
this._setNativeText();
};
TextBase.prototype[text_base_common_1.formattedTextProperty.setNative] = function(value) {
if (this.secure) {
return;
}
initializeTextTransformation();
var spannableStringBuilder = createSpannableStringBuilder(value);
this.nativeView.setText(spannableStringBuilder);
text_base_common_1.textProperty.nativeValueChange(this, value === null || value === undefined ? "" : value.toString());
if (spannableStringBuilder && this.nativeView instanceof android.widget.Button && !(this.nativeView.getTransformationMethod() instanceof TextTransformation)) {
this.nativeView.setTransformationMethod(new TextTransformation(this));
}
};
TextBase.prototype[text_base_common_1.textTransformProperty.setNative] = function(value) {
if (value === "initial") {
this.nativeView.setTransformationMethod(this._defaultTransformationMethod);
return;
}
if (this.secure) {
return;
}
initializeTextTransformation();
this.nativeView.setTransformationMethod(new TextTransformation(this));
};
TextBase.prototype[text_base_common_1.textAlignmentProperty.getDefault] = function() {
return "initial";
};
TextBase.prototype[text_base_common_1.textAlignmentProperty.setNative] = function(value) {
var verticalGravity = this.nativeView.getGravity() & android.view.Gravity.VERTICAL_GRAVITY_MASK;
switch (value) {
case "initial":
case "left":
this.nativeView.setGravity(android.view.Gravity.LEFT | verticalGravity);
break;

case "center":
this.nativeView.setGravity(android.view.Gravity.CENTER_HORIZONTAL | verticalGravity);
break;

case "right":
this.nativeView.setGravity(android.view.Gravity.RIGHT | verticalGravity);
break;
}
};
TextBase.prototype[text_base_common_1.whiteSpaceProperty.setNative] = function(value) {
var nativeView = this.nativeView;
switch (value) {
case "initial":
case "normal":
nativeView.setSingleLine(false);
nativeView.setEllipsize(null);
break;

case "nowrap":
nativeView.setSingleLine(true);
nativeView.setEllipsize(android.text.TextUtils.TruncateAt.END);
break;
}
};
TextBase.prototype[text_base_common_1.colorProperty.getDefault] = function() {
return this.nativeView.getTextColors();
};
TextBase.prototype[text_base_common_1.colorProperty.setNative] = function(value) {
if (!this.formattedText || !(value instanceof text_base_common_1.Color)) {
if (value instanceof text_base_common_1.Color) {
this.nativeView.setTextColor(value.android);
} else {
this.nativeView.setTextColor(value);
}
}
};
TextBase.prototype[text_base_common_1.fontSizeProperty.getDefault] = function() {
return {
nativeSize: this.nativeView.getTextSize()
};
};
TextBase.prototype[text_base_common_1.fontSizeProperty.setNative] = function(value) {
if (!this.formattedText || typeof value !== "number") {
if (typeof value === "number") {
this.nativeView.setTextSize(value);
} else {
this.nativeView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, value.nativeSize);
}
}
};
TextBase.prototype[text_base_common_1.fontInternalProperty.getDefault] = function() {
return this.nativeView.getTypeface();
};
TextBase.prototype[text_base_common_1.fontInternalProperty.setNative] = function(value) {
if (!this.formattedText || !(value instanceof font_1.Font)) {
this.nativeView.setTypeface(value instanceof font_1.Font ? value.getAndroidTypeface() : value);
}
};
TextBase.prototype[text_base_common_1.textDecorationProperty.setNative] = function(value) {
var flags;
switch (value) {
case "none":
flags = 0;
break;

case "underline":
flags = android.graphics.Paint.UNDERLINE_TEXT_FLAG;
break;

case "line-through":
flags = android.graphics.Paint.STRIKE_THRU_TEXT_FLAG;
break;

case "underline line-through":
flags = android.graphics.Paint.UNDERLINE_TEXT_FLAG | android.graphics.Paint.STRIKE_THRU_TEXT_FLAG;
break;
}
this.nativeView.setPaintFlags(flags);
this._setNativeText();
};
TextBase.prototype[text_base_common_1.letterSpacingProperty.getDefault] = function() {
return org.nativescript.widgets.ViewHelper.getLetterspacing(this.nativeView);
};
TextBase.prototype[text_base_common_1.letterSpacingProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setLetterspacing(this.nativeView, value);
};
TextBase.prototype[text_base_common_1.paddingTopProperty.getDefault] = function() {
return {
value: this._defaultPaddingTop,
unit: "px"
};
};
TextBase.prototype[text_base_common_1.paddingTopProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingTop(this.nativeView, text_base_common_1.Length.toDevicePixels(value, 0) + text_base_common_1.Length.toDevicePixels(this.style.borderTopWidth, 0));
};
TextBase.prototype[text_base_common_1.paddingRightProperty.getDefault] = function() {
return {
value: this._defaultPaddingRight,
unit: "px"
};
};
TextBase.prototype[text_base_common_1.paddingRightProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingRight(this.nativeView, text_base_common_1.Length.toDevicePixels(value, 0) + text_base_common_1.Length.toDevicePixels(this.style.borderRightWidth, 0));
};
TextBase.prototype[text_base_common_1.paddingBottomProperty.getDefault] = function() {
return {
value: this._defaultPaddingBottom,
unit: "px"
};
};
TextBase.prototype[text_base_common_1.paddingBottomProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingBottom(this.nativeView, text_base_common_1.Length.toDevicePixels(value, 0) + text_base_common_1.Length.toDevicePixels(this.style.borderBottomWidth, 0));
};
TextBase.prototype[text_base_common_1.paddingLeftProperty.getDefault] = function() {
return {
value: this._defaultPaddingLeft,
unit: "px"
};
};
TextBase.prototype[text_base_common_1.paddingLeftProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingLeft(this.nativeView, text_base_common_1.Length.toDevicePixels(value, 0) + text_base_common_1.Length.toDevicePixels(this.style.borderLeftWidth, 0));
};
TextBase.prototype._setNativeText = function() {
var transformedText;
if (this.formattedText) {
transformedText = createSpannableStringBuilder(this.formattedText);
} else {
var text = this.text;
var stringValue = text === null || text === undefined ? "" : text.toString();
transformedText = getTransformedText(stringValue, this.textTransform);
}
this.nativeView.setText(transformedText);
};
return TextBase;
}(text_base_common_1.TextBaseCommon);
exports.TextBase = TextBase;
function getCapitalizedString(str) {
var words = str.split(" ");
var newWords = [];
for (var i = 0, length_1 = words.length; i < length_1; i++) {
var word = words[i].toLowerCase();
newWords.push(word.substr(0, 1).toUpperCase() + word.substring(1));
}
return newWords.join(" ");
}
function getTransformedText(text, textTransform) {
switch (textTransform) {
case "uppercase":
return text.toUpperCase();

case "lowercase":
return text.toLowerCase();

case "capitalize":
return getCapitalizedString(text);

case "none":
default:
return text;
}
}
exports.getTransformedText = getTransformedText;
function createSpannableStringBuilder(formattedString) {
if (!formattedString) {
return null;
}
var ssb = new android.text.SpannableStringBuilder();
for (var i = 0, spanStart = 0, spanLength = 0, length_2 = formattedString.spans.length; i < length_2; i++) {
var span = formattedString.spans.getItem(i);
var text = span.text;
var textTransform = formattedString.parent.textTransform;
var spanText = text === null || text === undefined ? "" : text.toString();
if (textTransform && textTransform !== "none") {
spanText = getTransformedText(spanText, textTransform);
}
spanLength = spanText.length;
if (spanLength > 0) {
ssb.insert(spanStart, spanText);
setSpanModifiers(ssb, span, spanStart, spanStart + spanLength);
spanStart += spanLength;
}
}
return ssb;
}
function setSpanModifiers(ssb, span, start, end) {
var spanStyle = span.style;
var bold = text_base_common_1.isBold(spanStyle.fontWeight);
var italic = spanStyle.fontStyle === "italic";
if (bold && italic) {
ssb.setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD_ITALIC), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
} else if (bold) {
ssb.setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
} else if (italic) {
ssb.setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.ITALIC), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
var fontFamily = span.fontFamily;
if (fontFamily) {
var font = new font_1.Font(fontFamily, 0, italic ? "italic" : "normal", bold ? "bold" : "normal");
var typefaceSpan = new org.nativescript.widgets.CustomTypefaceSpan(fontFamily, font.getAndroidTypeface());
ssb.setSpan(typefaceSpan, start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
var realFontSize = span.fontSize;
if (realFontSize) {
ssb.setSpan(new android.text.style.AbsoluteSizeSpan(realFontSize * text_base_common_1.layout.getDisplayDensity()), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
var color = span.color;
if (color) {
ssb.setSpan(new android.text.style.ForegroundColorSpan(color.android), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
var backgroundColor;
if (style_properties_1.backgroundColorProperty.isSet(spanStyle)) {
backgroundColor = spanStyle.backgroundColor;
} else if (style_properties_1.backgroundColorProperty.isSet(span.parent.style)) {
backgroundColor = span.parent.style.backgroundColor;
} else if (style_properties_1.backgroundColorProperty.isSet(span.parent.parent.style)) {
backgroundColor = span.parent.parent.style.backgroundColor;
}
if (backgroundColor) {
ssb.setSpan(new android.text.style.BackgroundColorSpan(backgroundColor.android), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
var valueSource;
if (text_base_common_1.textDecorationProperty.isSet(spanStyle)) {
valueSource = spanStyle;
} else if (text_base_common_1.textDecorationProperty.isSet(span.parent.style)) {
valueSource = span.parent.style;
} else if (text_base_common_1.textDecorationProperty.isSet(span.parent.parent.style)) {
valueSource = span.parent.parent.style;
}
if (valueSource) {
var textDecorations = valueSource.textDecoration;
var underline_1 = textDecorations.indexOf("underline") !== -1;
if (underline_1) {
ssb.setSpan(new android.text.style.UnderlineSpan(), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
var strikethrough = textDecorations.indexOf("line-through") !== -1;
if (strikethrough) {
ssb.setSpan(new android.text.style.StrikethroughSpan(), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
}
}
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
var formatted_string_1 = __webpack_require__(73);
exports.FormattedString = formatted_string_1.FormattedString;
exports.Span = formatted_string_1.Span;
__export(__webpack_require__(12));
var CHILD_SPAN = "Span";
var CHILD_FORMATTED_TEXT = "formattedText";
var CHILD_FORMATTED_STRING = "FormattedString";
var TextBaseCommon = function(_super) {
__extends(TextBaseCommon, _super);
function TextBaseCommon() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(TextBaseCommon.prototype, "fontFamily", {
get: function() {
return this.style.fontFamily;
},
set: function(value) {
this.style.fontFamily = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "fontSize", {
get: function() {
return this.style.fontSize;
},
set: function(value) {
this.style.fontSize = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "fontStyle", {
get: function() {
return this.style.fontStyle;
},
set: function(value) {
this.style.fontStyle = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "fontWeight", {
get: function() {
return this.style.fontWeight;
},
set: function(value) {
this.style.fontWeight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "letterSpacing", {
get: function() {
return this.style.letterSpacing;
},
set: function(value) {
this.style.letterSpacing = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "textAlignment", {
get: function() {
return this.style.textAlignment;
},
set: function(value) {
this.style.textAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "textDecoration", {
get: function() {
return this.style.textDecoration;
},
set: function(value) {
this.style.textDecoration = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "textTransform", {
get: function() {
return this.style.textTransform;
},
set: function(value) {
this.style.textTransform = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "whiteSpace", {
get: function() {
return this.style.whiteSpace;
},
set: function(value) {
this.style.whiteSpace = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "padding", {
get: function() {
return this.style.padding;
},
set: function(value) {
this.style.padding = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "paddingTop", {
get: function() {
return this.style.paddingTop;
},
set: function(value) {
this.style.paddingTop = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "paddingRight", {
get: function() {
return this.style.paddingRight;
},
set: function(value) {
this.style.paddingRight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "paddingBottom", {
get: function() {
return this.style.paddingBottom;
},
set: function(value) {
this.style.paddingBottom = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "paddingLeft", {
get: function() {
return this.style.paddingLeft;
},
set: function(value) {
this.style.paddingLeft = value;
},
enumerable: true,
configurable: true
});
TextBaseCommon.prototype._onFormattedTextContentsChanged = function(data) {
if (this.nativeView) {
this[exports.formattedTextProperty.setNative](data.value);
}
};
TextBaseCommon.prototype._addChildFromBuilder = function(name, value) {
if (name === CHILD_SPAN) {
if (!this.formattedText) {
var formattedText = new formatted_string_1.FormattedString();
formattedText.spans.push(value);
this.formattedText = formattedText;
} else {
this.formattedText.spans.push(value);
}
} else if (name === CHILD_FORMATTED_TEXT || name === CHILD_FORMATTED_STRING) {
this.formattedText = value;
}
};
TextBaseCommon.prototype._requestLayoutOnTextChanged = function() {
this.requestLayout();
};
TextBaseCommon.prototype.eachChild = function(callback) {
var text = this.formattedText;
if (text) {
callback(text);
}
};
TextBaseCommon.prototype._setNativeText = function() {};
return TextBaseCommon;
}(view_1.View);
exports.TextBaseCommon = TextBaseCommon;
function isBold(fontWeight) {
return fontWeight === "bold" || fontWeight === "700" || fontWeight === "800" || fontWeight === "900";
}
exports.isBold = isBold;
exports.textProperty = new view_1.Property({
name: "text",
defaultValue: ""
});
exports.textProperty.register(TextBaseCommon);
exports.formattedTextProperty = new view_1.Property({
name: "formattedText",
affectsLayout: view_1.isIOS,
valueChanged: onFormattedTextPropertyChanged
});
exports.formattedTextProperty.register(TextBaseCommon);
function onFormattedTextPropertyChanged(textBase, oldValue, newValue) {
if (oldValue) {
oldValue.off(view_1.Observable.propertyChangeEvent, textBase._onFormattedTextContentsChanged, textBase);
textBase._removeView(oldValue);
}
if (newValue) {
textBase._addView(newValue);
newValue.on(view_1.Observable.propertyChangeEvent, textBase._onFormattedTextContentsChanged, textBase);
}
}
var textAlignmentConverter = view_1.makeParser(view_1.makeValidator("initial", "left", "center", "right"));
exports.textAlignmentProperty = new view_1.InheritedCssProperty({
name: "textAlignment",
cssName: "text-align",
defaultValue: "initial",
valueConverter: textAlignmentConverter
});
exports.textAlignmentProperty.register(view_1.Style);
var textTransformConverter = view_1.makeParser(view_1.makeValidator("initial", "none", "capitalize", "uppercase", "lowercase"));
exports.textTransformProperty = new view_1.CssProperty({
name: "textTransform",
cssName: "text-transform",
defaultValue: "initial",
valueConverter: textTransformConverter
});
exports.textTransformProperty.register(view_1.Style);
var whiteSpaceConverter = view_1.makeParser(view_1.makeValidator("initial", "normal", "nowrap"));
exports.whiteSpaceProperty = new view_1.CssProperty({
name: "whiteSpace",
cssName: "white-space",
defaultValue: "initial",
affectsLayout: view_1.isIOS,
valueConverter: whiteSpaceConverter
});
exports.whiteSpaceProperty.register(view_1.Style);
var textDecorationConverter = view_1.makeParser(view_1.makeValidator("none", "underline", "line-through", "underline line-through"));
exports.textDecorationProperty = new view_1.CssProperty({
name: "textDecoration",
cssName: "text-decoration",
defaultValue: "none",
valueConverter: textDecorationConverter
});
exports.textDecorationProperty.register(view_1.Style);
exports.letterSpacingProperty = new view_1.CssProperty({
name: "letterSpacing",
cssName: "letter-spacing",
defaultValue: 0,
affectsLayout: view_1.isIOS,
valueConverter: function(v) {
return parseFloat(v);
}
});
exports.letterSpacingProperty.register(view_1.Style);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var span_1 = __webpack_require__(74);
exports.Span = span_1.Span;
var observable_1 = __webpack_require__(20);
var observable_array_1 = __webpack_require__(75);
var view_1 = __webpack_require__(12);
var knownCollections;
(function(knownCollections) {
knownCollections.spans = "spans";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var CHILD_SPAN = "Span";
var FormattedString = function(_super) {
__extends(FormattedString, _super);
function FormattedString() {
var _this = _super.call(this) || this;
_this._spans = new observable_array_1.ObservableArray();
_this._spans.addEventListener(observable_array_1.ObservableArray.changeEvent, _this.onSpansCollectionChanged, _this);
return _this;
}
Object.defineProperty(FormattedString.prototype, "fontFamily", {
get: function() {
return this.style.fontFamily;
},
set: function(value) {
this.style.fontFamily = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontSize", {
get: function() {
return this.style.fontSize;
},
set: function(value) {
this.style.fontSize = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontStyle", {
get: function() {
return this.style.fontStyle;
},
set: function(value) {
this.style.fontStyle = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontWeight", {
get: function() {
return this.style.fontWeight;
},
set: function(value) {
this.style.fontWeight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "textDecoration", {
get: function() {
return this.style.textDecoration;
},
set: function(value) {
this.style.textDecoration = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "color", {
get: function() {
return this.style.color;
},
set: function(value) {
this.style.color = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "backgroundColor", {
get: function() {
return this.style.backgroundColor;
},
set: function(value) {
this.style.backgroundColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "spans", {
get: function() {
if (!this._spans) {
this._spans = new observable_array_1.ObservableArray();
}
return this._spans;
},
enumerable: true,
configurable: true
});
FormattedString.prototype.toString = function() {
var result = "";
for (var i = 0, length_1 = this._spans.length; i < length_1; i++) {
result += this._spans.getItem(i).text;
}
return result;
};
FormattedString.prototype._addArrayFromBuilder = function(name, value) {
if (name === knownCollections.spans) {
this.spans.push(value);
}
};
FormattedString.prototype._addChildFromBuilder = function(name, value) {
if (name === CHILD_SPAN) {
this.spans.push(value);
}
};
FormattedString.prototype.onSpansCollectionChanged = function(eventData) {
if (eventData.addedCount > 0) {
for (var i = 0; i < eventData.addedCount; i++) {
var span = eventData.object.getItem(eventData.index + i);
this._addView(span);
this.addPropertyChangeHandler(span);
}
}
if (eventData.removed && eventData.removed.length > 0) {
for (var p = 0; p < eventData.removed.length; p++) {
var span = eventData.removed[p];
this.removePropertyChangeHandler(span);
this._removeView(span);
}
}
this.notifyPropertyChange(".", this);
};
FormattedString.prototype.addPropertyChangeHandler = function(span) {
var style = span.style;
span.on(observable_1.Observable.propertyChangeEvent, this.onPropertyChange, this);
style.on("fontFamilyChange", this.onPropertyChange, this);
style.on("fontSizeChange", this.onPropertyChange, this);
style.on("fontStyleChange", this.onPropertyChange, this);
style.on("fontWeightChange", this.onPropertyChange, this);
style.on("textDecorationChange", this.onPropertyChange, this);
style.on("colorChange", this.onPropertyChange, this);
style.on("backgroundColorChange", this.onPropertyChange, this);
};
FormattedString.prototype.removePropertyChangeHandler = function(span) {
var style = span.style;
span.off(observable_1.Observable.propertyChangeEvent, this.onPropertyChange, this);
style.off("fontFamilyChange", this.onPropertyChange, this);
style.off("fontSizeChange", this.onPropertyChange, this);
style.off("fontStyleChange", this.onPropertyChange, this);
style.off("fontWeightChange", this.onPropertyChange, this);
style.off("textDecorationChange", this.onPropertyChange, this);
style.off("colorChange", this.onPropertyChange, this);
style.off("backgroundColorChange", this.onPropertyChange, this);
};
FormattedString.prototype.onPropertyChange = function(data) {
this.notifyPropertyChange(data.propertyName, this);
};
FormattedString.prototype.eachChild = function(callback) {
this.spans.forEach(function(v, i, arr) {
return callback(v);
});
};
return FormattedString;
}(view_1.ViewBase);
exports.FormattedString = FormattedString;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
var Span = function(_super) {
__extends(Span, _super);
function Span() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(Span.prototype, "fontFamily", {
get: function() {
return this.style.fontFamily;
},
set: function(value) {
this.style.fontFamily = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "fontSize", {
get: function() {
return this.style.fontSize;
},
set: function(value) {
this.style.fontSize = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "fontStyle", {
get: function() {
return this.style.fontStyle;
},
set: function(value) {
this.style.fontStyle = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "fontWeight", {
get: function() {
return this.style.fontWeight;
},
set: function(value) {
this.style.fontWeight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "textDecoration", {
get: function() {
return this.style.textDecoration;
},
set: function(value) {
this.style.textDecoration = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "color", {
get: function() {
return this.style.color;
},
set: function(value) {
this.style.color = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "backgroundColor", {
get: function() {
return this.style.backgroundColor;
},
set: function(value) {
this.style.backgroundColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "text", {
get: function() {
return this._text;
},
set: function(value) {
if (this._text !== value) {
this._text = value;
this.notifyPropertyChange("text", value);
}
},
enumerable: true,
configurable: true
});
Span.prototype._setTextInternal = function(value) {
this._text = value;
};
return Span;
}(view_1.ViewBase);
exports.Span = Span;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var observable = __webpack_require__(20);
var types = __webpack_require__(17);
var ChangeType = function() {
function ChangeType() {}
return ChangeType;
}();
ChangeType.Add = "add";
ChangeType.Delete = "delete";
ChangeType.Update = "update";
ChangeType.Splice = "splice";
exports.ChangeType = ChangeType;
var CHANGE = "change";
var ObservableArray = function(_super) {
__extends(ObservableArray, _super);
function ObservableArray() {
var _this = _super.call(this) || this;
if (arguments.length === 1 && Array.isArray(arguments[0])) {
_this._array = arguments[0].slice();
} else {
_this._array = Array.apply(null, arguments);
}
_this._addArgs = {
eventName: CHANGE,
object: _this,
action: ChangeType.Add,
index: null,
removed: new Array(),
addedCount: 1
};
_this._deleteArgs = {
eventName: CHANGE,
object: _this,
action: ChangeType.Delete,
index: null,
removed: null,
addedCount: 0
};
return _this;
}
ObservableArray.prototype.getItem = function(index) {
return this._array[index];
};
ObservableArray.prototype.setItem = function(index, value) {
var oldValue = this._array[index];
this._array[index] = value;
this.notify({
eventName: CHANGE,
object: this,
action: ChangeType.Update,
index: index,
removed: [ oldValue ],
addedCount: 1
});
};
Object.defineProperty(ObservableArray.prototype, "length", {
get: function() {
return this._array.length;
},
set: function(value) {
if (types.isNumber(value) && this._array && this._array.length !== value) {
this.splice(value, this._array.length - value);
}
},
enumerable: true,
configurable: true
});
ObservableArray.prototype.toString = function() {
return this._array.toString();
};
ObservableArray.prototype.toLocaleString = function() {
return this._array.toLocaleString();
};
ObservableArray.prototype.concat = function() {
this._addArgs.index = this._array.length;
var result = this._array.concat.apply(this._array, arguments);
return result;
};
ObservableArray.prototype.join = function(separator) {
return this._array.join(separator);
};
ObservableArray.prototype.pop = function() {
this._deleteArgs.index = this._array.length - 1;
var result = this._array.pop();
this._deleteArgs.removed = [ result ];
this.notify(this._deleteArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.push = function() {
this._addArgs.index = this._array.length;
if (arguments.length === 1 && Array.isArray(arguments[0])) {
var source = arguments[0];
for (var i = 0, l = source.length; i < l; i++) {
this._array.push(source[i]);
}
} else {
this._array.push.apply(this._array, arguments);
}
this._addArgs.addedCount = this._array.length - this._addArgs.index;
this.notify(this._addArgs);
this._notifyLengthChange();
return this._array.length;
};
ObservableArray.prototype._notifyLengthChange = function() {
var lengthChangedData = this._createPropertyChangeData("length", this._array.length);
this.notify(lengthChangedData);
};
ObservableArray.prototype.reverse = function() {
return this._array.reverse();
};
ObservableArray.prototype.shift = function() {
var result = this._array.shift();
this._deleteArgs.index = 0;
this._deleteArgs.removed = [ result ];
this.notify(this._deleteArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.slice = function(start, end) {
return this._array.slice(start, end);
};
ObservableArray.prototype.sort = function(compareFn) {
return this._array.sort(compareFn);
};
ObservableArray.prototype.splice = function(start, deleteCount) {
var length = this._array.length;
var result = this._array.splice.apply(this._array, arguments);
this.notify({
eventName: CHANGE,
object: this,
action: ChangeType.Splice,
index: start,
removed: result,
addedCount: this._array.length > length ? this._array.length - length : 0
});
if (this._array.length !== length) {
this._notifyLengthChange();
}
return result;
};
ObservableArray.prototype.unshift = function() {
var length = this._array.length;
var result = this._array.unshift.apply(this._array, arguments);
this._addArgs.index = 0;
this._addArgs.addedCount = result - length;
this.notify(this._addArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.indexOf = function(searchElement, fromIndex) {
var index = fromIndex ? fromIndex : 0;
for (var i = index, l = this._array.length; i < l; i++) {
if (this._array[i] === searchElement) {
return i;
}
}
return -1;
};
ObservableArray.prototype.lastIndexOf = function(searchElement, fromIndex) {
var index = fromIndex ? fromIndex : this._array.length - 1;
for (var i = index; i >= 0; i--) {
if (this._array[i] === searchElement) {
return i;
}
}
return -1;
};
ObservableArray.prototype.every = function(callbackfn, thisArg) {
return this._array.every(callbackfn, thisArg);
};
ObservableArray.prototype.some = function(callbackfn, thisArg) {
return this._array.some(callbackfn, thisArg);
};
ObservableArray.prototype.forEach = function(callbackfn, thisArg) {
this._array.forEach(callbackfn, thisArg);
};
ObservableArray.prototype.map = function(callbackfn, thisArg) {
return this._array.map(callbackfn, thisArg);
};
ObservableArray.prototype.filter = function(callbackfn, thisArg) {
return this._array.filter(callbackfn, thisArg);
};
ObservableArray.prototype.reduce = function(callbackfn, initialValue) {
return this._array.reduce(callbackfn, initialValue);
};
ObservableArray.prototype.reduceRight = function(callbackfn, initialValue) {
return this._array.reduceRight(callbackfn, initialValue);
};
return ObservableArray;
}(observable.Observable);
ObservableArray.changeEvent = CHANGE;
exports.ObservableArray = ObservableArray;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var text_field_common_1 = __webpack_require__(77);
__export(__webpack_require__(77));
var TextField = function(_super) {
__extends(TextField, _super);
function TextField() {
return _super !== null && _super.apply(this, arguments) || this;
}
TextField.prototype._configureEditText = function(editText) {
editText.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
editText.setLines(1);
editText.setMaxLines(1);
editText.setHorizontallyScrolling(true);
};
TextField.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
this.nativeView.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
};
TextField.prototype._onReturnPress = function() {
this.notify({
eventName: TextField.returnPressEvent,
object: this
});
};
TextField.prototype[text_field_common_1.secureProperty.getDefault] = function() {
return false;
};
TextField.prototype[text_field_common_1.secureProperty.setNative] = function(value) {
var nativeView = this.nativeView;
var currentInputType = nativeView.getInputType();
var currentClass = currentInputType & android.text.InputType.TYPE_MASK_CLASS;
var currentFlags = currentInputType & android.text.InputType.TYPE_MASK_FLAGS;
var newInputType = currentInputType;
if (value) {
if (currentClass === android.text.InputType.TYPE_CLASS_TEXT) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD;
} else if (currentClass === android.text.InputType.TYPE_CLASS_NUMBER) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_NUMBER_VARIATION_PASSWORD;
}
newInputType = newInputType & ~28672;
} else {
if (currentClass === android.text.InputType.TYPE_CLASS_TEXT) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL;
} else if (currentClass === android.text.InputType.TYPE_CLASS_NUMBER) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL;
}
}
nativeView.setInputType(newInputType);
};
TextField.prototype[text_field_common_1.whiteSpaceProperty.getDefault] = function() {
return "nowrap";
};
TextField.prototype[text_field_common_1.whiteSpaceProperty.setNative] = function(value) {};
return TextField;
}(text_field_common_1.TextFieldBase);
exports.TextField = TextField;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var editable_text_base_1 = __webpack_require__(78);
__export(__webpack_require__(78));
var TextFieldBase = function(_super) {
__extends(TextFieldBase, _super);
function TextFieldBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return TextFieldBase;
}(editable_text_base_1.EditableTextBase);
TextFieldBase.returnPressEvent = "returnPress";
exports.TextFieldBase = TextFieldBase;
exports.secureProperty = new editable_text_base_1.Property({
name: "secure",
defaultValue: false,
valueConverter: editable_text_base_1.booleanConverter
});
exports.secureProperty.register(TextFieldBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var editable_text_base_common_1 = __webpack_require__(79);
var utils_1 = __webpack_require__(14);
__export(__webpack_require__(79));
var dismissKeyboardTimeoutId;
var EditTextListeners;
function initializeEditTextListeners() {
if (EditTextListeners) {
return;
}
var EditTextListenersImpl = function(_super) {
__extends(EditTextListenersImpl, _super);
function EditTextListenersImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
EditTextListenersImpl.prototype.beforeTextChanged = function(text, start, count, after) {};
EditTextListenersImpl.prototype.onTextChanged = function(text, start, before, count) {};
EditTextListenersImpl.prototype.afterTextChanged = function(editable) {
var owner = this.owner;
if (!owner) {
return;
}
switch (owner.updateTextTrigger) {
case "focusLost":
owner._dirtyTextAccumulator = editable.toString();
break;

case "textChanged":
editable_text_base_common_1.textProperty.nativeValueChange(owner, editable.toString());
break;

default:
throw new Error("Invalid updateTextTrigger: " + owner.updateTextTrigger);
}
};
EditTextListenersImpl.prototype.onFocusChange = function(view, hasFocus) {
var owner = this.owner;
if (!owner) {
return;
}
if (hasFocus) {
if (dismissKeyboardTimeoutId) {
clearTimeout(dismissKeyboardTimeoutId);
dismissKeyboardTimeoutId = undefined;
}
} else {
if (owner._dirtyTextAccumulator || owner._dirtyTextAccumulator === "") {
editable_text_base_common_1.textProperty.nativeValueChange(owner, owner._dirtyTextAccumulator);
owner._dirtyTextAccumulator = undefined;
}
dismissKeyboardTimeoutId = setTimeout(function() {
owner.dismissSoftInput();
dismissKeyboardTimeoutId = null;
}, 1);
owner.notify({
eventName: EditableTextBase.blurEvent,
object: owner
});
}
};
EditTextListenersImpl.prototype.onEditorAction = function(textView, actionId, event) {
var owner = this.owner;
if (!owner) {
return;
}
if (actionId === android.view.inputmethod.EditorInfo.IME_ACTION_DONE || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_GO || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_SEND || event && event.getKeyCode() === android.view.KeyEvent.KEYCODE_ENTER) {
if (textView.getMaxLines() === 1) {
owner.dismissSoftInput();
}
owner._onReturnPress();
}
if (actionId === android.view.inputmethod.EditorInfo.IME_ACTION_NEXT) {
owner._onReturnPress();
}
return false;
};
return EditTextListenersImpl;
}(java.lang.Object);
EditTextListenersImpl = __decorate([ Interfaces([ android.text.TextWatcher, android.view.View.OnFocusChangeListener, android.widget.TextView.OnEditorActionListener ]) ], EditTextListenersImpl);
EditTextListeners = EditTextListenersImpl;
}
var EditableTextBase = function(_super) {
__extends(EditableTextBase, _super);
function EditableTextBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
EditableTextBase.prototype.createNativeView = function() {
initializeEditTextListeners();
var editText = new android.widget.EditText(this._context);
this._configureEditText(editText);
var listeners = new EditTextListeners(this);
editText.addTextChangedListener(listeners);
editText.setOnFocusChangeListener(listeners);
editText.setOnEditorActionListener(listeners);
editText.listener = listeners;
return editText;
};
EditableTextBase.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var nativeView = this.nativeView;
nativeView.listener.owner = this;
this._keyListenerCache = nativeView.getKeyListener();
};
EditableTextBase.prototype._disposeNativeView = function(force) {
this.nativeView.listener.owner = null;
};
EditableTextBase.prototype.dismissSoftInput = function() {
utils_1.ad.dismissSoftInput(this.nativeView);
};
EditableTextBase.prototype.focus = function() {
var result = _super.prototype.focus.call(this);
if (result) {
utils_1.ad.showSoftInput(this.nativeView);
}
return result;
};
EditableTextBase.prototype._setInputType = function(inputType) {
var nativeView = this.nativeView;
nativeView.setInputType(inputType);
var listener = nativeView.getKeyListener();
if (listener) {
this._keyListenerCache = listener;
}
if (!this.editable) {
nativeView.setKeyListener(null);
}
};
EditableTextBase.prototype[editable_text_base_common_1.textProperty.getDefault] = function() {
return this.nativeView.getText();
};
EditableTextBase.prototype[editable_text_base_common_1.textProperty.setNative] = function(value) {
var text = value === null || value === undefined ? "" : value.toString();
this.nativeView.setText(text, android.widget.TextView.BufferType.EDITABLE);
};
EditableTextBase.prototype[editable_text_base_common_1.keyboardTypeProperty.getDefault] = function() {
var inputType = this.nativeView.getInputType();
switch (inputType) {
case android.text.InputType.TYPE_CLASS_DATETIME | android.text.InputType.TYPE_DATETIME_VARIATION_NORMAL:
return "datetime";

case android.text.InputType.TYPE_CLASS_PHONE:
return "phone";

case android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL:
return "number";

case android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_URI:
return "url";

case android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS:
return "email";

default:
return inputType.toString();
}
};
EditableTextBase.prototype[editable_text_base_common_1.keyboardTypeProperty.setNative] = function(value) {
var newInputType;
switch (value) {
case "datetime":
newInputType = android.text.InputType.TYPE_CLASS_DATETIME | android.text.InputType.TYPE_DATETIME_VARIATION_NORMAL;
break;

case "phone":
newInputType = android.text.InputType.TYPE_CLASS_PHONE;
break;

case "number":
newInputType = android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL;
break;

case "url":
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_URI;
break;

case "email":
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS;
break;

default:
var inputType = +value;
if (!isNaN(inputType)) {
newInputType = inputType;
} else {
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL;
}
break;
}
this._setInputType(newInputType);
};
EditableTextBase.prototype[editable_text_base_common_1.returnKeyTypeProperty.getDefault] = function() {
var ime = this.nativeView.getImeOptions();
switch (ime) {
case android.view.inputmethod.EditorInfo.IME_ACTION_DONE:
return "done";

case android.view.inputmethod.EditorInfo.IME_ACTION_GO:
return "go";

case android.view.inputmethod.EditorInfo.IME_ACTION_NEXT:
return "next";

case android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH:
return "search";

case android.view.inputmethod.EditorInfo.IME_ACTION_SEND:
return "send";

default:
return ime.toString();
}
};
EditableTextBase.prototype[editable_text_base_common_1.returnKeyTypeProperty.setNative] = function(value) {
var newImeOptions;
switch (value) {
case "done":
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_DONE;
break;

case "go":
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_GO;
break;

case "next":
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_NEXT;
break;

case "search":
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH;
break;

case "send":
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_SEND;
break;

default:
var ime = +value;
if (!isNaN(ime)) {
newImeOptions = ime;
} else {
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_UNSPECIFIED;
}
break;
}
this.nativeView.setImeOptions(newImeOptions);
};
EditableTextBase.prototype[editable_text_base_common_1.editableProperty.getDefault] = function() {
return true;
};
EditableTextBase.prototype[editable_text_base_common_1.editableProperty.setNative] = function(value) {
if (value) {
this.nativeView.setKeyListener(this._keyListenerCache);
} else {
this.nativeView.setKeyListener(null);
}
};
EditableTextBase.prototype[editable_text_base_common_1.autocapitalizationTypeProperty.getDefault] = function() {
var inputType = this.nativeView.getInputType();
if ((inputType & android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS) === android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS) {
return "words";
} else if ((inputType & android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES) === android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES) {
return "sentences";
} else if ((inputType & android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS) === android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS) {
return "allcharacters";
} else {
return inputType.toString();
}
};
EditableTextBase.prototype[editable_text_base_common_1.autocapitalizationTypeProperty.setNative] = function(value) {
var inputType = this.nativeView.getInputType();
inputType = inputType & ~28672;
switch (value) {
case "none":
break;

case "words":
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS;
break;

case "sentences":
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
break;

case "allcharacters":
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS;
break;

default:
var number = +value;
if (!isNaN(number)) {
inputType = number;
} else {
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
}
break;
}
this._setInputType(inputType);
};
EditableTextBase.prototype[editable_text_base_common_1.autocorrectProperty.getDefault] = function() {
var autocorrect = this.nativeView.getInputType();
if ((autocorrect & android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT) === android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT) {
return true;
}
return false;
};
EditableTextBase.prototype[editable_text_base_common_1.autocorrectProperty.setNative] = function(value) {
var inputType = this.nativeView.getInputType();
switch (value) {
case true:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
break;

case false:
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
break;

default:
break;
}
this._setInputType(inputType);
};
EditableTextBase.prototype[editable_text_base_common_1.hintProperty.getDefault] = function() {
return this.nativeView.getHint();
};
EditableTextBase.prototype[editable_text_base_common_1.hintProperty.setNative] = function(value) {
this.nativeView.setHint(value + "");
};
EditableTextBase.prototype[editable_text_base_common_1.placeholderColorProperty.getDefault] = function() {
return this.nativeView.getHintTextColors();
};
EditableTextBase.prototype[editable_text_base_common_1.placeholderColorProperty.setNative] = function(value) {
if (value instanceof editable_text_base_common_1.Color) {
this.nativeView.setHintTextColor(value.android);
} else {
this.nativeView.setHintTextColor(value);
}
};
EditableTextBase.prototype[editable_text_base_common_1.textTransformProperty.setNative] = function(value) {};
return EditableTextBase;
}(editable_text_base_common_1.EditableTextBase);
exports.EditableTextBase = EditableTextBase;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var text_base_1 = __webpack_require__(71);
__export(__webpack_require__(71));
var EditableTextBase = function(_super) {
__extends(EditableTextBase, _super);
function EditableTextBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return EditableTextBase;
}(text_base_1.TextBase);
EditableTextBase.blurEvent = "blur";
exports.EditableTextBase = EditableTextBase;
exports.placeholderColorProperty = new text_base_1.CssProperty({
name: "placeholderColor",
cssName: "placeholder-color",
equalityComparer: text_base_1.Color.equals,
valueConverter: function(v) {
return new text_base_1.Color(v);
}
});
exports.placeholderColorProperty.register(text_base_1.Style);
var keyboardTypeConverter = text_base_1.makeParser(text_base_1.makeValidator("datetime", "phone", "number", "url", "email"));
exports.keyboardTypeProperty = new text_base_1.Property({
name: "keyboardType",
valueConverter: keyboardTypeConverter
});
exports.keyboardTypeProperty.register(EditableTextBase);
var returnKeyTypeConverter = text_base_1.makeParser(text_base_1.makeValidator("done", "next", "go", "search", "send"));
exports.returnKeyTypeProperty = new text_base_1.Property({
name: "returnKeyType",
valueConverter: returnKeyTypeConverter
});
exports.returnKeyTypeProperty.register(EditableTextBase);
exports.editableProperty = new text_base_1.Property({
name: "editable",
defaultValue: true,
valueConverter: text_base_1.booleanConverter
});
exports.editableProperty.register(EditableTextBase);
exports.updateTextTriggerProperty = new text_base_1.Property({
name: "updateTextTrigger",
defaultValue: "textChanged"
});
exports.updateTextTriggerProperty.register(EditableTextBase);
var autocapitalizationTypeConverter = text_base_1.makeParser(text_base_1.makeValidator("none", "words", "sentences", "allcharacters"));
exports.autocapitalizationTypeProperty = new text_base_1.Property({
name: "autocapitalizationType",
defaultValue: "sentences",
valueConverter: autocapitalizationTypeConverter
});
exports.autocapitalizationTypeProperty.register(EditableTextBase);
exports.autocorrectProperty = new text_base_1.Property({
name: "autocorrect",
valueConverter: text_base_1.booleanConverter
});
exports.autocorrectProperty.register(EditableTextBase);
exports.hintProperty = new text_base_1.Property({
name: "hint",
defaultValue: ""
});
exports.hintProperty.register(EditableTextBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var text_base_1 = __webpack_require__(71);
__export(__webpack_require__(71));
var Label = function(_super) {
__extends(Label, _super);
function Label() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(Label.prototype, "textWrap", {
get: function() {
return this.style.whiteSpace === "normal";
},
set: function(value) {
this.style.whiteSpace = value ? "normal" : "nowrap";
},
enumerable: true,
configurable: true
});
Label.prototype.createNativeView = function() {
return new android.widget.TextView(this._context);
};
Label.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var textView = this.nativeView;
textView.setSingleLine(true);
textView.setEllipsize(android.text.TextUtils.TruncateAt.END);
};
Label.prototype[text_base_1.whiteSpaceProperty.setNative] = function(value) {
var newValue = value === "initial" ? "nowrap" : value;
_super.prototype[text_base_1.whiteSpaceProperty.setNative].call(this, newValue);
};
return Label;
}(text_base_1.TextBase);
exports.Label = Label;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var http = __webpack_require__(82);
var types = __webpack_require__(17);
var XMLHttpRequestResponseType;
(function(XMLHttpRequestResponseType) {
XMLHttpRequestResponseType.empty = "";
XMLHttpRequestResponseType.text = "text";
XMLHttpRequestResponseType.json = "json";
})(XMLHttpRequestResponseType || (XMLHttpRequestResponseType = {}));
var XMLHttpRequest = function() {
function XMLHttpRequest() {
this.UNSENT = 0;
this.OPENED = 1;
this.HEADERS_RECEIVED = 2;
this.LOADING = 3;
this.DONE = 4;
this._responseType = "";
this.textTypes = [ "text/plain", "application/xml", "text/html" ];
this._listeners = new Map();
this._readyState = this.UNSENT;
}
XMLHttpRequest.prototype.open = function(method, url, async, user, password) {
if (types.isString(method) && types.isString(url)) {
this._options = {
url: url,
method: method
};
this._options.headers = {};
if (types.isString(user)) {
this._options.headers["user"] = user;
}
if (types.isString(password)) {
this._options.headers["password"] = password;
}
this._setReadyState(this.OPENED);
}
};
XMLHttpRequest.prototype.abort = function() {
this._errorFlag = true;
this._response = null;
this._responseTextReader = null;
this._headers = null;
this._status = null;
if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._readyState === this.DONE) {
this._readyState = this.UNSENT;
} else {
this._setReadyState(this.DONE);
}
};
XMLHttpRequest.prototype.send = function(data) {
var _this = this;
this._errorFlag = false;
this._response = null;
this._responseTextReader = null;
this._headers = null;
this._status = null;
if (types.isDefined(this._options)) {
if (types.isString(data) && this._options.method !== "GET") {
this._options.content = data;
} else if (data instanceof FormData) {
this._options.content = data.toString();
}
http.request(this._options).then(function(r) {
if (!_this._errorFlag) {
_this._loadResponse(r);
}
}).catch(function(e) {
_this._errorFlag = true;
_this._setReadyState(_this.DONE, e);
});
}
};
XMLHttpRequest.prototype._loadResponse = function(r) {
this._status = r.statusCode;
this._response = r.content.raw + "";
this._headers = r.headers;
this._setReadyState(this.HEADERS_RECEIVED);
this._setReadyState(this.LOADING);
this._setResponseType();
this._responseTextReader = function() {
return r.content.toString();
};
this._addToStringOnResponse();
if (this.responseType === XMLHttpRequestResponseType.json) {
this._response = JSON.parse(this.responseText);
} else if (this.responseType === XMLHttpRequestResponseType.text) {
this._response = this.responseText;
}
this._setReadyState(this.DONE);
};
XMLHttpRequest.prototype._addToStringOnResponse = function() {
var _this = this;
if (types.isObject(this.response)) {
Object.defineProperty(this._response, "toString", {
configurable: true,
enumerable: false,
writable: true,
value: function() {
return _this.responseText;
}
});
}
};
XMLHttpRequest.prototype.isTextContentType = function(contentType) {
var result = false;
for (var i = 0; i < this.textTypes.length; i++) {
if (contentType.toLowerCase().indexOf(this.textTypes[i]) >= 0) {
result = true;
break;
}
}
return result;
};
XMLHttpRequest.prototype._setResponseType = function() {
var header = this.getResponseHeader("Content-Type");
var contentType = header && header.toLowerCase();
if (contentType) {
if (contentType.indexOf("application/json") >= 0 || contentType.indexOf("+json") >= 0) {
this.responseType = XMLHttpRequestResponseType.json;
} else if (this.isTextContentType(contentType)) {
this.responseType = XMLHttpRequestResponseType.text;
}
} else {
this.responseType = XMLHttpRequestResponseType.text;
}
};
XMLHttpRequest.prototype.addEventListener = function(eventName, handler) {
if (eventName !== "load" && eventName !== "error") {
throw new Error("Event not supported: " + eventName);
}
var handlers = this._listeners.get(eventName) || [];
handlers.push(handler);
this._listeners.set(eventName, handlers);
};
XMLHttpRequest.prototype.removeEventListener = function(eventName, toDetach) {
var handlers = this._listeners.get(eventName) || [];
handlers = handlers.filter(function(handler) {
return handler !== toDetach;
});
this._listeners.set(eventName, handlers);
};
XMLHttpRequest.prototype.emitEvent = function(eventName) {
var args = [];
for (var _i = 1; _i < arguments.length; _i++) {
args[_i - 1] = arguments[_i];
}
var handlers = this._listeners.get(eventName) || [];
handlers.forEach(function(handler) {
handler.apply(void 0, args);
});
};
XMLHttpRequest.prototype.setRequestHeader = function(header, value) {
if (types.isDefined(this._options) && types.isString(header) && types.isString(value)) {
this._options.headers[header] = value;
}
};
XMLHttpRequest.prototype.getAllResponseHeaders = function() {
if (this._readyState < 2 || this._errorFlag) {
return "";
}
var result = "";
for (var i in this._headers) {
if (i !== "set-cookie" && i !== "set-cookie2") {
result += i + ": " + this._headers[i] + "\r\n";
}
}
return result.substr(0, result.length - 2);
};
XMLHttpRequest.prototype.getResponseHeader = function(header) {
if (types.isString(header) && this._readyState > 1 && this._headers && !this._errorFlag) {
header = header.toLowerCase();
for (var i in this._headers) {
if (i.toLowerCase() === header) {
return this._headers[i];
}
}
}
return null;
};
XMLHttpRequest.prototype.overrideMimeType = function(mime) {};
Object.defineProperty(XMLHttpRequest.prototype, "readyState", {
get: function() {
return this._readyState;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "responseType", {
get: function() {
return this._responseType;
},
set: function(value) {
if (value === XMLHttpRequestResponseType.empty || value in XMLHttpRequestResponseType) {
this._responseType = value;
} else {
throw new Error("Response type of '" + value + "' not supported.");
}
},
enumerable: true,
configurable: true
});
XMLHttpRequest.prototype._setReadyState = function(value, error) {
if (this._readyState !== value) {
this._readyState = value;
if (types.isFunction(this.onreadystatechange)) {
this.onreadystatechange();
}
}
if (this._readyState === this.DONE) {
if (this._errorFlag) {
if (types.isFunction(this.onerror)) {
this.onerror(error);
}
this.emitEvent("error", error);
} else {
if (types.isFunction(this.onload)) {
this.onload();
}
this.emitEvent("load");
}
}
};
Object.defineProperty(XMLHttpRequest.prototype, "responseText", {
get: function() {
if (types.isFunction(this._responseTextReader)) {
return this._responseTextReader();
}
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "response", {
get: function() {
return this._response;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "status", {
get: function() {
return this._status;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "statusText", {
get: function() {
if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._errorFlag) {
return "";
}
return statuses[this._status];
},
enumerable: true,
configurable: true
});
return XMLHttpRequest;
}();
exports.XMLHttpRequest = XMLHttpRequest;
var statuses = {
100: "Continue",
101: "Switching Protocols",
200: "OK",
201: "Created",
202: "Accepted",
203: "Non - Authoritative Information",
204: "No Content",
205: "Reset Content",
206: "Partial Content",
300: "Multiple Choices",
301: "Moved Permanently",
302: "Found",
303: "See Other",
304: "Not Modified",
305: "Use Proxy",
307: "Temporary Redirect",
400: "Bad Request",
401: "Unauthorized",
402: "Payment Required",
403: "Forbidden",
404: "Not Found",
405: "Method Not Allowed",
406: "Not Acceptable",
407: "Proxy Authentication Required",
408: "Request Timeout",
409: "Conflict",
410: "Gone",
411: "Length Required",
412: "Precondition Failed",
413: "Request Entity Too Large",
414: "Request - URI Too Long",
415: "Unsupported Media Type",
416: "Requested Range Not Satisfiable",
417: "Expectation Failed",
500: "Internal Server Error",
501: "Not Implemented",
502: "Bad Gateway",
503: "Service Unavailable",
504: "Gateway Timeout",
505: "HTTP Version Not Supported"
};
var FormData = function() {
function FormData() {
this._data = new Map();
}
FormData.prototype.append = function(name, value) {
this._data.set(name, value);
};
FormData.prototype.toString = function() {
var arr = new Array();
this._data.forEach(function(value, name, map) {
arr.push(encodeURIComponent(name) + "=" + encodeURIComponent(value));
});
return arr.join("&");
};
return FormData;
}();
exports.FormData = FormData;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var httpRequest = __webpack_require__(83);
global.moduleMerge(httpRequest, exports);
function getString(arg) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var str = r.content.toString();
resolve(str);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getString = getString;
function getJSON(arg) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var json = r.content.toJSON();
resolve(json);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getJSON = getJSON;
function getImage(arg) {
return httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(responce) {
return responce.content.toImage();
});
}
exports.getImage = getImage;
function getFile(arg, destinationFilePath) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var file = r.content.toFile(destinationFilePath);
resolve(file);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getFile = getFile;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var debugger_1 = __webpack_require__(84);
var HttpResponseEncoding;
(function(HttpResponseEncoding) {
HttpResponseEncoding[HttpResponseEncoding["UTF8"] = 0] = "UTF8";
HttpResponseEncoding[HttpResponseEncoding["GBK"] = 1] = "GBK";
})(HttpResponseEncoding = exports.HttpResponseEncoding || (exports.HttpResponseEncoding = {}));
function parseJSON(source) {
var src = source.trim();
if (src.lastIndexOf(")") === src.length - 1) {
return JSON.parse(src.substring(src.indexOf("(") + 1, src.lastIndexOf(")")));
}
return JSON.parse(src);
}
var requestIdCounter = 0;
var pendingRequests = {};
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(85);
}
}
var platform;
function ensurePlatform() {
if (!platform) {
platform = __webpack_require__(25);
}
}
var completeCallback;
function ensureCompleteCallback() {
if (completeCallback) {
return;
}
completeCallback = new org.nativescript.widgets.Async.CompleteCallback({
onComplete: function(result, context) {
onRequestComplete(context, result);
}
});
}
function onRequestComplete(requestId, result) {
var callbacks = pendingRequests[requestId];
delete pendingRequests[requestId];
if (result.error) {
callbacks.rejectCallback(new Error(result.error.toString()));
return;
}
var headers = {};
if (result.headers) {
var jHeaders = result.headers;
var length = jHeaders.size();
var i;
var pair;
for (i = 0; i < length; i++) {
pair = jHeaders.get(i);
addHeader(headers, pair.key, pair.value);
}
}
if (global.__inspector && global.__inspector.isConnected) {
debugger_1.NetworkAgent.responseReceived(requestId, result, headers);
}
callbacks.resolveCallback({
content: {
raw: result.raw,
toString: function(encoding) {
var str;
if (encoding) {
str = decodeResponse(result.raw, encoding);
} else {
str = result.responseAsString;
}
if (typeof str === "string") {
return str;
} else {
throw new Error("Response content may not be converted to string");
}
},
toJSON: function(encoding) {
var str;
if (encoding) {
str = decodeResponse(result.raw, encoding);
} else {
str = result.responseAsString;
}
return parseJSON(str);
},
toImage: function() {
ensureImageSource();
return new Promise(function(resolveImage, rejectImage) {
if (result.responseAsImage != null) {
resolveImage(imageSource.fromNativeSource(result.responseAsImage));
} else {
rejectImage(new Error("Response content may not be converted to an Image"));
}
});
},
toFile: function(destinationFilePath) {
var fs = __webpack_require__(22);
var fileName = callbacks.url;
if (!destinationFilePath) {
destinationFilePath = fs.path.join(fs.knownFolders.documents().path, fileName.substring(fileName.lastIndexOf("/") + 1));
}
var stream;
try {
var javaFile = new java.io.File(destinationFilePath);
stream = new java.io.FileOutputStream(javaFile);
stream.write(result.raw.toByteArray());
return fs.File.fromPath(destinationFilePath);
} catch (exception) {
throw new Error("Cannot save file with path: " + destinationFilePath + ".");
} finally {
if (stream) {
stream.close();
}
}
}
},
statusCode: result.statusCode,
headers: headers
});
}
function buildJavaOptions(options) {
if (typeof options.url !== "string") {
throw new Error("Http request must provide a valid url.");
}
var javaOptions = new org.nativescript.widgets.Async.Http.RequestOptions();
javaOptions.url = options.url;
if (typeof options.method === "string") {
javaOptions.method = options.method;
}
if (typeof options.content === "string" || options.content instanceof FormData) {
javaOptions.content = options.content.toString();
}
if (typeof options.timeout === "number") {
javaOptions.timeout = options.timeout;
}
if (typeof options.dontFollowRedirects === "boolean") {
javaOptions.dontFollowRedirects = options.dontFollowRedirects;
}
if (options.headers) {
var arrayList = new java.util.ArrayList();
var pair = org.nativescript.widgets.Async.Http.KeyValuePair;
for (var key in options.headers) {
arrayList.add(new pair(key, options.headers[key] + ""));
}
javaOptions.headers = arrayList;
}
ensurePlatform();
var screen = platform.screen.mainScreen;
javaOptions.screenWidth = screen.widthPixels;
javaOptions.screenHeight = screen.heightPixels;
return javaOptions;
}
function request(options) {
if (options === undefined || options === null) {
return;
}
return new Promise(function(resolve, reject) {
try {
var javaOptions = buildJavaOptions(options);
if (global.__inspector && global.__inspector.isConnected) {
debugger_1.NetworkAgent.requestWillBeSent(requestIdCounter, options);
}
var callbacks = {
url: options.url,
resolveCallback: resolve,
rejectCallback: reject
};
pendingRequests[requestIdCounter] = callbacks;
ensureCompleteCallback();
org.nativescript.widgets.Async.Http.MakeRequest(javaOptions, completeCallback, new java.lang.Integer(requestIdCounter));
requestIdCounter++;
} catch (ex) {
reject(ex);
}
});
}
exports.request = request;
function decodeResponse(raw, encoding) {
var charsetName = "UTF-8";
if (encoding === HttpResponseEncoding.GBK) {
charsetName = "GBK";
}
return raw.toString(charsetName);
}
function addHeader(headers, key, value) {
if (!headers[key]) {
headers[key] = value;
} else if (Array.isArray(headers[key])) {
headers[key].push(value);
} else {
var values = [ headers[key] ];
values.push(value);
headers[key] = values;
}
}
exports.addHeader = addHeader;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var network;
function getNetwork() {
return network;
}
exports.getNetwork = getNetwork;
function setNetwork(newNetwork) {
network = newNetwork;
}
exports.setNetwork = setNetwork;
var NetworkAgent;
(function(NetworkAgent) {
function responseReceived(requestId, result, headers) {
var requestIdStr = requestId.toString();
var mimeType = headers["Content-Type"] || headers["content-type"];
var response = {
url: result.url || "",
status: result.statusCode,
statusText: result.statusText || "",
headers: headers,
mimeType: mimeType,
fromDiskCache: false
};
var responseData = {
requestId: requestIdStr,
type: mimeTypeToType(response.mimeType),
response: response,
timestamp: getTimeStamp()
};
global.__inspector.responseReceived(responseData);
global.__inspector.loadingFinished({
requestId: requestIdStr,
timestamp: getTimeStamp()
});
var hasTextContent = responseData.type === "Document" || responseData.type === "Script";
var data;
if (!hasTextContent) {
if (responseData.type === "Image") {
var bitmap = result.responseAsImage;
if (bitmap) {
var outputStream = new java.io.ByteArrayOutputStream();
bitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 100, outputStream);
var base64Image = android.util.Base64.encodeToString(outputStream.toByteArray(), android.util.Base64.DEFAULT);
data = base64Image;
}
}
} else {
data = result.responseAsString;
}
var successfulRequestData = {
requestId: requestIdStr,
data: data,
hasTextContent: hasTextContent
};
global.__inspector.dataForRequestId(successfulRequestData);
}
NetworkAgent.responseReceived = responseReceived;
function requestWillBeSent(requestId, options) {
var request = {
url: options.url,
method: options.method,
headers: options.headers || {},
postData: options.content ? options.content.toString() : ""
};
var requestData = {
requestId: requestId.toString(),
url: request.url,
request: request,
timestamp: getTimeStamp(),
type: "Document"
};
global.__inspector.requestWillBeSent(requestData);
}
NetworkAgent.requestWillBeSent = requestWillBeSent;
function getTimeStamp() {
var d = new Date();
return Math.round(d.getTime() / 1e3);
}
function mimeTypeToType(mimeType) {
var type = "Document";
if (mimeType) {
if (mimeType.indexOf("image") === 0) {
type = "Image";
} else if (mimeType.indexOf("javascript") !== -1 || mimeType.indexOf("json") !== -1) {
type = "Script";
}
}
return type;
}
})(NetworkAgent = exports.NetworkAgent || (exports.NetworkAgent = {}));
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var file_system_1 = __webpack_require__(22);
var utils_1 = __webpack_require__(14);
exports.isFileOrResourcePath = utils_1.isFileOrResourcePath;
var application_1 = __webpack_require__(18);
var http;
function ensureHttp() {
if (!http) {
http = __webpack_require__(82);
}
}
var application;
var resources;
function getApplication() {
if (!application) {
application = application_1.getNativeApplication();
}
return application;
}
function getResources() {
if (!resources) {
resources = getApplication().getResources();
}
return resources;
}
var ImageSource = function() {
function ImageSource() {}
ImageSource.prototype.fromAsset = function(asset) {
var _this = this;
return new Promise(function(resolve, reject) {
asset.getImageAsync(function(image, err) {
if (image) {
_this.setRotationAngleFromFile(asset.android);
_this.setNativeSource(image);
resolve(_this);
} else {
reject(err);
}
});
});
};
ImageSource.prototype.loadFromResource = function(name) {
this.android = null;
var res = getResources();
if (res) {
var identifier = res.getIdentifier(name, "drawable", getApplication().getPackageName());
if (0 < identifier) {
var bitmapDrawable = res.getDrawable(identifier);
if (bitmapDrawable && bitmapDrawable.getBitmap) {
this.android = bitmapDrawable.getBitmap();
}
}
}
return this.android != null;
};
ImageSource.prototype.fromResource = function(name) {
var _this = this;
return new Promise(function(resolve, reject) {
resolve(_this.loadFromResource(name));
});
};
ImageSource.prototype.setRotationAngleFromFile = function(filename) {
this.rotationAngle = 0;
var ei = new android.media.ExifInterface(filename);
var orientation = ei.getAttributeInt(android.media.ExifInterface.TAG_ORIENTATION, android.media.ExifInterface.ORIENTATION_NORMAL);
switch (orientation) {
case android.media.ExifInterface.ORIENTATION_ROTATE_90:
this.rotationAngle = 90;
break;

case android.media.ExifInterface.ORIENTATION_ROTATE_180:
this.rotationAngle = 180;
break;

case android.media.ExifInterface.ORIENTATION_ROTATE_270:
this.rotationAngle = 270;
break;
}
};
ImageSource.prototype.loadFromFile = function(path) {
var fileName = typeof path === "string" ? path.trim() : "";
if (fileName.indexOf("~/") === 0) {
fileName = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, fileName.replace("~/", ""));
}
this.setRotationAngleFromFile(fileName);
this.android = android.graphics.BitmapFactory.decodeFile(fileName, null);
return this.android != null;
};
ImageSource.prototype.fromFile = function(path) {
var _this = this;
return new Promise(function(resolve, reject) {
resolve(_this.loadFromFile(path));
});
};
ImageSource.prototype.loadFromData = function(data) {
this.android = android.graphics.BitmapFactory.decodeStream(data);
return this.android != null;
};
ImageSource.prototype.fromData = function(data) {
var _this = this;
return new Promise(function(resolve, reject) {
resolve(_this.loadFromData(data));
});
};
ImageSource.prototype.loadFromBase64 = function(source) {
if (typeof source === "string") {
var bytes = android.util.Base64.decode(source, android.util.Base64.DEFAULT);
this.android = android.graphics.BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
}
return this.android != null;
};
ImageSource.prototype.fromBase64 = function(data) {
var _this = this;
return new Promise(function(resolve, reject) {
resolve(_this.loadFromBase64(data));
});
};
ImageSource.prototype.setNativeSource = function(source) {
this.android = source;
return source != null;
};
ImageSource.prototype.saveToFile = function(path, format, quality) {
if (quality === void 0) {
quality = 100;
}
if (!this.android) {
return false;
}
var targetFormat = getTargetFormat(format);
var outputStream = new java.io.BufferedOutputStream(new java.io.FileOutputStream(path));
var res = this.android.compress(targetFormat, quality, outputStream);
outputStream.close();
return res;
};
ImageSource.prototype.toBase64String = function(format, quality) {
if (quality === void 0) {
quality = 100;
}
if (!this.android) {
return null;
}
var targetFormat = getTargetFormat(format);
var outputStream = new java.io.ByteArrayOutputStream();
var base64Stream = new android.util.Base64OutputStream(outputStream, android.util.Base64.NO_WRAP);
this.android.compress(targetFormat, quality, base64Stream);
base64Stream.close();
outputStream.close();
return outputStream.toString();
};
Object.defineProperty(ImageSource.prototype, "height", {
get: function() {
if (this.android) {
return this.android.getHeight();
}
return NaN;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageSource.prototype, "width", {
get: function() {
if (this.android) {
return this.android.getWidth();
}
return NaN;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageSource.prototype, "rotationAngle", {
get: function() {
return this._rotationAngle;
},
set: function(value) {
this._rotationAngle = value;
},
enumerable: true,
configurable: true
});
return ImageSource;
}();
exports.ImageSource = ImageSource;
function getTargetFormat(format) {
switch (format) {
case "jpeg" || "jpg":
return android.graphics.Bitmap.CompressFormat.JPEG;

default:
return android.graphics.Bitmap.CompressFormat.PNG;
}
}
function fromAsset(asset) {
var image = new ImageSource();
return image.fromAsset(asset);
}
exports.fromAsset = fromAsset;
function fromResource(name) {
var image = new ImageSource();
return image.loadFromResource(name) ? image : null;
}
exports.fromResource = fromResource;
function fromFile(path) {
var image = new ImageSource();
return image.loadFromFile(path) ? image : null;
}
exports.fromFile = fromFile;
function fromData(data) {
var image = new ImageSource();
return image.loadFromData(data) ? image : null;
}
exports.fromData = fromData;
function fromBase64(source) {
var image = new ImageSource();
return image.loadFromBase64(source) ? image : null;
}
exports.fromBase64 = fromBase64;
function fromNativeSource(source) {
var image = new ImageSource();
return image.setNativeSource(source) ? image : null;
}
exports.fromNativeSource = fromNativeSource;
function fromUrl(url) {
ensureHttp();
return http.getImage(url);
}
exports.fromUrl = fromUrl;
function fromFileOrResource(path) {
if (!utils_1.isFileOrResourcePath(path)) {
throw new Error(path + " is not a valid file or resource.");
}
if (path.indexOf(utils_1.RESOURCE_PREFIX) === 0) {
return fromResource(path.substr(utils_1.RESOURCE_PREFIX.length));
}
return fromFile(path);
}
exports.fromFileOrResource = fromFileOrResource;
}, function(module, exports, __webpack_require__) {
(function() {
"use strict";
exports.XMLHttpRequest = global.XMLHttpRequest;
exports.FormData = global.FormData;
if (!exports.XMLHttpRequest) {
var xhr = __webpack_require__(81);
exports.XMLHttpRequest = xhr.XMLHttpRequest;
exports.FormData = xhr.FormData;
}
function normalizeName(name) {
if (typeof name !== "string") {
name = name.toString();
}
if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
throw new TypeError("Invalid character in header field name");
}
return name.toLowerCase();
}
function normalizeValue(value) {
if (typeof value !== "string") {
value = value.toString();
}
return value;
}
function Headers(headers) {
this.map = {};
if (headers instanceof Headers) {
headers.forEach(function(value, name) {
this.append(name, value);
}, this);
} else if (headers) {
Object.getOwnPropertyNames(headers).forEach(function(name) {
this.append(name, headers[name]);
}, this);
}
}
Headers.prototype.append = function(name, value) {
name = normalizeName(name);
value = normalizeValue(value);
var list = this.map[name];
if (!list) {
list = [];
this.map[name] = list;
}
list.push(value);
};
Headers.prototype["delete"] = function(name) {
delete this.map[normalizeName(name)];
};
Headers.prototype.get = function(name) {
var values = this.map[normalizeName(name)];
return values ? values[0] : null;
};
Headers.prototype.getAll = function(name) {
return this.map[normalizeName(name)] || [];
};
Headers.prototype.has = function(name) {
return this.map.hasOwnProperty(normalizeName(name));
};
Headers.prototype.set = function(name, value) {
this.map[normalizeName(name)] = [ normalizeValue(value) ];
};
Headers.prototype.forEach = function(callback, thisArg) {
Object.getOwnPropertyNames(this.map).forEach(function(name) {
this.map[name].forEach(function(value) {
callback.call(thisArg, value, name, this);
}, this);
}, this);
};
function consumed(body) {
if (body.bodyUsed) {
return Promise.reject(new TypeError("Already read"));
}
body.bodyUsed = true;
}
function fileReaderReady(reader) {
return new Promise(function(resolve, reject) {
reader.onload = function() {
resolve(reader.result);
};
reader.onerror = function() {
reject(reader.error);
};
});
}
function readBlobAsArrayBuffer(blob) {
var reader = new FileReader();
reader.readAsArrayBuffer(blob);
return fileReaderReady(reader);
}
function readBlobAsText(blob) {
var reader = new FileReader();
reader.readAsText(blob);
return fileReaderReady(reader);
}
var support = {
blob: "FileReader" in exports && "Blob" in exports && function() {
try {
new Blob();
return true;
} catch (e) {
return false;
}
}(),
formData: "FormData" in exports
};
function Body() {
this.bodyUsed = false;
this._initBody = function(body) {
this._bodyInit = body;
if (typeof body === "string") {
this._bodyText = body;
} else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
this._bodyBlob = body;
} else if (support.formData && exports.FormData.prototype.isPrototypeOf(body)) {
this._bodyFormData = body;
} else if (!body) {
this._bodyText = "";
} else {
throw new Error("unsupported BodyInit type");
}
};
if (support.blob) {
this.blob = function() {
var rejected = consumed(this);
if (rejected) {
return rejected;
}
if (this._bodyBlob) {
return Promise.resolve(this._bodyBlob);
} else if (this._bodyFormData) {
throw new Error("could not read FormData body as blob");
} else {
return Promise.resolve(new Blob([ this._bodyText ]));
}
};
this.arrayBuffer = function() {
return this.blob().then(readBlobAsArrayBuffer);
};
this.text = function() {
var rejected = consumed(this);
if (rejected) {
return rejected;
}
if (this._bodyBlob) {
return readBlobAsText(this._bodyBlob);
} else if (this._bodyFormData) {
throw new Error("could not read FormData body as text");
} else {
return Promise.resolve(this._bodyText);
}
};
} else {
this.text = function() {
var rejected = consumed(this);
return rejected ? rejected : Promise.resolve(this._bodyText);
};
}
if (support.formData) {
this.formData = function() {
return this.text().then(decode);
};
}
this.json = function() {
return this.text().then(JSON.parse);
};
return this;
}
var methods = [ "DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT" ];
function normalizeMethod(method) {
var upcased = method.toUpperCase();
return methods.indexOf(upcased) > -1 ? upcased : method;
}
function Request(url, options) {
options = options || {};
this.url = url;
this.credentials = options.credentials || "omit";
this.headers = new Headers(options.headers);
this.method = normalizeMethod(options.method || "GET");
this.mode = options.mode || null;
this.referrer = null;
if ((this.method === "GET" || this.method === "HEAD") && options.body) {
throw new TypeError("Body not allowed for GET or HEAD requests");
}
this._initBody(options.body);
}
function decode(body) {
var form = new exports.FormData();
body.trim().split("&").forEach(function(bytes) {
if (bytes) {
var split = bytes.split("=");
var name = split.shift().replace(/\+/g, " ");
var value = split.join("=").replace(/\+/g, " ");
form.append(decodeURIComponent(name), decodeURIComponent(value));
}
});
return form;
}
function headers(xhr) {
var head = new Headers();
var pairs = xhr.getAllResponseHeaders().trim().split("\n");
pairs.forEach(function(header) {
var split = header.trim().split(":");
var key = split.shift().trim();
var value = split.join(":").trim();
head.append(key, value);
});
return head;
}
Body.call(Request.prototype);
function Response(bodyInit, options) {
if (!options) {
options = {};
}
this._initBody(bodyInit);
this.type = "default";
this.url = null;
this.status = options.status;
this.ok = this.status >= 200 && this.status < 300;
this.statusText = options.statusText;
this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers);
this.url = options.url || "";
}
Body.call(Response.prototype);
exports.Headers = Headers;
exports.Request = Request;
exports.Response = Response;
exports.fetch = function(input, init) {
var request;
if (Request.prototype.isPrototypeOf(input) && !init) {
request = input;
} else {
request = new Request(input, init);
}
return new Promise(function(resolve, reject) {
var xhr = new exports.XMLHttpRequest();
function responseURL() {
if ("responseURL" in xhr) {
return xhr.responseURL;
}
if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
return xhr.getResponseHeader("X-Request-URL");
}
return;
}
xhr.onload = function() {
var status = xhr.status === 1223 ? 204 : xhr.status;
if (status < 100 || status > 599) {
reject(new TypeError("Network request failed"));
return;
}
var options = {
status: status,
statusText: xhr.statusText,
headers: headers(xhr),
url: responseURL()
};
resolve(new Response(xhr.responseText, options));
};
xhr.onerror = function(error) {
reject(new TypeError([ "Network request failed:", error.message ].join(" ")));
};
xhr.open(request.method, request.url, true);
if (request.credentials === "include") {
xhr.withCredentials = true;
}
if ("responseType" in xhr && support.blob) {
xhr.responseType = "blob";
}
request.headers.forEach(function(value, name) {
xhr.setRequestHeader(name, value);
});
xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
});
};
exports.fetch.polyfill = true;
})();
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
function __message(message, level) {
if (global.__consoleMessage) {
global.__consoleMessage(message, level);
}
}
var Console = function() {
function Console() {
this.TAG = "JS";
this._timers = {};
this._stripFirstTwoLinesRegEx = /^([^\n]*?\n){2}((.|\n)*)$/gim;
}
Console.prototype.sprintf = function(message) {
var regex = /%%|%(\d+\$)?([-+\'#0 ]*)(\*\d+\$|\*|\d+)?(\.(\*\d+\$|\*|\d+))?([scboxXuideEfFgGj])/g;
var a = arguments;
var i = 0;
var format = a[i++];
var pad = function(str, len, chr, leftJustify) {
if (!chr) {
chr = " ";
}
var padding = str.length >= len ? "" : new Array(1 + len - str.length >>> 0).join(chr);
return leftJustify ? str + padding : padding + str;
};
var justify = function(value, prefix, leftJustify, minWidth, zeroPad, customPadChar) {
var diff = minWidth - value.length;
if (diff > 0) {
if (leftJustify || !zeroPad) {
value = pad(value, minWidth, customPadChar, leftJustify);
} else {
value = value.slice(0, prefix.length) + pad("", diff, "0", true) + value.slice(prefix.length);
}
}
return value;
};
var formatBaseX = function(value, base, prefix, leftJustify, minWidth, precision, zeroPad) {
var number = value >>> 0;
prefix = prefix && number && {
2: "0b",
8: "0",
16: "0x"
}[base] || "";
value = prefix + pad(number.toString(base), precision || 0, "0", false);
return justify(value, prefix, leftJustify, minWidth, zeroPad);
};
var formatString = function(value, leftJustify, minWidth, precision, zeroPad, customPadChar) {
if (precision != null) {
value = value.slice(0, precision);
}
return justify(value, "", leftJustify, minWidth, zeroPad, customPadChar);
};
var that = this;
var doFormat = function(substring, valueIndex, flags, minWidth, _, precision, type) {
var number, prefix, method, textTransform, value;
if (substring === "%%") {
return "%";
}
var leftJustify = false;
var positivePrefix = "";
var zeroPad = false;
var prefixBaseX = false;
var customPadChar = " ";
var flagsl = flags.length;
for (var j = 0; flags && j < flagsl; j++) {
switch (flags.charAt(j)) {
case " ":
positivePrefix = " ";
break;

case "+":
positivePrefix = "+";
break;

case "-":
leftJustify = true;
break;

case "'":
customPadChar = flags.charAt(j + 1);
break;

case "0":
zeroPad = true;
customPadChar = "0";
break;

case "#":
prefixBaseX = true;
break;
}
}
if (!minWidth) {
minWidth = 0;
} else if (minWidth === "*") {
minWidth = +a[i++];
} else if (minWidth.charAt(0) === "*") {
minWidth = +a[minWidth.slice(1, -1)];
} else {
minWidth = +minWidth;
}
if (minWidth < 0) {
minWidth = -minWidth;
leftJustify = true;
}
if (!isFinite(minWidth)) {
throw new Error("sprintf: (minimum-)width must be finite");
}
if (!precision) {
precision = "fFeE".indexOf(type) > -1 ? 6 : type === "d" ? 0 : undefined;
} else if (precision === "*") {
precision = +a[i++];
} else if (precision.charAt(0) === "*") {
precision = +a[precision.slice(1, -1)];
} else {
precision = +precision;
}
value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++];
switch (type) {
case "s":
return formatString(String(value), leftJustify, minWidth, precision, zeroPad, customPadChar);

case "c":
return formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad);

case "b":
return formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "o":
return formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "x":
return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "X":
return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad).toUpperCase();

case "u":
return formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "i":
case "d":
number = +value || 0;
number = Math.round(number - number % 1);
prefix = number < 0 ? "-" : positivePrefix;
value = prefix + pad(String(Math.abs(number)), precision, "0", false);
return justify(value, prefix, leftJustify, minWidth, zeroPad);

case "e":
case "E":
case "f":
case "F":
case "g":
case "G":
number = +value;
prefix = number < 0 ? "-" : positivePrefix;
method = [ "toExponential", "toFixed", "toPrecision" ]["efg".indexOf(type.toLowerCase())];
textTransform = [ "toString", "toUpperCase" ]["eEfFgG".indexOf(type) % 2];
value = prefix + Math.abs(number)[method](precision);
return justify(value, prefix, leftJustify, minWidth, zeroPad)[textTransform]();

case "j":
return that.createDump(value);

default:
return substring;
}
};
return format.replace(regex, doFormat);
};
Console.prototype.formatParams = function(message) {
if (arguments.length <= 1) {
return "" + message;
}
var res = this.sprintf.apply(this, arguments);
if (res === message) {
var args = Array.prototype.slice.call(arguments);
return args.join(" ");
}
return res;
};
Console.prototype.timeMillis = function() {
return java.lang.System.nanoTime() / 1e6;
};
Console.prototype.time = function(reportName) {
var name = reportName ? "__" + reportName : "__internal_console_time__";
if (this._timers[name] === undefined || this._timers.hasOwnProperty(name)) {
this._timers[name] = this.timeMillis();
} else {
this.warn("invalid name for timer console.time(" + reportName + ")");
}
};
Console.prototype.timeEnd = function(reportName) {
var name = reportName ? "__" + reportName : "__internal_console_time__";
if (this._timers.hasOwnProperty(name)) {
var val = this._timers[name];
if (val) {
var time = this.timeMillis();
this.info("console.time(" + reportName + "): %.6f ms", time - val);
this._timers[name] = undefined;
} else {
this.warn("undefined console.time(" + reportName + ")");
}
}
};
Console.prototype.assert = function(test, message) {
var formatParams = [];
for (var _i = 2; _i < arguments.length; _i++) {
formatParams[_i - 2] = arguments[_i];
}
if (!test) {
Array.prototype.shift.apply(arguments);
var formatedMessage = this.formatParams.apply(this, arguments);
this.error(formatedMessage, 3);
__message(formatedMessage, "error");
}
};
Console.prototype.info = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
this.logMessage(this.formatParams.apply(this, arguments), 1);
};
Console.prototype.warn = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, 2);
__message(formatedMessage, "warning");
};
Console.prototype.error = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, 3);
__message(formatedMessage, "error");
};
Console.prototype.log = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, 0);
__message(formatedMessage, "log");
};
Console.prototype.logMessage = function(message, messageType) {
if (!global.android) {
return;
}
var arrayToLog = [];
if (message.length > 4e3) {
for (var i = 0; i * 4e3 < message.length; i++) {
arrayToLog.push(message.substr(i * 4e3, 4e3));
}
} else {
arrayToLog.push(message);
}
for (var i = 0; i < arrayToLog.length; i++) {
switch (messageType) {
case 0:
{
android.util.Log.v(this.TAG, arrayToLog[i]);
break;
}

case 2:
{
android.util.Log.w(this.TAG, arrayToLog[i]);
break;
}

case 3:
{
android.util.Log.e(this.TAG, arrayToLog[i]);
break;
}

case 1:
{
android.util.Log.i(this.TAG, arrayToLog[i]);
break;
}
}
}
};
Console.prototype.trace = function() {
var stack;
stack = new Error().stack.toString();
stack = stack.replace(this._stripFirstTwoLinesRegEx, "$2");
stack = "Stack Trace:\n" + stack;
this.log(stack);
};
Console.prototype.createDump = function(obj) {
var result = [];
if (null == obj) {
result.push("=== dump(): object is 'null' ===");
return result.join("");
}
if (obj === undefined) {
result.push("=== dump(): object is 'undefined' ===");
return result.join("");
}
result.push("=== dump(): dumping members ===\n");
var stringifyValueCache = [];
var stringifyKeyCache = [];
result.push(JSON.stringify(obj, function(k, v) {
stringifyKeyCache.push(k);
if (typeof v === "object" && v !== null) {
if (stringifyValueCache.indexOf(v) !== -1) {
return "#CR:" + (v.toString ? v.toString() : v);
}
stringifyValueCache.push(v);
}
if (typeof v === "function") {
return k + "()" + v;
}
return v;
}, 4));
result.push("\n=== dump(): dumping function and properties names ===\n");
for (var id in obj) {
try {
if (typeof obj[id] === "function") {
result.push(id + "()\n");
} else {
if (typeof obj[id] !== "object" && stringifyKeyCache.indexOf(id) === -1) {
result.push(id + ": " + (obj[id] + "\n"));
}
}
} catch (err) {
result.push(id + ": inaccessible");
}
}
stringifyValueCache = null;
stringifyKeyCache = null;
result.push("=== dump(): finished ===");
return result.join("");
};
Console.prototype.dir = function(obj) {
var dump = this.createDump(obj);
this.log(dump);
};
return Console;
}();
exports.Console = Console;
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory() : typeof define === "function" && define.amd ? define(factory) : factory();
})(this, function() {
"use strict";
var Zone$1 = function(global) {
if (global["Zone"]) {
throw new Error("Zone already loaded.");
}
var NO_ZONE = {
name: "NO ZONE"
};
var notScheduled = "notScheduled", scheduling = "scheduling", scheduled = "scheduled", running = "running", canceling = "canceling", unknown = "unknown";
var microTask = "microTask", macroTask = "macroTask", eventTask = "eventTask";
var Zone = function() {
function Zone(parent, zoneSpec) {
this._properties = null;
this._parent = parent;
this._name = zoneSpec ? zoneSpec.name || "unnamed" : "<root>";
this._properties = zoneSpec && zoneSpec.properties || {};
this._zoneDelegate = new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
}
Zone.assertZonePatched = function() {
if (global.Promise !== ZoneAwarePromise) {
throw new Error("Zone.js has detected that ZoneAwarePromise `(window|global).Promise` " + "has been overwritten.\n" + "Most likely cause is that a Promise polyfill has been loaded " + "after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. " + "If you must load one, do so before loading zone.js.)");
}
};
Object.defineProperty(Zone, "root", {
get: function() {
var zone = Zone.current;
while (zone.parent) {
zone = zone.parent;
}
return zone;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone, "current", {
get: function() {
return _currentZoneFrame.zone;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone, "currentTask", {
get: function() {
return _currentTask;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone.prototype, "name", {
get: function() {
return this._name;
},
enumerable: true,
configurable: true
});
Zone.prototype.get = function(key) {
var zone = this.getZoneWith(key);
if (zone) return zone._properties[key];
};
Zone.prototype.getZoneWith = function(key) {
var current = this;
while (current) {
if (current._properties.hasOwnProperty(key)) {
return current;
}
current = current._parent;
}
return null;
};
Zone.prototype.fork = function(zoneSpec) {
if (!zoneSpec) throw new Error("ZoneSpec required!");
return this._zoneDelegate.fork(this, zoneSpec);
};
Zone.prototype.wrap = function(callback, source) {
if (typeof callback !== "function") {
throw new Error("Expecting function got: " + callback);
}
var _callback = this._zoneDelegate.intercept(this, callback, source);
var zone = this;
return function() {
return zone.runGuarded(_callback, this, arguments, source);
};
};
Zone.prototype.run = function(callback, applyThis, applyArgs, source) {
if (applyThis === void 0) {
applyThis = undefined;
}
if (applyArgs === void 0) {
applyArgs = null;
}
if (source === void 0) {
source = null;
}
_currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
try {
return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
} finally {
_currentZoneFrame = _currentZoneFrame.parent;
}
};
Zone.prototype.runGuarded = function(callback, applyThis, applyArgs, source) {
if (applyThis === void 0) {
applyThis = null;
}
if (applyArgs === void 0) {
applyArgs = null;
}
if (source === void 0) {
source = null;
}
_currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
try {
try {
return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
} catch (error) {
if (this._zoneDelegate.handleError(this, error)) {
throw error;
}
}
} finally {
_currentZoneFrame = _currentZoneFrame.parent;
}
};
Zone.prototype.runTask = function(task, applyThis, applyArgs) {
if (task.zone != this) throw new Error("A task can only be run in the zone of creation! (Creation: " + (task.zone || NO_ZONE).name + "; Execution: " + this.name + ")");
var reEntryGuard = task.state != running;
reEntryGuard && task._transitionTo(running, scheduled);
task.runCount++;
var previousTask = _currentTask;
_currentTask = task;
_currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
try {
if (task.type == macroTask && task.data && !task.data.isPeriodic) {
task.cancelFn = null;
}
try {
return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
} catch (error) {
if (this._zoneDelegate.handleError(this, error)) {
throw error;
}
}
} finally {
if (task.state !== notScheduled && task.state !== unknown) {
if (task.type == eventTask || task.data && task.data.isPeriodic) {
reEntryGuard && task._transitionTo(scheduled, running);
} else {
task.runCount = 0;
this._updateTaskCount(task, -1);
reEntryGuard && task._transitionTo(notScheduled, running, notScheduled);
}
}
_currentZoneFrame = _currentZoneFrame.parent;
_currentTask = previousTask;
}
};
Zone.prototype.scheduleTask = function(task) {
if (task.zone && task.zone !== this) {
var newZone = this;
while (newZone) {
if (newZone === task.zone) {
throw Error("can not reschedule task to " + this.name + " which is descendants of the original zone " + task.zone.name);
}
newZone = newZone.parent;
}
}
task._transitionTo(scheduling, notScheduled);
var zoneDelegates = [];
task._zoneDelegates = zoneDelegates;
task._zone = this;
try {
task = this._zoneDelegate.scheduleTask(this, task);
} catch (err) {
task._transitionTo(unknown, scheduling, notScheduled);
this._zoneDelegate.handleError(this, err);
throw err;
}
if (task._zoneDelegates === zoneDelegates) {
this._updateTaskCount(task, 1);
}
if (task.state == scheduling) {
task._transitionTo(scheduled, scheduling);
}
return task;
};
Zone.prototype.scheduleMicroTask = function(source, callback, data, customSchedule) {
return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, null));
};
Zone.prototype.scheduleMacroTask = function(source, callback, data, customSchedule, customCancel) {
return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));
};
Zone.prototype.scheduleEventTask = function(source, callback, data, customSchedule, customCancel) {
return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));
};
Zone.prototype.cancelTask = function(task) {
if (task.zone != this) throw new Error("A task can only be cancelled in the zone of creation! (Creation: " + (task.zone || NO_ZONE).name + "; Execution: " + this.name + ")");
task._transitionTo(canceling, scheduled, running);
try {
this._zoneDelegate.cancelTask(this, task);
} catch (err) {
task._transitionTo(unknown, canceling);
this._zoneDelegate.handleError(this, err);
throw err;
}
this._updateTaskCount(task, -1);
task._transitionTo(notScheduled, canceling);
task.runCount = 0;
return task;
};
Zone.prototype._updateTaskCount = function(task, count) {
var zoneDelegates = task._zoneDelegates;
if (count == -1) {
task._zoneDelegates = null;
}
for (var i = 0; i < zoneDelegates.length; i++) {
zoneDelegates[i]._updateTaskCount(task.type, count);
}
};
return Zone;
}();
Zone.__symbol__ = __symbol__;
var DELEGATE_ZS = {
name: "",
onHasTask: function(delegate, _, target, hasTaskState) {
return delegate.hasTask(target, hasTaskState);
},
onScheduleTask: function(delegate, _, target, task) {
return delegate.scheduleTask(target, task);
},
onInvokeTask: function(delegate, _, target, task, applyThis, applyArgs) {
return delegate.invokeTask(target, task, applyThis, applyArgs);
},
onCancelTask: function(delegate, _, target, task) {
return delegate.cancelTask(target, task);
}
};
var ZoneDelegate = function() {
function ZoneDelegate(zone, parentDelegate, zoneSpec) {
this._taskCounts = {
microTask: 0,
macroTask: 0,
eventTask: 0
};
this.zone = zone;
this._parentDelegate = parentDelegate;
this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
this._forkCurrZone = zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate.zone);
this._interceptZS = zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
this._interceptDlgt = zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
this._interceptCurrZone = zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate.zone);
this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
this._invokeDlgt = zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
this._invokeCurrZone = zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate.zone);
this._handleErrorZS = zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
this._handleErrorDlgt = zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
this._handleErrorCurrZone = zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate.zone);
this._scheduleTaskZS = zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
this._scheduleTaskDlgt = zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
this._scheduleTaskCurrZone = zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate.zone);
this._invokeTaskZS = zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
this._invokeTaskDlgt = zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
this._invokeTaskCurrZone = zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate.zone);
this._cancelTaskZS = zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
this._cancelTaskDlgt = zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
this._cancelTaskCurrZone = zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate.zone);
this._hasTaskZS = null;
this._hasTaskDlgt = null;
this._hasTaskDlgtOwner = null;
this._hasTaskCurrZone = null;
var zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;
var parentHasTask = parentDelegate && parentDelegate._hasTaskZS;
if (zoneSpecHasTask || parentHasTask) {
this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;
this._hasTaskDlgt = parentDelegate;
this._hasTaskDlgtOwner = this;
this._hasTaskCurrZone = zone;
if (!zoneSpec.onScheduleTask) {
this._scheduleTaskZS = DELEGATE_ZS;
this._scheduleTaskDlgt = parentDelegate;
this._scheduleTaskCurrZone = this.zone;
}
if (!zoneSpec.onInvokeTask) {
this._invokeTaskZS = DELEGATE_ZS;
this._invokeTaskDlgt = parentDelegate;
this._invokeTaskCurrZone = this.zone;
}
if (!zoneSpec.onCancelTask) {
this._cancelTaskZS = DELEGATE_ZS;
this._cancelTaskDlgt = parentDelegate;
this._cancelTaskCurrZone = this.zone;
}
}
}
ZoneDelegate.prototype.fork = function(targetZone, zoneSpec) {
return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) : new Zone(targetZone, zoneSpec);
};
ZoneDelegate.prototype.intercept = function(targetZone, callback, source) {
return this._interceptZS ? this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) : callback;
};
ZoneDelegate.prototype.invoke = function(targetZone, callback, applyThis, applyArgs, source) {
return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) : callback.apply(applyThis, applyArgs);
};
ZoneDelegate.prototype.handleError = function(targetZone, error) {
return this._handleErrorZS ? this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) : true;
};
ZoneDelegate.prototype.scheduleTask = function(targetZone, task) {
var returnTask = task;
if (this._scheduleTaskZS) {
if (this._hasTaskZS) {
returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);
}
returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);
if (!returnTask) returnTask = task;
} else {
if (task.scheduleFn) {
task.scheduleFn(task);
} else if (task.type == microTask) {
scheduleMicroTask(task);
} else {
throw new Error("Task is missing scheduleFn.");
}
}
return returnTask;
};
ZoneDelegate.prototype.invokeTask = function(targetZone, task, applyThis, applyArgs) {
return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) : task.callback.apply(applyThis, applyArgs);
};
ZoneDelegate.prototype.cancelTask = function(targetZone, task) {
var value;
if (this._cancelTaskZS) {
value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);
} else {
if (!task.cancelFn) {
throw Error("Task is not cancelable");
}
value = task.cancelFn(task);
}
return value;
};
ZoneDelegate.prototype.hasTask = function(targetZone, isEmpty) {
try {
return this._hasTaskZS && this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);
} catch (err) {}
};
ZoneDelegate.prototype._updateTaskCount = function(type, count) {
var counts = this._taskCounts;
var prev = counts[type];
var next = counts[type] = prev + count;
if (next < 0) {
throw new Error("More tasks executed then were scheduled.");
}
if (prev == 0 || next == 0) {
var isEmpty = {
microTask: counts.microTask > 0,
macroTask: counts.macroTask > 0,
eventTask: counts.eventTask > 0,
change: type
};
this.hasTask(this.zone, isEmpty);
}
};
return ZoneDelegate;
}();
var ZoneTask = function() {
function ZoneTask(type, source, callback, options, scheduleFn, cancelFn) {
this._zone = null;
this.runCount = 0;
this._zoneDelegates = null;
this._state = "notScheduled";
this.type = type;
this.source = source;
this.data = options;
this.scheduleFn = scheduleFn;
this.cancelFn = cancelFn;
this.callback = callback;
var self = this;
this.invoke = function() {
_numberOfNestedTaskFrames++;
try {
self.runCount++;
return self.zone.runTask(self, this, arguments);
} finally {
if (_numberOfNestedTaskFrames == 1) {
drainMicroTaskQueue();
}
_numberOfNestedTaskFrames--;
}
};
}
Object.defineProperty(ZoneTask.prototype, "zone", {
get: function() {
return this._zone;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ZoneTask.prototype, "state", {
get: function() {
return this._state;
},
enumerable: true,
configurable: true
});
ZoneTask.prototype.cancelScheduleRequest = function() {
this._transitionTo(notScheduled, scheduling);
};
ZoneTask.prototype._transitionTo = function(toState, fromState1, fromState2) {
if (this._state === fromState1 || this._state === fromState2) {
this._state = toState;
if (toState == notScheduled) {
this._zoneDelegates = null;
}
} else {
throw new Error(this.type + " '" + this.source + "': can not transition to '" + toState + "', expecting state '" + fromState1 + "'" + (fromState2 ? " or '" + fromState2 + "'" : "") + ", was '" + this._state + "'.");
}
};
ZoneTask.prototype.toString = function() {
if (this.data && typeof this.data.handleId !== "undefined") {
return this.data.handleId;
} else {
return Object.prototype.toString.call(this);
}
};
ZoneTask.prototype.toJSON = function() {
return {
type: this.type,
state: this.state,
source: this.source,
data: this.data,
zone: this.zone.name,
invoke: this.invoke,
scheduleFn: this.scheduleFn,
cancelFn: this.cancelFn,
runCount: this.runCount,
callback: this.callback
};
};
return ZoneTask;
}();
var ZoneFrame = function() {
function ZoneFrame(parent, zone) {
this.parent = parent;
this.zone = zone;
}
return ZoneFrame;
}();
function __symbol__(name) {
return "__zone_symbol__" + name;
}
var symbolSetTimeout = __symbol__("setTimeout");
var symbolPromise = __symbol__("Promise");
var symbolThen = __symbol__("then");
var _currentZoneFrame = new ZoneFrame(null, new Zone(null, null));
var _currentTask = null;
var _microTaskQueue = [];
var _isDrainingMicrotaskQueue = false;
var _uncaughtPromiseErrors = [];
var _numberOfNestedTaskFrames = 0;
function scheduleQueueDrain() {
if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {
if (global[symbolPromise]) {
global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);
} else {
global[symbolSetTimeout](drainMicroTaskQueue, 0);
}
}
}
function scheduleMicroTask(task) {
scheduleQueueDrain();
_microTaskQueue.push(task);
}
function consoleError(e) {
if (Zone[__symbol__("ignoreConsoleErrorUncaughtError")]) {
return;
}
var rejection = e && e.rejection;
if (rejection) {
console.error("Unhandled Promise rejection:", rejection instanceof Error ? rejection.message : rejection, "; Zone:", e.zone.name, "; Task:", e.task && e.task.source, "; Value:", rejection, rejection instanceof Error ? rejection.stack : undefined);
}
console.error(e);
}
function handleUnhandledRejection(e) {
consoleError(e);
try {
var handler = Zone[__symbol__("unhandledPromiseRejectionHandler")];
if (handler && typeof handler === "function") {
handler.apply(this, [ e ]);
}
} catch (err) {}
}
function drainMicroTaskQueue() {
if (!_isDrainingMicrotaskQueue) {
_isDrainingMicrotaskQueue = true;
while (_microTaskQueue.length) {
var queue = _microTaskQueue;
_microTaskQueue = [];
for (var i = 0; i < queue.length; i++) {
var task = queue[i];
try {
task.zone.runTask(task, null, null);
} catch (error) {
consoleError(error);
}
}
}
while (_uncaughtPromiseErrors.length) {
var _loop_1 = function() {
var uncaughtPromiseError = _uncaughtPromiseErrors.shift();
try {
uncaughtPromiseError.zone.runGuarded(function() {
throw uncaughtPromiseError;
});
} catch (error) {
handleUnhandledRejection(error);
}
};
while (_uncaughtPromiseErrors.length) {
_loop_1();
}
}
_isDrainingMicrotaskQueue = false;
}
}
function isThenable(value) {
return value && value.then;
}
function forwardResolution(value) {
return value;
}
function forwardRejection(rejection) {
return ZoneAwarePromise.reject(rejection);
}
var symbolState = __symbol__("state");
var symbolValue = __symbol__("value");
var source = "Promise.then";
var UNRESOLVED = null;
var RESOLVED = true;
var REJECTED = false;
var REJECTED_NO_CATCH = 0;
function makeResolver(promise, state) {
return function(v) {
try {
resolvePromise(promise, state, v);
} catch (err) {
resolvePromise(promise, false, err);
}
};
}
var once = function() {
var wasCalled = false;
return function wrapper(wrappedFunction) {
return function() {
if (wasCalled) {
return;
}
wasCalled = true;
wrappedFunction.apply(null, arguments);
};
};
};
function resolvePromise(promise, state, value) {
var onceWrapper = once();
if (promise === value) {
throw new TypeError("Promise resolved with itself");
}
if (promise[symbolState] === UNRESOLVED) {
var then = null;
try {
if (typeof value === "object" || typeof value === "function") {
then = value && value.then;
}
} catch (err) {
onceWrapper(function() {
resolvePromise(promise, false, err);
})();
return promise;
}
if (state !== REJECTED && value instanceof ZoneAwarePromise && value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) && value[symbolState] !== UNRESOLVED) {
clearRejectedNoCatch(value);
resolvePromise(promise, value[symbolState], value[symbolValue]);
} else if (state !== REJECTED && typeof then === "function") {
try {
then.apply(value, [ onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false)) ]);
} catch (err) {
onceWrapper(function() {
resolvePromise(promise, false, err);
})();
}
} else {
promise[symbolState] = state;
var queue = promise[symbolValue];
promise[symbolValue] = value;
if (state === REJECTED && value instanceof Error) {
value[__symbol__("currentTask")] = Zone.currentTask;
}
for (var i = 0; i < queue.length; ) {
scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
}
if (queue.length == 0 && state == REJECTED) {
promise[symbolState] = REJECTED_NO_CATCH;
try {
throw new Error("Uncaught (in promise): " + value + (value && value.stack ? "\n" + value.stack : ""));
} catch (err) {
var error_1 = err;
error_1.rejection = value;
error_1.promise = promise;
error_1.zone = Zone.current;
error_1.task = Zone.currentTask;
_uncaughtPromiseErrors.push(error_1);
scheduleQueueDrain();
}
}
}
}
return promise;
}
function clearRejectedNoCatch(promise) {
if (promise[symbolState] === REJECTED_NO_CATCH) {
try {
var handler = Zone[__symbol__("rejectionHandledHandler")];
if (handler && typeof handler === "function") {
handler.apply(this, [ {
rejection: promise[symbolValue],
promise: promise
} ]);
}
} catch (err) {}
promise[symbolState] = REJECTED;
for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
if (promise === _uncaughtPromiseErrors[i].promise) {
_uncaughtPromiseErrors.splice(i, 1);
}
}
}
}
function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
clearRejectedNoCatch(promise);
var delegate = promise[symbolState] ? typeof onFulfilled === "function" ? onFulfilled : forwardResolution : typeof onRejected === "function" ? onRejected : forwardRejection;
zone.scheduleMicroTask(source, function() {
try {
resolvePromise(chainPromise, true, zone.run(delegate, undefined, [ promise[symbolValue] ]));
} catch (error) {
resolvePromise(chainPromise, false, error);
}
});
}
var ZoneAwarePromise = function() {
function ZoneAwarePromise(executor) {
var promise = this;
if (!(promise instanceof ZoneAwarePromise)) {
throw new Error("Must be an instanceof Promise.");
}
promise[symbolState] = UNRESOLVED;
promise[symbolValue] = [];
try {
executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
} catch (error) {
resolvePromise(promise, false, error);
}
}
ZoneAwarePromise.toString = function() {
return "function ZoneAwarePromise() { [native code] }";
};
ZoneAwarePromise.resolve = function(value) {
return resolvePromise(new this(null), RESOLVED, value);
};
ZoneAwarePromise.reject = function(error) {
return resolvePromise(new this(null), REJECTED, error);
};
ZoneAwarePromise.race = function(values) {
var resolve;
var reject;
var promise = new this(function(res, rej) {
_a = [ res, rej ], resolve = _a[0], reject = _a[1];
var _a;
});
function onResolve(value) {
promise && (promise = null || resolve(value));
}
function onReject(error) {
promise && (promise = null || reject(error));
}
for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
var value = values_1[_i];
if (!isThenable(value)) {
value = this.resolve(value);
}
value.then(onResolve, onReject);
}
return promise;
};
ZoneAwarePromise.all = function(values) {
var resolve;
var reject;
var promise = new this(function(res, rej) {
resolve = res;
reject = rej;
});
var count = 0;
var resolvedValues = [];
for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
var value = values_2[_i];
if (!isThenable(value)) {
value = this.resolve(value);
}
value.then(function(index) {
return function(value) {
resolvedValues[index] = value;
count--;
if (!count) {
resolve(resolvedValues);
}
};
}(count), reject);
count++;
}
if (!count) resolve(resolvedValues);
return promise;
};
ZoneAwarePromise.prototype.then = function(onFulfilled, onRejected) {
var chainPromise = new this.constructor(null);
var zone = Zone.current;
if (this[symbolState] == UNRESOLVED) {
this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
} else {
scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
}
return chainPromise;
};
ZoneAwarePromise.prototype.catch = function(onRejected) {
return this.then(null, onRejected);
};
return ZoneAwarePromise;
}();
ZoneAwarePromise["resolve"] = ZoneAwarePromise.resolve;
ZoneAwarePromise["reject"] = ZoneAwarePromise.reject;
ZoneAwarePromise["race"] = ZoneAwarePromise.race;
ZoneAwarePromise["all"] = ZoneAwarePromise.all;
var NativePromise = global[symbolPromise] = global["Promise"];
global["Promise"] = ZoneAwarePromise;
var symbolThenPatched = __symbol__("thenPatched");
function patchThen(Ctor) {
var proto = Ctor.prototype;
var originalThen = proto.then;
proto[symbolThen] = originalThen;
Ctor.prototype.then = function(onResolve, onReject) {
var _this = this;
var wrapped = new ZoneAwarePromise(function(resolve, reject) {
originalThen.call(_this, resolve, reject);
});
return wrapped.then(onResolve, onReject);
};
Ctor[symbolThenPatched] = true;
}
function zoneify(fn) {
return function() {
var resultPromise = fn.apply(this, arguments);
if (resultPromise instanceof ZoneAwarePromise) {
return resultPromise;
}
var Ctor = resultPromise.constructor;
if (!Ctor[symbolThenPatched]) {
patchThen(Ctor);
}
return resultPromise;
};
}
if (NativePromise) {
patchThen(NativePromise);
var fetch_1 = global["fetch"];
if (typeof fetch_1 == "function") {
global["fetch"] = zoneify(fetch_1);
}
}
Promise[Zone.__symbol__("uncaughtPromiseErrors")] = _uncaughtPromiseErrors;
var FrameType;
(function(FrameType) {
FrameType[FrameType["blackList"] = 0] = "blackList";
FrameType[FrameType["transition"] = 1] = "transition";
})(FrameType || (FrameType = {}));
var NativeError = global[__symbol__("Error")] = global.Error;
var blackListedStackFrames = {};
var zoneAwareErrorStartFrames = [];
global.Error = ZoneAwareError;
var stackRewrite = "stackRewrite";
var otherZoneAwareFunctionNames = [ "ZoneTask.invoke", "ZoneAware", "getStacktraceWithUncaughtError", "new LongStackTrace", "long-stack-trace" ];
function attachZoneAndRemoveInternalZoneFrames(error) {
error.originalStack = error.stack;
if (ZoneAwareError[stackRewrite] && error.originalStack) {
var frames_1 = error.originalStack.split("\n");
var zoneFrame = _currentZoneFrame;
var i_1 = 0;
while (i_1 < frames_1.length && zoneAwareErrorStartFrames.filter(function(zf) {
return zf.trim() === frames_1[i_1].trim();
}).length === 0) {
i_1++;
}
var _loop_2 = function() {
var frame = frames_1[i_1].trim();
if (frame) {
var frameType = blackListedStackFrames.hasOwnProperty(frame) && blackListedStackFrames[frame];
if (frameType === FrameType.blackList) {
frames_1.splice(i_1, 1);
i_1--;
} else if (otherZoneAwareFunctionNames.filter(function(f) {
return frame.toLowerCase().indexOf(f.toLowerCase()) !== -1;
}).length > 0) {
frames_1.splice(i_1, 1);
i_1--;
} else if (frameType === FrameType.transition) {
if (zoneFrame.parent) {
zoneFrame = zoneFrame.parent;
} else {
zoneFrame = null;
}
frames_1.splice(i_1, 1);
i_1--;
} else {
frames_1[i_1] += " [" + zoneFrame.zone.name + "]";
}
}
};
for (;i_1 < frames_1.length && zoneFrame; i_1++) {
_loop_2();
}
var finalStack = frames_1.join("\n");
try {
error.stack = error.zoneAwareStack = finalStack;
} catch (nonWritableErr) {}
}
}
function ZoneAwareError() {
var error = NativeError.apply(this, arguments);
if (!error.stack) {
try {
throw error;
} catch (err) {
error = err;
}
}
attachZoneAndRemoveInternalZoneFrames(error);
return error;
}
ZoneAwareError.prototype = NativeError.prototype;
ZoneAwareError[Zone.__symbol__("blacklistedStackFrames")] = blackListedStackFrames;
ZoneAwareError[stackRewrite] = false;
var specialPropertyNames = [ "stackTraceLimit", "captureStackTrace", "prepareStackTrace" ];
var nativeErrorProperties = Object.keys(NativeError);
if (nativeErrorProperties) {
nativeErrorProperties.forEach(function(prop) {
if (specialPropertyNames.filter(function(sp) {
return sp === prop;
}).length === 0) {
Object.defineProperty(ZoneAwareError, prop, {
get: function() {
return NativeError[prop];
},
set: function(value) {
NativeError[prop] = value;
}
});
}
});
}
if (NativeError.hasOwnProperty("stackTraceLimit")) {
NativeError.stackTraceLimit = Math.max(NativeError.stackTraceLimit, 15);
Object.defineProperty(ZoneAwareError, "stackTraceLimit", {
get: function() {
return NativeError.stackTraceLimit;
},
set: function(value) {
return NativeError.stackTraceLimit = value;
}
});
}
if (NativeError.hasOwnProperty("captureStackTrace")) {
Object.defineProperty(ZoneAwareError, "captureStackTrace", {
value: function zoneCaptureStackTrace(targetObject, constructorOpt) {
NativeError.captureStackTrace(targetObject, constructorOpt);
}
});
}
Object.defineProperty(ZoneAwareError, "prepareStackTrace", {
get: function() {
return NativeError.prepareStackTrace;
},
set: function(value) {
if (!value || typeof value !== "function") {
return NativeError.prepareStackTrace = value;
}
return NativeError.prepareStackTrace = function(error, structuredStackTrace) {
if (structuredStackTrace) {
for (var i = 0; i < structuredStackTrace.length; i++) {
var st = structuredStackTrace[i];
if (st.getFunctionName() === "zoneCaptureStackTrace") {
structuredStackTrace.splice(i, 1);
break;
}
}
}
return value.apply(this, [ error, structuredStackTrace ]);
};
}
});
var detectZone = Zone.current.fork({
name: "detect",
onInvoke: function(parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {
return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);
},
onHandleError: function(parentZD, current, target, error) {
if (error.originalStack && Error === ZoneAwareError) {
var frames_2 = error.originalStack.split(/\n/);
var runFrame = false, runGuardedFrame = false, runTaskFrame = false;
while (frames_2.length) {
var frame = frames_2.shift();
if (/:\d+:\d+/.test(frame)) {
var fnName = frame.split("(")[0].split("@")[0];
var frameType = FrameType.transition;
if (fnName.indexOf("ZoneAwareError") !== -1) {
zoneAwareErrorStartFrames.push(frame);
}
if (fnName.indexOf("runGuarded") !== -1) {
runGuardedFrame = true;
} else if (fnName.indexOf("runTask") !== -1) {
runTaskFrame = true;
} else if (fnName.indexOf("run") !== -1) {
runFrame = true;
} else {
frameType = FrameType.blackList;
}
blackListedStackFrames[frame.trim()] = frameType;
if (runFrame && runGuardedFrame && runTaskFrame) {
ZoneAwareError[stackRewrite] = true;
break;
}
}
}
}
return false;
}
});
var throwError = function(message, withNew) {
try {
if (withNew) {
throw new Error(message);
} else {
throw Error(message);
}
} catch (err) {
return err;
}
};
var nativeStackTraceLimit = NativeError.stackTraceLimit;
NativeError.stackTraceLimit = 100;
var detectRunFn = function() {
detectZone.run(function() {
detectZone.runGuarded(function() {
throw throwError("blacklistStackFrames", true);
});
});
};
var detectRunWithoutNewFn = function() {
detectZone.run(function() {
detectZone.runGuarded(function() {
throw throwError("blacklistStackFrames");
});
});
};
detectZone.runTask(detectZone.scheduleMacroTask("detect", detectRunFn, null, function() {
return null;
}, null));
detectZone.runTask(detectZone.scheduleMacroTask("detect", detectRunWithoutNewFn, null, function() {
return null;
}, null));
function handleDetectError(error) {
var frames = error.stack ? error.stack.split(/\n/) : [];
while (frames.length) {
var frame = frames.shift();
var trimmedFrame = frame.trim().split("[")[0].trim();
if (/:\d+:\d+/.test(trimmedFrame) && !blackListedStackFrames.hasOwnProperty(trimmedFrame)) {
blackListedStackFrames[trimmedFrame] = FrameType.blackList;
}
var fnName = frame.split("(")[0].split("@")[0];
if (fnName.indexOf("runGuarded") !== -1) {
break;
} else if (fnName.indexOf("runTask") !== -1) {
break;
}
}
}
var detectEmptyZone = Zone.root.fork({
name: "detectEmptyZone",
onHandleError: function(parentDelegate, currentZone, targetZone, error) {
parentDelegate.handleError(targetZone, error);
handleDetectError(error);
return false;
}
});
var detectZoneWithCallbacks = Zone.root.fork({
name: "detectCallbackZone",
onFork: function(parentDelegate, currentZone, targetZone, zoneSpec) {
handleDetectError(throwError("onFork"));
handleDetectError(throwError("onFork", false));
return parentDelegate.fork(targetZone, zoneSpec);
},
onIntercept: function(parentDelegate, currentZone, targetZone, delegate, source) {
handleDetectError(throwError("onIntercept"));
handleDetectError(throwError("onIntercept", false));
return parentDelegate.intercept(targetZone, delegate, source);
},
onInvoke: function(parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {
handleDetectError(throwError("onInvoke"));
handleDetectError(throwError("onInvoke", false));
return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);
},
onScheduleTask: function(parentZoneDelegate, currentZone, targetZone, task) {
handleDetectError(throwError("onScheduleTask"));
handleDetectError(throwError("onScheduleTask", false));
return parentZoneDelegate.scheduleTask(targetZone, task);
},
onInvokeTask: function(parentZoneDelegate, currentZone, targetZone, task, applyThis, applyArgs) {
handleDetectError(throwError("onInvokeTask"));
handleDetectError(throwError("onInvokeTask", false));
return parentZoneDelegate.invokeTask(targetZone, task, applyThis, applyArgs);
},
onCancelTask: function(parentZoneDelegate, currentZone, targetZone, task) {
handleDetectError(throwError("onCancelTask"));
handleDetectError(throwError("onCancelTask", false));
return parentZoneDelegate.cancelTask(targetZone, task);
},
onHasTask: function(delegate, current, target, hasTaskState) {
handleDetectError(throwError("onHasTask"));
handleDetectError(throwError("onHasTask", false));
return delegate.hasTask(target, hasTaskState);
},
onHandleError: function(parentDelegate, currentZone, targetZone, error) {
parentDelegate.handleError(targetZone, error);
handleDetectError(error);
return false;
}
});
var detectFn = function() {
throw throwError("zoneAwareFrames");
};
var detectWithoutNewFn = function() {
throw throwError("zoneAwareFrames", false);
};
var detectPromiseFn = function() {
new Promise(function(resolve, reject) {
reject(throwError("zoneAwareFrames"));
});
};
var detectPromiseWithoutNewFn = function() {
new Promise(function(resolve, reject) {
reject(throwError("zoneAwareFrames", false));
});
};
var detectPromiseCaughtFn = function() {
var p = new Promise(function(resolve, reject) {
reject(throwError("zoneAwareFrames"));
});
p.catch(function(err) {
throw err;
});
};
var detectPromiseCaughtWithoutNewFn = function() {
var p = new Promise(function(resolve, reject) {
reject(throwError("zoneAwareFrames", false));
});
p.catch(function(err) {
throw err;
});
};
detectEmptyZone.runTask(detectEmptyZone.scheduleEventTask("detect", detectFn, null, function() {
return null;
}, null));
detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleEventTask("detect", detectFn, null, function() {
return null;
}, null));
detectEmptyZone.runTask(detectEmptyZone.scheduleMacroTask("detect", detectFn, null, function() {
return null;
}, null));
detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleMacroTask("detect", detectFn, null, function() {
return null;
}, null));
detectEmptyZone.runTask(detectEmptyZone.scheduleMicroTask("detect", detectFn, null, function() {
return null;
}));
detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleMicroTask("detect", detectFn, null, function() {
return null;
}));
detectEmptyZone.runGuarded(function() {
detectEmptyZone.run(detectFn);
});
detectZoneWithCallbacks.runGuarded(function() {
detectEmptyZone.run(detectFn);
});
detectEmptyZone.runTask(detectEmptyZone.scheduleEventTask("detect", detectWithoutNewFn, null, function() {
return null;
}, null));
detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleEventTask("detect", detectWithoutNewFn, null, function() {
return null;
}, null));
detectEmptyZone.runTask(detectEmptyZone.scheduleMacroTask("detect", detectWithoutNewFn, null, function() {
return null;
}, null));
detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleMacroTask("detect", detectWithoutNewFn, null, function() {
return null;
}, null));
detectEmptyZone.runTask(detectEmptyZone.scheduleMicroTask("detect", detectWithoutNewFn, null, function() {
return null;
}));
detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleMicroTask("detect", detectWithoutNewFn, null, function() {
return null;
}));
detectEmptyZone.runGuarded(function() {
detectEmptyZone.run(detectWithoutNewFn);
});
detectZoneWithCallbacks.runGuarded(function() {
detectEmptyZone.run(detectWithoutNewFn);
});
detectEmptyZone.runGuarded(detectPromiseFn);
detectZoneWithCallbacks.runGuarded(detectPromiseFn);
detectEmptyZone.runGuarded(detectPromiseWithoutNewFn);
detectZoneWithCallbacks.runGuarded(detectPromiseWithoutNewFn);
detectEmptyZone.runGuarded(detectPromiseCaughtFn);
detectZoneWithCallbacks.runGuarded(detectPromiseCaughtFn);
detectEmptyZone.runGuarded(detectPromiseCaughtWithoutNewFn);
detectZoneWithCallbacks.runGuarded(detectPromiseCaughtWithoutNewFn);
NativeError.stackTraceLimit = nativeStackTraceLimit;
return global["Zone"] = Zone;
}(typeof window !== "undefined" && window || typeof self !== "undefined" && self || global);
var zoneSymbol = function(n) {
return "__zone_symbol__" + n;
};
var _global = typeof window === "object" && window || typeof self === "object" && self || global;
var isWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
var isNode = !("nw" in _global) && typeof process !== "undefined" && {}.toString.call(process) === "[object process]";
var isMix = typeof process !== "undefined" && {}.toString.call(process) === "[object process]" && !isWebWorker && !!(typeof window !== "undefined" && window["HTMLElement"]);
function patchProperty(obj, prop) {
var desc = Object.getOwnPropertyDescriptor(obj, prop) || {
enumerable: true,
configurable: true
};
var originalDesc = Object.getOwnPropertyDescriptor(obj, "original" + prop);
if (!originalDesc && desc.get) {
Object.defineProperty(obj, "original" + prop, {
enumerable: false,
configurable: true,
get: desc.get
});
}
delete desc.writable;
delete desc.value;
var eventName = prop.substr(2);
var _prop = zoneSymbol("_" + prop);
desc.set = function(fn) {
if (this[_prop]) {
this.removeEventListener(eventName, this[_prop]);
}
if (typeof fn === "function") {
var wrapFn = function(event) {
var result;
result = fn.apply(this, arguments);
if (result != undefined && !result) event.preventDefault();
};
this[_prop] = wrapFn;
this.addEventListener(eventName, wrapFn, false);
} else {
this[_prop] = null;
}
};
desc.get = function() {
var r = this[_prop] || null;
if (r === null) {
if (originalDesc && originalDesc.get) {
r = originalDesc.get.apply(this, arguments);
if (r) {
desc.set.apply(this, [ r ]);
if (typeof this["removeAttribute"] === "function") {
this.removeAttribute(prop);
}
}
}
}
return this[_prop] || null;
};
Object.defineProperty(obj, prop, desc);
}
function patchOnProperties(obj, properties) {
var onProperties = [];
for (var prop in obj) {
if (prop.substr(0, 2) == "on") {
onProperties.push(prop);
}
}
for (var j = 0; j < onProperties.length; j++) {
patchProperty(obj, onProperties[j]);
}
if (properties) {
for (var i = 0; i < properties.length; i++) {
patchProperty(obj, "on" + properties[i]);
}
}
}
var EVENT_TASKS = zoneSymbol("eventTasks");
var ADD_EVENT_LISTENER = "addEventListener";
var REMOVE_EVENT_LISTENER = "removeEventListener";
function findExistingRegisteredTask(target, handler, name, capture, remove) {
var eventTasks = target[EVENT_TASKS];
if (eventTasks) {
for (var i = 0; i < eventTasks.length; i++) {
var eventTask = eventTasks[i];
var data = eventTask.data;
var listener = data.handler;
if ((data.handler === handler || listener.listener === handler) && data.useCapturing === capture && data.eventName === name) {
if (remove) {
eventTasks.splice(i, 1);
}
return eventTask;
}
}
}
return null;
}
function attachRegisteredEvent(target, eventTask, isPrepend) {
var eventTasks = target[EVENT_TASKS];
if (!eventTasks) {
eventTasks = target[EVENT_TASKS] = [];
}
if (isPrepend) {
eventTasks.unshift(eventTask);
} else {
eventTasks.push(eventTask);
}
}
var defaultListenerMetaCreator = function(self, args) {
return {
useCapturing: args[2],
eventName: args[0],
handler: args[1],
target: self || _global,
name: args[0],
invokeAddFunc: function(addFnSymbol, delegate) {
if (delegate && delegate.invoke) {
return this.target[addFnSymbol](this.eventName, delegate.invoke, this.useCapturing);
} else {
return this.target[addFnSymbol](this.eventName, delegate, this.useCapturing);
}
},
invokeRemoveFunc: function(removeFnSymbol, delegate) {
if (delegate && delegate.invoke) {
return this.target[removeFnSymbol](this.eventName, delegate.invoke, this.useCapturing);
} else {
return this.target[removeFnSymbol](this.eventName, delegate, this.useCapturing);
}
}
};
};
function makeZoneAwareAddListener(addFnName, removeFnName, useCapturingParam, allowDuplicates, isPrepend, metaCreator) {
if (useCapturingParam === void 0) {
useCapturingParam = true;
}
if (allowDuplicates === void 0) {
allowDuplicates = false;
}
if (isPrepend === void 0) {
isPrepend = false;
}
if (metaCreator === void 0) {
metaCreator = defaultListenerMetaCreator;
}
var addFnSymbol = zoneSymbol(addFnName);
var removeFnSymbol = zoneSymbol(removeFnName);
var defaultUseCapturing = useCapturingParam ? false : undefined;
function scheduleEventListener(eventTask) {
var meta = eventTask.data;
attachRegisteredEvent(meta.target, eventTask, isPrepend);
return meta.invokeAddFunc(addFnSymbol, eventTask);
}
function cancelEventListener(eventTask) {
var meta = eventTask.data;
findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.useCapturing, true);
return meta.invokeRemoveFunc(removeFnSymbol, eventTask);
}
return function zoneAwareAddListener(self, args) {
var data = metaCreator(self, args);
data.useCapturing = data.useCapturing || defaultUseCapturing;
var delegate = null;
if (typeof data.handler == "function") {
delegate = data.handler;
} else if (data.handler && data.handler.handleEvent) {
delegate = function(event) {
return data.handler.handleEvent(event);
};
}
var validZoneHandler = false;
try {
validZoneHandler = data.handler && data.handler.toString() === "[object FunctionWrapper]";
} catch (error) {
return;
}
if (!delegate || validZoneHandler) {
return data.invokeAddFunc(addFnSymbol, data.handler);
}
if (!allowDuplicates) {
var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.useCapturing, false);
if (eventTask) {
return data.invokeAddFunc(addFnSymbol, eventTask);
}
}
var zone = Zone.current;
var source = data.target.constructor["name"] + "." + addFnName + ":" + data.eventName;
zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);
};
}
function makeZoneAwareRemoveListener(fnName, useCapturingParam, metaCreator) {
if (useCapturingParam === void 0) {
useCapturingParam = true;
}
if (metaCreator === void 0) {
metaCreator = defaultListenerMetaCreator;
}
var symbol = zoneSymbol(fnName);
var defaultUseCapturing = useCapturingParam ? false : undefined;
return function zoneAwareRemoveListener(self, args) {
var data = metaCreator(self, args);
data.useCapturing = data.useCapturing || defaultUseCapturing;
var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.useCapturing, true);
if (eventTask) {
eventTask.zone.cancelTask(eventTask);
} else {
data.invokeRemoveFunc(symbol, data.handler);
}
};
}
var zoneAwareAddEventListener = makeZoneAwareAddListener(ADD_EVENT_LISTENER, REMOVE_EVENT_LISTENER);
var zoneAwareRemoveEventListener = makeZoneAwareRemoveListener(REMOVE_EVENT_LISTENER);
function patchEventTargetMethods(obj, addFnName, removeFnName, metaCreator) {
if (addFnName === void 0) {
addFnName = ADD_EVENT_LISTENER;
}
if (removeFnName === void 0) {
removeFnName = REMOVE_EVENT_LISTENER;
}
if (metaCreator === void 0) {
metaCreator = defaultListenerMetaCreator;
}
if (obj && obj[addFnName]) {
patchMethod(obj, addFnName, function() {
return makeZoneAwareAddListener(addFnName, removeFnName, true, false, false, metaCreator);
});
patchMethod(obj, removeFnName, function() {
return makeZoneAwareRemoveListener(removeFnName, true, metaCreator);
});
return true;
} else {
return false;
}
}
function createNamedFn(name, delegate) {
try {
return Function("f", "return function " + name + "(){return f(this, arguments)}")(delegate);
} catch (error) {
return function() {
return delegate(this, arguments);
};
}
}
function patchMethod(target, name, patchFn) {
var proto = target;
while (proto && Object.getOwnPropertyNames(proto).indexOf(name) === -1) {
proto = Object.getPrototypeOf(proto);
}
if (!proto && target[name]) {
proto = target;
}
var delegateName = zoneSymbol(name);
var delegate;
if (proto && !(delegate = proto[delegateName])) {
delegate = proto[delegateName] = proto[name];
proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));
}
return delegate;
}
Zone[zoneSymbol("patchEventTargetMethods")] = patchEventTargetMethods;
Zone[zoneSymbol("patchOnProperties")] = patchOnProperties;
function patchTimer(window, setName, cancelName, nameSuffix) {
var setNative = null;
var clearNative = null;
setName += nameSuffix;
cancelName += nameSuffix;
var tasksByHandleId = {};
function scheduleTask(task) {
var data = task.data;
function timer() {
try {
task.invoke.apply(this, arguments);
} finally {
delete tasksByHandleId[data.handleId];
}
}
data.args[0] = timer;
data.handleId = setNative.apply(window, data.args);
tasksByHandleId[data.handleId] = task;
return task;
}
function clearTask(task) {
delete tasksByHandleId[task.data.handleId];
return clearNative(task.data.handleId);
}
setNative = patchMethod(window, setName, function(delegate) {
return function(self, args) {
if (typeof args[0] === "function") {
var zone = Zone.current;
var options = {
handleId: null,
isPeriodic: nameSuffix === "Interval",
delay: nameSuffix === "Timeout" || nameSuffix === "Interval" ? args[1] || 0 : null,
args: args
};
var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);
if (!task) {
return task;
}
var handle = task.data.handleId;
if (handle && handle.ref && handle.unref && typeof handle.ref === "function" && typeof handle.unref === "function") {
task.ref = handle.ref.bind(handle);
task.unref = handle.unref.bind(handle);
}
return task;
} else {
return delegate.apply(window, args);
}
};
});
clearNative = patchMethod(window, cancelName, function(delegate) {
return function(self, args) {
var task = typeof args[0] === "number" ? tasksByHandleId[args[0]] : args[0];
if (task && typeof task.type === "string") {
if (task.state !== "notScheduled" && (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {
task.zone.cancelTask(task);
}
} else {
delegate.apply(window, args);
}
};
});
}
var set = "set";
var clear = "clear";
patchTimer(global, set, clear, "Timeout");
patchTimer(global, set, clear, "Interval");
patchTimer(global, set, clear, "Immediate");
});
}, function(module, exports) {
var Reflect;
(function(Reflect) {
"use strict";
var hasOwn = Object.prototype.hasOwnProperty;
var supportsSymbol = typeof Symbol === "function";
var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
var HashMap;
(function(HashMap) {
var supportsCreate = typeof Object.create === "function";
var supportsProto = {
__proto__: []
} instanceof Array;
var downLevel = !supportsCreate && !supportsProto;
HashMap.create = supportsCreate ? function() {
return MakeDictionary(Object.create(null));
} : supportsProto ? function() {
return MakeDictionary({
__proto__: null
});
} : function() {
return MakeDictionary({});
};
HashMap.has = downLevel ? function(map, key) {
return hasOwn.call(map, key);
} : function(map, key) {
return key in map;
};
HashMap.get = downLevel ? function(map, key) {
return hasOwn.call(map, key) ? map[key] : undefined;
} : function(map, key) {
return map[key];
};
})(HashMap || (HashMap = {}));
var functionPrototype = Object.getPrototypeOf(Function);
var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
var Metadata = new _WeakMap();
function decorate(decorators, target, propertyKey, attributes) {
if (!IsUndefined(propertyKey)) {
if (!IsArray(decorators)) throw new TypeError();
if (!IsObject(target)) throw new TypeError();
if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes)) throw new TypeError();
if (IsNull(attributes)) attributes = undefined;
propertyKey = ToPropertyKey(propertyKey);
return DecorateProperty(decorators, target, propertyKey, attributes);
} else {
if (!IsArray(decorators)) throw new TypeError();
if (!IsConstructor(target)) throw new TypeError();
return DecorateConstructor(decorators, target);
}
}
Reflect.decorate = decorate;
function metadata(metadataKey, metadataValue) {
function decorator(target, propertyKey) {
if (!IsObject(target)) throw new TypeError();
if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey)) throw new TypeError();
OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
}
return decorator;
}
Reflect.metadata = metadata;
function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
if (!IsObject(target)) throw new TypeError();
if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
}
Reflect.defineMetadata = defineMetadata;
function hasMetadata(metadataKey, target, propertyKey) {
if (!IsObject(target)) throw new TypeError();
if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
return OrdinaryHasMetadata(metadataKey, target, propertyKey);
}
Reflect.hasMetadata = hasMetadata;
function hasOwnMetadata(metadataKey, target, propertyKey) {
if (!IsObject(target)) throw new TypeError();
if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
}
Reflect.hasOwnMetadata = hasOwnMetadata;
function getMetadata(metadataKey, target, propertyKey) {
if (!IsObject(target)) throw new TypeError();
if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
return OrdinaryGetMetadata(metadataKey, target, propertyKey);
}
Reflect.getMetadata = getMetadata;
function getOwnMetadata(metadataKey, target, propertyKey) {
if (!IsObject(target)) throw new TypeError();
if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
}
Reflect.getOwnMetadata = getOwnMetadata;
function getMetadataKeys(target, propertyKey) {
if (!IsObject(target)) throw new TypeError();
if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
return OrdinaryMetadataKeys(target, propertyKey);
}
Reflect.getMetadataKeys = getMetadataKeys;
function getOwnMetadataKeys(target, propertyKey) {
if (!IsObject(target)) throw new TypeError();
if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
return OrdinaryOwnMetadataKeys(target, propertyKey);
}
Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
function deleteMetadata(metadataKey, target, propertyKey) {
if (!IsObject(target)) throw new TypeError();
if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
var metadataMap = GetOrCreateMetadataMap(target, propertyKey, false);
if (IsUndefined(metadataMap)) return false;
if (!metadataMap.delete(metadataKey)) return false;
if (metadataMap.size > 0) return true;
var targetMetadata = Metadata.get(target);
targetMetadata.delete(propertyKey);
if (targetMetadata.size > 0) return true;
Metadata.delete(target);
return true;
}
Reflect.deleteMetadata = deleteMetadata;
function DecorateConstructor(decorators, target) {
for (var i = decorators.length - 1; i >= 0; --i) {
var decorator = decorators[i];
var decorated = decorator(target);
if (!IsUndefined(decorated) && !IsNull(decorated)) {
if (!IsConstructor(decorated)) throw new TypeError();
target = decorated;
}
}
return target;
}
function DecorateProperty(decorators, target, propertyKey, descriptor) {
for (var i = decorators.length - 1; i >= 0; --i) {
var decorator = decorators[i];
var decorated = decorator(target, propertyKey, descriptor);
if (!IsUndefined(decorated) && !IsNull(decorated)) {
if (!IsObject(decorated)) throw new TypeError();
descriptor = decorated;
}
}
return descriptor;
}
function GetOrCreateMetadataMap(O, P, Create) {
var targetMetadata = Metadata.get(O);
if (IsUndefined(targetMetadata)) {
if (!Create) return undefined;
targetMetadata = new _Map();
Metadata.set(O, targetMetadata);
}
var metadataMap = targetMetadata.get(P);
if (IsUndefined(metadataMap)) {
if (!Create) return undefined;
metadataMap = new _Map();
targetMetadata.set(P, metadataMap);
}
return metadataMap;
}
function OrdinaryHasMetadata(MetadataKey, O, P) {
var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
if (hasOwn) return true;
var parent = OrdinaryGetPrototypeOf(O);
if (!IsNull(parent)) return OrdinaryHasMetadata(MetadataKey, parent, P);
return false;
}
function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
var metadataMap = GetOrCreateMetadataMap(O, P, false);
if (IsUndefined(metadataMap)) return false;
return ToBoolean(metadataMap.has(MetadataKey));
}
function OrdinaryGetMetadata(MetadataKey, O, P) {
var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
if (hasOwn) return OrdinaryGetOwnMetadata(MetadataKey, O, P);
var parent = OrdinaryGetPrototypeOf(O);
if (!IsNull(parent)) return OrdinaryGetMetadata(MetadataKey, parent, P);
return undefined;
}
function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
var metadataMap = GetOrCreateMetadataMap(O, P, false);
if (IsUndefined(metadataMap)) return undefined;
return metadataMap.get(MetadataKey);
}
function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
var metadataMap = GetOrCreateMetadataMap(O, P, true);
metadataMap.set(MetadataKey, MetadataValue);
}
function OrdinaryMetadataKeys(O, P) {
var ownKeys = OrdinaryOwnMetadataKeys(O, P);
var parent = OrdinaryGetPrototypeOf(O);
if (parent === null) return ownKeys;
var parentKeys = OrdinaryMetadataKeys(parent, P);
if (parentKeys.length <= 0) return ownKeys;
if (ownKeys.length <= 0) return parentKeys;
var set = new _Set();
var keys = [];
for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
var key = ownKeys_1[_i];
var hasKey = set.has(key);
if (!hasKey) {
set.add(key);
keys.push(key);
}
}
for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
var key = parentKeys_1[_a];
var hasKey = set.has(key);
if (!hasKey) {
set.add(key);
keys.push(key);
}
}
return keys;
}
function OrdinaryOwnMetadataKeys(O, P) {
var keys = [];
var metadataMap = GetOrCreateMetadataMap(O, P, false);
if (IsUndefined(metadataMap)) return keys;
var keysObj = metadataMap.keys();
var iterator = GetIterator(keysObj);
var k = 0;
while (true) {
var next = IteratorStep(iterator);
if (!next) {
keys.length = k;
return keys;
}
var nextValue = IteratorValue(next);
try {
keys[k] = nextValue;
} catch (e) {
try {
IteratorClose(iterator);
} finally {
throw e;
}
}
k++;
}
}
function Type(x) {
if (x === null) return 1;
switch (typeof x) {
case "undefined":
return 0;

case "boolean":
return 2;

case "string":
return 3;

case "symbol":
return 4;

case "number":
return 5;

case "object":
return x === null ? 1 : 6;

default:
return 6;
}
}
function IsUndefined(x) {
return x === undefined;
}
function IsNull(x) {
return x === null;
}
function IsSymbol(x) {
return typeof x === "symbol";
}
function IsObject(x) {
return typeof x === "object" ? x !== null : typeof x === "function";
}
function ToPrimitive(input, PreferredType) {
switch (Type(input)) {
case 0:
return input;

case 1:
return input;

case 2:
return input;

case 3:
return input;

case 4:
return input;

case 5:
return input;
}
var hint = PreferredType === 3 ? "string" : PreferredType === 5 ? "number" : "default";
var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
if (exoticToPrim !== undefined) {
var result = exoticToPrim.call(input, hint);
if (IsObject(result)) throw new TypeError();
return result;
}
return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
}
function OrdinaryToPrimitive(O, hint) {
if (hint === "string") {
var toString_1 = O.toString;
if (IsCallable(toString_1)) {
var result = toString_1.call(O);
if (!IsObject(result)) return result;
}
var valueOf = O.valueOf;
if (IsCallable(valueOf)) {
var result = valueOf.call(O);
if (!IsObject(result)) return result;
}
} else {
var valueOf = O.valueOf;
if (IsCallable(valueOf)) {
var result = valueOf.call(O);
if (!IsObject(result)) return result;
}
var toString_2 = O.toString;
if (IsCallable(toString_2)) {
var result = toString_2.call(O);
if (!IsObject(result)) return result;
}
}
throw new TypeError();
}
function ToBoolean(argument) {
return !!argument;
}
function ToString(argument) {
return "" + argument;
}
function ToPropertyKey(argument) {
var key = ToPrimitive(argument, 3);
if (IsSymbol(key)) return key;
return ToString(key);
}
function IsArray(argument) {
return Array.isArray ? Array.isArray(argument) : argument instanceof Object ? argument instanceof Array : Object.prototype.toString.call(argument) === "[object Array]";
}
function IsCallable(argument) {
return typeof argument === "function";
}
function IsConstructor(argument) {
return typeof argument === "function";
}
function IsPropertyKey(argument) {
switch (Type(argument)) {
case 3:
return true;

case 4:
return true;

default:
return false;
}
}
function GetMethod(V, P) {
var func = V[P];
if (func === undefined || func === null) return undefined;
if (!IsCallable(func)) throw new TypeError();
return func;
}
function GetIterator(obj) {
var method = GetMethod(obj, iteratorSymbol);
if (!IsCallable(method)) throw new TypeError();
var iterator = method.call(obj);
if (!IsObject(iterator)) throw new TypeError();
return iterator;
}
function IteratorValue(iterResult) {
return iterResult.value;
}
function IteratorStep(iterator) {
var result = iterator.next();
return result.done ? false : result;
}
function IteratorClose(iterator) {
var f = iterator["return"];
if (f) f.call(iterator);
}
function OrdinaryGetPrototypeOf(O) {
var proto = Object.getPrototypeOf(O);
if (typeof O !== "function" || O === functionPrototype) return proto;
if (proto !== functionPrototype) return proto;
var prototype = O.prototype;
var prototypeProto = prototype && Object.getPrototypeOf(prototype);
if (prototypeProto == null || prototypeProto === Object.prototype) return proto;
var constructor = prototypeProto.constructor;
if (typeof constructor !== "function") return proto;
if (constructor === O) return proto;
return constructor;
}
function CreateMapPolyfill() {
var cacheSentinel = {};
var arraySentinel = [];
var MapIterator = function() {
function MapIterator(keys, values, selector) {
this._index = 0;
this._keys = keys;
this._values = values;
this._selector = selector;
}
MapIterator.prototype["@@iterator"] = function() {
return this;
};
MapIterator.prototype[iteratorSymbol] = function() {
return this;
};
MapIterator.prototype.next = function() {
var index = this._index;
if (index >= 0 && index < this._keys.length) {
var result = this._selector(this._keys[index], this._values[index]);
if (index + 1 >= this._keys.length) {
this._index = -1;
this._keys = arraySentinel;
this._values = arraySentinel;
} else {
this._index++;
}
return {
value: result,
done: false
};
}
return {
value: undefined,
done: true
};
};
MapIterator.prototype.throw = function(error) {
if (this._index >= 0) {
this._index = -1;
this._keys = arraySentinel;
this._values = arraySentinel;
}
throw error;
};
MapIterator.prototype.return = function(value) {
if (this._index >= 0) {
this._index = -1;
this._keys = arraySentinel;
this._values = arraySentinel;
}
return {
value: value,
done: true
};
};
return MapIterator;
}();
return function() {
function Map() {
this._keys = [];
this._values = [];
this._cacheKey = cacheSentinel;
this._cacheIndex = -2;
}
Object.defineProperty(Map.prototype, "size", {
get: function() {
return this._keys.length;
},
enumerable: true,
configurable: true
});
Map.prototype.has = function(key) {
return this._find(key, false) >= 0;
};
Map.prototype.get = function(key) {
var index = this._find(key, false);
return index >= 0 ? this._values[index] : undefined;
};
Map.prototype.set = function(key, value) {
var index = this._find(key, true);
this._values[index] = value;
return this;
};
Map.prototype.delete = function(key) {
var index = this._find(key, false);
if (index >= 0) {
var size = this._keys.length;
for (var i = index + 1; i < size; i++) {
this._keys[i - 1] = this._keys[i];
this._values[i - 1] = this._values[i];
}
this._keys.length--;
this._values.length--;
if (key === this._cacheKey) {
this._cacheKey = cacheSentinel;
this._cacheIndex = -2;
}
return true;
}
return false;
};
Map.prototype.clear = function() {
this._keys.length = 0;
this._values.length = 0;
this._cacheKey = cacheSentinel;
this._cacheIndex = -2;
};
Map.prototype.keys = function() {
return new MapIterator(this._keys, this._values, getKey);
};
Map.prototype.values = function() {
return new MapIterator(this._keys, this._values, getValue);
};
Map.prototype.entries = function() {
return new MapIterator(this._keys, this._values, getEntry);
};
Map.prototype["@@iterator"] = function() {
return this.entries();
};
Map.prototype[iteratorSymbol] = function() {
return this.entries();
};
Map.prototype._find = function(key, insert) {
if (this._cacheKey !== key) {
this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
}
if (this._cacheIndex < 0 && insert) {
this._cacheIndex = this._keys.length;
this._keys.push(key);
this._values.push(undefined);
}
return this._cacheIndex;
};
return Map;
}();
function getKey(key, _) {
return key;
}
function getValue(_, value) {
return value;
}
function getEntry(key, value) {
return [ key, value ];
}
}
function CreateSetPolyfill() {
return function() {
function Set() {
this._map = new _Map();
}
Object.defineProperty(Set.prototype, "size", {
get: function() {
return this._map.size;
},
enumerable: true,
configurable: true
});
Set.prototype.has = function(value) {
return this._map.has(value);
};
Set.prototype.add = function(value) {
return this._map.set(value, value), this;
};
Set.prototype.delete = function(value) {
return this._map.delete(value);
};
Set.prototype.clear = function() {
this._map.clear();
};
Set.prototype.keys = function() {
return this._map.keys();
};
Set.prototype.values = function() {
return this._map.values();
};
Set.prototype.entries = function() {
return this._map.entries();
};
Set.prototype["@@iterator"] = function() {
return this.keys();
};
Set.prototype[iteratorSymbol] = function() {
return this.keys();
};
return Set;
}();
}
function CreateWeakMapPolyfill() {
var UUID_SIZE = 16;
var keys = HashMap.create();
var rootKey = CreateUniqueKey();
return function() {
function WeakMap() {
this._key = CreateUniqueKey();
}
WeakMap.prototype.has = function(target) {
var table = GetOrCreateWeakMapTable(target, false);
return table !== undefined ? HashMap.has(table, this._key) : false;
};
WeakMap.prototype.get = function(target) {
var table = GetOrCreateWeakMapTable(target, false);
return table !== undefined ? HashMap.get(table, this._key) : undefined;
};
WeakMap.prototype.set = function(target, value) {
var table = GetOrCreateWeakMapTable(target, true);
table[this._key] = value;
return this;
};
WeakMap.prototype.delete = function(target) {
var table = GetOrCreateWeakMapTable(target, false);
return table !== undefined ? delete table[this._key] : false;
};
WeakMap.prototype.clear = function() {
this._key = CreateUniqueKey();
};
return WeakMap;
}();
function CreateUniqueKey() {
var key;
do {
key = "@@WeakMap@@" + CreateUUID();
} while (HashMap.has(keys, key));
keys[key] = true;
return key;
}
function GetOrCreateWeakMapTable(target, create) {
if (!hasOwn.call(target, rootKey)) {
if (!create) return undefined;
Object.defineProperty(target, rootKey, {
value: HashMap.create()
});
}
return target[rootKey];
}
function FillRandomBytes(buffer, size) {
for (var i = 0; i < size; ++i) buffer[i] = Math.random() * 255 | 0;
return buffer;
}
function GenRandomBytes(size) {
if (typeof Uint8Array === "function") {
if (typeof crypto !== "undefined") return crypto.getRandomValues(new Uint8Array(size));
if (typeof msCrypto !== "undefined") return msCrypto.getRandomValues(new Uint8Array(size));
return FillRandomBytes(new Uint8Array(size), size);
}
return FillRandomBytes(new Array(size), size);
}
function CreateUUID() {
var data = GenRandomBytes(UUID_SIZE);
data[6] = data[6] & 79 | 64;
data[8] = data[8] & 191 | 128;
var result = "";
for (var offset = 0; offset < UUID_SIZE; ++offset) {
var byte = data[offset];
if (offset === 4 || offset === 6 || offset === 8) result += "-";
if (byte < 16) result += "0";
result += byte.toString(16).toLowerCase();
}
return result;
}
}
function MakeDictionary(obj) {
obj.__ = undefined;
delete obj.__;
return obj;
}
(function(__global) {
if (typeof __global.Reflect !== "undefined") {
if (__global.Reflect !== Reflect) {
for (var p in Reflect) {
if (hasOwn.call(Reflect, p)) {
__global.Reflect[p] = Reflect[p];
}
}
}
} else {
__global.Reflect = Reflect;
}
})(typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : Function("return this;")());
})(Reflect || (Reflect = {}));
}, function(module, exports) {
if (!Array.prototype.fill) {
Array.prototype.fill = function(value) {
var O = Object(this);
var len = parseInt(O.length, 10);
var start = arguments[1];
var relativeStart = parseInt(start, 10) || 0;
var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);
var end = arguments[2];
var relativeEnd = end === undefined ? len : parseInt(end, 10) || 0;
var final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);
for (;k < final; k++) {
O[k] = value;
}
return O;
};
}
if (!Array.from) {
Array.from = function(iterable, mapFn, thisArg) {
var results = [];
if (iterable.next) {
for (var step = null; ;step = iterable.next()) {
if (step.done) {
break;
} else {
results.push(step.value);
}
}
} else {
results = [].slice.call(iterable);
}
if (mapFn) {
results = results.forEach(mapFn, thisArg);
}
return results;
};
}
}, function(module, exports) {
if (!console.group) {
console.group = function() {};
}
if (!console.groupEnd) {
console.groupEnd = function() {};
}
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(93), __webpack_require__(107), __webpack_require__(120), __webpack_require__(123)) : typeof define === "function" && define.amd ? define([ "exports", "rxjs/Observable", "rxjs/observable/merge", "rxjs/operator/share", "rxjs/Subject" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.core = global.ng.core || {}), global.Rx, global.Rx.Observable, global.Rx.Observable.prototype, global.Rx);
})(this, function(exports, rxjs_Observable, rxjs_observable_merge, rxjs_operator_share, rxjs_Subject) {
"use strict";
var __extends = undefined && undefined.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OpaqueToken = function() {
function OpaqueToken(_desc) {
this._desc = _desc;
}
OpaqueToken.prototype.toString = function() {
return "Token " + this._desc;
};
return OpaqueToken;
}();
var InjectionToken = function(_super) {
__extends(InjectionToken, _super);
function InjectionToken(desc) {
return _super.call(this, desc) || this;
}
InjectionToken.prototype.toString = function() {
return "InjectionToken " + this._desc;
};
return InjectionToken;
}(OpaqueToken);
var __window = typeof window !== "undefined" && window;
var __self = typeof self !== "undefined" && typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope && self;
var __global = typeof global !== "undefined" && global;
var _global = __window || __global || __self;
var _symbolIterator = null;
function getSymbolIterator() {
if (!_symbolIterator) {
var Symbol = _global["Symbol"];
if (Symbol && Symbol.iterator) {
_symbolIterator = Symbol.iterator;
} else {
var keys = Object.getOwnPropertyNames(Map.prototype);
for (var i = 0; i < keys.length; ++i) {
var key = keys[i];
if (key !== "entries" && key !== "size" && Map.prototype[key] === Map.prototype["entries"]) {
_symbolIterator = key;
}
}
}
}
return _symbolIterator;
}
function scheduleMicroTask(fn) {
Zone.current.scheduleMicroTask("scheduleMicrotask", fn);
}
function looseIdentical(a, b) {
return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
}
function stringify(token) {
if (typeof token === "string") {
return token;
}
if (token == null) {
return "" + token;
}
if (token.overriddenName) {
return "" + token.overriddenName;
}
if (token.name) {
return "" + token.name;
}
var res = token.toString();
if (res == null) {
return "" + res;
}
var newLineIndex = res.indexOf("\n");
return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
var _nextClassId = 0;
var Reflect = _global["Reflect"];
function extractAnnotation(annotation) {
if (typeof annotation === "function" && annotation.hasOwnProperty("annotation")) {
annotation = annotation.annotation;
}
return annotation;
}
function applyParams(fnOrArray, key) {
if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array) {
throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
}
if (typeof fnOrArray === "function") {
return fnOrArray;
}
if (Array.isArray(fnOrArray)) {
var annotations = fnOrArray;
var annoLength = annotations.length - 1;
var fn = fnOrArray[annoLength];
if (typeof fn !== "function") {
throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
}
if (annoLength != fn.length) {
throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
}
var paramsAnnotations = [];
for (var i = 0, ii = annotations.length - 1; i < ii; i++) {
var paramAnnotations = [];
paramsAnnotations.push(paramAnnotations);
var annotation = annotations[i];
if (Array.isArray(annotation)) {
for (var j = 0; j < annotation.length; j++) {
paramAnnotations.push(extractAnnotation(annotation[j]));
}
} else if (typeof annotation === "function") {
paramAnnotations.push(extractAnnotation(annotation));
} else {
paramAnnotations.push(annotation);
}
}
Reflect.defineMetadata("parameters", paramsAnnotations, fn);
return fn;
}
throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
}
function Class(clsDef) {
var constructor = applyParams(clsDef.hasOwnProperty("constructor") ? clsDef.constructor : undefined, "constructor");
var proto = constructor.prototype;
if (clsDef.hasOwnProperty("extends")) {
if (typeof clsDef.extends === "function") {
constructor.prototype = proto = Object.create(clsDef.extends.prototype);
} else {
throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
}
}
for (var key in clsDef) {
if (key !== "extends" && key !== "prototype" && clsDef.hasOwnProperty(key)) {
proto[key] = applyParams(clsDef[key], key);
}
}
if (this && this.annotations instanceof Array) {
Reflect.defineMetadata("annotations", this.annotations, constructor);
}
var constructorName = constructor["name"];
if (!constructorName || constructorName === "constructor") {
constructor["overriddenName"] = "class" + _nextClassId++;
}
return constructor;
}
function makeDecorator(name, props, parentClass, chainFn) {
var metaCtor = makeMetadataCtor([ props ]);
function DecoratorFactory(objOrType) {
if (!(Reflect && Reflect.getOwnMetadata)) {
throw "reflect-metadata shim is required when using class decorators";
}
if (this instanceof DecoratorFactory) {
metaCtor.call(this, objOrType);
return this;
}
var annotationInstance = new DecoratorFactory(objOrType);
var chainAnnotation = typeof this === "function" && Array.isArray(this.annotations) ? this.annotations : [];
chainAnnotation.push(annotationInstance);
var TypeDecorator = function TypeDecorator(cls) {
var annotations = Reflect.getOwnMetadata("annotations", cls) || [];
annotations.push(annotationInstance);
Reflect.defineMetadata("annotations", annotations, cls);
return cls;
};
TypeDecorator.annotations = chainAnnotation;
TypeDecorator.Class = Class;
if (chainFn) chainFn(TypeDecorator);
return TypeDecorator;
}
if (parentClass) {
DecoratorFactory.prototype = Object.create(parentClass.prototype);
}
DecoratorFactory.prototype.toString = function() {
return "@" + name;
};
DecoratorFactory.annotationCls = DecoratorFactory;
return DecoratorFactory;
}
function makeMetadataCtor(props) {
return function ctor() {
var _this = this;
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i] = arguments[_i];
}
props.forEach(function(prop, i) {
var argVal = args[i];
if (Array.isArray(prop)) {
_this[prop[0]] = argVal === undefined ? prop[1] : argVal;
} else {
for (var propName in prop) {
_this[propName] = argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
}
}
});
};
}
function makeParamDecorator(name, props, parentClass) {
var metaCtor = makeMetadataCtor(props);
function ParamDecoratorFactory() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i] = arguments[_i];
}
if (this instanceof ParamDecoratorFactory) {
metaCtor.apply(this, args);
return this;
}
var annotationInstance = new (ParamDecoratorFactory.bind.apply(ParamDecoratorFactory, [ void 0 ].concat(args)))();
ParamDecorator.annotation = annotationInstance;
return ParamDecorator;
function ParamDecorator(cls, unusedKey, index) {
var parameters = Reflect.getOwnMetadata("parameters", cls) || [];
while (parameters.length <= index) {
parameters.push(null);
}
parameters[index] = parameters[index] || [];
parameters[index].push(annotationInstance);
Reflect.defineMetadata("parameters", parameters, cls);
return cls;
}
}
if (parentClass) {
ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
}
ParamDecoratorFactory.prototype.toString = function() {
return "@" + name;
};
ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
return ParamDecoratorFactory;
}
function makePropDecorator(name, props, parentClass) {
var metaCtor = makeMetadataCtor(props);
function PropDecoratorFactory() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i] = arguments[_i];
}
if (this instanceof PropDecoratorFactory) {
metaCtor.apply(this, args);
return this;
}
var decoratorInstance = new (PropDecoratorFactory.bind.apply(PropDecoratorFactory, [ void 0 ].concat(args)))();
return function PropDecorator(target, name) {
var meta = Reflect.getOwnMetadata("propMetadata", target.constructor) || {};
meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
meta[name].unshift(decoratorInstance);
Reflect.defineMetadata("propMetadata", meta, target.constructor);
};
}
if (parentClass) {
PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
}
PropDecoratorFactory.prototype.toString = function() {
return "@" + name;
};
PropDecoratorFactory.annotationCls = PropDecoratorFactory;
return PropDecoratorFactory;
}
var ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken("AnalyzeForEntryComponents");
var Attribute = makeParamDecorator("Attribute", [ [ "attributeName", undefined ] ]);
var Query = function() {
function Query() {}
return Query;
}();
var ContentChildren = makePropDecorator("ContentChildren", [ [ "selector", undefined ], {
first: false,
isViewQuery: false,
descendants: false,
read: undefined
} ], Query);
var ContentChild = makePropDecorator("ContentChild", [ [ "selector", undefined ], {
first: true,
isViewQuery: false,
descendants: true,
read: undefined
} ], Query);
var ViewChildren = makePropDecorator("ViewChildren", [ [ "selector", undefined ], {
first: false,
isViewQuery: true,
descendants: true,
read: undefined
} ], Query);
var ViewChild = makePropDecorator("ViewChild", [ [ "selector", undefined ], {
first: true,
isViewQuery: true,
descendants: true,
read: undefined
} ], Query);
var ChangeDetectionStrategy = {};
ChangeDetectionStrategy.OnPush = 0;
ChangeDetectionStrategy.Default = 1;
ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = "OnPush";
ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = "Default";
var ChangeDetectorStatus = {};
ChangeDetectorStatus.CheckOnce = 0;
ChangeDetectorStatus.Checked = 1;
ChangeDetectorStatus.CheckAlways = 2;
ChangeDetectorStatus.Detached = 3;
ChangeDetectorStatus.Errored = 4;
ChangeDetectorStatus.Destroyed = 5;
ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = "CheckOnce";
ChangeDetectorStatus[ChangeDetectorStatus.Checked] = "Checked";
ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = "CheckAlways";
ChangeDetectorStatus[ChangeDetectorStatus.Detached] = "Detached";
ChangeDetectorStatus[ChangeDetectorStatus.Errored] = "Errored";
ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = "Destroyed";
function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
return changeDetectionStrategy == null || changeDetectionStrategy === ChangeDetectionStrategy.Default;
}
var Directive = makeDecorator("Directive", {
selector: undefined,
inputs: undefined,
outputs: undefined,
host: undefined,
providers: undefined,
exportAs: undefined,
queries: undefined
});
var Component = makeDecorator("Component", {
selector: undefined,
inputs: undefined,
outputs: undefined,
host: undefined,
exportAs: undefined,
moduleId: undefined,
providers: undefined,
viewProviders: undefined,
changeDetection: ChangeDetectionStrategy.Default,
queries: undefined,
templateUrl: undefined,
template: undefined,
styleUrls: undefined,
styles: undefined,
animations: undefined,
encapsulation: undefined,
interpolation: undefined,
entryComponents: undefined
}, Directive);
var Pipe = makeDecorator("Pipe", {
name: undefined,
pure: true
});
var Input = makePropDecorator("Input", [ [ "bindingPropertyName", undefined ] ]);
var Output = makePropDecorator("Output", [ [ "bindingPropertyName", undefined ] ]);
var HostBinding = makePropDecorator("HostBinding", [ [ "hostPropertyName", undefined ] ]);
var HostListener = makePropDecorator("HostListener", [ [ "eventName", undefined ], [ "args", [] ] ]);
var CUSTOM_ELEMENTS_SCHEMA = {
name: "custom-elements"
};
var NO_ERRORS_SCHEMA = {
name: "no-errors-schema"
};
var NgModule = makeDecorator("NgModule", {
providers: undefined,
declarations: undefined,
imports: undefined,
exports: undefined,
entryComponents: undefined,
bootstrap: undefined,
schemas: undefined,
id: undefined
});
var ViewEncapsulation = {};
ViewEncapsulation.Emulated = 0;
ViewEncapsulation.Native = 1;
ViewEncapsulation.None = 2;
ViewEncapsulation[ViewEncapsulation.Emulated] = "Emulated";
ViewEncapsulation[ViewEncapsulation.Native] = "Native";
ViewEncapsulation[ViewEncapsulation.None] = "None";
var ViewMetadata = function() {
function ViewMetadata(_a) {
var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;
this.templateUrl = templateUrl;
this.template = template;
this.styleUrls = styleUrls;
this.styles = styles;
this.encapsulation = encapsulation;
this.animations = animations;
this.interpolation = interpolation;
}
return ViewMetadata;
}();
var Version = function() {
function Version(full) {
this.full = full;
}
Object.defineProperty(Version.prototype, "major", {
get: function() {
return this.full.split(".")[0];
},
enumerable: true,
configurable: true
});
Object.defineProperty(Version.prototype, "minor", {
get: function() {
return this.full.split(".")[1];
},
enumerable: true,
configurable: true
});
Object.defineProperty(Version.prototype, "patch", {
get: function() {
return this.full.split(".").slice(2).join(".");
},
enumerable: true,
configurable: true
});
return Version;
}();
var VERSION = new Version("4.1.0");
var Inject = makeParamDecorator("Inject", [ [ "token", undefined ] ]);
var Optional = makeParamDecorator("Optional", []);
var Injectable = makeDecorator("Injectable", []);
var Self = makeParamDecorator("Self", []);
var SkipSelf = makeParamDecorator("SkipSelf", []);
var Host = makeParamDecorator("Host", []);
function forwardRef(forwardRefFn) {
forwardRefFn.__forward_ref__ = forwardRef;
forwardRefFn.toString = function() {
return stringify(this());
};
return forwardRefFn;
}
function resolveForwardRef(type) {
if (typeof type === "function" && type.hasOwnProperty("__forward_ref__") && type.__forward_ref__ === forwardRef) {
return type();
} else {
return type;
}
}
var _THROW_IF_NOT_FOUND = new Object();
var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
var _NullInjector = function() {
function _NullInjector() {}
_NullInjector.prototype.get = function(token, notFoundValue) {
if (notFoundValue === void 0) {
notFoundValue = _THROW_IF_NOT_FOUND;
}
if (notFoundValue === _THROW_IF_NOT_FOUND) {
throw new Error("No provider for " + stringify(token) + "!");
}
return notFoundValue;
};
return _NullInjector;
}();
var Injector = function() {
function Injector() {}
Injector.prototype.get = function(token, notFoundValue) {};
Injector.prototype.get = function(token, notFoundValue) {};
return Injector;
}();
Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
Injector.NULL = new _NullInjector();
var ERROR_COMPONENT_TYPE = "ngComponentType";
var ERROR_DEBUG_CONTEXT = "ngDebugContext";
var ERROR_ORIGINAL_ERROR = "ngOriginalError";
var ERROR_LOGGER = "ngErrorLogger";
function getDebugContext(error) {
return error[ERROR_DEBUG_CONTEXT];
}
function getOriginalError(error) {
return error[ERROR_ORIGINAL_ERROR];
}
function getErrorLogger(error) {
return error[ERROR_LOGGER] || defaultErrorLogger;
}
function defaultErrorLogger(console) {
var values = [];
for (var _i = 1; _i < arguments.length; _i++) {
values[_i - 1] = arguments[_i];
}
console.error.apply(console, values);
}
var ErrorHandler = function() {
function ErrorHandler(deprecatedParameter) {
this._console = console;
}
ErrorHandler.prototype.handleError = function(error) {
var originalError = this._findOriginalError(error);
var context = this._findContext(error);
var errorLogger = getErrorLogger(error);
errorLogger(this._console, "ERROR", error);
if (originalError) {
errorLogger(this._console, "ORIGINAL ERROR", originalError);
}
if (context) {
errorLogger(this._console, "ERROR CONTEXT", context);
}
};
ErrorHandler.prototype._findContext = function(error) {
if (error) {
return getDebugContext(error) ? getDebugContext(error) : this._findContext(getOriginalError(error));
}
return null;
};
ErrorHandler.prototype._findOriginalError = function(error) {
var e = getOriginalError(error);
while (e && getOriginalError(e)) {
e = getOriginalError(e);
}
return e;
};
return ErrorHandler;
}();
function wrappedError(message, originalError) {
var msg = message + " caused by: " + (originalError instanceof Error ? originalError.message : originalError);
var error = Error(msg);
error[ERROR_ORIGINAL_ERROR] = originalError;
return error;
}
function findFirstClosedCycle(keys) {
var res = [];
for (var i = 0; i < keys.length; ++i) {
if (res.indexOf(keys[i]) > -1) {
res.push(keys[i]);
return res;
}
res.push(keys[i]);
}
return res;
}
function constructResolvingPath(keys) {
if (keys.length > 1) {
var reversed = findFirstClosedCycle(keys.slice().reverse());
var tokenStrs = reversed.map(function(k) {
return stringify(k.token);
});
return " (" + tokenStrs.join(" -> ") + ")";
}
return "";
}
function injectionError(injector, key, constructResolvingMessage, originalError) {
var error = originalError ? wrappedError("", originalError) : Error();
error.addKey = addKey;
error.keys = [ key ];
error.injectors = [ injector ];
error.constructResolvingMessage = constructResolvingMessage;
error.message = error.constructResolvingMessage();
error[ERROR_ORIGINAL_ERROR] = originalError;
return error;
}
function addKey(injector, key) {
this.injectors.push(injector);
this.keys.push(key);
this.message = this.constructResolvingMessage();
}
function noProviderError(injector, key) {
return injectionError(injector, key, function() {
var first = stringify(this.keys[0].token);
return "No provider for " + first + "!" + constructResolvingPath(this.keys);
});
}
function cyclicDependencyError(injector, key) {
return injectionError(injector, key, function() {
return "Cannot instantiate cyclic dependency!" + constructResolvingPath(this.keys);
});
}
function instantiationError(injector, originalException, originalStack, key) {
return injectionError(injector, key, function() {
var first = stringify(this.keys[0].token);
return getOriginalError(this).message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
}, originalException);
}
function invalidProviderError(provider) {
return Error("Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
}
function noAnnotationError(typeOrFunc, params) {
var signature = [];
for (var i = 0, ii = params.length; i < ii; i++) {
var parameter = params[i];
if (!parameter || parameter.length == 0) {
signature.push("?");
} else {
signature.push(parameter.map(stringify).join(" "));
}
}
return Error("Cannot resolve all parameters for '" + stringify(typeOrFunc) + "'(" + signature.join(", ") + "). " + "Make sure that all the parameters are decorated with Inject or have valid type annotations and that '" + stringify(typeOrFunc) + "' is decorated with Injectable.");
}
function outOfBoundsError(index) {
return Error("Index " + index + " is out-of-bounds.");
}
function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
return Error("Cannot mix multi providers and regular providers, got: " + provider1 + " " + provider2);
}
var ReflectiveKey = function() {
function ReflectiveKey(token, id) {
this.token = token;
this.id = id;
if (!token) {
throw new Error("Token must be defined!");
}
}
Object.defineProperty(ReflectiveKey.prototype, "displayName", {
get: function() {
return stringify(this.token);
},
enumerable: true,
configurable: true
});
ReflectiveKey.get = function(token) {
return _globalKeyRegistry.get(resolveForwardRef(token));
};
Object.defineProperty(ReflectiveKey, "numberOfKeys", {
get: function() {
return _globalKeyRegistry.numberOfKeys;
},
enumerable: true,
configurable: true
});
return ReflectiveKey;
}();
var KeyRegistry = function() {
function KeyRegistry() {
this._allKeys = new Map();
}
KeyRegistry.prototype.get = function(token) {
if (token instanceof ReflectiveKey) return token;
if (this._allKeys.has(token)) {
return this._allKeys.get(token);
}
var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
this._allKeys.set(token, newKey);
return newKey;
};
Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
get: function() {
return this._allKeys.size;
},
enumerable: true,
configurable: true
});
return KeyRegistry;
}();
var _globalKeyRegistry = new KeyRegistry();
var Type = Function;
function isType(v) {
return typeof v === "function";
}
var DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*arguments\)/;
var ReflectionCapabilities = function() {
function ReflectionCapabilities(reflect) {
this._reflect = reflect || _global["Reflect"];
}
ReflectionCapabilities.prototype.isReflectionEnabled = function() {
return true;
};
ReflectionCapabilities.prototype.factory = function(t) {
return function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i] = arguments[_i];
}
return new (t.bind.apply(t, [ void 0 ].concat(args)))();
};
};
ReflectionCapabilities.prototype._zipTypesAndAnnotations = function(paramTypes, paramAnnotations) {
var result;
if (typeof paramTypes === "undefined") {
result = new Array(paramAnnotations.length);
} else {
result = new Array(paramTypes.length);
}
for (var i = 0; i < result.length; i++) {
if (typeof paramTypes === "undefined") {
result[i] = [];
} else if (paramTypes[i] != Object) {
result[i] = [ paramTypes[i] ];
} else {
result[i] = [];
}
if (paramAnnotations && paramAnnotations[i] != null) {
result[i] = result[i].concat(paramAnnotations[i]);
}
}
return result;
};
ReflectionCapabilities.prototype._ownParameters = function(type, parentCtor) {
if (DELEGATE_CTOR.exec(type.toString())) {
return null;
}
if (type.parameters && type.parameters !== parentCtor.parameters) {
return type.parameters;
}
var tsickleCtorParams = type.ctorParameters;
if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
var ctorParameters = typeof tsickleCtorParams === "function" ? tsickleCtorParams() : tsickleCtorParams;
var paramTypes = ctorParameters.map(function(ctorParam) {
return ctorParam && ctorParam.type;
});
var paramAnnotations = ctorParameters.map(function(ctorParam) {
return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
});
return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
}
if (this._reflect != null && this._reflect.getOwnMetadata != null) {
var paramAnnotations = this._reflect.getOwnMetadata("parameters", type);
var paramTypes = this._reflect.getOwnMetadata("design:paramtypes", type);
if (paramTypes || paramAnnotations) {
return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
}
}
return new Array(type.length).fill(undefined);
};
ReflectionCapabilities.prototype.parameters = function(type) {
if (!isType(type)) {
return [];
}
var parentCtor = getParentCtor(type);
var parameters = this._ownParameters(type, parentCtor);
if (!parameters && parentCtor !== Object) {
parameters = this.parameters(parentCtor);
}
return parameters || [];
};
ReflectionCapabilities.prototype._ownAnnotations = function(typeOrFunc, parentCtor) {
if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
var annotations = typeOrFunc.annotations;
if (typeof annotations === "function" && annotations.annotations) {
annotations = annotations.annotations;
}
return annotations;
}
if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {
return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
}
if (this._reflect && this._reflect.getOwnMetadata) {
return this._reflect.getOwnMetadata("annotations", typeOrFunc);
}
return null;
};
ReflectionCapabilities.prototype.annotations = function(typeOrFunc) {
if (!isType(typeOrFunc)) {
return [];
}
var parentCtor = getParentCtor(typeOrFunc);
var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
return parentAnnotations.concat(ownAnnotations);
};
ReflectionCapabilities.prototype._ownPropMetadata = function(typeOrFunc, parentCtor) {
if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {
var propMetadata = typeOrFunc.propMetadata;
if (typeof propMetadata === "function" && propMetadata.propMetadata) {
propMetadata = propMetadata.propMetadata;
}
return propMetadata;
}
if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {
var propDecorators_1 = typeOrFunc.propDecorators;
var propMetadata_1 = {};
Object.keys(propDecorators_1).forEach(function(prop) {
propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
});
return propMetadata_1;
}
if (this._reflect && this._reflect.getOwnMetadata) {
return this._reflect.getOwnMetadata("propMetadata", typeOrFunc);
}
return null;
};
ReflectionCapabilities.prototype.propMetadata = function(typeOrFunc) {
if (!isType(typeOrFunc)) {
return {};
}
var parentCtor = getParentCtor(typeOrFunc);
var propMetadata = {};
if (parentCtor !== Object) {
var parentPropMetadata_1 = this.propMetadata(parentCtor);
Object.keys(parentPropMetadata_1).forEach(function(propName) {
propMetadata[propName] = parentPropMetadata_1[propName];
});
}
var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
if (ownPropMetadata) {
Object.keys(ownPropMetadata).forEach(function(propName) {
var decorators = [];
if (propMetadata.hasOwnProperty(propName)) {
decorators.push.apply(decorators, propMetadata[propName]);
}
decorators.push.apply(decorators, ownPropMetadata[propName]);
propMetadata[propName] = decorators;
});
}
return propMetadata;
};
ReflectionCapabilities.prototype.hasLifecycleHook = function(type, lcProperty) {
return type instanceof Type && lcProperty in type.prototype;
};
ReflectionCapabilities.prototype.getter = function(name) {
return new Function("o", "return o." + name + ";");
};
ReflectionCapabilities.prototype.setter = function(name) {
return new Function("o", "v", "return o." + name + " = v;");
};
ReflectionCapabilities.prototype.method = function(name) {
var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
return new Function("o", "args", functionBody);
};
ReflectionCapabilities.prototype.importUri = function(type) {
if (typeof type === "object" && type["filePath"]) {
return type["filePath"];
}
return "./" + stringify(type);
};
ReflectionCapabilities.prototype.resourceUri = function(type) {
return "./" + stringify(type);
};
ReflectionCapabilities.prototype.resolveIdentifier = function(name, moduleUrl, members, runtime) {
return runtime;
};
ReflectionCapabilities.prototype.resolveEnum = function(enumIdentifier, name) {
return enumIdentifier[name];
};
return ReflectionCapabilities;
}();
function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
if (!decoratorInvocations) {
return [];
}
return decoratorInvocations.map(function(decoratorInvocation) {
var decoratorType = decoratorInvocation.type;
var annotationCls = decoratorType.annotationCls;
var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
return new (annotationCls.bind.apply(annotationCls, [ void 0 ].concat(annotationArgs)))();
});
}
function getParentCtor(ctor) {
var parentProto = Object.getPrototypeOf(ctor.prototype);
var parentCtor = parentProto ? parentProto.constructor : null;
return parentCtor || Object;
}
var ReflectorReader = function() {
function ReflectorReader() {}
ReflectorReader.prototype.parameters = function(typeOrFunc) {};
ReflectorReader.prototype.annotations = function(typeOrFunc) {};
ReflectorReader.prototype.propMetadata = function(typeOrFunc) {};
ReflectorReader.prototype.importUri = function(typeOrFunc) {};
ReflectorReader.prototype.resourceUri = function(typeOrFunc) {};
ReflectorReader.prototype.resolveIdentifier = function(name, moduleUrl, members, runtime) {};
ReflectorReader.prototype.resolveEnum = function(identifier, name) {};
return ReflectorReader;
}();
var Reflector = function(_super) {
__extends(Reflector, _super);
function Reflector(reflectionCapabilities) {
var _this = _super.call(this) || this;
_this.reflectionCapabilities = reflectionCapabilities;
return _this;
}
Reflector.prototype.updateCapabilities = function(caps) {
this.reflectionCapabilities = caps;
};
Reflector.prototype.factory = function(type) {
return this.reflectionCapabilities.factory(type);
};
Reflector.prototype.parameters = function(typeOrFunc) {
return this.reflectionCapabilities.parameters(typeOrFunc);
};
Reflector.prototype.annotations = function(typeOrFunc) {
return this.reflectionCapabilities.annotations(typeOrFunc);
};
Reflector.prototype.propMetadata = function(typeOrFunc) {
return this.reflectionCapabilities.propMetadata(typeOrFunc);
};
Reflector.prototype.hasLifecycleHook = function(type, lcProperty) {
return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
};
Reflector.prototype.getter = function(name) {
return this.reflectionCapabilities.getter(name);
};
Reflector.prototype.setter = function(name) {
return this.reflectionCapabilities.setter(name);
};
Reflector.prototype.method = function(name) {
return this.reflectionCapabilities.method(name);
};
Reflector.prototype.importUri = function(type) {
return this.reflectionCapabilities.importUri(type);
};
Reflector.prototype.resourceUri = function(type) {
return this.reflectionCapabilities.resourceUri(type);
};
Reflector.prototype.resolveIdentifier = function(name, moduleUrl, members, runtime) {
return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
};
Reflector.prototype.resolveEnum = function(identifier, name) {
return this.reflectionCapabilities.resolveEnum(identifier, name);
};
return Reflector;
}(ReflectorReader);
var reflector = new Reflector(new ReflectionCapabilities());
var ReflectiveDependency = function() {
function ReflectiveDependency(key, optional, visibility) {
this.key = key;
this.optional = optional;
this.visibility = visibility;
}
ReflectiveDependency.fromKey = function(key) {
return new ReflectiveDependency(key, false, null);
};
return ReflectiveDependency;
}();
var _EMPTY_LIST = [];
var ResolvedReflectiveProvider_ = function() {
function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
this.key = key;
this.resolvedFactories = resolvedFactories;
this.multiProvider = multiProvider;
}
Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
get: function() {
return this.resolvedFactories[0];
},
enumerable: true,
configurable: true
});
return ResolvedReflectiveProvider_;
}();
var ResolvedReflectiveFactory = function() {
function ResolvedReflectiveFactory(factory, dependencies) {
this.factory = factory;
this.dependencies = dependencies;
}
return ResolvedReflectiveFactory;
}();
function resolveReflectiveFactory(provider) {
var factoryFn;
var resolvedDeps;
if (provider.useClass) {
var useClass = resolveForwardRef(provider.useClass);
factoryFn = reflector.factory(useClass);
resolvedDeps = _dependenciesFor(useClass);
} else if (provider.useExisting) {
factoryFn = function(aliasInstance) {
return aliasInstance;
};
resolvedDeps = [ ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting)) ];
} else if (provider.useFactory) {
factoryFn = provider.useFactory;
resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
} else {
factoryFn = function() {
return provider.useValue;
};
resolvedDeps = _EMPTY_LIST;
}
return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
}
function resolveReflectiveProvider(provider) {
return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [ resolveReflectiveFactory(provider) ], provider.multi || false);
}
function resolveReflectiveProviders(providers) {
var normalized = _normalizeProviders(providers, []);
var resolved = normalized.map(resolveReflectiveProvider);
var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
return Array.from(resolvedProviderMap.values());
}
function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
for (var i = 0; i < providers.length; i++) {
var provider = providers[i];
var existing = normalizedProvidersMap.get(provider.key.id);
if (existing) {
if (provider.multiProvider !== existing.multiProvider) {
throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
}
if (provider.multiProvider) {
for (var j = 0; j < provider.resolvedFactories.length; j++) {
existing.resolvedFactories.push(provider.resolvedFactories[j]);
}
} else {
normalizedProvidersMap.set(provider.key.id, provider);
}
} else {
var resolvedProvider = void 0;
if (provider.multiProvider) {
resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
} else {
resolvedProvider = provider;
}
normalizedProvidersMap.set(provider.key.id, resolvedProvider);
}
}
return normalizedProvidersMap;
}
function _normalizeProviders(providers, res) {
providers.forEach(function(b) {
if (b instanceof Type) {
res.push({
provide: b,
useClass: b
});
} else if (b && typeof b == "object" && b.provide !== undefined) {
res.push(b);
} else if (b instanceof Array) {
_normalizeProviders(b, res);
} else {
throw invalidProviderError(b);
}
});
return res;
}
function constructDependencies(typeOrFunc, dependencies) {
if (!dependencies) {
return _dependenciesFor(typeOrFunc);
} else {
var params_1 = dependencies.map(function(t) {
return [ t ];
});
return dependencies.map(function(t) {
return _extractToken(typeOrFunc, t, params_1);
});
}
}
function _dependenciesFor(typeOrFunc) {
var params = reflector.parameters(typeOrFunc);
if (!params) return [];
if (params.some(function(p) {
return p == null;
})) {
throw noAnnotationError(typeOrFunc, params);
}
return params.map(function(p) {
return _extractToken(typeOrFunc, p, params);
});
}
function _extractToken(typeOrFunc, metadata, params) {
var token = null;
var optional = false;
if (!Array.isArray(metadata)) {
if (metadata instanceof Inject) {
return _createDependency(metadata["token"], optional, null);
} else {
return _createDependency(metadata, optional, null);
}
}
var visibility = null;
for (var i = 0; i < metadata.length; ++i) {
var paramMetadata = metadata[i];
if (paramMetadata instanceof Type) {
token = paramMetadata;
} else if (paramMetadata instanceof Inject) {
token = paramMetadata["token"];
} else if (paramMetadata instanceof Optional) {
optional = true;
} else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
visibility = paramMetadata;
} else if (paramMetadata instanceof InjectionToken) {
token = paramMetadata;
}
}
token = resolveForwardRef(token);
if (token != null) {
return _createDependency(token, optional, visibility);
} else {
throw noAnnotationError(typeOrFunc, params);
}
}
function _createDependency(token, optional, visibility) {
return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
}
var UNDEFINED = new Object();
var ReflectiveInjector = function() {
function ReflectiveInjector() {}
ReflectiveInjector.resolve = function(providers) {
return resolveReflectiveProviders(providers);
};
ReflectiveInjector.resolveAndCreate = function(providers, parent) {
var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
};
ReflectiveInjector.fromResolvedProviders = function(providers, parent) {
return new ReflectiveInjector_(providers, parent);
};
ReflectiveInjector.prototype.parent = function() {};
ReflectiveInjector.prototype.resolveAndCreateChild = function(providers) {};
ReflectiveInjector.prototype.createChildFromResolved = function(providers) {};
ReflectiveInjector.prototype.resolveAndInstantiate = function(provider) {};
ReflectiveInjector.prototype.instantiateResolved = function(provider) {};
ReflectiveInjector.prototype.get = function(token, notFoundValue) {};
return ReflectiveInjector;
}();
var ReflectiveInjector_ = function() {
function ReflectiveInjector_(_providers, _parent) {
this._constructionCounter = 0;
this._providers = _providers;
this._parent = _parent || null;
var len = _providers.length;
this.keyIds = new Array(len);
this.objs = new Array(len);
for (var i = 0; i < len; i++) {
this.keyIds[i] = _providers[i].key.id;
this.objs[i] = UNDEFINED;
}
}
ReflectiveInjector_.prototype.get = function(token, notFoundValue) {
if (notFoundValue === void 0) {
notFoundValue = THROW_IF_NOT_FOUND;
}
return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
};
Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: true,
configurable: true
});
ReflectiveInjector_.prototype.resolveAndCreateChild = function(providers) {
var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
return this.createChildFromResolved(ResolvedReflectiveProviders);
};
ReflectiveInjector_.prototype.createChildFromResolved = function(providers) {
var inj = new ReflectiveInjector_(providers);
inj._parent = this;
return inj;
};
ReflectiveInjector_.prototype.resolveAndInstantiate = function(provider) {
return this.instantiateResolved(ReflectiveInjector.resolve([ provider ])[0]);
};
ReflectiveInjector_.prototype.instantiateResolved = function(provider) {
return this._instantiateProvider(provider);
};
ReflectiveInjector_.prototype.getProviderAtIndex = function(index) {
if (index < 0 || index >= this._providers.length) {
throw outOfBoundsError(index);
}
return this._providers[index];
};
ReflectiveInjector_.prototype._new = function(provider) {
if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
throw cyclicDependencyError(this, provider.key);
}
return this._instantiateProvider(provider);
};
ReflectiveInjector_.prototype._getMaxNumberOfObjects = function() {
return this.objs.length;
};
ReflectiveInjector_.prototype._instantiateProvider = function(provider) {
if (provider.multiProvider) {
var res = new Array(provider.resolvedFactories.length);
for (var i = 0; i < provider.resolvedFactories.length; ++i) {
res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
}
return res;
} else {
return this._instantiate(provider, provider.resolvedFactories[0]);
}
};
ReflectiveInjector_.prototype._instantiate = function(provider, ResolvedReflectiveFactory$$1) {
var _this = this;
var factory = ResolvedReflectiveFactory$$1.factory;
var deps;
try {
deps = ResolvedReflectiveFactory$$1.dependencies.map(function(dep) {
return _this._getByReflectiveDependency(dep);
});
} catch (e) {
if (e.addKey) {
e.addKey(this, provider.key);
}
throw e;
}
var obj;
try {
obj = factory.apply(void 0, deps);
} catch (e) {
throw instantiationError(this, e, e.stack, provider.key);
}
return obj;
};
ReflectiveInjector_.prototype._getByReflectiveDependency = function(dep) {
return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
};
ReflectiveInjector_.prototype._getByKey = function(key, visibility, notFoundValue) {
if (key === INJECTOR_KEY) {
return this;
}
if (visibility instanceof Self) {
return this._getByKeySelf(key, notFoundValue);
} else {
return this._getByKeyDefault(key, notFoundValue, visibility);
}
};
ReflectiveInjector_.prototype._getObjByKeyId = function(keyId) {
for (var i = 0; i < this.keyIds.length; i++) {
if (this.keyIds[i] === keyId) {
if (this.objs[i] === UNDEFINED) {
this.objs[i] = this._new(this._providers[i]);
}
return this.objs[i];
}
}
return UNDEFINED;
};
ReflectiveInjector_.prototype._throwOrNull = function(key, notFoundValue) {
if (notFoundValue !== THROW_IF_NOT_FOUND) {
return notFoundValue;
} else {
throw noProviderError(this, key);
}
};
ReflectiveInjector_.prototype._getByKeySelf = function(key, notFoundValue) {
var obj = this._getObjByKeyId(key.id);
return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);
};
ReflectiveInjector_.prototype._getByKeyDefault = function(key, notFoundValue, visibility) {
var inj;
if (visibility instanceof SkipSelf) {
inj = this._parent;
} else {
inj = this;
}
while (inj instanceof ReflectiveInjector_) {
var inj_ = inj;
var obj = inj_._getObjByKeyId(key.id);
if (obj !== UNDEFINED) return obj;
inj = inj_._parent;
}
if (inj !== null) {
return inj.get(key.token, notFoundValue);
} else {
return this._throwOrNull(key, notFoundValue);
}
};
Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
get: function() {
var providers = _mapProviders(this, function(b) {
return ' "' + b.key.displayName + '" ';
}).join(", ");
return "ReflectiveInjector(providers: [" + providers + "])";
},
enumerable: true,
configurable: true
});
ReflectiveInjector_.prototype.toString = function() {
return this.displayName;
};
return ReflectiveInjector_;
}();
var INJECTOR_KEY = ReflectiveKey.get(Injector);
function _mapProviders(injector, fn) {
var res = new Array(injector._providers.length);
for (var i = 0; i < injector._providers.length; ++i) {
res[i] = fn(injector.getProviderAtIndex(i));
}
return res;
}
function isPromise(obj) {
return !!obj && typeof obj.then === "function";
}
function isObservable(obj) {
return !!obj && typeof obj.subscribe === "function";
}
var APP_INITIALIZER = new InjectionToken("Application Initializer");
var ApplicationInitStatus = function() {
function ApplicationInitStatus(appInits) {
var _this = this;
this._done = false;
var asyncInitPromises = [];
if (appInits) {
for (var i = 0; i < appInits.length; i++) {
var initResult = appInits[i]();
if (isPromise(initResult)) {
asyncInitPromises.push(initResult);
}
}
}
this._donePromise = Promise.all(asyncInitPromises).then(function() {
_this._done = true;
});
if (asyncInitPromises.length === 0) {
this._done = true;
}
}
Object.defineProperty(ApplicationInitStatus.prototype, "done", {
get: function() {
return this._done;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
get: function() {
return this._donePromise;
},
enumerable: true,
configurable: true
});
return ApplicationInitStatus;
}();
ApplicationInitStatus.decorators = [ {
type: Injectable
} ];
ApplicationInitStatus.ctorParameters = function() {
return [ {
type: Array,
decorators: [ {
type: Inject,
args: [ APP_INITIALIZER ]
}, {
type: Optional
} ]
} ];
};
var APP_ID = new InjectionToken("AppId");
function _appIdRandomProviderFactory() {
return "" + _randomChar() + _randomChar() + _randomChar();
}
var APP_ID_RANDOM_PROVIDER = {
provide: APP_ID,
useFactory: _appIdRandomProviderFactory,
deps: []
};
function _randomChar() {
return String.fromCharCode(97 + Math.floor(Math.random() * 25));
}
var PLATFORM_INITIALIZER = new InjectionToken("Platform Initializer");
var PLATFORM_ID = new InjectionToken("Platform ID");
var APP_BOOTSTRAP_LISTENER = new InjectionToken("appBootstrapListener");
var PACKAGE_ROOT_URL = new InjectionToken("Application Packages Root URL");
var Console = function() {
function Console() {}
Console.prototype.log = function(message) {
console.log(message);
};
Console.prototype.warn = function(message) {
console.warn(message);
};
return Console;
}();
Console.decorators = [ {
type: Injectable
} ];
Console.ctorParameters = function() {
return [];
};
var ModuleWithComponentFactories = function() {
function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
this.ngModuleFactory = ngModuleFactory;
this.componentFactories = componentFactories;
}
return ModuleWithComponentFactories;
}();
function _throwError() {
throw new Error("Runtime compiler is not loaded");
}
var Compiler = function() {
function Compiler() {}
Compiler.prototype.compileModuleSync = function(moduleType) {
throw _throwError();
};
Compiler.prototype.compileModuleAsync = function(moduleType) {
throw _throwError();
};
Compiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
throw _throwError();
};
Compiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
throw _throwError();
};
Compiler.prototype.getNgContentSelectors = function(component) {
throw _throwError();
};
Compiler.prototype.clearCache = function() {};
Compiler.prototype.clearCacheFor = function(type) {};
return Compiler;
}();
Compiler.decorators = [ {
type: Injectable
} ];
Compiler.ctorParameters = function() {
return [];
};
var COMPILER_OPTIONS = new InjectionToken("compilerOptions");
var CompilerFactory = function() {
function CompilerFactory() {}
CompilerFactory.prototype.createCompiler = function(options) {};
return CompilerFactory;
}();
var ComponentRef = function() {
function ComponentRef() {}
ComponentRef.prototype.location = function() {};
ComponentRef.prototype.injector = function() {};
ComponentRef.prototype.instance = function() {};
ComponentRef.prototype.hostView = function() {};
ComponentRef.prototype.changeDetectorRef = function() {};
ComponentRef.prototype.componentType = function() {};
ComponentRef.prototype.destroy = function() {};
ComponentRef.prototype.onDestroy = function(callback) {};
return ComponentRef;
}();
var ComponentFactory = function() {
function ComponentFactory() {}
ComponentFactory.prototype.selector = function() {};
ComponentFactory.prototype.componentType = function() {};
ComponentFactory.prototype.ngContentSelectors = function() {};
ComponentFactory.prototype.inputs = function() {};
ComponentFactory.prototype.outputs = function() {};
ComponentFactory.prototype.create = function(injector, projectableNodes, rootSelectorOrNode, ngModule) {};
return ComponentFactory;
}();
function noComponentFactoryError(component) {
var error = Error("No component factory found for " + stringify(component) + ". Did you add it to @NgModule.entryComponents?");
error[ERROR_COMPONENT] = component;
return error;
}
var ERROR_COMPONENT = "ngComponent";
var _NullComponentFactoryResolver = function() {
function _NullComponentFactoryResolver() {}
_NullComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {
throw noComponentFactoryError(component);
};
return _NullComponentFactoryResolver;
}();
var ComponentFactoryResolver = function() {
function ComponentFactoryResolver() {}
ComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {};
return ComponentFactoryResolver;
}();
ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
var CodegenComponentFactoryResolver = function() {
function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {
this._parent = _parent;
this._ngModule = _ngModule;
this._factories = new Map();
for (var i = 0; i < factories.length; i++) {
var factory = factories[i];
this._factories.set(factory.componentType, factory);
}
}
CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {
var factory = this._factories.get(component) || this._parent.resolveComponentFactory(component);
return new ComponentFactoryBoundToModule(factory, this._ngModule);
};
return CodegenComponentFactoryResolver;
}();
var ComponentFactoryBoundToModule = function(_super) {
__extends(ComponentFactoryBoundToModule, _super);
function ComponentFactoryBoundToModule(factory, ngModule) {
var _this = _super.call(this) || this;
_this.factory = factory;
_this.ngModule = ngModule;
return _this;
}
Object.defineProperty(ComponentFactoryBoundToModule.prototype, "selector", {
get: function() {
return this.factory.selector;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentFactoryBoundToModule.prototype, "componentType", {
get: function() {
return this.factory.componentType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentFactoryBoundToModule.prototype, "ngContentSelectors", {
get: function() {
return this.factory.ngContentSelectors;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentFactoryBoundToModule.prototype, "inputs", {
get: function() {
return this.factory.inputs;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentFactoryBoundToModule.prototype, "outputs", {
get: function() {
return this.factory.outputs;
},
enumerable: true,
configurable: true
});
ComponentFactoryBoundToModule.prototype.create = function(injector, projectableNodes, rootSelectorOrNode, ngModule) {
return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);
};
return ComponentFactoryBoundToModule;
}(ComponentFactory);
var NgModuleRef = function() {
function NgModuleRef() {}
NgModuleRef.prototype.injector = function() {};
NgModuleRef.prototype.componentFactoryResolver = function() {};
NgModuleRef.prototype.instance = function() {};
NgModuleRef.prototype.destroy = function() {};
NgModuleRef.prototype.onDestroy = function(callback) {};
return NgModuleRef;
}();
var NgModuleFactory = function() {
function NgModuleFactory(_injectorClass, _moduleType) {
this._injectorClass = _injectorClass;
this._moduleType = _moduleType;
}
Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
get: function() {
return this._moduleType;
},
enumerable: true,
configurable: true
});
NgModuleFactory.prototype.create = function(parentInjector) {
var instance = new this._injectorClass(parentInjector || Injector.NULL);
instance.create();
return instance;
};
return NgModuleFactory;
}();
var _UNDEFINED = new Object();
var NgModuleInjector = function() {
function NgModuleInjector(parent, factories, bootstrapFactories) {
var _this = this;
this.parent = parent;
this._destroyListeners = [];
this._destroyed = false;
this.bootstrapFactories = bootstrapFactories.map(function(f) {
return new ComponentFactoryBoundToModule(f, _this);
});
this._cmpFactoryResolver = new CodegenComponentFactoryResolver(factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL), this);
}
NgModuleInjector.prototype.create = function() {
this.instance = this.createInternal();
};
NgModuleInjector.prototype.createInternal = function() {};
NgModuleInjector.prototype.get = function(token, notFoundValue) {
if (notFoundValue === void 0) {
notFoundValue = THROW_IF_NOT_FOUND;
}
if (token === Injector || token === NgModuleRef) {
return this;
}
if (token === ComponentFactoryResolver) {
return this._cmpFactoryResolver;
}
var result = this.getInternal(token, _UNDEFINED);
return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
};
NgModuleInjector.prototype.getInternal = function(token, notFoundValue) {};
Object.defineProperty(NgModuleInjector.prototype, "injector", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
get: function() {
return this._cmpFactoryResolver;
},
enumerable: true,
configurable: true
});
NgModuleInjector.prototype.destroy = function() {
if (this._destroyed) {
throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
}
this._destroyed = true;
this.destroyInternal();
this._destroyListeners.forEach(function(listener) {
return listener();
});
};
NgModuleInjector.prototype.onDestroy = function(callback) {
this._destroyListeners.push(callback);
};
NgModuleInjector.prototype.destroyInternal = function() {};
return NgModuleInjector;
}();
var trace;
var events;
function detectWTF() {
var wtf = _global["wtf"];
if (wtf) {
trace = wtf["trace"];
if (trace) {
events = trace["events"];
return true;
}
}
return false;
}
function createScope$1(signature, flags) {
if (flags === void 0) {
flags = null;
}
return events.createScope(signature, flags);
}
function leave(scope, returnValue) {
trace.leaveScope(scope, returnValue);
return returnValue;
}
function startTimeRange(rangeType, action) {
return trace.beginTimeRange(rangeType, action);
}
function endTimeRange(range) {
trace.endTimeRange(range);
}
var wtfEnabled = detectWTF();
function noopScope(arg0, arg1) {
return null;
}
var wtfCreateScope = wtfEnabled ? createScope$1 : function(signature, flags) {
return noopScope;
};
var wtfLeave = wtfEnabled ? leave : function(s, r) {
return r;
};
var wtfStartTimeRange = wtfEnabled ? startTimeRange : function(rangeType, action) {
return null;
};
var wtfEndTimeRange = wtfEnabled ? endTimeRange : function(r) {
return null;
};
var EventEmitter = function(_super) {
__extends(EventEmitter, _super);
function EventEmitter(isAsync) {
if (isAsync === void 0) {
isAsync = false;
}
var _this = _super.call(this) || this;
_this.__isAsync = isAsync;
return _this;
}
EventEmitter.prototype.emit = function(value) {
_super.prototype.next.call(this, value);
};
EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
var schedulerFn;
var errorFn = function(err) {
return null;
};
var completeFn = function() {
return null;
};
if (generatorOrNext && typeof generatorOrNext === "object") {
schedulerFn = this.__isAsync ? function(value) {
setTimeout(function() {
return generatorOrNext.next(value);
});
} : function(value) {
generatorOrNext.next(value);
};
if (generatorOrNext.error) {
errorFn = this.__isAsync ? function(err) {
setTimeout(function() {
return generatorOrNext.error(err);
});
} : function(err) {
generatorOrNext.error(err);
};
}
if (generatorOrNext.complete) {
completeFn = this.__isAsync ? function() {
setTimeout(function() {
return generatorOrNext.complete();
});
} : function() {
generatorOrNext.complete();
};
}
} else {
schedulerFn = this.__isAsync ? function(value) {
setTimeout(function() {
return generatorOrNext(value);
});
} : function(value) {
generatorOrNext(value);
};
if (error) {
errorFn = this.__isAsync ? function(err) {
setTimeout(function() {
return error(err);
});
} : function(err) {
error(err);
};
}
if (complete) {
completeFn = this.__isAsync ? function() {
setTimeout(function() {
return complete();
});
} : function() {
complete();
};
}
}
return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
};
return EventEmitter;
}(rxjs_Subject.Subject);
var NgZone = function() {
function NgZone(_a) {
var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
this._hasPendingMicrotasks = false;
this._hasPendingMacrotasks = false;
this._isStable = true;
this._nesting = 0;
this._onUnstable = new EventEmitter(false);
this._onMicrotaskEmpty = new EventEmitter(false);
this._onStable = new EventEmitter(false);
this._onErrorEvents = new EventEmitter(false);
if (typeof Zone == "undefined") {
throw new Error("Angular requires Zone.js prolyfill.");
}
Zone.assertZonePatched();
this.outer = this.inner = Zone.current;
if (Zone["wtfZoneSpec"]) {
this.inner = this.inner.fork(Zone["wtfZoneSpec"]);
}
if (enableLongStackTrace && Zone["longStackTraceZoneSpec"]) {
this.inner = this.inner.fork(Zone["longStackTraceZoneSpec"]);
}
this.forkInnerZoneWithAngularBehavior();
}
NgZone.isInAngularZone = function() {
return Zone.current.get("isAngularZone") === true;
};
NgZone.assertInAngularZone = function() {
if (!NgZone.isInAngularZone()) {
throw new Error("Expected to be in Angular Zone, but it is not!");
}
};
NgZone.assertNotInAngularZone = function() {
if (NgZone.isInAngularZone()) {
throw new Error("Expected to not be in Angular Zone, but it is!");
}
};
NgZone.prototype.run = function(fn) {
return this.inner.run(fn);
};
NgZone.prototype.runGuarded = function(fn) {
return this.inner.runGuarded(fn);
};
NgZone.prototype.runOutsideAngular = function(fn) {
return this.outer.run(fn);
};
Object.defineProperty(NgZone.prototype, "onUnstable", {
get: function() {
return this._onUnstable;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
get: function() {
return this._onMicrotaskEmpty;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "onStable", {
get: function() {
return this._onStable;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "onError", {
get: function() {
return this._onErrorEvents;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "isStable", {
get: function() {
return this._isStable;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
get: function() {
return this._hasPendingMicrotasks;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
get: function() {
return this._hasPendingMacrotasks;
},
enumerable: true,
configurable: true
});
NgZone.prototype.checkStable = function() {
var _this = this;
if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
try {
this._nesting++;
this._onMicrotaskEmpty.emit(null);
} finally {
this._nesting--;
if (!this._hasPendingMicrotasks) {
try {
this.runOutsideAngular(function() {
return _this._onStable.emit(null);
});
} finally {
this._isStable = true;
}
}
}
}
};
NgZone.prototype.forkInnerZoneWithAngularBehavior = function() {
var _this = this;
this.inner = this.inner.fork({
name: "angular",
properties: {
isAngularZone: true
},
onInvokeTask: function(delegate, current, target, task, applyThis, applyArgs) {
try {
_this.onEnter();
return delegate.invokeTask(target, task, applyThis, applyArgs);
} finally {
_this.onLeave();
}
},
onInvoke: function(delegate, current, target, callback, applyThis, applyArgs, source) {
try {
_this.onEnter();
return delegate.invoke(target, callback, applyThis, applyArgs, source);
} finally {
_this.onLeave();
}
},
onHasTask: function(delegate, current, target, hasTaskState) {
delegate.hasTask(target, hasTaskState);
if (current === target) {
if (hasTaskState.change == "microTask") {
_this.setHasMicrotask(hasTaskState.microTask);
} else if (hasTaskState.change == "macroTask") {
_this.setHasMacrotask(hasTaskState.macroTask);
}
}
},
onHandleError: function(delegate, current, target, error) {
delegate.handleError(target, error);
_this.triggerError(error);
return false;
}
});
};
NgZone.prototype.onEnter = function() {
this._nesting++;
if (this._isStable) {
this._isStable = false;
this._onUnstable.emit(null);
}
};
NgZone.prototype.onLeave = function() {
this._nesting--;
this.checkStable();
};
NgZone.prototype.setHasMicrotask = function(hasMicrotasks) {
this._hasPendingMicrotasks = hasMicrotasks;
this.checkStable();
};
NgZone.prototype.setHasMacrotask = function(hasMacrotasks) {
this._hasPendingMacrotasks = hasMacrotasks;
};
NgZone.prototype.triggerError = function(error) {
this._onErrorEvents.emit(error);
};
return NgZone;
}();
var Testability = function() {
function Testability(_ngZone) {
this._ngZone = _ngZone;
this._pendingCount = 0;
this._isZoneStable = true;
this._didWork = false;
this._callbacks = [];
this._watchAngularEvents();
}
Testability.prototype._watchAngularEvents = function() {
var _this = this;
this._ngZone.onUnstable.subscribe({
next: function() {
_this._didWork = true;
_this._isZoneStable = false;
}
});
this._ngZone.runOutsideAngular(function() {
_this._ngZone.onStable.subscribe({
next: function() {
NgZone.assertNotInAngularZone();
scheduleMicroTask(function() {
_this._isZoneStable = true;
_this._runCallbacksIfReady();
});
}
});
});
};
Testability.prototype.increasePendingRequestCount = function() {
this._pendingCount += 1;
this._didWork = true;
return this._pendingCount;
};
Testability.prototype.decreasePendingRequestCount = function() {
this._pendingCount -= 1;
if (this._pendingCount < 0) {
throw new Error("pending async requests below zero");
}
this._runCallbacksIfReady();
return this._pendingCount;
};
Testability.prototype.isStable = function() {
return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
};
Testability.prototype._runCallbacksIfReady = function() {
var _this = this;
if (this.isStable()) {
scheduleMicroTask(function() {
while (_this._callbacks.length !== 0) {
_this._callbacks.pop()(_this._didWork);
}
_this._didWork = false;
});
} else {
this._didWork = true;
}
};
Testability.prototype.whenStable = function(callback) {
this._callbacks.push(callback);
this._runCallbacksIfReady();
};
Testability.prototype.getPendingRequestCount = function() {
return this._pendingCount;
};
Testability.prototype.findBindings = function(using, provider, exactMatch) {
return [];
};
Testability.prototype.findProviders = function(using, provider, exactMatch) {
return [];
};
return Testability;
}();
Testability.decorators = [ {
type: Injectable
} ];
Testability.ctorParameters = function() {
return [ {
type: NgZone
} ];
};
var TestabilityRegistry = function() {
function TestabilityRegistry() {
this._applications = new Map();
_testabilityGetter.addToWindow(this);
}
TestabilityRegistry.prototype.registerApplication = function(token, testability) {
this._applications.set(token, testability);
};
TestabilityRegistry.prototype.getTestability = function(elem) {
return this._applications.get(elem) || null;
};
TestabilityRegistry.prototype.getAllTestabilities = function() {
return Array.from(this._applications.values());
};
TestabilityRegistry.prototype.getAllRootElements = function() {
return Array.from(this._applications.keys());
};
TestabilityRegistry.prototype.findTestabilityInTree = function(elem, findInAncestors) {
if (findInAncestors === void 0) {
findInAncestors = true;
}
return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
};
return TestabilityRegistry;
}();
TestabilityRegistry.decorators = [ {
type: Injectable
} ];
TestabilityRegistry.ctorParameters = function() {
return [];
};
var _NoopGetTestability = function() {
function _NoopGetTestability() {}
_NoopGetTestability.prototype.addToWindow = function(registry) {};
_NoopGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
return null;
};
return _NoopGetTestability;
}();
function setTestabilityGetter(getter) {
_testabilityGetter = getter;
}
var _testabilityGetter = new _NoopGetTestability();
var _devMode = true;
var _runModeLocked = false;
var _platform;
var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken("AllowMultipleToken");
function enableProdMode() {
if (_runModeLocked) {
throw new Error("Cannot enable prod mode after platform setup.");
}
_devMode = false;
}
function isDevMode() {
_runModeLocked = true;
return _devMode;
}
var NgProbeToken = function() {
function NgProbeToken(name, token) {
this.name = name;
this.token = token;
}
return NgProbeToken;
}();
function createPlatform(injector) {
if (_platform && !_platform.destroyed && !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
throw new Error("There can be only one platform. Destroy the previous one to create a new one.");
}
_platform = injector.get(PlatformRef);
var inits = injector.get(PLATFORM_INITIALIZER, null);
if (inits) inits.forEach(function(init) {
return init();
});
return _platform;
}
function createPlatformFactory(parentPlatformFactory, name, providers) {
if (providers === void 0) {
providers = [];
}
var marker = new InjectionToken("Platform: " + name);
return function(extraProviders) {
if (extraProviders === void 0) {
extraProviders = [];
}
var platform = getPlatform();
if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
if (parentPlatformFactory) {
parentPlatformFactory(providers.concat(extraProviders).concat({
provide: marker,
useValue: true
}));
} else {
createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({
provide: marker,
useValue: true
})));
}
}
return assertPlatform(marker);
};
}
function assertPlatform(requiredToken) {
var platform = getPlatform();
if (!platform) {
throw new Error("No platform exists!");
}
if (!platform.injector.get(requiredToken, null)) {
throw new Error("A platform with a different configuration has been created. Please destroy it first.");
}
return platform;
}
function destroyPlatform() {
if (_platform && !_platform.destroyed) {
_platform.destroy();
}
}
function getPlatform() {
return _platform && !_platform.destroyed ? _platform : null;
}
var PlatformRef = function() {
function PlatformRef() {}
PlatformRef.prototype.bootstrapModuleFactory = function(moduleFactory) {};
PlatformRef.prototype.bootstrapModule = function(moduleType, compilerOptions) {};
PlatformRef.prototype.onDestroy = function(callback) {};
PlatformRef.prototype.injector = function() {};
PlatformRef.prototype.destroy = function() {};
PlatformRef.prototype.destroyed = function() {};
return PlatformRef;
}();
function _callAndReportToErrorHandler(errorHandler, callback) {
try {
var result = callback();
if (isPromise(result)) {
return result.catch(function(e) {
errorHandler.handleError(e);
throw e;
});
}
return result;
} catch (e) {
errorHandler.handleError(e);
throw e;
}
}
var PlatformRef_ = function(_super) {
__extends(PlatformRef_, _super);
function PlatformRef_(_injector) {
var _this = _super.call(this) || this;
_this._injector = _injector;
_this._modules = [];
_this._destroyListeners = [];
_this._destroyed = false;
return _this;
}
PlatformRef_.prototype.onDestroy = function(callback) {
this._destroyListeners.push(callback);
};
Object.defineProperty(PlatformRef_.prototype, "injector", {
get: function() {
return this._injector;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PlatformRef_.prototype, "destroyed", {
get: function() {
return this._destroyed;
},
enumerable: true,
configurable: true
});
PlatformRef_.prototype.destroy = function() {
if (this._destroyed) {
throw new Error("The platform has already been destroyed!");
}
this._modules.slice().forEach(function(module) {
return module.destroy();
});
this._destroyListeners.forEach(function(listener) {
return listener();
});
this._destroyed = true;
};
PlatformRef_.prototype.bootstrapModuleFactory = function(moduleFactory) {
return this._bootstrapModuleFactoryWithZone(moduleFactory);
};
PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function(moduleFactory, ngZone) {
var _this = this;
if (!ngZone) ngZone = new NgZone({
enableLongStackTrace: isDevMode()
});
return ngZone.run(function() {
var ngZoneInjector = ReflectiveInjector.resolveAndCreate([ {
provide: NgZone,
useValue: ngZone
} ], _this.injector);
var moduleRef = moduleFactory.create(ngZoneInjector);
var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
if (!exceptionHandler) {
throw new Error("No ErrorHandler. Is platform module (BrowserModule) included?");
}
moduleRef.onDestroy(function() {
return remove(_this._modules, moduleRef);
});
ngZone.onError.subscribe({
next: function(error) {
exceptionHandler.handleError(error);
}
});
return _callAndReportToErrorHandler(exceptionHandler, function() {
var initStatus = moduleRef.injector.get(ApplicationInitStatus);
return initStatus.donePromise.then(function() {
_this._moduleDoBootstrap(moduleRef);
return moduleRef;
});
});
});
};
PlatformRef_.prototype.bootstrapModule = function(moduleType, compilerOptions) {
if (compilerOptions === void 0) {
compilerOptions = [];
}
return this._bootstrapModuleWithZone(moduleType, compilerOptions);
};
PlatformRef_.prototype._bootstrapModuleWithZone = function(moduleType, compilerOptions, ngZone) {
var _this = this;
if (compilerOptions === void 0) {
compilerOptions = [];
}
var compilerFactory = this.injector.get(CompilerFactory);
var compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [ compilerOptions ]);
return compiler.compileModuleAsync(moduleType).then(function(moduleFactory) {
return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone);
});
};
PlatformRef_.prototype._moduleDoBootstrap = function(moduleRef) {
var appRef = moduleRef.injector.get(ApplicationRef);
if (moduleRef.bootstrapFactories.length > 0) {
moduleRef.bootstrapFactories.forEach(function(f) {
return appRef.bootstrap(f);
});
} else if (moduleRef.instance.ngDoBootstrap) {
moduleRef.instance.ngDoBootstrap(appRef);
} else {
throw new Error("The module " + stringify(moduleRef.instance.constructor) + ' was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. ' + "Please define one of these.");
}
this._modules.push(moduleRef);
};
return PlatformRef_;
}(PlatformRef);
PlatformRef_.decorators = [ {
type: Injectable
} ];
PlatformRef_.ctorParameters = function() {
return [ {
type: Injector
} ];
};
var ApplicationRef = function() {
function ApplicationRef() {}
ApplicationRef.prototype.bootstrap = function(componentFactory) {};
ApplicationRef.prototype.tick = function() {};
ApplicationRef.prototype.componentTypes = function() {};
ApplicationRef.prototype.components = function() {};
ApplicationRef.prototype.attachView = function(view) {};
ApplicationRef.prototype.detachView = function(view) {};
ApplicationRef.prototype.viewCount = function() {};
ApplicationRef.prototype.isStable = function() {};
return ApplicationRef;
}();
var ApplicationRef_ = function(_super) {
__extends(ApplicationRef_, _super);
function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {
var _this = _super.call(this) || this;
_this._zone = _zone;
_this._console = _console;
_this._injector = _injector;
_this._exceptionHandler = _exceptionHandler;
_this._componentFactoryResolver = _componentFactoryResolver;
_this._initStatus = _initStatus;
_this._bootstrapListeners = [];
_this._rootComponents = [];
_this._rootComponentTypes = [];
_this._views = [];
_this._runningTick = false;
_this._enforceNoNewChanges = false;
_this._stable = true;
_this._enforceNoNewChanges = isDevMode();
_this._zone.onMicrotaskEmpty.subscribe({
next: function() {
_this._zone.run(function() {
_this.tick();
});
}
});
var isCurrentlyStable = new rxjs_Observable.Observable(function(observer) {
_this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks && !_this._zone.hasPendingMicrotasks;
_this._zone.runOutsideAngular(function() {
observer.next(_this._stable);
observer.complete();
});
});
var isStable = new rxjs_Observable.Observable(function(observer) {
var stableSub = _this._zone.onStable.subscribe(function() {
NgZone.assertNotInAngularZone();
scheduleMicroTask(function() {
if (!_this._stable && !_this._zone.hasPendingMacrotasks && !_this._zone.hasPendingMicrotasks) {
_this._stable = true;
observer.next(true);
}
});
});
var unstableSub = _this._zone.onUnstable.subscribe(function() {
NgZone.assertInAngularZone();
if (_this._stable) {
_this._stable = false;
_this._zone.runOutsideAngular(function() {
observer.next(false);
});
}
});
return function() {
stableSub.unsubscribe();
unstableSub.unsubscribe();
};
});
_this._isStable = rxjs_observable_merge.merge(isCurrentlyStable, rxjs_operator_share.share.call(isStable));
return _this;
}
ApplicationRef_.prototype.attachView = function(viewRef) {
var view = viewRef;
this._views.push(view);
view.attachToAppRef(this);
};
ApplicationRef_.prototype.detachView = function(viewRef) {
var view = viewRef;
remove(this._views, view);
view.detachFromAppRef();
};
ApplicationRef_.prototype.bootstrap = function(componentOrFactory) {
var _this = this;
if (!this._initStatus.done) {
throw new Error("Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.");
}
var componentFactory;
if (componentOrFactory instanceof ComponentFactory) {
componentFactory = componentOrFactory;
} else {
componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
}
this._rootComponentTypes.push(componentFactory.componentType);
var ngModule = componentFactory instanceof ComponentFactoryBoundToModule ? null : this._injector.get(NgModuleRef);
var compRef = componentFactory.create(Injector.NULL, [], componentFactory.selector, ngModule);
compRef.onDestroy(function() {
_this._unloadComponent(compRef);
});
var testability = compRef.injector.get(Testability, null);
if (testability) {
compRef.injector.get(TestabilityRegistry).registerApplication(compRef.location.nativeElement, testability);
}
this._loadComponent(compRef);
if (isDevMode()) {
this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode.");
}
return compRef;
};
ApplicationRef_.prototype._loadComponent = function(componentRef) {
this.attachView(componentRef.hostView);
this.tick();
this._rootComponents.push(componentRef);
var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
listeners.forEach(function(listener) {
return listener(componentRef);
});
};
ApplicationRef_.prototype._unloadComponent = function(componentRef) {
this.detachView(componentRef.hostView);
remove(this._rootComponents, componentRef);
};
ApplicationRef_.prototype.tick = function() {
if (this._runningTick) {
throw new Error("ApplicationRef.tick is called recursively");
}
var scope = ApplicationRef_._tickScope();
try {
this._runningTick = true;
this._views.forEach(function(view) {
return view.detectChanges();
});
if (this._enforceNoNewChanges) {
this._views.forEach(function(view) {
return view.checkNoChanges();
});
}
} finally {
this._runningTick = false;
wtfLeave(scope);
}
};
ApplicationRef_.prototype.ngOnDestroy = function() {
this._views.slice().forEach(function(view) {
return view.destroy();
});
};
Object.defineProperty(ApplicationRef_.prototype, "viewCount", {
get: function() {
return this._views.length;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
get: function() {
return this._rootComponentTypes;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ApplicationRef_.prototype, "components", {
get: function() {
return this._rootComponents;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ApplicationRef_.prototype, "isStable", {
get: function() {
return this._isStable;
},
enumerable: true,
configurable: true
});
return ApplicationRef_;
}(ApplicationRef);
ApplicationRef_._tickScope = wtfCreateScope("ApplicationRef#tick()");
ApplicationRef_.decorators = [ {
type: Injectable
} ];
ApplicationRef_.ctorParameters = function() {
return [ {
type: NgZone
}, {
type: Console
}, {
type: Injector
}, {
type: ErrorHandler
}, {
type: ComponentFactoryResolver
}, {
type: ApplicationInitStatus
} ];
};
function remove(list, el) {
var index = list.indexOf(el);
if (index > -1) {
list.splice(index, 1);
}
}
var RenderComponentType = function() {
function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
this.id = id;
this.templateUrl = templateUrl;
this.slotCount = slotCount;
this.encapsulation = encapsulation;
this.styles = styles;
this.animations = animations;
}
return RenderComponentType;
}();
var RenderDebugInfo = function() {
function RenderDebugInfo() {}
RenderDebugInfo.prototype.injector = function() {};
RenderDebugInfo.prototype.component = function() {};
RenderDebugInfo.prototype.providerTokens = function() {};
RenderDebugInfo.prototype.references = function() {};
RenderDebugInfo.prototype.context = function() {};
RenderDebugInfo.prototype.source = function() {};
return RenderDebugInfo;
}();
var Renderer = function() {
function Renderer() {}
Renderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {};
Renderer.prototype.createElement = function(parentElement, name, debugInfo) {};
Renderer.prototype.createViewRoot = function(hostElement) {};
Renderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {};
Renderer.prototype.createText = function(parentElement, value, debugInfo) {};
Renderer.prototype.projectNodes = function(parentElement, nodes) {};
Renderer.prototype.attachViewAfter = function(node, viewRootNodes) {};
Renderer.prototype.detachView = function(viewRootNodes) {};
Renderer.prototype.destroyView = function(hostElement, viewAllNodes) {};
Renderer.prototype.listen = function(renderElement, name, callback) {};
Renderer.prototype.listenGlobal = function(target, name, callback) {};
Renderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {};
Renderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {};
Renderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {};
Renderer.prototype.setElementClass = function(renderElement, className, isAdd) {};
Renderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {};
Renderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {};
Renderer.prototype.setText = function(renderNode, text) {};
Renderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {};
return Renderer;
}();
var Renderer2Interceptor = new InjectionToken("Renderer2Interceptor");
var RootRenderer = function() {
function RootRenderer() {}
RootRenderer.prototype.renderComponent = function(componentType) {};
return RootRenderer;
}();
var RendererFactory2 = function() {
function RendererFactory2() {}
RendererFactory2.prototype.createRenderer = function(hostElement, type) {};
return RendererFactory2;
}();
var RendererStyleFlags2 = {};
RendererStyleFlags2.Important = 1;
RendererStyleFlags2.DashCase = 2;
RendererStyleFlags2[RendererStyleFlags2.Important] = "Important";
RendererStyleFlags2[RendererStyleFlags2.DashCase] = "DashCase";
var Renderer2 = function() {
function Renderer2() {}
Renderer2.prototype.data = function() {};
Renderer2.prototype.destroy = function() {};
Renderer2.prototype.createElement = function(name, namespace) {};
Renderer2.prototype.createComment = function(value) {};
Renderer2.prototype.createText = function(value) {};
Renderer2.prototype.appendChild = function(parent, newChild) {};
Renderer2.prototype.insertBefore = function(parent, newChild, refChild) {};
Renderer2.prototype.removeChild = function(parent, oldChild) {};
Renderer2.prototype.selectRootElement = function(selectorOrNode) {};
Renderer2.prototype.parentNode = function(node) {};
Renderer2.prototype.nextSibling = function(node) {};
Renderer2.prototype.setAttribute = function(el, name, value, namespace) {};
Renderer2.prototype.removeAttribute = function(el, name, namespace) {};
Renderer2.prototype.addClass = function(el, name) {};
Renderer2.prototype.removeClass = function(el, name) {};
Renderer2.prototype.setStyle = function(el, style, value, flags) {};
Renderer2.prototype.removeStyle = function(el, style, flags) {};
Renderer2.prototype.setProperty = function(el, name, value) {};
Renderer2.prototype.setValue = function(node, value) {};
Renderer2.prototype.listen = function(target, eventName, callback) {};
return Renderer2;
}();
var ElementRef = function() {
function ElementRef(nativeElement) {
this.nativeElement = nativeElement;
}
return ElementRef;
}();
var NgModuleFactoryLoader = function() {
function NgModuleFactoryLoader() {}
NgModuleFactoryLoader.prototype.load = function(path) {};
return NgModuleFactoryLoader;
}();
var moduleFactories = new Map();
function registerModuleFactory(id, factory) {
var existing = moduleFactories.get(id);
if (existing) {
throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
}
moduleFactories.set(id, factory);
}
function getModuleFactory(id) {
var factory = moduleFactories.get(id);
if (!factory) throw new Error("No module with ID " + id + " loaded");
return factory;
}
var QueryList = function() {
function QueryList() {
this._dirty = true;
this._results = [];
this._emitter = new EventEmitter();
}
Object.defineProperty(QueryList.prototype, "changes", {
get: function() {
return this._emitter;
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryList.prototype, "length", {
get: function() {
return this._results.length;
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryList.prototype, "first", {
get: function() {
return this._results[0];
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryList.prototype, "last", {
get: function() {
return this._results[this.length - 1];
},
enumerable: true,
configurable: true
});
QueryList.prototype.map = function(fn) {
return this._results.map(fn);
};
QueryList.prototype.filter = function(fn) {
return this._results.filter(fn);
};
QueryList.prototype.find = function(fn) {
return this._results.find(fn);
};
QueryList.prototype.reduce = function(fn, init) {
return this._results.reduce(fn, init);
};
QueryList.prototype.forEach = function(fn) {
this._results.forEach(fn);
};
QueryList.prototype.some = function(fn) {
return this._results.some(fn);
};
QueryList.prototype.toArray = function() {
return this._results.slice();
};
QueryList.prototype[getSymbolIterator()] = function() {
return this._results[getSymbolIterator()]();
};
QueryList.prototype.toString = function() {
return this._results.toString();
};
QueryList.prototype.reset = function(res) {
this._results = flatten(res);
this._dirty = false;
};
QueryList.prototype.notifyOnChanges = function() {
this._emitter.emit(this);
};
QueryList.prototype.setDirty = function() {
this._dirty = true;
};
Object.defineProperty(QueryList.prototype, "dirty", {
get: function() {
return this._dirty;
},
enumerable: true,
configurable: true
});
return QueryList;
}();
function flatten(list) {
return list.reduce(function(flat, item) {
var flatItem = Array.isArray(item) ? flatten(item) : item;
return flat.concat(flatItem);
}, []);
}
var _SEPARATOR = "#";
var FACTORY_CLASS_SUFFIX = "NgFactory";
var SystemJsNgModuleLoaderConfig = function() {
function SystemJsNgModuleLoaderConfig() {}
return SystemJsNgModuleLoaderConfig;
}();
var DEFAULT_CONFIG = {
factoryPathPrefix: "",
factoryPathSuffix: ".ngfactory"
};
var SystemJsNgModuleLoader = function() {
function SystemJsNgModuleLoader(_compiler, config) {
this._compiler = _compiler;
this._config = config || DEFAULT_CONFIG;
}
SystemJsNgModuleLoader.prototype.load = function(path) {
var offlineMode = this._compiler instanceof Compiler;
return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
};
SystemJsNgModuleLoader.prototype.loadAndCompile = function(path) {
var _this = this;
var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
if (exportName === undefined) {
exportName = "default";
}
return System.import(module).then(function(module) {
return module[exportName];
}).then(function(type) {
return checkNotEmpty(type, module, exportName);
}).then(function(type) {
return _this._compiler.compileModuleAsync(type);
});
};
SystemJsNgModuleLoader.prototype.loadFactory = function(path) {
var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
var factoryClassSuffix = FACTORY_CLASS_SUFFIX;
if (exportName === undefined) {
exportName = "default";
factoryClassSuffix = "";
}
return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix).then(function(module) {
return module[exportName + factoryClassSuffix];
}).then(function(factory) {
return checkNotEmpty(factory, module, exportName);
});
};
return SystemJsNgModuleLoader;
}();
SystemJsNgModuleLoader.decorators = [ {
type: Injectable
} ];
SystemJsNgModuleLoader.ctorParameters = function() {
return [ {
type: Compiler
}, {
type: SystemJsNgModuleLoaderConfig,
decorators: [ {
type: Optional
} ]
} ];
};
function checkNotEmpty(value, modulePath, exportName) {
if (!value) {
throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
}
return value;
}
var TemplateRef = function() {
function TemplateRef() {}
TemplateRef.prototype.elementRef = function() {};
TemplateRef.prototype.createEmbeddedView = function(context) {};
return TemplateRef;
}();
var ViewContainerRef = function() {
function ViewContainerRef() {}
ViewContainerRef.prototype.element = function() {};
ViewContainerRef.prototype.injector = function() {};
ViewContainerRef.prototype.parentInjector = function() {};
ViewContainerRef.prototype.clear = function() {};
ViewContainerRef.prototype.get = function(index) {};
ViewContainerRef.prototype.length = function() {};
ViewContainerRef.prototype.createEmbeddedView = function(templateRef, context, index) {};
ViewContainerRef.prototype.createComponent = function(componentFactory, index, injector, projectableNodes, ngModule) {};
ViewContainerRef.prototype.insert = function(viewRef, index) {};
ViewContainerRef.prototype.move = function(viewRef, currentIndex) {};
ViewContainerRef.prototype.indexOf = function(viewRef) {};
ViewContainerRef.prototype.remove = function(index) {};
ViewContainerRef.prototype.detach = function(index) {};
return ViewContainerRef;
}();
var ChangeDetectorRef = function() {
function ChangeDetectorRef() {}
ChangeDetectorRef.prototype.markForCheck = function() {};
ChangeDetectorRef.prototype.detach = function() {};
ChangeDetectorRef.prototype.detectChanges = function() {};
ChangeDetectorRef.prototype.checkNoChanges = function() {};
ChangeDetectorRef.prototype.reattach = function() {};
return ChangeDetectorRef;
}();
var ViewRef = function(_super) {
__extends(ViewRef, _super);
function ViewRef() {
return _super !== null && _super.apply(this, arguments) || this;
}
ViewRef.prototype.destroy = function() {};
ViewRef.prototype.destroyed = function() {};
ViewRef.prototype.onDestroy = function(callback) {};
return ViewRef;
}(ChangeDetectorRef);
var EmbeddedViewRef = function(_super) {
__extends(EmbeddedViewRef, _super);
function EmbeddedViewRef() {
return _super !== null && _super.apply(this, arguments) || this;
}
EmbeddedViewRef.prototype.context = function() {};
EmbeddedViewRef.prototype.rootNodes = function() {};
return EmbeddedViewRef;
}(ViewRef);
var EventListener = function() {
function EventListener(name, callback) {
this.name = name;
this.callback = callback;
}
return EventListener;
}();
var DebugNode = function() {
function DebugNode(nativeNode, parent, _debugContext) {
this._debugContext = _debugContext;
this.nativeNode = nativeNode;
if (parent && parent instanceof DebugElement) {
parent.addChild(this);
} else {
this.parent = null;
}
this.listeners = [];
}
Object.defineProperty(DebugNode.prototype, "injector", {
get: function() {
return this._debugContext.injector;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugNode.prototype, "componentInstance", {
get: function() {
return this._debugContext.component;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugNode.prototype, "context", {
get: function() {
return this._debugContext.context;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugNode.prototype, "references", {
get: function() {
return this._debugContext.references;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugNode.prototype, "providerTokens", {
get: function() {
return this._debugContext.providerTokens;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugNode.prototype, "source", {
get: function() {
return "Deprecated since v4";
},
enumerable: true,
configurable: true
});
return DebugNode;
}();
var DebugElement = function(_super) {
__extends(DebugElement, _super);
function DebugElement(nativeNode, parent, _debugContext) {
var _this = _super.call(this, nativeNode, parent, _debugContext) || this;
_this.properties = {};
_this.attributes = {};
_this.classes = {};
_this.styles = {};
_this.childNodes = [];
_this.nativeElement = nativeNode;
return _this;
}
DebugElement.prototype.addChild = function(child) {
if (child) {
this.childNodes.push(child);
child.parent = this;
}
};
DebugElement.prototype.removeChild = function(child) {
var childIndex = this.childNodes.indexOf(child);
if (childIndex !== -1) {
child.parent = null;
this.childNodes.splice(childIndex, 1);
}
};
DebugElement.prototype.insertChildrenAfter = function(child, newChildren) {
var _this = this;
var siblingIndex = this.childNodes.indexOf(child);
if (siblingIndex !== -1) {
(_a = this.childNodes).splice.apply(_a, [ siblingIndex + 1, 0 ].concat(newChildren));
newChildren.forEach(function(c) {
if (c.parent) {
c.parent.removeChild(c);
}
c.parent = _this;
});
}
var _a;
};
DebugElement.prototype.insertBefore = function(refChild, newChild) {
var refIndex = this.childNodes.indexOf(refChild);
if (refIndex === -1) {
this.addChild(newChild);
} else {
if (newChild.parent) {
newChild.parent.removeChild(newChild);
}
newChild.parent = this;
this.childNodes.splice(refIndex, 0, newChild);
}
};
DebugElement.prototype.query = function(predicate) {
var results = this.queryAll(predicate);
return results[0] || null;
};
DebugElement.prototype.queryAll = function(predicate) {
var matches = [];
_queryElementChildren(this, predicate, matches);
return matches;
};
DebugElement.prototype.queryAllNodes = function(predicate) {
var matches = [];
_queryNodeChildren(this, predicate, matches);
return matches;
};
Object.defineProperty(DebugElement.prototype, "children", {
get: function() {
return this.childNodes.filter(function(node) {
return node instanceof DebugElement;
});
},
enumerable: true,
configurable: true
});
DebugElement.prototype.triggerEventHandler = function(eventName, eventObj) {
this.listeners.forEach(function(listener) {
if (listener.name == eventName) {
listener.callback(eventObj);
}
});
};
return DebugElement;
}(DebugNode);
function asNativeElements(debugEls) {
return debugEls.map(function(el) {
return el.nativeElement;
});
}
function _queryElementChildren(element, predicate, matches) {
element.childNodes.forEach(function(node) {
if (node instanceof DebugElement) {
if (predicate(node)) {
matches.push(node);
}
_queryElementChildren(node, predicate, matches);
}
});
}
function _queryNodeChildren(parentNode, predicate, matches) {
if (parentNode instanceof DebugElement) {
parentNode.childNodes.forEach(function(node) {
if (predicate(node)) {
matches.push(node);
}
if (node instanceof DebugElement) {
_queryNodeChildren(node, predicate, matches);
}
});
}
}
var _nativeNodeToDebugNode = new Map();
function getDebugNode(nativeNode) {
return _nativeNodeToDebugNode.get(nativeNode) || null;
}
function indexDebugNode(node) {
_nativeNodeToDebugNode.set(node.nativeNode, node);
}
function removeDebugNodeFromIndex(node) {
_nativeNodeToDebugNode.delete(node.nativeNode);
}
function devModeEqual(a, b) {
var isListLikeIterableA = isListLikeIterable(a);
var isListLikeIterableB = isListLikeIterable(b);
if (isListLikeIterableA && isListLikeIterableB) {
return areIterablesEqual(a, b, devModeEqual);
} else {
var isAObject = a && (typeof a === "object" || typeof a === "function");
var isBObject = b && (typeof b === "object" || typeof b === "function");
if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
return true;
} else {
return looseIdentical(a, b);
}
}
}
var WrappedValue = function() {
function WrappedValue(wrapped) {
this.wrapped = wrapped;
}
WrappedValue.wrap = function(value) {
return new WrappedValue(value);
};
return WrappedValue;
}();
var ValueUnwrapper = function() {
function ValueUnwrapper() {
this.hasWrappedValue = false;
}
ValueUnwrapper.prototype.unwrap = function(value) {
if (value instanceof WrappedValue) {
this.hasWrappedValue = true;
return value.wrapped;
}
return value;
};
ValueUnwrapper.prototype.reset = function() {
this.hasWrappedValue = false;
};
return ValueUnwrapper;
}();
var SimpleChange = function() {
function SimpleChange(previousValue, currentValue, firstChange) {
this.previousValue = previousValue;
this.currentValue = currentValue;
this.firstChange = firstChange;
}
SimpleChange.prototype.isFirstChange = function() {
return this.firstChange;
};
return SimpleChange;
}();
function isListLikeIterable(obj) {
if (!isJsObject(obj)) return false;
return Array.isArray(obj) || !(obj instanceof Map) && getSymbolIterator() in obj;
}
function areIterablesEqual(a, b, comparator) {
var iterator1 = a[getSymbolIterator()]();
var iterator2 = b[getSymbolIterator()]();
while (true) {
var item1 = iterator1.next();
var item2 = iterator2.next();
if (item1.done && item2.done) return true;
if (item1.done || item2.done) return false;
if (!comparator(item1.value, item2.value)) return false;
}
}
function iterateListLike(obj, fn) {
if (Array.isArray(obj)) {
for (var i = 0; i < obj.length; i++) {
fn(obj[i]);
}
} else {
var iterator = obj[getSymbolIterator()]();
var item = void 0;
while (!(item = iterator.next()).done) {
fn(item.value);
}
}
}
function isJsObject(o) {
return o !== null && (typeof o === "function" || typeof o === "object");
}
var DefaultIterableDifferFactory = function() {
function DefaultIterableDifferFactory() {}
DefaultIterableDifferFactory.prototype.supports = function(obj) {
return isListLikeIterable(obj);
};
DefaultIterableDifferFactory.prototype.create = function(cdRefOrTrackBy, trackByFn) {
return new DefaultIterableDiffer(trackByFn || cdRefOrTrackBy);
};
return DefaultIterableDifferFactory;
}();
var trackByIdentity = function(index, item) {
return item;
};
var DefaultIterableDiffer = function() {
function DefaultIterableDiffer(trackByFn) {
this._length = 0;
this._collection = null;
this._linkedRecords = null;
this._unlinkedRecords = null;
this._previousItHead = null;
this._itHead = null;
this._itTail = null;
this._additionsHead = null;
this._additionsTail = null;
this._movesHead = null;
this._movesTail = null;
this._removalsHead = null;
this._removalsTail = null;
this._identityChangesHead = null;
this._identityChangesTail = null;
this._trackByFn = trackByFn || trackByIdentity;
}
Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
get: function() {
return this._collection;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
get: function() {
return this._length;
},
enumerable: true,
configurable: true
});
DefaultIterableDiffer.prototype.forEachItem = function(fn) {
var record;
for (record = this._itHead; record !== null; record = record._next) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachOperation = function(fn) {
var nextIt = this._itHead;
var nextRemove = this._removalsHead;
var addRemoveOffset = 0;
var moveOffsets = null;
while (nextIt || nextRemove) {
var record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
var currentIndex = record.currentIndex;
if (record === nextRemove) {
addRemoveOffset--;
nextRemove = nextRemove._nextRemoved;
} else {
nextIt = nextIt._next;
if (record.previousIndex == null) {
addRemoveOffset++;
} else {
if (!moveOffsets) moveOffsets = [];
var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
var localCurrentIndex = currentIndex - addRemoveOffset;
if (localMovePreviousIndex != localCurrentIndex) {
for (var i = 0; i < localMovePreviousIndex; i++) {
var offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;
var index = offset + i;
if (localCurrentIndex <= index && index < localMovePreviousIndex) {
moveOffsets[i] = offset + 1;
}
}
var previousIndex = record.previousIndex;
moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
}
}
}
if (adjPreviousIndex !== currentIndex) {
fn(record, adjPreviousIndex, currentIndex);
}
}
};
DefaultIterableDiffer.prototype.forEachPreviousItem = function(fn) {
var record;
for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachAddedItem = function(fn) {
var record;
for (record = this._additionsHead; record !== null; record = record._nextAdded) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachMovedItem = function(fn) {
var record;
for (record = this._movesHead; record !== null; record = record._nextMoved) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachRemovedItem = function(fn) {
var record;
for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachIdentityChange = function(fn) {
var record;
for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
fn(record);
}
};
DefaultIterableDiffer.prototype.diff = function(collection) {
if (collection == null) collection = [];
if (!isListLikeIterable(collection)) {
throw new Error("Error trying to diff '" + stringify(collection) + "'. Only arrays and iterables are allowed");
}
if (this.check(collection)) {
return this;
} else {
return null;
}
};
DefaultIterableDiffer.prototype.onDestroy = function() {};
DefaultIterableDiffer.prototype.check = function(collection) {
var _this = this;
this._reset();
var record = this._itHead;
var mayBeDirty = false;
var index;
var item;
var itemTrackBy;
if (Array.isArray(collection)) {
this._length = collection.length;
for (var index_1 = 0; index_1 < this._length; index_1++) {
item = collection[index_1];
itemTrackBy = this._trackByFn(index_1, item);
if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
record = this._mismatch(record, item, itemTrackBy, index_1);
mayBeDirty = true;
} else {
if (mayBeDirty) {
record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
}
if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);
}
record = record._next;
}
} else {
index = 0;
iterateListLike(collection, function(item) {
itemTrackBy = _this._trackByFn(index, item);
if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
record = _this._mismatch(record, item, itemTrackBy, index);
mayBeDirty = true;
} else {
if (mayBeDirty) {
record = _this._verifyReinsertion(record, item, itemTrackBy, index);
}
if (!looseIdentical(record.item, item)) _this._addIdentityChange(record, item);
}
record = record._next;
index++;
});
this._length = index;
}
this._truncate(record);
this._collection = collection;
return this.isDirty;
};
Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
get: function() {
return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
},
enumerable: true,
configurable: true
});
DefaultIterableDiffer.prototype._reset = function() {
if (this.isDirty) {
var record = void 0;
var nextRecord = void 0;
for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
record._nextPrevious = record._next;
}
for (record = this._additionsHead; record !== null; record = record._nextAdded) {
record.previousIndex = record.currentIndex;
}
this._additionsHead = this._additionsTail = null;
for (record = this._movesHead; record !== null; record = nextRecord) {
record.previousIndex = record.currentIndex;
nextRecord = record._nextMoved;
}
this._movesHead = this._movesTail = null;
this._removalsHead = this._removalsTail = null;
this._identityChangesHead = this._identityChangesTail = null;
}
};
DefaultIterableDiffer.prototype._mismatch = function(record, item, itemTrackBy, index) {
var previousRecord;
if (record === null) {
previousRecord = this._itTail;
} else {
previousRecord = record._prev;
this._remove(record);
}
record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
if (record !== null) {
if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);
this._moveAfter(record, previousRecord, index);
} else {
record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
if (record !== null) {
if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);
this._reinsertAfter(record, previousRecord, index);
} else {
record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
}
}
return record;
};
DefaultIterableDiffer.prototype._verifyReinsertion = function(record, item, itemTrackBy, index) {
var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
if (reinsertRecord !== null) {
record = this._reinsertAfter(reinsertRecord, record._prev, index);
} else if (record.currentIndex != index) {
record.currentIndex = index;
this._addToMoves(record, index);
}
return record;
};
DefaultIterableDiffer.prototype._truncate = function(record) {
while (record !== null) {
var nextRecord = record._next;
this._addToRemovals(this._unlink(record));
record = nextRecord;
}
if (this._unlinkedRecords !== null) {
this._unlinkedRecords.clear();
}
if (this._additionsTail !== null) {
this._additionsTail._nextAdded = null;
}
if (this._movesTail !== null) {
this._movesTail._nextMoved = null;
}
if (this._itTail !== null) {
this._itTail._next = null;
}
if (this._removalsTail !== null) {
this._removalsTail._nextRemoved = null;
}
if (this._identityChangesTail !== null) {
this._identityChangesTail._nextIdentityChange = null;
}
};
DefaultIterableDiffer.prototype._reinsertAfter = function(record, prevRecord, index) {
if (this._unlinkedRecords !== null) {
this._unlinkedRecords.remove(record);
}
var prev = record._prevRemoved;
var next = record._nextRemoved;
if (prev === null) {
this._removalsHead = next;
} else {
prev._nextRemoved = next;
}
if (next === null) {
this._removalsTail = prev;
} else {
next._prevRemoved = prev;
}
this._insertAfter(record, prevRecord, index);
this._addToMoves(record, index);
return record;
};
DefaultIterableDiffer.prototype._moveAfter = function(record, prevRecord, index) {
this._unlink(record);
this._insertAfter(record, prevRecord, index);
this._addToMoves(record, index);
return record;
};
DefaultIterableDiffer.prototype._addAfter = function(record, prevRecord, index) {
this._insertAfter(record, prevRecord, index);
if (this._additionsTail === null) {
this._additionsTail = this._additionsHead = record;
} else {
this._additionsTail = this._additionsTail._nextAdded = record;
}
return record;
};
DefaultIterableDiffer.prototype._insertAfter = function(record, prevRecord, index) {
var next = prevRecord === null ? this._itHead : prevRecord._next;
record._next = next;
record._prev = prevRecord;
if (next === null) {
this._itTail = record;
} else {
next._prev = record;
}
if (prevRecord === null) {
this._itHead = record;
} else {
prevRecord._next = record;
}
if (this._linkedRecords === null) {
this._linkedRecords = new _DuplicateMap();
}
this._linkedRecords.put(record);
record.currentIndex = index;
return record;
};
DefaultIterableDiffer.prototype._remove = function(record) {
return this._addToRemovals(this._unlink(record));
};
DefaultIterableDiffer.prototype._unlink = function(record) {
if (this._linkedRecords !== null) {
this._linkedRecords.remove(record);
}
var prev = record._prev;
var next = record._next;
if (prev === null) {
this._itHead = next;
} else {
prev._next = next;
}
if (next === null) {
this._itTail = prev;
} else {
next._prev = prev;
}
return record;
};
DefaultIterableDiffer.prototype._addToMoves = function(record, toIndex) {
if (record.previousIndex === toIndex) {
return record;
}
if (this._movesTail === null) {
this._movesTail = this._movesHead = record;
} else {
this._movesTail = this._movesTail._nextMoved = record;
}
return record;
};
DefaultIterableDiffer.prototype._addToRemovals = function(record) {
if (this._unlinkedRecords === null) {
this._unlinkedRecords = new _DuplicateMap();
}
this._unlinkedRecords.put(record);
record.currentIndex = null;
record._nextRemoved = null;
if (this._removalsTail === null) {
this._removalsTail = this._removalsHead = record;
record._prevRemoved = null;
} else {
record._prevRemoved = this._removalsTail;
this._removalsTail = this._removalsTail._nextRemoved = record;
}
return record;
};
DefaultIterableDiffer.prototype._addIdentityChange = function(record, item) {
record.item = item;
if (this._identityChangesTail === null) {
this._identityChangesTail = this._identityChangesHead = record;
} else {
this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
}
return record;
};
DefaultIterableDiffer.prototype.toString = function() {
var list = [];
this.forEachItem(function(record) {
return list.push(record);
});
var previous = [];
this.forEachPreviousItem(function(record) {
return previous.push(record);
});
var additions = [];
this.forEachAddedItem(function(record) {
return additions.push(record);
});
var moves = [];
this.forEachMovedItem(function(record) {
return moves.push(record);
});
var removals = [];
this.forEachRemovedItem(function(record) {
return removals.push(record);
});
var identityChanges = [];
this.forEachIdentityChange(function(record) {
return identityChanges.push(record);
});
return "collection: " + list.join(", ") + "\n" + "previous: " + previous.join(", ") + "\n" + "additions: " + additions.join(", ") + "\n" + "moves: " + moves.join(", ") + "\n" + "removals: " + removals.join(", ") + "\n" + "identityChanges: " + identityChanges.join(", ") + "\n";
};
return DefaultIterableDiffer;
}();
var IterableChangeRecord_ = function() {
function IterableChangeRecord_(item, trackById) {
this.item = item;
this.trackById = trackById;
this.currentIndex = null;
this.previousIndex = null;
this._nextPrevious = null;
this._prev = null;
this._next = null;
this._prevDup = null;
this._nextDup = null;
this._prevRemoved = null;
this._nextRemoved = null;
this._nextAdded = null;
this._nextMoved = null;
this._nextIdentityChange = null;
}
IterableChangeRecord_.prototype.toString = function() {
return this.previousIndex === this.currentIndex ? stringify(this.item) : stringify(this.item) + "[" + stringify(this.previousIndex) + "->" + stringify(this.currentIndex) + "]";
};
return IterableChangeRecord_;
}();
var _DuplicateItemRecordList = function() {
function _DuplicateItemRecordList() {
this._head = null;
this._tail = null;
}
_DuplicateItemRecordList.prototype.add = function(record) {
if (this._head === null) {
this._head = this._tail = record;
record._nextDup = null;
record._prevDup = null;
} else {
this._tail._nextDup = record;
record._prevDup = this._tail;
record._nextDup = null;
this._tail = record;
}
};
_DuplicateItemRecordList.prototype.get = function(trackById, afterIndex) {
var record;
for (record = this._head; record !== null; record = record._nextDup) {
if ((afterIndex === null || afterIndex < record.currentIndex) && looseIdentical(record.trackById, trackById)) {
return record;
}
}
return null;
};
_DuplicateItemRecordList.prototype.remove = function(record) {
var prev = record._prevDup;
var next = record._nextDup;
if (prev === null) {
this._head = next;
} else {
prev._nextDup = next;
}
if (next === null) {
this._tail = prev;
} else {
next._prevDup = prev;
}
return this._head === null;
};
return _DuplicateItemRecordList;
}();
var _DuplicateMap = function() {
function _DuplicateMap() {
this.map = new Map();
}
_DuplicateMap.prototype.put = function(record) {
var key = record.trackById;
var duplicates = this.map.get(key);
if (!duplicates) {
duplicates = new _DuplicateItemRecordList();
this.map.set(key, duplicates);
}
duplicates.add(record);
};
_DuplicateMap.prototype.get = function(trackById, afterIndex) {
var key = trackById;
var recordList = this.map.get(key);
return recordList ? recordList.get(trackById, afterIndex) : null;
};
_DuplicateMap.prototype.remove = function(record) {
var key = record.trackById;
var recordList = this.map.get(key);
if (recordList.remove(record)) {
this.map.delete(key);
}
return record;
};
Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
get: function() {
return this.map.size === 0;
},
enumerable: true,
configurable: true
});
_DuplicateMap.prototype.clear = function() {
this.map.clear();
};
_DuplicateMap.prototype.toString = function() {
return "_DuplicateMap(" + stringify(this.map) + ")";
};
return _DuplicateMap;
}();
function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
var previousIndex = item.previousIndex;
if (previousIndex === null) return previousIndex;
var moveOffset = 0;
if (moveOffsets && previousIndex < moveOffsets.length) {
moveOffset = moveOffsets[previousIndex];
}
return previousIndex + addRemoveOffset + moveOffset;
}
var DefaultKeyValueDifferFactory = function() {
function DefaultKeyValueDifferFactory() {}
DefaultKeyValueDifferFactory.prototype.supports = function(obj) {
return obj instanceof Map || isJsObject(obj);
};
DefaultKeyValueDifferFactory.prototype.create = function(cd) {
return new DefaultKeyValueDiffer();
};
return DefaultKeyValueDifferFactory;
}();
var DefaultKeyValueDiffer = function() {
function DefaultKeyValueDiffer() {
this._records = new Map();
this._mapHead = null;
this._appendAfter = null;
this._previousMapHead = null;
this._changesHead = null;
this._changesTail = null;
this._additionsHead = null;
this._additionsTail = null;
this._removalsHead = null;
this._removalsTail = null;
}
Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
get: function() {
return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
},
enumerable: true,
configurable: true
});
DefaultKeyValueDiffer.prototype.forEachItem = function(fn) {
var record;
for (record = this._mapHead; record !== null; record = record._next) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.forEachPreviousItem = function(fn) {
var record;
for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.forEachChangedItem = function(fn) {
var record;
for (record = this._changesHead; record !== null; record = record._nextChanged) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.forEachAddedItem = function(fn) {
var record;
for (record = this._additionsHead; record !== null; record = record._nextAdded) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.forEachRemovedItem = function(fn) {
var record;
for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.diff = function(map) {
if (!map) {
map = new Map();
} else if (!(map instanceof Map || isJsObject(map))) {
throw new Error("Error trying to diff '" + stringify(map) + "'. Only maps and objects are allowed");
}
return this.check(map) ? this : null;
};
DefaultKeyValueDiffer.prototype.onDestroy = function() {};
DefaultKeyValueDiffer.prototype.check = function(map) {
var _this = this;
this._reset();
var insertBefore = this._mapHead;
this._appendAfter = null;
this._forEach(map, function(value, key) {
if (insertBefore && insertBefore.key === key) {
_this._maybeAddToChanges(insertBefore, value);
_this._appendAfter = insertBefore;
insertBefore = insertBefore._next;
} else {
var record = _this._getOrCreateRecordForKey(key, value);
insertBefore = _this._insertBeforeOrAppend(insertBefore, record);
}
});
if (insertBefore) {
if (insertBefore._prev) {
insertBefore._prev._next = null;
}
this._removalsHead = insertBefore;
for (var record = insertBefore; record !== null; record = record._nextRemoved) {
if (record === this._mapHead) {
this._mapHead = null;
}
this._records.delete(record.key);
record._nextRemoved = record._next;
record.previousValue = record.currentValue;
record.currentValue = null;
record._prev = null;
record._next = null;
}
}
if (this._changesTail) this._changesTail._nextChanged = null;
if (this._additionsTail) this._additionsTail._nextAdded = null;
return this.isDirty;
};
DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = function(before, record) {
if (before) {
var prev = before._prev;
record._next = before;
record._prev = prev;
before._prev = record;
if (prev) {
prev._next = record;
}
if (before === this._mapHead) {
this._mapHead = record;
}
this._appendAfter = before;
return before;
}
if (this._appendAfter) {
this._appendAfter._next = record;
record._prev = this._appendAfter;
} else {
this._mapHead = record;
}
this._appendAfter = record;
return null;
};
DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = function(key, value) {
if (this._records.has(key)) {
var record_1 = this._records.get(key);
this._maybeAddToChanges(record_1, value);
var prev = record_1._prev;
var next = record_1._next;
if (prev) {
prev._next = next;
}
if (next) {
next._prev = prev;
}
record_1._next = null;
record_1._prev = null;
return record_1;
}
var record = new KeyValueChangeRecord_(key);
this._records.set(key, record);
record.currentValue = value;
this._addToAdditions(record);
return record;
};
DefaultKeyValueDiffer.prototype._reset = function() {
if (this.isDirty) {
var record = void 0;
this._previousMapHead = this._mapHead;
for (record = this._previousMapHead; record !== null; record = record._next) {
record._nextPrevious = record._next;
}
for (record = this._changesHead; record !== null; record = record._nextChanged) {
record.previousValue = record.currentValue;
}
for (record = this._additionsHead; record != null; record = record._nextAdded) {
record.previousValue = record.currentValue;
}
this._changesHead = this._changesTail = null;
this._additionsHead = this._additionsTail = null;
this._removalsHead = null;
}
};
DefaultKeyValueDiffer.prototype._maybeAddToChanges = function(record, newValue) {
if (!looseIdentical(newValue, record.currentValue)) {
record.previousValue = record.currentValue;
record.currentValue = newValue;
this._addToChanges(record);
}
};
DefaultKeyValueDiffer.prototype._addToAdditions = function(record) {
if (this._additionsHead === null) {
this._additionsHead = this._additionsTail = record;
} else {
this._additionsTail._nextAdded = record;
this._additionsTail = record;
}
};
DefaultKeyValueDiffer.prototype._addToChanges = function(record) {
if (this._changesHead === null) {
this._changesHead = this._changesTail = record;
} else {
this._changesTail._nextChanged = record;
this._changesTail = record;
}
};
DefaultKeyValueDiffer.prototype.toString = function() {
var items = [];
var previous = [];
var changes = [];
var additions = [];
var removals = [];
this.forEachItem(function(r) {
return items.push(stringify(r));
});
this.forEachPreviousItem(function(r) {
return previous.push(stringify(r));
});
this.forEachChangedItem(function(r) {
return changes.push(stringify(r));
});
this.forEachAddedItem(function(r) {
return additions.push(stringify(r));
});
this.forEachRemovedItem(function(r) {
return removals.push(stringify(r));
});
return "map: " + items.join(", ") + "\n" + "previous: " + previous.join(", ") + "\n" + "additions: " + additions.join(", ") + "\n" + "changes: " + changes.join(", ") + "\n" + "removals: " + removals.join(", ") + "\n";
};
DefaultKeyValueDiffer.prototype._forEach = function(obj, fn) {
if (obj instanceof Map) {
obj.forEach(fn);
} else {
Object.keys(obj).forEach(function(k) {
return fn(obj[k], k);
});
}
};
return DefaultKeyValueDiffer;
}();
var KeyValueChangeRecord_ = function() {
function KeyValueChangeRecord_(key) {
this.key = key;
this.previousValue = null;
this.currentValue = null;
this._nextPrevious = null;
this._next = null;
this._prev = null;
this._nextAdded = null;
this._nextRemoved = null;
this._nextChanged = null;
}
KeyValueChangeRecord_.prototype.toString = function() {
return looseIdentical(this.previousValue, this.currentValue) ? stringify(this.key) : stringify(this.key) + "[" + stringify(this.previousValue) + "->" + stringify(this.currentValue) + "]";
};
return KeyValueChangeRecord_;
}();
var IterableDiffers = function() {
function IterableDiffers(factories) {
this.factories = factories;
}
IterableDiffers.create = function(factories, parent) {
if (parent != null) {
var copied = parent.factories.slice();
factories = factories.concat(copied);
return new IterableDiffers(factories);
} else {
return new IterableDiffers(factories);
}
};
IterableDiffers.extend = function(factories) {
return {
provide: IterableDiffers,
useFactory: function(parent) {
if (!parent) {
throw new Error("Cannot extend IterableDiffers without a parent injector");
}
return IterableDiffers.create(factories, parent);
},
deps: [ [ IterableDiffers, new SkipSelf(), new Optional() ] ]
};
};
IterableDiffers.prototype.find = function(iterable) {
var factory = this.factories.find(function(f) {
return f.supports(iterable);
});
if (factory != null) {
return factory;
} else {
throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
}
};
return IterableDiffers;
}();
function getTypeNameForDebugging(type) {
return type["name"] || typeof type;
}
var KeyValueDiffers = function() {
function KeyValueDiffers(factories) {
this.factories = factories;
}
KeyValueDiffers.create = function(factories, parent) {
if (parent) {
var copied = parent.factories.slice();
factories = factories.concat(copied);
}
return new KeyValueDiffers(factories);
};
KeyValueDiffers.extend = function(factories) {
return {
provide: KeyValueDiffers,
useFactory: function(parent) {
if (!parent) {
throw new Error("Cannot extend KeyValueDiffers without a parent injector");
}
return KeyValueDiffers.create(factories, parent);
},
deps: [ [ KeyValueDiffers, new SkipSelf(), new Optional() ] ]
};
};
KeyValueDiffers.prototype.find = function(kv) {
var factory = this.factories.find(function(f) {
return f.supports(kv);
});
if (factory) {
return factory;
}
throw new Error("Cannot find a differ supporting object '" + kv + "'");
};
return KeyValueDiffers;
}();
var keyValDiff = [ new DefaultKeyValueDifferFactory() ];
var iterableDiff = [ new DefaultIterableDifferFactory() ];
var defaultIterableDiffers = new IterableDiffers(iterableDiff);
var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
function _reflector() {
return reflector;
}
var _CORE_PLATFORM_PROVIDERS = [ {
provide: PLATFORM_ID,
useValue: "unknown"
}, PlatformRef_, {
provide: PlatformRef,
useExisting: PlatformRef_
}, {
provide: Reflector,
useFactory: _reflector,
deps: []
}, {
provide: ReflectorReader,
useExisting: Reflector
}, TestabilityRegistry, Console ];
var platformCore = createPlatformFactory(null, "core", _CORE_PLATFORM_PROVIDERS);
var LOCALE_ID = new InjectionToken("LocaleId");
var TRANSLATIONS = new InjectionToken("Translations");
var TRANSLATIONS_FORMAT = new InjectionToken("TranslationsFormat");
var MissingTranslationStrategy = {};
MissingTranslationStrategy.Error = 0;
MissingTranslationStrategy.Warning = 1;
MissingTranslationStrategy.Ignore = 2;
MissingTranslationStrategy[MissingTranslationStrategy.Error] = "Error";
MissingTranslationStrategy[MissingTranslationStrategy.Warning] = "Warning";
MissingTranslationStrategy[MissingTranslationStrategy.Ignore] = "Ignore";
var SecurityContext = {};
SecurityContext.NONE = 0;
SecurityContext.HTML = 1;
SecurityContext.STYLE = 2;
SecurityContext.SCRIPT = 3;
SecurityContext.URL = 4;
SecurityContext.RESOURCE_URL = 5;
SecurityContext[SecurityContext.NONE] = "NONE";
SecurityContext[SecurityContext.HTML] = "HTML";
SecurityContext[SecurityContext.STYLE] = "STYLE";
SecurityContext[SecurityContext.SCRIPT] = "SCRIPT";
SecurityContext[SecurityContext.URL] = "URL";
SecurityContext[SecurityContext.RESOURCE_URL] = "RESOURCE_URL";
var Sanitizer = function() {
function Sanitizer() {}
Sanitizer.prototype.sanitize = function(context, value) {};
return Sanitizer;
}();
function asTextData(view, index) {
return view.nodes[index];
}
function asElementData(view, index) {
return view.nodes[index];
}
function asProviderData(view, index) {
return view.nodes[index];
}
function asPureExpressionData(view, index) {
return view.nodes[index];
}
function asQueryList(view, index) {
return view.nodes[index];
}
var DebugContext = function() {
function DebugContext() {}
DebugContext.prototype.view = function() {};
DebugContext.prototype.nodeIndex = function() {};
DebugContext.prototype.injector = function() {};
DebugContext.prototype.component = function() {};
DebugContext.prototype.providerTokens = function() {};
DebugContext.prototype.references = function() {};
DebugContext.prototype.context = function() {};
DebugContext.prototype.componentRenderElement = function() {};
DebugContext.prototype.renderNode = function() {};
DebugContext.prototype.logError = function(console) {
var values = [];
for (var _i = 1; _i < arguments.length; _i++) {
values[_i - 1] = arguments[_i];
}
};
return DebugContext;
}();
var Services = {
setCurrentNode: undefined,
createRootView: undefined,
createEmbeddedView: undefined,
checkAndUpdateView: undefined,
checkNoChangesView: undefined,
destroyView: undefined,
resolveDep: undefined,
createDebugContext: undefined,
handleEvent: undefined,
updateDirectives: undefined,
updateRenderer: undefined,
dirtyParentQueries: undefined
};
function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {
var msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
if (isFirstCheck) {
msg += " It seems like the view has been created after its parent and its children have been dirty checked." + " Has it been created in a change detection hook ?";
}
return viewDebugError(msg, context);
}
function viewWrappedDebugError(err, context) {
if (!(err instanceof Error)) {
err = new Error(err.toString());
}
_addDebugContext(err, context);
return err;
}
function viewDebugError(msg, context) {
var err = new Error(msg);
_addDebugContext(err, context);
return err;
}
function _addDebugContext(err, context) {
err[ERROR_DEBUG_CONTEXT] = context;
err[ERROR_LOGGER] = context.logError.bind(context);
}
function isViewDebugError(err) {
return !!getDebugContext(err);
}
function viewDestroyedError(action) {
return new Error("ViewDestroyedError: Attempt to use a destroyed view: " + action);
}
var NOOP = function() {};
var _tokenKeyCache = new Map();
function tokenKey(token) {
var key = _tokenKeyCache.get(token);
if (!key) {
key = stringify(token) + "_" + _tokenKeyCache.size;
_tokenKeyCache.set(token, key);
}
return key;
}
function unwrapValue(view, nodeIdx, bindingIdx, value) {
if (value instanceof WrappedValue) {
value = value.wrapped;
var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;
var oldValue = view.oldValues[globalBindingIdx];
if (oldValue instanceof WrappedValue) {
oldValue = oldValue.wrapped;
}
view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);
}
return value;
}
var UNDEFINED_RENDERER_TYPE_ID = "$$undefined";
var EMPTY_RENDERER_TYPE_ID = "$$empty";
function createRendererType2(values) {
return {
id: UNDEFINED_RENDERER_TYPE_ID,
styles: values.styles,
encapsulation: values.encapsulation,
data: values.data
};
}
var _renderCompCount = 0;
function resolveRendererType2(type) {
if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {
var isFilled = type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None || type.styles.length || Object.keys(type.data).length;
if (isFilled) {
type.id = "c" + _renderCompCount++;
} else {
type.id = EMPTY_RENDERER_TYPE_ID;
}
}
if (type && type.id === EMPTY_RENDERER_TYPE_ID) {
type = null;
}
return type || null;
}
function checkBinding(view, def, bindingIdx, value) {
var oldValues = view.oldValues;
if (view.state & 1 || !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {
return true;
}
return false;
}
function checkAndUpdateBinding(view, def, bindingIdx, value) {
if (checkBinding(view, def, bindingIdx, value)) {
view.oldValues[def.bindingIndex + bindingIdx] = value;
return true;
}
return false;
}
function checkBindingNoChanges(view, def, bindingIdx, value) {
var oldValue = view.oldValues[def.bindingIndex + bindingIdx];
if (view.state & 1 || !devModeEqual(oldValue, value)) {
throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.index), oldValue, value, (view.state & 1) !== 0);
}
}
function markParentViewsForCheck(view) {
var currView = view;
while (currView) {
if (currView.def.flags & 2) {
currView.state |= 2;
}
currView = currView.viewContainerParent || currView.parent;
}
}
function dispatchEvent(view, nodeIndex, eventName, event) {
var nodeDef = view.def.nodes[nodeIndex];
var startView = nodeDef.flags & 16777216 ? asElementData(view, nodeIndex).componentView : view;
markParentViewsForCheck(startView);
return Services.handleEvent(view, nodeIndex, eventName, event);
}
function declaredViewContainer(view) {
if (view.parent) {
var parentView = view.parent;
return asElementData(parentView, view.parentNodeDef.index);
}
return null;
}
function viewParentEl(view) {
var parentView = view.parent;
if (parentView) {
return view.parentNodeDef.parent;
} else {
return null;
}
}
function renderNode(view, def) {
switch (def.flags & 100673535) {
case 1:
return asElementData(view, def.index).renderElement;

case 2:
return asTextData(view, def.index).renderText;
}
}
function elementEventFullName(target, name) {
return target ? target + ":" + name : name;
}
function isComponentView(view) {
return !!view.parent && !!(view.parentNodeDef.flags & 16384);
}
function isEmbeddedView(view) {
return !!view.parent && !(view.parentNodeDef.flags & 16384);
}
function filterQueryId(queryId) {
return 1 << queryId % 32;
}
function splitMatchedQueriesDsl(matchedQueriesDsl) {
var matchedQueries = {};
var matchedQueryIds = 0;
var references = {};
if (matchedQueriesDsl) {
matchedQueriesDsl.forEach(function(_a) {
var queryId = _a[0], valueType = _a[1];
if (typeof queryId === "number") {
matchedQueries[queryId] = valueType;
matchedQueryIds |= filterQueryId(queryId);
} else {
references[queryId] = valueType;
}
});
}
return {
matchedQueries: matchedQueries,
references: references,
matchedQueryIds: matchedQueryIds
};
}
function getParentRenderElement(view, renderHost, def) {
var renderParent = def.renderParent;
if (renderParent) {
if ((renderParent.flags & 1) === 0 || (renderParent.flags & 16777216) === 0 || renderParent.element.componentRendererType && renderParent.element.componentRendererType.encapsulation === ViewEncapsulation.Native) {
return asElementData(view, def.renderParent.index).renderElement;
}
} else {
return renderHost;
}
}
var VIEW_DEFINITION_CACHE = new WeakMap();
function resolveViewDefinition(factory) {
var value = VIEW_DEFINITION_CACHE.get(factory);
if (!value) {
value = factory(function() {
return NOOP;
});
value.factory = factory;
VIEW_DEFINITION_CACHE.set(factory, value);
}
return value;
}
function rootRenderNodes(view) {
var renderNodes = [];
visitRootRenderNodes(view, 0, undefined, undefined, renderNodes);
return renderNodes;
}
function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
if (action === 3) {
parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode));
}
visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
}
function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
for (var i = startIndex; i <= endIndex; i++) {
var nodeDef = view.def.nodes[i];
if (nodeDef.flags & (1 | 2 | 4)) {
visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);
}
i += nodeDef.childCount;
}
}
function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
var compView = view;
while (compView && !isComponentView(compView)) {
compView = compView.parent;
}
var hostView = compView.parent;
var hostElDef = viewParentEl(compView);
var startIndex = hostElDef.index + 1;
var endIndex = hostElDef.index + hostElDef.childCount;
for (var i = startIndex; i <= endIndex; i++) {
var nodeDef = hostView.def.nodes[i];
if (nodeDef.ngContentIndex === ngContentIndex) {
visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target);
}
i += nodeDef.childCount;
}
if (!hostView.parent) {
var projectedNodes = view.root.projectableNodes[ngContentIndex];
if (projectedNodes) {
for (var i = 0; i < projectedNodes.length; i++) {
execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);
}
}
}
}
function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
if (nodeDef.flags & 4) {
visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);
} else {
var rn = renderNode(view, nodeDef);
if (action === 3 && nodeDef.flags & 16777216 && nodeDef.bindingFlags & 48) {
if (nodeDef.bindingFlags & 16) {
execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
}
if (nodeDef.bindingFlags & 32) {
var compView = asElementData(view, nodeDef.index).componentView;
execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);
}
} else {
execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
}
if (nodeDef.flags & 8388608) {
var embeddedViews = asElementData(view, nodeDef.index).viewContainer._embeddedViews;
for (var k = 0; k < embeddedViews.length; k++) {
visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);
}
}
if (nodeDef.flags & 1 && !nodeDef.element.name) {
visitSiblingRenderNodes(view, action, nodeDef.index + 1, nodeDef.index + nodeDef.childCount, parentNode, nextSibling, target);
}
}
}
function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
var renderer = view.renderer;
switch (action) {
case 1:
renderer.appendChild(parentNode, renderNode);
break;

case 2:
renderer.insertBefore(parentNode, renderNode, nextSibling);
break;

case 3:
renderer.removeChild(parentNode, renderNode);
break;

case 0:
target.push(renderNode);
break;
}
}
var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
function splitNamespace(name) {
if (name[0] === ":") {
var match = name.match(NS_PREFIX_RE);
return [ match[1], match[2] ];
}
return [ "", name ];
}
function calcBindingFlags(bindings) {
var flags = 0;
for (var i = 0; i < bindings.length; i++) {
flags |= bindings[i].flags;
}
return flags;
}
function interpolate(valueCount, constAndInterp) {
var result = "";
for (var i = 0; i < valueCount * 2; i = i + 2) {
result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
}
return result + constAndInterp[valueCount * 2];
}
function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
switch (valueCount) {
case 1:
return c0 + _toStringWithNull(a1) + c1;

case 2:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;

case 3:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;

case 4:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;

case 5:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;

case 6:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;

case 7:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;

case 8:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;

case 9:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;

default:
throw new Error("Does not support more than 9 expressions");
}
}
function _toStringWithNull(v) {
return v != null ? v.toString() : "";
}
var EMPTY_ARRAY = [];
var EMPTY_MAP = {};
function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
flags |= 1;
var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
var template = templateFactory ? resolveViewDefinition(templateFactory) : null;
return {
index: -1,
parent: null,
renderParent: null,
bindingIndex: -1,
outputIndex: -1,
flags: flags,
childFlags: 0,
directChildFlags: 0,
childMatchedQueries: 0,
matchedQueries: matchedQueries,
matchedQueryIds: matchedQueryIds,
references: references,
ngContentIndex: ngContentIndex,
childCount: childCount,
bindings: [],
bindingFlags: 0,
outputs: [],
element: {
ns: null,
name: null,
attrs: null,
template: template,
componentProvider: null,
componentView: null,
componentRendererType: null,
publicProviders: null,
allProviders: null,
handleEvent: handleEvent || NOOP
},
provider: null,
text: null,
query: null,
ngContent: null
};
}
function elementDef(flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {
if (fixedAttrs === void 0) {
fixedAttrs = [];
}
if (!handleEvent) {
handleEvent = NOOP;
}
var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
var ns = null;
var name = null;
if (namespaceAndName) {
_b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];
}
bindings = bindings || [];
var bindingDefs = new Array(bindings.length);
for (var i = 0; i < bindings.length; i++) {
var _c = bindings[i], bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];
var _d = splitNamespace(namespaceAndName_1), ns_1 = _d[0], name_1 = _d[1];
var securityContext = undefined;
var suffix = undefined;
switch (bindingFlags & 15) {
case 4:
suffix = suffixOrSecurityContext;
break;

case 1:
case 8:
securityContext = suffixOrSecurityContext;
break;
}
bindingDefs[i] = {
flags: bindingFlags,
ns: ns_1,
name: name_1,
nonMinifiedName: name_1,
securityContext: securityContext,
suffix: suffix
};
}
outputs = outputs || [];
var outputDefs = new Array(outputs.length);
for (var i = 0; i < outputs.length; i++) {
var _e = outputs[i], target = _e[0], eventName = _e[1];
outputDefs[i] = {
type: 0,
target: target,
eventName: eventName,
propName: null
};
}
fixedAttrs = fixedAttrs || [];
var attrs = fixedAttrs.map(function(_a) {
var namespaceAndName = _a[0], value = _a[1];
var _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];
return [ ns, name, value ];
});
componentRendererType = resolveRendererType2(componentRendererType);
if (componentView) {
flags |= 16777216;
}
flags |= 1;
return {
index: -1,
parent: null,
renderParent: null,
bindingIndex: -1,
outputIndex: -1,
flags: flags,
childFlags: 0,
directChildFlags: 0,
childMatchedQueries: 0,
matchedQueries: matchedQueries,
matchedQueryIds: matchedQueryIds,
references: references,
ngContentIndex: ngContentIndex,
childCount: childCount,
bindings: bindingDefs,
bindingFlags: calcBindingFlags(bindingDefs),
outputs: outputDefs,
element: {
ns: ns,
name: name,
attrs: attrs,
template: null,
componentProvider: null,
componentView: componentView || null,
componentRendererType: componentRendererType,
publicProviders: null,
allProviders: null,
handleEvent: handleEvent || NOOP
},
provider: null,
text: null,
query: null,
ngContent: null
};
var _b;
}
function createElement(view, renderHost, def) {
var elDef = def.element;
var rootSelectorOrNode = view.root.selectorOrNode;
var renderer = view.renderer;
var el;
if (view.parent || !rootSelectorOrNode) {
if (elDef.name) {
el = renderer.createElement(elDef.name, elDef.ns);
} else {
el = renderer.createComment("");
}
var parentEl = getParentRenderElement(view, renderHost, def);
if (parentEl) {
renderer.appendChild(parentEl, el);
}
} else {
el = renderer.selectRootElement(rootSelectorOrNode);
}
if (elDef.attrs) {
for (var i = 0; i < elDef.attrs.length; i++) {
var _a = elDef.attrs[i], ns = _a[0], name = _a[1], value = _a[2];
renderer.setAttribute(el, name, value, ns);
}
}
return el;
}
function listenToElementOutputs(view, compView, def, el) {
for (var i = 0; i < def.outputs.length; i++) {
var output = def.outputs[i];
var handleEventClosure = renderEventHandlerClosure(view, def.index, elementEventFullName(output.target, output.eventName));
var listenTarget = output.target;
var listenerView = view;
if (output.target === "component") {
listenTarget = null;
listenerView = compView;
}
var disposable = listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);
view.disposables[def.outputIndex + i] = disposable;
}
}
function renderEventHandlerClosure(view, index, eventName) {
return function(event) {
return dispatchEvent(view, index, eventName, event);
};
}
function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
var bindLen = def.bindings.length;
var changed = false;
if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0)) changed = true;
if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1)) changed = true;
if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2)) changed = true;
if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3)) changed = true;
if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4)) changed = true;
if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5)) changed = true;
if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6)) changed = true;
if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7)) changed = true;
if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8)) changed = true;
if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9)) changed = true;
return changed;
}
function checkAndUpdateElementDynamic(view, def, values) {
var changed = false;
for (var i = 0; i < values.length; i++) {
if (checkAndUpdateElementValue(view, def, i, values[i])) changed = true;
}
return changed;
}
function checkAndUpdateElementValue(view, def, bindingIdx, value) {
if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {
return false;
}
var binding = def.bindings[bindingIdx];
var elData = asElementData(view, def.index);
var renderNode$$1 = elData.renderElement;
var name = binding.name;
switch (binding.flags & 15) {
case 1:
setElementAttribute(view, binding, renderNode$$1, binding.ns, name, value);
break;

case 2:
setElementClass(view, renderNode$$1, name, value);
break;

case 4:
setElementStyle(view, binding, renderNode$$1, name, value);
break;

case 8:
var bindView = def.flags & 16777216 && binding.flags & 32 ? elData.componentView : view;
setElementProperty(bindView, binding, renderNode$$1, name, value);
break;
}
return true;
}
function setElementAttribute(view, binding, renderNode$$1, ns, name, value) {
var securityContext = binding.securityContext;
var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
renderValue = renderValue != null ? renderValue.toString() : null;
var renderer = view.renderer;
if (value != null) {
renderer.setAttribute(renderNode$$1, name, renderValue, ns);
} else {
renderer.removeAttribute(renderNode$$1, name, ns);
}
}
function setElementClass(view, renderNode$$1, name, value) {
var renderer = view.renderer;
if (value) {
renderer.addClass(renderNode$$1, name);
} else {
renderer.removeClass(renderNode$$1, name);
}
}
function setElementStyle(view, binding, renderNode$$1, name, value) {
var renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, value);
if (renderValue != null) {
renderValue = renderValue.toString();
var unit = binding.suffix;
if (unit != null) {
renderValue = renderValue + unit;
}
} else {
renderValue = null;
}
var renderer = view.renderer;
if (renderValue != null) {
renderer.setStyle(renderNode$$1, name, renderValue);
} else {
renderer.removeStyle(renderNode$$1, name);
}
}
function setElementProperty(view, binding, renderNode$$1, name, value) {
var securityContext = binding.securityContext;
var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
view.renderer.setProperty(renderNode$$1, name, renderValue);
}
function ngContentDef(ngContentIndex, index) {
return {
index: -1,
parent: null,
renderParent: null,
bindingIndex: -1,
outputIndex: -1,
flags: 4,
childFlags: 0,
directChildFlags: 0,
childMatchedQueries: 0,
matchedQueries: {},
matchedQueryIds: 0,
references: {},
ngContentIndex: ngContentIndex,
childCount: 0,
bindings: [],
bindingFlags: 0,
outputs: [],
element: null,
provider: null,
text: null,
query: null,
ngContent: {
index: index
}
};
}
function appendNgContent(view, renderHost, def) {
var parentEl = getParentRenderElement(view, renderHost, def);
if (!parentEl) {
return;
}
var ngContentIndex = def.ngContent.index;
visitProjectedRenderNodes(view, ngContentIndex, 1, parentEl, null, undefined);
}
function attachEmbeddedView(parentView, elementData, viewIndex, view) {
var embeddedViews = elementData.viewContainer._embeddedViews;
if (viewIndex === null || viewIndex === undefined) {
viewIndex = embeddedViews.length;
}
view.viewContainerParent = parentView;
addToArray(embeddedViews, viewIndex, view);
var dvcElementData = declaredViewContainer(view);
if (dvcElementData && dvcElementData !== elementData) {
var projectedViews = dvcElementData.template._projectedViews;
if (!projectedViews) {
projectedViews = dvcElementData.template._projectedViews = [];
}
projectedViews.push(view);
}
Services.dirtyParentQueries(view);
var prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;
renderAttachEmbeddedView(elementData, prevView, view);
}
function detachEmbeddedView(elementData, viewIndex) {
var embeddedViews = elementData.viewContainer._embeddedViews;
if (viewIndex == null || viewIndex >= embeddedViews.length) {
viewIndex = embeddedViews.length - 1;
}
if (viewIndex < 0) {
return null;
}
var view = embeddedViews[viewIndex];
view.viewContainerParent = null;
removeFromArray(embeddedViews, viewIndex);
var dvcElementData = declaredViewContainer(view);
if (dvcElementData && dvcElementData !== elementData) {
var projectedViews = dvcElementData.template._projectedViews;
removeFromArray(projectedViews, projectedViews.indexOf(view));
}
Services.dirtyParentQueries(view);
renderDetachView(view);
return view;
}
function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
var embeddedViews = elementData.viewContainer._embeddedViews;
var view = embeddedViews[oldViewIndex];
removeFromArray(embeddedViews, oldViewIndex);
if (newViewIndex == null) {
newViewIndex = embeddedViews.length;
}
addToArray(embeddedViews, newViewIndex, view);
Services.dirtyParentQueries(view);
renderDetachView(view);
var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;
renderAttachEmbeddedView(elementData, prevView, view);
return view;
}
function renderAttachEmbeddedView(elementData, prevView, view) {
var prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) : elementData.renderElement;
var parentNode = view.renderer.parentNode(prevRenderNode);
var nextSibling = view.renderer.nextSibling(prevRenderNode);
visitRootRenderNodes(view, 2, parentNode, nextSibling, undefined);
}
function renderDetachView(view) {
visitRootRenderNodes(view, 3, null, null, undefined);
}
function addToArray(arr, index, value) {
if (index >= arr.length) {
arr.push(value);
} else {
arr.splice(index, 0, value);
}
}
function removeFromArray(arr, index) {
if (index >= arr.length - 1) {
arr.pop();
} else {
arr.splice(index, 1);
}
}
var EMPTY_CONTEXT = new Object();
function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {
return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);
}
function getComponentViewDefinitionFactory(componentFactory) {
return componentFactory.viewDefFactory;
}
var ComponentFactory_ = function(_super) {
__extends(ComponentFactory_, _super);
function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {
var _this = _super.call(this) || this;
_this.selector = selector;
_this.componentType = componentType;
_this._inputs = _inputs;
_this._outputs = _outputs;
_this.ngContentSelectors = ngContentSelectors;
_this.viewDefFactory = viewDefFactory;
return _this;
}
Object.defineProperty(ComponentFactory_.prototype, "inputs", {
get: function() {
var inputsArr = [];
var inputs = this._inputs;
for (var propName in inputs) {
var templateName = inputs[propName];
inputsArr.push({
propName: propName,
templateName: templateName
});
}
return inputsArr;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentFactory_.prototype, "outputs", {
get: function() {
var outputsArr = [];
for (var propName in this._outputs) {
var templateName = this._outputs[propName];
outputsArr.push({
propName: propName,
templateName: templateName
});
}
return outputsArr;
},
enumerable: true,
configurable: true
});
ComponentFactory_.prototype.create = function(injector, projectableNodes, rootSelectorOrNode, ngModule) {
if (!ngModule) {
throw new Error("ngModule should be provided");
}
var viewDef = resolveViewDefinition(this.viewDefFactory);
var componentNodeIndex = viewDef.nodes[0].element.componentProvider.index;
var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);
var component = asProviderData(view, componentNodeIndex).instance;
view.renderer.setAttribute(asElementData(view, 0).renderElement, "ng-version", VERSION.full);
return new ComponentRef_(view, new ViewRef_(view), component);
};
return ComponentFactory_;
}(ComponentFactory);
var ComponentRef_ = function(_super) {
__extends(ComponentRef_, _super);
function ComponentRef_(_view, _viewRef, _component) {
var _this = _super.call(this) || this;
_this._view = _view;
_this._viewRef = _viewRef;
_this._component = _component;
_this._elDef = _this._view.def.nodes[0];
return _this;
}
Object.defineProperty(ComponentRef_.prototype, "location", {
get: function() {
return new ElementRef(asElementData(this._view, this._elDef.index).renderElement);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef_.prototype, "injector", {
get: function() {
return new Injector_(this._view, this._elDef);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef_.prototype, "instance", {
get: function() {
return this._component;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef_.prototype, "hostView", {
get: function() {
return this._viewRef;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
get: function() {
return this._viewRef;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef_.prototype, "componentType", {
get: function() {
return this._component.constructor;
},
enumerable: true,
configurable: true
});
ComponentRef_.prototype.destroy = function() {
this._viewRef.destroy();
};
ComponentRef_.prototype.onDestroy = function(callback) {
this._viewRef.onDestroy(callback);
};
return ComponentRef_;
}(ComponentRef);
function createViewContainerData(view, elDef, elData) {
return new ViewContainerRef_(view, elDef, elData);
}
var ViewContainerRef_ = function() {
function ViewContainerRef_(_view, _elDef, _data) {
this._view = _view;
this._elDef = _elDef;
this._data = _data;
this._embeddedViews = [];
}
Object.defineProperty(ViewContainerRef_.prototype, "element", {
get: function() {
return new ElementRef(this._data.renderElement);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainerRef_.prototype, "injector", {
get: function() {
return new Injector_(this._view, this._elDef);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
get: function() {
var view = this._view;
var elDef = this._elDef.parent;
while (!elDef && view) {
elDef = viewParentEl(view);
view = view.parent;
}
return view ? new Injector_(view, elDef) : new Injector_(this._view, null);
},
enumerable: true,
configurable: true
});
ViewContainerRef_.prototype.clear = function() {
var len = this._embeddedViews.length;
for (var i = len - 1; i >= 0; i--) {
var view = detachEmbeddedView(this._data, i);
Services.destroyView(view);
}
};
ViewContainerRef_.prototype.get = function(index) {
var view = this._embeddedViews[index];
if (view) {
var ref = new ViewRef_(view);
ref.attachToViewContainerRef(this);
return ref;
}
return null;
};
Object.defineProperty(ViewContainerRef_.prototype, "length", {
get: function() {
return this._embeddedViews.length;
},
enumerable: true,
configurable: true
});
ViewContainerRef_.prototype.createEmbeddedView = function(templateRef, context, index) {
var viewRef = templateRef.createEmbeddedView(context || {});
this.insert(viewRef, index);
return viewRef;
};
ViewContainerRef_.prototype.createComponent = function(componentFactory, index, injector, projectableNodes, ngModuleRef) {
var contextInjector = injector || this.parentInjector;
if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {
ngModuleRef = contextInjector.get(NgModuleRef);
}
var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
this.insert(componentRef.hostView, index);
return componentRef;
};
ViewContainerRef_.prototype.insert = function(viewRef, index) {
var viewRef_ = viewRef;
var viewData = viewRef_._view;
attachEmbeddedView(this._view, this._data, index, viewData);
viewRef_.attachToViewContainerRef(this);
return viewRef;
};
ViewContainerRef_.prototype.move = function(viewRef, currentIndex) {
var previousIndex = this._embeddedViews.indexOf(viewRef._view);
moveEmbeddedView(this._data, previousIndex, currentIndex);
return viewRef;
};
ViewContainerRef_.prototype.indexOf = function(viewRef) {
return this._embeddedViews.indexOf(viewRef._view);
};
ViewContainerRef_.prototype.remove = function(index) {
var viewData = detachEmbeddedView(this._data, index);
if (viewData) {
Services.destroyView(viewData);
}
};
ViewContainerRef_.prototype.detach = function(index) {
var view = detachEmbeddedView(this._data, index);
return view ? new ViewRef_(view) : null;
};
return ViewContainerRef_;
}();
function createChangeDetectorRef(view) {
return new ViewRef_(view);
}
var ViewRef_ = function() {
function ViewRef_(_view) {
this._view = _view;
this._viewContainerRef = null;
this._appRef = null;
}
Object.defineProperty(ViewRef_.prototype, "rootNodes", {
get: function() {
return rootRenderNodes(this._view);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewRef_.prototype, "context", {
get: function() {
return this._view.context;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewRef_.prototype, "destroyed", {
get: function() {
return (this._view.state & 8) !== 0;
},
enumerable: true,
configurable: true
});
ViewRef_.prototype.markForCheck = function() {
markParentViewsForCheck(this._view);
};
ViewRef_.prototype.detach = function() {
this._view.state &= ~2;
};
ViewRef_.prototype.detectChanges = function() {
Services.checkAndUpdateView(this._view);
};
ViewRef_.prototype.checkNoChanges = function() {
Services.checkNoChangesView(this._view);
};
ViewRef_.prototype.reattach = function() {
this._view.state |= 2;
};
ViewRef_.prototype.onDestroy = function(callback) {
if (!this._view.disposables) {
this._view.disposables = [];
}
this._view.disposables.push(callback);
};
ViewRef_.prototype.destroy = function() {
if (this._appRef) {
this._appRef.detachView(this);
} else if (this._viewContainerRef) {
this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));
}
Services.destroyView(this._view);
};
ViewRef_.prototype.detachFromAppRef = function() {
this._appRef = null;
renderDetachView(this._view);
Services.dirtyParentQueries(this._view);
};
ViewRef_.prototype.attachToAppRef = function(appRef) {
if (this._viewContainerRef) {
throw new Error("This view is already attached to a ViewContainer!");
}
this._appRef = appRef;
};
ViewRef_.prototype.attachToViewContainerRef = function(vcRef) {
if (this._appRef) {
throw new Error("This view is already attached directly to the ApplicationRef!");
}
this._viewContainerRef = vcRef;
};
return ViewRef_;
}();
function createTemplateData(view, def) {
return new TemplateRef_(view, def);
}
var TemplateRef_ = function(_super) {
__extends(TemplateRef_, _super);
function TemplateRef_(_parentView, _def) {
var _this = _super.call(this) || this;
_this._parentView = _parentView;
_this._def = _def;
return _this;
}
TemplateRef_.prototype.createEmbeddedView = function(context) {
return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, context));
};
Object.defineProperty(TemplateRef_.prototype, "elementRef", {
get: function() {
return new ElementRef(asElementData(this._parentView, this._def.index).renderElement);
},
enumerable: true,
configurable: true
});
return TemplateRef_;
}(TemplateRef);
function createInjector(view, elDef) {
return new Injector_(view, elDef);
}
var Injector_ = function() {
function Injector_(view, elDef) {
this.view = view;
this.elDef = elDef;
}
Injector_.prototype.get = function(token, notFoundValue) {
if (notFoundValue === void 0) {
notFoundValue = Injector.THROW_IF_NOT_FOUND;
}
var allowPrivateServices = this.elDef ? (this.elDef.flags & 16777216) !== 0 : false;
return Services.resolveDep(this.view, this.elDef, allowPrivateServices, {
flags: 0,
token: token,
tokenKey: tokenKey(token)
}, notFoundValue);
};
return Injector_;
}();
function nodeValue(view, index) {
var def = view.def.nodes[index];
if (def.flags & 1) {
var elData = asElementData(view, def.index);
return def.element.template ? elData.template : elData.renderElement;
} else if (def.flags & 2) {
return asTextData(view, def.index).renderText;
} else if (def.flags & (10112 | 8)) {
return asProviderData(view, def.index).instance;
}
throw new Error("Illegal state: read nodeValue for node index " + index);
}
function createRendererV1(view) {
return new RendererAdapter(view.renderer);
}
var RendererAdapter = function() {
function RendererAdapter(delegate) {
this.delegate = delegate;
}
RendererAdapter.prototype.selectRootElement = function(selectorOrNode) {
return this.delegate.selectRootElement(selectorOrNode);
};
RendererAdapter.prototype.createElement = function(parent, namespaceAndName) {
var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];
var el = this.delegate.createElement(name, ns);
if (parent) {
this.delegate.appendChild(parent, el);
}
return el;
};
RendererAdapter.prototype.createViewRoot = function(hostElement) {
return hostElement;
};
RendererAdapter.prototype.createTemplateAnchor = function(parentElement) {
var comment = this.delegate.createComment("");
if (parentElement) {
this.delegate.appendChild(parentElement, comment);
}
return comment;
};
RendererAdapter.prototype.createText = function(parentElement, value) {
var node = this.delegate.createText(value);
if (parentElement) {
this.delegate.appendChild(parentElement, node);
}
return node;
};
RendererAdapter.prototype.projectNodes = function(parentElement, nodes) {
for (var i = 0; i < nodes.length; i++) {
this.delegate.appendChild(parentElement, nodes[i]);
}
};
RendererAdapter.prototype.attachViewAfter = function(node, viewRootNodes) {
var parentElement = this.delegate.parentNode(node);
var nextSibling = this.delegate.nextSibling(node);
for (var i = 0; i < viewRootNodes.length; i++) {
this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);
}
};
RendererAdapter.prototype.detachView = function(viewRootNodes) {
for (var i = 0; i < viewRootNodes.length; i++) {
var node = viewRootNodes[i];
var parentElement = this.delegate.parentNode(node);
this.delegate.removeChild(parentElement, node);
}
};
RendererAdapter.prototype.destroyView = function(hostElement, viewAllNodes) {
for (var i = 0; i < viewAllNodes.length; i++) {
this.delegate.destroyNode(viewAllNodes[i]);
}
};
RendererAdapter.prototype.listen = function(renderElement, name, callback) {
return this.delegate.listen(renderElement, name, callback);
};
RendererAdapter.prototype.listenGlobal = function(target, name, callback) {
return this.delegate.listen(target, name, callback);
};
RendererAdapter.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
this.delegate.setProperty(renderElement, propertyName, propertyValue);
};
RendererAdapter.prototype.setElementAttribute = function(renderElement, namespaceAndName, attributeValue) {
var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];
if (attributeValue != null) {
this.delegate.setAttribute(renderElement, name, attributeValue, ns);
} else {
this.delegate.removeAttribute(renderElement, name, ns);
}
};
RendererAdapter.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {};
RendererAdapter.prototype.setElementClass = function(renderElement, className, isAdd) {
if (isAdd) {
this.delegate.addClass(renderElement, className);
} else {
this.delegate.removeClass(renderElement, className);
}
};
RendererAdapter.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
if (styleValue != null) {
this.delegate.setStyle(renderElement, styleName, styleValue);
} else {
this.delegate.removeStyle(renderElement, styleName);
}
};
RendererAdapter.prototype.invokeElementMethod = function(renderElement, methodName, args) {
renderElement[methodName].apply(renderElement, args);
};
RendererAdapter.prototype.setText = function(renderNode$$1, text) {
this.delegate.setValue(renderNode$$1, text);
};
RendererAdapter.prototype.animate = function() {
throw new Error("Renderer.animate is no longer supported!");
};
return RendererAdapter;
}();
var RendererV1TokenKey = tokenKey(Renderer);
var Renderer2TokenKey = tokenKey(Renderer2);
var ElementRefTokenKey = tokenKey(ElementRef);
var ViewContainerRefTokenKey = tokenKey(ViewContainerRef);
var TemplateRefTokenKey = tokenKey(TemplateRef);
var ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);
var InjectorRefTokenKey = tokenKey(Injector);
var NOT_CREATED = new Object();
function directiveDef(flags, matchedQueries, childCount, ctor, deps, props, outputs) {
var bindings = [];
if (props) {
for (var prop in props) {
var _a = props[prop], bindingIndex = _a[0], nonMinifiedName = _a[1];
bindings[bindingIndex] = {
flags: 8,
name: prop,
nonMinifiedName: nonMinifiedName,
ns: null,
securityContext: null,
suffix: null
};
}
}
var outputDefs = [];
if (outputs) {
for (var propName in outputs) {
outputDefs.push({
type: 1,
propName: propName,
target: null,
eventName: outputs[propName]
});
}
}
flags |= 8192;
return _def(flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);
}
function pipeDef(flags, ctor, deps) {
flags |= 8;
return _def(flags, null, 0, ctor, ctor, deps);
}
function providerDef(flags, matchedQueries, token, value, deps) {
return _def(flags, matchedQueries, 0, token, value, deps);
}
function _def(flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {
var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
if (!outputs) {
outputs = [];
}
if (!bindings) {
bindings = [];
}
var depDefs = deps.map(function(value) {
var token;
var flags;
if (Array.isArray(value)) {
flags = value[0], token = value[1];
} else {
flags = 0;
token = value;
}
return {
flags: flags,
token: token,
tokenKey: tokenKey(token)
};
});
return {
index: -1,
parent: null,
renderParent: null,
bindingIndex: -1,
outputIndex: -1,
flags: flags,
childFlags: 0,
directChildFlags: 0,
childMatchedQueries: 0,
matchedQueries: matchedQueries,
matchedQueryIds: matchedQueryIds,
references: references,
ngContentIndex: -1,
childCount: childCount,
bindings: bindings,
bindingFlags: calcBindingFlags(bindings),
outputs: outputs,
element: null,
provider: {
token: token,
tokenKey: tokenKey(token),
value: value,
deps: depDefs
},
text: null,
query: null,
ngContent: null
};
}
function createProviderInstance(view, def) {
return def.flags & 2048 ? NOT_CREATED : _createProviderInstance(view, def);
}
function createPipeInstance(view, def) {
var compView = view;
while (compView.parent && !isComponentView(compView)) {
compView = compView.parent;
}
var allowPrivateServices = true;
return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);
}
function createDirectiveInstance(view, def) {
var allowPrivateServices = (def.flags & 16384) > 0;
var instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);
if (def.outputs.length) {
for (var i = 0; i < def.outputs.length; i++) {
var output = def.outputs[i];
var subscription = instance[output.propName].subscribe(eventHandlerClosure(view, def.parent.index, output.eventName));
view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
}
}
return instance;
}
function eventHandlerClosure(view, index, eventName) {
return function(event) {
return dispatchEvent(view, index, eventName, event);
};
}
function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
var providerData = asProviderData(view, def.index);
var directive = providerData.instance;
var changed = false;
var changes = undefined;
var bindLen = def.bindings.length;
if (bindLen > 0 && checkBinding(view, def, 0, v0)) {
changed = true;
changes = updateProp(view, providerData, def, 0, v0, changes);
}
if (bindLen > 1 && checkBinding(view, def, 1, v1)) {
changed = true;
changes = updateProp(view, providerData, def, 1, v1, changes);
}
if (bindLen > 2 && checkBinding(view, def, 2, v2)) {
changed = true;
changes = updateProp(view, providerData, def, 2, v2, changes);
}
if (bindLen > 3 && checkBinding(view, def, 3, v3)) {
changed = true;
changes = updateProp(view, providerData, def, 3, v3, changes);
}
if (bindLen > 4 && checkBinding(view, def, 4, v4)) {
changed = true;
changes = updateProp(view, providerData, def, 4, v4, changes);
}
if (bindLen > 5 && checkBinding(view, def, 5, v5)) {
changed = true;
changes = updateProp(view, providerData, def, 5, v5, changes);
}
if (bindLen > 6 && checkBinding(view, def, 6, v6)) {
changed = true;
changes = updateProp(view, providerData, def, 6, v6, changes);
}
if (bindLen > 7 && checkBinding(view, def, 7, v7)) {
changed = true;
changes = updateProp(view, providerData, def, 7, v7, changes);
}
if (bindLen > 8 && checkBinding(view, def, 8, v8)) {
changed = true;
changes = updateProp(view, providerData, def, 8, v8, changes);
}
if (bindLen > 9 && checkBinding(view, def, 9, v9)) {
changed = true;
changes = updateProp(view, providerData, def, 9, v9, changes);
}
if (changes) {
directive.ngOnChanges(changes);
}
if (view.state & 1 && def.flags & 32768) {
directive.ngOnInit();
}
if (def.flags & 131072) {
directive.ngDoCheck();
}
return changed;
}
function checkAndUpdateDirectiveDynamic(view, def, values) {
var providerData = asProviderData(view, def.index);
var directive = providerData.instance;
var changed = false;
var changes = undefined;
for (var i = 0; i < values.length; i++) {
if (checkBinding(view, def, i, values[i])) {
changed = true;
changes = updateProp(view, providerData, def, i, values[i], changes);
}
}
if (changes) {
directive.ngOnChanges(changes);
}
if (view.state & 1 && def.flags & 32768) {
directive.ngOnInit();
}
if (def.flags & 131072) {
directive.ngDoCheck();
}
return changed;
}
function _createProviderInstance(view, def) {
var allowPrivateServices = (def.flags & 4096) > 0;
var providerDef = def.provider;
var injectable;
switch (def.flags & 100673535) {
case 256:
injectable = createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);
break;

case 512:
injectable = callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);
break;

case 1024:
injectable = resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);
break;

case 128:
injectable = providerDef.value;
break;
}
return injectable;
}
function createClass(view, elDef, allowPrivateServices, ctor, deps) {
var len = deps.length;
var injectable;
switch (len) {
case 0:
injectable = new ctor();
break;

case 1:
injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));
break;

case 2:
injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
break;

case 3:
injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
break;

default:
var depValues = new Array(len);
for (var i = 0; i < len; i++) {
depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
}
injectable = new (ctor.bind.apply(ctor, [ void 0 ].concat(depValues)))();
}
return injectable;
}
function callFactory(view, elDef, allowPrivateServices, factory, deps) {
var len = deps.length;
var injectable;
switch (len) {
case 0:
injectable = factory();
break;

case 1:
injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));
break;

case 2:
injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
break;

case 3:
injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
break;

default:
var depValues = Array(len);
for (var i = 0; i < len; i++) {
depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
}
injectable = factory.apply(void 0, depValues);
}
return injectable;
}
var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {
if (notFoundValue === void 0) {
notFoundValue = Injector.THROW_IF_NOT_FOUND;
}
if (depDef.flags & 8) {
return depDef.token;
}
var startView = view;
if (depDef.flags & 2) {
notFoundValue = null;
}
var tokenKey$$1 = depDef.tokenKey;
if (elDef && depDef.flags & 1) {
allowPrivateServices = false;
elDef = elDef.parent;
}
while (view) {
if (elDef) {
switch (tokenKey$$1) {
case RendererV1TokenKey:
{
var compView = findCompView(view, elDef, allowPrivateServices);
return createRendererV1(compView);
}

case Renderer2TokenKey:
{
var compView = findCompView(view, elDef, allowPrivateServices);
return compView.renderer;
}

case ElementRefTokenKey:
return new ElementRef(asElementData(view, elDef.index).renderElement);

case ViewContainerRefTokenKey:
return asElementData(view, elDef.index).viewContainer;

case TemplateRefTokenKey:
{
if (elDef.element.template) {
return asElementData(view, elDef.index).template;
}
break;
}

case ChangeDetectorRefTokenKey:
{
var cdView = findCompView(view, elDef, allowPrivateServices);
return createChangeDetectorRef(cdView);
}

case InjectorRefTokenKey:
return createInjector(view, elDef);

default:
var providerDef_1 = (allowPrivateServices ? elDef.element.allProviders : elDef.element.publicProviders)[tokenKey$$1];
if (providerDef_1) {
var providerData = asProviderData(view, providerDef_1.index);
if (providerData.instance === NOT_CREATED) {
providerData.instance = _createProviderInstance(view, providerDef_1);
}
return providerData.instance;
}
}
}
allowPrivateServices = isComponentView(view);
elDef = viewParentEl(view);
view = view.parent;
}
var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);
if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
return value;
}
return startView.root.ngModule.injector.get(depDef.token, notFoundValue);
}
function findCompView(view, elDef, allowPrivateServices) {
var compView;
if (allowPrivateServices) {
compView = asElementData(view, elDef.index).componentView;
} else {
compView = view;
while (compView.parent && !isComponentView(compView)) {
compView = compView.parent;
}
}
return compView;
}
function updateProp(view, providerData, def, bindingIdx, value, changes) {
if (def.flags & 16384) {
var compView = asElementData(view, def.parent.index).componentView;
if (compView.def.flags & 2) {
compView.state |= 2;
}
}
var binding = def.bindings[bindingIdx];
var propName = binding.name;
providerData.instance[propName] = value;
if (def.flags & 262144) {
changes = changes || {};
var oldValue = view.oldValues[def.bindingIndex + bindingIdx];
if (oldValue instanceof WrappedValue) {
oldValue = oldValue.wrapped;
}
var binding_1 = def.bindings[bindingIdx];
changes[binding_1.nonMinifiedName] = new SimpleChange(oldValue, value, (view.state & 1) !== 0);
}
view.oldValues[def.bindingIndex + bindingIdx] = value;
return changes;
}
function callLifecycleHooksChildrenFirst(view, lifecycles) {
if (!(view.def.nodeFlags & lifecycles)) {
return;
}
var nodes = view.def.nodes;
for (var i = 0; i < nodes.length; i++) {
var nodeDef = nodes[i];
var parent = nodeDef.parent;
if (!parent && nodeDef.flags & lifecycles) {
callProviderLifecycles(view, i, nodeDef.flags & lifecycles);
}
if ((nodeDef.childFlags & lifecycles) === 0) {
i += nodeDef.childCount;
}
while (parent && parent.flags & 1 && i === parent.index + parent.childCount) {
if (parent.directChildFlags & lifecycles) {
callElementProvidersLifecycles(view, parent, lifecycles);
}
parent = parent.parent;
}
}
}
function callElementProvidersLifecycles(view, elDef, lifecycles) {
for (var i = elDef.index + 1; i <= elDef.index + elDef.childCount; i++) {
var nodeDef = view.def.nodes[i];
if (nodeDef.flags & lifecycles) {
callProviderLifecycles(view, i, nodeDef.flags & lifecycles);
}
i += nodeDef.childCount;
}
}
function callProviderLifecycles(view, index, lifecycles) {
var provider = asProviderData(view, index).instance;
if (provider === NOT_CREATED) {
return;
}
Services.setCurrentNode(view, index);
if (lifecycles & 524288) {
provider.ngAfterContentInit();
}
if (lifecycles & 1048576) {
provider.ngAfterContentChecked();
}
if (lifecycles & 2097152) {
provider.ngAfterViewInit();
}
if (lifecycles & 4194304) {
provider.ngAfterViewChecked();
}
if (lifecycles & 65536) {
provider.ngOnDestroy();
}
}
function purePipeDef(argCount) {
return _pureExpressionDef(64, new Array(argCount + 1));
}
function pureArrayDef(argCount) {
return _pureExpressionDef(16, new Array(argCount));
}
function pureObjectDef(propertyNames) {
return _pureExpressionDef(32, propertyNames);
}
function _pureExpressionDef(flags, propertyNames) {
var bindings = new Array(propertyNames.length);
for (var i = 0; i < propertyNames.length; i++) {
var prop = propertyNames[i];
bindings[i] = {
flags: 8,
name: prop,
ns: null,
nonMinifiedName: prop,
securityContext: null,
suffix: null
};
}
return {
index: -1,
parent: null,
renderParent: null,
bindingIndex: -1,
outputIndex: -1,
flags: flags,
childFlags: 0,
directChildFlags: 0,
childMatchedQueries: 0,
matchedQueries: {},
matchedQueryIds: 0,
references: {},
ngContentIndex: -1,
childCount: 0,
bindings: bindings,
bindingFlags: calcBindingFlags(bindings),
outputs: [],
element: null,
provider: null,
text: null,
query: null,
ngContent: null
};
}
function createPureExpression(view, def) {
return {
value: undefined
};
}
function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
var bindings = def.bindings;
var changed = false;
var bindLen = bindings.length;
if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;
if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;
if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;
if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;
if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;
if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;
if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;
if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;
if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;
if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;
if (changed) {
var data = asPureExpressionData(view, def.index);
var value = void 0;
switch (def.flags & 100673535) {
case 16:
value = new Array(bindings.length);
if (bindLen > 0) value[0] = v0;
if (bindLen > 1) value[1] = v1;
if (bindLen > 2) value[2] = v2;
if (bindLen > 3) value[3] = v3;
if (bindLen > 4) value[4] = v4;
if (bindLen > 5) value[5] = v5;
if (bindLen > 6) value[6] = v6;
if (bindLen > 7) value[7] = v7;
if (bindLen > 8) value[8] = v8;
if (bindLen > 9) value[9] = v9;
break;

case 32:
value = {};
if (bindLen > 0) value[bindings[0].name] = v0;
if (bindLen > 1) value[bindings[1].name] = v1;
if (bindLen > 2) value[bindings[2].name] = v2;
if (bindLen > 3) value[bindings[3].name] = v3;
if (bindLen > 4) value[bindings[4].name] = v4;
if (bindLen > 5) value[bindings[5].name] = v5;
if (bindLen > 6) value[bindings[6].name] = v6;
if (bindLen > 7) value[bindings[7].name] = v7;
if (bindLen > 8) value[bindings[8].name] = v8;
if (bindLen > 9) value[bindings[9].name] = v9;
break;

case 64:
var pipe = v0;
switch (bindLen) {
case 1:
value = pipe.transform(v0);
break;

case 2:
value = pipe.transform(v1);
break;

case 3:
value = pipe.transform(v1, v2);
break;

case 4:
value = pipe.transform(v1, v2, v3);
break;

case 5:
value = pipe.transform(v1, v2, v3, v4);
break;

case 6:
value = pipe.transform(v1, v2, v3, v4, v5);
break;

case 7:
value = pipe.transform(v1, v2, v3, v4, v5, v6);
break;

case 8:
value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);
break;

case 9:
value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);
break;

case 10:
value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);
break;
}
break;
}
data.value = value;
}
return changed;
}
function checkAndUpdatePureExpressionDynamic(view, def, values) {
var bindings = def.bindings;
var changed = false;
for (var i = 0; i < values.length; i++) {
if (checkAndUpdateBinding(view, def, i, values[i])) {
changed = true;
}
}
if (changed) {
var data = asPureExpressionData(view, def.index);
var value = void 0;
switch (def.flags & 100673535) {
case 16:
value = values;
break;

case 32:
value = {};
for (var i = 0; i < values.length; i++) {
value[bindings[i].name] = values[i];
}
break;

case 64:
var pipe = values[0];
var params = values.slice(1);
value = pipe.transform.apply(pipe, params);
break;
}
data.value = value;
}
return changed;
}
function queryDef(flags, id, bindings) {
var bindingDefs = [];
for (var propName in bindings) {
var bindingType = bindings[propName];
bindingDefs.push({
propName: propName,
bindingType: bindingType
});
}
return {
index: -1,
parent: null,
renderParent: null,
bindingIndex: -1,
outputIndex: -1,
flags: flags,
childFlags: 0,
directChildFlags: 0,
childMatchedQueries: 0,
ngContentIndex: -1,
matchedQueries: {},
matchedQueryIds: 0,
references: {},
childCount: 0,
bindings: [],
bindingFlags: 0,
outputs: [],
element: null,
provider: null,
text: null,
query: {
id: id,
filterId: filterQueryId(id),
bindings: bindingDefs
},
ngContent: null
};
}
function createQuery() {
return new QueryList();
}
function dirtyParentQueries(view) {
var queryIds = view.def.nodeMatchedQueries;
while (view.parent && isEmbeddedView(view)) {
var tplDef = view.parentNodeDef;
view = view.parent;
var end = tplDef.index + tplDef.childCount;
for (var i = 0; i <= end; i++) {
var nodeDef = view.def.nodes[i];
if (nodeDef.flags & 33554432 && nodeDef.flags & 268435456 && (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {
asQueryList(view, i).setDirty();
}
if (nodeDef.flags & 1 && i + nodeDef.childCount < tplDef.index || !(nodeDef.childFlags & 33554432) || !(nodeDef.childFlags & 268435456)) {
i += nodeDef.childCount;
}
}
}
if (view.def.nodeFlags & 67108864) {
for (var i = 0; i < view.def.nodes.length; i++) {
var nodeDef = view.def.nodes[i];
if (nodeDef.flags & 67108864 && nodeDef.flags & 268435456) {
asQueryList(view, i).setDirty();
}
i += nodeDef.childCount;
}
}
}
function checkAndUpdateQuery(view, nodeDef) {
var queryList = asQueryList(view, nodeDef.index);
if (!queryList.dirty) {
return;
}
var directiveInstance;
var newValues = undefined;
if (nodeDef.flags & 33554432) {
var elementDef_1 = nodeDef.parent.parent;
newValues = calcQueryValues(view, elementDef_1.index, elementDef_1.index + elementDef_1.childCount, nodeDef.query, []);
directiveInstance = asProviderData(view, nodeDef.parent.index).instance;
} else if (nodeDef.flags & 67108864) {
newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []);
directiveInstance = view.component;
}
queryList.reset(newValues);
var bindings = nodeDef.query.bindings;
var notify = false;
for (var i = 0; i < bindings.length; i++) {
var binding = bindings[i];
var boundValue = void 0;
switch (binding.bindingType) {
case 0:
boundValue = queryList.first;
break;

case 1:
boundValue = queryList;
notify = true;
break;
}
directiveInstance[binding.propName] = boundValue;
}
if (notify) {
queryList.notifyOnChanges();
}
}
function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
for (var i = startIndex; i <= endIndex; i++) {
var nodeDef = view.def.nodes[i];
var valueType = nodeDef.matchedQueries[queryDef.id];
if (valueType != null) {
values.push(getQueryValue(view, nodeDef, valueType));
}
if (nodeDef.flags & 1 && nodeDef.element.template && (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) === queryDef.filterId) {
var elementData = asElementData(view, i);
if (nodeDef.flags & 8388608) {
var embeddedViews = elementData.viewContainer._embeddedViews;
for (var k = 0; k < embeddedViews.length; k++) {
var embeddedView = embeddedViews[k];
var dvc = declaredViewContainer(embeddedView);
if (dvc && dvc === elementData) {
calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
}
}
}
var projectedViews = elementData.template._projectedViews;
if (projectedViews) {
for (var k = 0; k < projectedViews.length; k++) {
var projectedView = projectedViews[k];
calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
}
}
}
if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {
i += nodeDef.childCount;
}
}
return values;
}
function getQueryValue(view, nodeDef, queryValueType) {
if (queryValueType != null) {
var value = void 0;
switch (queryValueType) {
case 1:
value = asElementData(view, nodeDef.index).renderElement;
break;

case 0:
value = new ElementRef(asElementData(view, nodeDef.index).renderElement);
break;

case 2:
value = asElementData(view, nodeDef.index).template;
break;

case 3:
value = asElementData(view, nodeDef.index).viewContainer;
break;

case 4:
value = asProviderData(view, nodeDef.index).instance;
break;
}
return value;
}
}
function textDef(ngContentIndex, constants) {
var bindings = new Array(constants.length - 1);
for (var i = 1; i < constants.length; i++) {
bindings[i - 1] = {
flags: 8,
name: null,
ns: null,
nonMinifiedName: null,
securityContext: null,
suffix: constants[i]
};
}
var flags = 2;
return {
index: -1,
parent: null,
renderParent: null,
bindingIndex: -1,
outputIndex: -1,
flags: flags,
childFlags: 0,
directChildFlags: 0,
childMatchedQueries: 0,
matchedQueries: {},
matchedQueryIds: 0,
references: {},
ngContentIndex: ngContentIndex,
childCount: 0,
bindings: bindings,
bindingFlags: calcBindingFlags(bindings),
outputs: [],
element: null,
provider: null,
text: {
prefix: constants[0]
},
query: null,
ngContent: null
};
}
function createText(view, renderHost, def) {
var renderNode$$1;
var renderer = view.renderer;
renderNode$$1 = renderer.createText(def.text.prefix);
var parentEl = getParentRenderElement(view, renderHost, def);
if (parentEl) {
renderer.appendChild(parentEl, renderNode$$1);
}
return {
renderText: renderNode$$1
};
}
function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
var changed = false;
var bindings = def.bindings;
var bindLen = bindings.length;
if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;
if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;
if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;
if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;
if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;
if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;
if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;
if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;
if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;
if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;
if (changed) {
var value = def.text.prefix;
if (bindLen > 0) value += _addInterpolationPart(v0, bindings[0]);
if (bindLen > 1) value += _addInterpolationPart(v1, bindings[1]);
if (bindLen > 2) value += _addInterpolationPart(v2, bindings[2]);
if (bindLen > 3) value += _addInterpolationPart(v3, bindings[3]);
if (bindLen > 4) value += _addInterpolationPart(v4, bindings[4]);
if (bindLen > 5) value += _addInterpolationPart(v5, bindings[5]);
if (bindLen > 6) value += _addInterpolationPart(v6, bindings[6]);
if (bindLen > 7) value += _addInterpolationPart(v7, bindings[7]);
if (bindLen > 8) value += _addInterpolationPart(v8, bindings[8]);
if (bindLen > 9) value += _addInterpolationPart(v9, bindings[9]);
var renderNode$$1 = asTextData(view, def.index).renderText;
view.renderer.setValue(renderNode$$1, value);
}
return changed;
}
function checkAndUpdateTextDynamic(view, def, values) {
var bindings = def.bindings;
var changed = false;
for (var i = 0; i < values.length; i++) {
if (checkAndUpdateBinding(view, def, i, values[i])) {
changed = true;
}
}
if (changed) {
var value = "";
for (var i = 0; i < values.length; i++) {
value = value + _addInterpolationPart(values[i], bindings[i]);
}
value = def.text.prefix + value;
var renderNode$$1 = asTextData(view, def.index).renderText;
view.renderer.setValue(renderNode$$1, value);
}
return changed;
}
function _addInterpolationPart(value, binding) {
var valueStr = value != null ? value.toString() : "";
return valueStr + binding.suffix;
}
function viewDef(flags, nodes, updateDirectives, updateRenderer) {
var viewBindingCount = 0;
var viewDisposableCount = 0;
var viewNodeFlags = 0;
var viewRootNodeFlags = 0;
var viewMatchedQueries = 0;
var currentParent = null;
var currentElementHasPublicProviders = false;
var currentElementHasPrivateProviders = false;
var lastRenderRootNode = null;
for (var i = 0; i < nodes.length; i++) {
while (currentParent && i > currentParent.index + currentParent.childCount) {
var newParent = currentParent.parent;
if (newParent) {
newParent.childFlags |= currentParent.childFlags;
newParent.childMatchedQueries |= currentParent.childMatchedQueries;
}
currentParent = newParent;
}
var node = nodes[i];
node.index = i;
node.parent = currentParent;
node.bindingIndex = viewBindingCount;
node.outputIndex = viewDisposableCount;
var currentRenderParent = void 0;
if (currentParent && currentParent.flags & 1 && !currentParent.element.name) {
currentRenderParent = currentParent.renderParent;
} else {
currentRenderParent = currentParent;
}
node.renderParent = currentRenderParent;
if (node.element) {
var elDef = node.element;
elDef.publicProviders = currentParent ? currentParent.element.publicProviders : Object.create(null);
elDef.allProviders = elDef.publicProviders;
currentElementHasPublicProviders = false;
currentElementHasPrivateProviders = false;
}
validateNode(currentParent, node, nodes.length);
viewNodeFlags |= node.flags;
viewMatchedQueries |= node.matchedQueryIds;
if (node.element && node.element.template) {
viewMatchedQueries |= node.element.template.nodeMatchedQueries;
}
if (currentParent) {
currentParent.childFlags |= node.flags;
currentParent.directChildFlags |= node.flags;
currentParent.childMatchedQueries |= node.matchedQueryIds;
if (node.element && node.element.template) {
currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;
}
} else {
viewRootNodeFlags |= node.flags;
}
viewBindingCount += node.bindings.length;
viewDisposableCount += node.outputs.length;
if (!currentRenderParent && node.flags & 3) {
lastRenderRootNode = node;
}
if (node.flags & 10112) {
if (!currentElementHasPublicProviders) {
currentElementHasPublicProviders = true;
currentParent.element.publicProviders = Object.create(currentParent.element.publicProviders);
currentParent.element.allProviders = currentParent.element.publicProviders;
}
var isPrivateService = (node.flags & 4096) !== 0;
var isComponent = (node.flags & 16384) !== 0;
if (!isPrivateService || isComponent) {
currentParent.element.publicProviders[node.provider.tokenKey] = node;
} else {
if (!currentElementHasPrivateProviders) {
currentElementHasPrivateProviders = true;
currentParent.element.allProviders = Object.create(currentParent.element.publicProviders);
}
currentParent.element.allProviders[node.provider.tokenKey] = node;
}
if (isComponent) {
currentParent.element.componentProvider = node;
}
}
if (node.childCount) {
currentParent = node;
}
}
while (currentParent) {
var newParent = currentParent.parent;
if (newParent) {
newParent.childFlags |= currentParent.childFlags;
newParent.childMatchedQueries |= currentParent.childMatchedQueries;
}
currentParent = newParent;
}
var handleEvent = function(view, nodeIndex, eventName, event) {
return nodes[nodeIndex].element.handleEvent(view, eventName, event);
};
return {
factory: null,
nodeFlags: viewNodeFlags,
rootNodeFlags: viewRootNodeFlags,
nodeMatchedQueries: viewMatchedQueries,
flags: flags,
nodes: nodes,
updateDirectives: updateDirectives || NOOP,
updateRenderer: updateRenderer || NOOP,
handleEvent: handleEvent || NOOP,
bindingCount: viewBindingCount,
outputCount: viewDisposableCount,
lastRenderRootNode: lastRenderRootNode
};
}
function validateNode(parent, node, nodeCount) {
var template = node.element && node.element.template;
if (template) {
if (!template.lastRenderRootNode) {
throw new Error("Illegal State: Embedded templates without nodes are not allowed!");
}
if (template.lastRenderRootNode && template.lastRenderRootNode.flags & 8388608) {
throw new Error("Illegal State: Last root node of a template can't have embedded views, at index " + node.index + "!");
}
}
if (node.flags & 10112) {
var parentFlags = parent ? parent.flags : 0;
if ((parentFlags & 1) === 0) {
throw new Error("Illegal State: Provider/Directive nodes need to be children of elements or anchors, at index " + node.index + "!");
}
}
if (node.query) {
if (node.flags & 33554432 && (!parent || (parent.flags & 8192) === 0)) {
throw new Error("Illegal State: Content Query nodes need to be children of directives, at index " + node.index + "!");
}
if (node.flags & 67108864 && parent) {
throw new Error("Illegal State: View Query nodes have to be top level nodes, at index " + node.index + "!");
}
}
if (node.childCount) {
var parentEnd = parent ? parent.index + parent.childCount : nodeCount - 1;
if (node.index <= parentEnd && node.index + node.childCount > parentEnd) {
throw new Error("Illegal State: childCount of node leads outside of parent, at index " + node.index + "!");
}
}
}
function createEmbeddedView(parent, anchorDef$$1, context) {
var view = createView(parent.root, parent.renderer, parent, anchorDef$$1, anchorDef$$1.element.template);
initView(view, parent.component, context);
createViewNodes(view);
return view;
}
function createRootView(root, def, context) {
var view = createView(root, root.renderer, null, null, def);
initView(view, context, context);
createViewNodes(view);
return view;
}
function createView(root, renderer, parent, parentNodeDef, def) {
var nodes = new Array(def.nodes.length);
var disposables = def.outputCount ? new Array(def.outputCount) : null;
var view = {
def: def,
parent: parent,
viewContainerParent: null,
parentNodeDef: parentNodeDef,
context: null,
component: null,
nodes: nodes,
state: 1 | 2,
root: root,
renderer: renderer,
oldValues: new Array(def.bindingCount),
disposables: disposables
};
return view;
}
function initView(view, component, context) {
view.component = component;
view.context = context;
}
function createViewNodes(view) {
var renderHost;
if (isComponentView(view)) {
var hostDef = view.parentNodeDef;
renderHost = asElementData(view.parent, hostDef.parent.index).renderElement;
}
var def = view.def;
var nodes = view.nodes;
for (var i = 0; i < def.nodes.length; i++) {
var nodeDef = def.nodes[i];
Services.setCurrentNode(view, i);
var nodeData = void 0;
switch (nodeDef.flags & 100673535) {
case 1:
var el = createElement(view, renderHost, nodeDef);
var componentView = undefined;
if (nodeDef.flags & 16777216) {
var compViewDef = resolveViewDefinition(nodeDef.element.componentView);
var rendererType = nodeDef.element.componentRendererType;
var compRenderer = void 0;
if (!rendererType) {
compRenderer = view.root.renderer;
} else {
compRenderer = view.root.rendererFactory.createRenderer(el, rendererType);
}
componentView = createView(view.root, compRenderer, view, nodeDef.element.componentProvider, compViewDef);
}
listenToElementOutputs(view, componentView, nodeDef, el);
nodeData = {
renderElement: el,
componentView: componentView,
viewContainer: null,
template: nodeDef.element.template ? createTemplateData(view, nodeDef) : undefined
};
if (nodeDef.flags & 8388608) {
nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);
}
break;

case 2:
nodeData = createText(view, renderHost, nodeDef);
break;

case 256:
case 512:
case 1024:
case 128:
{
var instance = createProviderInstance(view, nodeDef);
nodeData = {
instance: instance
};
break;
}

case 8:
{
var instance = createPipeInstance(view, nodeDef);
nodeData = {
instance: instance
};
break;
}

case 8192:
{
var instance = createDirectiveInstance(view, nodeDef);
nodeData = {
instance: instance
};
if (nodeDef.flags & 16384) {
var compView = asElementData(view, nodeDef.parent.index).componentView;
initView(compView, instance, instance);
}
break;
}

case 16:
case 32:
case 64:
nodeData = createPureExpression(view, nodeDef);
break;

case 33554432:
case 67108864:
nodeData = createQuery();
break;

case 4:
appendNgContent(view, renderHost, nodeDef);
nodeData = undefined;
break;
}
nodes[i] = nodeData;
}
execComponentViewsAction(view, ViewAction.CreateViewNodes);
execQueriesAction(view, 33554432 | 67108864, 134217728, 0);
}
function checkNoChangesView(view) {
Services.updateDirectives(view, 1);
execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);
Services.updateRenderer(view, 1);
execComponentViewsAction(view, ViewAction.CheckNoChanges);
}
function checkAndUpdateView(view) {
Services.updateDirectives(view, 0);
execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);
execQueriesAction(view, 33554432, 268435456, 0);
callLifecycleHooksChildrenFirst(view, 1048576 | (view.state & 1 ? 524288 : 0));
Services.updateRenderer(view, 0);
execComponentViewsAction(view, ViewAction.CheckAndUpdate);
execQueriesAction(view, 67108864, 268435456, 0);
callLifecycleHooksChildrenFirst(view, 4194304 | (view.state & 1 ? 2097152 : 0));
if (view.def.flags & 2) {
view.state &= ~2;
}
view.state &= ~1;
}
function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
if (argStyle === 0) {
return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
} else {
return checkAndUpdateNodeDynamic(view, nodeDef, v0);
}
}
function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
var changed = false;
switch (nodeDef.flags & 100673535) {
case 1:
changed = checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
break;

case 2:
changed = checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
break;

case 8192:
changed = checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
break;

case 16:
case 32:
case 64:
changed = checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
break;
}
return changed;
}
function checkAndUpdateNodeDynamic(view, nodeDef, values) {
var changed = false;
switch (nodeDef.flags & 100673535) {
case 1:
changed = checkAndUpdateElementDynamic(view, nodeDef, values);
break;

case 2:
changed = checkAndUpdateTextDynamic(view, nodeDef, values);
break;

case 8192:
changed = checkAndUpdateDirectiveDynamic(view, nodeDef, values);
break;

case 16:
case 32:
case 64:
changed = checkAndUpdatePureExpressionDynamic(view, nodeDef, values);
break;
}
if (changed) {
var bindLen = nodeDef.bindings.length;
var bindingStart = nodeDef.bindingIndex;
var oldValues = view.oldValues;
for (var i = 0; i < bindLen; i++) {
oldValues[bindingStart + i] = values[i];
}
}
return changed;
}
function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
if (argStyle === 0) {
checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
} else {
checkNoChangesNodeDynamic(view, nodeDef, v0);
}
return false;
}
function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
var bindLen = nodeDef.bindings.length;
if (bindLen > 0) checkBindingNoChanges(view, nodeDef, 0, v0);
if (bindLen > 1) checkBindingNoChanges(view, nodeDef, 1, v1);
if (bindLen > 2) checkBindingNoChanges(view, nodeDef, 2, v2);
if (bindLen > 3) checkBindingNoChanges(view, nodeDef, 3, v3);
if (bindLen > 4) checkBindingNoChanges(view, nodeDef, 4, v4);
if (bindLen > 5) checkBindingNoChanges(view, nodeDef, 5, v5);
if (bindLen > 6) checkBindingNoChanges(view, nodeDef, 6, v6);
if (bindLen > 7) checkBindingNoChanges(view, nodeDef, 7, v7);
if (bindLen > 8) checkBindingNoChanges(view, nodeDef, 8, v8);
if (bindLen > 9) checkBindingNoChanges(view, nodeDef, 9, v9);
}
function checkNoChangesNodeDynamic(view, nodeDef, values) {
for (var i = 0; i < values.length; i++) {
checkBindingNoChanges(view, nodeDef, i, values[i]);
}
}
function checkNoChangesQuery(view, nodeDef) {
var queryList = asQueryList(view, nodeDef.index);
if (queryList.dirty) {
throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.index), "Query " + nodeDef.query.id + " not dirty", "Query " + nodeDef.query.id + " dirty", (view.state & 1) !== 0);
}
}
function destroyView(view) {
if (view.state & 8) {
return;
}
execEmbeddedViewsAction(view, ViewAction.Destroy);
execComponentViewsAction(view, ViewAction.Destroy);
callLifecycleHooksChildrenFirst(view, 65536);
if (view.disposables) {
for (var i = 0; i < view.disposables.length; i++) {
view.disposables[i]();
}
}
if (view.renderer.destroyNode) {
destroyViewNodes(view);
}
if (isComponentView(view)) {
view.renderer.destroy();
}
view.state |= 8;
}
function destroyViewNodes(view) {
var len = view.def.nodes.length;
for (var i = 0; i < len; i++) {
var def = view.def.nodes[i];
if (def.flags & 1) {
view.renderer.destroyNode(asElementData(view, i).renderElement);
} else if (def.flags & 2) {
view.renderer.destroyNode(asTextData(view, i).renderText);
}
}
}
var ViewAction = {};
ViewAction.CreateViewNodes = 0;
ViewAction.CheckNoChanges = 1;
ViewAction.CheckAndUpdate = 2;
ViewAction.Destroy = 3;
ViewAction[ViewAction.CreateViewNodes] = "CreateViewNodes";
ViewAction[ViewAction.CheckNoChanges] = "CheckNoChanges";
ViewAction[ViewAction.CheckAndUpdate] = "CheckAndUpdate";
ViewAction[ViewAction.Destroy] = "Destroy";
function execComponentViewsAction(view, action) {
var def = view.def;
if (!(def.nodeFlags & 16777216)) {
return;
}
for (var i = 0; i < def.nodes.length; i++) {
var nodeDef = def.nodes[i];
if (nodeDef.flags & 16777216) {
callViewAction(asElementData(view, i).componentView, action);
} else if ((nodeDef.childFlags & 16777216) === 0) {
i += nodeDef.childCount;
}
}
}
function execEmbeddedViewsAction(view, action) {
var def = view.def;
if (!(def.nodeFlags & 8388608)) {
return;
}
for (var i = 0; i < def.nodes.length; i++) {
var nodeDef = def.nodes[i];
if (nodeDef.flags & 8388608) {
var embeddedViews = asElementData(view, i).viewContainer._embeddedViews;
for (var k = 0; k < embeddedViews.length; k++) {
callViewAction(embeddedViews[k], action);
}
} else if ((nodeDef.childFlags & 8388608) === 0) {
i += nodeDef.childCount;
}
}
}
function callViewAction(view, action) {
var viewState = view.state;
switch (action) {
case ViewAction.CheckNoChanges:
if (viewState & 2 && (viewState & (4 | 8)) === 0) {
checkNoChangesView(view);
}
break;

case ViewAction.CheckAndUpdate:
if (viewState & 2 && (viewState & (4 | 8)) === 0) {
checkAndUpdateView(view);
}
break;

case ViewAction.Destroy:
destroyView(view);
break;

case ViewAction.CreateViewNodes:
createViewNodes(view);
break;
}
}
function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {
return;
}
var nodeCount = view.def.nodes.length;
for (var i = 0; i < nodeCount; i++) {
var nodeDef = view.def.nodes[i];
if (nodeDef.flags & queryFlags && nodeDef.flags & staticDynamicQueryFlag) {
Services.setCurrentNode(view, nodeDef.index);
switch (checkType) {
case 0:
checkAndUpdateQuery(view, nodeDef);
break;

case 1:
checkNoChangesQuery(view, nodeDef);
break;
}
}
if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {
i += nodeDef.childCount;
}
}
}
var initialized = false;
function initServicesIfNeeded() {
if (initialized) {
return;
}
initialized = true;
var services = isDevMode() ? createDebugServices() : createProdServices();
Services.setCurrentNode = services.setCurrentNode;
Services.createRootView = services.createRootView;
Services.createEmbeddedView = services.createEmbeddedView;
Services.checkAndUpdateView = services.checkAndUpdateView;
Services.checkNoChangesView = services.checkNoChangesView;
Services.destroyView = services.destroyView;
Services.resolveDep = resolveDep;
Services.createDebugContext = services.createDebugContext;
Services.handleEvent = services.handleEvent;
Services.updateDirectives = services.updateDirectives;
Services.updateRenderer = services.updateRenderer;
Services.dirtyParentQueries = dirtyParentQueries;
}
function createProdServices() {
return {
setCurrentNode: function() {},
createRootView: createProdRootView,
createEmbeddedView: createEmbeddedView,
checkAndUpdateView: checkAndUpdateView,
checkNoChangesView: checkNoChangesView,
destroyView: destroyView,
createDebugContext: function(view, nodeIndex) {
return new DebugContext_(view, nodeIndex);
},
handleEvent: function(view, nodeIndex, eventName, event) {
return view.def.handleEvent(view, nodeIndex, eventName, event);
},
updateDirectives: function(view, checkType) {
return view.def.updateDirectives(checkType === 0 ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view);
},
updateRenderer: function(view, checkType) {
return view.def.updateRenderer(checkType === 0 ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view);
}
};
}
function createDebugServices() {
return {
setCurrentNode: debugSetCurrentNode,
createRootView: debugCreateRootView,
createEmbeddedView: debugCreateEmbeddedView,
checkAndUpdateView: debugCheckAndUpdateView,
checkNoChangesView: debugCheckNoChangesView,
destroyView: debugDestroyView,
createDebugContext: function(view, nodeIndex) {
return new DebugContext_(view, nodeIndex);
},
handleEvent: debugHandleEvent,
updateDirectives: debugUpdateDirectives,
updateRenderer: debugUpdateRenderer
};
}
function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
var rendererFactory = ngModule.injector.get(RendererFactory2);
return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);
}
function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
var rendererFactory = ngModule.injector.get(RendererFactory2);
var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);
return callWithDebugContext(DebugAction.create, createRootView, null, [ root, def, context ]);
}
function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {
var sanitizer = ngModule.injector.get(Sanitizer);
var renderer = rendererFactory.createRenderer(null, null);
return {
ngModule: ngModule,
injector: elInjector,
projectableNodes: projectableNodes,
selectorOrNode: rootSelectorOrNode,
sanitizer: sanitizer,
rendererFactory: rendererFactory,
renderer: renderer
};
}
function prodCheckAndUpdateNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
var nodeDef = view.def.nodes[nodeIndex];
checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
return nodeDef.flags & 112 ? asPureExpressionData(view, nodeIndex).value : undefined;
}
function prodCheckNoChangesNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
var nodeDef = view.def.nodes[nodeIndex];
checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
return nodeDef.flags & 112 ? asPureExpressionData(view, nodeIndex).value : undefined;
}
function debugCreateEmbeddedView(parent, anchorDef, context) {
return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [ parent, anchorDef, context ]);
}
function debugCheckAndUpdateView(view) {
return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [ view ]);
}
function debugCheckNoChangesView(view) {
return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [ view ]);
}
function debugDestroyView(view) {
return callWithDebugContext(DebugAction.destroy, destroyView, null, [ view ]);
}
var DebugAction = {};
DebugAction.create = 0;
DebugAction.detectChanges = 1;
DebugAction.checkNoChanges = 2;
DebugAction.destroy = 3;
DebugAction.handleEvent = 4;
DebugAction[DebugAction.create] = "create";
DebugAction[DebugAction.detectChanges] = "detectChanges";
DebugAction[DebugAction.checkNoChanges] = "checkNoChanges";
DebugAction[DebugAction.destroy] = "destroy";
DebugAction[DebugAction.handleEvent] = "handleEvent";
var _currentAction;
var _currentView;
var _currentNodeIndex;
function debugSetCurrentNode(view, nodeIndex) {
_currentView = view;
_currentNodeIndex = nodeIndex;
}
function debugHandleEvent(view, nodeIndex, eventName, event) {
debugSetCurrentNode(view, nodeIndex);
return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [ view, nodeIndex, eventName, event ]);
}
function debugUpdateDirectives(view, checkType) {
if (view.state & 8) {
throw viewDestroyedError(DebugAction[_currentAction]);
}
debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));
return view.def.updateDirectives(debugCheckDirectivesFn, view);
function debugCheckDirectivesFn(view, nodeIndex, argStyle) {
var values = [];
for (var _i = 3; _i < arguments.length; _i++) {
values[_i - 3] = arguments[_i];
}
var nodeDef = view.def.nodes[nodeIndex];
if (checkType === 0) {
debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
} else {
debugCheckNoChangesNode(view, nodeDef, argStyle, values);
}
if (nodeDef.flags & 8192) {
debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));
}
return nodeDef.flags & 112 ? asPureExpressionData(view, nodeDef.index).value : undefined;
}
}
function debugUpdateRenderer(view, checkType) {
if (view.state & 8) {
throw viewDestroyedError(DebugAction[_currentAction]);
}
debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));
return view.def.updateRenderer(debugCheckRenderNodeFn, view);
function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {
var values = [];
for (var _i = 3; _i < arguments.length; _i++) {
values[_i - 3] = arguments[_i];
}
var nodeDef = view.def.nodes[nodeIndex];
if (checkType === 0) {
debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
} else {
debugCheckNoChangesNode(view, nodeDef, argStyle, values);
}
if (nodeDef.flags & 3) {
debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));
}
return nodeDef.flags & 112 ? asPureExpressionData(view, nodeDef.index).value : undefined;
}
}
function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
var changed = checkAndUpdateNode.apply(void 0, [ view, nodeDef, argStyle ].concat(givenValues));
if (changed) {
var values = argStyle === 1 ? givenValues[0] : givenValues;
if (nodeDef.flags & 8192) {
var bindingValues = {};
for (var i = 0; i < nodeDef.bindings.length; i++) {
var binding = nodeDef.bindings[i];
var value = values[i];
if (binding.flags & 8) {
bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] = normalizeDebugBindingValue(value);
}
}
var elDef = nodeDef.parent;
var el = asElementData(view, elDef.index).renderElement;
if (!elDef.element.name) {
view.renderer.setValue(el, "bindings=" + JSON.stringify(bindingValues, null, 2));
} else {
for (var attr in bindingValues) {
var value = bindingValues[attr];
if (value != null) {
view.renderer.setAttribute(el, attr, value);
} else {
view.renderer.removeAttribute(el, attr);
}
}
}
}
}
}
function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
checkNoChangesNode.apply(void 0, [ view, nodeDef, argStyle ].concat(values));
}
function normalizeDebugBindingName(name) {
name = camelCaseToDashCase(name.replace(/[$@]/g, "_"));
return "ng-reflect-" + name;
}
var CAMEL_CASE_REGEXP = /([A-Z])/g;
function camelCaseToDashCase(input) {
return input.replace(CAMEL_CASE_REGEXP, function() {
var m = [];
for (var _i = 0; _i < arguments.length; _i++) {
m[_i] = arguments[_i];
}
return "-" + m[1].toLowerCase();
});
}
function normalizeDebugBindingValue(value) {
try {
return value != null ? value.toString().slice(0, 30) : value;
} catch (e) {
return "[ERROR] Exception while trying to serialize the value";
}
}
function nextDirectiveWithBinding(view, nodeIndex) {
for (var i = nodeIndex; i < view.def.nodes.length; i++) {
var nodeDef = view.def.nodes[i];
if (nodeDef.flags & 8192 && nodeDef.bindings && nodeDef.bindings.length) {
return i;
}
}
return null;
}
function nextRenderNodeWithBinding(view, nodeIndex) {
for (var i = nodeIndex; i < view.def.nodes.length; i++) {
var nodeDef = view.def.nodes[i];
if (nodeDef.flags & 3 && nodeDef.bindings && nodeDef.bindings.length) {
return i;
}
}
return null;
}
var DebugContext_ = function() {
function DebugContext_(view, nodeIndex) {
this.view = view;
this.nodeIndex = nodeIndex;
if (nodeIndex == null) {
this.nodeIndex = nodeIndex = 0;
}
this.nodeDef = view.def.nodes[nodeIndex];
var elDef = this.nodeDef;
var elView = view;
while (elDef && (elDef.flags & 1) === 0) {
elDef = elDef.parent;
}
if (!elDef) {
while (!elDef && elView) {
elDef = viewParentEl(elView);
elView = elView.parent;
}
}
this.elDef = elDef;
this.elView = elView;
}
Object.defineProperty(DebugContext_.prototype, "elOrCompView", {
get: function() {
return asElementData(this.elView, this.elDef.index).componentView || this.view;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext_.prototype, "injector", {
get: function() {
return createInjector(this.elView, this.elDef);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext_.prototype, "component", {
get: function() {
return this.elOrCompView.component;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext_.prototype, "context", {
get: function() {
return this.elOrCompView.context;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext_.prototype, "providerTokens", {
get: function() {
var tokens = [];
if (this.elDef) {
for (var i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
var childDef = this.elView.def.nodes[i];
if (childDef.flags & 10112) {
tokens.push(childDef.provider.token);
}
i += childDef.childCount;
}
}
return tokens;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext_.prototype, "references", {
get: function() {
var references = {};
if (this.elDef) {
collectReferences(this.elView, this.elDef, references);
for (var i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
var childDef = this.elView.def.nodes[i];
if (childDef.flags & 10112) {
collectReferences(this.elView, childDef, references);
}
i += childDef.childCount;
}
}
return references;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext_.prototype, "componentRenderElement", {
get: function() {
var elData = findHostElement(this.elOrCompView);
return elData ? elData.renderElement : undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext_.prototype, "renderNode", {
get: function() {
return this.nodeDef.flags & 2 ? renderNode(this.view, this.nodeDef) : renderNode(this.elView, this.elDef);
},
enumerable: true,
configurable: true
});
DebugContext_.prototype.logError = function(console) {
var values = [];
for (var _i = 1; _i < arguments.length; _i++) {
values[_i - 1] = arguments[_i];
}
var logViewDef;
var logNodeIndex;
if (this.nodeDef.flags & 2) {
logViewDef = this.view.def;
logNodeIndex = this.nodeDef.index;
} else {
logViewDef = this.elView.def;
logNodeIndex = this.elDef.index;
}
var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);
var currRenderNodeIndex = -1;
var nodeLogger = function() {
currRenderNodeIndex++;
if (currRenderNodeIndex === renderNodeIndex) {
return (_a = console.error).bind.apply(_a, [ console ].concat(values));
} else {
return NOOP;
}
var _a;
};
logViewDef.factory(nodeLogger);
if (currRenderNodeIndex < renderNodeIndex) {
console.error("Illegal state: the ViewDefinitionFactory did not call the logger!");
console.error.apply(console, values);
}
};
return DebugContext_;
}();
function getRenderNodeIndex(viewDef$$1, nodeIndex) {
var renderNodeIndex = -1;
for (var i = 0; i <= nodeIndex; i++) {
var nodeDef = viewDef$$1.nodes[i];
if (nodeDef.flags & 3) {
renderNodeIndex++;
}
}
return renderNodeIndex;
}
function findHostElement(view) {
while (view && !isComponentView(view)) {
view = view.parent;
}
if (view.parent) {
return asElementData(view.parent, viewParentEl(view).index);
}
return null;
}
function collectReferences(view, nodeDef, references) {
for (var refName in nodeDef.references) {
references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
}
}
function callWithDebugContext(action, fn, self, args) {
var oldAction = _currentAction;
var oldView = _currentView;
var oldNodeIndex = _currentNodeIndex;
try {
_currentAction = action;
var result = fn.apply(self, args);
_currentView = oldView;
_currentNodeIndex = oldNodeIndex;
_currentAction = oldAction;
return result;
} catch (e) {
if (isViewDebugError(e) || !_currentView) {
throw e;
}
_currentView.state |= 4;
throw viewWrappedDebugError(e, getCurrentDebugContext());
}
}
function getCurrentDebugContext() {
return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;
}
var DebugRendererFactory2 = function() {
function DebugRendererFactory2(delegate) {
this.delegate = delegate;
}
DebugRendererFactory2.prototype.createRenderer = function(element, renderData) {
return new DebugRenderer2(this.delegate.createRenderer(element, renderData));
};
return DebugRendererFactory2;
}();
var DebugRenderer2 = function() {
function DebugRenderer2(delegate) {
this.delegate = delegate;
}
Object.defineProperty(DebugRenderer2.prototype, "data", {
get: function() {
return this.delegate.data;
},
enumerable: true,
configurable: true
});
DebugRenderer2.prototype.destroyNode = function(node) {
removeDebugNodeFromIndex(getDebugNode(node));
if (this.delegate.destroyNode) {
this.delegate.destroyNode(node);
}
};
DebugRenderer2.prototype.destroy = function() {
this.delegate.destroy();
};
DebugRenderer2.prototype.createElement = function(name, namespace) {
var el = this.delegate.createElement(name, namespace);
var debugCtx = getCurrentDebugContext();
if (debugCtx) {
var debugEl = new DebugElement(el, null, debugCtx);
debugEl.name = name;
indexDebugNode(debugEl);
}
return el;
};
DebugRenderer2.prototype.createComment = function(value) {
var comment = this.delegate.createComment(value);
var debugCtx = getCurrentDebugContext();
if (debugCtx) {
indexDebugNode(new DebugNode(comment, null, debugCtx));
}
return comment;
};
DebugRenderer2.prototype.createText = function(value) {
var text = this.delegate.createText(value);
var debugCtx = getCurrentDebugContext();
if (debugCtx) {
indexDebugNode(new DebugNode(text, null, debugCtx));
}
return text;
};
DebugRenderer2.prototype.appendChild = function(parent, newChild) {
var debugEl = getDebugNode(parent);
var debugChildEl = getDebugNode(newChild);
if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
debugEl.addChild(debugChildEl);
}
this.delegate.appendChild(parent, newChild);
};
DebugRenderer2.prototype.insertBefore = function(parent, newChild, refChild) {
var debugEl = getDebugNode(parent);
var debugChildEl = getDebugNode(newChild);
var debugRefEl = getDebugNode(refChild);
if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
debugEl.insertBefore(debugRefEl, debugChildEl);
}
this.delegate.insertBefore(parent, newChild, refChild);
};
DebugRenderer2.prototype.removeChild = function(parent, oldChild) {
var debugEl = getDebugNode(parent);
var debugChildEl = getDebugNode(oldChild);
if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
debugEl.removeChild(debugChildEl);
}
this.delegate.removeChild(parent, oldChild);
};
DebugRenderer2.prototype.selectRootElement = function(selectorOrNode) {
var el = this.delegate.selectRootElement(selectorOrNode);
var debugCtx = getCurrentDebugContext();
if (debugCtx) {
indexDebugNode(new DebugElement(el, null, debugCtx));
}
return el;
};
DebugRenderer2.prototype.setAttribute = function(el, name, value, namespace) {
var debugEl = getDebugNode(el);
if (debugEl && debugEl instanceof DebugElement) {
var fullName = namespace ? namespace + ":" + name : name;
debugEl.attributes[fullName] = value;
}
this.delegate.setAttribute(el, name, value, namespace);
};
DebugRenderer2.prototype.removeAttribute = function(el, name, namespace) {
var debugEl = getDebugNode(el);
if (debugEl && debugEl instanceof DebugElement) {
var fullName = namespace ? namespace + ":" + name : name;
debugEl.attributes[fullName] = null;
}
this.delegate.removeAttribute(el, name, namespace);
};
DebugRenderer2.prototype.addClass = function(el, name) {
var debugEl = getDebugNode(el);
if (debugEl && debugEl instanceof DebugElement) {
debugEl.classes[name] = true;
}
this.delegate.addClass(el, name);
};
DebugRenderer2.prototype.removeClass = function(el, name) {
var debugEl = getDebugNode(el);
if (debugEl && debugEl instanceof DebugElement) {
debugEl.classes[name] = false;
}
this.delegate.removeClass(el, name);
};
DebugRenderer2.prototype.setStyle = function(el, style, value, flags) {
var debugEl = getDebugNode(el);
if (debugEl && debugEl instanceof DebugElement) {
debugEl.styles[style] = value;
}
this.delegate.setStyle(el, style, value, flags);
};
DebugRenderer2.prototype.removeStyle = function(el, style, flags) {
var debugEl = getDebugNode(el);
if (debugEl && debugEl instanceof DebugElement) {
debugEl.styles[style] = null;
}
this.delegate.removeStyle(el, style, flags);
};
DebugRenderer2.prototype.setProperty = function(el, name, value) {
var debugEl = getDebugNode(el);
if (debugEl && debugEl instanceof DebugElement) {
debugEl.properties[name] = value;
}
this.delegate.setProperty(el, name, value);
};
DebugRenderer2.prototype.listen = function(target, eventName, callback) {
if (typeof target !== "string") {
var debugEl = getDebugNode(target);
if (debugEl) {
debugEl.listeners.push(new EventListener(eventName, callback));
}
}
return this.delegate.listen(target, eventName, callback);
};
DebugRenderer2.prototype.parentNode = function(node) {
return this.delegate.parentNode(node);
};
DebugRenderer2.prototype.nextSibling = function(node) {
return this.delegate.nextSibling(node);
};
DebugRenderer2.prototype.setValue = function(node, value) {
return this.delegate.setValue(node, value);
};
return DebugRenderer2;
}();
function _iterableDiffersFactory() {
return defaultIterableDiffers;
}
function _keyValueDiffersFactory() {
return defaultKeyValueDiffers;
}
function _localeFactory(locale) {
return locale || "en-US";
}
function _initViewEngine() {
initServicesIfNeeded();
}
var ApplicationModule = function() {
function ApplicationModule(appRef) {}
return ApplicationModule;
}();
ApplicationModule.decorators = [ {
type: NgModule,
args: [ {
providers: [ ApplicationRef_, {
provide: ApplicationRef,
useExisting: ApplicationRef_
}, ApplicationInitStatus, Compiler, APP_ID_RANDOM_PROVIDER, {
provide: IterableDiffers,
useFactory: _iterableDiffersFactory
}, {
provide: KeyValueDiffers,
useFactory: _keyValueDiffersFactory
}, {
provide: LOCALE_ID,
useFactory: _localeFactory,
deps: [ [ new Inject(LOCALE_ID), new Optional(), new SkipSelf() ] ]
}, {
provide: APP_INITIALIZER,
useValue: _initViewEngine,
multi: true
} ]
} ]
} ];
ApplicationModule.ctorParameters = function() {
return [ {
type: ApplicationRef
} ];
};
var LifecycleHooks = {};
LifecycleHooks.OnInit = 0;
LifecycleHooks.OnDestroy = 1;
LifecycleHooks.DoCheck = 2;
LifecycleHooks.OnChanges = 3;
LifecycleHooks.AfterContentInit = 4;
LifecycleHooks.AfterContentChecked = 5;
LifecycleHooks.AfterViewInit = 6;
LifecycleHooks.AfterViewChecked = 7;
LifecycleHooks[LifecycleHooks.OnInit] = "OnInit";
LifecycleHooks[LifecycleHooks.OnDestroy] = "OnDestroy";
LifecycleHooks[LifecycleHooks.DoCheck] = "DoCheck";
LifecycleHooks[LifecycleHooks.OnChanges] = "OnChanges";
LifecycleHooks[LifecycleHooks.AfterContentInit] = "AfterContentInit";
LifecycleHooks[LifecycleHooks.AfterContentChecked] = "AfterContentChecked";
LifecycleHooks[LifecycleHooks.AfterViewInit] = "AfterViewInit";
LifecycleHooks[LifecycleHooks.AfterViewChecked] = "AfterViewChecked";
var LIFECYCLE_HOOKS_VALUES = [ LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked ];
function trigger$1(name, definitions) {
return {
name: name,
definitions: definitions
};
}
function animate$1(timings, styles) {
if (styles === void 0) {
styles = null;
}
return {
type: 4,
styles: styles,
timings: timings
};
}
function group$1(steps) {
return {
type: 3,
steps: steps
};
}
function sequence$1(steps) {
return {
type: 2,
steps: steps
};
}
function style$1(tokens) {
return {
type: 6,
styles: tokens
};
}
function state$1(name, styles) {
return {
type: 0,
name: name,
styles: styles
};
}
function keyframes$1(steps) {
return {
type: 5,
steps: steps
};
}
function transition$1(stateChangeExpr, steps) {
return {
type: 1,
expr: stateChangeExpr,
animation: steps
};
}
var AUTO_STYLE$$1 = "*";
function trigger$$1(name, definitions) {
return trigger$1(name, definitions);
}
function animate$$1(timings, styles) {
return animate$1(timings, styles);
}
function group$$1(steps) {
return group$1(steps);
}
function sequence$$1(steps) {
return sequence$1(steps);
}
function style$$1(tokens) {
return style$1(tokens);
}
function state$$1(name, styles) {
return state$1(name, styles);
}
function keyframes$$1(steps) {
return keyframes$1(steps);
}
function transition$$1(stateChangeExpr, steps) {
return transition$1(stateChangeExpr, steps);
}
exports.Class = Class;
exports.createPlatform = createPlatform;
exports.assertPlatform = assertPlatform;
exports.destroyPlatform = destroyPlatform;
exports.getPlatform = getPlatform;
exports.PlatformRef = PlatformRef;
exports.ApplicationRef = ApplicationRef;
exports.enableProdMode = enableProdMode;
exports.isDevMode = isDevMode;
exports.createPlatformFactory = createPlatformFactory;
exports.NgProbeToken = NgProbeToken;
exports.APP_ID = APP_ID;
exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;
exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;
exports.PLATFORM_ID = PLATFORM_ID;
exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;
exports.APP_INITIALIZER = APP_INITIALIZER;
exports.ApplicationInitStatus = ApplicationInitStatus;
exports.DebugElement = DebugElement;
exports.DebugNode = DebugNode;
exports.asNativeElements = asNativeElements;
exports.getDebugNode = getDebugNode;
exports.Testability = Testability;
exports.TestabilityRegistry = TestabilityRegistry;
exports.setTestabilityGetter = setTestabilityGetter;
exports.TRANSLATIONS = TRANSLATIONS;
exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;
exports.LOCALE_ID = LOCALE_ID;
exports.MissingTranslationStrategy = MissingTranslationStrategy;
exports.ApplicationModule = ApplicationModule;
exports.wtfCreateScope = wtfCreateScope;
exports.wtfLeave = wtfLeave;
exports.wtfStartTimeRange = wtfStartTimeRange;
exports.wtfEndTimeRange = wtfEndTimeRange;
exports.Type = Type;
exports.EventEmitter = EventEmitter;
exports.ErrorHandler = ErrorHandler;
exports.Sanitizer = Sanitizer;
exports.SecurityContext = SecurityContext;
exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;
exports.Attribute = Attribute;
exports.ContentChild = ContentChild;
exports.ContentChildren = ContentChildren;
exports.Query = Query;
exports.ViewChild = ViewChild;
exports.ViewChildren = ViewChildren;
exports.Component = Component;
exports.Directive = Directive;
exports.HostBinding = HostBinding;
exports.HostListener = HostListener;
exports.Input = Input;
exports.Output = Output;
exports.Pipe = Pipe;
exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;
exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;
exports.NgModule = NgModule;
exports.ViewEncapsulation = ViewEncapsulation;
exports.Version = Version;
exports.VERSION = VERSION;
exports.forwardRef = forwardRef;
exports.resolveForwardRef = resolveForwardRef;
exports.Injector = Injector;
exports.ReflectiveInjector = ReflectiveInjector;
exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;
exports.ReflectiveKey = ReflectiveKey;
exports.InjectionToken = InjectionToken;
exports.OpaqueToken = OpaqueToken;
exports.Inject = Inject;
exports.Optional = Optional;
exports.Injectable = Injectable;
exports.Self = Self;
exports.SkipSelf = SkipSelf;
exports.Host = Host;
exports.NgZone = NgZone;
exports.RenderComponentType = RenderComponentType;
exports.Renderer = Renderer;
exports.Renderer2 = Renderer2;
exports.RendererFactory2 = RendererFactory2;
exports.RendererStyleFlags2 = RendererStyleFlags2;
exports.RootRenderer = RootRenderer;
exports.COMPILER_OPTIONS = COMPILER_OPTIONS;
exports.Compiler = Compiler;
exports.CompilerFactory = CompilerFactory;
exports.ModuleWithComponentFactories = ModuleWithComponentFactories;
exports.ComponentFactory = ComponentFactory;
exports.ComponentRef = ComponentRef;
exports.ComponentFactoryResolver = ComponentFactoryResolver;
exports.ElementRef = ElementRef;
exports.NgModuleFactory = NgModuleFactory;
exports.NgModuleRef = NgModuleRef;
exports.NgModuleFactoryLoader = NgModuleFactoryLoader;
exports.getModuleFactory = getModuleFactory;
exports.QueryList = QueryList;
exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;
exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;
exports.TemplateRef = TemplateRef;
exports.ViewContainerRef = ViewContainerRef;
exports.EmbeddedViewRef = EmbeddedViewRef;
exports.ViewRef = ViewRef;
exports.ChangeDetectionStrategy = ChangeDetectionStrategy;
exports.ChangeDetectorRef = ChangeDetectorRef;
exports.DefaultIterableDiffer = DefaultIterableDiffer;
exports.IterableDiffers = IterableDiffers;
exports.KeyValueDiffers = KeyValueDiffers;
exports.SimpleChange = SimpleChange;
exports.WrappedValue = WrappedValue;
exports.platformCore = platformCore;
exports.ɵALLOW_MULTIPLE_PLATFORMS = ALLOW_MULTIPLE_PLATFORMS;
exports.ɵAPP_ID_RANDOM_PROVIDER = APP_ID_RANDOM_PROVIDER;
exports.ɵValueUnwrapper = ValueUnwrapper;
exports.ɵdevModeEqual = devModeEqual;
exports.ɵisListLikeIterable = isListLikeIterable;
exports.ɵChangeDetectorStatus = ChangeDetectorStatus;
exports.ɵisDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy;
exports.ɵConsole = Console;
exports.ɵERROR_COMPONENT_TYPE = ERROR_COMPONENT_TYPE;
exports.ɵComponentFactory = ComponentFactory;
exports.ɵCodegenComponentFactoryResolver = CodegenComponentFactoryResolver;
exports.ɵLIFECYCLE_HOOKS_VALUES = LIFECYCLE_HOOKS_VALUES;
exports.ɵLifecycleHooks = LifecycleHooks;
exports.ɵViewMetadata = ViewMetadata;
exports.ɵReflector = Reflector;
exports.ɵreflector = reflector;
exports.ɵReflectionCapabilities = ReflectionCapabilities;
exports.ɵReflectorReader = ReflectorReader;
exports.ɵRenderDebugInfo = RenderDebugInfo;
exports.ɵglobal = _global;
exports.ɵlooseIdentical = looseIdentical;
exports.ɵstringify = stringify;
exports.ɵmakeDecorator = makeDecorator;
exports.ɵisObservable = isObservable;
exports.ɵisPromise = isPromise;
exports.ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR;
exports.ɵNgModuleInjector = NgModuleInjector;
exports.ɵregisterModuleFactory = registerModuleFactory;
exports.ɵEMPTY_ARRAY = EMPTY_ARRAY;
exports.ɵEMPTY_MAP = EMPTY_MAP;
exports.ɵand = anchorDef;
exports.ɵccf = createComponentFactory;
exports.ɵcrt = createRendererType2;
exports.ɵdid = directiveDef;
exports.ɵeld = elementDef;
exports.ɵelementEventFullName = elementEventFullName;
exports.ɵgetComponentViewDefinitionFactory = getComponentViewDefinitionFactory;
exports.ɵinlineInterpolate = inlineInterpolate;
exports.ɵinterpolate = interpolate;
exports.ɵncd = ngContentDef;
exports.ɵnov = nodeValue;
exports.ɵpid = pipeDef;
exports.ɵprd = providerDef;
exports.ɵpad = pureArrayDef;
exports.ɵpod = pureObjectDef;
exports.ɵppd = purePipeDef;
exports.ɵqud = queryDef;
exports.ɵted = textDef;
exports.ɵunv = unwrapValue;
exports.ɵvid = viewDef;
exports.AUTO_STYLE = AUTO_STYLE$$1;
exports.trigger = trigger$$1;
exports.animate = animate$$1;
exports.group = group$$1;
exports.sequence = sequence$$1;
exports.style = style$$1;
exports.state = state$$1;
exports.keyframes = keyframes$$1;
exports.transition = transition$$1;
exports.ɵba = animate$1;
exports.ɵbb = group$1;
exports.ɵbf = keyframes$1;
exports.ɵbc = sequence$1;
exports.ɵbe = state$1;
exports.ɵbd = style$1;
exports.ɵbg = transition$1;
exports.ɵz = trigger$1;
exports.ɵo = _initViewEngine;
exports.ɵl = _iterableDiffersFactory;
exports.ɵm = _keyValueDiffersFactory;
exports.ɵn = _localeFactory;
exports.ɵf = ApplicationRef_;
exports.ɵg = _appIdRandomProviderFactory;
exports.ɵh = defaultIterableDiffers;
exports.ɵi = defaultKeyValueDiffers;
exports.ɵj = DefaultIterableDifferFactory;
exports.ɵk = DefaultKeyValueDifferFactory;
exports.ɵc = ReflectiveInjector_;
exports.ɵd = ReflectiveDependency;
exports.ɵe = resolveReflectiveProviders;
exports.ɵp = wtfEnabled;
exports.ɵr = createScope$1;
exports.ɵq = detectWTF;
exports.ɵu = endTimeRange;
exports.ɵs = leave;
exports.ɵt = startTimeRange;
exports.ɵa = makeParamDecorator;
exports.ɵb = makePropDecorator;
exports.ɵw = _def;
exports.ɵx = DebugContext;
Object.defineProperty(exports, "__esModule", {
value: true
});
});
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(94);
var toSubscriber_1 = __webpack_require__(95);
var observable_1 = __webpack_require__(106);
var Observable = function() {
function Observable(subscribe) {
this._isScalar = false;
if (subscribe) {
this._subscribe = subscribe;
}
}
Observable.prototype.lift = function(operator) {
var observable = new Observable();
observable.source = this;
observable.operator = operator;
return observable;
};
Observable.prototype.subscribe = function(observerOrNext, error, complete) {
var operator = this.operator;
var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
if (operator) {
operator.call(sink, this.source);
} else {
sink.add(this._trySubscribe(sink));
}
if (sink.syncErrorThrowable) {
sink.syncErrorThrowable = false;
if (sink.syncErrorThrown) {
throw sink.syncErrorValue;
}
}
return sink;
};
Observable.prototype._trySubscribe = function(sink) {
try {
return this._subscribe(sink);
} catch (err) {
sink.syncErrorThrown = true;
sink.syncErrorValue = err;
sink.error(err);
}
};
Observable.prototype.forEach = function(next, PromiseCtor) {
var _this = this;
if (!PromiseCtor) {
if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
PromiseCtor = root_1.root.Rx.config.Promise;
} else if (root_1.root.Promise) {
PromiseCtor = root_1.root.Promise;
}
}
if (!PromiseCtor) {
throw new Error("no Promise impl found");
}
return new PromiseCtor(function(resolve, reject) {
var subscription;
subscription = _this.subscribe(function(value) {
if (subscription) {
try {
next(value);
} catch (err) {
reject(err);
subscription.unsubscribe();
}
} else {
next(value);
}
}, reject, resolve);
});
};
Observable.prototype._subscribe = function(subscriber) {
return this.source.subscribe(subscriber);
};
Observable.prototype[observable_1.observable] = function() {
return this;
};
Observable.create = function(subscribe) {
return new Observable(subscribe);
};
return Observable;
}();
exports.Observable = Observable;
}, function(module, exports) {
"use strict";
if (typeof window == "object" && window.window === window) {
exports.root = window;
} else if (typeof self == "object" && self.self === self) {
exports.root = self;
} else if (typeof global == "object" && global.global === global) {
exports.root = global;
} else {
(function() {
throw new Error("RxJS could not find any global context (window, self, global)");
})();
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Subscriber_1 = __webpack_require__(96);
var rxSubscriber_1 = __webpack_require__(105);
var Observer_1 = __webpack_require__(104);
function toSubscriber(nextOrObserver, error, complete) {
if (nextOrObserver) {
if (nextOrObserver instanceof Subscriber_1.Subscriber) {
return nextOrObserver;
}
if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {
return nextOrObserver[rxSubscriber_1.rxSubscriber]();
}
}
if (!nextOrObserver && !error && !complete) {
return new Subscriber_1.Subscriber(Observer_1.empty);
}
return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
exports.toSubscriber = toSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isFunction_1 = __webpack_require__(97);
var Subscription_1 = __webpack_require__(98);
var Observer_1 = __webpack_require__(104);
var rxSubscriber_1 = __webpack_require__(105);
var Subscriber = function(_super) {
__extends(Subscriber, _super);
function Subscriber(destinationOrNext, error, complete) {
_super.call(this);
this.syncErrorValue = null;
this.syncErrorThrown = false;
this.syncErrorThrowable = false;
this.isStopped = false;
switch (arguments.length) {
case 0:
this.destination = Observer_1.empty;
break;

case 1:
if (!destinationOrNext) {
this.destination = Observer_1.empty;
break;
}
if (typeof destinationOrNext === "object") {
if (destinationOrNext instanceof Subscriber) {
this.destination = destinationOrNext;
this.destination.add(this);
} else {
this.syncErrorThrowable = true;
this.destination = new SafeSubscriber(this, destinationOrNext);
}
break;
}

default:
this.syncErrorThrowable = true;
this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
break;
}
}
Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function() {
return this;
};
Subscriber.create = function(next, error, complete) {
var subscriber = new Subscriber(next, error, complete);
subscriber.syncErrorThrowable = false;
return subscriber;
};
Subscriber.prototype.next = function(value) {
if (!this.isStopped) {
this._next(value);
}
};
Subscriber.prototype.error = function(err) {
if (!this.isStopped) {
this.isStopped = true;
this._error(err);
}
};
Subscriber.prototype.complete = function() {
if (!this.isStopped) {
this.isStopped = true;
this._complete();
}
};
Subscriber.prototype.unsubscribe = function() {
if (this.closed) {
return;
}
this.isStopped = true;
_super.prototype.unsubscribe.call(this);
};
Subscriber.prototype._next = function(value) {
this.destination.next(value);
};
Subscriber.prototype._error = function(err) {
this.destination.error(err);
this.unsubscribe();
};
Subscriber.prototype._complete = function() {
this.destination.complete();
this.unsubscribe();
};
Subscriber.prototype._unsubscribeAndRecycle = function() {
var _a = this, _parent = _a._parent, _parents = _a._parents;
this._parent = null;
this._parents = null;
this.unsubscribe();
this.closed = false;
this.isStopped = false;
this._parent = _parent;
this._parents = _parents;
return this;
};
return Subscriber;
}(Subscription_1.Subscription);
exports.Subscriber = Subscriber;
var SafeSubscriber = function(_super) {
__extends(SafeSubscriber, _super);
function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
_super.call(this);
this._parentSubscriber = _parentSubscriber;
var next;
var context = this;
if (isFunction_1.isFunction(observerOrNext)) {
next = observerOrNext;
} else if (observerOrNext) {
next = observerOrNext.next;
error = observerOrNext.error;
complete = observerOrNext.complete;
if (observerOrNext !== Observer_1.empty) {
context = Object.create(observerOrNext);
if (isFunction_1.isFunction(context.unsubscribe)) {
this.add(context.unsubscribe.bind(context));
}
context.unsubscribe = this.unsubscribe.bind(this);
}
}
this._context = context;
this._next = next;
this._error = error;
this._complete = complete;
}
SafeSubscriber.prototype.next = function(value) {
if (!this.isStopped && this._next) {
var _parentSubscriber = this._parentSubscriber;
if (!_parentSubscriber.syncErrorThrowable) {
this.__tryOrUnsub(this._next, value);
} else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
this.unsubscribe();
}
}
};
SafeSubscriber.prototype.error = function(err) {
if (!this.isStopped) {
var _parentSubscriber = this._parentSubscriber;
if (this._error) {
if (!_parentSubscriber.syncErrorThrowable) {
this.__tryOrUnsub(this._error, err);
this.unsubscribe();
} else {
this.__tryOrSetError(_parentSubscriber, this._error, err);
this.unsubscribe();
}
} else if (!_parentSubscriber.syncErrorThrowable) {
this.unsubscribe();
throw err;
} else {
_parentSubscriber.syncErrorValue = err;
_parentSubscriber.syncErrorThrown = true;
this.unsubscribe();
}
}
};
SafeSubscriber.prototype.complete = function() {
if (!this.isStopped) {
var _parentSubscriber = this._parentSubscriber;
if (this._complete) {
if (!_parentSubscriber.syncErrorThrowable) {
this.__tryOrUnsub(this._complete);
this.unsubscribe();
} else {
this.__tryOrSetError(_parentSubscriber, this._complete);
this.unsubscribe();
}
} else {
this.unsubscribe();
}
}
};
SafeSubscriber.prototype.__tryOrUnsub = function(fn, value) {
try {
fn.call(this._context, value);
} catch (err) {
this.unsubscribe();
throw err;
}
};
SafeSubscriber.prototype.__tryOrSetError = function(parent, fn, value) {
try {
fn.call(this._context, value);
} catch (err) {
parent.syncErrorValue = err;
parent.syncErrorThrown = true;
return true;
}
return false;
};
SafeSubscriber.prototype._unsubscribe = function() {
var _parentSubscriber = this._parentSubscriber;
this._context = null;
this._parentSubscriber = null;
_parentSubscriber.unsubscribe();
};
return SafeSubscriber;
}(Subscriber);
}, function(module, exports) {
"use strict";
function isFunction(x) {
return typeof x === "function";
}
exports.isFunction = isFunction;
}, function(module, exports, __webpack_require__) {
"use strict";
var isArray_1 = __webpack_require__(99);
var isObject_1 = __webpack_require__(100);
var isFunction_1 = __webpack_require__(97);
var tryCatch_1 = __webpack_require__(101);
var errorObject_1 = __webpack_require__(102);
var UnsubscriptionError_1 = __webpack_require__(103);
var Subscription = function() {
function Subscription(unsubscribe) {
this.closed = false;
this._parent = null;
this._parents = null;
this._subscriptions = null;
if (unsubscribe) {
this._unsubscribe = unsubscribe;
}
}
Subscription.prototype.unsubscribe = function() {
var hasErrors = false;
var errors;
if (this.closed) {
return;
}
var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
this.closed = true;
this._parent = null;
this._parents = null;
this._subscriptions = null;
var index = -1;
var len = _parents ? _parents.length : 0;
while (_parent) {
_parent.remove(this);
_parent = ++index < len && _parents[index] || null;
}
if (isFunction_1.isFunction(_unsubscribe)) {
var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
if (trial === errorObject_1.errorObject) {
hasErrors = true;
errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ? flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [ errorObject_1.errorObject.e ]);
}
}
if (isArray_1.isArray(_subscriptions)) {
index = -1;
len = _subscriptions.length;
while (++index < len) {
var sub = _subscriptions[index];
if (isObject_1.isObject(sub)) {
var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
if (trial === errorObject_1.errorObject) {
hasErrors = true;
errors = errors || [];
var err = errorObject_1.errorObject.e;
if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
} else {
errors.push(err);
}
}
}
}
}
if (hasErrors) {
throw new UnsubscriptionError_1.UnsubscriptionError(errors);
}
};
Subscription.prototype.add = function(teardown) {
if (!teardown || teardown === Subscription.EMPTY) {
return Subscription.EMPTY;
}
if (teardown === this) {
return this;
}
var subscription = teardown;
switch (typeof teardown) {
case "function":
subscription = new Subscription(teardown);

case "object":
if (subscription.closed || typeof subscription.unsubscribe !== "function") {
return subscription;
} else if (this.closed) {
subscription.unsubscribe();
return subscription;
} else if (typeof subscription._addParent !== "function") {
var tmp = subscription;
subscription = new Subscription();
subscription._subscriptions = [ tmp ];
}
break;

default:
throw new Error("unrecognized teardown " + teardown + " added to Subscription.");
}
var subscriptions = this._subscriptions || (this._subscriptions = []);
subscriptions.push(subscription);
subscription._addParent(this);
return subscription;
};
Subscription.prototype.remove = function(subscription) {
var subscriptions = this._subscriptions;
if (subscriptions) {
var subscriptionIndex = subscriptions.indexOf(subscription);
if (subscriptionIndex !== -1) {
subscriptions.splice(subscriptionIndex, 1);
}
}
};
Subscription.prototype._addParent = function(parent) {
var _a = this, _parent = _a._parent, _parents = _a._parents;
if (!_parent || _parent === parent) {
this._parent = parent;
} else if (!_parents) {
this._parents = [ parent ];
} else if (_parents.indexOf(parent) === -1) {
_parents.push(parent);
}
};
Subscription.EMPTY = function(empty) {
empty.closed = true;
return empty;
}(new Subscription());
return Subscription;
}();
exports.Subscription = Subscription;
function flattenUnsubscriptionErrors(errors) {
return errors.reduce(function(errs, err) {
return errs.concat(err instanceof UnsubscriptionError_1.UnsubscriptionError ? err.errors : err);
}, []);
}
}, function(module, exports) {
"use strict";
exports.isArray = Array.isArray || function(x) {
return x && typeof x.length === "number";
};
}, function(module, exports) {
"use strict";
function isObject(x) {
return x != null && typeof x === "object";
}
exports.isObject = isObject;
}, function(module, exports, __webpack_require__) {
"use strict";
var errorObject_1 = __webpack_require__(102);
var tryCatchTarget;
function tryCatcher() {
try {
return tryCatchTarget.apply(this, arguments);
} catch (e) {
errorObject_1.errorObject.e = e;
return errorObject_1.errorObject;
}
}
function tryCatch(fn) {
tryCatchTarget = fn;
return tryCatcher;
}
exports.tryCatch = tryCatch;
}, function(module, exports) {
"use strict";
exports.errorObject = {
e: {}
};
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var UnsubscriptionError = function(_super) {
__extends(UnsubscriptionError, _super);
function UnsubscriptionError(errors) {
_super.call(this);
this.errors = errors;
var err = Error.call(this, errors ? errors.length + " errors occurred during unsubscription:\n  " + errors.map(function(err, i) {
return i + 1 + ") " + err.toString();
}).join("\n  ") : "");
this.name = err.name = "UnsubscriptionError";
this.stack = err.stack;
this.message = err.message;
}
return UnsubscriptionError;
}(Error);
exports.UnsubscriptionError = UnsubscriptionError;
}, function(module, exports) {
"use strict";
exports.empty = {
closed: true,
next: function(value) {},
error: function(err) {
throw err;
},
complete: function() {}
};
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(94);
var Symbol = root_1.root.Symbol;
exports.rxSubscriber = typeof Symbol === "function" && typeof Symbol.for === "function" ? Symbol.for("rxSubscriber") : "@@rxSubscriber";
exports.$$rxSubscriber = exports.rxSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(94);
function getSymbolObservable(context) {
var $$observable;
var Symbol = context.Symbol;
if (typeof Symbol === "function") {
if (Symbol.observable) {
$$observable = Symbol.observable;
} else {
$$observable = Symbol("observable");
Symbol.observable = $$observable;
}
} else {
$$observable = "@@observable";
}
return $$observable;
}
exports.getSymbolObservable = getSymbolObservable;
exports.observable = getSymbolObservable(root_1.root);
exports.$$observable = exports.observable;
}, function(module, exports, __webpack_require__) {
"use strict";
var merge_1 = __webpack_require__(108);
exports.merge = merge_1.mergeStatic;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var ArrayObservable_1 = __webpack_require__(109);
var mergeAll_1 = __webpack_require__(113);
var isScheduler_1 = __webpack_require__(112);
function merge() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
return this.lift.call(mergeStatic.apply(void 0, [ this ].concat(observables)));
}
exports.merge = merge;
function mergeStatic() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
var concurrent = Number.POSITIVE_INFINITY;
var scheduler = null;
var last = observables[observables.length - 1];
if (isScheduler_1.isScheduler(last)) {
scheduler = observables.pop();
if (observables.length > 1 && typeof observables[observables.length - 1] === "number") {
concurrent = observables.pop();
}
} else if (typeof last === "number") {
concurrent = observables.pop();
}
if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
return observables[0];
}
return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));
}
exports.mergeStatic = mergeStatic;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var ScalarObservable_1 = __webpack_require__(110);
var EmptyObservable_1 = __webpack_require__(111);
var isScheduler_1 = __webpack_require__(112);
var ArrayObservable = function(_super) {
__extends(ArrayObservable, _super);
function ArrayObservable(array, scheduler) {
_super.call(this);
this.array = array;
this.scheduler = scheduler;
if (!scheduler && array.length === 1) {
this._isScalar = true;
this.value = array[0];
}
}
ArrayObservable.create = function(array, scheduler) {
return new ArrayObservable(array, scheduler);
};
ArrayObservable.of = function() {
var array = [];
for (var _i = 0; _i < arguments.length; _i++) {
array[_i - 0] = arguments[_i];
}
var scheduler = array[array.length - 1];
if (isScheduler_1.isScheduler(scheduler)) {
array.pop();
} else {
scheduler = null;
}
var len = array.length;
if (len > 1) {
return new ArrayObservable(array, scheduler);
} else if (len === 1) {
return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
} else {
return new EmptyObservable_1.EmptyObservable(scheduler);
}
};
ArrayObservable.dispatch = function(state) {
var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;
if (index >= count) {
subscriber.complete();
return;
}
subscriber.next(array[index]);
if (subscriber.closed) {
return;
}
state.index = index + 1;
this.schedule(state);
};
ArrayObservable.prototype._subscribe = function(subscriber) {
var index = 0;
var array = this.array;
var count = array.length;
var scheduler = this.scheduler;
if (scheduler) {
return scheduler.schedule(ArrayObservable.dispatch, 0, {
array: array,
index: index,
count: count,
subscriber: subscriber
});
} else {
for (var i = 0; i < count && !subscriber.closed; i++) {
subscriber.next(array[i]);
}
subscriber.complete();
}
};
return ArrayObservable;
}(Observable_1.Observable);
exports.ArrayObservable = ArrayObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var ScalarObservable = function(_super) {
__extends(ScalarObservable, _super);
function ScalarObservable(value, scheduler) {
_super.call(this);
this.value = value;
this.scheduler = scheduler;
this._isScalar = true;
if (scheduler) {
this._isScalar = false;
}
}
ScalarObservable.create = function(value, scheduler) {
return new ScalarObservable(value, scheduler);
};
ScalarObservable.dispatch = function(state) {
var done = state.done, value = state.value, subscriber = state.subscriber;
if (done) {
subscriber.complete();
return;
}
subscriber.next(value);
if (subscriber.closed) {
return;
}
state.done = true;
this.schedule(state);
};
ScalarObservable.prototype._subscribe = function(subscriber) {
var value = this.value;
var scheduler = this.scheduler;
if (scheduler) {
return scheduler.schedule(ScalarObservable.dispatch, 0, {
done: false,
value: value,
subscriber: subscriber
});
} else {
subscriber.next(value);
if (!subscriber.closed) {
subscriber.complete();
}
}
};
return ScalarObservable;
}(Observable_1.Observable);
exports.ScalarObservable = ScalarObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var EmptyObservable = function(_super) {
__extends(EmptyObservable, _super);
function EmptyObservable(scheduler) {
_super.call(this);
this.scheduler = scheduler;
}
EmptyObservable.create = function(scheduler) {
return new EmptyObservable(scheduler);
};
EmptyObservable.dispatch = function(arg) {
var subscriber = arg.subscriber;
subscriber.complete();
};
EmptyObservable.prototype._subscribe = function(subscriber) {
var scheduler = this.scheduler;
if (scheduler) {
return scheduler.schedule(EmptyObservable.dispatch, 0, {
subscriber: subscriber
});
} else {
subscriber.complete();
}
};
return EmptyObservable;
}(Observable_1.Observable);
exports.EmptyObservable = EmptyObservable;
}, function(module, exports) {
"use strict";
function isScheduler(value) {
return value && typeof value.schedule === "function";
}
exports.isScheduler = isScheduler;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function mergeAll(concurrent) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
return this.lift(new MergeAllOperator(concurrent));
}
exports.mergeAll = mergeAll;
var MergeAllOperator = function() {
function MergeAllOperator(concurrent) {
this.concurrent = concurrent;
}
MergeAllOperator.prototype.call = function(observer, source) {
return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));
};
return MergeAllOperator;
}();
exports.MergeAllOperator = MergeAllOperator;
var MergeAllSubscriber = function(_super) {
__extends(MergeAllSubscriber, _super);
function MergeAllSubscriber(destination, concurrent) {
_super.call(this, destination);
this.concurrent = concurrent;
this.hasCompleted = false;
this.buffer = [];
this.active = 0;
}
MergeAllSubscriber.prototype._next = function(observable) {
if (this.active < this.concurrent) {
this.active++;
this.add(subscribeToResult_1.subscribeToResult(this, observable));
} else {
this.buffer.push(observable);
}
};
MergeAllSubscriber.prototype._complete = function() {
this.hasCompleted = true;
if (this.active === 0 && this.buffer.length === 0) {
this.destination.complete();
}
};
MergeAllSubscriber.prototype.notifyComplete = function(innerSub) {
var buffer = this.buffer;
this.remove(innerSub);
this.active--;
if (buffer.length > 0) {
this._next(buffer.shift());
} else if (this.active === 0 && this.hasCompleted) {
this.destination.complete();
}
};
return MergeAllSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.MergeAllSubscriber = MergeAllSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var OuterSubscriber = function(_super) {
__extends(OuterSubscriber, _super);
function OuterSubscriber() {
_super.apply(this, arguments);
}
OuterSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.destination.next(innerValue);
};
OuterSubscriber.prototype.notifyError = function(error, innerSub) {
this.destination.error(error);
};
OuterSubscriber.prototype.notifyComplete = function(innerSub) {
this.destination.complete();
};
return OuterSubscriber;
}(Subscriber_1.Subscriber);
exports.OuterSubscriber = OuterSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(94);
var isArrayLike_1 = __webpack_require__(116);
var isPromise_1 = __webpack_require__(117);
var isObject_1 = __webpack_require__(100);
var Observable_1 = __webpack_require__(93);
var iterator_1 = __webpack_require__(118);
var InnerSubscriber_1 = __webpack_require__(119);
var observable_1 = __webpack_require__(106);
function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
if (destination.closed) {
return null;
}
if (result instanceof Observable_1.Observable) {
if (result._isScalar) {
destination.next(result.value);
destination.complete();
return null;
} else {
return result.subscribe(destination);
}
} else if (isArrayLike_1.isArrayLike(result)) {
for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
destination.next(result[i]);
}
if (!destination.closed) {
destination.complete();
}
} else if (isPromise_1.isPromise(result)) {
result.then(function(value) {
if (!destination.closed) {
destination.next(value);
destination.complete();
}
}, function(err) {
return destination.error(err);
}).then(null, function(err) {
root_1.root.setTimeout(function() {
throw err;
});
});
return destination;
} else if (result && typeof result[iterator_1.iterator] === "function") {
var iterator = result[iterator_1.iterator]();
do {
var item = iterator.next();
if (item.done) {
destination.complete();
break;
}
destination.next(item.value);
if (destination.closed) {
break;
}
} while (true);
} else if (result && typeof result[observable_1.observable] === "function") {
var obs = result[observable_1.observable]();
if (typeof obs.subscribe !== "function") {
destination.error(new TypeError("Provided object does not correctly implement Symbol.observable"));
} else {
return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
}
} else {
var value = isObject_1.isObject(result) ? "an invalid object" : "'" + result + "'";
var msg = "You provided " + value + " where a stream was expected." + " You can provide an Observable, Promise, Array, or Iterable.";
destination.error(new TypeError(msg));
}
return null;
}
exports.subscribeToResult = subscribeToResult;
}, function(module, exports) {
"use strict";
exports.isArrayLike = function(x) {
return x && typeof x.length === "number";
};
}, function(module, exports) {
"use strict";
function isPromise(value) {
return value && typeof value.subscribe !== "function" && typeof value.then === "function";
}
exports.isPromise = isPromise;
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(94);
function symbolIteratorPonyfill(root) {
var Symbol = root.Symbol;
if (typeof Symbol === "function") {
if (!Symbol.iterator) {
Symbol.iterator = Symbol("iterator polyfill");
}
return Symbol.iterator;
} else {
var Set_1 = root.Set;
if (Set_1 && typeof new Set_1()["@@iterator"] === "function") {
return "@@iterator";
}
var Map_1 = root.Map;
if (Map_1) {
var keys = Object.getOwnPropertyNames(Map_1.prototype);
for (var i = 0; i < keys.length; ++i) {
var key = keys[i];
if (key !== "entries" && key !== "size" && Map_1.prototype[key] === Map_1.prototype["entries"]) {
return key;
}
}
}
return "@@iterator";
}
}
exports.symbolIteratorPonyfill = symbolIteratorPonyfill;
exports.iterator = symbolIteratorPonyfill(root_1.root);
exports.$$iterator = exports.iterator;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var InnerSubscriber = function(_super) {
__extends(InnerSubscriber, _super);
function InnerSubscriber(parent, outerValue, outerIndex) {
_super.call(this);
this.parent = parent;
this.outerValue = outerValue;
this.outerIndex = outerIndex;
this.index = 0;
}
InnerSubscriber.prototype._next = function(value) {
this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
};
InnerSubscriber.prototype._error = function(error) {
this.parent.notifyError(error, this);
this.unsubscribe();
};
InnerSubscriber.prototype._complete = function() {
this.parent.notifyComplete(this);
this.unsubscribe();
};
return InnerSubscriber;
}(Subscriber_1.Subscriber);
exports.InnerSubscriber = InnerSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var multicast_1 = __webpack_require__(121);
var Subject_1 = __webpack_require__(123);
function shareSubjectFactory() {
return new Subject_1.Subject();
}
function share() {
return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
}
exports.share = share;
}, function(module, exports, __webpack_require__) {
"use strict";
var ConnectableObservable_1 = __webpack_require__(122);
function multicast(subjectOrSubjectFactory, selector) {
var subjectFactory;
if (typeof subjectOrSubjectFactory === "function") {
subjectFactory = subjectOrSubjectFactory;
} else {
subjectFactory = function subjectFactory() {
return subjectOrSubjectFactory;
};
}
if (typeof selector === "function") {
return this.lift(new MulticastOperator(subjectFactory, selector));
}
var connectable = Object.create(this, ConnectableObservable_1.connectableObservableDescriptor);
connectable.source = this;
connectable.subjectFactory = subjectFactory;
return connectable;
}
exports.multicast = multicast;
var MulticastOperator = function() {
function MulticastOperator(subjectFactory, selector) {
this.subjectFactory = subjectFactory;
this.selector = selector;
}
MulticastOperator.prototype.call = function(subscriber, source) {
var selector = this.selector;
var subject = this.subjectFactory();
var subscription = selector(subject).subscribe(subscriber);
subscription.add(source.subscribe(subject));
return subscription;
};
return MulticastOperator;
}();
exports.MulticastOperator = MulticastOperator;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(123);
var Observable_1 = __webpack_require__(93);
var Subscriber_1 = __webpack_require__(96);
var Subscription_1 = __webpack_require__(98);
var ConnectableObservable = function(_super) {
__extends(ConnectableObservable, _super);
function ConnectableObservable(source, subjectFactory) {
_super.call(this);
this.source = source;
this.subjectFactory = subjectFactory;
this._refCount = 0;
}
ConnectableObservable.prototype._subscribe = function(subscriber) {
return this.getSubject().subscribe(subscriber);
};
ConnectableObservable.prototype.getSubject = function() {
var subject = this._subject;
if (!subject || subject.isStopped) {
this._subject = this.subjectFactory();
}
return this._subject;
};
ConnectableObservable.prototype.connect = function() {
var connection = this._connection;
if (!connection) {
connection = this._connection = new Subscription_1.Subscription();
connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));
if (connection.closed) {
this._connection = null;
connection = Subscription_1.Subscription.EMPTY;
} else {
this._connection = connection;
}
}
return connection;
};
ConnectableObservable.prototype.refCount = function() {
return this.lift(new RefCountOperator(this));
};
return ConnectableObservable;
}(Observable_1.Observable);
exports.ConnectableObservable = ConnectableObservable;
exports.connectableObservableDescriptor = {
operator: {
value: null
},
_refCount: {
value: 0,
writable: true
},
_subject: {
value: null,
writable: true
},
_connection: {
value: null,
writable: true
},
_subscribe: {
value: ConnectableObservable.prototype._subscribe
},
getSubject: {
value: ConnectableObservable.prototype.getSubject
},
connect: {
value: ConnectableObservable.prototype.connect
},
refCount: {
value: ConnectableObservable.prototype.refCount
}
};
var ConnectableSubscriber = function(_super) {
__extends(ConnectableSubscriber, _super);
function ConnectableSubscriber(destination, connectable) {
_super.call(this, destination);
this.connectable = connectable;
}
ConnectableSubscriber.prototype._error = function(err) {
this._unsubscribe();
_super.prototype._error.call(this, err);
};
ConnectableSubscriber.prototype._complete = function() {
this._unsubscribe();
_super.prototype._complete.call(this);
};
ConnectableSubscriber.prototype._unsubscribe = function() {
var connectable = this.connectable;
if (connectable) {
this.connectable = null;
var connection = connectable._connection;
connectable._refCount = 0;
connectable._subject = null;
connectable._connection = null;
if (connection) {
connection.unsubscribe();
}
}
};
return ConnectableSubscriber;
}(Subject_1.SubjectSubscriber);
var RefCountOperator = function() {
function RefCountOperator(connectable) {
this.connectable = connectable;
}
RefCountOperator.prototype.call = function(subscriber, source) {
var connectable = this.connectable;
connectable._refCount++;
var refCounter = new RefCountSubscriber(subscriber, connectable);
var subscription = source.subscribe(refCounter);
if (!refCounter.closed) {
refCounter.connection = connectable.connect();
}
return subscription;
};
return RefCountOperator;
}();
var RefCountSubscriber = function(_super) {
__extends(RefCountSubscriber, _super);
function RefCountSubscriber(destination, connectable) {
_super.call(this, destination);
this.connectable = connectable;
}
RefCountSubscriber.prototype._unsubscribe = function() {
var connectable = this.connectable;
if (!connectable) {
this.connection = null;
return;
}
this.connectable = null;
var refCount = connectable._refCount;
if (refCount <= 0) {
this.connection = null;
return;
}
connectable._refCount = refCount - 1;
if (refCount > 1) {
this.connection = null;
return;
}
var connection = this.connection;
var sharedConnection = connectable._connection;
this.connection = null;
if (sharedConnection && (!connection || sharedConnection === connection)) {
sharedConnection.unsubscribe();
}
};
return RefCountSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var Subscriber_1 = __webpack_require__(96);
var Subscription_1 = __webpack_require__(98);
var ObjectUnsubscribedError_1 = __webpack_require__(124);
var SubjectSubscription_1 = __webpack_require__(125);
var rxSubscriber_1 = __webpack_require__(105);
var SubjectSubscriber = function(_super) {
__extends(SubjectSubscriber, _super);
function SubjectSubscriber(destination) {
_super.call(this, destination);
this.destination = destination;
}
return SubjectSubscriber;
}(Subscriber_1.Subscriber);
exports.SubjectSubscriber = SubjectSubscriber;
var Subject = function(_super) {
__extends(Subject, _super);
function Subject() {
_super.call(this);
this.observers = [];
this.closed = false;
this.isStopped = false;
this.hasError = false;
this.thrownError = null;
}
Subject.prototype[rxSubscriber_1.rxSubscriber] = function() {
return new SubjectSubscriber(this);
};
Subject.prototype.lift = function(operator) {
var subject = new AnonymousSubject(this, this);
subject.operator = operator;
return subject;
};
Subject.prototype.next = function(value) {
if (this.closed) {
throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
}
if (!this.isStopped) {
var observers = this.observers;
var len = observers.length;
var copy = observers.slice();
for (var i = 0; i < len; i++) {
copy[i].next(value);
}
}
};
Subject.prototype.error = function(err) {
if (this.closed) {
throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
}
this.hasError = true;
this.thrownError = err;
this.isStopped = true;
var observers = this.observers;
var len = observers.length;
var copy = observers.slice();
for (var i = 0; i < len; i++) {
copy[i].error(err);
}
this.observers.length = 0;
};
Subject.prototype.complete = function() {
if (this.closed) {
throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
}
this.isStopped = true;
var observers = this.observers;
var len = observers.length;
var copy = observers.slice();
for (var i = 0; i < len; i++) {
copy[i].complete();
}
this.observers.length = 0;
};
Subject.prototype.unsubscribe = function() {
this.isStopped = true;
this.closed = true;
this.observers = null;
};
Subject.prototype._trySubscribe = function(subscriber) {
if (this.closed) {
throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
} else {
return _super.prototype._trySubscribe.call(this, subscriber);
}
};
Subject.prototype._subscribe = function(subscriber) {
if (this.closed) {
throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
} else if (this.hasError) {
subscriber.error(this.thrownError);
return Subscription_1.Subscription.EMPTY;
} else if (this.isStopped) {
subscriber.complete();
return Subscription_1.Subscription.EMPTY;
} else {
this.observers.push(subscriber);
return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
}
};
Subject.prototype.asObservable = function() {
var observable = new Observable_1.Observable();
observable.source = this;
return observable;
};
Subject.create = function(destination, source) {
return new AnonymousSubject(destination, source);
};
return Subject;
}(Observable_1.Observable);
exports.Subject = Subject;
var AnonymousSubject = function(_super) {
__extends(AnonymousSubject, _super);
function AnonymousSubject(destination, source) {
_super.call(this);
this.destination = destination;
this.source = source;
}
AnonymousSubject.prototype.next = function(value) {
var destination = this.destination;
if (destination && destination.next) {
destination.next(value);
}
};
AnonymousSubject.prototype.error = function(err) {
var destination = this.destination;
if (destination && destination.error) {
this.destination.error(err);
}
};
AnonymousSubject.prototype.complete = function() {
var destination = this.destination;
if (destination && destination.complete) {
this.destination.complete();
}
};
AnonymousSubject.prototype._subscribe = function(subscriber) {
var source = this.source;
if (source) {
return this.source.subscribe(subscriber);
} else {
return Subscription_1.Subscription.EMPTY;
}
};
return AnonymousSubject;
}(Subject);
exports.AnonymousSubject = AnonymousSubject;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ObjectUnsubscribedError = function(_super) {
__extends(ObjectUnsubscribedError, _super);
function ObjectUnsubscribedError() {
var err = _super.call(this, "object unsubscribed");
this.name = err.name = "ObjectUnsubscribedError";
this.stack = err.stack;
this.message = err.message;
}
return ObjectUnsubscribedError;
}(Error);
exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(98);
var SubjectSubscription = function(_super) {
__extends(SubjectSubscription, _super);
function SubjectSubscription(subject, subscriber) {
_super.call(this);
this.subject = subject;
this.subscriber = subscriber;
this.closed = false;
}
SubjectSubscription.prototype.unsubscribe = function() {
if (this.closed) {
return;
}
this.closed = true;
var subject = this.subject;
var observers = subject.observers;
this.subject = null;
if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
return;
}
var subscriberIndex = observers.indexOf(this.subscriber);
if (subscriberIndex !== -1) {
observers.splice(subscriberIndex, 1);
}
};
return SubjectSubscription;
}(Subscription_1.Subscription);
exports.SubjectSubscription = SubjectSubscription;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var trace_1 = __webpack_require__(15);
exports.rendererTraceCategory = "ns-renderer";
exports.routerTraceCategory = "ns-router";
exports.listViewTraceCategory = "ns-list-view";
function rendererLog(msg) {
trace_1.write(msg, exports.rendererTraceCategory);
}
exports.rendererLog = rendererLog;
function rendererError(message) {
trace_1.write(message, exports.rendererTraceCategory, trace_1.messageType.error);
}
exports.rendererError = rendererError;
function routerLog(message) {
trace_1.write(message, exports.routerTraceCategory);
}
exports.routerLog = routerLog;
function styleError(message) {
trace_1.write(message, trace_1.categories.Style, trace_1.messageType.error);
}
exports.styleError = styleError;
function listViewLog(message) {
trace_1.write(message, exports.listViewTraceCategory);
}
exports.listViewLog = listViewLog;
function listViewError(message) {
trace_1.write(message, exports.listViewTraceCategory, trace_1.messageType.error);
}
exports.listViewError = listViewError;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var frame_1 = __webpack_require__(10);
var page_1 = __webpack_require__(128);
var core_1 = __webpack_require__(92);
var platform_1 = __webpack_require__(25);
var platform = __webpack_require__(25);
exports.APP_ROOT_VIEW = new core_1.OpaqueToken("App Root View");
exports.DEVICE = new core_1.OpaqueToken("platfrom device");
exports.PAGE_FACTORY = new core_1.OpaqueToken("page factory");
if (global.___TS_UNUSED) {
(function() {
return platform;
})();
}
var _rootPageRef;
function setRootPage(page) {
_rootPageRef = new WeakRef(page);
}
exports.setRootPage = setRootPage;
function getRootPage() {
return _rootPageRef && _rootPageRef.get();
}
exports.getRootPage = getRootPage;
function getDefaultPage() {
var frame = frame_1.topmost();
return getRootPage() || frame && frame.currentPage;
}
exports.getDefaultPage = getDefaultPage;
exports.defaultPageProvider = {
provide: page_1.Page,
useFactory: getDefaultPage
};
function getDefaultFrame() {
return frame_1.topmost();
}
exports.getDefaultFrame = getDefaultFrame;
exports.defaultFrameProvider = {
provide: frame_1.Frame,
useFactory: getDefaultFrame
};
function getDefaultDevice() {
return platform_1.device;
}
exports.getDefaultDevice = getDefaultDevice;
exports.defaultDeviceProvider = {
provide: exports.DEVICE,
useFactory: getDefaultDevice
};
exports.defaultPageFactory = function(_opts) {
return new page_1.Page();
};
exports.defaultPageFactoryProvider = {
provide: exports.PAGE_FACTORY,
useValue: exports.defaultPageFactory
};
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var page_common_1 = __webpack_require__(129);
var action_bar_1 = __webpack_require__(131);
var grid_layout_1 = __webpack_require__(133);
var constants_1 = __webpack_require__(63);
var platform_1 = __webpack_require__(25);
__export(__webpack_require__(129));
var SYSTEM_UI_FLAG_LIGHT_STATUS_BAR = 8192;
var STATUS_BAR_LIGHT_BCKG = -657931;
var STATUS_BAR_DARK_BCKG = 1711276032;
var DialogFragment;
function initializeDialogFragment() {
if (DialogFragment) {
return;
}
var DialogFragmentImpl = function(_super) {
__extends(DialogFragmentImpl, _super);
function DialogFragmentImpl(_owner, _fullscreen, _shownCallback, _dismissCallback) {
var _this = _super.call(this) || this;
_this._owner = _owner;
_this._fullscreen = _fullscreen;
_this._shownCallback = _shownCallback;
_this._dismissCallback = _dismissCallback;
return global.__native(_this);
}
DialogFragmentImpl.prototype.onCreateDialog = function(savedInstanceState) {
var dialog = new android.app.Dialog(this._owner._context);
dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
this._owner.horizontalAlignment = this._fullscreen ? "stretch" : "center";
this._owner.verticalAlignment = this._fullscreen ? "stretch" : "middle";
this._owner.actionBarHidden = true;
var nativeView = this._owner.nativeView;
var layoutParams = nativeView.getLayoutParams();
if (!layoutParams) {
layoutParams = new org.nativescript.widgets.CommonLayoutParams();
nativeView.setLayoutParams(layoutParams);
}
dialog.setContentView(this._owner.nativeView, layoutParams);
var window = dialog.getWindow();
window.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
if (this._fullscreen) {
window.setLayout(android.view.ViewGroup.LayoutParams.FILL_PARENT, android.view.ViewGroup.LayoutParams.FILL_PARENT);
}
return dialog;
};
DialogFragmentImpl.prototype.onStart = function() {
_super.prototype.onStart.call(this);
if (!this._owner.isLoaded) {
this._owner.onLoaded();
}
this._shownCallback();
};
DialogFragmentImpl.prototype.onDestroyView = function() {
_super.prototype.onDestroyView.call(this);
if (this._owner.isLoaded) {
this._owner.onUnloaded();
}
this._owner._isAddedToNativeVisualTree = false;
this._owner._tearDownUI(true);
};
DialogFragmentImpl.prototype.onDismiss = function(dialog) {
_super.prototype.onDismiss.call(this, dialog);
this._dismissCallback();
};
return DialogFragmentImpl;
}(android.app.DialogFragment);
DialogFragment = DialogFragmentImpl;
}
var Page = function(_super) {
__extends(Page, _super);
function Page() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._isBackNavigation = false;
return _this;
}
Page.prototype.createNativeView = function() {
var layout = new org.nativescript.widgets.GridLayout(this._context);
layout.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.auto));
layout.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.star));
return layout;
};
Page.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
this.nativeView.setBackgroundColor(-1);
};
Page.prototype._addViewToNativeVisualTree = function(child, atIndex) {
if (this.nativeView && child.nativeView) {
if (child instanceof action_bar_1.ActionBar) {
grid_layout_1.GridLayout.setRow(child, 0);
child.horizontalAlignment = "stretch";
child.verticalAlignment = "top";
} else {
grid_layout_1.GridLayout.setRow(child, 1);
}
}
return _super.prototype._addViewToNativeVisualTree.call(this, child, atIndex);
};
Page.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
if (this.actionBarHidden !== undefined) {
this.updateActionBar();
}
};
Page.prototype._tearDownUI = function(force) {
var skipDetached = !force && this.frame.android.cachePagesOnNavigate && !this._isBackNavigation;
if (!skipDetached) {
_super.prototype._tearDownUI.call(this);
this._isAddedToNativeVisualTree = false;
}
};
Page.prototype.onNavigatedFrom = function(isBackNavigation) {
this._isBackNavigation = isBackNavigation;
_super.prototype.onNavigatedFrom.call(this, isBackNavigation);
};
Page.prototype._showNativeModalView = function(parent, context, closeCallback, fullscreen) {
var _this = this;
_super.prototype._showNativeModalView.call(this, parent, context, closeCallback, fullscreen);
if (!this.backgroundColor) {
this.backgroundColor = new page_common_1.Color("White");
}
this._setupUI(parent._context);
this._isAddedToNativeVisualTree = true;
initializeDialogFragment();
this._dialogFragment = new DialogFragment(this, !!fullscreen, function() {
return _this._raiseShownModallyEvent();
}, function() {
return _this.closeModal();
});
_super.prototype._raiseShowingModallyEvent.call(this);
this._dialogFragment.show(parent.frame.android.activity.getFragmentManager(), constants_1.DIALOG_FRAGMENT_TAG);
};
Page.prototype._hideNativeModalView = function(parent) {
this._dialogFragment.dismissAllowingStateLoss();
this._dialogFragment = null;
parent._modal = undefined;
_super.prototype._hideNativeModalView.call(this, parent);
};
Page.prototype.updateActionBar = function() {
this.actionBar.update();
};
Page.prototype[page_common_1.actionBarHiddenProperty.getDefault] = function() {
return undefined;
};
Page.prototype[page_common_1.actionBarHiddenProperty.setNative] = function(value) {
this.updateActionBar();
};
Page.prototype[page_common_1.statusBarStyleProperty.getDefault] = function() {
if (platform_1.device.sdkVersion >= "21") {
var window_1 = this._context.getWindow();
var decorView = window_1.getDecorView();
return {
color: window_1.getStatusBarColor(),
systemUiVisibility: decorView.getSystemUiVisibility()
};
}
return null;
};
Page.prototype[page_common_1.statusBarStyleProperty.setNative] = function(value) {
if (platform_1.device.sdkVersion >= "21") {
var window_2 = this._context.getWindow();
var decorView = window_2.getDecorView();
if (value === "light") {
window_2.setStatusBarColor(STATUS_BAR_LIGHT_BCKG);
decorView.setSystemUiVisibility(SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
} else if (value === "dark") {
window_2.setStatusBarColor(STATUS_BAR_DARK_BCKG);
decorView.setSystemUiVisibility(0);
} else {
window_2.setStatusBarColor(value.color);
decorView.setSystemUiVisibility(value.systemUiVisibility);
}
}
};
Page.prototype[page_common_1.androidStatusBarBackgroundProperty.getDefault] = function() {
if (platform_1.device.sdkVersion >= "21") {
var window_3 = this._context.getWindow();
return window_3.getStatusBarColor();
}
return null;
};
Page.prototype[page_common_1.androidStatusBarBackgroundProperty.setNative] = function(value) {
if (platform_1.device.sdkVersion >= "21") {
var window_4 = this._context.getWindow();
var color = value instanceof page_common_1.Color ? value.android : value;
window_4.setStatusBarColor(color);
}
};
return Page;
}(page_common_1.PageBase);
exports.Page = Page;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var content_view_1 = __webpack_require__(130);
var frame_1 = __webpack_require__(10);
var action_bar_1 = __webpack_require__(131);
var style_scope_1 = __webpack_require__(45);
var file_system_1 = __webpack_require__(22);
__export(__webpack_require__(130));
var PageBase = function(_super) {
__extends(PageBase, _super);
function PageBase() {
var _this = _super.call(this) || this;
_this._cssFiles = {};
_this._styleScope = new style_scope_1.StyleScope();
return _this;
}
Object.defineProperty(PageBase.prototype, "navigationContext", {
get: function() {
return this._navigationContext;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageBase.prototype, "css", {
get: function() {
return this._styleScope.css;
},
set: function(value) {
this._styleScope.css = value;
this._cssFiles = {};
this._refreshCss();
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageBase.prototype, "actionBar", {
get: function() {
if (!this._actionBar) {
this._actionBar = new action_bar_1.ActionBar();
this._addView(this._actionBar);
}
return this._actionBar;
},
set: function(value) {
if (!value) {
throw new Error("ActionBar cannot be null or undefined.");
}
if (this._actionBar !== value) {
if (this._actionBar) {
this._removeView(this._actionBar);
}
this._actionBar = value;
this._addView(this._actionBar);
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageBase.prototype, "statusBarStyle", {
get: function() {
return this.style.statusBarStyle;
},
set: function(value) {
this.style.statusBarStyle = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageBase.prototype, "androidStatusBarBackground", {
get: function() {
return this.style.androidStatusBarBackground;
},
set: function(value) {
this.style.androidStatusBarBackground = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageBase.prototype, "page", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
PageBase.prototype.onLoaded = function() {
this._refreshCss();
_super.prototype.onLoaded.call(this);
};
PageBase.prototype.onUnloaded = function() {
var styleScope = this._styleScope;
_super.prototype.onUnloaded.call(this);
this._styleScope = styleScope;
};
PageBase.prototype.addCss = function(cssString) {
this._addCssInternal(cssString);
};
PageBase.prototype._addCssInternal = function(cssString, cssFileName) {
this._styleScope.addCss(cssString, cssFileName);
this._refreshCss();
};
PageBase.prototype.addCssFile = function(cssFileName) {
if (cssFileName.indexOf("~/") === 0) {
cssFileName = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, cssFileName.replace("~/", ""));
}
if (!this._cssFiles[cssFileName]) {
if (file_system_1.File.exists(cssFileName)) {
var file = file_system_1.File.fromPath(cssFileName);
var text = file.readTextSync();
if (text) {
this._addCssInternal(text, cssFileName);
this._cssFiles[cssFileName] = true;
}
}
}
};
PageBase.prototype._refreshCss = function() {
var scopeVersion = this._styleScope.ensureSelectors();
if (scopeVersion !== this._cssAppliedVersion) {
var styleScope_1 = this._styleScope;
this._resetCssValues();
var checkSelectors = function(view) {
styleScope_1.applySelectors(view);
return true;
};
checkSelectors(this);
content_view_1.eachDescendant(this, checkSelectors);
this._cssAppliedVersion = scopeVersion;
}
};
PageBase.prototype.getKeyframeAnimationWithName = function(animationName) {
return this._styleScope.getKeyframeAnimationWithName(animationName);
};
Object.defineProperty(PageBase.prototype, "frame", {
get: function() {
return this.parent;
},
enumerable: true,
configurable: true
});
PageBase.prototype.createNavigatedData = function(eventName, isBackNavigation) {
return {
eventName: eventName,
object: this,
context: this.navigationContext,
isBackNavigation: isBackNavigation
};
};
PageBase.prototype.onNavigatingTo = function(context, isBackNavigation, bindingContext) {
this._navigationContext = context;
if (!isBackNavigation && bindingContext !== undefined && bindingContext !== null) {
this.bindingContext = bindingContext;
}
this.notify(this.createNavigatedData(PageBase.navigatingToEvent, isBackNavigation));
};
PageBase.prototype.onNavigatedTo = function(isBackNavigation) {
this.notify(this.createNavigatedData(PageBase.navigatedToEvent, isBackNavigation));
};
PageBase.prototype.onNavigatingFrom = function(isBackNavigation) {
this.notify(this.createNavigatedData(PageBase.navigatingFromEvent, isBackNavigation));
};
PageBase.prototype.onNavigatedFrom = function(isBackNavigation) {
this.notify(this.createNavigatedData(PageBase.navigatedFromEvent, isBackNavigation));
this._navigationContext = undefined;
};
PageBase.prototype.showModal = function() {
if (arguments.length === 0) {
this._showNativeModalView(frame_1.topmost().currentPage, undefined, undefined, true);
return this;
} else {
var context = arguments[1];
var closeCallback = arguments[2];
var fullscreen = arguments[3];
var page = void 0;
if (arguments[0] instanceof PageBase) {
page = arguments[0];
} else {
page = frame_1.resolvePageFromEntry({
moduleName: arguments[0]
});
}
page._showNativeModalView(this, context, closeCallback, fullscreen);
return page;
}
};
PageBase.prototype.closeModal = function() {
if (this._closeModalCallback) {
this._closeModalCallback.apply(undefined, arguments);
}
};
Object.defineProperty(PageBase.prototype, "modal", {
get: function() {
return this._modal;
},
enumerable: true,
configurable: true
});
PageBase.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof action_bar_1.ActionBar) {
this.actionBar = value;
} else {
_super.prototype._addChildFromBuilder.call(this, name, value);
}
};
PageBase.prototype._showNativeModalView = function(parent, context, closeCallback, fullscreen) {
parent._modal = this;
var that = this;
this._modalContext = context;
this._closeModalCallback = function() {
if (that._closeModalCallback) {
that._closeModalCallback = null;
that._modalContext = null;
that._hideNativeModalView(parent);
if (typeof closeCallback === "function") {
closeCallback.apply(undefined, arguments);
}
}
};
};
PageBase.prototype._hideNativeModalView = function(parent) {};
PageBase.prototype._raiseShownModallyEvent = function() {
var args = {
eventName: PageBase.shownModallyEvent,
object: this,
context: this._modalContext,
closeCallback: this._closeModalCallback
};
this.notify(args);
};
PageBase.prototype._raiseShowingModallyEvent = function() {
var args = {
eventName: PageBase.showingModallyEvent,
object: this,
context: this._modalContext,
closeCallback: this._closeModalCallback
};
this.notify(args);
};
PageBase.prototype._getStyleScope = function() {
return this._styleScope;
};
PageBase.prototype.eachChildView = function(callback) {
_super.prototype.eachChildView.call(this, callback);
callback(this.actionBar);
};
Object.defineProperty(PageBase.prototype, "_childrenCount", {
get: function() {
return (this.content ? 1 : 0) + (this.actionBar ? 1 : 0);
},
enumerable: true,
configurable: true
});
PageBase.prototype._resetCssValues = function() {
var resetCssValuesFunc = function(view) {
view._cancelAllAnimations();
content_view_1.resetCSSProperties(view.style);
return true;
};
resetCssValuesFunc(this);
content_view_1.eachDescendant(this, resetCssValuesFunc);
};
return PageBase;
}(content_view_1.ContentView);
PageBase.navigatingToEvent = "navigatingTo";
PageBase.navigatedToEvent = "navigatedTo";
PageBase.navigatingFromEvent = "navigatingFrom";
PageBase.navigatedFromEvent = "navigatedFrom";
PageBase.shownModallyEvent = "shownModally";
PageBase.showingModallyEvent = "showingModally";
exports.PageBase = PageBase;
exports.actionBarHiddenProperty = new content_view_1.Property({
name: "actionBarHidden",
affectsLayout: content_view_1.isIOS,
valueConverter: content_view_1.booleanConverter
});
exports.actionBarHiddenProperty.register(PageBase);
exports.backgroundSpanUnderStatusBarProperty = new content_view_1.Property({
name: "backgroundSpanUnderStatusBar",
defaultValue: false,
affectsLayout: content_view_1.isIOS,
valueConverter: content_view_1.booleanConverter
});
exports.backgroundSpanUnderStatusBarProperty.register(PageBase);
exports.enableSwipeBackNavigationProperty = new content_view_1.Property({
name: "enableSwipeBackNavigation",
defaultValue: true,
valueConverter: content_view_1.booleanConverter
});
exports.enableSwipeBackNavigationProperty.register(PageBase);
exports.statusBarStyleProperty = new content_view_1.CssProperty({
name: "statusBarStyle",
cssName: "status-bar-style"
});
exports.statusBarStyleProperty.register(content_view_1.Style);
exports.androidStatusBarBackgroundProperty = new content_view_1.CssProperty({
name: "androidStatusBarBackground",
cssName: "android-status-bar-background",
equalityComparer: content_view_1.Color.equals,
valueConverter: function(v) {
return new content_view_1.Color(v);
}
});
exports.androidStatusBarBackgroundProperty.register(content_view_1.Style);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var ContentView = function(_super) {
__extends(ContentView, _super);
function ContentView() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(ContentView.prototype, "content", {
get: function() {
return this._content;
},
set: function(value) {
var oldView = this._content;
if (this._content) {
this._removeView(this._content);
}
this._content = value;
if (this._content) {
this._addView(this._content);
}
this._onContentChanged(oldView, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ContentView.prototype, "layoutView", {
get: function() {
var result;
if (this._content) {
var first_1 = true;
this._content._eachLayoutView(function(child) {
if (first_1) {
first_1 = false;
result = child;
} else {
throw new Error("More than one layout child inside a ContentView");
}
});
}
return result;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ContentView.prototype, "_childrenCount", {
get: function() {
if (this._content) {
return 1;
}
return 0;
},
enumerable: true,
configurable: true
});
ContentView.prototype._onContentChanged = function(oldView, newView) {};
ContentView.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof view_1.View) {
this.content = value;
}
};
ContentView.prototype.eachChildView = function(callback) {
var content = this._content;
if (content) {
callback(content);
}
};
ContentView.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var result = view_1.View.measureChild(this, this.layoutView, widthMeasureSpec, heightMeasureSpec);
var width = view_1.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = view_1.layout.getMeasureSpecMode(widthMeasureSpec);
var height = view_1.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = view_1.layout.getMeasureSpecMode(heightMeasureSpec);
var measureWidth = Math.max(result.measuredWidth, this.effectiveMinWidth);
var measureHeight = Math.max(result.measuredHeight, this.effectiveMinHeight);
var widthAndState = view_1.View.resolveSizeAndState(measureWidth, width, widthMode, 0);
var heightAndState = view_1.View.resolveSizeAndState(measureHeight, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
ContentView.prototype.onLayout = function(left, top, right, bottom) {
view_1.View.layoutChild(this, this.layoutView, 0, 0, right - left, bottom - top);
};
return ContentView;
}(view_1.CustomLayoutView);
exports.ContentView = ContentView;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var action_bar_common_1 = __webpack_require__(132);
var utils_1 = __webpack_require__(14);
var image_source_1 = __webpack_require__(85);
var application = __webpack_require__(18);
__export(__webpack_require__(132));
var R_ID_HOME = 16908332;
var ACTION_ITEM_ID_OFFSET = 1e4;
var actionItemIdGenerator = ACTION_ITEM_ID_OFFSET;
function generateItemId() {
actionItemIdGenerator++;
return actionItemIdGenerator;
}
var appResources;
var MenuItemClickListener;
function initializeMenuItemClickListener() {
if (MenuItemClickListener) {
return;
}
var MenuItemClickListenerImpl = function(_super) {
__extends(MenuItemClickListenerImpl, _super);
function MenuItemClickListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
MenuItemClickListenerImpl.prototype.onMenuItemClick = function(item) {
var itemId = item.getItemId();
return this.owner._onAndroidItemSelected(itemId);
};
return MenuItemClickListenerImpl;
}(java.lang.Object);
MenuItemClickListenerImpl = __decorate([ Interfaces([ android.support.v7.widget.Toolbar.OnMenuItemClickListener ]) ], MenuItemClickListenerImpl);
MenuItemClickListener = MenuItemClickListenerImpl;
appResources = application.android.context.getResources();
}
var ActionItem = function(_super) {
__extends(ActionItem, _super);
function ActionItem() {
var _this = _super.call(this) || this;
_this._androidPosition = {
position: "actionBar",
systemIcon: undefined
};
_this._itemId = generateItemId();
return _this;
}
Object.defineProperty(ActionItem.prototype, "android", {
get: function() {
return this._androidPosition;
},
set: function(value) {
throw new Error("ActionItem.android is read-only");
},
enumerable: true,
configurable: true
});
ActionItem.prototype._getItemId = function() {
return this._itemId;
};
return ActionItem;
}(action_bar_common_1.ActionItemBase);
exports.ActionItem = ActionItem;
var AndroidActionBarSettings = function() {
function AndroidActionBarSettings(actionBar) {
this._iconVisibility = "auto";
this._actionBar = actionBar;
}
Object.defineProperty(AndroidActionBarSettings.prototype, "icon", {
get: function() {
return this._icon;
},
set: function(value) {
if (value !== this._icon) {
this._icon = value;
this._actionBar._onIconPropertyChanged();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidActionBarSettings.prototype, "iconVisibility", {
get: function() {
return this._iconVisibility;
},
set: function(value) {
if (value !== this._iconVisibility) {
this._iconVisibility = value;
this._actionBar._onIconPropertyChanged();
}
},
enumerable: true,
configurable: true
});
return AndroidActionBarSettings;
}();
exports.AndroidActionBarSettings = AndroidActionBarSettings;
var NavigationButton = function(_super) {
__extends(NavigationButton, _super);
function NavigationButton() {
return _super !== null && _super.apply(this, arguments) || this;
}
return NavigationButton;
}(ActionItem);
exports.NavigationButton = NavigationButton;
var ActionBar = function(_super) {
__extends(ActionBar, _super);
function ActionBar() {
var _this = _super.call(this) || this;
_this._android = new AndroidActionBarSettings(_this);
return _this;
}
Object.defineProperty(ActionBar.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
ActionBar.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof NavigationButton) {
this.navigationButton = value;
} else if (value instanceof ActionItem) {
this.actionItems.addItem(value);
} else if (value instanceof action_bar_common_1.View) {
this.titleView = value;
}
};
ActionBar.prototype.createNativeView = function() {
initializeMenuItemClickListener();
var toolbar = new android.support.v7.widget.Toolbar(this._context);
var menuItemClickListener = new MenuItemClickListener(this);
toolbar.setOnMenuItemClickListener(menuItemClickListener);
toolbar.menuItemClickListener = menuItemClickListener;
return toolbar;
};
ActionBar.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
this.nativeView.menuItemClickListener.owner = this;
};
ActionBar.prototype.disposeNativeView = function() {
this.nativeView.menuItemClickListener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
ActionBar.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.update();
};
ActionBar.prototype.update = function() {
if (!this.nativeView) {
return;
}
var page = this.page;
if (!page.frame || !page.frame._getNavBarVisible(page)) {
this.nativeView.setVisibility(android.view.View.GONE);
return;
}
this.nativeView.setVisibility(android.view.View.VISIBLE);
this._addActionItems();
this._updateTitleAndTitleView();
this._updateIcon();
this._updateNavigationButton();
};
ActionBar.prototype._onAndroidItemSelected = function(itemId) {
if (this.navigationButton && itemId === R_ID_HOME) {
this.navigationButton._raiseTap();
return true;
}
var menuItem = undefined;
var items = this.actionItems.getItems();
for (var i = 0; i < items.length; i++) {
if (items[i]._getItemId() === itemId) {
menuItem = items[i];
break;
}
}
if (menuItem) {
menuItem._raiseTap();
return true;
}
return false;
};
ActionBar.prototype._updateNavigationButton = function() {
var navButton = this.navigationButton;
if (navButton && action_bar_common_1.isVisible(navButton)) {
var systemIcon = navButton.android.systemIcon;
if (systemIcon !== undefined) {
var systemResourceId = getSystemResourceId(systemIcon);
if (systemResourceId) {
this.nativeView.setNavigationIcon(systemResourceId);
}
} else if (navButton.icon) {
var drawableOrId = getDrawableOrResourceId(navButton.icon, appResources);
this.nativeView.setNavigationIcon(drawableOrId);
}
var navBtn_1 = new WeakRef(navButton);
this.nativeView.setNavigationOnClickListener(new android.view.View.OnClickListener({
onClick: function(v) {
var owner = navBtn_1.get();
if (owner) {
owner._raiseTap();
}
}
}));
} else {
this.nativeView.setNavigationIcon(null);
}
};
ActionBar.prototype._updateIcon = function() {
var visibility = getIconVisibility(this.android.iconVisibility);
if (visibility) {
var icon = this.android.icon;
if (icon !== undefined) {
var drawableOrId = getDrawableOrResourceId(icon, appResources);
if (drawableOrId) {
this.nativeView.setLogo(drawableOrId);
}
} else {
var defaultIcon = application.android.nativeApp.getApplicationInfo().icon;
this.nativeView.setLogo(defaultIcon);
}
} else {
this.nativeView.setLogo(null);
}
};
ActionBar.prototype._updateTitleAndTitleView = function() {
if (!this.titleView) {
var title = this.title;
if (title !== undefined) {
this.nativeView.setTitle(title);
} else {
var appContext = application.android.context;
var appInfo = appContext.getApplicationInfo();
var appLabel = appContext.getPackageManager().getApplicationLabel(appInfo);
if (appLabel) {
this.nativeView.setTitle(appLabel);
}
}
}
};
ActionBar.prototype._addActionItems = function() {
var menu = this.nativeView.getMenu();
var items = this.actionItems.getVisibleItems();
menu.clear();
for (var i = 0; i < items.length; i++) {
var item = items[i];
var menuItem = menu.add(android.view.Menu.NONE, item._getItemId(), android.view.Menu.NONE, item.text + "");
if (item.actionView && item.actionView.android) {
item.android.position = "actionBar";
menuItem.setActionView(item.actionView.android);
ActionBar._setOnClickListener(item);
} else if (item.android.systemIcon) {
var systemResourceId = getSystemResourceId(item.android.systemIcon);
if (systemResourceId) {
menuItem.setIcon(systemResourceId);
}
} else if (item.icon) {
var drawableOrId = getDrawableOrResourceId(item.icon, appResources);
if (drawableOrId) {
menuItem.setIcon(drawableOrId);
} else {
throw new Error("Error loading icon from " + item.icon);
}
}
var showAsAction = getShowAsAction(item);
menuItem.setShowAsAction(showAsAction);
}
};
ActionBar._setOnClickListener = function(item) {
item.actionView.android.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(v) {
item._raiseTap();
}
}));
};
ActionBar.prototype._onTitlePropertyChanged = function() {
if (this.nativeView) {
this._updateTitleAndTitleView();
}
};
ActionBar.prototype._onIconPropertyChanged = function() {
if (this.nativeView) {
this._updateIcon();
}
};
ActionBar.prototype._addViewToNativeVisualTree = function(child, atIndex) {
if (atIndex === void 0) {
atIndex = Number.MAX_VALUE;
}
_super.prototype._addViewToNativeVisualTree.call(this, child);
if (this.nativeView && child.nativeView) {
if (atIndex >= this.nativeView.getChildCount()) {
this.nativeView.addView(child.nativeView);
} else {
this.nativeView.addView(child.nativeView, atIndex);
}
return true;
}
return false;
};
ActionBar.prototype._removeViewFromNativeVisualTree = function(child) {
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
if (this.nativeView && child.nativeView) {
this.nativeView.removeView(child.nativeView);
}
};
ActionBar.prototype[action_bar_common_1.colorProperty.getDefault] = function() {
if (!defaultTitleTextColor) {
var textView = new android.widget.TextView(this._context);
defaultTitleTextColor = textView.getTextColors().getDefaultColor();
}
return defaultTitleTextColor;
};
ActionBar.prototype[action_bar_common_1.colorProperty.setNative] = function(value) {
var color = value instanceof action_bar_common_1.Color ? value.android : value;
this.nativeView.setTitleTextColor(color);
};
return ActionBar;
}(action_bar_common_1.ActionBarBase);
exports.ActionBar = ActionBar;
var defaultTitleTextColor;
function getDrawableOrResourceId(icon, resources) {
if (typeof icon !== "string") {
return undefined;
}
if (icon.indexOf(utils_1.RESOURCE_PREFIX) === 0) {
var resourceId = resources.getIdentifier(icon.substr(utils_1.RESOURCE_PREFIX.length), "drawable", application.android.packageName);
if (resourceId > 0) {
return resourceId;
}
} else {
var drawable = void 0;
var is = image_source_1.fromFileOrResource(icon);
if (is) {
drawable = new android.graphics.drawable.BitmapDrawable(is.android);
}
return drawable;
}
return undefined;
}
function getShowAsAction(menuItem) {
switch (menuItem.android.position) {
case "actionBarIfRoom":
return android.view.MenuItem.SHOW_AS_ACTION_IF_ROOM;

case "popup":
return android.view.MenuItem.SHOW_AS_ACTION_NEVER;

case "actionBar":
default:
return android.view.MenuItem.SHOW_AS_ACTION_ALWAYS;
}
}
function getIconVisibility(iconVisibility) {
switch (iconVisibility) {
case "always":
return true;

case "auto":
case "never":
default:
return false;
}
}
function getSystemResourceId(systemIcon) {
return android.content.res.Resources.getSystem().getIdentifier(systemIcon, "drawable", "android");
}
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
__export(__webpack_require__(12));
var view_1 = __webpack_require__(12);
var knownCollections;
(function(knownCollections) {
knownCollections.actionItems = "actionItems";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var ActionBarBase = function(_super) {
__extends(ActionBarBase, _super);
function ActionBarBase() {
var _this = _super.call(this) || this;
_this._actionItems = new ActionItems(_this);
return _this;
}
Object.defineProperty(ActionBarBase.prototype, "navigationButton", {
get: function() {
return this._navigationButton;
},
set: function(value) {
if (this._navigationButton !== value) {
if (this._navigationButton) {
this._removeView(this._navigationButton);
this._navigationButton.actionBar = undefined;
}
this._navigationButton = value;
if (this._navigationButton) {
this._navigationButton.actionBar = this;
this._addView(this._navigationButton);
}
this.update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBarBase.prototype, "actionItems", {
get: function() {
return this._actionItems;
},
set: function(value) {
throw new Error("actionItems property is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBarBase.prototype, "titleView", {
get: function() {
return this._titleView;
},
set: function(value) {
if (this._titleView !== value) {
if (this._titleView) {
this._removeView(this._titleView);
this._titleView.style[view_1.horizontalAlignmentProperty.cssName] = view_1.unsetValue;
this._titleView.style[view_1.verticalAlignmentProperty.cssName] = view_1.unsetValue;
}
this._titleView = value;
if (value) {
this._addView(value);
var style = value.style;
if (!view_1.horizontalAlignmentProperty.isSet(style)) {
style[view_1.horizontalAlignmentProperty.cssName] = "center";
}
if (!view_1.verticalAlignmentProperty.isSet(style)) {
style[view_1.verticalAlignmentProperty.cssName] = "middle";
}
}
this.update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBarBase.prototype, "android", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBarBase.prototype, "_childrenCount", {
get: function() {
var actionViewsCount = 0;
this._actionItems.getItems().forEach(function(actionItem) {
if (actionItem.actionView) {
actionViewsCount++;
}
});
return actionViewsCount + (this.titleView ? 1 : 0);
},
enumerable: true,
configurable: true
});
ActionBarBase.prototype.update = function() {};
ActionBarBase.prototype._onTitlePropertyChanged = function() {};
ActionBarBase.prototype._addArrayFromBuilder = function(name, value) {
if (name === "actionItems") {
this.actionItems.setItems(value);
}
};
ActionBarBase.prototype.eachChildView = function(callback) {
var titleView = this.titleView;
if (titleView) {
callback(titleView);
}
};
ActionBarBase.prototype.eachChild = function(callback) {
var titleView = this.titleView;
if (titleView) {
callback(titleView);
}
var navigationButton = this._navigationButton;
if (navigationButton) {
callback(navigationButton);
}
this.actionItems.getItems().forEach(function(actionItem) {
callback(actionItem);
});
};
ActionBarBase.prototype._isEmpty = function() {
if (this.title || this.titleView || this.android && this.android.icon || this.navigationButton || this.actionItems.getItems().length > 0) {
return false;
}
return true;
};
return ActionBarBase;
}(view_1.View);
exports.ActionBarBase = ActionBarBase;
var ActionItems = function() {
function ActionItems(actionBar) {
this._items = new Array();
this._actionBar = actionBar;
}
ActionItems.prototype.addItem = function(item) {
if (!item) {
throw new Error("Cannot add empty item");
}
this._items.push(item);
item.actionBar = this._actionBar;
this._actionBar._addView(item);
this.invalidate();
};
ActionItems.prototype.removeItem = function(item) {
if (!item) {
throw new Error("Cannot remove empty item");
}
var itemIndex = this._items.indexOf(item);
if (itemIndex < 0) {
throw new Error("Cannot find item to remove");
}
this._items.splice(itemIndex, 1);
this._actionBar._removeView(item);
item.actionBar = undefined;
this.invalidate();
};
ActionItems.prototype.getItems = function() {
return this._items.slice();
};
ActionItems.prototype.getVisibleItems = function() {
var visibleItems = [];
this._items.forEach(function(item) {
if (isVisible(item)) {
visibleItems.push(item);
}
});
return visibleItems;
};
ActionItems.prototype.getItemAt = function(index) {
if (index < 0 || index >= this._items.length) {
return undefined;
}
return this._items[index];
};
ActionItems.prototype.setItems = function(items) {
while (this._items.length > 0) {
this.removeItem(this._items[this._items.length - 1]);
}
for (var i = 0; i < items.length; i++) {
this.addItem(items[i]);
}
this.invalidate();
};
ActionItems.prototype.invalidate = function() {
if (this._actionBar) {
this._actionBar.update();
}
};
return ActionItems;
}();
exports.ActionItems = ActionItems;
var ActionItemBase = function(_super) {
__extends(ActionItemBase, _super);
function ActionItemBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(ActionItemBase.prototype, "actionView", {
get: function() {
return this._actionView;
},
set: function(value) {
if (this._actionView !== value) {
if (this._actionView) {
this._actionView.style[view_1.horizontalAlignmentProperty.cssName] = view_1.unsetValue;
this._actionView.style[view_1.verticalAlignmentProperty.cssName] = view_1.unsetValue;
this._removeView(this._actionView);
}
this._actionView = value;
if (this._actionView) {
this._addView(this._actionView);
this._actionView.style[view_1.horizontalAlignmentProperty.cssName] = "center";
this._actionView.style[view_1.verticalAlignmentProperty.cssName] = "middle";
}
if (this._actionBar) {
this._actionBar.update();
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItemBase.prototype, "actionBar", {
get: function() {
return this._actionBar;
},
set: function(value) {
if (value !== this._actionBar) {
this._actionBar = value;
}
},
enumerable: true,
configurable: true
});
ActionItemBase.prototype._raiseTap = function() {
this._emit(ActionItemBase.tapEvent);
};
ActionItemBase.prototype._addChildFromBuilder = function(name, value) {
this.actionView = value;
};
ActionItemBase.prototype.eachChild = function(callback) {
if (this._actionView) {
callback(this._actionView);
}
};
return ActionItemBase;
}(view_1.ViewBase);
ActionItemBase.tapEvent = "tap";
exports.ActionItemBase = ActionItemBase;
function isVisible(item) {
return item.visibility === "visible";
}
exports.isVisible = isVisible;
function onTitlePropertyChanged(actionBar, oldValue, newValue) {
actionBar._onTitlePropertyChanged();
}
var titleProperty = new view_1.Property({
name: "title",
valueChanged: onTitlePropertyChanged
});
titleProperty.register(ActionBarBase);
function onItemChanged(item, oldValue, newValue) {
if (item.actionBar) {
item.actionBar.update();
}
}
var textProperty = new view_1.Property({
name: "text",
defaultValue: "",
valueChanged: onItemChanged
});
textProperty.register(ActionItemBase);
var iconProperty = new view_1.Property({
name: "icon",
valueChanged: onItemChanged
});
iconProperty.register(ActionItemBase);
var visibilityProperty = new view_1.Property({
name: "visibility",
defaultValue: "visible",
valueChanged: onItemChanged
});
visibilityProperty.register(ActionItemBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var grid_layout_common_1 = __webpack_require__(134);
__export(__webpack_require__(134));
function makeNativeSetter(setter) {
return function(value) {
var nativeView = this.nativeView;
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();
if (lp instanceof org.nativescript.widgets.CommonLayoutParams) {
setter(lp, value);
nativeView.setLayoutParams(lp);
}
};
}
grid_layout_common_1.View.prototype[grid_layout_common_1.rowProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.row = value;
});
grid_layout_common_1.View.prototype[grid_layout_common_1.columnProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.column = value;
});
grid_layout_common_1.View.prototype[grid_layout_common_1.rowSpanProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.rowSpan = value;
});
grid_layout_common_1.View.prototype[grid_layout_common_1.columnSpanProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.columnSpan = value;
});
function createNativeSpec(itemSpec) {
switch (itemSpec.gridUnitType) {
case grid_layout_common_1.GridUnitType.AUTO:
return new org.nativescript.widgets.ItemSpec(itemSpec.value, org.nativescript.widgets.GridUnitType.auto);

case grid_layout_common_1.GridUnitType.STAR:
return new org.nativescript.widgets.ItemSpec(itemSpec.value, org.nativescript.widgets.GridUnitType.star);

case grid_layout_common_1.GridUnitType.PIXEL:
return new org.nativescript.widgets.ItemSpec(itemSpec.value * grid_layout_common_1.layout.getDisplayDensity(), org.nativescript.widgets.GridUnitType.pixel);

default:
throw new Error("Invalid gridUnitType: " + itemSpec.gridUnitType);
}
}
var ItemSpec = function(_super) {
__extends(ItemSpec, _super);
function ItemSpec() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(ItemSpec.prototype, "actualLength", {
get: function() {
if (this.nativeSpec) {
return Math.round(this.nativeSpec.getActualLength() / grid_layout_common_1.layout.getDisplayDensity());
}
return 0;
},
enumerable: true,
configurable: true
});
return ItemSpec;
}(grid_layout_common_1.ItemSpec);
exports.ItemSpec = ItemSpec;
var GridLayout = function(_super) {
__extends(GridLayout, _super);
function GridLayout() {
return _super !== null && _super.apply(this, arguments) || this;
}
GridLayout.prototype.createNativeView = function() {
return new org.nativescript.widgets.GridLayout(this._context);
};
GridLayout.prototype.initNativeView = function() {
var _this = this;
_super.prototype.initNativeView.call(this);
this.rowsInternal.forEach(function(itemSpec, index, rows) {
_this._onRowAdded(itemSpec);
}, this);
this.columnsInternal.forEach(function(itemSpec, index, rows) {
_this._onColumnAdded(itemSpec);
}, this);
};
GridLayout.prototype.disposeNativeView = function() {
for (var i = this.rowsInternal.length; i--; i >= 0) {
var itemSpec = this.rowsInternal[i];
this._onRowRemoved(itemSpec, i);
}
for (var i = this.columnsInternal.length; i--; i >= 0) {
var itemSpec = this.columnsInternal[i];
this._onColumnRemoved(itemSpec, i);
}
_super.prototype.disposeNativeView.call(this);
};
GridLayout.prototype._onRowAdded = function(itemSpec) {
if (this.nativeView) {
var nativeSpec = createNativeSpec(itemSpec);
itemSpec.nativeSpec = nativeSpec;
this.nativeView.addRow(nativeSpec);
}
};
GridLayout.prototype._onColumnAdded = function(itemSpec) {
if (this.nativeView) {
var nativeSpec = createNativeSpec(itemSpec);
itemSpec.nativeSpec = nativeSpec;
this.nativeView.addColumn(nativeSpec);
}
};
GridLayout.prototype._onRowRemoved = function(itemSpec, index) {
itemSpec.nativeSpec = null;
if (this.nativeView) {
this.nativeView.removeRowAt(index);
}
};
GridLayout.prototype._onColumnRemoved = function(itemSpec, index) {
itemSpec.nativeSpec = null;
if (this.nativeView) {
this.nativeView.removeColumnAt(index);
}
};
GridLayout.prototype.invalidate = function() {};
return GridLayout;
}(grid_layout_common_1.GridLayoutBase);
exports.GridLayout = GridLayout;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_1 = __webpack_require__(135);
__export(__webpack_require__(135));
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
layout_base_1.View.prototype.row = 0;
layout_base_1.View.prototype.col = 0;
layout_base_1.View.prototype.rowSpan = 1;
layout_base_1.View.prototype.colSpan = 1;
function validateItemSpec(itemSpec) {
if (!itemSpec) {
throw new Error("Value cannot be undefined.");
}
if (itemSpec.owner) {
throw new Error("itemSpec is already added to GridLayout.");
}
}
function convertGridLength(value) {
if (value === GridUnitType.AUTO) {
return ItemSpec.create(1, GridUnitType.AUTO);
} else if (value.indexOf("*") !== -1) {
var starCount = parseInt(value.replace("*", "") || "1");
return ItemSpec.create(starCount, GridUnitType.STAR);
} else if (!isNaN(parseInt(value))) {
return ItemSpec.create(parseInt(value), GridUnitType.PIXEL);
} else {
throw new Error("Cannot parse item spec from string: " + value);
}
}
function parseAndAddItemSpecs(value, func) {
var arr = value.split(/[\s,]+/);
for (var i = 0, length_1 = arr.length; i < length_1; i++) {
var str = arr[i].trim();
if (str.length > 0) {
func(convertGridLength(arr[i].trim()));
}
}
}
var ItemSpec = function(_super) {
__extends(ItemSpec, _super);
function ItemSpec() {
var _this = _super.call(this) || this;
_this._actualLength = 0;
if (arguments.length === 0) {
_this._value = 1;
_this._unitType = GridUnitType.STAR;
} else if (arguments.length === 2) {
var value = arguments[0];
var type = arguments[1];
if (typeof value === "number" && typeof type === "string") {
if (value < 0 || isNaN(value) || !isFinite(value)) {
throw new Error("Value should not be negative, NaN or Infinity: " + value);
}
_this._value = value;
_this._unitType = GridUnitType.parse(type);
} else {
throw new Error("First argument should be number, second argument should be string.");
}
} else {
throw new Error("ItemSpec expects 0 or 2 arguments");
}
_this.index = -1;
return _this;
}
ItemSpec.create = function(value, type) {
var spec = new ItemSpec();
spec._value = value;
spec._unitType = type;
return spec;
};
Object.defineProperty(ItemSpec.prototype, "actualLength", {
get: function() {
return this._actualLength;
},
enumerable: true,
configurable: true
});
ItemSpec.equals = function(value1, value2) {
return value1.gridUnitType === value2.gridUnitType && value1.value === value2.value && value1.owner === value2.owner && value1.index === value2.index;
};
Object.defineProperty(ItemSpec.prototype, "gridUnitType", {
get: function() {
return this._unitType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isAbsolute", {
get: function() {
return this._unitType === GridUnitType.PIXEL;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isAuto", {
get: function() {
return this._unitType === GridUnitType.AUTO;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isStar", {
get: function() {
return this._unitType === GridUnitType.STAR;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "value", {
get: function() {
return this._value;
},
enumerable: true,
configurable: true
});
return ItemSpec;
}(layout_base_1.Observable);
exports.ItemSpec = ItemSpec;
var GridLayoutBase = function(_super) {
__extends(GridLayoutBase, _super);
function GridLayoutBase() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._rows = new Array();
_this._cols = new Array();
return _this;
}
GridLayoutBase.getColumn = function(element) {
return validateArgs(element).col;
};
GridLayoutBase.setColumn = function(element, value) {
validateArgs(element).col = value;
};
GridLayoutBase.getColumnSpan = function(element) {
return validateArgs(element).colSpan;
};
GridLayoutBase.setColumnSpan = function(element, value) {
validateArgs(element).colSpan = value;
};
GridLayoutBase.getRow = function(element) {
return validateArgs(element).row;
};
GridLayoutBase.setRow = function(element, value) {
validateArgs(element).row = value;
};
GridLayoutBase.getRowSpan = function(element) {
return validateArgs(element).rowSpan;
};
GridLayoutBase.setRowSpan = function(element, value) {
validateArgs(element).rowSpan = value;
};
GridLayoutBase.prototype.addRow = function(itemSpec) {
validateItemSpec(itemSpec);
itemSpec.owner = this;
this._rows.push(itemSpec);
this._onRowAdded(itemSpec);
this.invalidate();
};
GridLayoutBase.prototype.addColumn = function(itemSpec) {
validateItemSpec(itemSpec);
itemSpec.owner = this;
this._cols.push(itemSpec);
this._onColumnAdded(itemSpec);
this.invalidate();
};
GridLayoutBase.prototype.removeRow = function(itemSpec) {
if (!itemSpec) {
throw new Error("Value is null.");
}
var index = this._rows.indexOf(itemSpec);
if (itemSpec.owner !== this || index < 0) {
throw new Error("Row is not child of this GridLayout");
}
itemSpec.index = -1;
this._rows.splice(index, 1);
this._onRowRemoved(itemSpec, index);
this.invalidate();
};
GridLayoutBase.prototype.removeColumn = function(itemSpec) {
if (!itemSpec) {
throw new Error("Value is null.");
}
var index = this._cols.indexOf(itemSpec);
if (itemSpec.owner !== this || index < 0) {
throw new Error("Column is not child of this GridLayout");
}
itemSpec.index = -1;
this._cols.splice(index, 1);
this._onColumnRemoved(itemSpec, index);
this.invalidate();
};
GridLayoutBase.prototype.removeColumns = function() {
for (var i = this._cols.length - 1; i >= 0; i--) {
var colSpec = this._cols[i];
this._onColumnRemoved(colSpec, i);
colSpec.index = -1;
}
this._cols.length = 0;
this.invalidate();
};
GridLayoutBase.prototype.removeRows = function() {
for (var i = this._rows.length - 1; i >= 0; i--) {
var rowSpec = this._rows[i];
this._onRowRemoved(rowSpec, i);
rowSpec.index = -1;
}
this._rows.length = 0;
this.invalidate();
};
GridLayoutBase.prototype.onRowChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayoutBase.prototype.onRowSpanChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayoutBase.prototype.onColumnChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayoutBase.prototype.onColumnSpanChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayoutBase.prototype._onRowAdded = function(itemSpec) {};
GridLayoutBase.prototype._onColumnAdded = function(itemSpec) {};
GridLayoutBase.prototype._onRowRemoved = function(itemSpec, index) {};
GridLayoutBase.prototype._onColumnRemoved = function(itemSpec, index) {};
GridLayoutBase.prototype.getColumns = function() {
return this._cols.slice();
};
GridLayoutBase.prototype.getRows = function() {
return this._rows.slice();
};
Object.defineProperty(GridLayoutBase.prototype, "columnsInternal", {
get: function() {
return this._cols;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GridLayoutBase.prototype, "rowsInternal", {
get: function() {
return this._rows;
},
enumerable: true,
configurable: true
});
GridLayoutBase.prototype.invalidate = function() {
this.requestLayout();
};
GridLayoutBase.prototype._applyXmlAttribute = function(attributeName, attributeValue) {
if (attributeName === "columns") {
this._setColumns(attributeValue);
return true;
} else if (attributeName === "rows") {
this._setRows(attributeValue);
return true;
}
return _super.prototype._applyXmlAttribute.call(this, attributeName, attributeValue);
};
GridLayoutBase.prototype._setColumns = function(value) {
var _this = this;
this.removeColumns();
parseAndAddItemSpecs(value, function(spec) {
return _this.addColumn(spec);
});
};
GridLayoutBase.prototype._setRows = function(value) {
var _this = this;
this.removeRows();
parseAndAddItemSpecs(value, function(spec) {
return _this.addRow(spec);
});
};
return GridLayoutBase;
}(layout_base_1.LayoutBase);
exports.GridLayoutBase = GridLayoutBase;
exports.columnProperty = new layout_base_1.Property({
name: "col",
defaultValue: 0,
valueChanged: function(target, oldValue, newValue) {
var grid = target.parent;
if (grid instanceof GridLayoutBase) {
grid.onColumnChanged(target, oldValue, newValue);
}
},
valueConverter: function(v) {
return Math.max(0, parseInt(v));
}
});
exports.columnProperty.register(layout_base_1.View);
exports.columnSpanProperty = new layout_base_1.Property({
name: "colSpan",
defaultValue: 1,
valueChanged: function(target, oldValue, newValue) {
var grid = target.parent;
if (grid instanceof GridLayoutBase) {
grid.onColumnSpanChanged(target, oldValue, newValue);
}
},
valueConverter: function(v) {
return Math.max(1, parseInt(v));
}
});
exports.columnSpanProperty.register(layout_base_1.View);
exports.rowProperty = new layout_base_1.Property({
name: "row",
defaultValue: 0,
valueChanged: function(target, oldValue, newValue) {
var grid = target.parent;
if (grid instanceof GridLayoutBase) {
grid.onRowChanged(target, oldValue, newValue);
}
},
valueConverter: function(v) {
return Math.max(0, parseInt(v));
}
});
exports.rowProperty.register(layout_base_1.View);
exports.rowSpanProperty = new layout_base_1.Property({
name: "rowSpan",
defaultValue: 1,
valueChanged: function(target, oldValue, newValue) {
var grid = target.parent;
if (grid instanceof GridLayoutBase) {
grid.onRowSpanChanged(target, oldValue, newValue);
}
},
valueConverter: function(v) {
return Math.max(1, parseInt(v));
}
});
exports.rowSpanProperty.register(layout_base_1.View);
var GridUnitType;
(function(GridUnitType) {
GridUnitType.PIXEL = "pixel";
GridUnitType.STAR = "star";
GridUnitType.AUTO = "auto";
GridUnitType.isValid = layout_base_1.makeValidator(GridUnitType.PIXEL, GridUnitType.STAR, GridUnitType.AUTO);
GridUnitType.parse = layout_base_1.makeParser(GridUnitType.isValid);
})(GridUnitType = exports.GridUnitType || (exports.GridUnitType = {}));
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_common_1 = __webpack_require__(136);
__export(__webpack_require__(136));
var LayoutBase = function(_super) {
__extends(LayoutBase, _super);
function LayoutBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
LayoutBase.prototype[layout_base_common_1.clipToBoundsProperty.getDefault] = function() {
return true;
};
LayoutBase.prototype[layout_base_common_1.clipToBoundsProperty.setNative] = function(value) {
console.warn("clipToBounds with value false is not supported on Android. You can use this.android.getParent().setClipChildren(false) as an alternative");
};
LayoutBase.prototype[layout_base_common_1.paddingTopProperty.getDefault] = function() {
return {
value: this._defaultPaddingTop,
unit: "px"
};
};
LayoutBase.prototype[layout_base_common_1.paddingTopProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingTop(this.nativeView, layout_base_common_1.Length.toDevicePixels(value, 0) + layout_base_common_1.Length.toDevicePixels(this.style.borderTopWidth, 0));
};
LayoutBase.prototype[layout_base_common_1.paddingRightProperty.getDefault] = function() {
return {
value: this._defaultPaddingRight,
unit: "px"
};
};
LayoutBase.prototype[layout_base_common_1.paddingRightProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingRight(this.nativeView, layout_base_common_1.Length.toDevicePixels(value, 0) + layout_base_common_1.Length.toDevicePixels(this.style.borderRightWidth, 0));
};
LayoutBase.prototype[layout_base_common_1.paddingBottomProperty.getDefault] = function() {
return {
value: this._defaultPaddingBottom,
unit: "px"
};
};
LayoutBase.prototype[layout_base_common_1.paddingBottomProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingBottom(this.nativeView, layout_base_common_1.Length.toDevicePixels(value, 0) + layout_base_common_1.Length.toDevicePixels(this.style.borderBottomWidth, 0));
};
LayoutBase.prototype[layout_base_common_1.paddingLeftProperty.getDefault] = function() {
return {
value: this._defaultPaddingLeft,
unit: "px"
};
};
LayoutBase.prototype[layout_base_common_1.paddingLeftProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingLeft(this.nativeView, layout_base_common_1.Length.toDevicePixels(value, 0) + layout_base_common_1.Length.toDevicePixels(this.style.borderLeftWidth, 0));
};
return LayoutBase;
}(layout_base_common_1.LayoutBaseCommon);
exports.LayoutBase = LayoutBase;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var LayoutBaseCommon = function(_super) {
__extends(LayoutBaseCommon, _super);
function LayoutBaseCommon() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._subViews = new Array();
return _this;
}
LayoutBaseCommon.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof view_1.View) {
this.addChild(value);
}
};
LayoutBaseCommon.prototype.getChildrenCount = function() {
return this._subViews.length;
};
Object.defineProperty(LayoutBaseCommon.prototype, "_childrenCount", {
get: function() {
return this._subViews.length;
},
enumerable: true,
configurable: true
});
LayoutBaseCommon.prototype.getChildAt = function(index) {
return this._subViews[index];
};
LayoutBaseCommon.prototype.getChildIndex = function(child) {
return this._subViews.indexOf(child);
};
LayoutBaseCommon.prototype.getChildById = function(id) {
return view_1.getViewById(this, id);
};
LayoutBaseCommon.prototype._registerLayoutChild = function(child) {};
LayoutBaseCommon.prototype._unregisterLayoutChild = function(child) {};
LayoutBaseCommon.prototype.addChild = function(child) {
this._subViews.push(child);
this._addView(child);
this._registerLayoutChild(child);
};
LayoutBaseCommon.prototype.insertChild = function(child, atIndex) {
this._subViews.splice(atIndex, 0, child);
this._addView(child, atIndex);
this._registerLayoutChild(child);
};
LayoutBaseCommon.prototype.removeChild = function(child) {
this._removeView(child);
var index = this._subViews.indexOf(child);
this._subViews.splice(index, 1);
this._unregisterLayoutChild(child);
};
LayoutBaseCommon.prototype.removeChildren = function() {
while (this.getChildrenCount() !== 0) {
this.removeChild(this._subViews[this.getChildrenCount() - 1]);
}
};
Object.defineProperty(LayoutBaseCommon.prototype, "padding", {
get: function() {
return this.style.padding;
},
set: function(value) {
this.style.padding = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBaseCommon.prototype, "paddingTop", {
get: function() {
return this.style.paddingTop;
},
set: function(value) {
this.style.paddingTop = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBaseCommon.prototype, "paddingRight", {
get: function() {
return this.style.paddingRight;
},
set: function(value) {
this.style.paddingRight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBaseCommon.prototype, "paddingBottom", {
get: function() {
return this.style.paddingBottom;
},
set: function(value) {
this.style.paddingBottom = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBaseCommon.prototype, "paddingLeft", {
get: function() {
return this.style.paddingLeft;
},
set: function(value) {
this.style.paddingLeft = value;
},
enumerable: true,
configurable: true
});
LayoutBaseCommon.prototype._childIndexToNativeChildIndex = function(index) {
if (index === undefined) {
return undefined;
}
var result = 0;
for (var i = 0; i < index && i < this._subViews.length; i++) {
result += this._subViews[i]._getNativeViewsCount();
}
return result;
};
LayoutBaseCommon.prototype.eachChildView = function(callback) {
for (var i = 0, length_1 = this._subViews.length; i < length_1; i++) {
var retVal = callback(this._subViews[i]);
if (retVal === false) {
break;
}
}
};
LayoutBaseCommon.prototype.eachLayoutChild = function(callback) {
var lastChild = null;
this.eachChildView(function(cv) {
cv._eachLayoutView(function(lv) {
if (lastChild && !lastChild.isCollapsed) {
callback(lastChild, false);
}
lastChild = lv;
});
return true;
});
if (lastChild && !lastChild.isCollapsed) {
callback(lastChild, true);
}
};
return LayoutBaseCommon;
}(view_1.CustomLayoutView);
exports.LayoutBaseCommon = LayoutBaseCommon;
exports.clipToBoundsProperty = new view_1.Property({
name: "clipToBounds",
defaultValue: true,
valueConverter: view_1.booleanConverter
});
exports.clipToBoundsProperty.register(LayoutBaseCommon);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var editable_text_base_1 = __webpack_require__(78);
__export(__webpack_require__(71));
var TextView = function(_super) {
__extends(TextView, _super);
function TextView() {
return _super !== null && _super.apply(this, arguments) || this;
}
TextView.prototype._configureEditText = function(editText) {
editText.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | android.text.InputType.TYPE_TEXT_FLAG_MULTI_LINE);
editText.setGravity(android.view.Gravity.TOP | android.view.Gravity.LEFT);
};
TextView.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
this.nativeView.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | android.text.InputType.TYPE_TEXT_FLAG_MULTI_LINE);
};
return TextView;
}(editable_text_base_1.EditableTextBase);
exports.TextView = TextView;
}, function(module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
value: true
});
var nativescript_intl_1 = __webpack_require__(139);
var nativescript_intl_2 = __webpack_require__(139);
exports.DateTimeFormat = nativescript_intl_2.DateTimeFormat;
exports.NumberFormat = nativescript_intl_2.NumberFormat;
if (!global.Intl) {
global.Intl = {};
}
global.Intl.DateTimeFormat = nativescript_intl_1.DateTimeFormat;
global.Intl.NumberFormat = nativescript_intl_1.NumberFormat;
}, function(module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
value: true
});
var nativescript_intl_common_1 = __webpack_require__(140);
var localesCache = new Map();
function getNativeLocale(locale) {
if (localesCache.has(locale)) {
return localesCache.get(locale);
}
var result;
if (locale) {
locale = locale.replace(/_/g, "-");
var firstHypenIndex = locale.indexOf("-");
var lang = "";
var country = "";
if (firstHypenIndex > -1) {
lang = locale.substr(0, firstHypenIndex);
var nextHypenIndex = locale.substr(firstHypenIndex + 1).indexOf("-");
country = locale.substr(firstHypenIndex + 1, nextHypenIndex > -1 ? nextHypenIndex : undefined);
} else {
lang = locale;
}
if (country !== "") {
result = new java.util.Locale(lang, country);
} else {
result = new java.util.Locale(lang);
}
} else {
result = new java.util.Locale("en", "US");
}
localesCache.set(locale, result);
return result;
}
var DateTimeFormat = function(_super) {
__extends(DateTimeFormat, _super);
function DateTimeFormat() {
return _super !== null && _super.apply(this, arguments) || this;
}
DateTimeFormat.prototype.getNativePattern = function(patternDefinition, locale) {
var result = "";
var flag = 0;
var nativeLocale;
if (locale) {
nativeLocale = getNativeLocale(locale);
flag++;
}
if (patternDefinition.date) {
flag = flag + 2;
}
if (patternDefinition.time) {
flag = flag + 4;
}
var dateFormat;
switch (flag) {
case 0:
dateFormat = java.text.DateFormat.getDateTimeInstance();
break;

case 1:
dateFormat = java.text.DateFormat.getDateTimeInstance(0, 0, nativeLocale);
break;

case 2:
dateFormat = java.text.DateFormat.getDateInstance(patternDefinition.date === nativescript_intl_common_1.FULL ? 0 : 3);
break;

case 3:
dateFormat = java.text.DateFormat.getDateInstance(patternDefinition.date === nativescript_intl_common_1.FULL ? 0 : 3, nativeLocale);
break;

case 4:
dateFormat = java.text.DateFormat.getTimeInstance(1);
break;

case 5:
dateFormat = java.text.DateFormat.getTimeInstance(1, nativeLocale);
break;

case 6:
dateFormat = java.text.DateFormat.getDateTimeInstance(patternDefinition.date === nativescript_intl_common_1.FULL ? 0 : 3, 1);
break;

case 7:
dateFormat = java.text.DateFormat.getDateTimeInstance(patternDefinition.date === nativescript_intl_common_1.FULL ? 0 : 3, 1, nativeLocale);
break;

default:
break;
}
result = dateFormat.toPattern();
return result;
};
DateTimeFormat.prototype.formatNative = function(pattern, locale, date) {
var sdf = locale ? new java.text.SimpleDateFormat(pattern, getNativeLocale(locale)) : new java.text.SimpleDateFormat(pattern);
return sdf.format(date ? new java.util.Date(date.valueOf()) : new java.util.Date()).toString();
};
return DateTimeFormat;
}(nativescript_intl_common_1.DateTimeFormat);
exports.DateTimeFormat = DateTimeFormat;
var NumberFormat = function(_super) {
__extends(NumberFormat, _super);
function NumberFormat() {
return _super !== null && _super.apply(this, arguments) || this;
}
NumberFormat.prototype.formatNative = function(value, locale, options, pattern) {
var numberFormat;
if (pattern) {
numberFormat = new java.text.DecimalFormat(pattern);
} else {
if (options) {
switch (options.style.toLowerCase()) {
case "decimal":
numberFormat = java.text.NumberFormat.getNumberInstance(getNativeLocale(locale));
break;

case "percent":
numberFormat = java.text.NumberFormat.getPercentInstance(getNativeLocale(locale));
break;

case "currency":
numberFormat = java.text.NumberFormat.getCurrencyInstance(getNativeLocale(locale));
if (options.currency !== void 0) {
numberFormat.setCurrency(java.util.Currency.getInstance(options.currency));
}
break;

default:
numberFormat = java.text.NumberFormat.getNumberInstance(getNativeLocale(locale));
break;
}
} else {
numberFormat = java.text.NumberFormat.getNumberInstance(getNativeLocale(locale));
}
}
if (options && options.minimumIntegerDigits !== void 0) {
numberFormat.setMinimumIntegerDigits(options.minimumIntegerDigits);
}
if (options && options.minimumFractionDigits !== void 0) {
numberFormat.setMinimumFractionDigits(options.minimumFractionDigits);
}
if (options && options.maximumFractionDigits !== void 0) {
numberFormat.setMaximumFractionDigits(options.maximumFractionDigits);
}
if (options && options.useGrouping !== void 0) {
numberFormat.setGroupingUsed(options.useGrouping);
}
var decimalFormatSymbols = locale ? new java.text.DecimalFormatSymbols(getNativeLocale(locale)) : new java.text.DecimalFormatSymbols();
numberFormat.setDecimalFormatSymbols(decimalFormatSymbols);
if (options && (options.style.toLowerCase() === "currency" && options.currencyDisplay === "code")) {
if (!pattern) {
var currrentPattern = numberFormat.toPattern();
currrentPattern = currrentPattern.replace("¤", "¤¤");
numberFormat = new java.text.DecimalFormat(currrentPattern);
numberFormat.setDecimalFormatSymbols(decimalFormatSymbols);
}
if (options.currency !== void 0) {
decimalFormatSymbols.setCurrency(java.util.Currency.getInstance(options.currency));
}
}
return numberFormat.format(value);
};
return NumberFormat;
}(nativescript_intl_common_1.NumberFormat);
exports.NumberFormat = NumberFormat;
}, function(module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
value: true
});
exports.NUMERIC = "numeric";
exports.LONG = "long";
exports.SHORT = "short";
exports.TWODIGIT = "2-digit";
exports.FULL = "full";
exports.resolvedPatterns = new Map();
var DateTimeFormat = function() {
function DateTimeFormat(locale, options, pattern) {
this.locale = locale;
this.options = options;
this.pattern = pattern;
this.dateTimeFormatElements = {
M: "month",
E: "weekday",
c: "weekday",
d: "day",
y: "year",
h: "hour",
H: "hour",
m: "minute",
s: "second",
z: "timeZoneName",
G: "era",
a: "hour12"
};
if (options && options.minute === exports.NUMERIC) {
this.options.minute = exports.TWODIGIT;
}
if (options && options.hour === exports.NUMERIC) {
this.options.hour = exports.TWODIGIT;
}
}
DateTimeFormat.prototype.hasTimeOptions = function(options) {
return options.hour !== undefined || options.minute !== undefined || options.second !== undefined;
};
DateTimeFormat.prototype.hasDateOptions = function(options) {
return options.weekday !== undefined || options.year !== undefined || options.month !== undefined || options.day !== undefined;
};
DateTimeFormat.prototype.useFullDatePattern = function(intlOptions) {
var i;
var propsArray = Object.keys(intlOptions);
var propsArrayLength = propsArray.length;
var result = false;
for (i = 0; i < propsArrayLength; i++) {
if (intlOptions[propsArray[i]] === exports.LONG || intlOptions[propsArray[i]] === exports.SHORT) {
result = true;
break;
}
}
return result;
};
DateTimeFormat.prototype.getNativePattern = function(patternDefinition, locale) {
return "";
};
DateTimeFormat.prototype.getCorrectPatternForLocale = function() {
var dateTimePatternOptions = {};
if (this.hasDateOptions(this.options)) {
if (this.useFullDatePattern(this.options)) {
dateTimePatternOptions.date = exports.FULL;
} else {
dateTimePatternOptions.date = exports.SHORT;
}
}
if (this.hasTimeOptions(this.options)) {
dateTimePatternOptions.time = exports.FULL;
}
var result = this.getNativePattern(dateTimePatternOptions, this.locale);
if (this.options.hour) {
if (this.options.hour12 !== undefined) {
result = this.options.hour12 ? result.replace(/H/g, "h") : result.replace(/h/g, "H");
} else {
this.options.hour12 = !(result.indexOf("H") > -1);
}
}
return result;
};
DateTimeFormat.prototype.getDateElementsFromPattern = function(pattern) {
var result = [];
var patternLength = pattern.length;
var i = 0;
var stringInsidePattern = false;
while (i < patternLength) {
if (pattern[i] === '"' || pattern[i] === "'") {
var p = i + 1;
while (p < patternLength && pattern[i] !== pattern[p]) {
p++;
}
for (var j = i; j < p + 1; j++) {
result.push({
isDateElement: false,
patternValue: pattern[j]
});
}
i = p + 1;
continue;
}
if (this.dateTimeFormatElements.hasOwnProperty(pattern[i])) {
var j = i;
while (i < patternLength && pattern[i] === pattern[j]) {
i++;
}
result.push({
isDateElement: true,
patternValue: pattern.substr(j, i - j),
intlOption: this.dateTimeFormatElements[pattern[j]]
});
} else {
result.push({
isDateElement: false,
patternValue: pattern[i]
});
i++;
}
}
return result;
};
DateTimeFormat.prototype.prepareDateElement = function(intlOption, dateElement) {
switch (intlOption) {
case exports.NUMERIC:
return dateElement;

case exports.TWODIGIT:
return dateElement.repeat(2);

case exports.SHORT:
return dateElement.repeat(3);

case exports.LONG:
return dateElement.repeat(4);

case true:
return dateElement;

case false:
return "";

default:
return dateElement;
}
};
DateTimeFormat.prototype.preparePattern = function(pattern, options) {
var patternOptions = this.getDateElementsFromPattern(pattern);
var patternOptionsLength = patternOptions.length;
for (var i_1 = 0; i_1 < patternOptionsLength; i_1++) {
if (patternOptions[i_1].isDateElement) {
var formatChar = patternOptions[i_1].patternValue[0];
var intlOptionValue = options[patternOptions[i_1].intlOption];
if (intlOptionValue !== undefined) {
var newPatternValue = this.prepareDateElement(intlOptionValue, formatChar);
patternOptions[i_1].patternValue = newPatternValue;
} else {
if (i_1 > 0) {
var j = i_1 - 1;
while (patternOptions[j] && patternOptions[j].isDateElement === false) {
if (patternOptions[j].patternValue !== " ") {
if (patternOptions[j].patternValue !== '"' && patternOptions[j].patternValue !== "'") {
patternOptions[j].patternValue = "";
}
break;
} else {
patternOptions[j].patternValue = "";
}
j--;
}
}
patternOptions[i_1].patternValue = "";
}
}
}
var result = [];
var i = 0;
while (patternOptions[i].patternValue === "" || patternOptions[i].isDateElement === false) {
i++;
}
for (i; i < patternOptionsLength; i++) {
result.push(patternOptions[i].patternValue);
}
return result.join("");
};
DateTimeFormat.prototype.formatNative = function(pattern, locale, date) {
return "";
};
Object.defineProperty(DateTimeFormat.prototype, "preparedPattern", {
get: function() {
if (!this._preparedPattern) {
if (this.pattern) {
this._preparedPattern = this.pattern;
} else {
if (exports.resolvedPatterns.has({
locale: this.locale,
options: this.options
})) {
this._preparedPattern = exports.resolvedPatterns.get({
locale: this.locale,
options: this.options
});
} else {
this._preparedPattern = this.preparePattern(this.getCorrectPatternForLocale(), this.options);
exports.resolvedPatterns.set({
locale: this.locale,
options: this.options
}, this._preparedPattern);
}
}
}
return this._preparedPattern;
},
enumerable: true,
configurable: true
});
DateTimeFormat.prototype.format = function(date) {
return this.formatNative(this.preparedPattern, this.locale, date);
};
return DateTimeFormat;
}();
exports.DateTimeFormat = DateTimeFormat;
var NumberFormat = function() {
function NumberFormat(locale, options, pattern) {
this.locale = locale;
this.options = options;
this.pattern = pattern;
}
NumberFormat.prototype.formatNative = function(value, locale, options, pattern) {
return "";
};
NumberFormat.prototype.format = function(value) {
return this.formatNative(value, this.locale, this.options, this.pattern);
};
return NumberFormat;
}();
exports.NumberFormat = NumberFormat;
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(92)) : typeof define === "function" && define.amd ? define([ "exports", "@angular/core" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.compiler = global.ng.compiler || {}), global.ng.core);
})(this, function(exports, _angular_core) {
"use strict";
var __extends = undefined && undefined.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var VERSION = new _angular_core.Version("4.1.0");
var TextAst = function() {
function TextAst(value, ngContentIndex, sourceSpan) {
this.value = value;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
TextAst.prototype.visit = function(visitor, context) {
return visitor.visitText(this, context);
};
return TextAst;
}();
var BoundTextAst = function() {
function BoundTextAst(value, ngContentIndex, sourceSpan) {
this.value = value;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
BoundTextAst.prototype.visit = function(visitor, context) {
return visitor.visitBoundText(this, context);
};
return BoundTextAst;
}();
var AttrAst = function() {
function AttrAst(name, value, sourceSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
}
AttrAst.prototype.visit = function(visitor, context) {
return visitor.visitAttr(this, context);
};
return AttrAst;
}();
var BoundElementPropertyAst = function() {
function BoundElementPropertyAst(name, type, securityContext, value, unit, sourceSpan) {
this.name = name;
this.type = type;
this.securityContext = securityContext;
this.value = value;
this.unit = unit;
this.sourceSpan = sourceSpan;
}
BoundElementPropertyAst.prototype.visit = function(visitor, context) {
return visitor.visitElementProperty(this, context);
};
Object.defineProperty(BoundElementPropertyAst.prototype, "isAnimation", {
get: function() {
return this.type === PropertyBindingType.Animation;
},
enumerable: true,
configurable: true
});
return BoundElementPropertyAst;
}();
var BoundEventAst = function() {
function BoundEventAst(name, target, phase, handler, sourceSpan) {
this.name = name;
this.target = target;
this.phase = phase;
this.handler = handler;
this.sourceSpan = sourceSpan;
}
BoundEventAst.calcFullName = function(name, target, phase) {
if (target) {
return target + ":" + name;
} else if (phase) {
return "@" + name + "." + phase;
} else {
return name;
}
};
BoundEventAst.prototype.visit = function(visitor, context) {
return visitor.visitEvent(this, context);
};
Object.defineProperty(BoundEventAst.prototype, "fullName", {
get: function() {
return BoundEventAst.calcFullName(this.name, this.target, this.phase);
},
enumerable: true,
configurable: true
});
Object.defineProperty(BoundEventAst.prototype, "isAnimation", {
get: function() {
return !!this.phase;
},
enumerable: true,
configurable: true
});
return BoundEventAst;
}();
var ReferenceAst = function() {
function ReferenceAst(name, value, sourceSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
}
ReferenceAst.prototype.visit = function(visitor, context) {
return visitor.visitReference(this, context);
};
return ReferenceAst;
}();
var VariableAst = function() {
function VariableAst(name, value, sourceSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
}
VariableAst.prototype.visit = function(visitor, context) {
return visitor.visitVariable(this, context);
};
return VariableAst;
}();
var ElementAst = function() {
function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan, endSourceSpan) {
this.name = name;
this.attrs = attrs;
this.inputs = inputs;
this.outputs = outputs;
this.references = references;
this.directives = directives;
this.providers = providers;
this.hasViewContainer = hasViewContainer;
this.queryMatches = queryMatches;
this.children = children;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
this.endSourceSpan = endSourceSpan;
}
ElementAst.prototype.visit = function(visitor, context) {
return visitor.visitElement(this, context);
};
return ElementAst;
}();
var EmbeddedTemplateAst = function() {
function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan) {
this.attrs = attrs;
this.outputs = outputs;
this.references = references;
this.variables = variables;
this.directives = directives;
this.providers = providers;
this.hasViewContainer = hasViewContainer;
this.queryMatches = queryMatches;
this.children = children;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
EmbeddedTemplateAst.prototype.visit = function(visitor, context) {
return visitor.visitEmbeddedTemplate(this, context);
};
return EmbeddedTemplateAst;
}();
var BoundDirectivePropertyAst = function() {
function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
this.directiveName = directiveName;
this.templateName = templateName;
this.value = value;
this.sourceSpan = sourceSpan;
}
BoundDirectivePropertyAst.prototype.visit = function(visitor, context) {
return visitor.visitDirectiveProperty(this, context);
};
return BoundDirectivePropertyAst;
}();
var DirectiveAst = function() {
function DirectiveAst(directive, inputs, hostProperties, hostEvents, contentQueryStartId, sourceSpan) {
this.directive = directive;
this.inputs = inputs;
this.hostProperties = hostProperties;
this.hostEvents = hostEvents;
this.contentQueryStartId = contentQueryStartId;
this.sourceSpan = sourceSpan;
}
DirectiveAst.prototype.visit = function(visitor, context) {
return visitor.visitDirective(this, context);
};
return DirectiveAst;
}();
var ProviderAst = function() {
function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
this.token = token;
this.multiProvider = multiProvider;
this.eager = eager;
this.providers = providers;
this.providerType = providerType;
this.lifecycleHooks = lifecycleHooks;
this.sourceSpan = sourceSpan;
}
ProviderAst.prototype.visit = function(visitor, context) {
return null;
};
return ProviderAst;
}();
var ProviderAstType = {};
ProviderAstType.PublicService = 0;
ProviderAstType.PrivateService = 1;
ProviderAstType.Component = 2;
ProviderAstType.Directive = 3;
ProviderAstType.Builtin = 4;
ProviderAstType[ProviderAstType.PublicService] = "PublicService";
ProviderAstType[ProviderAstType.PrivateService] = "PrivateService";
ProviderAstType[ProviderAstType.Component] = "Component";
ProviderAstType[ProviderAstType.Directive] = "Directive";
ProviderAstType[ProviderAstType.Builtin] = "Builtin";
var NgContentAst = function() {
function NgContentAst(index, ngContentIndex, sourceSpan) {
this.index = index;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
NgContentAst.prototype.visit = function(visitor, context) {
return visitor.visitNgContent(this, context);
};
return NgContentAst;
}();
var PropertyBindingType = {};
PropertyBindingType.Property = 0;
PropertyBindingType.Attribute = 1;
PropertyBindingType.Class = 2;
PropertyBindingType.Style = 3;
PropertyBindingType.Animation = 4;
PropertyBindingType[PropertyBindingType.Property] = "Property";
PropertyBindingType[PropertyBindingType.Attribute] = "Attribute";
PropertyBindingType[PropertyBindingType.Class] = "Class";
PropertyBindingType[PropertyBindingType.Style] = "Style";
PropertyBindingType[PropertyBindingType.Animation] = "Animation";
function templateVisitAll(visitor, asts, context) {
if (context === void 0) {
context = null;
}
var result = [];
var visit = visitor.visit ? function(ast) {
return visitor.visit(ast, context) || ast.visit(visitor, context);
} : function(ast) {
return ast.visit(visitor, context);
};
asts.forEach(function(ast) {
var astResult = visit(ast);
if (astResult) {
result.push(astResult);
}
});
return result;
}
var StaticSymbol = function() {
function StaticSymbol(filePath, name, members) {
this.filePath = filePath;
this.name = name;
this.members = members;
}
StaticSymbol.prototype.assertNoMembers = function() {
if (this.members.length) {
throw new Error("Illegal state: symbol without members expected, but got " + JSON.stringify(this) + ".");
}
};
return StaticSymbol;
}();
var StaticSymbolCache = function() {
function StaticSymbolCache() {
this.cache = new Map();
}
StaticSymbolCache.prototype.get = function(declarationFile, name, members) {
members = members || [];
var memberSuffix = members.length ? "." + members.join(".") : "";
var key = '"' + declarationFile + '".' + name + memberSuffix;
var result = this.cache.get(key);
if (!result) {
result = new StaticSymbol(declarationFile, name, members);
this.cache.set(key, result);
}
return result;
};
return StaticSymbolCache;
}();
var TagContentType = {};
TagContentType.RAW_TEXT = 0;
TagContentType.ESCAPABLE_RAW_TEXT = 1;
TagContentType.PARSABLE_DATA = 2;
TagContentType[TagContentType.RAW_TEXT] = "RAW_TEXT";
TagContentType[TagContentType.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
TagContentType[TagContentType.PARSABLE_DATA] = "PARSABLE_DATA";
function splitNsName(elementName) {
if (elementName[0] != ":") {
return [ null, elementName ];
}
var colonIndex = elementName.indexOf(":", 1);
if (colonIndex == -1) {
throw new Error('Unsupported format "' + elementName + '" expecting ":namespace:name"');
}
return [ elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1) ];
}
function isNgContainer(tagName) {
return splitNsName(tagName)[1] === "ng-container";
}
function isNgContent(tagName) {
return splitNsName(tagName)[1] === "ng-content";
}
function isNgTemplate(tagName) {
return splitNsName(tagName)[1] === "ng-template";
}
function getNsPrefix(fullName) {
return fullName === null ? null : splitNsName(fullName)[0];
}
function mergeNsAndName(prefix, localName) {
return prefix ? ":" + prefix + ":" + localName : localName;
}
var NAMED_ENTITIES = {
Aacute: "Á",
aacute: "á",
Acirc: "Â",
acirc: "â",
acute: "´",
AElig: "Æ",
aelig: "æ",
Agrave: "À",
agrave: "à",
alefsym: "ℵ",
Alpha: "Α",
alpha: "α",
amp: "&",
and: "∧",
ang: "∠",
apos: "'",
Aring: "Å",
aring: "å",
asymp: "≈",
Atilde: "Ã",
atilde: "ã",
Auml: "Ä",
auml: "ä",
bdquo: "„",
Beta: "Β",
beta: "β",
brvbar: "¦",
bull: "•",
cap: "∩",
Ccedil: "Ç",
ccedil: "ç",
cedil: "¸",
cent: "¢",
Chi: "Χ",
chi: "χ",
circ: "ˆ",
clubs: "♣",
cong: "≅",
copy: "©",
crarr: "↵",
cup: "∪",
curren: "¤",
dagger: "†",
Dagger: "‡",
darr: "↓",
dArr: "⇓",
deg: "°",
Delta: "Δ",
delta: "δ",
diams: "♦",
divide: "÷",
Eacute: "É",
eacute: "é",
Ecirc: "Ê",
ecirc: "ê",
Egrave: "È",
egrave: "è",
empty: "∅",
emsp: " ",
ensp: " ",
Epsilon: "Ε",
epsilon: "ε",
equiv: "≡",
Eta: "Η",
eta: "η",
ETH: "Ð",
eth: "ð",
Euml: "Ë",
euml: "ë",
euro: "€",
exist: "∃",
fnof: "ƒ",
forall: "∀",
frac12: "½",
frac14: "¼",
frac34: "¾",
frasl: "⁄",
Gamma: "Γ",
gamma: "γ",
ge: "≥",
gt: ">",
harr: "↔",
hArr: "⇔",
hearts: "♥",
hellip: "…",
Iacute: "Í",
iacute: "í",
Icirc: "Î",
icirc: "î",
iexcl: "¡",
Igrave: "Ì",
igrave: "ì",
image: "ℑ",
infin: "∞",
int: "∫",
Iota: "Ι",
iota: "ι",
iquest: "¿",
isin: "∈",
Iuml: "Ï",
iuml: "ï",
Kappa: "Κ",
kappa: "κ",
Lambda: "Λ",
lambda: "λ",
lang: "⟨",
laquo: "«",
larr: "←",
lArr: "⇐",
lceil: "⌈",
ldquo: "“",
le: "≤",
lfloor: "⌊",
lowast: "∗",
loz: "◊",
lrm: "‎",
lsaquo: "‹",
lsquo: "‘",
lt: "<",
macr: "¯",
mdash: "—",
micro: "µ",
middot: "·",
minus: "−",
Mu: "Μ",
mu: "μ",
nabla: "∇",
nbsp: " ",
ndash: "–",
ne: "≠",
ni: "∋",
not: "¬",
notin: "∉",
nsub: "⊄",
Ntilde: "Ñ",
ntilde: "ñ",
Nu: "Ν",
nu: "ν",
Oacute: "Ó",
oacute: "ó",
Ocirc: "Ô",
ocirc: "ô",
OElig: "Œ",
oelig: "œ",
Ograve: "Ò",
ograve: "ò",
oline: "‾",
Omega: "Ω",
omega: "ω",
Omicron: "Ο",
omicron: "ο",
oplus: "⊕",
or: "∨",
ordf: "ª",
ordm: "º",
Oslash: "Ø",
oslash: "ø",
Otilde: "Õ",
otilde: "õ",
otimes: "⊗",
Ouml: "Ö",
ouml: "ö",
para: "¶",
permil: "‰",
perp: "⊥",
Phi: "Φ",
phi: "φ",
Pi: "Π",
pi: "π",
piv: "ϖ",
plusmn: "±",
pound: "£",
prime: "′",
Prime: "″",
prod: "∏",
prop: "∝",
Psi: "Ψ",
psi: "ψ",
quot: '"',
radic: "√",
rang: "⟩",
raquo: "»",
rarr: "→",
rArr: "⇒",
rceil: "⌉",
rdquo: "”",
real: "ℜ",
reg: "®",
rfloor: "⌋",
Rho: "Ρ",
rho: "ρ",
rlm: "‏",
rsaquo: "›",
rsquo: "’",
sbquo: "‚",
Scaron: "Š",
scaron: "š",
sdot: "⋅",
sect: "§",
shy: "­",
Sigma: "Σ",
sigma: "σ",
sigmaf: "ς",
sim: "∼",
spades: "♠",
sub: "⊂",
sube: "⊆",
sum: "∑",
sup: "⊃",
sup1: "¹",
sup2: "²",
sup3: "³",
supe: "⊇",
szlig: "ß",
Tau: "Τ",
tau: "τ",
there4: "∴",
Theta: "Θ",
theta: "θ",
thetasym: "ϑ",
thinsp: " ",
THORN: "Þ",
thorn: "þ",
tilde: "˜",
times: "×",
trade: "™",
Uacute: "Ú",
uacute: "ú",
uarr: "↑",
uArr: "⇑",
Ucirc: "Û",
ucirc: "û",
Ugrave: "Ù",
ugrave: "ù",
uml: "¨",
upsih: "ϒ",
Upsilon: "Υ",
upsilon: "υ",
Uuml: "Ü",
uuml: "ü",
weierp: "℘",
Xi: "Ξ",
xi: "ξ",
Yacute: "Ý",
yacute: "ý",
yen: "¥",
yuml: "ÿ",
Yuml: "Ÿ",
Zeta: "Ζ",
zeta: "ζ",
zwj: "‍",
zwnj: "‌"
};
var HtmlTagDefinition = function() {
function HtmlTagDefinition(_a) {
var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, _c = _b.contentType, contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c, _d = _b.closedByParent, closedByParent = _d === void 0 ? false : _d, _e = _b.isVoid, isVoid = _e === void 0 ? false : _e, _f = _b.ignoreFirstLf, ignoreFirstLf = _f === void 0 ? false : _f;
var _this = this;
this.closedByChildren = {};
this.closedByParent = false;
this.canSelfClose = false;
if (closedByChildren && closedByChildren.length > 0) {
closedByChildren.forEach(function(tagName) {
return _this.closedByChildren[tagName] = true;
});
}
this.isVoid = isVoid;
this.closedByParent = closedByParent || isVoid;
if (requiredParents && requiredParents.length > 0) {
this.requiredParents = {};
this.parentToAdd = requiredParents[0];
requiredParents.forEach(function(tagName) {
return _this.requiredParents[tagName] = true;
});
}
this.implicitNamespacePrefix = implicitNamespacePrefix || null;
this.contentType = contentType;
this.ignoreFirstLf = ignoreFirstLf;
}
HtmlTagDefinition.prototype.requireExtraParent = function(currentParent) {
if (!this.requiredParents) {
return false;
}
if (!currentParent) {
return true;
}
var lcParent = currentParent.toLowerCase();
var isParentTemplate = lcParent === "template" || currentParent === "ng-template";
return !isParentTemplate && this.requiredParents[lcParent] != true;
};
HtmlTagDefinition.prototype.isClosedByChild = function(name) {
return this.isVoid || name.toLowerCase() in this.closedByChildren;
};
return HtmlTagDefinition;
}();
var TAG_DEFINITIONS = {
base: new HtmlTagDefinition({
isVoid: true
}),
meta: new HtmlTagDefinition({
isVoid: true
}),
area: new HtmlTagDefinition({
isVoid: true
}),
embed: new HtmlTagDefinition({
isVoid: true
}),
link: new HtmlTagDefinition({
isVoid: true
}),
img: new HtmlTagDefinition({
isVoid: true
}),
input: new HtmlTagDefinition({
isVoid: true
}),
param: new HtmlTagDefinition({
isVoid: true
}),
hr: new HtmlTagDefinition({
isVoid: true
}),
br: new HtmlTagDefinition({
isVoid: true
}),
source: new HtmlTagDefinition({
isVoid: true
}),
track: new HtmlTagDefinition({
isVoid: true
}),
wbr: new HtmlTagDefinition({
isVoid: true
}),
p: new HtmlTagDefinition({
closedByChildren: [ "address", "article", "aside", "blockquote", "div", "dl", "fieldset", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "main", "nav", "ol", "p", "pre", "section", "table", "ul" ],
closedByParent: true
}),
thead: new HtmlTagDefinition({
closedByChildren: [ "tbody", "tfoot" ]
}),
tbody: new HtmlTagDefinition({
closedByChildren: [ "tbody", "tfoot" ],
closedByParent: true
}),
tfoot: new HtmlTagDefinition({
closedByChildren: [ "tbody" ],
closedByParent: true
}),
tr: new HtmlTagDefinition({
closedByChildren: [ "tr" ],
requiredParents: [ "tbody", "tfoot", "thead" ],
closedByParent: true
}),
td: new HtmlTagDefinition({
closedByChildren: [ "td", "th" ],
closedByParent: true
}),
th: new HtmlTagDefinition({
closedByChildren: [ "td", "th" ],
closedByParent: true
}),
col: new HtmlTagDefinition({
requiredParents: [ "colgroup" ],
isVoid: true
}),
svg: new HtmlTagDefinition({
implicitNamespacePrefix: "svg"
}),
math: new HtmlTagDefinition({
implicitNamespacePrefix: "math"
}),
li: new HtmlTagDefinition({
closedByChildren: [ "li" ],
closedByParent: true
}),
dt: new HtmlTagDefinition({
closedByChildren: [ "dt", "dd" ]
}),
dd: new HtmlTagDefinition({
closedByChildren: [ "dt", "dd" ],
closedByParent: true
}),
rb: new HtmlTagDefinition({
closedByChildren: [ "rb", "rt", "rtc", "rp" ],
closedByParent: true
}),
rt: new HtmlTagDefinition({
closedByChildren: [ "rb", "rt", "rtc", "rp" ],
closedByParent: true
}),
rtc: new HtmlTagDefinition({
closedByChildren: [ "rb", "rtc", "rp" ],
closedByParent: true
}),
rp: new HtmlTagDefinition({
closedByChildren: [ "rb", "rt", "rtc", "rp" ],
closedByParent: true
}),
optgroup: new HtmlTagDefinition({
closedByChildren: [ "optgroup" ],
closedByParent: true
}),
option: new HtmlTagDefinition({
closedByChildren: [ "option", "optgroup" ],
closedByParent: true
}),
pre: new HtmlTagDefinition({
ignoreFirstLf: true
}),
listing: new HtmlTagDefinition({
ignoreFirstLf: true
}),
style: new HtmlTagDefinition({
contentType: TagContentType.RAW_TEXT
}),
script: new HtmlTagDefinition({
contentType: TagContentType.RAW_TEXT
}),
title: new HtmlTagDefinition({
contentType: TagContentType.ESCAPABLE_RAW_TEXT
}),
textarea: new HtmlTagDefinition({
contentType: TagContentType.ESCAPABLE_RAW_TEXT,
ignoreFirstLf: true
})
};
var _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
function getHtmlTagDefinition(tagName) {
return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
}
var _SELECTOR_REGEXP = new RegExp("(\\:not\\()|" + "([-\\w]+)|" + "(?:\\.([-\\w]+))|" + "(?:\\[([-.\\w*]+)(?:=([\"']?)([^\\]\"']*)\\5)?\\])|" + "(\\))|" + "(\\s*,\\s*)", "g");
var CssSelector = function() {
function CssSelector() {
this.element = null;
this.classNames = [];
this.attrs = [];
this.notSelectors = [];
}
CssSelector.parse = function(selector) {
var results = [];
var _addResult = function(res, cssSel) {
if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 && cssSel.attrs.length == 0) {
cssSel.element = "*";
}
res.push(cssSel);
};
var cssSelector = new CssSelector();
var match;
var current = cssSelector;
var inNot = false;
_SELECTOR_REGEXP.lastIndex = 0;
while (match = _SELECTOR_REGEXP.exec(selector)) {
if (match[1]) {
if (inNot) {
throw new Error("Nesting :not is not allowed in a selector");
}
inNot = true;
current = new CssSelector();
cssSelector.notSelectors.push(current);
}
if (match[2]) {
current.setElement(match[2]);
}
if (match[3]) {
current.addClassName(match[3]);
}
if (match[4]) {
current.addAttribute(match[4], match[6]);
}
if (match[7]) {
inNot = false;
current = cssSelector;
}
if (match[8]) {
if (inNot) {
throw new Error("Multiple selectors in :not are not supported");
}
_addResult(results, cssSelector);
cssSelector = current = new CssSelector();
}
}
_addResult(results, cssSelector);
return results;
};
CssSelector.prototype.isElementSelector = function() {
return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 && this.notSelectors.length === 0;
};
CssSelector.prototype.hasElementSelector = function() {
return !!this.element;
};
CssSelector.prototype.setElement = function(element) {
if (element === void 0) {
element = null;
}
this.element = element;
};
CssSelector.prototype.getMatchingElementTemplate = function() {
var tagName = this.element || "div";
var classAttr = this.classNames.length > 0 ? ' class="' + this.classNames.join(" ") + '"' : "";
var attrs = "";
for (var i = 0; i < this.attrs.length; i += 2) {
var attrName = this.attrs[i];
var attrValue = this.attrs[i + 1] !== "" ? '="' + this.attrs[i + 1] + '"' : "";
attrs += " " + attrName + attrValue;
}
return getHtmlTagDefinition(tagName).isVoid ? "<" + tagName + classAttr + attrs + "/>" : "<" + tagName + classAttr + attrs + "></" + tagName + ">";
};
CssSelector.prototype.addAttribute = function(name, value) {
if (value === void 0) {
value = "";
}
this.attrs.push(name, value && value.toLowerCase() || "");
};
CssSelector.prototype.addClassName = function(name) {
this.classNames.push(name.toLowerCase());
};
CssSelector.prototype.toString = function() {
var res = this.element || "";
if (this.classNames) {
this.classNames.forEach(function(klass) {
return res += "." + klass;
});
}
if (this.attrs) {
for (var i = 0; i < this.attrs.length; i += 2) {
var name = this.attrs[i];
var value = this.attrs[i + 1];
res += "[" + name + (value ? "=" + value : "") + "]";
}
}
this.notSelectors.forEach(function(notSelector) {
return res += ":not(" + notSelector + ")";
});
return res;
};
return CssSelector;
}();
var SelectorMatcher = function() {
function SelectorMatcher() {
this._elementMap = new Map();
this._elementPartialMap = new Map();
this._classMap = new Map();
this._classPartialMap = new Map();
this._attrValueMap = new Map();
this._attrValuePartialMap = new Map();
this._listContexts = [];
}
SelectorMatcher.createNotMatcher = function(notSelectors) {
var notMatcher = new SelectorMatcher();
notMatcher.addSelectables(notSelectors, null);
return notMatcher;
};
SelectorMatcher.prototype.addSelectables = function(cssSelectors, callbackCtxt) {
var listContext = null;
if (cssSelectors.length > 1) {
listContext = new SelectorListContext(cssSelectors);
this._listContexts.push(listContext);
}
for (var i = 0; i < cssSelectors.length; i++) {
this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
}
};
SelectorMatcher.prototype._addSelectable = function(cssSelector, callbackCtxt, listContext) {
var matcher = this;
var element = cssSelector.element;
var classNames = cssSelector.classNames;
var attrs = cssSelector.attrs;
var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
if (element) {
var isTerminal = attrs.length === 0 && classNames.length === 0;
if (isTerminal) {
this._addTerminal(matcher._elementMap, element, selectable);
} else {
matcher = this._addPartial(matcher._elementPartialMap, element);
}
}
if (classNames) {
for (var i = 0; i < classNames.length; i++) {
var isTerminal = attrs.length === 0 && i === classNames.length - 1;
var className = classNames[i];
if (isTerminal) {
this._addTerminal(matcher._classMap, className, selectable);
} else {
matcher = this._addPartial(matcher._classPartialMap, className);
}
}
}
if (attrs) {
for (var i = 0; i < attrs.length; i += 2) {
var isTerminal = i === attrs.length - 2;
var name = attrs[i];
var value = attrs[i + 1];
if (isTerminal) {
var terminalMap = matcher._attrValueMap;
var terminalValuesMap = terminalMap.get(name);
if (!terminalValuesMap) {
terminalValuesMap = new Map();
terminalMap.set(name, terminalValuesMap);
}
this._addTerminal(terminalValuesMap, value, selectable);
} else {
var partialMap = matcher._attrValuePartialMap;
var partialValuesMap = partialMap.get(name);
if (!partialValuesMap) {
partialValuesMap = new Map();
partialMap.set(name, partialValuesMap);
}
matcher = this._addPartial(partialValuesMap, value);
}
}
}
};
SelectorMatcher.prototype._addTerminal = function(map, name, selectable) {
var terminalList = map.get(name);
if (!terminalList) {
terminalList = [];
map.set(name, terminalList);
}
terminalList.push(selectable);
};
SelectorMatcher.prototype._addPartial = function(map, name) {
var matcher = map.get(name);
if (!matcher) {
matcher = new SelectorMatcher();
map.set(name, matcher);
}
return matcher;
};
SelectorMatcher.prototype.match = function(cssSelector, matchedCallback) {
var result = false;
var element = cssSelector.element;
var classNames = cssSelector.classNames;
var attrs = cssSelector.attrs;
for (var i = 0; i < this._listContexts.length; i++) {
this._listContexts[i].alreadyMatched = false;
}
result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
if (classNames) {
for (var i = 0; i < classNames.length; i++) {
var className = classNames[i];
result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
}
}
if (attrs) {
for (var i = 0; i < attrs.length; i += 2) {
var name = attrs[i];
var value = attrs[i + 1];
var terminalValuesMap = this._attrValueMap.get(name);
if (value) {
result = this._matchTerminal(terminalValuesMap, "", cssSelector, matchedCallback) || result;
}
result = this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
var partialValuesMap = this._attrValuePartialMap.get(name);
if (value) {
result = this._matchPartial(partialValuesMap, "", cssSelector, matchedCallback) || result;
}
result = this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
}
}
return result;
};
SelectorMatcher.prototype._matchTerminal = function(map, name, cssSelector, matchedCallback) {
if (!map || typeof name !== "string") {
return false;
}
var selectables = map.get(name) || [];
var starSelectables = map.get("*");
if (starSelectables) {
selectables = selectables.concat(starSelectables);
}
if (selectables.length === 0) {
return false;
}
var selectable;
var result = false;
for (var i = 0; i < selectables.length; i++) {
selectable = selectables[i];
result = selectable.finalize(cssSelector, matchedCallback) || result;
}
return result;
};
SelectorMatcher.prototype._matchPartial = function(map, name, cssSelector, matchedCallback) {
if (!map || typeof name !== "string") {
return false;
}
var nestedSelector = map.get(name);
if (!nestedSelector) {
return false;
}
return nestedSelector.match(cssSelector, matchedCallback);
};
return SelectorMatcher;
}();
var SelectorListContext = function() {
function SelectorListContext(selectors) {
this.selectors = selectors;
this.alreadyMatched = false;
}
return SelectorListContext;
}();
var SelectorContext = function() {
function SelectorContext(selector, cbContext, listContext) {
this.selector = selector;
this.cbContext = cbContext;
this.listContext = listContext;
this.notSelectors = selector.notSelectors;
}
SelectorContext.prototype.finalize = function(cssSelector, callback) {
var result = true;
if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
result = !notMatcher.match(cssSelector, null);
}
if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
if (this.listContext) {
this.listContext.alreadyMatched = true;
}
callback(this.selector, this.cbContext);
}
return result;
};
return SelectorContext;
}();
var MODULE_SUFFIX = "";
var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
function dashCaseToCamelCase(input) {
return input.replace(DASH_CASE_REGEXP, function() {
var m = [];
for (var _i = 0; _i < arguments.length; _i++) {
m[_i] = arguments[_i];
}
return m[1].toUpperCase();
});
}
function splitAtColon(input, defaultValues) {
return _splitAt(input, ":", defaultValues);
}
function splitAtPeriod(input, defaultValues) {
return _splitAt(input, ".", defaultValues);
}
function _splitAt(input, character, defaultValues) {
var characterIndex = input.indexOf(character);
if (characterIndex == -1) return defaultValues;
return [ input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim() ];
}
function visitValue(value, visitor, context) {
if (Array.isArray(value)) {
return visitor.visitArray(value, context);
}
if (isStrictStringMap(value)) {
return visitor.visitStringMap(value, context);
}
if (value == null || typeof value == "string" || typeof value == "number" || typeof value == "boolean") {
return visitor.visitPrimitive(value, context);
}
return visitor.visitOther(value, context);
}
function isDefined(val) {
return val !== null && val !== undefined;
}
function noUndefined(val) {
return val === undefined ? null : val;
}
var ValueTransformer = function() {
function ValueTransformer() {}
ValueTransformer.prototype.visitArray = function(arr, context) {
var _this = this;
return arr.map(function(value) {
return visitValue(value, _this, context);
});
};
ValueTransformer.prototype.visitStringMap = function(map, context) {
var _this = this;
var result = {};
Object.keys(map).forEach(function(key) {
result[key] = visitValue(map[key], _this, context);
});
return result;
};
ValueTransformer.prototype.visitPrimitive = function(value, context) {
return value;
};
ValueTransformer.prototype.visitOther = function(value, context) {
return value;
};
return ValueTransformer;
}();
var SyncAsyncResult = function() {
function SyncAsyncResult(syncResult, asyncResult) {
if (asyncResult === void 0) {
asyncResult = null;
}
this.syncResult = syncResult;
this.asyncResult = asyncResult;
if (!asyncResult) {
this.asyncResult = Promise.resolve(syncResult);
}
}
return SyncAsyncResult;
}();
function syntaxError(msg) {
var error = Error(msg);
error[ERROR_SYNTAX_ERROR] = true;
return error;
}
var ERROR_SYNTAX_ERROR = "ngSyntaxError";
function isSyntaxError(error) {
return error[ERROR_SYNTAX_ERROR];
}
function escapeRegExp(s) {
return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1");
}
var STRING_MAP_PROTO = Object.getPrototypeOf({});
function isStrictStringMap(obj) {
return typeof obj === "object" && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
}
function utf8Encode(str) {
var encoded = "";
for (var index = 0; index < str.length; index++) {
var codePoint = str.charCodeAt(index);
if (codePoint >= 55296 && codePoint <= 56319 && str.length > index + 1) {
var low = str.charCodeAt(index + 1);
if (low >= 56320 && low <= 57343) {
index++;
codePoint = (codePoint - 55296 << 10) + low - 56320 + 65536;
}
}
if (codePoint <= 127) {
encoded += String.fromCharCode(codePoint);
} else if (codePoint <= 2047) {
encoded += String.fromCharCode(codePoint >> 6 & 31 | 192, codePoint & 63 | 128);
} else if (codePoint <= 65535) {
encoded += String.fromCharCode(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
} else if (codePoint <= 2097151) {
encoded += String.fromCharCode(codePoint >> 18 & 7 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
}
}
return encoded;
}
var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
var CompileAnimationEntryMetadata = function() {
function CompileAnimationEntryMetadata(name, definitions) {
if (name === void 0) {
name = null;
}
if (definitions === void 0) {
definitions = null;
}
this.name = name;
this.definitions = definitions;
}
return CompileAnimationEntryMetadata;
}();
var CompileAnimationStateMetadata = function() {
function CompileAnimationStateMetadata() {}
return CompileAnimationStateMetadata;
}();
var CompileAnimationStateDeclarationMetadata = function(_super) {
__extends(CompileAnimationStateDeclarationMetadata, _super);
function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
var _this = _super.call(this) || this;
_this.stateNameExpr = stateNameExpr;
_this.styles = styles;
return _this;
}
return CompileAnimationStateDeclarationMetadata;
}(CompileAnimationStateMetadata);
var CompileAnimationStateTransitionMetadata = function(_super) {
__extends(CompileAnimationStateTransitionMetadata, _super);
function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
var _this = _super.call(this) || this;
_this.stateChangeExpr = stateChangeExpr;
_this.steps = steps;
return _this;
}
return CompileAnimationStateTransitionMetadata;
}(CompileAnimationStateMetadata);
var CompileAnimationMetadata = function() {
function CompileAnimationMetadata() {}
return CompileAnimationMetadata;
}();
var CompileAnimationKeyframesSequenceMetadata = function(_super) {
__extends(CompileAnimationKeyframesSequenceMetadata, _super);
function CompileAnimationKeyframesSequenceMetadata(steps) {
if (steps === void 0) {
steps = [];
}
var _this = _super.call(this) || this;
_this.steps = steps;
return _this;
}
return CompileAnimationKeyframesSequenceMetadata;
}(CompileAnimationMetadata);
var CompileAnimationStyleMetadata = function(_super) {
__extends(CompileAnimationStyleMetadata, _super);
function CompileAnimationStyleMetadata(offset, styles) {
if (styles === void 0) {
styles = null;
}
var _this = _super.call(this) || this;
_this.offset = offset;
_this.styles = styles;
return _this;
}
return CompileAnimationStyleMetadata;
}(CompileAnimationMetadata);
var CompileAnimationAnimateMetadata = function(_super) {
__extends(CompileAnimationAnimateMetadata, _super);
function CompileAnimationAnimateMetadata(timings, styles) {
if (timings === void 0) {
timings = 0;
}
if (styles === void 0) {
styles = null;
}
var _this = _super.call(this) || this;
_this.timings = timings;
_this.styles = styles;
return _this;
}
return CompileAnimationAnimateMetadata;
}(CompileAnimationMetadata);
var CompileAnimationWithStepsMetadata = function(_super) {
__extends(CompileAnimationWithStepsMetadata, _super);
function CompileAnimationWithStepsMetadata(steps) {
if (steps === void 0) {
steps = null;
}
var _this = _super.call(this) || this;
_this.steps = steps;
return _this;
}
return CompileAnimationWithStepsMetadata;
}(CompileAnimationMetadata);
var CompileAnimationSequenceMetadata = function(_super) {
__extends(CompileAnimationSequenceMetadata, _super);
function CompileAnimationSequenceMetadata(steps) {
if (steps === void 0) {
steps = null;
}
return _super.call(this, steps) || this;
}
return CompileAnimationSequenceMetadata;
}(CompileAnimationWithStepsMetadata);
var CompileAnimationGroupMetadata = function(_super) {
__extends(CompileAnimationGroupMetadata, _super);
function CompileAnimationGroupMetadata(steps) {
if (steps === void 0) {
steps = null;
}
return _super.call(this, steps) || this;
}
return CompileAnimationGroupMetadata;
}(CompileAnimationWithStepsMetadata);
function _sanitizeIdentifier(name) {
return name.replace(/\W/g, "_");
}
var _anonymousTypeIndex = 0;
function identifierName(compileIdentifier) {
if (!compileIdentifier || !compileIdentifier.reference) {
return null;
}
var ref = compileIdentifier.reference;
if (ref instanceof StaticSymbol) {
return ref.name;
}
if (ref["__anonymousType"]) {
return ref["__anonymousType"];
}
var identifier = _angular_core.ɵstringify(ref);
if (identifier.indexOf("(") >= 0) {
identifier = "anonymous_" + _anonymousTypeIndex++;
ref["__anonymousType"] = identifier;
} else {
identifier = _sanitizeIdentifier(identifier);
}
return identifier;
}
function identifierModuleUrl(compileIdentifier) {
var ref = compileIdentifier.reference;
if (ref instanceof StaticSymbol) {
return ref.filePath;
}
return _angular_core.ɵreflector.importUri(ref);
}
function viewClassName(compType, embeddedTemplateIndex) {
return "View_" + identifierName({
reference: compType
}) + "_" + embeddedTemplateIndex;
}
function rendererTypeName(compType) {
return "RenderType_" + identifierName({
reference: compType
});
}
function hostViewClassName(compType) {
return "HostView_" + identifierName({
reference: compType
});
}
function dirWrapperClassName(dirType) {
return "Wrapper_" + identifierName({
reference: dirType
});
}
function componentFactoryName(compType) {
return identifierName({
reference: compType
}) + "NgFactory";
}
var CompileSummaryKind = {};
CompileSummaryKind.Pipe = 0;
CompileSummaryKind.Directive = 1;
CompileSummaryKind.NgModule = 2;
CompileSummaryKind.Injectable = 3;
CompileSummaryKind[CompileSummaryKind.Pipe] = "Pipe";
CompileSummaryKind[CompileSummaryKind.Directive] = "Directive";
CompileSummaryKind[CompileSummaryKind.NgModule] = "NgModule";
CompileSummaryKind[CompileSummaryKind.Injectable] = "Injectable";
function tokenName(token) {
return token.value != null ? _sanitizeIdentifier(token.value) : identifierName(token.identifier);
}
function tokenReference(token) {
if (token.identifier != null) {
return token.identifier.reference;
} else {
return token.value;
}
}
var CompileStylesheetMetadata = function() {
function CompileStylesheetMetadata(_a) {
var _b = _a === void 0 ? {} : _a, moduleUrl = _b.moduleUrl, styles = _b.styles, styleUrls = _b.styleUrls;
this.moduleUrl = moduleUrl || null;
this.styles = _normalizeArray(styles);
this.styleUrls = _normalizeArray(styleUrls);
}
return CompileStylesheetMetadata;
}();
var CompileTemplateMetadata = function() {
function CompileTemplateMetadata(_a) {
var encapsulation = _a.encapsulation, template = _a.template, templateUrl = _a.templateUrl, styles = _a.styles, styleUrls = _a.styleUrls, externalStylesheets = _a.externalStylesheets, animations = _a.animations, ngContentSelectors = _a.ngContentSelectors, interpolation = _a.interpolation, isInline = _a.isInline;
this.encapsulation = encapsulation;
this.template = template;
this.templateUrl = templateUrl;
this.styles = _normalizeArray(styles);
this.styleUrls = _normalizeArray(styleUrls);
this.externalStylesheets = _normalizeArray(externalStylesheets);
this.animations = animations ? flatten(animations) : [];
this.ngContentSelectors = ngContentSelectors || [];
if (interpolation && interpolation.length != 2) {
throw new Error("'interpolation' should have a start and an end symbol.");
}
this.interpolation = interpolation;
this.isInline = isInline;
}
CompileTemplateMetadata.prototype.toSummary = function() {
return {
animations: this.animations.map(function(anim) {
return anim.name;
}),
ngContentSelectors: this.ngContentSelectors,
encapsulation: this.encapsulation
};
};
return CompileTemplateMetadata;
}();
var CompileDirectiveMetadata = function() {
function CompileDirectiveMetadata(_a) {
var isHost = _a.isHost, type = _a.type, isComponent = _a.isComponent, selector = _a.selector, exportAs = _a.exportAs, changeDetection = _a.changeDetection, inputs = _a.inputs, outputs = _a.outputs, hostListeners = _a.hostListeners, hostProperties = _a.hostProperties, hostAttributes = _a.hostAttributes, providers = _a.providers, viewProviders = _a.viewProviders, queries = _a.queries, viewQueries = _a.viewQueries, entryComponents = _a.entryComponents, template = _a.template, componentViewType = _a.componentViewType, rendererType = _a.rendererType, componentFactory = _a.componentFactory;
this.isHost = !!isHost;
this.type = type;
this.isComponent = isComponent;
this.selector = selector;
this.exportAs = exportAs;
this.changeDetection = changeDetection;
this.inputs = inputs;
this.outputs = outputs;
this.hostListeners = hostListeners;
this.hostProperties = hostProperties;
this.hostAttributes = hostAttributes;
this.providers = _normalizeArray(providers);
this.viewProviders = _normalizeArray(viewProviders);
this.queries = _normalizeArray(queries);
this.viewQueries = _normalizeArray(viewQueries);
this.entryComponents = _normalizeArray(entryComponents);
this.template = template;
this.componentViewType = componentViewType;
this.rendererType = rendererType;
this.componentFactory = componentFactory;
}
CompileDirectiveMetadata.create = function(_a) {
var isHost = _a.isHost, type = _a.type, isComponent = _a.isComponent, selector = _a.selector, exportAs = _a.exportAs, changeDetection = _a.changeDetection, inputs = _a.inputs, outputs = _a.outputs, host = _a.host, providers = _a.providers, viewProviders = _a.viewProviders, queries = _a.queries, viewQueries = _a.viewQueries, entryComponents = _a.entryComponents, template = _a.template, componentViewType = _a.componentViewType, rendererType = _a.rendererType, componentFactory = _a.componentFactory;
var hostListeners = {};
var hostProperties = {};
var hostAttributes = {};
if (host != null) {
Object.keys(host).forEach(function(key) {
var value = host[key];
var matches = key.match(HOST_REG_EXP);
if (matches === null) {
hostAttributes[key] = value;
} else if (matches[1] != null) {
hostProperties[matches[1]] = value;
} else if (matches[2] != null) {
hostListeners[matches[2]] = value;
}
});
}
var inputsMap = {};
if (inputs != null) {
inputs.forEach(function(bindConfig) {
var parts = splitAtColon(bindConfig, [ bindConfig, bindConfig ]);
inputsMap[parts[0]] = parts[1];
});
}
var outputsMap = {};
if (outputs != null) {
outputs.forEach(function(bindConfig) {
var parts = splitAtColon(bindConfig, [ bindConfig, bindConfig ]);
outputsMap[parts[0]] = parts[1];
});
}
return new CompileDirectiveMetadata({
isHost: isHost,
type: type,
isComponent: !!isComponent,
selector: selector,
exportAs: exportAs,
changeDetection: changeDetection,
inputs: inputsMap,
outputs: outputsMap,
hostListeners: hostListeners,
hostProperties: hostProperties,
hostAttributes: hostAttributes,
providers: providers,
viewProviders: viewProviders,
queries: queries,
viewQueries: viewQueries,
entryComponents: entryComponents,
template: template,
componentViewType: componentViewType,
rendererType: rendererType,
componentFactory: componentFactory
});
};
CompileDirectiveMetadata.prototype.toSummary = function() {
return {
summaryKind: CompileSummaryKind.Directive,
type: this.type,
isComponent: this.isComponent,
selector: this.selector,
exportAs: this.exportAs,
inputs: this.inputs,
outputs: this.outputs,
hostListeners: this.hostListeners,
hostProperties: this.hostProperties,
hostAttributes: this.hostAttributes,
providers: this.providers,
viewProviders: this.viewProviders,
queries: this.queries,
viewQueries: this.viewQueries,
entryComponents: this.entryComponents,
changeDetection: this.changeDetection,
template: this.template && this.template.toSummary(),
componentViewType: this.componentViewType,
rendererType: this.rendererType,
componentFactory: this.componentFactory
};
};
return CompileDirectiveMetadata;
}();
function createHostComponentMeta(hostTypeReference, compMeta, hostViewType) {
var template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
return CompileDirectiveMetadata.create({
isHost: true,
type: {
reference: hostTypeReference,
diDeps: [],
lifecycleHooks: []
},
template: new CompileTemplateMetadata({
encapsulation: _angular_core.ViewEncapsulation.None,
template: template,
templateUrl: "",
styles: [],
styleUrls: [],
ngContentSelectors: [],
animations: [],
isInline: true,
externalStylesheets: [],
interpolation: null
}),
exportAs: null,
changeDetection: _angular_core.ChangeDetectionStrategy.Default,
inputs: [],
outputs: [],
host: {},
isComponent: true,
selector: "*",
providers: [],
viewProviders: [],
queries: [],
viewQueries: [],
componentViewType: hostViewType,
rendererType: {
id: "__Host__",
encapsulation: _angular_core.ViewEncapsulation.None,
styles: [],
data: {}
},
entryComponents: [],
componentFactory: null
});
}
var CompilePipeMetadata = function() {
function CompilePipeMetadata(_a) {
var type = _a.type, name = _a.name, pure = _a.pure;
this.type = type;
this.name = name;
this.pure = !!pure;
}
CompilePipeMetadata.prototype.toSummary = function() {
return {
summaryKind: CompileSummaryKind.Pipe,
type: this.type,
name: this.name,
pure: this.pure
};
};
return CompilePipeMetadata;
}();
var CompileNgModuleMetadata = function() {
function CompileNgModuleMetadata(_a) {
var type = _a.type, providers = _a.providers, declaredDirectives = _a.declaredDirectives, exportedDirectives = _a.exportedDirectives, declaredPipes = _a.declaredPipes, exportedPipes = _a.exportedPipes, entryComponents = _a.entryComponents, bootstrapComponents = _a.bootstrapComponents, importedModules = _a.importedModules, exportedModules = _a.exportedModules, schemas = _a.schemas, transitiveModule = _a.transitiveModule, id = _a.id;
this.type = type || null;
this.declaredDirectives = _normalizeArray(declaredDirectives);
this.exportedDirectives = _normalizeArray(exportedDirectives);
this.declaredPipes = _normalizeArray(declaredPipes);
this.exportedPipes = _normalizeArray(exportedPipes);
this.providers = _normalizeArray(providers);
this.entryComponents = _normalizeArray(entryComponents);
this.bootstrapComponents = _normalizeArray(bootstrapComponents);
this.importedModules = _normalizeArray(importedModules);
this.exportedModules = _normalizeArray(exportedModules);
this.schemas = _normalizeArray(schemas);
this.id = id || null;
this.transitiveModule = transitiveModule || null;
}
CompileNgModuleMetadata.prototype.toSummary = function() {
var module = this.transitiveModule;
return {
summaryKind: CompileSummaryKind.NgModule,
type: this.type,
entryComponents: module.entryComponents,
providers: module.providers,
modules: module.modules,
exportedDirectives: module.exportedDirectives,
exportedPipes: module.exportedPipes
};
};
return CompileNgModuleMetadata;
}();
var TransitiveCompileNgModuleMetadata = function() {
function TransitiveCompileNgModuleMetadata() {
this.directivesSet = new Set();
this.directives = [];
this.exportedDirectivesSet = new Set();
this.exportedDirectives = [];
this.pipesSet = new Set();
this.pipes = [];
this.exportedPipesSet = new Set();
this.exportedPipes = [];
this.modulesSet = new Set();
this.modules = [];
this.entryComponentsSet = new Set();
this.entryComponents = [];
this.providers = [];
}
TransitiveCompileNgModuleMetadata.prototype.addProvider = function(provider, module) {
this.providers.push({
provider: provider,
module: module
});
};
TransitiveCompileNgModuleMetadata.prototype.addDirective = function(id) {
if (!this.directivesSet.has(id.reference)) {
this.directivesSet.add(id.reference);
this.directives.push(id);
}
};
TransitiveCompileNgModuleMetadata.prototype.addExportedDirective = function(id) {
if (!this.exportedDirectivesSet.has(id.reference)) {
this.exportedDirectivesSet.add(id.reference);
this.exportedDirectives.push(id);
}
};
TransitiveCompileNgModuleMetadata.prototype.addPipe = function(id) {
if (!this.pipesSet.has(id.reference)) {
this.pipesSet.add(id.reference);
this.pipes.push(id);
}
};
TransitiveCompileNgModuleMetadata.prototype.addExportedPipe = function(id) {
if (!this.exportedPipesSet.has(id.reference)) {
this.exportedPipesSet.add(id.reference);
this.exportedPipes.push(id);
}
};
TransitiveCompileNgModuleMetadata.prototype.addModule = function(id) {
if (!this.modulesSet.has(id.reference)) {
this.modulesSet.add(id.reference);
this.modules.push(id);
}
};
TransitiveCompileNgModuleMetadata.prototype.addEntryComponent = function(ec) {
if (!this.entryComponentsSet.has(ec.componentType)) {
this.entryComponentsSet.add(ec.componentType);
this.entryComponents.push(ec);
}
};
return TransitiveCompileNgModuleMetadata;
}();
function _normalizeArray(obj) {
return obj || [];
}
var ProviderMeta = function() {
function ProviderMeta(token, _a) {
var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
this.token = token;
this.useClass = useClass || null;
this.useValue = useValue;
this.useExisting = useExisting;
this.useFactory = useFactory || null;
this.dependencies = deps || null;
this.multi = !!multi;
}
return ProviderMeta;
}();
function flatten(list) {
return list.reduce(function(flat, item) {
var flatItem = Array.isArray(item) ? flatten(item) : item;
return flat.concat(flatItem);
}, []);
}
function sourceUrl(url) {
return url.replace(/(\w+:\/\/[\w:-]+)?(\/+)?/, "ng:///");
}
function templateSourceUrl(ngModuleType, compMeta, templateMeta) {
var url;
if (templateMeta.isInline) {
if (compMeta.type.reference instanceof StaticSymbol) {
url = compMeta.type.reference.filePath + "." + compMeta.type.reference.name + ".html";
} else {
url = identifierName(ngModuleType) + "/" + identifierName(compMeta.type) + ".html";
}
} else {
url = templateMeta.templateUrl;
}
return sourceUrl(url);
}
function sharedStylesheetJitUrl(meta, id) {
var pathParts = meta.moduleUrl.split(/\/\\/g);
var baseName = pathParts[pathParts.length - 1];
return sourceUrl("css/" + id + baseName + ".ngstyle.js");
}
function ngModuleJitUrl(moduleMeta) {
return sourceUrl(identifierName(moduleMeta.type) + "/module.ngfactory.js");
}
function templateJitUrl(ngModuleType, compMeta) {
return sourceUrl(identifierName(ngModuleType) + "/" + identifierName(compMeta.type) + ".ngfactory.js");
}
var CompilerConfig = function() {
function CompilerConfig(_a) {
var _b = _a === void 0 ? {} : _a, _c = _b.defaultEncapsulation, defaultEncapsulation = _c === void 0 ? _angular_core.ViewEncapsulation.Emulated : _c, _d = _b.useJit, useJit = _d === void 0 ? true : _d, missingTranslation = _b.missingTranslation, enableLegacyTemplate = _b.enableLegacyTemplate;
this.defaultEncapsulation = defaultEncapsulation;
this.useJit = !!useJit;
this.missingTranslation = missingTranslation || null;
this.enableLegacyTemplate = enableLegacyTemplate !== false;
}
return CompilerConfig;
}();
var ParserError = function() {
function ParserError(message, input, errLocation, ctxLocation) {
this.input = input;
this.errLocation = errLocation;
this.ctxLocation = ctxLocation;
this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
}
return ParserError;
}();
var ParseSpan = function() {
function ParseSpan(start, end) {
this.start = start;
this.end = end;
}
return ParseSpan;
}();
var AST = function() {
function AST(span) {
this.span = span;
}
AST.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return null;
};
AST.prototype.toString = function() {
return "AST";
};
return AST;
}();
var Quote = function(_super) {
__extends(Quote, _super);
function Quote(span, prefix, uninterpretedExpression, location) {
var _this = _super.call(this, span) || this;
_this.prefix = prefix;
_this.uninterpretedExpression = uninterpretedExpression;
_this.location = location;
return _this;
}
Quote.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitQuote(this, context);
};
Quote.prototype.toString = function() {
return "Quote";
};
return Quote;
}(AST);
var EmptyExpr = function(_super) {
__extends(EmptyExpr, _super);
function EmptyExpr() {
return _super !== null && _super.apply(this, arguments) || this;
}
EmptyExpr.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
};
return EmptyExpr;
}(AST);
var ImplicitReceiver = function(_super) {
__extends(ImplicitReceiver, _super);
function ImplicitReceiver() {
return _super !== null && _super.apply(this, arguments) || this;
}
ImplicitReceiver.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitImplicitReceiver(this, context);
};
return ImplicitReceiver;
}(AST);
var Chain = function(_super) {
__extends(Chain, _super);
function Chain(span, expressions) {
var _this = _super.call(this, span) || this;
_this.expressions = expressions;
return _this;
}
Chain.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitChain(this, context);
};
return Chain;
}(AST);
var Conditional = function(_super) {
__extends(Conditional, _super);
function Conditional(span, condition, trueExp, falseExp) {
var _this = _super.call(this, span) || this;
_this.condition = condition;
_this.trueExp = trueExp;
_this.falseExp = falseExp;
return _this;
}
Conditional.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitConditional(this, context);
};
return Conditional;
}(AST);
var PropertyRead = function(_super) {
__extends(PropertyRead, _super);
function PropertyRead(span, receiver, name) {
var _this = _super.call(this, span) || this;
_this.receiver = receiver;
_this.name = name;
return _this;
}
PropertyRead.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitPropertyRead(this, context);
};
return PropertyRead;
}(AST);
var PropertyWrite = function(_super) {
__extends(PropertyWrite, _super);
function PropertyWrite(span, receiver, name, value) {
var _this = _super.call(this, span) || this;
_this.receiver = receiver;
_this.name = name;
_this.value = value;
return _this;
}
PropertyWrite.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitPropertyWrite(this, context);
};
return PropertyWrite;
}(AST);
var SafePropertyRead = function(_super) {
__extends(SafePropertyRead, _super);
function SafePropertyRead(span, receiver, name) {
var _this = _super.call(this, span) || this;
_this.receiver = receiver;
_this.name = name;
return _this;
}
SafePropertyRead.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitSafePropertyRead(this, context);
};
return SafePropertyRead;
}(AST);
var KeyedRead = function(_super) {
__extends(KeyedRead, _super);
function KeyedRead(span, obj, key) {
var _this = _super.call(this, span) || this;
_this.obj = obj;
_this.key = key;
return _this;
}
KeyedRead.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitKeyedRead(this, context);
};
return KeyedRead;
}(AST);
var KeyedWrite = function(_super) {
__extends(KeyedWrite, _super);
function KeyedWrite(span, obj, key, value) {
var _this = _super.call(this, span) || this;
_this.obj = obj;
_this.key = key;
_this.value = value;
return _this;
}
KeyedWrite.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitKeyedWrite(this, context);
};
return KeyedWrite;
}(AST);
var BindingPipe = function(_super) {
__extends(BindingPipe, _super);
function BindingPipe(span, exp, name, args) {
var _this = _super.call(this, span) || this;
_this.exp = exp;
_this.name = name;
_this.args = args;
return _this;
}
BindingPipe.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitPipe(this, context);
};
return BindingPipe;
}(AST);
var LiteralPrimitive = function(_super) {
__extends(LiteralPrimitive, _super);
function LiteralPrimitive(span, value) {
var _this = _super.call(this, span) || this;
_this.value = value;
return _this;
}
LiteralPrimitive.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitLiteralPrimitive(this, context);
};
return LiteralPrimitive;
}(AST);
var LiteralArray = function(_super) {
__extends(LiteralArray, _super);
function LiteralArray(span, expressions) {
var _this = _super.call(this, span) || this;
_this.expressions = expressions;
return _this;
}
LiteralArray.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitLiteralArray(this, context);
};
return LiteralArray;
}(AST);
var LiteralMap = function(_super) {
__extends(LiteralMap, _super);
function LiteralMap(span, keys, values) {
var _this = _super.call(this, span) || this;
_this.keys = keys;
_this.values = values;
return _this;
}
LiteralMap.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitLiteralMap(this, context);
};
return LiteralMap;
}(AST);
var Interpolation = function(_super) {
__extends(Interpolation, _super);
function Interpolation(span, strings, expressions) {
var _this = _super.call(this, span) || this;
_this.strings = strings;
_this.expressions = expressions;
return _this;
}
Interpolation.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitInterpolation(this, context);
};
return Interpolation;
}(AST);
var Binary = function(_super) {
__extends(Binary, _super);
function Binary(span, operation, left, right) {
var _this = _super.call(this, span) || this;
_this.operation = operation;
_this.left = left;
_this.right = right;
return _this;
}
Binary.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitBinary(this, context);
};
return Binary;
}(AST);
var PrefixNot = function(_super) {
__extends(PrefixNot, _super);
function PrefixNot(span, expression) {
var _this = _super.call(this, span) || this;
_this.expression = expression;
return _this;
}
PrefixNot.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitPrefixNot(this, context);
};
return PrefixNot;
}(AST);
var MethodCall = function(_super) {
__extends(MethodCall, _super);
function MethodCall(span, receiver, name, args) {
var _this = _super.call(this, span) || this;
_this.receiver = receiver;
_this.name = name;
_this.args = args;
return _this;
}
MethodCall.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitMethodCall(this, context);
};
return MethodCall;
}(AST);
var SafeMethodCall = function(_super) {
__extends(SafeMethodCall, _super);
function SafeMethodCall(span, receiver, name, args) {
var _this = _super.call(this, span) || this;
_this.receiver = receiver;
_this.name = name;
_this.args = args;
return _this;
}
SafeMethodCall.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitSafeMethodCall(this, context);
};
return SafeMethodCall;
}(AST);
var FunctionCall = function(_super) {
__extends(FunctionCall, _super);
function FunctionCall(span, target, args) {
var _this = _super.call(this, span) || this;
_this.target = target;
_this.args = args;
return _this;
}
FunctionCall.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitFunctionCall(this, context);
};
return FunctionCall;
}(AST);
var ASTWithSource = function(_super) {
__extends(ASTWithSource, _super);
function ASTWithSource(ast, source, location, errors) {
var _this = _super.call(this, new ParseSpan(0, source == null ? 0 : source.length)) || this;
_this.ast = ast;
_this.source = source;
_this.location = location;
_this.errors = errors;
return _this;
}
ASTWithSource.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return this.ast.visit(visitor, context);
};
ASTWithSource.prototype.toString = function() {
return this.source + " in " + this.location;
};
return ASTWithSource;
}(AST);
var TemplateBinding = function() {
function TemplateBinding(span, key, keyIsVar, name, expression) {
this.span = span;
this.key = key;
this.keyIsVar = keyIsVar;
this.name = name;
this.expression = expression;
}
return TemplateBinding;
}();
var RecursiveAstVisitor = function() {
function RecursiveAstVisitor() {}
RecursiveAstVisitor.prototype.visitBinary = function(ast, context) {
ast.left.visit(this);
ast.right.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitChain = function(ast, context) {
return this.visitAll(ast.expressions, context);
};
RecursiveAstVisitor.prototype.visitConditional = function(ast, context) {
ast.condition.visit(this);
ast.trueExp.visit(this);
ast.falseExp.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitPipe = function(ast, context) {
ast.exp.visit(this);
this.visitAll(ast.args, context);
return null;
};
RecursiveAstVisitor.prototype.visitFunctionCall = function(ast, context) {
ast.target.visit(this);
this.visitAll(ast.args, context);
return null;
};
RecursiveAstVisitor.prototype.visitImplicitReceiver = function(ast, context) {
return null;
};
RecursiveAstVisitor.prototype.visitInterpolation = function(ast, context) {
return this.visitAll(ast.expressions, context);
};
RecursiveAstVisitor.prototype.visitKeyedRead = function(ast, context) {
ast.obj.visit(this);
ast.key.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitKeyedWrite = function(ast, context) {
ast.obj.visit(this);
ast.key.visit(this);
ast.value.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitLiteralArray = function(ast, context) {
return this.visitAll(ast.expressions, context);
};
RecursiveAstVisitor.prototype.visitLiteralMap = function(ast, context) {
return this.visitAll(ast.values, context);
};
RecursiveAstVisitor.prototype.visitLiteralPrimitive = function(ast, context) {
return null;
};
RecursiveAstVisitor.prototype.visitMethodCall = function(ast, context) {
ast.receiver.visit(this);
return this.visitAll(ast.args, context);
};
RecursiveAstVisitor.prototype.visitPrefixNot = function(ast, context) {
ast.expression.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitPropertyRead = function(ast, context) {
ast.receiver.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitPropertyWrite = function(ast, context) {
ast.receiver.visit(this);
ast.value.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitSafePropertyRead = function(ast, context) {
ast.receiver.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitSafeMethodCall = function(ast, context) {
ast.receiver.visit(this);
return this.visitAll(ast.args, context);
};
RecursiveAstVisitor.prototype.visitAll = function(asts, context) {
var _this = this;
asts.forEach(function(ast) {
return ast.visit(_this, context);
});
return null;
};
RecursiveAstVisitor.prototype.visitQuote = function(ast, context) {
return null;
};
return RecursiveAstVisitor;
}();
var AstTransformer = function() {
function AstTransformer() {}
AstTransformer.prototype.visitImplicitReceiver = function(ast, context) {
return ast;
};
AstTransformer.prototype.visitInterpolation = function(ast, context) {
return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));
};
AstTransformer.prototype.visitLiteralPrimitive = function(ast, context) {
return new LiteralPrimitive(ast.span, ast.value);
};
AstTransformer.prototype.visitPropertyRead = function(ast, context) {
return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);
};
AstTransformer.prototype.visitPropertyWrite = function(ast, context) {
return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value.visit(this));
};
AstTransformer.prototype.visitSafePropertyRead = function(ast, context) {
return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);
};
AstTransformer.prototype.visitMethodCall = function(ast, context) {
return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
};
AstTransformer.prototype.visitSafeMethodCall = function(ast, context) {
return new SafeMethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
};
AstTransformer.prototype.visitFunctionCall = function(ast, context) {
return new FunctionCall(ast.span, ast.target.visit(this), this.visitAll(ast.args));
};
AstTransformer.prototype.visitLiteralArray = function(ast, context) {
return new LiteralArray(ast.span, this.visitAll(ast.expressions));
};
AstTransformer.prototype.visitLiteralMap = function(ast, context) {
return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));
};
AstTransformer.prototype.visitBinary = function(ast, context) {
return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));
};
AstTransformer.prototype.visitPrefixNot = function(ast, context) {
return new PrefixNot(ast.span, ast.expression.visit(this));
};
AstTransformer.prototype.visitConditional = function(ast, context) {
return new Conditional(ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
};
AstTransformer.prototype.visitPipe = function(ast, context) {
return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));
};
AstTransformer.prototype.visitKeyedRead = function(ast, context) {
return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));
};
AstTransformer.prototype.visitKeyedWrite = function(ast, context) {
return new KeyedWrite(ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
};
AstTransformer.prototype.visitAll = function(asts) {
var res = new Array(asts.length);
for (var i = 0; i < asts.length; ++i) {
res[i] = asts[i].visit(this);
}
return res;
};
AstTransformer.prototype.visitChain = function(ast, context) {
return new Chain(ast.span, this.visitAll(ast.expressions));
};
AstTransformer.prototype.visitQuote = function(ast, context) {
return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);
};
return AstTransformer;
}();
var $EOF = 0;
var $TAB = 9;
var $LF = 10;
var $VTAB = 11;
var $FF = 12;
var $CR = 13;
var $SPACE = 32;
var $BANG = 33;
var $DQ = 34;
var $HASH = 35;
var $$ = 36;
var $PERCENT = 37;
var $AMPERSAND = 38;
var $SQ = 39;
var $LPAREN = 40;
var $RPAREN = 41;
var $STAR = 42;
var $PLUS = 43;
var $COMMA = 44;
var $MINUS = 45;
var $PERIOD = 46;
var $SLASH = 47;
var $COLON = 58;
var $SEMICOLON = 59;
var $LT = 60;
var $EQ = 61;
var $GT = 62;
var $QUESTION = 63;
var $0 = 48;
var $9 = 57;
var $A = 65;
var $E = 69;
var $F = 70;
var $X = 88;
var $Z = 90;
var $LBRACKET = 91;
var $BACKSLASH = 92;
var $RBRACKET = 93;
var $CARET = 94;
var $_ = 95;
var $a = 97;
var $e = 101;
var $f = 102;
var $n = 110;
var $r = 114;
var $t = 116;
var $u = 117;
var $v = 118;
var $x = 120;
var $z = 122;
var $LBRACE = 123;
var $BAR = 124;
var $RBRACE = 125;
var $NBSP = 160;
var $BT = 96;
function isWhitespace(code) {
return code >= $TAB && code <= $SPACE || code == $NBSP;
}
function isDigit(code) {
return $0 <= code && code <= $9;
}
function isAsciiLetter(code) {
return code >= $a && code <= $z || code >= $A && code <= $Z;
}
function isAsciiHexDigit(code) {
return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
}
function CompilerInjectable() {
return function(x) {
return x;
};
}
function assertArrayOfStrings(identifier, value) {
if (!_angular_core.isDevMode() || value == null) {
return;
}
if (!Array.isArray(value)) {
throw new Error("Expected '" + identifier + "' to be an array of strings.");
}
for (var i = 0; i < value.length; i += 1) {
if (typeof value[i] !== "string") {
throw new Error("Expected '" + identifier + "' to be an array of strings.");
}
}
}
var INTERPOLATION_BLACKLIST_REGEXPS = [ /^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\/\// ];
function assertInterpolationSymbols(identifier, value) {
if (value != null && !(Array.isArray(value) && value.length == 2)) {
throw new Error("Expected '" + identifier + "' to be an array, [start, end].");
} else if (_angular_core.isDevMode() && value != null) {
var start_1 = value[0];
var end_1 = value[1];
INTERPOLATION_BLACKLIST_REGEXPS.forEach(function(regexp) {
if (regexp.test(start_1) || regexp.test(end_1)) {
throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
}
});
}
}
var InterpolationConfig = function() {
function InterpolationConfig(start, end) {
this.start = start;
this.end = end;
}
InterpolationConfig.fromArray = function(markers) {
if (!markers) {
return DEFAULT_INTERPOLATION_CONFIG;
}
assertInterpolationSymbols("interpolation", markers);
return new InterpolationConfig(markers[0], markers[1]);
};
return InterpolationConfig;
}();
var DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig("{{", "}}");
var TokenType = {};
TokenType.Character = 0;
TokenType.Identifier = 1;
TokenType.Keyword = 2;
TokenType.String = 3;
TokenType.Operator = 4;
TokenType.Number = 5;
TokenType.Error = 6;
TokenType[TokenType.Character] = "Character";
TokenType[TokenType.Identifier] = "Identifier";
TokenType[TokenType.Keyword] = "Keyword";
TokenType[TokenType.String] = "String";
TokenType[TokenType.Operator] = "Operator";
TokenType[TokenType.Number] = "Number";
TokenType[TokenType.Error] = "Error";
var KEYWORDS = [ "var", "let", "as", "null", "undefined", "true", "false", "if", "else", "this" ];
var Lexer = function() {
function Lexer() {}
Lexer.prototype.tokenize = function(text) {
var scanner = new _Scanner(text);
var tokens = [];
var token = scanner.scanToken();
while (token != null) {
tokens.push(token);
token = scanner.scanToken();
}
return tokens;
};
return Lexer;
}();
Lexer.decorators = [ {
type: CompilerInjectable
} ];
Lexer.ctorParameters = function() {
return [];
};
var Token = function() {
function Token(index, type, numValue, strValue) {
this.index = index;
this.type = type;
this.numValue = numValue;
this.strValue = strValue;
}
Token.prototype.isCharacter = function(code) {
return this.type == TokenType.Character && this.numValue == code;
};
Token.prototype.isNumber = function() {
return this.type == TokenType.Number;
};
Token.prototype.isString = function() {
return this.type == TokenType.String;
};
Token.prototype.isOperator = function(operater) {
return this.type == TokenType.Operator && this.strValue == operater;
};
Token.prototype.isIdentifier = function() {
return this.type == TokenType.Identifier;
};
Token.prototype.isKeyword = function() {
return this.type == TokenType.Keyword;
};
Token.prototype.isKeywordLet = function() {
return this.type == TokenType.Keyword && this.strValue == "let";
};
Token.prototype.isKeywordAs = function() {
return this.type == TokenType.Keyword && this.strValue == "as";
};
Token.prototype.isKeywordNull = function() {
return this.type == TokenType.Keyword && this.strValue == "null";
};
Token.prototype.isKeywordUndefined = function() {
return this.type == TokenType.Keyword && this.strValue == "undefined";
};
Token.prototype.isKeywordTrue = function() {
return this.type == TokenType.Keyword && this.strValue == "true";
};
Token.prototype.isKeywordFalse = function() {
return this.type == TokenType.Keyword && this.strValue == "false";
};
Token.prototype.isKeywordThis = function() {
return this.type == TokenType.Keyword && this.strValue == "this";
};
Token.prototype.isError = function() {
return this.type == TokenType.Error;
};
Token.prototype.toNumber = function() {
return this.type == TokenType.Number ? this.numValue : -1;
};
Token.prototype.toString = function() {
switch (this.type) {
case TokenType.Character:
case TokenType.Identifier:
case TokenType.Keyword:
case TokenType.Operator:
case TokenType.String:
case TokenType.Error:
return this.strValue;

case TokenType.Number:
return this.numValue.toString();

default:
return null;
}
};
return Token;
}();
function newCharacterToken(index, code) {
return new Token(index, TokenType.Character, code, String.fromCharCode(code));
}
function newIdentifierToken(index, text) {
return new Token(index, TokenType.Identifier, 0, text);
}
function newKeywordToken(index, text) {
return new Token(index, TokenType.Keyword, 0, text);
}
function newOperatorToken(index, text) {
return new Token(index, TokenType.Operator, 0, text);
}
function newStringToken(index, text) {
return new Token(index, TokenType.String, 0, text);
}
function newNumberToken(index, n) {
return new Token(index, TokenType.Number, n, "");
}
function newErrorToken(index, message) {
return new Token(index, TokenType.Error, 0, message);
}
var EOF = new Token(-1, TokenType.Character, 0, "");
var _Scanner = function() {
function _Scanner(input) {
this.input = input;
this.peek = 0;
this.index = -1;
this.length = input.length;
this.advance();
}
_Scanner.prototype.advance = function() {
this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
};
_Scanner.prototype.scanToken = function() {
var input = this.input, length = this.length;
var peek = this.peek, index = this.index;
while (peek <= $SPACE) {
if (++index >= length) {
peek = $EOF;
break;
} else {
peek = input.charCodeAt(index);
}
}
this.peek = peek;
this.index = index;
if (index >= length) {
return null;
}
if (isIdentifierStart(peek)) return this.scanIdentifier();
if (isDigit(peek)) return this.scanNumber(index);
var start = index;
switch (peek) {
case $PERIOD:
this.advance();
return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD);

case $LPAREN:
case $RPAREN:
case $LBRACE:
case $RBRACE:
case $LBRACKET:
case $RBRACKET:
case $COMMA:
case $COLON:
case $SEMICOLON:
return this.scanCharacter(start, peek);

case $SQ:
case $DQ:
return this.scanString();

case $HASH:
case $PLUS:
case $MINUS:
case $STAR:
case $SLASH:
case $PERCENT:
case $CARET:
return this.scanOperator(start, String.fromCharCode(peek));

case $QUESTION:
return this.scanComplexOperator(start, "?", $PERIOD, ".");

case $LT:
case $GT:
return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, "=");

case $BANG:
case $EQ:
return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, "=", $EQ, "=");

case $AMPERSAND:
return this.scanComplexOperator(start, "&", $AMPERSAND, "&");

case $BAR:
return this.scanComplexOperator(start, "|", $BAR, "|");

case $NBSP:
while (isWhitespace(this.peek)) this.advance();
return this.scanToken();
}
this.advance();
return this.error("Unexpected character [" + String.fromCharCode(peek) + "]", 0);
};
_Scanner.prototype.scanCharacter = function(start, code) {
this.advance();
return newCharacterToken(start, code);
};
_Scanner.prototype.scanOperator = function(start, str) {
this.advance();
return newOperatorToken(start, str);
};
_Scanner.prototype.scanComplexOperator = function(start, one, twoCode, two, threeCode, three) {
this.advance();
var str = one;
if (this.peek == twoCode) {
this.advance();
str += two;
}
if (threeCode != null && this.peek == threeCode) {
this.advance();
str += three;
}
return newOperatorToken(start, str);
};
_Scanner.prototype.scanIdentifier = function() {
var start = this.index;
this.advance();
while (isIdentifierPart(this.peek)) this.advance();
var str = this.input.substring(start, this.index);
return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) : newIdentifierToken(start, str);
};
_Scanner.prototype.scanNumber = function(start) {
var simple = this.index === start;
this.advance();
while (true) {
if (isDigit(this.peek)) {} else if (this.peek == $PERIOD) {
simple = false;
} else if (isExponentStart(this.peek)) {
this.advance();
if (isExponentSign(this.peek)) this.advance();
if (!isDigit(this.peek)) return this.error("Invalid exponent", -1);
simple = false;
} else {
break;
}
this.advance();
}
var str = this.input.substring(start, this.index);
var value = simple ? parseIntAutoRadix(str) : parseFloat(str);
return newNumberToken(start, value);
};
_Scanner.prototype.scanString = function() {
var start = this.index;
var quote = this.peek;
this.advance();
var buffer = "";
var marker = this.index;
var input = this.input;
while (this.peek != quote) {
if (this.peek == $BACKSLASH) {
buffer += input.substring(marker, this.index);
this.advance();
var unescapedCode = void 0;
this.peek = this.peek;
if (this.peek == $u) {
var hex = input.substring(this.index + 1, this.index + 5);
if (/^[0-9a-f]+$/i.test(hex)) {
unescapedCode = parseInt(hex, 16);
} else {
return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
}
for (var i = 0; i < 5; i++) {
this.advance();
}
} else {
unescapedCode = unescape(this.peek);
this.advance();
}
buffer += String.fromCharCode(unescapedCode);
marker = this.index;
} else if (this.peek == $EOF) {
return this.error("Unterminated quote", 0);
} else {
this.advance();
}
}
var last = input.substring(marker, this.index);
this.advance();
return newStringToken(start, buffer + last);
};
_Scanner.prototype.error = function(message, offset) {
var position = this.index + offset;
return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
};
return _Scanner;
}();
function isIdentifierStart(code) {
return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$;
}
function isIdentifier(input) {
if (input.length == 0) return false;
var scanner = new _Scanner(input);
if (!isIdentifierStart(scanner.peek)) return false;
scanner.advance();
while (scanner.peek !== $EOF) {
if (!isIdentifierPart(scanner.peek)) return false;
scanner.advance();
}
return true;
}
function isIdentifierPart(code) {
return isAsciiLetter(code) || isDigit(code) || code == $_ || code == $$;
}
function isExponentStart(code) {
return code == $e || code == $E;
}
function isExponentSign(code) {
return code == $MINUS || code == $PLUS;
}
function isQuote(code) {
return code === $SQ || code === $DQ || code === $BT;
}
function unescape(code) {
switch (code) {
case $n:
return $LF;

case $f:
return $FF;

case $r:
return $CR;

case $t:
return $TAB;

case $v:
return $VTAB;

default:
return code;
}
}
function parseIntAutoRadix(text) {
var result = parseInt(text);
if (isNaN(result)) {
throw new Error("Invalid integer literal when parsing " + text);
}
return result;
}
var SplitInterpolation = function() {
function SplitInterpolation(strings, expressions, offsets) {
this.strings = strings;
this.expressions = expressions;
this.offsets = offsets;
}
return SplitInterpolation;
}();
var TemplateBindingParseResult = function() {
function TemplateBindingParseResult(templateBindings, warnings, errors) {
this.templateBindings = templateBindings;
this.warnings = warnings;
this.errors = errors;
}
return TemplateBindingParseResult;
}();
function _createInterpolateRegExp(config) {
var pattern = escapeRegExp(config.start) + "([\\s\\S]*?)" + escapeRegExp(config.end);
return new RegExp(pattern, "g");
}
var Parser = function() {
function Parser(_lexer) {
this._lexer = _lexer;
this.errors = [];
}
Parser.prototype.parseAction = function(input, location, interpolationConfig) {
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
this._checkNoInterpolation(input, location, interpolationConfig);
var sourceToLex = this._stripComments(input);
var tokens = this._lexer.tokenize(this._stripComments(input));
var ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length).parseChain();
return new ASTWithSource(ast, input, location, this.errors);
};
Parser.prototype.parseBinding = function(input, location, interpolationConfig) {
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
var ast = this._parseBindingAst(input, location, interpolationConfig);
return new ASTWithSource(ast, input, location, this.errors);
};
Parser.prototype.parseSimpleBinding = function(input, location, interpolationConfig) {
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
var ast = this._parseBindingAst(input, location, interpolationConfig);
var errors = SimpleExpressionChecker.check(ast);
if (errors.length > 0) {
this._reportError("Host binding expression cannot contain " + errors.join(" "), input, location);
}
return new ASTWithSource(ast, input, location, this.errors);
};
Parser.prototype._reportError = function(message, input, errLocation, ctxLocation) {
this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
};
Parser.prototype._parseBindingAst = function(input, location, interpolationConfig) {
var quote = this._parseQuote(input, location);
if (quote != null) {
return quote;
}
this._checkNoInterpolation(input, location, interpolationConfig);
var sourceToLex = this._stripComments(input);
var tokens = this._lexer.tokenize(sourceToLex);
return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length).parseChain();
};
Parser.prototype._parseQuote = function(input, location) {
if (input == null) return null;
var prefixSeparatorIndex = input.indexOf(":");
if (prefixSeparatorIndex == -1) return null;
var prefix = input.substring(0, prefixSeparatorIndex).trim();
if (!isIdentifier(prefix)) return null;
var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
};
Parser.prototype.parseTemplateBindings = function(prefixToken, input, location) {
var tokens = this._lexer.tokenize(input);
if (prefixToken) {
var prefixTokens = this._lexer.tokenize(prefixToken).map(function(t) {
t.index = 0;
return t;
});
tokens.unshift.apply(tokens, prefixTokens);
}
return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0).parseTemplateBindings();
};
Parser.prototype.parseInterpolation = function(input, location, interpolationConfig) {
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
var split = this.splitInterpolation(input, location, interpolationConfig);
if (split == null) return null;
var expressions = [];
for (var i = 0; i < split.expressions.length; ++i) {
var expressionText = split.expressions[i];
var sourceToLex = this._stripComments(expressionText);
var tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
var ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length)).parseChain();
expressions.push(ast);
}
return new ASTWithSource(new Interpolation(new ParseSpan(0, input == null ? 0 : input.length), split.strings, expressions), input, location, this.errors);
};
Parser.prototype.splitInterpolation = function(input, location, interpolationConfig) {
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
var regexp = _createInterpolateRegExp(interpolationConfig);
var parts = input.split(regexp);
if (parts.length <= 1) {
return null;
}
var strings = [];
var expressions = [];
var offsets = [];
var offset = 0;
for (var i = 0; i < parts.length; i++) {
var part = parts[i];
if (i % 2 === 0) {
strings.push(part);
offset += part.length;
} else if (part.trim().length > 0) {
offset += interpolationConfig.start.length;
expressions.push(part);
offsets.push(offset);
offset += part.length + interpolationConfig.end.length;
} else {
this._reportError("Blank expressions are not allowed in interpolated strings", input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
expressions.push("$implict");
offsets.push(offset);
}
}
return new SplitInterpolation(strings, expressions, offsets);
};
Parser.prototype.wrapLiteralPrimitive = function(input, location) {
return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, input == null ? 0 : input.length), input), input, location, this.errors);
};
Parser.prototype._stripComments = function(input) {
var i = this._commentStart(input);
return i != null ? input.substring(0, i).trim() : input;
};
Parser.prototype._commentStart = function(input) {
var outerQuote = null;
for (var i = 0; i < input.length - 1; i++) {
var char = input.charCodeAt(i);
var nextChar = input.charCodeAt(i + 1);
if (char === $SLASH && nextChar == $SLASH && outerQuote == null) return i;
if (outerQuote === char) {
outerQuote = null;
} else if (outerQuote == null && isQuote(char)) {
outerQuote = char;
}
}
return null;
};
Parser.prototype._checkNoInterpolation = function(input, location, interpolationConfig) {
var regexp = _createInterpolateRegExp(interpolationConfig);
var parts = input.split(regexp);
if (parts.length > 1) {
this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
}
};
Parser.prototype._findInterpolationErrorColumn = function(parts, partInErrIdx, interpolationConfig) {
var errLocation = "";
for (var j = 0; j < partInErrIdx; j++) {
errLocation += j % 2 === 0 ? parts[j] : "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
}
return errLocation.length;
};
return Parser;
}();
Parser.decorators = [ {
type: CompilerInjectable
} ];
Parser.ctorParameters = function() {
return [ {
type: Lexer
} ];
};
var _ParseAST = function() {
function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {
this.input = input;
this.location = location;
this.tokens = tokens;
this.inputLength = inputLength;
this.parseAction = parseAction;
this.errors = errors;
this.offset = offset;
this.rparensExpected = 0;
this.rbracketsExpected = 0;
this.rbracesExpected = 0;
this.index = 0;
}
_ParseAST.prototype.peek = function(offset) {
var i = this.index + offset;
return i < this.tokens.length ? this.tokens[i] : EOF;
};
Object.defineProperty(_ParseAST.prototype, "next", {
get: function() {
return this.peek(0);
},
enumerable: true,
configurable: true
});
Object.defineProperty(_ParseAST.prototype, "inputIndex", {
get: function() {
return this.index < this.tokens.length ? this.next.index + this.offset : this.inputLength + this.offset;
},
enumerable: true,
configurable: true
});
_ParseAST.prototype.span = function(start) {
return new ParseSpan(start, this.inputIndex);
};
_ParseAST.prototype.advance = function() {
this.index++;
};
_ParseAST.prototype.optionalCharacter = function(code) {
if (this.next.isCharacter(code)) {
this.advance();
return true;
} else {
return false;
}
};
_ParseAST.prototype.peekKeywordLet = function() {
return this.next.isKeywordLet();
};
_ParseAST.prototype.peekKeywordAs = function() {
return this.next.isKeywordAs();
};
_ParseAST.prototype.expectCharacter = function(code) {
if (this.optionalCharacter(code)) return;
this.error("Missing expected " + String.fromCharCode(code));
};
_ParseAST.prototype.optionalOperator = function(op) {
if (this.next.isOperator(op)) {
this.advance();
return true;
} else {
return false;
}
};
_ParseAST.prototype.expectOperator = function(operator) {
if (this.optionalOperator(operator)) return;
this.error("Missing expected operator " + operator);
};
_ParseAST.prototype.expectIdentifierOrKeyword = function() {
var n = this.next;
if (!n.isIdentifier() && !n.isKeyword()) {
this.error("Unexpected token " + n + ", expected identifier or keyword");
return "";
}
this.advance();
return n.toString();
};
_ParseAST.prototype.expectIdentifierOrKeywordOrString = function() {
var n = this.next;
if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
return "";
}
this.advance();
return n.toString();
};
_ParseAST.prototype.parseChain = function() {
var exprs = [];
var start = this.inputIndex;
while (this.index < this.tokens.length) {
var expr = this.parsePipe();
exprs.push(expr);
if (this.optionalCharacter($SEMICOLON)) {
if (!this.parseAction) {
this.error("Binding expression cannot contain chained expression");
}
while (this.optionalCharacter($SEMICOLON)) {}
} else if (this.index < this.tokens.length) {
this.error("Unexpected token '" + this.next + "'");
}
}
if (exprs.length == 0) return new EmptyExpr(this.span(start));
if (exprs.length == 1) return exprs[0];
return new Chain(this.span(start), exprs);
};
_ParseAST.prototype.parsePipe = function() {
var result = this.parseExpression();
if (this.optionalOperator("|")) {
if (this.parseAction) {
this.error("Cannot have a pipe in an action expression");
}
do {
var name = this.expectIdentifierOrKeyword();
var args = [];
while (this.optionalCharacter($COLON)) {
args.push(this.parseExpression());
}
result = new BindingPipe(this.span(result.span.start), result, name, args);
} while (this.optionalOperator("|"));
}
return result;
};
_ParseAST.prototype.parseExpression = function() {
return this.parseConditional();
};
_ParseAST.prototype.parseConditional = function() {
var start = this.inputIndex;
var result = this.parseLogicalOr();
if (this.optionalOperator("?")) {
var yes = this.parsePipe();
var no = void 0;
if (!this.optionalCharacter($COLON)) {
var end = this.inputIndex;
var expression = this.input.substring(start, end);
this.error("Conditional expression " + expression + " requires all 3 expressions");
no = new EmptyExpr(this.span(start));
} else {
no = this.parsePipe();
}
return new Conditional(this.span(start), result, yes, no);
} else {
return result;
}
};
_ParseAST.prototype.parseLogicalOr = function() {
var result = this.parseLogicalAnd();
while (this.optionalOperator("||")) {
var right = this.parseLogicalAnd();
result = new Binary(this.span(result.span.start), "||", result, right);
}
return result;
};
_ParseAST.prototype.parseLogicalAnd = function() {
var result = this.parseEquality();
while (this.optionalOperator("&&")) {
var right = this.parseEquality();
result = new Binary(this.span(result.span.start), "&&", result, right);
}
return result;
};
_ParseAST.prototype.parseEquality = function() {
var result = this.parseRelational();
while (this.next.type == TokenType.Operator) {
var operator = this.next.strValue;
switch (operator) {
case "==":
case "===":
case "!=":
case "!==":
this.advance();
var right = this.parseRelational();
result = new Binary(this.span(result.span.start), operator, result, right);
continue;
}
break;
}
return result;
};
_ParseAST.prototype.parseRelational = function() {
var result = this.parseAdditive();
while (this.next.type == TokenType.Operator) {
var operator = this.next.strValue;
switch (operator) {
case "<":
case ">":
case "<=":
case ">=":
this.advance();
var right = this.parseAdditive();
result = new Binary(this.span(result.span.start), operator, result, right);
continue;
}
break;
}
return result;
};
_ParseAST.prototype.parseAdditive = function() {
var result = this.parseMultiplicative();
while (this.next.type == TokenType.Operator) {
var operator = this.next.strValue;
switch (operator) {
case "+":
case "-":
this.advance();
var right = this.parseMultiplicative();
result = new Binary(this.span(result.span.start), operator, result, right);
continue;
}
break;
}
return result;
};
_ParseAST.prototype.parseMultiplicative = function() {
var result = this.parsePrefix();
while (this.next.type == TokenType.Operator) {
var operator = this.next.strValue;
switch (operator) {
case "*":
case "%":
case "/":
this.advance();
var right = this.parsePrefix();
result = new Binary(this.span(result.span.start), operator, result, right);
continue;
}
break;
}
return result;
};
_ParseAST.prototype.parsePrefix = function() {
if (this.next.type == TokenType.Operator) {
var start = this.inputIndex;
var operator = this.next.strValue;
var result = void 0;
switch (operator) {
case "+":
this.advance();
return this.parsePrefix();

case "-":
this.advance();
result = this.parsePrefix();
return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);

case "!":
this.advance();
result = this.parsePrefix();
return new PrefixNot(this.span(start), result);
}
}
return this.parseCallChain();
};
_ParseAST.prototype.parseCallChain = function() {
var result = this.parsePrimary();
while (true) {
if (this.optionalCharacter($PERIOD)) {
result = this.parseAccessMemberOrMethodCall(result, false);
} else if (this.optionalOperator("?.")) {
result = this.parseAccessMemberOrMethodCall(result, true);
} else if (this.optionalCharacter($LBRACKET)) {
this.rbracketsExpected++;
var key = this.parsePipe();
this.rbracketsExpected--;
this.expectCharacter($RBRACKET);
if (this.optionalOperator("=")) {
var value = this.parseConditional();
result = new KeyedWrite(this.span(result.span.start), result, key, value);
} else {
result = new KeyedRead(this.span(result.span.start), result, key);
}
} else if (this.optionalCharacter($LPAREN)) {
this.rparensExpected++;
var args = this.parseCallArguments();
this.rparensExpected--;
this.expectCharacter($RPAREN);
result = new FunctionCall(this.span(result.span.start), result, args);
} else {
return result;
}
}
};
_ParseAST.prototype.parsePrimary = function() {
var start = this.inputIndex;
if (this.optionalCharacter($LPAREN)) {
this.rparensExpected++;
var result = this.parsePipe();
this.rparensExpected--;
this.expectCharacter($RPAREN);
return result;
} else if (this.next.isKeywordNull()) {
this.advance();
return new LiteralPrimitive(this.span(start), null);
} else if (this.next.isKeywordUndefined()) {
this.advance();
return new LiteralPrimitive(this.span(start), void 0);
} else if (this.next.isKeywordTrue()) {
this.advance();
return new LiteralPrimitive(this.span(start), true);
} else if (this.next.isKeywordFalse()) {
this.advance();
return new LiteralPrimitive(this.span(start), false);
} else if (this.next.isKeywordThis()) {
this.advance();
return new ImplicitReceiver(this.span(start));
} else if (this.optionalCharacter($LBRACKET)) {
this.rbracketsExpected++;
var elements = this.parseExpressionList($RBRACKET);
this.rbracketsExpected--;
this.expectCharacter($RBRACKET);
return new LiteralArray(this.span(start), elements);
} else if (this.next.isCharacter($LBRACE)) {
return this.parseLiteralMap();
} else if (this.next.isIdentifier()) {
return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);
} else if (this.next.isNumber()) {
var value = this.next.toNumber();
this.advance();
return new LiteralPrimitive(this.span(start), value);
} else if (this.next.isString()) {
var literalValue = this.next.toString();
this.advance();
return new LiteralPrimitive(this.span(start), literalValue);
} else if (this.index >= this.tokens.length) {
this.error("Unexpected end of expression: " + this.input);
return new EmptyExpr(this.span(start));
} else {
this.error("Unexpected token " + this.next);
return new EmptyExpr(this.span(start));
}
};
_ParseAST.prototype.parseExpressionList = function(terminator) {
var result = [];
if (!this.next.isCharacter(terminator)) {
do {
result.push(this.parsePipe());
} while (this.optionalCharacter($COMMA));
}
return result;
};
_ParseAST.prototype.parseLiteralMap = function() {
var keys = [];
var values = [];
var start = this.inputIndex;
this.expectCharacter($LBRACE);
if (!this.optionalCharacter($RBRACE)) {
this.rbracesExpected++;
do {
var key = this.expectIdentifierOrKeywordOrString();
keys.push(key);
this.expectCharacter($COLON);
values.push(this.parsePipe());
} while (this.optionalCharacter($COMMA));
this.rbracesExpected--;
this.expectCharacter($RBRACE);
}
return new LiteralMap(this.span(start), keys, values);
};
_ParseAST.prototype.parseAccessMemberOrMethodCall = function(receiver, isSafe) {
if (isSafe === void 0) {
isSafe = false;
}
var start = receiver.span.start;
var id = this.expectIdentifierOrKeyword();
if (this.optionalCharacter($LPAREN)) {
this.rparensExpected++;
var args = this.parseCallArguments();
this.expectCharacter($RPAREN);
this.rparensExpected--;
var span = this.span(start);
return isSafe ? new SafeMethodCall(span, receiver, id, args) : new MethodCall(span, receiver, id, args);
} else {
if (isSafe) {
if (this.optionalOperator("=")) {
this.error("The '?.' operator cannot be used in the assignment");
return new EmptyExpr(this.span(start));
} else {
return new SafePropertyRead(this.span(start), receiver, id);
}
} else {
if (this.optionalOperator("=")) {
if (!this.parseAction) {
this.error("Bindings cannot contain assignments");
return new EmptyExpr(this.span(start));
}
var value = this.parseConditional();
return new PropertyWrite(this.span(start), receiver, id, value);
} else {
return new PropertyRead(this.span(start), receiver, id);
}
}
}
};
_ParseAST.prototype.parseCallArguments = function() {
if (this.next.isCharacter($RPAREN)) return [];
var positionals = [];
do {
positionals.push(this.parsePipe());
} while (this.optionalCharacter($COMMA));
return positionals;
};
_ParseAST.prototype.expectTemplateBindingKey = function() {
var result = "";
var operatorFound = false;
do {
result += this.expectIdentifierOrKeywordOrString();
operatorFound = this.optionalOperator("-");
if (operatorFound) {
result += "-";
}
} while (operatorFound);
return result.toString();
};
_ParseAST.prototype.parseTemplateBindings = function() {
var bindings = [];
var prefix = null;
var warnings = [];
while (this.index < this.tokens.length) {
var start = this.inputIndex;
var keyIsVar = this.peekKeywordLet();
if (keyIsVar) {
this.advance();
}
var rawKey = this.expectTemplateBindingKey();
var key = rawKey;
if (!keyIsVar) {
if (prefix == null) {
prefix = key;
} else {
key = prefix + key[0].toUpperCase() + key.substring(1);
}
}
this.optionalCharacter($COLON);
var name = null;
var expression = null;
if (keyIsVar) {
if (this.optionalOperator("=")) {
name = this.expectTemplateBindingKey();
} else {
name = "$implicit";
}
} else if (this.peekKeywordAs()) {
var letStart = this.inputIndex;
this.advance();
name = rawKey;
key = this.expectTemplateBindingKey();
keyIsVar = true;
} else if (this.next !== EOF && !this.peekKeywordLet()) {
var start_2 = this.inputIndex;
var ast = this.parsePipe();
var source = this.input.substring(start_2 - this.offset, this.inputIndex - this.offset);
expression = new ASTWithSource(ast, source, this.location, this.errors);
}
bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name, expression));
if (this.peekKeywordAs() && !keyIsVar) {
var letStart = this.inputIndex;
this.advance();
var letName = this.expectTemplateBindingKey();
bindings.push(new TemplateBinding(this.span(letStart), letName, true, key, null));
}
if (!this.optionalCharacter($SEMICOLON)) {
this.optionalCharacter($COMMA);
}
}
return new TemplateBindingParseResult(bindings, warnings, this.errors);
};
_ParseAST.prototype.error = function(message, index) {
if (index === void 0) {
index = null;
}
this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
this.skip();
};
_ParseAST.prototype.locationText = function(index) {
if (index === void 0) {
index = null;
}
if (index == null) index = this.index;
return index < this.tokens.length ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
};
_ParseAST.prototype.skip = function() {
var n = this.next;
while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {
if (this.next.isError()) {
this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
}
this.advance();
n = this.next;
}
};
return _ParseAST;
}();
var SimpleExpressionChecker = function() {
function SimpleExpressionChecker() {
this.errors = [];
}
SimpleExpressionChecker.check = function(ast) {
var s = new SimpleExpressionChecker();
ast.visit(s);
return s.errors;
};
SimpleExpressionChecker.prototype.visitImplicitReceiver = function(ast, context) {};
SimpleExpressionChecker.prototype.visitInterpolation = function(ast, context) {};
SimpleExpressionChecker.prototype.visitLiteralPrimitive = function(ast, context) {};
SimpleExpressionChecker.prototype.visitPropertyRead = function(ast, context) {};
SimpleExpressionChecker.prototype.visitPropertyWrite = function(ast, context) {};
SimpleExpressionChecker.prototype.visitSafePropertyRead = function(ast, context) {};
SimpleExpressionChecker.prototype.visitMethodCall = function(ast, context) {};
SimpleExpressionChecker.prototype.visitSafeMethodCall = function(ast, context) {};
SimpleExpressionChecker.prototype.visitFunctionCall = function(ast, context) {};
SimpleExpressionChecker.prototype.visitLiteralArray = function(ast, context) {
this.visitAll(ast.expressions);
};
SimpleExpressionChecker.prototype.visitLiteralMap = function(ast, context) {
this.visitAll(ast.values);
};
SimpleExpressionChecker.prototype.visitBinary = function(ast, context) {};
SimpleExpressionChecker.prototype.visitPrefixNot = function(ast, context) {};
SimpleExpressionChecker.prototype.visitConditional = function(ast, context) {};
SimpleExpressionChecker.prototype.visitPipe = function(ast, context) {
this.errors.push("pipes");
};
SimpleExpressionChecker.prototype.visitKeyedRead = function(ast, context) {};
SimpleExpressionChecker.prototype.visitKeyedWrite = function(ast, context) {};
SimpleExpressionChecker.prototype.visitAll = function(asts) {
var _this = this;
return asts.map(function(node) {
return node.visit(_this);
});
};
SimpleExpressionChecker.prototype.visitChain = function(ast, context) {};
SimpleExpressionChecker.prototype.visitQuote = function(ast, context) {};
return SimpleExpressionChecker;
}();
var ParseLocation = function() {
function ParseLocation(file, offset, line, col) {
this.file = file;
this.offset = offset;
this.line = line;
this.col = col;
}
ParseLocation.prototype.toString = function() {
return this.offset != null ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
};
ParseLocation.prototype.moveBy = function(delta) {
var source = this.file.content;
var len = source.length;
var offset = this.offset;
var line = this.line;
var col = this.col;
while (offset > 0 && delta < 0) {
offset--;
delta++;
var ch = source.charCodeAt(offset);
if (ch == $LF) {
line--;
var priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));
col = priorLine > 0 ? offset - priorLine : offset;
} else {
col--;
}
}
while (offset < len && delta > 0) {
var ch = source.charCodeAt(offset);
offset++;
delta--;
if (ch == $LF) {
line++;
col = 0;
} else {
col++;
}
}
return new ParseLocation(this.file, offset, line, col);
};
ParseLocation.prototype.getContext = function(maxChars, maxLines) {
var content = this.file.content;
var startOffset = this.offset;
if (startOffset != null) {
if (startOffset > content.length - 1) {
startOffset = content.length - 1;
}
var endOffset = startOffset;
var ctxChars = 0;
var ctxLines = 0;
while (ctxChars < maxChars && startOffset > 0) {
startOffset--;
ctxChars++;
if (content[startOffset] == "\n") {
if (++ctxLines == maxLines) {
break;
}
}
}
ctxChars = 0;
ctxLines = 0;
while (ctxChars < maxChars && endOffset < content.length - 1) {
endOffset++;
ctxChars++;
if (content[endOffset] == "\n") {
if (++ctxLines == maxLines) {
break;
}
}
}
return {
before: content.substring(startOffset, this.offset),
after: content.substring(this.offset, endOffset + 1)
};
}
return null;
};
return ParseLocation;
}();
var ParseSourceFile = function() {
function ParseSourceFile(content, url) {
this.content = content;
this.url = url;
}
return ParseSourceFile;
}();
var ParseSourceSpan = function() {
function ParseSourceSpan(start, end, details) {
if (details === void 0) {
details = null;
}
this.start = start;
this.end = end;
this.details = details;
}
ParseSourceSpan.prototype.toString = function() {
return this.start.file.content.substring(this.start.offset, this.end.offset);
};
return ParseSourceSpan;
}();
var ParseErrorLevel = {};
ParseErrorLevel.WARNING = 0;
ParseErrorLevel.ERROR = 1;
ParseErrorLevel[ParseErrorLevel.WARNING] = "WARNING";
ParseErrorLevel[ParseErrorLevel.ERROR] = "ERROR";
var ParseError = function() {
function ParseError(span, msg, level) {
if (level === void 0) {
level = ParseErrorLevel.ERROR;
}
this.span = span;
this.msg = msg;
this.level = level;
}
ParseError.prototype.toString = function() {
var ctx = this.span.start.getContext(100, 3);
var contextStr = ctx ? ' ("' + ctx.before + "[" + ParseErrorLevel[this.level] + " ->]" + ctx.after + '")' : "";
var details = this.span.details ? ", " + this.span.details : "";
return "" + this.msg + contextStr + ": " + this.span.start + details;
};
return ParseError;
}();
function typeSourceSpan(kind, type) {
var moduleUrl = identifierModuleUrl(type);
var sourceFileName = moduleUrl != null ? "in " + kind + " " + identifierName(type) + " in " + moduleUrl : "in " + kind + " " + identifierName(type);
var sourceFile = new ParseSourceFile("", sourceFileName);
return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));
}
var Text = function() {
function Text(value, sourceSpan) {
this.value = value;
this.sourceSpan = sourceSpan;
}
Text.prototype.visit = function(visitor, context) {
return visitor.visitText(this, context);
};
return Text;
}();
var Expansion = function() {
function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
this.switchValue = switchValue;
this.type = type;
this.cases = cases;
this.sourceSpan = sourceSpan;
this.switchValueSourceSpan = switchValueSourceSpan;
}
Expansion.prototype.visit = function(visitor, context) {
return visitor.visitExpansion(this, context);
};
return Expansion;
}();
var ExpansionCase = function() {
function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
this.value = value;
this.expression = expression;
this.sourceSpan = sourceSpan;
this.valueSourceSpan = valueSourceSpan;
this.expSourceSpan = expSourceSpan;
}
ExpansionCase.prototype.visit = function(visitor, context) {
return visitor.visitExpansionCase(this, context);
};
return ExpansionCase;
}();
var Attribute$1 = function() {
function Attribute$1(name, value, sourceSpan, valueSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
this.valueSpan = valueSpan;
}
Attribute$1.prototype.visit = function(visitor, context) {
return visitor.visitAttribute(this, context);
};
return Attribute$1;
}();
var Element = function() {
function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
if (startSourceSpan === void 0) {
startSourceSpan = null;
}
if (endSourceSpan === void 0) {
endSourceSpan = null;
}
this.name = name;
this.attrs = attrs;
this.children = children;
this.sourceSpan = sourceSpan;
this.startSourceSpan = startSourceSpan;
this.endSourceSpan = endSourceSpan;
}
Element.prototype.visit = function(visitor, context) {
return visitor.visitElement(this, context);
};
return Element;
}();
var Comment = function() {
function Comment(value, sourceSpan) {
this.value = value;
this.sourceSpan = sourceSpan;
}
Comment.prototype.visit = function(visitor, context) {
return visitor.visitComment(this, context);
};
return Comment;
}();
function visitAll(visitor, nodes, context) {
if (context === void 0) {
context = null;
}
var result = [];
var visit = visitor.visit ? function(ast) {
return visitor.visit(ast, context) || ast.visit(visitor, context);
} : function(ast) {
return ast.visit(visitor, context);
};
nodes.forEach(function(ast) {
var astResult = visit(ast);
if (astResult) {
result.push(astResult);
}
});
return result;
}
var TokenType$1 = {};
TokenType$1.TAG_OPEN_START = 0;
TokenType$1.TAG_OPEN_END = 1;
TokenType$1.TAG_OPEN_END_VOID = 2;
TokenType$1.TAG_CLOSE = 3;
TokenType$1.TEXT = 4;
TokenType$1.ESCAPABLE_RAW_TEXT = 5;
TokenType$1.RAW_TEXT = 6;
TokenType$1.COMMENT_START = 7;
TokenType$1.COMMENT_END = 8;
TokenType$1.CDATA_START = 9;
TokenType$1.CDATA_END = 10;
TokenType$1.ATTR_NAME = 11;
TokenType$1.ATTR_VALUE = 12;
TokenType$1.DOC_TYPE = 13;
TokenType$1.EXPANSION_FORM_START = 14;
TokenType$1.EXPANSION_CASE_VALUE = 15;
TokenType$1.EXPANSION_CASE_EXP_START = 16;
TokenType$1.EXPANSION_CASE_EXP_END = 17;
TokenType$1.EXPANSION_FORM_END = 18;
TokenType$1.EOF = 19;
TokenType$1[TokenType$1.TAG_OPEN_START] = "TAG_OPEN_START";
TokenType$1[TokenType$1.TAG_OPEN_END] = "TAG_OPEN_END";
TokenType$1[TokenType$1.TAG_OPEN_END_VOID] = "TAG_OPEN_END_VOID";
TokenType$1[TokenType$1.TAG_CLOSE] = "TAG_CLOSE";
TokenType$1[TokenType$1.TEXT] = "TEXT";
TokenType$1[TokenType$1.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
TokenType$1[TokenType$1.RAW_TEXT] = "RAW_TEXT";
TokenType$1[TokenType$1.COMMENT_START] = "COMMENT_START";
TokenType$1[TokenType$1.COMMENT_END] = "COMMENT_END";
TokenType$1[TokenType$1.CDATA_START] = "CDATA_START";
TokenType$1[TokenType$1.CDATA_END] = "CDATA_END";
TokenType$1[TokenType$1.ATTR_NAME] = "ATTR_NAME";
TokenType$1[TokenType$1.ATTR_VALUE] = "ATTR_VALUE";
TokenType$1[TokenType$1.DOC_TYPE] = "DOC_TYPE";
TokenType$1[TokenType$1.EXPANSION_FORM_START] = "EXPANSION_FORM_START";
TokenType$1[TokenType$1.EXPANSION_CASE_VALUE] = "EXPANSION_CASE_VALUE";
TokenType$1[TokenType$1.EXPANSION_CASE_EXP_START] = "EXPANSION_CASE_EXP_START";
TokenType$1[TokenType$1.EXPANSION_CASE_EXP_END] = "EXPANSION_CASE_EXP_END";
TokenType$1[TokenType$1.EXPANSION_FORM_END] = "EXPANSION_FORM_END";
TokenType$1[TokenType$1.EOF] = "EOF";
var Token$1 = function() {
function Token$1(type, parts, sourceSpan) {
this.type = type;
this.parts = parts;
this.sourceSpan = sourceSpan;
}
return Token$1;
}();
var TokenError = function(_super) {
__extends(TokenError, _super);
function TokenError(errorMsg, tokenType, span) {
var _this = _super.call(this, span, errorMsg) || this;
_this.tokenType = tokenType;
return _this;
}
return TokenError;
}(ParseError);
var TokenizeResult = function() {
function TokenizeResult(tokens, errors) {
this.tokens = tokens;
this.errors = errors;
}
return TokenizeResult;
}();
function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
if (tokenizeExpansionForms === void 0) {
tokenizeExpansionForms = false;
}
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig).tokenize();
}
var _CR_OR_CRLF_REGEXP = /\r\n?/g;
function _unexpectedCharacterErrorMsg(charCode) {
var char = charCode === $EOF ? "EOF" : String.fromCharCode(charCode);
return 'Unexpected character "' + char + '"';
}
function _unknownEntityErrorMsg(entitySrc) {
return 'Unknown entity "' + entitySrc + '" - use the "&#<decimal>;" or  "&#x<hex>;" syntax';
}
var _ControlFlowError = function() {
function _ControlFlowError(error) {
this.error = error;
}
return _ControlFlowError;
}();
var _Tokenizer = function() {
function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
if (_interpolationConfig === void 0) {
_interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
this._file = _file;
this._getTagDefinition = _getTagDefinition;
this._tokenizeIcu = _tokenizeIcu;
this._interpolationConfig = _interpolationConfig;
this._peek = -1;
this._nextPeek = -1;
this._index = -1;
this._line = 0;
this._column = -1;
this._expansionCaseStack = [];
this._inInterpolation = false;
this.tokens = [];
this.errors = [];
this._input = _file.content;
this._length = _file.content.length;
this._advance();
}
_Tokenizer.prototype._processCarriageReturns = function(content) {
return content.replace(_CR_OR_CRLF_REGEXP, "\n");
};
_Tokenizer.prototype.tokenize = function() {
while (this._peek !== $EOF) {
var start = this._getLocation();
try {
if (this._attemptCharCode($LT)) {
if (this._attemptCharCode($BANG)) {
if (this._attemptCharCode($LBRACKET)) {
this._consumeCdata(start);
} else if (this._attemptCharCode($MINUS)) {
this._consumeComment(start);
} else {
this._consumeDocType(start);
}
} else if (this._attemptCharCode($SLASH)) {
this._consumeTagClose(start);
} else {
this._consumeTagOpen(start);
}
} else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {
this._consumeText();
}
} catch (e) {
if (e instanceof _ControlFlowError) {
this.errors.push(e.error);
} else {
throw e;
}
}
}
this._beginToken(TokenType$1.EOF);
this._endToken([]);
return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
};
_Tokenizer.prototype._tokenizeExpansionForm = function() {
if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
this._consumeExpansionFormStart();
return true;
}
if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
this._consumeExpansionCaseStart();
return true;
}
if (this._peek === $RBRACE) {
if (this._isInExpansionCase()) {
this._consumeExpansionCaseEnd();
return true;
}
if (this._isInExpansionForm()) {
this._consumeExpansionFormEnd();
return true;
}
}
return false;
};
_Tokenizer.prototype._getLocation = function() {
return new ParseLocation(this._file, this._index, this._line, this._column);
};
_Tokenizer.prototype._getSpan = function(start, end) {
if (start === void 0) {
start = this._getLocation();
}
if (end === void 0) {
end = this._getLocation();
}
return new ParseSourceSpan(start, end);
};
_Tokenizer.prototype._beginToken = function(type, start) {
if (start === void 0) {
start = this._getLocation();
}
this._currentTokenStart = start;
this._currentTokenType = type;
};
_Tokenizer.prototype._endToken = function(parts, end) {
if (end === void 0) {
end = this._getLocation();
}
var token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
this.tokens.push(token);
this._currentTokenStart = null;
this._currentTokenType = null;
return token;
};
_Tokenizer.prototype._createError = function(msg, span) {
if (this._isInExpansionForm()) {
msg += ' (Do you have an unescaped "{" in your template? Use "{{ \'{\' }}") to escape it.)';
}
var error = new TokenError(msg, this._currentTokenType, span);
this._currentTokenStart = null;
this._currentTokenType = null;
return new _ControlFlowError(error);
};
_Tokenizer.prototype._advance = function() {
if (this._index >= this._length) {
throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());
}
if (this._peek === $LF) {
this._line++;
this._column = 0;
} else if (this._peek !== $LF && this._peek !== $CR) {
this._column++;
}
this._index++;
this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);
this._nextPeek = this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
};
_Tokenizer.prototype._attemptCharCode = function(charCode) {
if (this._peek === charCode) {
this._advance();
return true;
}
return false;
};
_Tokenizer.prototype._attemptCharCodeCaseInsensitive = function(charCode) {
if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
this._advance();
return true;
}
return false;
};
_Tokenizer.prototype._requireCharCode = function(charCode) {
var location = this._getLocation();
if (!this._attemptCharCode(charCode)) {
throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
}
};
_Tokenizer.prototype._attemptStr = function(chars) {
var len = chars.length;
if (this._index + len > this._length) {
return false;
}
var initialPosition = this._savePosition();
for (var i = 0; i < len; i++) {
if (!this._attemptCharCode(chars.charCodeAt(i))) {
this._restorePosition(initialPosition);
return false;
}
}
return true;
};
_Tokenizer.prototype._attemptStrCaseInsensitive = function(chars) {
for (var i = 0; i < chars.length; i++) {
if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
return false;
}
}
return true;
};
_Tokenizer.prototype._requireStr = function(chars) {
var location = this._getLocation();
if (!this._attemptStr(chars)) {
throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
}
};
_Tokenizer.prototype._attemptCharCodeUntilFn = function(predicate) {
while (!predicate(this._peek)) {
this._advance();
}
};
_Tokenizer.prototype._requireCharCodeUntilFn = function(predicate, len) {
var start = this._getLocation();
this._attemptCharCodeUntilFn(predicate);
if (this._index - start.offset < len) {
throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
}
};
_Tokenizer.prototype._attemptUntilChar = function(char) {
while (this._peek !== char) {
this._advance();
}
};
_Tokenizer.prototype._readChar = function(decodeEntities) {
if (decodeEntities && this._peek === $AMPERSAND) {
return this._decodeEntity();
} else {
var index = this._index;
this._advance();
return this._input[index];
}
};
_Tokenizer.prototype._decodeEntity = function() {
var start = this._getLocation();
this._advance();
if (this._attemptCharCode($HASH)) {
var isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
var numberStart = this._getLocation().offset;
this._attemptCharCodeUntilFn(isDigitEntityEnd);
if (this._peek != $SEMICOLON) {
throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
}
this._advance();
var strNum = this._input.substring(numberStart, this._index - 1);
try {
var charCode = parseInt(strNum, isHex ? 16 : 10);
return String.fromCharCode(charCode);
} catch (e) {
var entity = this._input.substring(start.offset + 1, this._index - 1);
throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
}
} else {
var startPosition = this._savePosition();
this._attemptCharCodeUntilFn(isNamedEntityEnd);
if (this._peek != $SEMICOLON) {
this._restorePosition(startPosition);
return "&";
}
this._advance();
var name = this._input.substring(start.offset + 1, this._index - 1);
var char = NAMED_ENTITIES[name];
if (!char) {
throw this._createError(_unknownEntityErrorMsg(name), this._getSpan(start));
}
return char;
}
};
_Tokenizer.prototype._consumeRawText = function(decodeEntities, firstCharOfEnd, attemptEndRest) {
var tagCloseStart;
var textStart = this._getLocation();
this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);
var parts = [];
while (true) {
tagCloseStart = this._getLocation();
if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
break;
}
if (this._index > tagCloseStart.offset) {
parts.push(this._input.substring(tagCloseStart.offset, this._index));
}
while (this._peek !== firstCharOfEnd) {
parts.push(this._readChar(decodeEntities));
}
}
return this._endToken([ this._processCarriageReturns(parts.join("")) ], tagCloseStart);
};
_Tokenizer.prototype._consumeComment = function(start) {
var _this = this;
this._beginToken(TokenType$1.COMMENT_START, start);
this._requireCharCode($MINUS);
this._endToken([]);
var textToken = this._consumeRawText(false, $MINUS, function() {
return _this._attemptStr("->");
});
this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);
this._endToken([]);
};
_Tokenizer.prototype._consumeCdata = function(start) {
var _this = this;
this._beginToken(TokenType$1.CDATA_START, start);
this._requireStr("CDATA[");
this._endToken([]);
var textToken = this._consumeRawText(false, $RBRACKET, function() {
return _this._attemptStr("]>");
});
this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);
this._endToken([]);
};
_Tokenizer.prototype._consumeDocType = function(start) {
this._beginToken(TokenType$1.DOC_TYPE, start);
this._attemptUntilChar($GT);
this._advance();
this._endToken([ this._input.substring(start.offset + 2, this._index - 1) ]);
};
_Tokenizer.prototype._consumePrefixAndName = function() {
var nameOrPrefixStart = this._index;
var prefix = null;
while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {
this._advance();
}
var nameStart;
if (this._peek === $COLON) {
this._advance();
prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
nameStart = this._index;
} else {
nameStart = nameOrPrefixStart;
}
this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
var name = this._input.substring(nameStart, this._index);
return [ prefix, name ];
};
_Tokenizer.prototype._consumeTagOpen = function(start) {
var savedPos = this._savePosition();
var tagName;
var lowercaseTagName;
try {
if (!isAsciiLetter(this._peek)) {
throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
}
var nameStart = this._index;
this._consumeTagOpenStart(start);
tagName = this._input.substring(nameStart, this._index);
lowercaseTagName = tagName.toLowerCase();
this._attemptCharCodeUntilFn(isNotWhitespace);
while (this._peek !== $SLASH && this._peek !== $GT) {
this._consumeAttributeName();
this._attemptCharCodeUntilFn(isNotWhitespace);
if (this._attemptCharCode($EQ)) {
this._attemptCharCodeUntilFn(isNotWhitespace);
this._consumeAttributeValue();
}
this._attemptCharCodeUntilFn(isNotWhitespace);
}
this._consumeTagOpenEnd();
} catch (e) {
if (e instanceof _ControlFlowError) {
this._restorePosition(savedPos);
this._beginToken(TokenType$1.TEXT, start);
this._endToken([ "<" ]);
return;
}
throw e;
}
var contentTokenType = this._getTagDefinition(tagName).contentType;
if (contentTokenType === TagContentType.RAW_TEXT) {
this._consumeRawTextWithTagClose(lowercaseTagName, false);
} else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
this._consumeRawTextWithTagClose(lowercaseTagName, true);
}
};
_Tokenizer.prototype._consumeRawTextWithTagClose = function(lowercaseTagName, decodeEntities) {
var _this = this;
var textToken = this._consumeRawText(decodeEntities, $LT, function() {
if (!_this._attemptCharCode($SLASH)) return false;
_this._attemptCharCodeUntilFn(isNotWhitespace);
if (!_this._attemptStrCaseInsensitive(lowercaseTagName)) return false;
_this._attemptCharCodeUntilFn(isNotWhitespace);
return _this._attemptCharCode($GT);
});
this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);
this._endToken([ null, lowercaseTagName ]);
};
_Tokenizer.prototype._consumeTagOpenStart = function(start) {
this._beginToken(TokenType$1.TAG_OPEN_START, start);
var parts = this._consumePrefixAndName();
this._endToken(parts);
};
_Tokenizer.prototype._consumeAttributeName = function() {
this._beginToken(TokenType$1.ATTR_NAME);
var prefixAndName = this._consumePrefixAndName();
this._endToken(prefixAndName);
};
_Tokenizer.prototype._consumeAttributeValue = function() {
this._beginToken(TokenType$1.ATTR_VALUE);
var value;
if (this._peek === $SQ || this._peek === $DQ) {
var quoteChar = this._peek;
this._advance();
var parts = [];
while (this._peek !== quoteChar) {
parts.push(this._readChar(true));
}
value = parts.join("");
this._advance();
} else {
var valueStart = this._index;
this._requireCharCodeUntilFn(isNameEnd, 1);
value = this._input.substring(valueStart, this._index);
}
this._endToken([ this._processCarriageReturns(value) ]);
};
_Tokenizer.prototype._consumeTagOpenEnd = function() {
var tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;
this._beginToken(tokenType);
this._requireCharCode($GT);
this._endToken([]);
};
_Tokenizer.prototype._consumeTagClose = function(start) {
this._beginToken(TokenType$1.TAG_CLOSE, start);
this._attemptCharCodeUntilFn(isNotWhitespace);
var prefixAndName = this._consumePrefixAndName();
this._attemptCharCodeUntilFn(isNotWhitespace);
this._requireCharCode($GT);
this._endToken(prefixAndName);
};
_Tokenizer.prototype._consumeExpansionFormStart = function() {
this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());
this._requireCharCode($LBRACE);
this._endToken([]);
this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);
this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
var condition = this._readUntil($COMMA);
this._endToken([ condition ], this._getLocation());
this._requireCharCode($COMMA);
this._attemptCharCodeUntilFn(isNotWhitespace);
this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
var type = this._readUntil($COMMA);
this._endToken([ type ], this._getLocation());
this._requireCharCode($COMMA);
this._attemptCharCodeUntilFn(isNotWhitespace);
};
_Tokenizer.prototype._consumeExpansionCaseStart = function() {
this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());
var value = this._readUntil($LBRACE).trim();
this._endToken([ value ], this._getLocation());
this._attemptCharCodeUntilFn(isNotWhitespace);
this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());
this._requireCharCode($LBRACE);
this._endToken([], this._getLocation());
this._attemptCharCodeUntilFn(isNotWhitespace);
this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);
};
_Tokenizer.prototype._consumeExpansionCaseEnd = function() {
this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());
this._requireCharCode($RBRACE);
this._endToken([], this._getLocation());
this._attemptCharCodeUntilFn(isNotWhitespace);
this._expansionCaseStack.pop();
};
_Tokenizer.prototype._consumeExpansionFormEnd = function() {
this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());
this._requireCharCode($RBRACE);
this._endToken([]);
this._expansionCaseStack.pop();
};
_Tokenizer.prototype._consumeText = function() {
var start = this._getLocation();
this._beginToken(TokenType$1.TEXT, start);
var parts = [];
do {
if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
parts.push(this._interpolationConfig.start);
this._inInterpolation = true;
} else if (this._interpolationConfig && this._inInterpolation && this._attemptStr(this._interpolationConfig.end)) {
parts.push(this._interpolationConfig.end);
this._inInterpolation = false;
} else {
parts.push(this._readChar(true));
}
} while (!this._isTextEnd());
this._endToken([ this._processCarriageReturns(parts.join("")) ]);
};
_Tokenizer.prototype._isTextEnd = function() {
if (this._peek === $LT || this._peek === $EOF) {
return true;
}
if (this._tokenizeIcu && !this._inInterpolation) {
if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
return true;
}
if (this._peek === $RBRACE && this._isInExpansionCase()) {
return true;
}
}
return false;
};
_Tokenizer.prototype._savePosition = function() {
return [ this._peek, this._index, this._column, this._line, this.tokens.length ];
};
_Tokenizer.prototype._readUntil = function(char) {
var start = this._index;
this._attemptUntilChar(char);
return this._input.substring(start, this._index);
};
_Tokenizer.prototype._restorePosition = function(position) {
this._peek = position[0];
this._index = position[1];
this._column = position[2];
this._line = position[3];
var nbTokens = position[4];
if (nbTokens < this.tokens.length) {
this.tokens = this.tokens.slice(0, nbTokens);
}
};
_Tokenizer.prototype._isInExpansionCase = function() {
return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_CASE_EXP_START;
};
_Tokenizer.prototype._isInExpansionForm = function() {
return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_FORM_START;
};
return _Tokenizer;
}();
function isNotWhitespace(code) {
return !isWhitespace(code) || code === $EOF;
}
function isNameEnd(code) {
return isWhitespace(code) || code === $GT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ;
}
function isPrefixEnd(code) {
return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
}
function isDigitEntityEnd(code) {
return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
}
function isNamedEntityEnd(code) {
return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
}
function isExpansionFormStart(input, offset, interpolationConfig) {
var isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;
return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;
}
function isExpansionCaseStart(peek) {
return peek === $EQ || isAsciiLetter(peek);
}
function compareCharCodeCaseInsensitive(code1, code2) {
return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
}
function toUpperCaseCharCode(code) {
return code >= $a && code <= $z ? code - $a + $A : code;
}
function mergeTextTokens(srcTokens) {
var dstTokens = [];
var lastDstToken = undefined;
for (var i = 0; i < srcTokens.length; i++) {
var token = srcTokens[i];
if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {
lastDstToken.parts[0] += token.parts[0];
lastDstToken.sourceSpan.end = token.sourceSpan.end;
} else {
lastDstToken = token;
dstTokens.push(lastDstToken);
}
}
return dstTokens;
}
var TreeError = function(_super) {
__extends(TreeError, _super);
function TreeError(elementName, span, msg) {
var _this = _super.call(this, span, msg) || this;
_this.elementName = elementName;
return _this;
}
TreeError.create = function(elementName, span, msg) {
return new TreeError(elementName, span, msg);
};
return TreeError;
}(ParseError);
var ParseTreeResult = function() {
function ParseTreeResult(rootNodes, errors) {
this.rootNodes = rootNodes;
this.errors = errors;
}
return ParseTreeResult;
}();
var Parser$1 = function() {
function Parser$1(getTagDefinition) {
this.getTagDefinition = getTagDefinition;
}
Parser$1.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
if (parseExpansionForms === void 0) {
parseExpansionForms = false;
}
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
var tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);
var treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
};
return Parser$1;
}();
var _TreeBuilder = function() {
function _TreeBuilder(tokens, getTagDefinition) {
this.tokens = tokens;
this.getTagDefinition = getTagDefinition;
this._index = -1;
this._rootNodes = [];
this._errors = [];
this._elementStack = [];
this._advance();
}
_TreeBuilder.prototype.build = function() {
while (this._peek.type !== TokenType$1.EOF) {
if (this._peek.type === TokenType$1.TAG_OPEN_START) {
this._consumeStartTag(this._advance());
} else if (this._peek.type === TokenType$1.TAG_CLOSE) {
this._consumeEndTag(this._advance());
} else if (this._peek.type === TokenType$1.CDATA_START) {
this._closeVoidElement();
this._consumeCdata(this._advance());
} else if (this._peek.type === TokenType$1.COMMENT_START) {
this._closeVoidElement();
this._consumeComment(this._advance());
} else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT || this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {
this._closeVoidElement();
this._consumeText(this._advance());
} else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {
this._consumeExpansion(this._advance());
} else {
this._advance();
}
}
return new ParseTreeResult(this._rootNodes, this._errors);
};
_TreeBuilder.prototype._advance = function() {
var prev = this._peek;
if (this._index < this.tokens.length - 1) {
this._index++;
}
this._peek = this.tokens[this._index];
return prev;
};
_TreeBuilder.prototype._advanceIf = function(type) {
if (this._peek.type === type) {
return this._advance();
}
return null;
};
_TreeBuilder.prototype._consumeCdata = function(startToken) {
this._consumeText(this._advance());
this._advanceIf(TokenType$1.CDATA_END);
};
_TreeBuilder.prototype._consumeComment = function(token) {
var text = this._advanceIf(TokenType$1.RAW_TEXT);
this._advanceIf(TokenType$1.COMMENT_END);
var value = text != null ? text.parts[0].trim() : null;
this._addToParent(new Comment(value, token.sourceSpan));
};
_TreeBuilder.prototype._consumeExpansion = function(token) {
var switchValue = this._advance();
var type = this._advance();
var cases = [];
while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {
var expCase = this._parseExpansionCase();
if (!expCase) return;
cases.push(expCase);
}
if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {
this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
return;
}
var sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
this._advance();
};
_TreeBuilder.prototype._parseExpansionCase = function() {
var value = this._advance();
if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {
this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
return null;
}
var start = this._advance();
var exp = this._collectExpansionExpTokens(start);
if (!exp) return null;
var end = this._advance();
exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));
var parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
if (parsedExp.errors.length > 0) {
this._errors = this._errors.concat(parsedExp.errors);
return null;
}
var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
var expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
};
_TreeBuilder.prototype._collectExpansionExpTokens = function(start) {
var exp = [];
var expansionFormStack = [ TokenType$1.EXPANSION_CASE_EXP_START ];
while (true) {
if (this._peek.type === TokenType$1.EXPANSION_FORM_START || this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {
expansionFormStack.push(this._peek.type);
}
if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {
if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {
expansionFormStack.pop();
if (expansionFormStack.length == 0) return exp;
} else {
this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
return null;
}
}
if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {
if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {
expansionFormStack.pop();
} else {
this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
return null;
}
}
if (this._peek.type === TokenType$1.EOF) {
this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
return null;
}
exp.push(this._advance());
}
};
_TreeBuilder.prototype._consumeText = function(token) {
var text = token.parts[0];
if (text.length > 0 && text[0] == "\n") {
var parent = this._getParentElement();
if (parent != null && parent.children.length == 0 && this.getTagDefinition(parent.name).ignoreFirstLf) {
text = text.substring(1);
}
}
if (text.length > 0) {
this._addToParent(new Text(text, token.sourceSpan));
}
};
_TreeBuilder.prototype._closeVoidElement = function() {
if (this._elementStack.length > 0) {
var el = this._elementStack[this._elementStack.length - 1];
if (this.getTagDefinition(el.name).isVoid) {
this._elementStack.pop();
}
}
};
_TreeBuilder.prototype._consumeStartTag = function(startTagToken) {
var prefix = startTagToken.parts[0];
var name = startTagToken.parts[1];
var attrs = [];
while (this._peek.type === TokenType$1.ATTR_NAME) {
attrs.push(this._consumeAttr(this._advance()));
}
var fullName = this._getElementFullName(prefix, name, this._getParentElement());
var selfClosing = false;
if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {
this._advance();
selfClosing = true;
var tagDef = this.getTagDefinition(fullName);
if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, 'Only void and foreign elements can be self closed "' + startTagToken.parts[1] + '"'));
}
} else if (this._peek.type === TokenType$1.TAG_OPEN_END) {
this._advance();
selfClosing = false;
}
var end = this._peek.sourceSpan.start;
var span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
var el = new Element(fullName, attrs, [], span, span, undefined);
this._pushElement(el);
if (selfClosing) {
this._popElement(fullName);
el.endSourceSpan = span;
}
};
_TreeBuilder.prototype._pushElement = function(el) {
if (this._elementStack.length > 0) {
var parentEl = this._elementStack[this._elementStack.length - 1];
if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
this._elementStack.pop();
}
}
var tagDef = this.getTagDefinition(el.name);
var _a = this._getParentElementSkippingContainers(), parent = _a.parent, container = _a.container;
if (parent && tagDef.requireExtraParent(parent.name)) {
var newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
this._insertBeforeContainer(parent, container, newParent);
}
this._addToParent(el);
this._elementStack.push(el);
};
_TreeBuilder.prototype._consumeEndTag = function(endTagToken) {
var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
if (this._getParentElement()) {
this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
}
if (this.getTagDefinition(fullName).isVoid) {
this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, 'Void elements do not have end tags "' + endTagToken.parts[1] + '"'));
} else if (!this._popElement(fullName)) {
var errMsg = 'Unexpected closing tag "' + fullName + '". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags';
this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));
}
};
_TreeBuilder.prototype._popElement = function(fullName) {
for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
var el = this._elementStack[stackIndex];
if (el.name == fullName) {
this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);
return true;
}
if (!this.getTagDefinition(el.name).closedByParent) {
return false;
}
}
return false;
};
_TreeBuilder.prototype._consumeAttr = function(attrName) {
var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
var end = attrName.sourceSpan.end;
var value = "";
var valueSpan = undefined;
if (this._peek.type === TokenType$1.ATTR_VALUE) {
var valueToken = this._advance();
value = valueToken.parts[0];
end = valueToken.sourceSpan.end;
valueSpan = valueToken.sourceSpan;
}
return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);
};
_TreeBuilder.prototype._getParentElement = function() {
return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
};
_TreeBuilder.prototype._getParentElementSkippingContainers = function() {
var container = null;
for (var i = this._elementStack.length - 1; i >= 0; i--) {
if (!isNgContainer(this._elementStack[i].name)) {
return {
parent: this._elementStack[i],
container: container
};
}
container = this._elementStack[i];
}
return {
parent: this._elementStack[this._elementStack.length - 1],
container: container
};
};
_TreeBuilder.prototype._addToParent = function(node) {
var parent = this._getParentElement();
if (parent != null) {
parent.children.push(node);
} else {
this._rootNodes.push(node);
}
};
_TreeBuilder.prototype._insertBeforeContainer = function(parent, container, node) {
if (!container) {
this._addToParent(node);
this._elementStack.push(node);
} else {
if (parent) {
var index = parent.children.indexOf(container);
parent.children[index] = node;
} else {
this._rootNodes.push(node);
}
node.children.push(container);
this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
}
};
_TreeBuilder.prototype._getElementFullName = function(prefix, localName, parentElement) {
if (prefix == null) {
prefix = this.getTagDefinition(localName).implicitNamespacePrefix;
if (prefix == null && parentElement != null) {
prefix = getNsPrefix(parentElement.name);
}
}
return mergeNsAndName(prefix, localName);
};
return _TreeBuilder;
}();
function lastOnStack(stack, element) {
return stack.length > 0 && stack[stack.length - 1] === element;
}
var Message = function() {
function Message(nodes, placeholders, placeholderToMessage, meaning, description, id) {
this.nodes = nodes;
this.placeholders = placeholders;
this.placeholderToMessage = placeholderToMessage;
this.meaning = meaning;
this.description = description;
this.id = id;
if (nodes.length) {
this.sources = [ {
filePath: nodes[0].sourceSpan.start.file.url,
startLine: nodes[0].sourceSpan.start.line + 1,
startCol: nodes[0].sourceSpan.start.col + 1,
endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,
endCol: nodes[0].sourceSpan.start.col + 1
} ];
} else {
this.sources = [];
}
}
return Message;
}();
var Text$1 = function() {
function Text$1(value, sourceSpan) {
this.value = value;
this.sourceSpan = sourceSpan;
}
Text$1.prototype.visit = function(visitor, context) {
return visitor.visitText(this, context);
};
return Text$1;
}();
var Container = function() {
function Container(children, sourceSpan) {
this.children = children;
this.sourceSpan = sourceSpan;
}
Container.prototype.visit = function(visitor, context) {
return visitor.visitContainer(this, context);
};
return Container;
}();
var Icu = function() {
function Icu(expression, type, cases, sourceSpan) {
this.expression = expression;
this.type = type;
this.cases = cases;
this.sourceSpan = sourceSpan;
}
Icu.prototype.visit = function(visitor, context) {
return visitor.visitIcu(this, context);
};
return Icu;
}();
var TagPlaceholder = function() {
function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
this.tag = tag;
this.attrs = attrs;
this.startName = startName;
this.closeName = closeName;
this.children = children;
this.isVoid = isVoid;
this.sourceSpan = sourceSpan;
}
TagPlaceholder.prototype.visit = function(visitor, context) {
return visitor.visitTagPlaceholder(this, context);
};
return TagPlaceholder;
}();
var Placeholder = function() {
function Placeholder(value, name, sourceSpan) {
this.value = value;
this.name = name;
this.sourceSpan = sourceSpan;
}
Placeholder.prototype.visit = function(visitor, context) {
return visitor.visitPlaceholder(this, context);
};
return Placeholder;
}();
var IcuPlaceholder = function() {
function IcuPlaceholder(value, name, sourceSpan) {
this.value = value;
this.name = name;
this.sourceSpan = sourceSpan;
}
IcuPlaceholder.prototype.visit = function(visitor, context) {
return visitor.visitIcuPlaceholder(this, context);
};
return IcuPlaceholder;
}();
var CloneVisitor = function() {
function CloneVisitor() {}
CloneVisitor.prototype.visitText = function(text, context) {
return new Text$1(text.value, text.sourceSpan);
};
CloneVisitor.prototype.visitContainer = function(container, context) {
var _this = this;
var children = container.children.map(function(n) {
return n.visit(_this, context);
});
return new Container(children, container.sourceSpan);
};
CloneVisitor.prototype.visitIcu = function(icu, context) {
var _this = this;
var cases = {};
Object.keys(icu.cases).forEach(function(key) {
return cases[key] = icu.cases[key].visit(_this, context);
});
var msg = new Icu(icu.expression, icu.type, cases, icu.sourceSpan);
msg.expressionPlaceholder = icu.expressionPlaceholder;
return msg;
};
CloneVisitor.prototype.visitTagPlaceholder = function(ph, context) {
var _this = this;
var children = ph.children.map(function(n) {
return n.visit(_this, context);
});
return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan);
};
CloneVisitor.prototype.visitPlaceholder = function(ph, context) {
return new Placeholder(ph.value, ph.name, ph.sourceSpan);
};
CloneVisitor.prototype.visitIcuPlaceholder = function(ph, context) {
return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);
};
return CloneVisitor;
}();
var RecurseVisitor = function() {
function RecurseVisitor() {}
RecurseVisitor.prototype.visitText = function(text, context) {};
RecurseVisitor.prototype.visitContainer = function(container, context) {
var _this = this;
container.children.forEach(function(child) {
return child.visit(_this);
});
};
RecurseVisitor.prototype.visitIcu = function(icu, context) {
var _this = this;
Object.keys(icu.cases).forEach(function(k) {
icu.cases[k].visit(_this);
});
};
RecurseVisitor.prototype.visitTagPlaceholder = function(ph, context) {
var _this = this;
ph.children.forEach(function(child) {
return child.visit(_this);
});
};
RecurseVisitor.prototype.visitPlaceholder = function(ph, context) {};
RecurseVisitor.prototype.visitIcuPlaceholder = function(ph, context) {};
return RecurseVisitor;
}();
var TAG_TO_PLACEHOLDER_NAMES = {
A: "LINK",
B: "BOLD_TEXT",
BR: "LINE_BREAK",
EM: "EMPHASISED_TEXT",
H1: "HEADING_LEVEL1",
H2: "HEADING_LEVEL2",
H3: "HEADING_LEVEL3",
H4: "HEADING_LEVEL4",
H5: "HEADING_LEVEL5",
H6: "HEADING_LEVEL6",
HR: "HORIZONTAL_RULE",
I: "ITALIC_TEXT",
LI: "LIST_ITEM",
LINK: "MEDIA_LINK",
OL: "ORDERED_LIST",
P: "PARAGRAPH",
Q: "QUOTATION",
S: "STRIKETHROUGH_TEXT",
SMALL: "SMALL_TEXT",
SUB: "SUBSTRIPT",
SUP: "SUPERSCRIPT",
TBODY: "TABLE_BODY",
TD: "TABLE_CELL",
TFOOT: "TABLE_FOOTER",
TH: "TABLE_HEADER_CELL",
THEAD: "TABLE_HEADER",
TR: "TABLE_ROW",
TT: "MONOSPACED_TEXT",
U: "UNDERLINED_TEXT",
UL: "UNORDERED_LIST"
};
var PlaceholderRegistry = function() {
function PlaceholderRegistry() {
this._placeHolderNameCounts = {};
this._signatureToName = {};
}
PlaceholderRegistry.prototype.getStartTagPlaceholderName = function(tag, attrs, isVoid) {
var signature = this._hashTag(tag, attrs, isVoid);
if (this._signatureToName[signature]) {
return this._signatureToName[signature];
}
var upperTag = tag.toUpperCase();
var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
var name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
this._signatureToName[signature] = name;
return name;
};
PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function(tag) {
var signature = this._hashClosingTag(tag);
if (this._signatureToName[signature]) {
return this._signatureToName[signature];
}
var upperTag = tag.toUpperCase();
var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
var name = this._generateUniqueName("CLOSE_" + baseName);
this._signatureToName[signature] = name;
return name;
};
PlaceholderRegistry.prototype.getPlaceholderName = function(name, content) {
var upperName = name.toUpperCase();
var signature = "PH: " + upperName + "=" + content;
if (this._signatureToName[signature]) {
return this._signatureToName[signature];
}
var uniqueName = this._generateUniqueName(upperName);
this._signatureToName[signature] = uniqueName;
return uniqueName;
};
PlaceholderRegistry.prototype.getUniquePlaceholder = function(name) {
return this._generateUniqueName(name.toUpperCase());
};
PlaceholderRegistry.prototype._hashTag = function(tag, attrs, isVoid) {
var start = "<" + tag;
var strAttrs = Object.keys(attrs).sort().map(function(name) {
return " " + name + "=" + attrs[name];
}).join("");
var end = isVoid ? "/>" : "></" + tag + ">";
return start + strAttrs + end;
};
PlaceholderRegistry.prototype._hashClosingTag = function(tag) {
return this._hashTag("/" + tag, {}, false);
};
PlaceholderRegistry.prototype._generateUniqueName = function(base) {
var seen = this._placeHolderNameCounts.hasOwnProperty(base);
if (!seen) {
this._placeHolderNameCounts[base] = 1;
return base;
}
var id = this._placeHolderNameCounts[base];
this._placeHolderNameCounts[base] = id + 1;
return base + "_" + id;
};
return PlaceholderRegistry;
}();
var _expParser = new Parser(new Lexer());
function createI18nMessageFactory(interpolationConfig) {
var visitor = new _I18nVisitor(_expParser, interpolationConfig);
return function(nodes, meaning, description, id) {
return visitor.toI18nMessage(nodes, meaning, description, id);
};
}
var _I18nVisitor = function() {
function _I18nVisitor(_expressionParser, _interpolationConfig) {
this._expressionParser = _expressionParser;
this._interpolationConfig = _interpolationConfig;
}
_I18nVisitor.prototype.toI18nMessage = function(nodes, meaning, description, id) {
this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;
this._icuDepth = 0;
this._placeholderRegistry = new PlaceholderRegistry();
this._placeholderToContent = {};
this._placeholderToMessage = {};
var i18nodes = visitAll(this, nodes, {});
return new Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description, id);
};
_I18nVisitor.prototype.visitElement = function(el, context) {
var children = visitAll(this, el.children);
var attrs = {};
el.attrs.forEach(function(attr) {
attrs[attr.name] = attr.value;
});
var isVoid = getHtmlTagDefinition(el.name).isVoid;
var startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
this._placeholderToContent[startPhName] = el.sourceSpan.toString();
var closePhName = "";
if (!isVoid) {
closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
this._placeholderToContent[closePhName] = "</" + el.name + ">";
}
return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
};
_I18nVisitor.prototype.visitAttribute = function(attribute, context) {
return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
};
_I18nVisitor.prototype.visitText = function(text, context) {
return this._visitTextWithInterpolation(text.value, text.sourceSpan);
};
_I18nVisitor.prototype.visitComment = function(comment, context) {
return null;
};
_I18nVisitor.prototype.visitExpansion = function(icu, context) {
var _this = this;
this._icuDepth++;
var i18nIcuCases = {};
var i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
icu.cases.forEach(function(caze) {
i18nIcuCases[caze.value] = new Container(caze.expression.map(function(node) {
return node.visit(_this, {});
}), caze.expSourceSpan);
});
this._icuDepth--;
if (this._isIcu || this._icuDepth > 0) {
var expPh = this._placeholderRegistry.getUniquePlaceholder("VAR_" + icu.type);
i18nIcu.expressionPlaceholder = expPh;
this._placeholderToContent[expPh] = icu.switchValue;
return i18nIcu;
}
var phName = this._placeholderRegistry.getPlaceholderName("ICU", icu.sourceSpan.toString());
var visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);
this._placeholderToMessage[phName] = visitor.toI18nMessage([ icu ], "", "", "");
return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
};
_I18nVisitor.prototype.visitExpansionCase = function(icuCase, context) {
throw new Error("Unreachable code");
};
_I18nVisitor.prototype._visitTextWithInterpolation = function(text, sourceSpan) {
var splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
if (!splitInterpolation) {
return new Text$1(text, sourceSpan);
}
var nodes = [];
var container = new Container(nodes, sourceSpan);
var _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end;
for (var i = 0; i < splitInterpolation.strings.length - 1; i++) {
var expression = splitInterpolation.expressions[i];
var baseName = _extractPlaceholderName(expression) || "INTERPOLATION";
var phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
if (splitInterpolation.strings[i].length) {
nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));
}
nodes.push(new Placeholder(expression, phName, sourceSpan));
this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
}
var lastStringIdx = splitInterpolation.strings.length - 1;
if (splitInterpolation.strings[lastStringIdx].length) {
nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));
}
return container;
};
return _I18nVisitor;
}();
var _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*("|')([\s\S]*?)\1[\s\S]*\)/g;
function _extractPlaceholderName(input) {
return input.split(_CUSTOM_PH_EXP)[2];
}
var I18nError = function(_super) {
__extends(I18nError, _super);
function I18nError(span, msg) {
return _super.call(this, span, msg) || this;
}
return I18nError;
}(ParseError);
var _I18N_ATTR = "i18n";
var _I18N_ATTR_PREFIX = "i18n-";
var _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
var MEANING_SEPARATOR = "|";
var ID_SEPARATOR = "@@";
function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
var visitor = new _Visitor(implicitTags, implicitAttrs);
return visitor.extract(nodes, interpolationConfig);
}
function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
var visitor = new _Visitor(implicitTags, implicitAttrs);
return visitor.merge(nodes, translations, interpolationConfig);
}
var ExtractionResult = function() {
function ExtractionResult(messages, errors) {
this.messages = messages;
this.errors = errors;
}
return ExtractionResult;
}();
var _VisitorMode = {};
_VisitorMode.Extract = 0;
_VisitorMode.Merge = 1;
_VisitorMode[_VisitorMode.Extract] = "Extract";
_VisitorMode[_VisitorMode.Merge] = "Merge";
var _Visitor = function() {
function _Visitor(_implicitTags, _implicitAttrs) {
this._implicitTags = _implicitTags;
this._implicitAttrs = _implicitAttrs;
}
_Visitor.prototype.extract = function(nodes, interpolationConfig) {
var _this = this;
this._init(_VisitorMode.Extract, interpolationConfig);
nodes.forEach(function(node) {
return node.visit(_this, null);
});
if (this._inI18nBlock) {
this._reportError(nodes[nodes.length - 1], "Unclosed block");
}
return new ExtractionResult(this._messages, this._errors);
};
_Visitor.prototype.merge = function(nodes, translations, interpolationConfig) {
this._init(_VisitorMode.Merge, interpolationConfig);
this._translations = translations;
var wrapper = new Element("wrapper", [], nodes, undefined, undefined, undefined);
var translatedNode = wrapper.visit(this, null);
if (this._inI18nBlock) {
this._reportError(nodes[nodes.length - 1], "Unclosed block");
}
return new ParseTreeResult(translatedNode.children, this._errors);
};
_Visitor.prototype.visitExpansionCase = function(icuCase, context) {
var expression = visitAll(this, icuCase.expression, context);
if (this._mode === _VisitorMode.Merge) {
return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
}
};
_Visitor.prototype.visitExpansion = function(icu, context) {
this._mayBeAddBlockChildren(icu);
var wasInIcu = this._inIcu;
if (!this._inIcu) {
if (this._isInTranslatableSection) {
this._addMessage([ icu ]);
}
this._inIcu = true;
}
var cases = visitAll(this, icu.cases, context);
if (this._mode === _VisitorMode.Merge) {
icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
}
this._inIcu = wasInIcu;
return icu;
};
_Visitor.prototype.visitComment = function(comment, context) {
var isOpening = _isOpeningComment(comment);
if (isOpening && this._isInTranslatableSection) {
this._reportError(comment, "Could not start a block inside a translatable section");
return;
}
var isClosing = _isClosingComment(comment);
if (isClosing && !this._inI18nBlock) {
this._reportError(comment, "Trying to close an unopened block");
return;
}
if (!this._inI18nNode && !this._inIcu) {
if (!this._inI18nBlock) {
if (isOpening) {
this._inI18nBlock = true;
this._blockStartDepth = this._depth;
this._blockChildren = [];
this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, "").trim();
this._openTranslatableSection(comment);
}
} else {
if (isClosing) {
if (this._depth == this._blockStartDepth) {
this._closeTranslatableSection(comment, this._blockChildren);
this._inI18nBlock = false;
var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
var nodes = this._translateMessage(comment, message);
return visitAll(this, nodes);
} else {
this._reportError(comment, "I18N blocks should not cross element boundaries");
return;
}
}
}
}
};
_Visitor.prototype.visitText = function(text, context) {
if (this._isInTranslatableSection) {
this._mayBeAddBlockChildren(text);
}
return text;
};
_Visitor.prototype.visitElement = function(el, context) {
var _this = this;
this._mayBeAddBlockChildren(el);
this._depth++;
var wasInI18nNode = this._inI18nNode;
var wasInImplicitNode = this._inImplicitNode;
var childNodes = [];
var translatedChildNodes = undefined;
var i18nAttr = _getI18nAttr(el);
var i18nMeta = i18nAttr ? i18nAttr.value : "";
var isImplicit = this._implicitTags.some(function(tag) {
return el.name === tag;
}) && !this._inIcu && !this._isInTranslatableSection;
var isTopLevelImplicit = !wasInImplicitNode && isImplicit;
this._inImplicitNode = wasInImplicitNode || isImplicit;
if (!this._isInTranslatableSection && !this._inIcu) {
if (i18nAttr || isTopLevelImplicit) {
this._inI18nNode = true;
var message = this._addMessage(el.children, i18nMeta);
translatedChildNodes = this._translateMessage(el, message);
}
if (this._mode == _VisitorMode.Extract) {
var isTranslatable = i18nAttr || isTopLevelImplicit;
if (isTranslatable) this._openTranslatableSection(el);
visitAll(this, el.children);
if (isTranslatable) this._closeTranslatableSection(el, el.children);
}
} else {
if (i18nAttr || isTopLevelImplicit) {
this._reportError(el, "Could not mark an element as translatable inside a translatable section");
}
if (this._mode == _VisitorMode.Extract) {
visitAll(this, el.children);
}
}
if (this._mode === _VisitorMode.Merge) {
var visitNodes = translatedChildNodes || el.children;
visitNodes.forEach(function(child) {
var visited = child.visit(_this, context);
if (visited && !_this._isInTranslatableSection) {
childNodes = childNodes.concat(visited);
}
});
}
this._visitAttributesOf(el);
this._depth--;
this._inI18nNode = wasInI18nNode;
this._inImplicitNode = wasInImplicitNode;
if (this._mode === _VisitorMode.Merge) {
var translatedAttrs = this._translateAttributes(el);
return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
}
return null;
};
_Visitor.prototype.visitAttribute = function(attribute, context) {
throw new Error("unreachable code");
};
_Visitor.prototype._init = function(mode, interpolationConfig) {
this._mode = mode;
this._inI18nBlock = false;
this._inI18nNode = false;
this._depth = 0;
this._inIcu = false;
this._msgCountAtSectionStart = undefined;
this._errors = [];
this._messages = [];
this._inImplicitNode = false;
this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
};
_Visitor.prototype._visitAttributesOf = function(el) {
var _this = this;
var explicitAttrNameToValue = {};
var implicitAttrNames = this._implicitAttrs[el.name] || [];
el.attrs.filter(function(attr) {
return attr.name.startsWith(_I18N_ATTR_PREFIX);
}).forEach(function(attr) {
return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = attr.value;
});
el.attrs.forEach(function(attr) {
if (attr.name in explicitAttrNameToValue) {
_this._addMessage([ attr ], explicitAttrNameToValue[attr.name]);
} else if (implicitAttrNames.some(function(name) {
return attr.name === name;
})) {
_this._addMessage([ attr ]);
}
});
};
_Visitor.prototype._addMessage = function(ast, msgMeta) {
if (ast.length == 0 || ast.length == 1 && ast[0] instanceof Attribute$1 && !ast[0].value) {
return null;
}
var _a = _parseMessageMeta(msgMeta), meaning = _a.meaning, description = _a.description, id = _a.id;
var message = this._createI18nMessage(ast, meaning, description, id);
this._messages.push(message);
return message;
};
_Visitor.prototype._translateMessage = function(el, message) {
if (message && this._mode === _VisitorMode.Merge) {
var nodes = this._translations.get(message);
if (nodes) {
return nodes;
}
this._reportError(el, 'Translation unavailable for message id="' + this._translations.digest(message) + '"');
}
return [];
};
_Visitor.prototype._translateAttributes = function(el) {
var _this = this;
var attributes = el.attrs;
var i18nParsedMessageMeta = {};
attributes.forEach(function(attr) {
if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _parseMessageMeta(attr.value);
}
});
var translatedAttributes = [];
attributes.forEach(function(attr) {
if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
return;
}
if (attr.value && attr.value != "" && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {
var _a = i18nParsedMessageMeta[attr.name], meaning = _a.meaning, description = _a.description, id = _a.id;
var message = _this._createI18nMessage([ attr ], meaning, description, id);
var nodes = _this._translations.get(message);
if (nodes) {
if (nodes.length == 0) {
translatedAttributes.push(new Attribute$1(attr.name, "", attr.sourceSpan));
} else if (nodes[0] instanceof Text) {
var value = nodes[0].value;
translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan));
} else {
_this._reportError(el, 'Unexpected translation for attribute "' + attr.name + '" (id="' + (id || _this._translations.digest(message)) + '")');
}
} else {
_this._reportError(el, 'Translation unavailable for attribute "' + attr.name + '" (id="' + (id || _this._translations.digest(message)) + '")');
}
} else {
translatedAttributes.push(attr);
}
});
return translatedAttributes;
};
_Visitor.prototype._mayBeAddBlockChildren = function(node) {
if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
this._blockChildren.push(node);
}
};
_Visitor.prototype._openTranslatableSection = function(node) {
if (this._isInTranslatableSection) {
this._reportError(node, "Unexpected section start");
} else {
this._msgCountAtSectionStart = this._messages.length;
}
};
Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", {
get: function() {
return this._msgCountAtSectionStart !== void 0;
},
enumerable: true,
configurable: true
});
_Visitor.prototype._closeTranslatableSection = function(node, directChildren) {
if (!this._isInTranslatableSection) {
this._reportError(node, "Unexpected section end");
return;
}
var startIndex = this._msgCountAtSectionStart;
var significantChildren = directChildren.reduce(function(count, node) {
return count + (node instanceof Comment ? 0 : 1);
}, 0);
if (significantChildren == 1) {
for (var i = this._messages.length - 1; i >= startIndex; i--) {
var ast = this._messages[i].nodes;
if (!(ast.length == 1 && ast[0] instanceof Text$1)) {
this._messages.splice(i, 1);
break;
}
}
}
this._msgCountAtSectionStart = undefined;
};
_Visitor.prototype._reportError = function(node, msg) {
this._errors.push(new I18nError(node.sourceSpan, msg));
};
return _Visitor;
}();
function _isOpeningComment(n) {
return !!(n instanceof Comment && n.value && n.value.startsWith("i18n"));
}
function _isClosingComment(n) {
return !!(n instanceof Comment && n.value && n.value === "/i18n");
}
function _getI18nAttr(p) {
return p.attrs.find(function(attr) {
return attr.name === _I18N_ATTR;
}) || null;
}
function _parseMessageMeta(i18n) {
if (!i18n) return {
meaning: "",
description: "",
id: ""
};
var idIndex = i18n.indexOf(ID_SEPARATOR);
var descIndex = i18n.indexOf(MEANING_SEPARATOR);
var _a = idIndex > -1 ? [ i18n.slice(0, idIndex), i18n.slice(idIndex + 2) ] : [ i18n, "" ], meaningAndDesc = _a[0], id = _a[1];
var _b = descIndex > -1 ? [ meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1) ] : [ "", meaningAndDesc ], meaning = _b[0], description = _b[1];
return {
meaning: meaning,
description: description,
id: id
};
}
var XmlTagDefinition = function() {
function XmlTagDefinition() {
this.closedByParent = false;
this.contentType = TagContentType.PARSABLE_DATA;
this.isVoid = false;
this.ignoreFirstLf = false;
this.canSelfClose = true;
}
XmlTagDefinition.prototype.requireExtraParent = function(currentParent) {
return false;
};
XmlTagDefinition.prototype.isClosedByChild = function(name) {
return false;
};
return XmlTagDefinition;
}();
var _TAG_DEFINITION = new XmlTagDefinition();
function getXmlTagDefinition(tagName) {
return _TAG_DEFINITION;
}
var XmlParser = function(_super) {
__extends(XmlParser, _super);
function XmlParser() {
return _super.call(this, getXmlTagDefinition) || this;
}
XmlParser.prototype.parse = function(source, url, parseExpansionForms) {
if (parseExpansionForms === void 0) {
parseExpansionForms = false;
}
return _super.prototype.parse.call(this, source, url, parseExpansionForms);
};
return XmlParser;
}(Parser$1);
function digest(message) {
return message.id || sha1(serializeNodes(message.nodes).join("") + ("[" + message.meaning + "]"));
}
function decimalDigest(message) {
if (message.id) {
return message.id;
}
var visitor = new _SerializerIgnoreIcuExpVisitor();
var parts = message.nodes.map(function(a) {
return a.visit(visitor, null);
});
return computeMsgId(parts.join(""), message.meaning);
}
var _SerializerVisitor = function() {
function _SerializerVisitor() {}
_SerializerVisitor.prototype.visitText = function(text, context) {
return text.value;
};
_SerializerVisitor.prototype.visitContainer = function(container, context) {
var _this = this;
return "[" + container.children.map(function(child) {
return child.visit(_this);
}).join(", ") + "]";
};
_SerializerVisitor.prototype.visitIcu = function(icu, context) {
var _this = this;
var strCases = Object.keys(icu.cases).map(function(k) {
return k + " {" + icu.cases[k].visit(_this) + "}";
});
return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(", ") + "}";
};
_SerializerVisitor.prototype.visitTagPlaceholder = function(ph, context) {
var _this = this;
return ph.isVoid ? '<ph tag name="' + ph.startName + '"/>' : '<ph tag name="' + ph.startName + '">' + ph.children.map(function(child) {
return child.visit(_this);
}).join(", ") + '</ph name="' + ph.closeName + '">';
};
_SerializerVisitor.prototype.visitPlaceholder = function(ph, context) {
return ph.value ? '<ph name="' + ph.name + '">' + ph.value + "</ph>" : '<ph name="' + ph.name + '"/>';
};
_SerializerVisitor.prototype.visitIcuPlaceholder = function(ph, context) {
return '<ph icu name="' + ph.name + '">' + ph.value.visit(this) + "</ph>";
};
return _SerializerVisitor;
}();
var serializerVisitor = new _SerializerVisitor();
function serializeNodes(nodes) {
return nodes.map(function(a) {
return a.visit(serializerVisitor, null);
});
}
var _SerializerIgnoreIcuExpVisitor = function(_super) {
__extends(_SerializerIgnoreIcuExpVisitor, _super);
function _SerializerIgnoreIcuExpVisitor() {
return _super !== null && _super.apply(this, arguments) || this;
}
_SerializerIgnoreIcuExpVisitor.prototype.visitIcu = function(icu, context) {
var _this = this;
var strCases = Object.keys(icu.cases).map(function(k) {
return k + " {" + icu.cases[k].visit(_this) + "}";
});
return "{" + icu.type + ", " + strCases.join(", ") + "}";
};
return _SerializerIgnoreIcuExpVisitor;
}(_SerializerVisitor);
function sha1(str) {
var utf8 = utf8Encode(str);
var words32 = stringToWords32(utf8, Endian.Big);
var len = utf8.length * 8;
var w = new Array(80);
var _a = [ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ], a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4];
words32[len >> 5] |= 128 << 24 - len % 32;
words32[(len + 64 >> 9 << 4) + 15] = len;
for (var i = 0; i < words32.length; i += 16) {
var _b = [ a, b, c, d, e ], h0 = _b[0], h1 = _b[1], h2 = _b[2], h3 = _b[3], h4 = _b[4];
for (var j = 0; j < 80; j++) {
if (j < 16) {
w[j] = words32[i + j];
} else {
w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
}
var _c = fk(j, b, c, d), f = _c[0], k = _c[1];
var temp = [ rol32(a, 5), f, e, k, w[j] ].reduce(add32);
_d = [ d, c, rol32(b, 30), a, temp ], e = _d[0], d = _d[1], c = _d[2], b = _d[3], 
a = _d[4];
}
_e = [ add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4) ], a = _e[0], 
b = _e[1], c = _e[2], d = _e[3], e = _e[4];
}
return byteStringToHexString(words32ToByteString([ a, b, c, d, e ]));
var _d, _e;
}
function fk(index, b, c, d) {
if (index < 20) {
return [ b & c | ~b & d, 1518500249 ];
}
if (index < 40) {
return [ b ^ c ^ d, 1859775393 ];
}
if (index < 60) {
return [ b & c | b & d | c & d, 2400959708 ];
}
return [ b ^ c ^ d, 3395469782 ];
}
function fingerprint(str) {
var utf8 = utf8Encode(str);
var _a = [ hash32(utf8, 0), hash32(utf8, 102072) ], hi = _a[0], lo = _a[1];
if (hi == 0 && (lo == 0 || lo == 1)) {
hi = hi ^ 319790063;
lo = lo ^ -1801410264;
}
return [ hi, lo ];
}
function computeMsgId(msg, meaning) {
var _a = fingerprint(msg), hi = _a[0], lo = _a[1];
if (meaning) {
var _b = fingerprint(meaning), him = _b[0], lom = _b[1];
_c = add64(rol64([ hi, lo ], 1), [ him, lom ]), hi = _c[0], lo = _c[1];
}
return byteStringToDecString(words32ToByteString([ hi & 2147483647, lo ]));
var _c;
}
function hash32(str, c) {
var _a = [ 2654435769, 2654435769 ], a = _a[0], b = _a[1];
var i;
var len = str.length;
for (i = 0; i + 12 <= len; i += 12) {
a = add32(a, wordAt(str, i, Endian.Little));
b = add32(b, wordAt(str, i + 4, Endian.Little));
c = add32(c, wordAt(str, i + 8, Endian.Little));
_b = mix([ a, b, c ]), a = _b[0], b = _b[1], c = _b[2];
}
a = add32(a, wordAt(str, i, Endian.Little));
b = add32(b, wordAt(str, i + 4, Endian.Little));
c = add32(c, len);
c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);
return mix([ a, b, c ])[2];
var _b;
}
function mix(_a) {
var a = _a[0], b = _a[1], c = _a[2];
a = sub32(a, b);
a = sub32(a, c);
a ^= c >>> 13;
b = sub32(b, c);
b = sub32(b, a);
b ^= a << 8;
c = sub32(c, a);
c = sub32(c, b);
c ^= b >>> 13;
a = sub32(a, b);
a = sub32(a, c);
a ^= c >>> 12;
b = sub32(b, c);
b = sub32(b, a);
b ^= a << 16;
c = sub32(c, a);
c = sub32(c, b);
c ^= b >>> 5;
a = sub32(a, b);
a = sub32(a, c);
a ^= c >>> 3;
b = sub32(b, c);
b = sub32(b, a);
b ^= a << 10;
c = sub32(c, a);
c = sub32(c, b);
c ^= b >>> 15;
return [ a, b, c ];
}
var Endian = {};
Endian.Little = 0;
Endian.Big = 1;
Endian[Endian.Little] = "Little";
Endian[Endian.Big] = "Big";
function add32(a, b) {
return add32to64(a, b)[1];
}
function add32to64(a, b) {
var low = (a & 65535) + (b & 65535);
var high = (a >>> 16) + (b >>> 16) + (low >>> 16);
return [ high >>> 16, high << 16 | low & 65535 ];
}
function add64(_a, _b) {
var ah = _a[0], al = _a[1];
var bh = _b[0], bl = _b[1];
var _c = add32to64(al, bl), carry = _c[0], l = _c[1];
var h = add32(add32(ah, bh), carry);
return [ h, l ];
}
function sub32(a, b) {
var low = (a & 65535) - (b & 65535);
var high = (a >> 16) - (b >> 16) + (low >> 16);
return high << 16 | low & 65535;
}
function rol32(a, count) {
return a << count | a >>> 32 - count;
}
function rol64(_a, count) {
var hi = _a[0], lo = _a[1];
var h = hi << count | lo >>> 32 - count;
var l = lo << count | hi >>> 32 - count;
return [ h, l ];
}
function stringToWords32(str, endian) {
var words32 = Array(str.length + 3 >>> 2);
for (var i = 0; i < words32.length; i++) {
words32[i] = wordAt(str, i * 4, endian);
}
return words32;
}
function byteAt(str, index) {
return index >= str.length ? 0 : str.charCodeAt(index) & 255;
}
function wordAt(str, index, endian) {
var word = 0;
if (endian === Endian.Big) {
for (var i = 0; i < 4; i++) {
word += byteAt(str, index + i) << 24 - 8 * i;
}
} else {
for (var i = 0; i < 4; i++) {
word += byteAt(str, index + i) << 8 * i;
}
}
return word;
}
function words32ToByteString(words32) {
return words32.reduce(function(str, word) {
return str + word32ToByteString(word);
}, "");
}
function word32ToByteString(word) {
var str = "";
for (var i = 0; i < 4; i++) {
str += String.fromCharCode(word >>> 8 * (3 - i) & 255);
}
return str;
}
function byteStringToHexString(str) {
var hex = "";
for (var i = 0; i < str.length; i++) {
var b = byteAt(str, i);
hex += (b >>> 4).toString(16) + (b & 15).toString(16);
}
return hex.toLowerCase();
}
function byteStringToDecString(str) {
var decimal = "";
var toThePower = "1";
for (var i = str.length - 1; i >= 0; i--) {
decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));
toThePower = numberTimesBigInt(256, toThePower);
}
return decimal.split("").reverse().join("");
}
function addBigInt(x, y) {
var sum = "";
var len = Math.max(x.length, y.length);
for (var i = 0, carry = 0; i < len || carry; i++) {
var tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);
if (tmpSum >= 10) {
carry = 1;
sum += tmpSum - 10;
} else {
carry = 0;
sum += tmpSum;
}
}
return sum;
}
function numberTimesBigInt(num, b) {
var product = "";
var bToThePower = b;
for (;num !== 0; num = num >>> 1) {
if (num & 1) product = addBigInt(product, bToThePower);
bToThePower = addBigInt(bToThePower, bToThePower);
}
return product;
}
var Serializer = function() {
function Serializer() {}
Serializer.prototype.write = function(messages, locale) {};
Serializer.prototype.load = function(content, url) {};
Serializer.prototype.digest = function(message) {};
Serializer.prototype.createNameMapper = function(message) {
return null;
};
return Serializer;
}();
var SimplePlaceholderMapper = function(_super) {
__extends(SimplePlaceholderMapper, _super);
function SimplePlaceholderMapper(message, mapName) {
var _this = _super.call(this) || this;
_this.mapName = mapName;
_this.internalToPublic = {};
_this.publicToNextId = {};
_this.publicToInternal = {};
message.nodes.forEach(function(node) {
return node.visit(_this);
});
return _this;
}
SimplePlaceholderMapper.prototype.toPublicName = function(internalName) {
return this.internalToPublic.hasOwnProperty(internalName) ? this.internalToPublic[internalName] : null;
};
SimplePlaceholderMapper.prototype.toInternalName = function(publicName) {
return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] : null;
};
SimplePlaceholderMapper.prototype.visitText = function(text, context) {
return null;
};
SimplePlaceholderMapper.prototype.visitTagPlaceholder = function(ph, context) {
this.visitPlaceholderName(ph.startName);
_super.prototype.visitTagPlaceholder.call(this, ph, context);
this.visitPlaceholderName(ph.closeName);
};
SimplePlaceholderMapper.prototype.visitPlaceholder = function(ph, context) {
this.visitPlaceholderName(ph.name);
};
SimplePlaceholderMapper.prototype.visitIcuPlaceholder = function(ph, context) {
this.visitPlaceholderName(ph.name);
};
SimplePlaceholderMapper.prototype.visitPlaceholderName = function(internalName) {
if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {
return;
}
var publicName = this.mapName(internalName);
if (this.publicToInternal.hasOwnProperty(publicName)) {
var nextId = this.publicToNextId[publicName];
this.publicToNextId[publicName] = nextId + 1;
publicName = publicName + "_" + nextId;
} else {
this.publicToNextId[publicName] = 1;
}
this.internalToPublic[internalName] = publicName;
this.publicToInternal[publicName] = internalName;
};
return SimplePlaceholderMapper;
}(RecurseVisitor);
var _Visitor$1 = function() {
function _Visitor$1() {}
_Visitor$1.prototype.visitTag = function(tag) {
var _this = this;
var strAttrs = this._serializeAttributes(tag.attrs);
if (tag.children.length == 0) {
return "<" + tag.name + strAttrs + "/>";
}
var strChildren = tag.children.map(function(node) {
return node.visit(_this);
});
return "<" + tag.name + strAttrs + ">" + strChildren.join("") + "</" + tag.name + ">";
};
_Visitor$1.prototype.visitText = function(text) {
return text.value;
};
_Visitor$1.prototype.visitDeclaration = function(decl) {
return "<?xml" + this._serializeAttributes(decl.attrs) + " ?>";
};
_Visitor$1.prototype._serializeAttributes = function(attrs) {
var strAttrs = Object.keys(attrs).map(function(name) {
return name + '="' + attrs[name] + '"';
}).join(" ");
return strAttrs.length > 0 ? " " + strAttrs : "";
};
_Visitor$1.prototype.visitDoctype = function(doctype) {
return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
};
return _Visitor$1;
}();
var _visitor = new _Visitor$1();
function serialize(nodes) {
return nodes.map(function(node) {
return node.visit(_visitor);
}).join("");
}
var Declaration = function() {
function Declaration(unescapedAttrs) {
var _this = this;
this.attrs = {};
Object.keys(unescapedAttrs).forEach(function(k) {
_this.attrs[k] = _escapeXml(unescapedAttrs[k]);
});
}
Declaration.prototype.visit = function(visitor) {
return visitor.visitDeclaration(this);
};
return Declaration;
}();
var Doctype = function() {
function Doctype(rootTag, dtd) {
this.rootTag = rootTag;
this.dtd = dtd;
}
Doctype.prototype.visit = function(visitor) {
return visitor.visitDoctype(this);
};
return Doctype;
}();
var Tag = function() {
function Tag(name, unescapedAttrs, children) {
if (unescapedAttrs === void 0) {
unescapedAttrs = {};
}
if (children === void 0) {
children = [];
}
var _this = this;
this.name = name;
this.children = children;
this.attrs = {};
Object.keys(unescapedAttrs).forEach(function(k) {
_this.attrs[k] = _escapeXml(unescapedAttrs[k]);
});
}
Tag.prototype.visit = function(visitor) {
return visitor.visitTag(this);
};
return Tag;
}();
var Text$2 = function() {
function Text$2(unescapedValue) {
this.value = _escapeXml(unescapedValue);
}
Text$2.prototype.visit = function(visitor) {
return visitor.visitText(this);
};
return Text$2;
}();
var CR = function(_super) {
__extends(CR, _super);
function CR(ws) {
if (ws === void 0) {
ws = 0;
}
return _super.call(this, "\n" + new Array(ws + 1).join(" ")) || this;
}
return CR;
}(Text$2);
var _ESCAPED_CHARS = [ [ /&/g, "&amp;" ], [ /"/g, "&quot;" ], [ /'/g, "&apos;" ], [ /</g, "&lt;" ], [ />/g, "&gt;" ] ];
function _escapeXml(text) {
return _ESCAPED_CHARS.reduce(function(text, entry) {
return text.replace(entry[0], entry[1]);
}, text);
}
var _VERSION = "1.2";
var _XMLNS = "urn:oasis:names:tc:xliff:document:1.2";
var _DEFAULT_SOURCE_LANG = "en";
var _PLACEHOLDER_TAG = "x";
var _FILE_TAG = "file";
var _SOURCE_TAG = "source";
var _TARGET_TAG = "target";
var _UNIT_TAG = "trans-unit";
var _CONTEXT_GROUP_TAG = "context-group";
var _CONTEXT_TAG = "context";
var Xliff = function(_super) {
__extends(Xliff, _super);
function Xliff() {
return _super !== null && _super.apply(this, arguments) || this;
}
Xliff.prototype.write = function(messages, locale) {
var visitor = new _WriteVisitor();
var transUnits = [];
messages.forEach(function(message) {
var contextTags = [];
message.sources.forEach(function(source) {
var contextGroupTag = new Tag(_CONTEXT_GROUP_TAG, {
purpose: "location"
});
contextGroupTag.children.push(new CR(10), new Tag(_CONTEXT_TAG, {
"context-type": "sourcefile"
}, [ new Text$2(source.filePath) ]), new CR(10), new Tag(_CONTEXT_TAG, {
"context-type": "linenumber"
}, [ new Text$2("" + source.startLine) ]), new CR(8));
contextTags.push(new CR(8), contextGroupTag);
});
var transUnit = new Tag(_UNIT_TAG, {
id: message.id,
datatype: "html"
});
(_a = transUnit.children).push.apply(_a, [ new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(8), new Tag(_TARGET_TAG) ].concat(contextTags));
if (message.description) {
transUnit.children.push(new CR(8), new Tag("note", {
priority: "1",
from: "description"
}, [ new Text$2(message.description) ]));
}
if (message.meaning) {
transUnit.children.push(new CR(8), new Tag("note", {
priority: "1",
from: "meaning"
}, [ new Text$2(message.meaning) ]));
}
transUnit.children.push(new CR(6));
transUnits.push(new CR(6), transUnit);
var _a;
});
var body = new Tag("body", {}, transUnits.concat([ new CR(4) ]));
var file = new Tag("file", {
"source-language": locale || _DEFAULT_SOURCE_LANG,
datatype: "plaintext",
original: "ng2.template"
}, [ new CR(4), body, new CR(2) ]);
var xliff = new Tag("xliff", {
version: _VERSION,
xmlns: _XMLNS
}, [ new CR(2), file, new CR() ]);
return serialize([ new Declaration({
version: "1.0",
encoding: "UTF-8"
}), new CR(), xliff, new CR() ]);
};
Xliff.prototype.load = function(content, url) {
var xliffParser = new XliffParser();
var _a = xliffParser.parse(content, url), locale = _a.locale, msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;
var i18nNodesByMsgId = {};
var converter = new XmlToI18n();
Object.keys(msgIdToHtml).forEach(function(msgId) {
var _a = converter.convert(msgIdToHtml[msgId], url), i18nNodes = _a.i18nNodes, e = _a.errors;
errors.push.apply(errors, e);
i18nNodesByMsgId[msgId] = i18nNodes;
});
if (errors.length) {
throw new Error("xliff parse errors:\n" + errors.join("\n"));
}
return {
locale: locale,
i18nNodesByMsgId: i18nNodesByMsgId
};
};
Xliff.prototype.digest = function(message) {
return digest(message);
};
return Xliff;
}(Serializer);
var _WriteVisitor = function() {
function _WriteVisitor() {}
_WriteVisitor.prototype.visitText = function(text, context) {
return [ new Text$2(text.value) ];
};
_WriteVisitor.prototype.visitContainer = function(container, context) {
var _this = this;
var nodes = [];
container.children.forEach(function(node) {
return nodes.push.apply(nodes, node.visit(_this));
});
return nodes;
};
_WriteVisitor.prototype.visitIcu = function(icu, context) {
var _this = this;
var nodes = [ new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ") ];
Object.keys(icu.cases).forEach(function(c) {
nodes.push.apply(nodes, [ new Text$2(c + " {") ].concat(icu.cases[c].visit(_this), [ new Text$2("} ") ]));
});
nodes.push(new Text$2("}"));
return nodes;
};
_WriteVisitor.prototype.visitTagPlaceholder = function(ph, context) {
var ctype = getCtypeForTag(ph.tag);
var startTagPh = new Tag(_PLACEHOLDER_TAG, {
id: ph.startName,
ctype: ctype
});
if (ph.isVoid) {
return [ startTagPh ];
}
var closeTagPh = new Tag(_PLACEHOLDER_TAG, {
id: ph.closeName,
ctype: ctype
});
return [ startTagPh ].concat(this.serialize(ph.children), [ closeTagPh ]);
};
_WriteVisitor.prototype.visitPlaceholder = function(ph, context) {
return [ new Tag(_PLACEHOLDER_TAG, {
id: ph.name
}) ];
};
_WriteVisitor.prototype.visitIcuPlaceholder = function(ph, context) {
return [ new Tag(_PLACEHOLDER_TAG, {
id: ph.name
}) ];
};
_WriteVisitor.prototype.serialize = function(nodes) {
var _this = this;
return [].concat.apply([], nodes.map(function(node) {
return node.visit(_this);
}));
};
return _WriteVisitor;
}();
var XliffParser = function() {
function XliffParser() {
this._locale = null;
}
XliffParser.prototype.parse = function(xliff, url) {
this._unitMlString = null;
this._msgIdToHtml = {};
var xml = new XmlParser().parse(xliff, url, false);
this._errors = xml.errors;
visitAll(this, xml.rootNodes, null);
return {
msgIdToHtml: this._msgIdToHtml,
errors: this._errors,
locale: this._locale
};
};
XliffParser.prototype.visitElement = function(element, context) {
switch (element.name) {
case _UNIT_TAG:
this._unitMlString = null;
var idAttr = element.attrs.find(function(attr) {
return attr.name === "id";
});
if (!idAttr) {
this._addError(element, "<" + _UNIT_TAG + '> misses the "id" attribute');
} else {
var id = idAttr.value;
if (this._msgIdToHtml.hasOwnProperty(id)) {
this._addError(element, "Duplicated translations for msg " + id);
} else {
visitAll(this, element.children, null);
if (typeof this._unitMlString === "string") {
this._msgIdToHtml[id] = this._unitMlString;
} else {
this._addError(element, "Message " + id + " misses a translation");
}
}
}
break;

case _SOURCE_TAG:
break;

case _TARGET_TAG:
var innerTextStart = element.startSourceSpan.end.offset;
var innerTextEnd = element.endSourceSpan.start.offset;
var content = element.startSourceSpan.start.file.content;
var innerText = content.slice(innerTextStart, innerTextEnd);
this._unitMlString = innerText;
break;

case _FILE_TAG:
var localeAttr = element.attrs.find(function(attr) {
return attr.name === "target-language";
});
if (localeAttr) {
this._locale = localeAttr.value;
}
visitAll(this, element.children, null);
break;

default:
visitAll(this, element.children, null);
}
};
XliffParser.prototype.visitAttribute = function(attribute, context) {};
XliffParser.prototype.visitText = function(text, context) {};
XliffParser.prototype.visitComment = function(comment, context) {};
XliffParser.prototype.visitExpansion = function(expansion, context) {};
XliffParser.prototype.visitExpansionCase = function(expansionCase, context) {};
XliffParser.prototype._addError = function(node, message) {
this._errors.push(new I18nError(node.sourceSpan, message));
};
return XliffParser;
}();
var XmlToI18n = function() {
function XmlToI18n() {}
XmlToI18n.prototype.convert = function(message, url) {
var xmlIcu = new XmlParser().parse(message, url, true);
this._errors = xmlIcu.errors;
var i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : visitAll(this, xmlIcu.rootNodes);
return {
i18nNodes: i18nNodes,
errors: this._errors
};
};
XmlToI18n.prototype.visitText = function(text, context) {
return new Text$1(text.value, text.sourceSpan);
};
XmlToI18n.prototype.visitElement = function(el, context) {
if (el.name === _PLACEHOLDER_TAG) {
var nameAttr = el.attrs.find(function(attr) {
return attr.name === "id";
});
if (nameAttr) {
return new Placeholder("", nameAttr.value, el.sourceSpan);
}
this._addError(el, "<" + _PLACEHOLDER_TAG + '> misses the "id" attribute');
} else {
this._addError(el, "Unexpected tag");
}
return null;
};
XmlToI18n.prototype.visitExpansion = function(icu, context) {
var caseMap = {};
visitAll(this, icu.cases).forEach(function(c) {
caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
});
return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
};
XmlToI18n.prototype.visitExpansionCase = function(icuCase, context) {
return {
value: icuCase.value,
nodes: visitAll(this, icuCase.expression)
};
};
XmlToI18n.prototype.visitComment = function(comment, context) {};
XmlToI18n.prototype.visitAttribute = function(attribute, context) {};
XmlToI18n.prototype._addError = function(node, message) {
this._errors.push(new I18nError(node.sourceSpan, message));
};
return XmlToI18n;
}();
function getCtypeForTag(tag) {
switch (tag.toLowerCase()) {
case "br":
return "lb";

case "img":
return "image";

default:
return "x-" + tag;
}
}
var _VERSION$1 = "2.0";
var _XMLNS$1 = "urn:oasis:names:tc:xliff:document:2.0";
var _DEFAULT_SOURCE_LANG$1 = "en";
var _PLACEHOLDER_TAG$1 = "ph";
var _PLACEHOLDER_SPANNING_TAG = "pc";
var _XLIFF_TAG = "xliff";
var _SOURCE_TAG$1 = "source";
var _TARGET_TAG$1 = "target";
var _UNIT_TAG$1 = "unit";
var Xliff2 = function(_super) {
__extends(Xliff2, _super);
function Xliff2() {
return _super !== null && _super.apply(this, arguments) || this;
}
Xliff2.prototype.write = function(messages, locale) {
var visitor = new _WriteVisitor$1();
var units = [];
messages.forEach(function(message) {
var unit = new Tag(_UNIT_TAG$1, {
id: message.id
});
if (message.description || message.meaning) {
var notes = new Tag("notes");
if (message.description) {
notes.children.push(new CR(8), new Tag("note", {
category: "description"
}, [ new Text$2(message.description) ]));
}
if (message.meaning) {
notes.children.push(new CR(8), new Tag("note", {
category: "meaning"
}, [ new Text$2(message.meaning) ]));
}
notes.children.push(new CR(6));
unit.children.push(new CR(6), notes);
}
var segment = new Tag("segment");
segment.children.push(new CR(8), new Tag(_SOURCE_TAG$1, {}, visitor.serialize(message.nodes)), new CR(6));
unit.children.push(new CR(6), segment, new CR(4));
units.push(new CR(4), unit);
});
var file = new Tag("file", {
original: "ng.template",
id: "ngi18n"
}, units.concat([ new CR(2) ]));
var xliff = new Tag(_XLIFF_TAG, {
version: _VERSION$1,
xmlns: _XMLNS$1,
srcLang: locale || _DEFAULT_SOURCE_LANG$1
}, [ new CR(2), file, new CR() ]);
return serialize([ new Declaration({
version: "1.0",
encoding: "UTF-8"
}), new CR(), xliff, new CR() ]);
};
Xliff2.prototype.load = function(content, url) {
var xliff2Parser = new Xliff2Parser();
var _a = xliff2Parser.parse(content, url), locale = _a.locale, msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;
var i18nNodesByMsgId = {};
var converter = new XmlToI18n$1();
Object.keys(msgIdToHtml).forEach(function(msgId) {
var _a = converter.convert(msgIdToHtml[msgId], url), i18nNodes = _a.i18nNodes, e = _a.errors;
errors.push.apply(errors, e);
i18nNodesByMsgId[msgId] = i18nNodes;
});
if (errors.length) {
throw new Error("xliff2 parse errors:\n" + errors.join("\n"));
}
return {
locale: locale,
i18nNodesByMsgId: i18nNodesByMsgId
};
};
Xliff2.prototype.digest = function(message) {
return decimalDigest(message);
};
return Xliff2;
}(Serializer);
var _WriteVisitor$1 = function() {
function _WriteVisitor$1() {}
_WriteVisitor$1.prototype.visitText = function(text, context) {
return [ new Text$2(text.value) ];
};
_WriteVisitor$1.prototype.visitContainer = function(container, context) {
var _this = this;
var nodes = [];
container.children.forEach(function(node) {
return nodes.push.apply(nodes, node.visit(_this));
});
return nodes;
};
_WriteVisitor$1.prototype.visitIcu = function(icu, context) {
var _this = this;
var nodes = [ new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ") ];
Object.keys(icu.cases).forEach(function(c) {
nodes.push.apply(nodes, [ new Text$2(c + " {") ].concat(icu.cases[c].visit(_this), [ new Text$2("} ") ]));
});
nodes.push(new Text$2("}"));
return nodes;
};
_WriteVisitor$1.prototype.visitTagPlaceholder = function(ph, context) {
var _this = this;
var type = getTypeForTag(ph.tag);
if (ph.isVoid) {
var tagPh = new Tag(_PLACEHOLDER_TAG$1, {
id: (this._nextPlaceholderId++).toString(),
equiv: ph.startName,
type: type,
disp: "<" + ph.tag + "/>"
});
return [ tagPh ];
}
var tagPc = new Tag(_PLACEHOLDER_SPANNING_TAG, {
id: (this._nextPlaceholderId++).toString(),
equivStart: ph.startName,
equivEnd: ph.closeName,
type: type,
dispStart: "<" + ph.tag + ">",
dispEnd: "</" + ph.tag + ">"
});
var nodes = [].concat.apply([], ph.children.map(function(node) {
return node.visit(_this);
}));
if (nodes.length) {
nodes.forEach(function(node) {
return tagPc.children.push(node);
});
} else {
tagPc.children.push(new Text$2(""));
}
return [ tagPc ];
};
_WriteVisitor$1.prototype.visitPlaceholder = function(ph, context) {
return [ new Tag(_PLACEHOLDER_TAG$1, {
id: (this._nextPlaceholderId++).toString(),
equiv: ph.name,
disp: "{{" + ph.value + "}}"
}) ];
};
_WriteVisitor$1.prototype.visitIcuPlaceholder = function(ph, context) {
return [ new Tag(_PLACEHOLDER_TAG$1, {
id: (this._nextPlaceholderId++).toString()
}) ];
};
_WriteVisitor$1.prototype.serialize = function(nodes) {
var _this = this;
this._nextPlaceholderId = 0;
return [].concat.apply([], nodes.map(function(node) {
return node.visit(_this);
}));
};
return _WriteVisitor$1;
}();
var Xliff2Parser = function() {
function Xliff2Parser() {
this._locale = null;
}
Xliff2Parser.prototype.parse = function(xliff, url) {
this._unitMlString = null;
this._msgIdToHtml = {};
var xml = new XmlParser().parse(xliff, url, false);
this._errors = xml.errors;
visitAll(this, xml.rootNodes, null);
return {
msgIdToHtml: this._msgIdToHtml,
errors: this._errors,
locale: this._locale
};
};
Xliff2Parser.prototype.visitElement = function(element, context) {
switch (element.name) {
case _UNIT_TAG$1:
this._unitMlString = null;
var idAttr = element.attrs.find(function(attr) {
return attr.name === "id";
});
if (!idAttr) {
this._addError(element, "<" + _UNIT_TAG$1 + '> misses the "id" attribute');
} else {
var id = idAttr.value;
if (this._msgIdToHtml.hasOwnProperty(id)) {
this._addError(element, "Duplicated translations for msg " + id);
} else {
visitAll(this, element.children, null);
if (typeof this._unitMlString === "string") {
this._msgIdToHtml[id] = this._unitMlString;
} else {
this._addError(element, "Message " + id + " misses a translation");
}
}
}
break;

case _SOURCE_TAG$1:
break;

case _TARGET_TAG$1:
var innerTextStart = element.startSourceSpan.end.offset;
var innerTextEnd = element.endSourceSpan.start.offset;
var content = element.startSourceSpan.start.file.content;
var innerText = content.slice(innerTextStart, innerTextEnd);
this._unitMlString = innerText;
break;

case _XLIFF_TAG:
var localeAttr = element.attrs.find(function(attr) {
return attr.name === "trgLang";
});
if (localeAttr) {
this._locale = localeAttr.value;
}
var versionAttr = element.attrs.find(function(attr) {
return attr.name === "version";
});
if (versionAttr) {
var version = versionAttr.value;
if (version !== "2.0") {
this._addError(element, "The XLIFF file version " + version + " is not compatible with XLIFF 2.0 serializer");
} else {
visitAll(this, element.children, null);
}
}
break;

default:
visitAll(this, element.children, null);
}
};
Xliff2Parser.prototype.visitAttribute = function(attribute, context) {};
Xliff2Parser.prototype.visitText = function(text, context) {};
Xliff2Parser.prototype.visitComment = function(comment, context) {};
Xliff2Parser.prototype.visitExpansion = function(expansion, context) {};
Xliff2Parser.prototype.visitExpansionCase = function(expansionCase, context) {};
Xliff2Parser.prototype._addError = function(node, message) {
this._errors.push(new I18nError(node.sourceSpan, message));
};
return Xliff2Parser;
}();
var XmlToI18n$1 = function() {
function XmlToI18n$1() {}
XmlToI18n$1.prototype.convert = function(message, url) {
var xmlIcu = new XmlParser().parse(message, url, true);
this._errors = xmlIcu.errors;
var i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : [].concat.apply([], visitAll(this, xmlIcu.rootNodes));
return {
i18nNodes: i18nNodes,
errors: this._errors
};
};
XmlToI18n$1.prototype.visitText = function(text, context) {
return new Text$1(text.value, text.sourceSpan);
};
XmlToI18n$1.prototype.visitElement = function(el, context) {
var _this = this;
switch (el.name) {
case _PLACEHOLDER_TAG$1:
var nameAttr = el.attrs.find(function(attr) {
return attr.name === "equiv";
});
if (nameAttr) {
return [ new Placeholder("", nameAttr.value, el.sourceSpan) ];
}
this._addError(el, "<" + _PLACEHOLDER_TAG$1 + '> misses the "equiv" attribute');
break;

case _PLACEHOLDER_SPANNING_TAG:
var startAttr = el.attrs.find(function(attr) {
return attr.name === "equivStart";
});
var endAttr = el.attrs.find(function(attr) {
return attr.name === "equivEnd";
});
if (!startAttr) {
this._addError(el, "<" + _PLACEHOLDER_TAG$1 + '> misses the "equivStart" attribute');
} else if (!endAttr) {
this._addError(el, "<" + _PLACEHOLDER_TAG$1 + '> misses the "equivEnd" attribute');
} else {
var startId = startAttr.value;
var endId = endAttr.value;
var nodes = [];
return nodes.concat.apply(nodes, [ new Placeholder("", startId, el.sourceSpan) ].concat(el.children.map(function(node) {
return node.visit(_this, null);
}), [ new Placeholder("", endId, el.sourceSpan) ]));
}
break;

default:
this._addError(el, "Unexpected tag");
}
return null;
};
XmlToI18n$1.prototype.visitExpansion = function(icu, context) {
var caseMap = {};
visitAll(this, icu.cases).forEach(function(c) {
caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
});
return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
};
XmlToI18n$1.prototype.visitExpansionCase = function(icuCase, context) {
return {
value: icuCase.value,
nodes: [].concat.apply([], visitAll(this, icuCase.expression))
};
};
XmlToI18n$1.prototype.visitComment = function(comment, context) {};
XmlToI18n$1.prototype.visitAttribute = function(attribute, context) {};
XmlToI18n$1.prototype._addError = function(node, message) {
this._errors.push(new I18nError(node.sourceSpan, message));
};
return XmlToI18n$1;
}();
function getTypeForTag(tag) {
switch (tag.toLowerCase()) {
case "br":
case "b":
case "i":
case "u":
return "fmt";

case "img":
return "image";

case "a":
return "link";

default:
return "other";
}
}
var _MESSAGES_TAG = "messagebundle";
var _MESSAGE_TAG = "msg";
var _PLACEHOLDER_TAG$2 = "ph";
var _EXEMPLE_TAG = "ex";
var _SOURCE_TAG$2 = "source";
var _DOCTYPE = '<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) "default">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>';
var Xmb = function(_super) {
__extends(Xmb, _super);
function Xmb() {
return _super !== null && _super.apply(this, arguments) || this;
}
Xmb.prototype.write = function(messages, locale) {
var exampleVisitor = new ExampleVisitor();
var visitor = new _Visitor$2();
var rootNode = new Tag(_MESSAGES_TAG);
messages.forEach(function(message) {
var attrs = {
id: message.id
};
if (message.description) {
attrs["desc"] = message.description;
}
if (message.meaning) {
attrs["meaning"] = message.meaning;
}
var sourceTags = [];
message.sources.forEach(function(source) {
sourceTags.push(new Tag(_SOURCE_TAG$2, {}, [ new Text$2(source.filePath + ":" + source.startLine + (source.endLine !== source.startLine ? "," + source.endLine : "")) ]));
});
rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, sourceTags.concat(visitor.serialize(message.nodes))));
});
rootNode.children.push(new CR());
return serialize([ new Declaration({
version: "1.0",
encoding: "UTF-8"
}), new CR(), new Doctype(_MESSAGES_TAG, _DOCTYPE), new CR(), exampleVisitor.addDefaultExamples(rootNode), new CR() ]);
};
Xmb.prototype.load = function(content, url) {
throw new Error("Unsupported");
};
Xmb.prototype.digest = function(message) {
return digest$1(message);
};
Xmb.prototype.createNameMapper = function(message) {
return new SimplePlaceholderMapper(message, toPublicName);
};
return Xmb;
}(Serializer);
var _Visitor$2 = function() {
function _Visitor$2() {}
_Visitor$2.prototype.visitText = function(text, context) {
return [ new Text$2(text.value) ];
};
_Visitor$2.prototype.visitContainer = function(container, context) {
var _this = this;
var nodes = [];
container.children.forEach(function(node) {
return nodes.push.apply(nodes, node.visit(_this));
});
return nodes;
};
_Visitor$2.prototype.visitIcu = function(icu, context) {
var _this = this;
var nodes = [ new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ") ];
Object.keys(icu.cases).forEach(function(c) {
nodes.push.apply(nodes, [ new Text$2(c + " {") ].concat(icu.cases[c].visit(_this), [ new Text$2("} ") ]));
});
nodes.push(new Text$2("}"));
return nodes;
};
_Visitor$2.prototype.visitTagPlaceholder = function(ph, context) {
var startEx = new Tag(_EXEMPLE_TAG, {}, [ new Text$2("<" + ph.tag + ">") ]);
var startTagPh = new Tag(_PLACEHOLDER_TAG$2, {
name: ph.startName
}, [ startEx ]);
if (ph.isVoid) {
return [ startTagPh ];
}
var closeEx = new Tag(_EXEMPLE_TAG, {}, [ new Text$2("</" + ph.tag + ">") ]);
var closeTagPh = new Tag(_PLACEHOLDER_TAG$2, {
name: ph.closeName
}, [ closeEx ]);
return [ startTagPh ].concat(this.serialize(ph.children), [ closeTagPh ]);
};
_Visitor$2.prototype.visitPlaceholder = function(ph, context) {
return [ new Tag(_PLACEHOLDER_TAG$2, {
name: ph.name
}) ];
};
_Visitor$2.prototype.visitIcuPlaceholder = function(ph, context) {
return [ new Tag(_PLACEHOLDER_TAG$2, {
name: ph.name
}) ];
};
_Visitor$2.prototype.serialize = function(nodes) {
var _this = this;
return [].concat.apply([], nodes.map(function(node) {
return node.visit(_this);
}));
};
return _Visitor$2;
}();
function digest$1(message) {
return decimalDigest(message);
}
var ExampleVisitor = function() {
function ExampleVisitor() {}
ExampleVisitor.prototype.addDefaultExamples = function(node) {
node.visit(this);
return node;
};
ExampleVisitor.prototype.visitTag = function(tag) {
var _this = this;
if (tag.name === _PLACEHOLDER_TAG$2) {
if (!tag.children || tag.children.length == 0) {
var exText = new Text$2(tag.attrs["name"] || "...");
tag.children = [ new Tag(_EXEMPLE_TAG, {}, [ exText ]) ];
}
} else if (tag.children) {
tag.children.forEach(function(node) {
return node.visit(_this);
});
}
};
ExampleVisitor.prototype.visitText = function(text) {};
ExampleVisitor.prototype.visitDeclaration = function(decl) {};
ExampleVisitor.prototype.visitDoctype = function(doctype) {};
return ExampleVisitor;
}();
function toPublicName(internalName) {
return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, "_");
}
var _TRANSLATIONS_TAG = "translationbundle";
var _TRANSLATION_TAG = "translation";
var _PLACEHOLDER_TAG$3 = "ph";
var Xtb = function(_super) {
__extends(Xtb, _super);
function Xtb() {
return _super !== null && _super.apply(this, arguments) || this;
}
Xtb.prototype.write = function(messages, locale) {
throw new Error("Unsupported");
};
Xtb.prototype.load = function(content, url) {
var xtbParser = new XtbParser();
var _a = xtbParser.parse(content, url), locale = _a.locale, msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;
var i18nNodesByMsgId = {};
var converter = new XmlToI18n$2();
Object.keys(msgIdToHtml).forEach(function(msgId) {
var valueFn = function() {
var _a = converter.convert(msgIdToHtml[msgId], url), i18nNodes = _a.i18nNodes, errors = _a.errors;
if (errors.length) {
throw new Error("xtb parse errors:\n" + errors.join("\n"));
}
return i18nNodes;
};
createLazyProperty(i18nNodesByMsgId, msgId, valueFn);
});
if (errors.length) {
throw new Error("xtb parse errors:\n" + errors.join("\n"));
}
return {
locale: locale,
i18nNodesByMsgId: i18nNodesByMsgId
};
};
Xtb.prototype.digest = function(message) {
return digest$1(message);
};
Xtb.prototype.createNameMapper = function(message) {
return new SimplePlaceholderMapper(message, toPublicName);
};
return Xtb;
}(Serializer);
function createLazyProperty(messages, id, valueFn) {
Object.defineProperty(messages, id, {
configurable: true,
enumerable: true,
get: function() {
var value = valueFn();
Object.defineProperty(messages, id, {
enumerable: true,
value: value
});
return value;
},
set: function(_) {
throw new Error("Could not overwrite an XTB translation");
}
});
}
var XtbParser = function() {
function XtbParser() {
this._locale = null;
}
XtbParser.prototype.parse = function(xtb, url) {
this._bundleDepth = 0;
this._msgIdToHtml = {};
var xml = new XmlParser().parse(xtb, url, false);
this._errors = xml.errors;
visitAll(this, xml.rootNodes);
return {
msgIdToHtml: this._msgIdToHtml,
errors: this._errors,
locale: this._locale
};
};
XtbParser.prototype.visitElement = function(element, context) {
switch (element.name) {
case _TRANSLATIONS_TAG:
this._bundleDepth++;
if (this._bundleDepth > 1) {
this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");
}
var langAttr = element.attrs.find(function(attr) {
return attr.name === "lang";
});
if (langAttr) {
this._locale = langAttr.value;
}
visitAll(this, element.children, null);
this._bundleDepth--;
break;

case _TRANSLATION_TAG:
var idAttr = element.attrs.find(function(attr) {
return attr.name === "id";
});
if (!idAttr) {
this._addError(element, "<" + _TRANSLATION_TAG + '> misses the "id" attribute');
} else {
var id = idAttr.value;
if (this._msgIdToHtml.hasOwnProperty(id)) {
this._addError(element, "Duplicated translations for msg " + id);
} else {
var innerTextStart = element.startSourceSpan.end.offset;
var innerTextEnd = element.endSourceSpan.start.offset;
var content = element.startSourceSpan.start.file.content;
var innerText = content.slice(innerTextStart, innerTextEnd);
this._msgIdToHtml[id] = innerText;
}
}
break;

default:
this._addError(element, "Unexpected tag");
}
};
XtbParser.prototype.visitAttribute = function(attribute, context) {};
XtbParser.prototype.visitText = function(text, context) {};
XtbParser.prototype.visitComment = function(comment, context) {};
XtbParser.prototype.visitExpansion = function(expansion, context) {};
XtbParser.prototype.visitExpansionCase = function(expansionCase, context) {};
XtbParser.prototype._addError = function(node, message) {
this._errors.push(new I18nError(node.sourceSpan, message));
};
return XtbParser;
}();
var XmlToI18n$2 = function() {
function XmlToI18n$2() {}
XmlToI18n$2.prototype.convert = function(message, url) {
var xmlIcu = new XmlParser().parse(message, url, true);
this._errors = xmlIcu.errors;
var i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : visitAll(this, xmlIcu.rootNodes);
return {
i18nNodes: i18nNodes,
errors: this._errors
};
};
XmlToI18n$2.prototype.visitText = function(text, context) {
return new Text$1(text.value, text.sourceSpan);
};
XmlToI18n$2.prototype.visitExpansion = function(icu, context) {
var caseMap = {};
visitAll(this, icu.cases).forEach(function(c) {
caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
});
return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
};
XmlToI18n$2.prototype.visitExpansionCase = function(icuCase, context) {
return {
value: icuCase.value,
nodes: visitAll(this, icuCase.expression)
};
};
XmlToI18n$2.prototype.visitElement = function(el, context) {
if (el.name === _PLACEHOLDER_TAG$3) {
var nameAttr = el.attrs.find(function(attr) {
return attr.name === "name";
});
if (nameAttr) {
return new Placeholder("", nameAttr.value, el.sourceSpan);
}
this._addError(el, "<" + _PLACEHOLDER_TAG$3 + '> misses the "name" attribute');
} else {
this._addError(el, "Unexpected tag");
}
return null;
};
XmlToI18n$2.prototype.visitComment = function(comment, context) {};
XmlToI18n$2.prototype.visitAttribute = function(attribute, context) {};
XmlToI18n$2.prototype._addError = function(node, message) {
this._errors.push(new I18nError(node.sourceSpan, message));
};
return XmlToI18n$2;
}();
var HtmlParser = function(_super) {
__extends(HtmlParser, _super);
function HtmlParser() {
return _super.call(this, getHtmlTagDefinition) || this;
}
HtmlParser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
if (parseExpansionForms === void 0) {
parseExpansionForms = false;
}
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);
};
return HtmlParser;
}(Parser$1);
HtmlParser.decorators = [ {
type: CompilerInjectable
} ];
HtmlParser.ctorParameters = function() {
return [];
};
var TranslationBundle = function() {
function TranslationBundle(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console) {
if (_i18nNodesByMsgId === void 0) {
_i18nNodesByMsgId = {};
}
if (missingTranslationStrategy === void 0) {
missingTranslationStrategy = _angular_core.MissingTranslationStrategy.Warning;
}
this._i18nNodesByMsgId = _i18nNodesByMsgId;
this.digest = digest;
this.mapperFactory = mapperFactory;
this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console);
}
TranslationBundle.load = function(content, url, serializer, missingTranslationStrategy, console) {
var _a = serializer.load(content, url), locale = _a.locale, i18nNodesByMsgId = _a.i18nNodesByMsgId;
var digestFn = function(m) {
return serializer.digest(m);
};
var mapperFactory = function(m) {
return serializer.createNameMapper(m);
};
return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);
};
TranslationBundle.prototype.get = function(srcMsg) {
var html = this._i18nToHtml.convert(srcMsg);
if (html.errors.length) {
throw new Error(html.errors.join("\n"));
}
return html.nodes;
};
TranslationBundle.prototype.has = function(srcMsg) {
return this.digest(srcMsg) in this._i18nNodesByMsgId;
};
return TranslationBundle;
}();
var I18nToHtmlVisitor = function() {
function I18nToHtmlVisitor(_i18nNodesByMsgId, _locale, _digest, _mapperFactory, _missingTranslationStrategy, _console) {
if (_i18nNodesByMsgId === void 0) {
_i18nNodesByMsgId = {};
}
this._i18nNodesByMsgId = _i18nNodesByMsgId;
this._locale = _locale;
this._digest = _digest;
this._mapperFactory = _mapperFactory;
this._missingTranslationStrategy = _missingTranslationStrategy;
this._console = _console;
this._contextStack = [];
this._errors = [];
}
I18nToHtmlVisitor.prototype.convert = function(srcMsg) {
this._contextStack.length = 0;
this._errors.length = 0;
var text = this._convertToText(srcMsg);
var url = srcMsg.nodes[0].sourceSpan.start.file.url;
var html = new HtmlParser().parse(text, url, true);
return {
nodes: html.rootNodes,
errors: this._errors.concat(html.errors)
};
};
I18nToHtmlVisitor.prototype.visitText = function(text, context) {
return text.value;
};
I18nToHtmlVisitor.prototype.visitContainer = function(container, context) {
var _this = this;
return container.children.map(function(n) {
return n.visit(_this);
}).join("");
};
I18nToHtmlVisitor.prototype.visitIcu = function(icu, context) {
var _this = this;
var cases = Object.keys(icu.cases).map(function(k) {
return k + " {" + icu.cases[k].visit(_this) + "}";
});
var exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ? this._srcMsg.placeholders[icu.expression] : icu.expression;
return "{" + exp + ", " + icu.type + ", " + cases.join(" ") + "}";
};
I18nToHtmlVisitor.prototype.visitPlaceholder = function(ph, context) {
var phName = this._mapper(ph.name);
if (this._srcMsg.placeholders.hasOwnProperty(phName)) {
return this._srcMsg.placeholders[phName];
}
if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {
return this._convertToText(this._srcMsg.placeholderToMessage[phName]);
}
this._addError(ph, 'Unknown placeholder "' + ph.name + '"');
return "";
};
I18nToHtmlVisitor.prototype.visitTagPlaceholder = function(ph, context) {
var _this = this;
var tag = "" + ph.tag;
var attrs = Object.keys(ph.attrs).map(function(name) {
return name + '="' + ph.attrs[name] + '"';
}).join(" ");
if (ph.isVoid) {
return "<" + tag + " " + attrs + "/>";
}
var children = ph.children.map(function(c) {
return c.visit(_this);
}).join("");
return "<" + tag + " " + attrs + ">" + children + "</" + tag + ">";
};
I18nToHtmlVisitor.prototype.visitIcuPlaceholder = function(ph, context) {
return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);
};
I18nToHtmlVisitor.prototype._convertToText = function(srcMsg) {
var _this = this;
var id = this._digest(srcMsg);
var mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;
var nodes;
this._contextStack.push({
msg: this._srcMsg,
mapper: this._mapper
});
this._srcMsg = srcMsg;
if (this._i18nNodesByMsgId.hasOwnProperty(id)) {
nodes = this._i18nNodesByMsgId[id];
this._mapper = function(name) {
return mapper ? mapper.toInternalName(name) : name;
};
} else {
if (this._missingTranslationStrategy === _angular_core.MissingTranslationStrategy.Error) {
var ctx = this._locale ? ' for locale "' + this._locale + '"' : "";
this._addError(srcMsg.nodes[0], 'Missing translation for message "' + id + '"' + ctx);
} else if (this._console && this._missingTranslationStrategy === _angular_core.MissingTranslationStrategy.Warning) {
var ctx = this._locale ? ' for locale "' + this._locale + '"' : "";
this._console.warn('Missing translation for message "' + id + '"' + ctx);
}
nodes = srcMsg.nodes;
this._mapper = function(name) {
return name;
};
}
var text = nodes.map(function(node) {
return node.visit(_this);
}).join("");
var context = this._contextStack.pop();
this._srcMsg = context.msg;
this._mapper = context.mapper;
return text;
};
I18nToHtmlVisitor.prototype._addError = function(el, msg) {
this._errors.push(new I18nError(el.sourceSpan, msg));
};
return I18nToHtmlVisitor;
}();
var I18NHtmlParser = function() {
function I18NHtmlParser(_htmlParser, translations, translationsFormat, missingTranslation, console) {
if (missingTranslation === void 0) {
missingTranslation = _angular_core.MissingTranslationStrategy.Warning;
}
this._htmlParser = _htmlParser;
if (translations) {
var serializer = createSerializer(translationsFormat);
this._translationBundle = TranslationBundle.load(translations, "i18n", serializer, missingTranslation, console);
}
}
I18NHtmlParser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
if (parseExpansionForms === void 0) {
parseExpansionForms = false;
}
if (interpolationConfig === void 0) {
interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
}
var parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);
if (!this._translationBundle) {
return parseResult;
}
if (parseResult.errors.length) {
return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);
}
return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});
};
return I18NHtmlParser;
}();
function createSerializer(format) {
format = (format || "xlf").toLowerCase();
switch (format) {
case "xmb":
return new Xmb();

case "xtb":
return new Xtb();

case "xliff2":
case "xlf2":
return new Xliff2();

case "xliff":
case "xlf":
default:
return new Xliff();
}
}
var CORE = assetUrl("core");
var Identifiers = function() {
function Identifiers() {}
return Identifiers;
}();
Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
name: "ANALYZE_FOR_ENTRY_COMPONENTS",
moduleUrl: CORE,
runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS
};
Identifiers.ElementRef = {
name: "ElementRef",
moduleUrl: CORE,
runtime: _angular_core.ElementRef
};
Identifiers.NgModuleRef = {
name: "NgModuleRef",
moduleUrl: CORE,
runtime: _angular_core.NgModuleRef
};
Identifiers.ViewContainerRef = {
name: "ViewContainerRef",
moduleUrl: CORE,
runtime: _angular_core.ViewContainerRef
};
Identifiers.ChangeDetectorRef = {
name: "ChangeDetectorRef",
moduleUrl: CORE,
runtime: _angular_core.ChangeDetectorRef
};
Identifiers.QueryList = {
name: "QueryList",
moduleUrl: CORE,
runtime: _angular_core.QueryList
};
Identifiers.TemplateRef = {
name: "TemplateRef",
moduleUrl: CORE,
runtime: _angular_core.TemplateRef
};
Identifiers.CodegenComponentFactoryResolver = {
name: "ɵCodegenComponentFactoryResolver",
moduleUrl: CORE,
runtime: _angular_core.ɵCodegenComponentFactoryResolver
};
Identifiers.ComponentFactoryResolver = {
name: "ComponentFactoryResolver",
moduleUrl: CORE,
runtime: _angular_core.ComponentFactoryResolver
};
Identifiers.ComponentFactory = {
name: "ComponentFactory",
moduleUrl: CORE,
runtime: _angular_core.ComponentFactory
};
Identifiers.ComponentRef = {
name: "ComponentRef",
moduleUrl: CORE,
runtime: _angular_core.ComponentRef
};
Identifiers.NgModuleFactory = {
name: "NgModuleFactory",
moduleUrl: CORE,
runtime: _angular_core.NgModuleFactory
};
Identifiers.NgModuleInjector = {
name: "ɵNgModuleInjector",
moduleUrl: CORE,
runtime: _angular_core.ɵNgModuleInjector
};
Identifiers.RegisterModuleFactoryFn = {
name: "ɵregisterModuleFactory",
moduleUrl: CORE,
runtime: _angular_core.ɵregisterModuleFactory
};
Identifiers.Injector = {
name: "Injector",
moduleUrl: CORE,
runtime: _angular_core.Injector
};
Identifiers.ViewEncapsulation = {
name: "ViewEncapsulation",
moduleUrl: CORE,
runtime: _angular_core.ViewEncapsulation
};
Identifiers.ChangeDetectionStrategy = {
name: "ChangeDetectionStrategy",
moduleUrl: CORE,
runtime: _angular_core.ChangeDetectionStrategy
};
Identifiers.SecurityContext = {
name: "SecurityContext",
moduleUrl: CORE,
runtime: _angular_core.SecurityContext
};
Identifiers.LOCALE_ID = {
name: "LOCALE_ID",
moduleUrl: CORE,
runtime: _angular_core.LOCALE_ID
};
Identifiers.TRANSLATIONS_FORMAT = {
name: "TRANSLATIONS_FORMAT",
moduleUrl: CORE,
runtime: _angular_core.TRANSLATIONS_FORMAT
};
Identifiers.inlineInterpolate = {
name: "ɵinlineInterpolate",
moduleUrl: CORE,
runtime: _angular_core.ɵinlineInterpolate
};
Identifiers.interpolate = {
name: "ɵinterpolate",
moduleUrl: CORE,
runtime: _angular_core.ɵinterpolate
};
Identifiers.EMPTY_ARRAY = {
name: "ɵEMPTY_ARRAY",
moduleUrl: CORE,
runtime: _angular_core.ɵEMPTY_ARRAY
};
Identifiers.EMPTY_MAP = {
name: "ɵEMPTY_MAP",
moduleUrl: CORE,
runtime: _angular_core.ɵEMPTY_MAP
};
Identifiers.Renderer = {
name: "Renderer",
moduleUrl: CORE,
runtime: _angular_core.Renderer
};
Identifiers.viewDef = {
name: "ɵvid",
moduleUrl: CORE,
runtime: _angular_core.ɵvid
};
Identifiers.elementDef = {
name: "ɵeld",
moduleUrl: CORE,
runtime: _angular_core.ɵeld
};
Identifiers.anchorDef = {
name: "ɵand",
moduleUrl: CORE,
runtime: _angular_core.ɵand
};
Identifiers.textDef = {
name: "ɵted",
moduleUrl: CORE,
runtime: _angular_core.ɵted
};
Identifiers.directiveDef = {
name: "ɵdid",
moduleUrl: CORE,
runtime: _angular_core.ɵdid
};
Identifiers.providerDef = {
name: "ɵprd",
moduleUrl: CORE,
runtime: _angular_core.ɵprd
};
Identifiers.queryDef = {
name: "ɵqud",
moduleUrl: CORE,
runtime: _angular_core.ɵqud
};
Identifiers.pureArrayDef = {
name: "ɵpad",
moduleUrl: CORE,
runtime: _angular_core.ɵpad
};
Identifiers.pureObjectDef = {
name: "ɵpod",
moduleUrl: CORE,
runtime: _angular_core.ɵpod
};
Identifiers.purePipeDef = {
name: "ɵppd",
moduleUrl: CORE,
runtime: _angular_core.ɵppd
};
Identifiers.pipeDef = {
name: "ɵpid",
moduleUrl: CORE,
runtime: _angular_core.ɵpid
};
Identifiers.nodeValue = {
name: "ɵnov",
moduleUrl: CORE,
runtime: _angular_core.ɵnov
};
Identifiers.ngContentDef = {
name: "ɵncd",
moduleUrl: CORE,
runtime: _angular_core.ɵncd
};
Identifiers.unwrapValue = {
name: "ɵunv",
moduleUrl: CORE,
runtime: _angular_core.ɵunv
};
Identifiers.createRendererType2 = {
name: "ɵcrt",
moduleUrl: CORE,
runtime: _angular_core.ɵcrt
};
Identifiers.RendererType2 = {
name: "RendererType2",
moduleUrl: CORE,
runtime: null
};
Identifiers.ViewDefinition = {
name: "ɵViewDefinition",
moduleUrl: CORE,
runtime: null
};
Identifiers.createComponentFactory = {
name: "ɵccf",
moduleUrl: CORE,
runtime: _angular_core.ɵccf
};
function assetUrl(pkg, path, type) {
if (path === void 0) {
path = null;
}
if (type === void 0) {
type = "src";
}
if (path == null) {
return "@angular/" + pkg;
} else {
return "@angular/" + pkg + "/" + type + "/" + path;
}
}
function resolveIdentifier(identifier) {
var name = identifier.name;
return _angular_core.ɵreflector.resolveIdentifier(name, identifier.moduleUrl, null, identifier.runtime);
}
function createIdentifier(identifier) {
return {
reference: resolveIdentifier(identifier)
};
}
function identifierToken(identifier) {
return {
identifier: identifier
};
}
function createIdentifierToken(identifier) {
return identifierToken(createIdentifier(identifier));
}
var PLURAL_CASES = [ "zero", "one", "two", "few", "many", "other" ];
function expandNodes(nodes) {
var expander = new _Expander();
return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);
}
var ExpansionResult = function() {
function ExpansionResult(nodes, expanded, errors) {
this.nodes = nodes;
this.expanded = expanded;
this.errors = errors;
}
return ExpansionResult;
}();
var ExpansionError = function(_super) {
__extends(ExpansionError, _super);
function ExpansionError(span, errorMsg) {
return _super.call(this, span, errorMsg) || this;
}
return ExpansionError;
}(ParseError);
var _Expander = function() {
function _Expander() {
this.isExpanded = false;
this.errors = [];
}
_Expander.prototype.visitElement = function(element, context) {
return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
};
_Expander.prototype.visitAttribute = function(attribute, context) {
return attribute;
};
_Expander.prototype.visitText = function(text, context) {
return text;
};
_Expander.prototype.visitComment = function(comment, context) {
return comment;
};
_Expander.prototype.visitExpansion = function(icu, context) {
this.isExpanded = true;
return icu.type == "plural" ? _expandPluralForm(icu, this.errors) : _expandDefaultForm(icu, this.errors);
};
_Expander.prototype.visitExpansionCase = function(icuCase, context) {
throw new Error("Should not be reached");
};
return _Expander;
}();
function _expandPluralForm(ast, errors) {
var children = ast.cases.map(function(c) {
if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
errors.push(new ExpansionError(c.valueSourceSpan, 'Plural cases should be "=<number>" or one of ' + PLURAL_CASES.join(", ")));
}
var expansionResult = expandNodes(c.expression);
errors.push.apply(errors, expansionResult.errors);
return new Element("ng-template", [ new Attribute$1("ngPluralCase", "" + c.value, c.valueSourceSpan) ], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
});
var switchAttr = new Attribute$1("[ngPlural]", ast.switchValue, ast.switchValueSourceSpan);
return new Element("ng-container", [ switchAttr ], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
}
function _expandDefaultForm(ast, errors) {
var children = ast.cases.map(function(c) {
var expansionResult = expandNodes(c.expression);
errors.push.apply(errors, expansionResult.errors);
if (c.value === "other") {
return new Element("ng-template", [ new Attribute$1("ngSwitchDefault", "", c.valueSourceSpan) ], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
}
return new Element("ng-template", [ new Attribute$1("ngSwitchCase", "" + c.value, c.valueSourceSpan) ], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
});
var switchAttr = new Attribute$1("[ngSwitch]", ast.switchValue, ast.switchValueSourceSpan);
return new Element("ng-container", [ switchAttr ], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
}
var ProviderError = function(_super) {
__extends(ProviderError, _super);
function ProviderError(message, span) {
return _super.call(this, span, message) || this;
}
return ProviderError;
}(ParseError);
var ProviderViewContext = function() {
function ProviderViewContext(component) {
var _this = this;
this.component = component;
this.errors = [];
this.viewQueries = _getViewQueries(component);
this.viewProviders = new Map();
component.viewProviders.forEach(function(provider) {
if (_this.viewProviders.get(tokenReference(provider.token)) == null) {
_this.viewProviders.set(tokenReference(provider.token), true);
}
});
}
return ProviderViewContext;
}();
var ProviderElementContext = function() {
function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, isTemplate, contentQueryStartId, _sourceSpan) {
var _this = this;
this.viewContext = viewContext;
this._parent = _parent;
this._isViewRoot = _isViewRoot;
this._directiveAsts = _directiveAsts;
this._sourceSpan = _sourceSpan;
this._transformedProviders = new Map();
this._seenProviders = new Map();
this._hasViewContainer = false;
this._queriedTokens = new Map();
this._attrs = {};
attrs.forEach(function(attrAst) {
return _this._attrs[attrAst.name] = attrAst.value;
});
var directivesMeta = _directiveAsts.map(function(directiveAst) {
return directiveAst.directive;
});
this._allProviders = _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);
this._contentQueries = _getContentQueries(contentQueryStartId, directivesMeta);
Array.from(this._allProviders.values()).forEach(function(provider) {
_this._addQueryReadsTo(provider.token, provider.token, _this._queriedTokens);
});
if (isTemplate) {
var templateRefId = createIdentifierToken(Identifiers.TemplateRef);
this._addQueryReadsTo(templateRefId, templateRefId, this._queriedTokens);
}
refs.forEach(function(refAst) {
var defaultQueryValue = refAst.value || createIdentifierToken(Identifiers.ElementRef);
_this._addQueryReadsTo({
value: refAst.name
}, defaultQueryValue, _this._queriedTokens);
});
if (this._queriedTokens.get(resolveIdentifier(Identifiers.ViewContainerRef))) {
this._hasViewContainer = true;
}
Array.from(this._allProviders.values()).forEach(function(provider) {
var eager = provider.eager || _this._queriedTokens.get(tokenReference(provider.token));
if (eager) {
_this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
}
});
}
ProviderElementContext.prototype.afterElement = function() {
var _this = this;
Array.from(this._allProviders.values()).forEach(function(provider) {
_this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
});
};
Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
get: function() {
return Array.from(this._transformedProviders.values());
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
get: function() {
var sortedProviderTypes = this.transformProviders.map(function(provider) {
return provider.token.identifier;
});
var sortedDirectives = this._directiveAsts.slice();
sortedDirectives.sort(function(dir1, dir2) {
return sortedProviderTypes.indexOf(dir1.directive.type) - sortedProviderTypes.indexOf(dir2.directive.type);
});
return sortedDirectives;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
get: function() {
return this._hasViewContainer;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProviderElementContext.prototype, "queryMatches", {
get: function() {
var allMatches = [];
this._queriedTokens.forEach(function(matches) {
allMatches.push.apply(allMatches, matches);
});
return allMatches;
},
enumerable: true,
configurable: true
});
ProviderElementContext.prototype._addQueryReadsTo = function(token, defaultValue, queryReadTokens) {
this._getQueriesFor(token).forEach(function(query) {
var queryValue = query.meta.read || defaultValue;
var tokenRef = tokenReference(queryValue);
var queryMatches = queryReadTokens.get(tokenRef);
if (!queryMatches) {
queryMatches = [];
queryReadTokens.set(tokenRef, queryMatches);
}
queryMatches.push({
queryId: query.queryId,
value: queryValue
});
});
};
ProviderElementContext.prototype._getQueriesFor = function(token) {
var result = [];
var currentEl = this;
var distance = 0;
var queries;
while (currentEl !== null) {
queries = currentEl._contentQueries.get(tokenReference(token));
if (queries) {
result.push.apply(result, queries.filter(function(query) {
return query.meta.descendants || distance <= 1;
}));
}
if (currentEl._directiveAsts.length > 0) {
distance++;
}
currentEl = currentEl._parent;
}
queries = this.viewContext.viewQueries.get(tokenReference(token));
if (queries) {
result.push.apply(result, queries);
}
return result;
};
ProviderElementContext.prototype._getOrCreateLocalProvider = function(requestingProviderType, token, eager) {
var _this = this;
var resolvedProvider = this._allProviders.get(tokenReference(token));
if (!resolvedProvider || (requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.PrivateService || (requestingProviderType === ProviderAstType.PrivateService || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.Builtin) {
return null;
}
var transformedProviderAst = this._transformedProviders.get(tokenReference(token));
if (transformedProviderAst) {
return transformedProviderAst;
}
if (this._seenProviders.get(tokenReference(token)) != null) {
this.viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), this._sourceSpan));
return null;
}
this._seenProviders.set(tokenReference(token), true);
var transformedProviders = resolvedProvider.providers.map(function(provider) {
var transformedUseValue = provider.useValue;
var transformedUseExisting = provider.useExisting;
var transformedDeps = undefined;
if (provider.useExisting != null) {
var existingDiDep = _this._getDependency(resolvedProvider.providerType, {
token: provider.useExisting
}, eager);
if (existingDiDep.token != null) {
transformedUseExisting = existingDiDep.token;
} else {
transformedUseExisting = null;
transformedUseValue = existingDiDep.value;
}
} else if (provider.useFactory) {
var deps = provider.deps || provider.useFactory.diDeps;
transformedDeps = deps.map(function(dep) {
return _this._getDependency(resolvedProvider.providerType, dep, eager);
});
} else if (provider.useClass) {
var deps = provider.deps || provider.useClass.diDeps;
transformedDeps = deps.map(function(dep) {
return _this._getDependency(resolvedProvider.providerType, dep, eager);
});
}
return _transformProvider(provider, {
useExisting: transformedUseExisting,
useValue: transformedUseValue,
deps: transformedDeps
});
});
transformedProviderAst = _transformProviderAst(resolvedProvider, {
eager: eager,
providers: transformedProviders
});
this._transformedProviders.set(tokenReference(token), transformedProviderAst);
return transformedProviderAst;
};
ProviderElementContext.prototype._getLocalDependency = function(requestingProviderType, dep, eager) {
if (eager === void 0) {
eager = false;
}
if (dep.isAttribute) {
var attrValue = this._attrs[dep.token.value];
return {
isValue: true,
value: attrValue == null ? null : attrValue
};
}
if (dep.token != null) {
if (requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.Component) {
if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Renderer) || tokenReference(dep.token) === resolveIdentifier(Identifiers.ElementRef) || tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef) || tokenReference(dep.token) === resolveIdentifier(Identifiers.TemplateRef)) {
return dep;
}
if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ViewContainerRef)) {
this._hasViewContainer = true;
}
}
if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector)) {
return dep;
}
if (this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager) != null) {
return dep;
}
}
return null;
};
ProviderElementContext.prototype._getDependency = function(requestingProviderType, dep, eager) {
if (eager === void 0) {
eager = false;
}
var currElement = this;
var currEager = eager;
var result = null;
if (!dep.isSkipSelf) {
result = this._getLocalDependency(requestingProviderType, dep, eager);
}
if (dep.isSelf) {
if (!result && dep.isOptional) {
result = {
isValue: true,
value: null
};
}
} else {
while (!result && currElement._parent) {
var prevElement = currElement;
currElement = currElement._parent;
if (prevElement._isViewRoot) {
currEager = false;
}
result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);
}
if (!result) {
if (!dep.isHost || this.viewContext.component.isHost || this.viewContext.component.type.reference === tokenReference(dep.token) || this.viewContext.viewProviders.get(tokenReference(dep.token)) != null) {
result = dep;
} else {
result = dep.isOptional ? result = {
isValue: true,
value: null
} : null;
}
}
}
if (!result) {
this.viewContext.errors.push(new ProviderError("No provider for " + tokenName(dep.token), this._sourceSpan));
}
return result;
};
return ProviderElementContext;
}();
var NgModuleProviderAnalyzer = function() {
function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
var _this = this;
this._transformedProviders = new Map();
this._seenProviders = new Map();
this._errors = [];
this._allProviders = new Map();
ngModule.transitiveModule.modules.forEach(function(ngModuleType) {
var ngModuleProvider = {
token: {
identifier: ngModuleType
},
useClass: ngModuleType
};
_resolveProviders([ ngModuleProvider ], ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders);
});
_resolveProviders(ngModule.transitiveModule.providers.map(function(entry) {
return entry.provider;
}).concat(extraProviders), ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);
}
NgModuleProviderAnalyzer.prototype.parse = function() {
var _this = this;
Array.from(this._allProviders.values()).forEach(function(provider) {
_this._getOrCreateLocalProvider(provider.token, provider.eager);
});
if (this._errors.length > 0) {
var errorString = this._errors.join("\n");
throw new Error("Provider parse errors:\n" + errorString);
}
return Array.from(this._transformedProviders.values());
};
NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function(token, eager) {
var _this = this;
var resolvedProvider = this._allProviders.get(tokenReference(token));
if (!resolvedProvider) {
return null;
}
var transformedProviderAst = this._transformedProviders.get(tokenReference(token));
if (transformedProviderAst) {
return transformedProviderAst;
}
if (this._seenProviders.get(tokenReference(token)) != null) {
this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), resolvedProvider.sourceSpan));
return null;
}
this._seenProviders.set(tokenReference(token), true);
var transformedProviders = resolvedProvider.providers.map(function(provider) {
var transformedUseValue = provider.useValue;
var transformedUseExisting = provider.useExisting;
var transformedDeps = undefined;
if (provider.useExisting != null) {
var existingDiDep = _this._getDependency({
token: provider.useExisting
}, eager, resolvedProvider.sourceSpan);
if (existingDiDep.token != null) {
transformedUseExisting = existingDiDep.token;
} else {
transformedUseExisting = null;
transformedUseValue = existingDiDep.value;
}
} else if (provider.useFactory) {
var deps = provider.deps || provider.useFactory.diDeps;
transformedDeps = deps.map(function(dep) {
return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
});
} else if (provider.useClass) {
var deps = provider.deps || provider.useClass.diDeps;
transformedDeps = deps.map(function(dep) {
return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
});
}
return _transformProvider(provider, {
useExisting: transformedUseExisting,
useValue: transformedUseValue,
deps: transformedDeps
});
});
transformedProviderAst = _transformProviderAst(resolvedProvider, {
eager: eager,
providers: transformedProviders
});
this._transformedProviders.set(tokenReference(token), transformedProviderAst);
return transformedProviderAst;
};
NgModuleProviderAnalyzer.prototype._getDependency = function(dep, eager, requestorSourceSpan) {
if (eager === void 0) {
eager = false;
}
var foundLocal = false;
if (!dep.isSkipSelf && dep.token != null) {
if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) || tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver)) {
foundLocal = true;
} else if (this._getOrCreateLocalProvider(dep.token, eager) != null) {
foundLocal = true;
}
}
var result = dep;
if (dep.isSelf && !foundLocal) {
if (dep.isOptional) {
result = {
isValue: true,
value: null
};
} else {
this._errors.push(new ProviderError("No provider for " + tokenName(dep.token), requestorSourceSpan));
}
}
return result;
};
return NgModuleProviderAnalyzer;
}();
function _transformProvider(provider, _a) {
var useExisting = _a.useExisting, useValue = _a.useValue, deps = _a.deps;
return {
token: provider.token,
useClass: provider.useClass,
useExisting: useExisting,
useFactory: provider.useFactory,
useValue: useValue,
deps: deps,
multi: provider.multi
};
}
function _transformProviderAst(provider, _a) {
var eager = _a.eager, providers = _a.providers;
return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
}
function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
var providersByToken = new Map();
directives.forEach(function(directive) {
var dirProvider = {
token: {
identifier: directive.type
},
useClass: directive.type
};
_resolveProviders([ dirProvider ], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
});
var directivesWithComponentFirst = directives.filter(function(dir) {
return dir.isComponent;
}).concat(directives.filter(function(dir) {
return !dir.isComponent;
}));
directivesWithComponentFirst.forEach(function(directive) {
_resolveProviders(directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
_resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
});
return providersByToken;
}
function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
providers.forEach(function(provider) {
var resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));
if (resolvedProvider != null && !!resolvedProvider.multiProvider !== !!provider.multi) {
targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + tokenName(resolvedProvider.token), sourceSpan));
}
if (!resolvedProvider) {
var lifecycleHooks = provider.token.identifier && provider.token.identifier.lifecycleHooks ? provider.token.identifier.lifecycleHooks : [];
var isUseValue = !(provider.useClass || provider.useExisting || provider.useFactory);
resolvedProvider = new ProviderAst(provider.token, !!provider.multi, eager || isUseValue, [ provider ], providerType, lifecycleHooks, sourceSpan);
targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);
} else {
if (!provider.multi) {
resolvedProvider.providers.length = 0;
}
resolvedProvider.providers.push(provider);
}
});
}
function _getViewQueries(component) {
var viewQueryId = 1;
var viewQueries = new Map();
if (component.viewQueries) {
component.viewQueries.forEach(function(query) {
return _addQueryToTokenMap(viewQueries, {
meta: query,
queryId: viewQueryId++
});
});
}
return viewQueries;
}
function _getContentQueries(contentQueryStartId, directives) {
var contentQueryId = contentQueryStartId;
var contentQueries = new Map();
directives.forEach(function(directive, directiveIndex) {
if (directive.queries) {
directive.queries.forEach(function(query) {
return _addQueryToTokenMap(contentQueries, {
meta: query,
queryId: contentQueryId++
});
});
}
});
return contentQueries;
}
function _addQueryToTokenMap(map, query) {
query.meta.selectors.forEach(function(token) {
var entry = map.get(tokenReference(token));
if (!entry) {
entry = [];
map.set(tokenReference(token), entry);
}
entry.push(query);
});
}
var ElementSchemaRegistry = function() {
function ElementSchemaRegistry() {}
ElementSchemaRegistry.prototype.hasProperty = function(tagName, propName, schemaMetas) {};
ElementSchemaRegistry.prototype.hasElement = function(tagName, schemaMetas) {};
ElementSchemaRegistry.prototype.securityContext = function(elementName, propName, isAttribute) {};
ElementSchemaRegistry.prototype.allKnownElementNames = function() {};
ElementSchemaRegistry.prototype.getMappedPropName = function(propName) {};
ElementSchemaRegistry.prototype.getDefaultComponentElementName = function() {};
ElementSchemaRegistry.prototype.validateProperty = function(name) {};
ElementSchemaRegistry.prototype.validateAttribute = function(name) {};
ElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function(propName) {};
ElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function(camelCaseProp, userProvidedProp, val) {};
return ElementSchemaRegistry;
}();
var StyleWithImports = function() {
function StyleWithImports(style$$1, styleUrls) {
this.style = style$$1;
this.styleUrls = styleUrls;
}
return StyleWithImports;
}();
function isStyleUrlResolvable(url) {
if (url == null || url.length === 0 || url[0] == "/") return false;
var schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);
return schemeMatch === null || schemeMatch[1] == "package" || schemeMatch[1] == "asset";
}
function extractStyleUrls(resolver, baseUrl, cssText) {
var foundUrls = [];
var modifiedCssText = cssText.replace(CSS_COMMENT_REGEXP, "").replace(CSS_IMPORT_REGEXP, function() {
var m = [];
for (var _i = 0; _i < arguments.length; _i++) {
m[_i] = arguments[_i];
}
var url = m[1] || m[2];
if (!isStyleUrlResolvable(url)) {
return m[0];
}
foundUrls.push(resolver.resolve(baseUrl, url));
return "";
});
return new StyleWithImports(modifiedCssText, foundUrls);
}
var CSS_IMPORT_REGEXP = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
var CSS_COMMENT_REGEXP = /\/\*.+?\*\//g;
var URL_WITH_SCHEMA_REGEXP = /^([^:\/?#]+):/;
var PROPERTY_PARTS_SEPARATOR = ".";
var ATTRIBUTE_PREFIX = "attr";
var CLASS_PREFIX = "class";
var STYLE_PREFIX = "style";
var ANIMATE_PROP_PREFIX = "animate-";
var BoundPropertyType = {};
BoundPropertyType.DEFAULT = 0;
BoundPropertyType.LITERAL_ATTR = 1;
BoundPropertyType.ANIMATION = 2;
BoundPropertyType[BoundPropertyType.DEFAULT] = "DEFAULT";
BoundPropertyType[BoundPropertyType.LITERAL_ATTR] = "LITERAL_ATTR";
BoundPropertyType[BoundPropertyType.ANIMATION] = "ANIMATION";
var BoundProperty = function() {
function BoundProperty(name, expression, type, sourceSpan) {
this.name = name;
this.expression = expression;
this.type = type;
this.sourceSpan = sourceSpan;
}
Object.defineProperty(BoundProperty.prototype, "isLiteral", {
get: function() {
return this.type === BoundPropertyType.LITERAL_ATTR;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BoundProperty.prototype, "isAnimation", {
get: function() {
return this.type === BoundPropertyType.ANIMATION;
},
enumerable: true,
configurable: true
});
return BoundProperty;
}();
var BindingParser = function() {
function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {
var _this = this;
this._exprParser = _exprParser;
this._interpolationConfig = _interpolationConfig;
this._schemaRegistry = _schemaRegistry;
this._targetErrors = _targetErrors;
this.pipesByName = new Map();
this._usedPipes = new Map();
pipes.forEach(function(pipe) {
return _this.pipesByName.set(pipe.name, pipe);
});
}
BindingParser.prototype.getUsedPipes = function() {
return Array.from(this._usedPipes.values());
};
BindingParser.prototype.createDirectiveHostPropertyAsts = function(dirMeta, elementSelector, sourceSpan) {
var _this = this;
if (dirMeta.hostProperties) {
var boundProps_1 = [];
Object.keys(dirMeta.hostProperties).forEach(function(propName) {
var expression = dirMeta.hostProperties[propName];
if (typeof expression === "string") {
_this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps_1);
} else {
_this._reportError('Value of the host property binding "' + propName + '" needs to be a string representing an expression but got "' + expression + '" (' + typeof expression + ")", sourceSpan);
}
});
return boundProps_1.map(function(prop) {
return _this.createElementPropertyAst(elementSelector, prop);
});
}
return null;
};
BindingParser.prototype.createDirectiveHostEventAsts = function(dirMeta, sourceSpan) {
var _this = this;
if (dirMeta.hostListeners) {
var targetEventAsts_1 = [];
Object.keys(dirMeta.hostListeners).forEach(function(propName) {
var expression = dirMeta.hostListeners[propName];
if (typeof expression === "string") {
_this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts_1);
} else {
_this._reportError('Value of the host listener "' + propName + '" needs to be a string representing an expression but got "' + expression + '" (' + typeof expression + ")", sourceSpan);
}
});
return targetEventAsts_1;
}
return null;
};
BindingParser.prototype.parseInterpolation = function(value, sourceSpan) {
var sourceInfo = sourceSpan.start.toString();
try {
var ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);
this._checkPipes(ast, sourceSpan);
return ast;
} catch (e) {
this._reportError("" + e, sourceSpan);
return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
}
};
BindingParser.prototype.parseInlineTemplateBinding = function(prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {
var bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);
for (var i = 0; i < bindings.length; i++) {
var binding = bindings[i];
if (binding.keyIsVar) {
targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));
} else if (binding.expression) {
this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);
} else {
targetMatchableAttrs.push([ binding.key, "" ]);
this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);
}
}
};
BindingParser.prototype._parseTemplateBindings = function(prefixToken, value, sourceSpan) {
var _this = this;
var sourceInfo = sourceSpan.start.toString();
try {
var bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);
this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
bindingsResult.templateBindings.forEach(function(binding) {
if (binding.expression) {
_this._checkPipes(binding.expression, sourceSpan);
}
});
bindingsResult.warnings.forEach(function(warning) {
_this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);
});
return bindingsResult.templateBindings;
} catch (e) {
this._reportError("" + e, sourceSpan);
return [];
}
};
BindingParser.prototype.parseLiteralAttr = function(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
if (_isAnimationLabel(name)) {
name = name.substring(1);
if (value) {
this._reportError('Assigning animation triggers via @prop="exp" attributes with an expression is invalid.' + ' Use property bindings (e.g. [@prop]="exp") or use an attribute without a value (e.g. @prop) instead.', sourceSpan, ParseErrorLevel.ERROR);
}
this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);
} else {
targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ""), BoundPropertyType.LITERAL_ATTR, sourceSpan));
}
};
BindingParser.prototype.parsePropertyBinding = function(name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {
var isAnimationProp = false;
if (name.startsWith(ANIMATE_PROP_PREFIX)) {
isAnimationProp = true;
name = name.substring(ANIMATE_PROP_PREFIX.length);
} else if (_isAnimationLabel(name)) {
isAnimationProp = true;
name = name.substring(1);
}
if (isAnimationProp) {
this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);
} else {
this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
}
};
BindingParser.prototype.parsePropertyInterpolation = function(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
var expr = this.parseInterpolation(value, sourceSpan);
if (expr) {
this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
return true;
}
return false;
};
BindingParser.prototype._parsePropertyAst = function(name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
targetMatchableAttrs.push([ name, ast.source ]);
targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));
};
BindingParser.prototype._parseAnimation = function(name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
var ast = this._parseBinding(expression || "null", false, sourceSpan);
targetMatchableAttrs.push([ name, ast.source ]);
targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));
};
BindingParser.prototype._parseBinding = function(value, isHostBinding, sourceSpan) {
var sourceInfo = sourceSpan.start.toString();
try {
var ast = isHostBinding ? this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) : this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);
this._checkPipes(ast, sourceSpan);
return ast;
} catch (e) {
this._reportError("" + e, sourceSpan);
return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
}
};
BindingParser.prototype.createElementPropertyAst = function(elementSelector, boundProp) {
if (boundProp.isAnimation) {
return new BoundElementPropertyAst(boundProp.name, PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, boundProp.expression, null, boundProp.sourceSpan);
}
var unit = null;
var bindingType = undefined;
var boundPropertyName = null;
var parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
var securityContexts = undefined;
if (parts.length > 1) {
if (parts[0] == ATTRIBUTE_PREFIX) {
boundPropertyName = parts[1];
this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
var nsSeparatorIdx = boundPropertyName.indexOf(":");
if (nsSeparatorIdx > -1) {
var ns = boundPropertyName.substring(0, nsSeparatorIdx);
var name = boundPropertyName.substring(nsSeparatorIdx + 1);
boundPropertyName = mergeNsAndName(ns, name);
}
bindingType = PropertyBindingType.Attribute;
} else if (parts[0] == CLASS_PREFIX) {
boundPropertyName = parts[1];
bindingType = PropertyBindingType.Class;
securityContexts = [ _angular_core.SecurityContext.NONE ];
} else if (parts[0] == STYLE_PREFIX) {
unit = parts.length > 2 ? parts[2] : null;
boundPropertyName = parts[1];
bindingType = PropertyBindingType.Style;
securityContexts = [ _angular_core.SecurityContext.STYLE ];
}
}
if (boundPropertyName === null) {
boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name);
securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);
bindingType = PropertyBindingType.Property;
this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);
}
return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan);
};
BindingParser.prototype.parseEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
if (_isAnimationLabel(name)) {
name = name.substr(1);
this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);
} else {
this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);
}
};
BindingParser.prototype._parseAnimationEvent = function(name, expression, sourceSpan, targetEvents) {
var matches = splitAtPeriod(name, [ name, "" ]);
var eventName = matches[0];
var phase = matches[1].toLowerCase();
if (phase) {
switch (phase) {
case "start":
case "done":
var ast = this._parseAction(expression, sourceSpan);
targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));
break;

default:
this._reportError('The provided animation output phase value "' + phase + '" for "@' + eventName + '" is not supported (use start or done)', sourceSpan);
break;
}
} else {
this._reportError("The animation trigger output event (@" + eventName + ") is missing its phase value name (start or done are currently supported)", sourceSpan);
}
};
BindingParser.prototype._parseEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
var _a = splitAtColon(name, [ null, name ]), target = _a[0], eventName = _a[1];
var ast = this._parseAction(expression, sourceSpan);
targetMatchableAttrs.push([ name, ast.source ]);
targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));
};
BindingParser.prototype._parseAction = function(value, sourceSpan) {
var sourceInfo = sourceSpan.start.toString();
try {
var ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
if (ast) {
this._reportExpressionParserErrors(ast.errors, sourceSpan);
}
if (!ast || ast.ast instanceof EmptyExpr) {
this._reportError("Empty expressions are not allowed", sourceSpan);
return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
}
this._checkPipes(ast, sourceSpan);
return ast;
} catch (e) {
this._reportError("" + e, sourceSpan);
return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
}
};
BindingParser.prototype._reportError = function(message, sourceSpan, level) {
if (level === void 0) {
level = ParseErrorLevel.ERROR;
}
this._targetErrors.push(new ParseError(sourceSpan, message, level));
};
BindingParser.prototype._reportExpressionParserErrors = function(errors, sourceSpan) {
for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
var error = errors_1[_i];
this._reportError(error.message, sourceSpan);
}
};
BindingParser.prototype._checkPipes = function(ast, sourceSpan) {
var _this = this;
if (ast) {
var collector = new PipeCollector();
ast.visit(collector);
collector.pipes.forEach(function(ast, pipeName) {
var pipeMeta = _this.pipesByName.get(pipeName);
if (!pipeMeta) {
_this._reportError("The pipe '" + pipeName + "' could not be found", new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));
} else {
_this._usedPipes.set(pipeName, pipeMeta);
}
});
}
};
BindingParser.prototype._validatePropertyOrAttributeName = function(propName, sourceSpan, isAttr) {
var report = isAttr ? this._schemaRegistry.validateAttribute(propName) : this._schemaRegistry.validateProperty(propName);
if (report.error) {
this._reportError(report.msg, sourceSpan, ParseErrorLevel.ERROR);
}
};
return BindingParser;
}();
var PipeCollector = function(_super) {
__extends(PipeCollector, _super);
function PipeCollector() {
var _this = _super.apply(this, arguments) || this;
_this.pipes = new Map();
return _this;
}
PipeCollector.prototype.visitPipe = function(ast, context) {
this.pipes.set(ast.name, ast);
ast.exp.visit(this);
this.visitAll(ast.args, context);
return null;
};
return PipeCollector;
}(RecursiveAstVisitor);
function _isAnimationLabel(name) {
return name[0] == "@";
}
function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
var ctxs = [];
CssSelector.parse(selector).forEach(function(selector) {
var elementNames = selector.element ? [ selector.element ] : registry.allKnownElementNames();
var notElementNames = new Set(selector.notSelectors.filter(function(selector) {
return selector.isElementSelector();
}).map(function(selector) {
return selector.element;
}));
var possibleElementNames = elementNames.filter(function(elementName) {
return !notElementNames.has(elementName);
});
ctxs.push.apply(ctxs, possibleElementNames.map(function(elementName) {
return registry.securityContext(elementName, propName, isAttribute);
}));
});
return ctxs.length === 0 ? [ _angular_core.SecurityContext.NONE ] : Array.from(new Set(ctxs)).sort();
}
var NG_CONTENT_SELECT_ATTR = "select";
var LINK_ELEMENT = "link";
var LINK_STYLE_REL_ATTR = "rel";
var LINK_STYLE_HREF_ATTR = "href";
var LINK_STYLE_REL_VALUE = "stylesheet";
var STYLE_ELEMENT = "style";
var SCRIPT_ELEMENT = "script";
var NG_NON_BINDABLE_ATTR = "ngNonBindable";
var NG_PROJECT_AS = "ngProjectAs";
function preparseElement(ast) {
var selectAttr = null;
var hrefAttr = null;
var relAttr = null;
var nonBindable = false;
var projectAs = null;
ast.attrs.forEach(function(attr) {
var lcAttrName = attr.name.toLowerCase();
if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
selectAttr = attr.value;
} else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
hrefAttr = attr.value;
} else if (lcAttrName == LINK_STYLE_REL_ATTR) {
relAttr = attr.value;
} else if (attr.name == NG_NON_BINDABLE_ATTR) {
nonBindable = true;
} else if (attr.name == NG_PROJECT_AS) {
if (attr.value.length > 0) {
projectAs = attr.value;
}
}
});
selectAttr = normalizeNgContentSelect(selectAttr);
var nodeName = ast.name.toLowerCase();
var type = PreparsedElementType.OTHER;
if (isNgContent(nodeName)) {
type = PreparsedElementType.NG_CONTENT;
} else if (nodeName == STYLE_ELEMENT) {
type = PreparsedElementType.STYLE;
} else if (nodeName == SCRIPT_ELEMENT) {
type = PreparsedElementType.SCRIPT;
} else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
type = PreparsedElementType.STYLESHEET;
}
return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
}
var PreparsedElementType = {};
PreparsedElementType.NG_CONTENT = 0;
PreparsedElementType.STYLE = 1;
PreparsedElementType.STYLESHEET = 2;
PreparsedElementType.SCRIPT = 3;
PreparsedElementType.OTHER = 4;
PreparsedElementType[PreparsedElementType.NG_CONTENT] = "NG_CONTENT";
PreparsedElementType[PreparsedElementType.STYLE] = "STYLE";
PreparsedElementType[PreparsedElementType.STYLESHEET] = "STYLESHEET";
PreparsedElementType[PreparsedElementType.SCRIPT] = "SCRIPT";
PreparsedElementType[PreparsedElementType.OTHER] = "OTHER";
var PreparsedElement = function() {
function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
this.type = type;
this.selectAttr = selectAttr;
this.hrefAttr = hrefAttr;
this.nonBindable = nonBindable;
this.projectAs = projectAs;
}
return PreparsedElement;
}();
function normalizeNgContentSelect(selectAttr) {
if (selectAttr === null || selectAttr.length === 0) {
return "*";
}
return selectAttr;
}
var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
var KW_BIND_IDX = 1;
var KW_LET_IDX = 2;
var KW_REF_IDX = 3;
var KW_ON_IDX = 4;
var KW_BINDON_IDX = 5;
var KW_AT_IDX = 6;
var IDENT_KW_IDX = 7;
var IDENT_BANANA_BOX_IDX = 8;
var IDENT_PROPERTY_IDX = 9;
var IDENT_EVENT_IDX = 10;
var TEMPLATE_ELEMENT = "template";
var TEMPLATE_ATTR = "template";
var TEMPLATE_ATTR_PREFIX = "*";
var CLASS_ATTR = "class";
var TEXT_CSS_SELECTOR = CssSelector.parse("*")[0];
var TEMPLATE_ELEMENT_DEPRECATION_WARNING = "The <template> element is deprecated. Use <ng-template> instead";
var TEMPLATE_ATTR_DEPRECATION_WARNING = "The template attribute is deprecated. Use an ng-template element instead.";
var warningCounts = {};
function warnOnlyOnce(warnings) {
return function(error) {
if (warnings.indexOf(error.msg) !== -1) {
warningCounts[error.msg] = (warningCounts[error.msg] || 0) + 1;
return warningCounts[error.msg] <= 1;
}
return true;
};
}
var TEMPLATE_TRANSFORMS = new _angular_core.InjectionToken("TemplateTransforms");
var TemplateParseError = function(_super) {
__extends(TemplateParseError, _super);
function TemplateParseError(message, span, level) {
return _super.call(this, span, message, level) || this;
}
return TemplateParseError;
}(ParseError);
var TemplateParseResult = function() {
function TemplateParseResult(templateAst, usedPipes, errors) {
this.templateAst = templateAst;
this.usedPipes = usedPipes;
this.errors = errors;
}
return TemplateParseResult;
}();
var TemplateParser = function() {
function TemplateParser(_config, _exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
this._config = _config;
this._exprParser = _exprParser;
this._schemaRegistry = _schemaRegistry;
this._htmlParser = _htmlParser;
this._console = _console;
this.transforms = transforms;
}
TemplateParser.prototype.parse = function(component, template, directives, pipes, schemas, templateUrl) {
var result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);
var warnings = result.errors.filter(function(error) {
return error.level === ParseErrorLevel.WARNING;
}).filter(warnOnlyOnce([ TEMPLATE_ATTR_DEPRECATION_WARNING, TEMPLATE_ELEMENT_DEPRECATION_WARNING ]));
var errors = result.errors.filter(function(error) {
return error.level === ParseErrorLevel.ERROR;
});
if (warnings.length > 0) {
this._console.warn("Template parse warnings:\n" + warnings.join("\n"));
}
if (errors.length > 0) {
var errorString = errors.join("\n");
throw syntaxError("Template parse errors:\n" + errorString);
}
return {
template: result.templateAst,
pipes: result.usedPipes
};
};
TemplateParser.prototype.tryParse = function(component, template, directives, pipes, schemas, templateUrl) {
return this.tryParseHtml(this.expandHtml(this._htmlParser.parse(template, templateUrl, true, this.getInterpolationConfig(component))), component, directives, pipes, schemas);
};
TemplateParser.prototype.tryParseHtml = function(htmlAstWithErrors, component, directives, pipes, schemas) {
var result;
var errors = htmlAstWithErrors.errors;
var usedPipes = [];
if (htmlAstWithErrors.rootNodes.length > 0) {
var uniqDirectives = removeSummaryDuplicates(directives);
var uniqPipes = removeSummaryDuplicates(pipes);
var providerViewContext = new ProviderViewContext(component);
var interpolationConfig = undefined;
if (component.template && component.template.interpolation) {
interpolationConfig = {
start: component.template.interpolation[0],
end: component.template.interpolation[1]
};
}
var bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);
var parseVisitor = new TemplateParseVisitor(this._config, providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);
result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
errors.push.apply(errors, providerViewContext.errors);
usedPipes.push.apply(usedPipes, bindingParser.getUsedPipes());
} else {
result = [];
}
this._assertNoReferenceDuplicationOnTemplate(result, errors);
if (errors.length > 0) {
return new TemplateParseResult(result, usedPipes, errors);
}
if (this.transforms) {
this.transforms.forEach(function(transform) {
result = templateVisitAll(transform, result);
});
}
return new TemplateParseResult(result, usedPipes, errors);
};
TemplateParser.prototype.expandHtml = function(htmlAstWithErrors, forced) {
if (forced === void 0) {
forced = false;
}
var errors = htmlAstWithErrors.errors;
if (errors.length == 0 || forced) {
var expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
errors.push.apply(errors, expandedHtmlAst.errors);
htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
}
return htmlAstWithErrors;
};
TemplateParser.prototype.getInterpolationConfig = function(component) {
if (component.template) {
return InterpolationConfig.fromArray(component.template.interpolation);
}
return undefined;
};
TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function(result, errors) {
var existingReferences = [];
result.filter(function(element) {
return !!element.references;
}).forEach(function(element) {
return element.references.forEach(function(reference) {
var name = reference.name;
if (existingReferences.indexOf(name) < 0) {
existingReferences.push(name);
} else {
var error = new TemplateParseError('Reference "#' + name + '" is defined several times', reference.sourceSpan, ParseErrorLevel.ERROR);
errors.push(error);
}
});
});
};
return TemplateParser;
}();
TemplateParser.decorators = [ {
type: CompilerInjectable
} ];
TemplateParser.ctorParameters = function() {
return [ {
type: CompilerConfig
}, {
type: Parser
}, {
type: ElementSchemaRegistry
}, {
type: I18NHtmlParser
}, {
type: _angular_core.ɵConsole
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Inject,
args: [ TEMPLATE_TRANSFORMS ]
} ]
} ];
};
var TemplateParseVisitor = function() {
function TemplateParseVisitor(config, providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {
var _this = this;
this.config = config;
this.providerViewContext = providerViewContext;
this._bindingParser = _bindingParser;
this._schemaRegistry = _schemaRegistry;
this._schemas = _schemas;
this._targetErrors = _targetErrors;
this.selectorMatcher = new SelectorMatcher();
this.directivesIndex = new Map();
this.ngContentCount = 0;
this.contentQueryStartId = providerViewContext.component.viewQueries.length + 1;
directives.forEach(function(directive, index) {
var selector = CssSelector.parse(directive.selector);
_this.selectorMatcher.addSelectables(selector, directive);
_this.directivesIndex.set(directive, index);
});
}
TemplateParseVisitor.prototype.visitExpansion = function(expansion, context) {
return null;
};
TemplateParseVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
return null;
};
TemplateParseVisitor.prototype.visitText = function(text, parent) {
var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
var expr = this._bindingParser.parseInterpolation(text.value, text.sourceSpan);
return expr ? new BoundTextAst(expr, ngContentIndex, text.sourceSpan) : new TextAst(text.value, ngContentIndex, text.sourceSpan);
};
TemplateParseVisitor.prototype.visitAttribute = function(attribute, context) {
return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
};
TemplateParseVisitor.prototype.visitComment = function(comment, context) {
return null;
};
TemplateParseVisitor.prototype.visitElement = function(element, parent) {
var _this = this;
var queryStartIndex = this.contentQueryStartId;
var nodeName = element.name;
var preparsedElement = preparseElement(element);
if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE) {
return null;
}
if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {
return null;
}
var matchableAttrs = [];
var elementOrDirectiveProps = [];
var elementOrDirectiveRefs = [];
var elementVars = [];
var events = [];
var templateElementOrDirectiveProps = [];
var templateMatchableAttrs = [];
var templateElementVars = [];
var hasInlineTemplates = false;
var attrs = [];
var isTemplateElement = isTemplate(element, this.config.enableLegacyTemplate, function(m, span) {
return _this._reportError(m, span, ParseErrorLevel.WARNING);
});
element.attrs.forEach(function(attr) {
var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);
var templateBindingsSource;
var prefixToken;
var normalizedName = _this._normalizeAttributeName(attr.name);
if (_this.config.enableLegacyTemplate && normalizedName == TEMPLATE_ATTR) {
_this._reportError(TEMPLATE_ATTR_DEPRECATION_WARNING, attr.sourceSpan, ParseErrorLevel.WARNING);
templateBindingsSource = attr.value;
} else if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {
templateBindingsSource = attr.value;
prefixToken = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length) + ":";
}
var hasTemplateBinding = templateBindingsSource != null;
if (hasTemplateBinding) {
if (hasInlineTemplates) {
_this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan);
}
hasInlineTemplates = true;
_this._bindingParser.parseInlineTemplateBinding(prefixToken, templateBindingsSource, attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
}
if (!hasBinding && !hasTemplateBinding) {
attrs.push(_this.visitAttribute(attr, null));
matchableAttrs.push([ attr.name, attr.value ]);
}
});
var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector), directiveMetas = _a.directives, matchElement = _a.matchElement;
var references = [];
var boundDirectivePropNames = new Set();
var directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references, boundDirectivePropNames);
var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, boundDirectivePropNames);
var isViewRoot = parent.isTemplateElement || hasInlineTemplates;
var providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, isTemplateElement, queryStartIndex, element.sourceSpan);
var children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
providerContext.afterElement();
var projectionSelector = preparsedElement.projectAs != null ? CssSelector.parse(preparsedElement.projectAs)[0] : elementCssSelector;
var ngContentIndex = parent.findNgContentIndex(projectionSelector);
var parsedElement;
if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
if (element.children && !element.children.every(_isEmptyTextNode)) {
this._reportError("<ng-content> element cannot have content.", element.sourceSpan);
}
parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
} else if (isTemplateElement) {
this._assertAllEventsPublishedByDirectives(directiveAsts, events);
this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
} else {
this._assertElementExists(matchElement, element);
this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan || null);
}
if (hasInlineTemplates) {
var templateQueryStartIndex = this.contentQueryStartId;
var templateSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateSelector).directives;
var templateBoundDirectivePropNames = new Set();
var templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, [], templateBoundDirectivePropNames);
var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateBoundDirectivePropNames);
this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
var templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], true, templateQueryStartIndex, element.sourceSpan);
templateProviderContext.afterElement();
parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, templateProviderContext.queryMatches, [ parsedElement ], ngContentIndex, element.sourceSpan);
}
return parsedElement;
};
TemplateParseVisitor.prototype._parseAttr = function(isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
var name = this._normalizeAttributeName(attr.name);
var value = attr.value;
var srcSpan = attr.sourceSpan;
var bindParts = name.match(BIND_NAME_REGEXP);
var hasBinding = false;
if (bindParts !== null) {
hasBinding = true;
if (bindParts[KW_BIND_IDX] != null) {
this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
} else if (bindParts[KW_LET_IDX]) {
if (isTemplateElement) {
var identifier = bindParts[IDENT_KW_IDX];
this._parseVariable(identifier, value, srcSpan, targetVars);
} else {
this._reportError('"let-" is only supported on template elements.', srcSpan);
}
} else if (bindParts[KW_REF_IDX]) {
var identifier = bindParts[IDENT_KW_IDX];
this._parseReference(identifier, value, srcSpan, targetRefs);
} else if (bindParts[KW_ON_IDX]) {
this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
} else if (bindParts[KW_BINDON_IDX]) {
this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
} else if (bindParts[KW_AT_IDX]) {
this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
} else if (bindParts[IDENT_BANANA_BOX_IDX]) {
this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
} else if (bindParts[IDENT_PROPERTY_IDX]) {
this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
} else if (bindParts[IDENT_EVENT_IDX]) {
this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
}
} else {
hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);
}
if (!hasBinding) {
this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
}
return hasBinding;
};
TemplateParseVisitor.prototype._normalizeAttributeName = function(attrName) {
return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
};
TemplateParseVisitor.prototype._parseVariable = function(identifier, value, sourceSpan, targetVars) {
if (identifier.indexOf("-") > -1) {
this._reportError('"-" is not allowed in variable names', sourceSpan);
}
targetVars.push(new VariableAst(identifier, value, sourceSpan));
};
TemplateParseVisitor.prototype._parseReference = function(identifier, value, sourceSpan, targetRefs) {
if (identifier.indexOf("-") > -1) {
this._reportError('"-" is not allowed in reference names', sourceSpan);
}
targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
};
TemplateParseVisitor.prototype._parseAssignmentEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
this._bindingParser.parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
};
TemplateParseVisitor.prototype._parseDirectives = function(selectorMatcher, elementCssSelector) {
var _this = this;
var directives = new Array(this.directivesIndex.size);
var matchElement = false;
selectorMatcher.match(elementCssSelector, function(selector, directive) {
directives[_this.directivesIndex.get(directive)] = directive;
matchElement = matchElement || selector.hasElementSelector();
});
return {
directives: directives.filter(function(dir) {
return !!dir;
}),
matchElement: matchElement
};
};
TemplateParseVisitor.prototype._createDirectiveAsts = function(isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences, targetBoundDirectivePropNames) {
var _this = this;
var matchedReferences = new Set();
var component = null;
var directiveAsts = directives.map(function(directive) {
var sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + identifierName(directive.type));
if (directive.isComponent) {
component = directive;
}
var directiveProperties = [];
var hostProperties = _this._bindingParser.createDirectiveHostPropertyAsts(directive, elementName, sourceSpan);
hostProperties = _this._checkPropertiesInSchema(elementName, hostProperties);
var hostEvents = _this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);
_this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties, targetBoundDirectivePropNames);
elementOrDirectiveRefs.forEach(function(elOrDirRef) {
if (elOrDirRef.value.length === 0 && directive.isComponent || directive.exportAs == elOrDirRef.value) {
targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));
matchedReferences.add(elOrDirRef.name);
}
});
var contentQueryStartId = _this.contentQueryStartId;
_this.contentQueryStartId += directive.queries.length;
return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, contentQueryStartId, sourceSpan);
});
elementOrDirectiveRefs.forEach(function(elOrDirRef) {
if (elOrDirRef.value.length > 0) {
if (!matchedReferences.has(elOrDirRef.name)) {
_this._reportError('There is no directive with "exportAs" set to "' + elOrDirRef.value + '"', elOrDirRef.sourceSpan);
}
} else if (!component) {
var refToken = null;
if (isTemplateElement) {
refToken = createIdentifierToken(Identifiers.TemplateRef);
}
targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
}
});
return directiveAsts;
};
TemplateParseVisitor.prototype._createDirectivePropertyAsts = function(directiveProperties, boundProps, targetBoundDirectiveProps, targetBoundDirectivePropNames) {
if (directiveProperties) {
var boundPropsByName_1 = new Map();
boundProps.forEach(function(boundProp) {
var prevValue = boundPropsByName_1.get(boundProp.name);
if (!prevValue || prevValue.isLiteral) {
boundPropsByName_1.set(boundProp.name, boundProp);
}
});
Object.keys(directiveProperties).forEach(function(dirProp) {
var elProp = directiveProperties[dirProp];
var boundProp = boundPropsByName_1.get(elProp);
if (boundProp) {
targetBoundDirectivePropNames.add(boundProp.name);
if (!isEmptyExpression(boundProp.expression)) {
targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
}
}
});
}
};
TemplateParseVisitor.prototype._createElementPropertyAsts = function(elementName, props, boundDirectivePropNames) {
var _this = this;
var boundElementProps = [];
props.forEach(function(prop) {
if (!prop.isLiteral && !boundDirectivePropNames.has(prop.name)) {
boundElementProps.push(_this._bindingParser.createElementPropertyAst(elementName, prop));
}
});
return this._checkPropertiesInSchema(elementName, boundElementProps);
};
TemplateParseVisitor.prototype._findComponentDirectives = function(directives) {
return directives.filter(function(directive) {
return directive.directive.isComponent;
});
};
TemplateParseVisitor.prototype._findComponentDirectiveNames = function(directives) {
return this._findComponentDirectives(directives).map(function(directive) {
return identifierName(directive.directive.type);
});
};
TemplateParseVisitor.prototype._assertOnlyOneComponent = function(directives, sourceSpan) {
var componentTypeNames = this._findComponentDirectiveNames(directives);
if (componentTypeNames.length > 1) {
this._reportError("More than one component matched on this element.\n" + "Make sure that only one component's selector can match a given element.\n" + ("Conflicting components: " + componentTypeNames.join(",")), sourceSpan);
}
};
TemplateParseVisitor.prototype._assertElementExists = function(matchElement, element) {
var elName = element.name.replace(/^:xhtml:/, "");
if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
var errorMsg = "'" + elName + "' is not a known element:\n";
errorMsg += "1. If '" + elName + "' is an Angular component, then verify that it is part of this module.\n";
if (elName.indexOf("-") > -1) {
errorMsg += "2. If '" + elName + "' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.";
} else {
errorMsg += "2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
}
this._reportError(errorMsg, element.sourceSpan);
}
};
TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function(directives, elementProps, sourceSpan) {
var _this = this;
var componentTypeNames = this._findComponentDirectiveNames(directives);
if (componentTypeNames.length > 0) {
this._reportError("Components on an embedded template: " + componentTypeNames.join(","), sourceSpan);
}
elementProps.forEach(function(prop) {
_this._reportError("Property binding " + prop.name + ' not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the "@NgModule.declarations".', sourceSpan);
});
};
TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function(directives, events) {
var _this = this;
var allDirectiveEvents = new Set();
directives.forEach(function(directive) {
Object.keys(directive.directive.outputs).forEach(function(k) {
var eventName = directive.directive.outputs[k];
allDirectiveEvents.add(eventName);
});
});
events.forEach(function(event) {
if (event.target != null || !allDirectiveEvents.has(event.name)) {
_this._reportError("Event binding " + event.fullName + ' not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the "@NgModule.declarations".', event.sourceSpan);
}
});
};
TemplateParseVisitor.prototype._checkPropertiesInSchema = function(elementName, boundProps) {
var _this = this;
return boundProps.filter(function(boundProp) {
if (boundProp.type === PropertyBindingType.Property && !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) {
var errorMsg = "Can't bind to '" + boundProp.name + "' since it isn't a known property of '" + elementName + "'.";
if (elementName.startsWith("ng-")) {
errorMsg += "\n1. If '" + boundProp.name + "' is an Angular directive, then add 'CommonModule' to the '@NgModule.imports' of this component." + "\n2. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
} else if (elementName.indexOf("-") > -1) {
errorMsg += "\n1. If '" + elementName + "' is an Angular component and it has '" + boundProp.name + "' input, then verify that it is part of this module." + ("\n2. If '" + elementName + "' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.") + "\n3. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
}
_this._reportError(errorMsg, boundProp.sourceSpan);
}
return !isEmptyExpression(boundProp.value);
});
};
TemplateParseVisitor.prototype._reportError = function(message, sourceSpan, level) {
if (level === void 0) {
level = ParseErrorLevel.ERROR;
}
this._targetErrors.push(new ParseError(sourceSpan, message, level));
};
return TemplateParseVisitor;
}();
var NonBindableVisitor = function() {
function NonBindableVisitor() {}
NonBindableVisitor.prototype.visitElement = function(ast, parent) {
var preparsedElement = preparseElement(ast);
if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {
return null;
}
var attrNameAndValues = ast.attrs.map(function(attr) {
return [ attr.name, attr.value ];
});
var selector = createElementCssSelector(ast.name, attrNameAndValues);
var ngContentIndex = parent.findNgContentIndex(selector);
var children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, [], children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);
};
NonBindableVisitor.prototype.visitComment = function(comment, context) {
return null;
};
NonBindableVisitor.prototype.visitAttribute = function(attribute, context) {
return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
};
NonBindableVisitor.prototype.visitText = function(text, parent) {
var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
return new TextAst(text.value, ngContentIndex, text.sourceSpan);
};
NonBindableVisitor.prototype.visitExpansion = function(expansion, context) {
return expansion;
};
NonBindableVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
return expansionCase;
};
return NonBindableVisitor;
}();
var ElementOrDirectiveRef = function() {
function ElementOrDirectiveRef(name, value, sourceSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
}
return ElementOrDirectiveRef;
}();
function splitClasses(classAttrValue) {
return classAttrValue.trim().split(/\s+/g);
}
var ElementContext = function() {
function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
this.isTemplateElement = isTemplateElement;
this._ngContentIndexMatcher = _ngContentIndexMatcher;
this._wildcardNgContentIndex = _wildcardNgContentIndex;
this.providerContext = providerContext;
}
ElementContext.create = function(isTemplateElement, directives, providerContext) {
var matcher = new SelectorMatcher();
var wildcardNgContentIndex = null;
var component = directives.find(function(directive) {
return directive.directive.isComponent;
});
if (component) {
var ngContentSelectors = component.directive.template.ngContentSelectors;
for (var i = 0; i < ngContentSelectors.length; i++) {
var selector = ngContentSelectors[i];
if (selector === "*") {
wildcardNgContentIndex = i;
} else {
matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
}
}
}
return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
};
ElementContext.prototype.findNgContentIndex = function(selector) {
var ngContentIndices = [];
this._ngContentIndexMatcher.match(selector, function(selector, ngContentIndex) {
ngContentIndices.push(ngContentIndex);
});
ngContentIndices.sort();
if (this._wildcardNgContentIndex != null) {
ngContentIndices.push(this._wildcardNgContentIndex);
}
return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
};
return ElementContext;
}();
function createElementCssSelector(elementName, attributes) {
var cssSelector = new CssSelector();
var elNameNoNs = splitNsName(elementName)[1];
cssSelector.setElement(elNameNoNs);
for (var i = 0; i < attributes.length; i++) {
var attrName = attributes[i][0];
var attrNameNoNs = splitNsName(attrName)[1];
var attrValue = attributes[i][1];
cssSelector.addAttribute(attrNameNoNs, attrValue);
if (attrName.toLowerCase() == CLASS_ATTR) {
var classes = splitClasses(attrValue);
classes.forEach(function(className) {
return cssSelector.addClassName(className);
});
}
}
return cssSelector;
}
var EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
var NON_BINDABLE_VISITOR = new NonBindableVisitor();
function _isEmptyTextNode(node) {
return node instanceof Text && node.value.trim().length == 0;
}
function removeSummaryDuplicates(items) {
var map = new Map();
items.forEach(function(item) {
if (!map.get(item.type.reference)) {
map.set(item.type.reference, item);
}
});
return Array.from(map.values());
}
function isEmptyExpression(ast) {
if (ast instanceof ASTWithSource) {
ast = ast.ast;
}
return ast instanceof EmptyExpr;
}
function isTemplate(el, enableLegacyTemplate, reportDeprecation) {
if (isNgTemplate(el.name)) return true;
var tagNoNs = splitNsName(el.name)[1];
if (tagNoNs.toLowerCase() === TEMPLATE_ELEMENT) {
if (enableLegacyTemplate && tagNoNs.toLowerCase() === TEMPLATE_ELEMENT) {
reportDeprecation(TEMPLATE_ELEMENT_DEPRECATION_WARNING, el.sourceSpan);
return true;
}
}
return false;
}
var ResourceLoader = function() {
function ResourceLoader() {}
ResourceLoader.prototype.get = function(url) {
return null;
};
return ResourceLoader;
}();
function createUrlResolverWithoutPackagePrefix() {
return new UrlResolver();
}
function createOfflineCompileUrlResolver() {
return new UrlResolver(".");
}
var DEFAULT_PACKAGE_URL_PROVIDER = {
provide: _angular_core.PACKAGE_ROOT_URL,
useValue: "/"
};
var UrlResolver = function() {
function UrlResolver(_packagePrefix) {
if (_packagePrefix === void 0) {
_packagePrefix = null;
}
this._packagePrefix = _packagePrefix;
}
UrlResolver.prototype.resolve = function(baseUrl, url) {
var resolvedUrl = url;
if (baseUrl != null && baseUrl.length > 0) {
resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
}
var resolvedParts = _split(resolvedUrl);
var prefix = this._packagePrefix;
if (prefix != null && resolvedParts != null && resolvedParts[_ComponentIndex.Scheme] == "package") {
var path = resolvedParts[_ComponentIndex.Path];
prefix = prefix.replace(/\/+$/, "");
path = path.replace(/^\/+/, "");
return prefix + "/" + path;
}
return resolvedUrl;
};
return UrlResolver;
}();
UrlResolver.decorators = [ {
type: CompilerInjectable
} ];
UrlResolver.ctorParameters = function() {
return [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ _angular_core.PACKAGE_ROOT_URL ]
} ]
} ];
};
function getUrlScheme(url) {
var match = _split(url);
return match && match[_ComponentIndex.Scheme] || "";
}
function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
var out = [];
if (opt_scheme != null) {
out.push(opt_scheme + ":");
}
if (opt_domain != null) {
out.push("//");
if (opt_userInfo != null) {
out.push(opt_userInfo + "@");
}
out.push(opt_domain);
if (opt_port != null) {
out.push(":" + opt_port);
}
}
if (opt_path != null) {
out.push(opt_path);
}
if (opt_queryData != null) {
out.push("?" + opt_queryData);
}
if (opt_fragment != null) {
out.push("#" + opt_fragment);
}
return out.join("");
}
var _splitRe = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([\\w\\d\\-\\u0100-\\uffff.%]*)" + "(?::([0-9]+))?" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
var _ComponentIndex = {};
_ComponentIndex.Scheme = 1;
_ComponentIndex.UserInfo = 2;
_ComponentIndex.Domain = 3;
_ComponentIndex.Port = 4;
_ComponentIndex.Path = 5;
_ComponentIndex.QueryData = 6;
_ComponentIndex.Fragment = 7;
_ComponentIndex[_ComponentIndex.Scheme] = "Scheme";
_ComponentIndex[_ComponentIndex.UserInfo] = "UserInfo";
_ComponentIndex[_ComponentIndex.Domain] = "Domain";
_ComponentIndex[_ComponentIndex.Port] = "Port";
_ComponentIndex[_ComponentIndex.Path] = "Path";
_ComponentIndex[_ComponentIndex.QueryData] = "QueryData";
_ComponentIndex[_ComponentIndex.Fragment] = "Fragment";
function _split(uri) {
return uri.match(_splitRe);
}
function _removeDotSegments(path) {
if (path == "/") return "/";
var leadingSlash = path[0] == "/" ? "/" : "";
var trailingSlash = path[path.length - 1] === "/" ? "/" : "";
var segments = path.split("/");
var out = [];
var up = 0;
for (var pos = 0; pos < segments.length; pos++) {
var segment = segments[pos];
switch (segment) {
case "":
case ".":
break;

case "..":
if (out.length > 0) {
out.pop();
} else {
up++;
}
break;

default:
out.push(segment);
}
}
if (leadingSlash == "") {
while (up-- > 0) {
out.unshift("..");
}
if (out.length === 0) out.push(".");
}
return leadingSlash + out.join("/") + trailingSlash;
}
function _joinAndCanonicalizePath(parts) {
var path = parts[_ComponentIndex.Path];
path = path == null ? "" : _removeDotSegments(path);
parts[_ComponentIndex.Path] = path;
return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
}
function _resolveUrl(base, url) {
var parts = _split(encodeURI(url));
var baseParts = _split(base);
if (parts[_ComponentIndex.Scheme] != null) {
return _joinAndCanonicalizePath(parts);
} else {
parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
}
for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
if (parts[i] == null) {
parts[i] = baseParts[i];
}
}
if (parts[_ComponentIndex.Path][0] == "/") {
return _joinAndCanonicalizePath(parts);
}
var path = baseParts[_ComponentIndex.Path];
if (path == null) path = "/";
var index = path.lastIndexOf("/");
path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
parts[_ComponentIndex.Path] = path;
return _joinAndCanonicalizePath(parts);
}
var DirectiveNormalizer = function() {
function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
this._resourceLoader = _resourceLoader;
this._urlResolver = _urlResolver;
this._htmlParser = _htmlParser;
this._config = _config;
this._resourceLoaderCache = new Map();
}
DirectiveNormalizer.prototype.clearCache = function() {
this._resourceLoaderCache.clear();
};
DirectiveNormalizer.prototype.clearCacheFor = function(normalizedDirective) {
var _this = this;
if (!normalizedDirective.isComponent) {
return;
}
var template = normalizedDirective.template;
this._resourceLoaderCache.delete(template.templateUrl);
template.externalStylesheets.forEach(function(stylesheet) {
_this._resourceLoaderCache.delete(stylesheet.moduleUrl);
});
};
DirectiveNormalizer.prototype._fetch = function(url) {
var result = this._resourceLoaderCache.get(url);
if (!result) {
result = this._resourceLoader.get(url);
this._resourceLoaderCache.set(url, result);
}
return result;
};
DirectiveNormalizer.prototype.normalizeTemplate = function(prenormData) {
var _this = this;
var normalizedTemplateSync = null;
var normalizedTemplateAsync = undefined;
if (isDefined(prenormData.template)) {
if (isDefined(prenormData.templateUrl)) {
throw syntaxError("'" + _angular_core.ɵstringify(prenormData.componentType) + "' component cannot define both template and templateUrl");
}
if (typeof prenormData.template !== "string") {
throw syntaxError("The template specified for component " + _angular_core.ɵstringify(prenormData.componentType) + " is not a string");
}
normalizedTemplateSync = this.normalizeTemplateSync(prenormData);
normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
} else if (isDefined(prenormData.templateUrl)) {
if (typeof prenormData.templateUrl !== "string") {
throw syntaxError("The templateUrl specified for component " + _angular_core.ɵstringify(prenormData.componentType) + " is not a string");
}
normalizedTemplateAsync = this.normalizeTemplateAsync(prenormData);
} else {
throw syntaxError("No template specified for component " + _angular_core.ɵstringify(prenormData.componentType));
}
if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {
return new SyncAsyncResult(normalizedTemplateSync);
} else {
return new SyncAsyncResult(null, normalizedTemplateAsync.then(function(normalizedTemplate) {
return _this.normalizeExternalStylesheets(normalizedTemplate);
}));
}
};
DirectiveNormalizer.prototype.normalizeTemplateSync = function(prenomData) {
return this.normalizeLoadedTemplate(prenomData, prenomData.template, prenomData.moduleUrl);
};
DirectiveNormalizer.prototype.normalizeTemplateAsync = function(prenomData) {
var _this = this;
var templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);
return this._fetch(templateUrl).then(function(value) {
return _this.normalizeLoadedTemplate(prenomData, value, templateUrl);
});
};
DirectiveNormalizer.prototype.normalizeLoadedTemplate = function(prenormData, template, templateAbsUrl) {
var isInline = !!prenormData.template;
var interpolationConfig = InterpolationConfig.fromArray(prenormData.interpolation);
var rootNodesAndErrors = this._htmlParser.parse(template, templateSourceUrl({
reference: prenormData.ngModuleType
}, {
type: {
reference: prenormData.componentType
}
}, {
isInline: isInline,
templateUrl: templateAbsUrl
}), true, interpolationConfig);
if (rootNodesAndErrors.errors.length > 0) {
var errorString = rootNodesAndErrors.errors.join("\n");
throw syntaxError("Template parse errors:\n" + errorString);
}
var templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
styles: prenormData.styles,
styleUrls: prenormData.styleUrls,
moduleUrl: prenormData.moduleUrl
}));
var visitor = new TemplatePreparseVisitor();
visitAll(visitor, rootNodesAndErrors.rootNodes);
var templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
styles: visitor.styles,
styleUrls: visitor.styleUrls,
moduleUrl: templateAbsUrl
}));
var encapsulation = prenormData.encapsulation;
if (encapsulation == null) {
encapsulation = this._config.defaultEncapsulation;
}
var styles = templateMetadataStyles.styles.concat(templateStyles.styles);
var styleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
if (encapsulation === _angular_core.ViewEncapsulation.Emulated && styles.length === 0 && styleUrls.length === 0) {
encapsulation = _angular_core.ViewEncapsulation.None;
}
return new CompileTemplateMetadata({
encapsulation: encapsulation,
template: template,
templateUrl: templateAbsUrl,
styles: styles,
styleUrls: styleUrls,
ngContentSelectors: visitor.ngContentSelectors,
animations: prenormData.animations,
interpolation: prenormData.interpolation,
isInline: isInline,
externalStylesheets: []
});
};
DirectiveNormalizer.prototype.normalizeExternalStylesheets = function(templateMeta) {
return this._loadMissingExternalStylesheets(templateMeta.styleUrls).then(function(externalStylesheets) {
return new CompileTemplateMetadata({
encapsulation: templateMeta.encapsulation,
template: templateMeta.template,
templateUrl: templateMeta.templateUrl,
styles: templateMeta.styles,
styleUrls: templateMeta.styleUrls,
externalStylesheets: externalStylesheets,
ngContentSelectors: templateMeta.ngContentSelectors,
animations: templateMeta.animations,
interpolation: templateMeta.interpolation,
isInline: templateMeta.isInline
});
});
};
DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function(styleUrls, loadedStylesheets) {
var _this = this;
if (loadedStylesheets === void 0) {
loadedStylesheets = new Map();
}
return Promise.all(styleUrls.filter(function(styleUrl) {
return !loadedStylesheets.has(styleUrl);
}).map(function(styleUrl) {
return _this._fetch(styleUrl).then(function(loadedStyle) {
var stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({
styles: [ loadedStyle ],
moduleUrl: styleUrl
}));
loadedStylesheets.set(styleUrl, stylesheet);
return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
});
})).then(function(_) {
return Array.from(loadedStylesheets.values());
});
};
DirectiveNormalizer.prototype.normalizeStylesheet = function(stylesheet) {
var _this = this;
var moduleUrl = stylesheet.moduleUrl;
var allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable).map(function(url) {
return _this._urlResolver.resolve(moduleUrl, url);
});
var allStyles = stylesheet.styles.map(function(style$$1) {
var styleWithImports = extractStyleUrls(_this._urlResolver, moduleUrl, style$$1);
allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);
return styleWithImports.style;
});
return new CompileStylesheetMetadata({
styles: allStyles,
styleUrls: allStyleUrls,
moduleUrl: moduleUrl
});
};
return DirectiveNormalizer;
}();
DirectiveNormalizer.decorators = [ {
type: CompilerInjectable
} ];
DirectiveNormalizer.ctorParameters = function() {
return [ {
type: ResourceLoader
}, {
type: UrlResolver
}, {
type: HtmlParser
}, {
type: CompilerConfig
} ];
};
var TemplatePreparseVisitor = function() {
function TemplatePreparseVisitor() {
this.ngContentSelectors = [];
this.styles = [];
this.styleUrls = [];
this.ngNonBindableStackCount = 0;
}
TemplatePreparseVisitor.prototype.visitElement = function(ast, context) {
var preparsedElement = preparseElement(ast);
switch (preparsedElement.type) {
case PreparsedElementType.NG_CONTENT:
if (this.ngNonBindableStackCount === 0) {
this.ngContentSelectors.push(preparsedElement.selectAttr);
}
break;

case PreparsedElementType.STYLE:
var textContent_1 = "";
ast.children.forEach(function(child) {
if (child instanceof Text) {
textContent_1 += child.value;
}
});
this.styles.push(textContent_1);
break;

case PreparsedElementType.STYLESHEET:
this.styleUrls.push(preparsedElement.hrefAttr);
break;

default:
break;
}
if (preparsedElement.nonBindable) {
this.ngNonBindableStackCount++;
}
visitAll(this, ast.children);
if (preparsedElement.nonBindable) {
this.ngNonBindableStackCount--;
}
return null;
};
TemplatePreparseVisitor.prototype.visitExpansion = function(ast, context) {
visitAll(this, ast.cases);
};
TemplatePreparseVisitor.prototype.visitExpansionCase = function(ast, context) {
visitAll(this, ast.expression);
};
TemplatePreparseVisitor.prototype.visitComment = function(ast, context) {
return null;
};
TemplatePreparseVisitor.prototype.visitAttribute = function(ast, context) {
return null;
};
TemplatePreparseVisitor.prototype.visitText = function(ast, context) {
return null;
};
return TemplatePreparseVisitor;
}();
var __assign = undefined && undefined.__assign || Object.assign || function(t) {
for (var s, i = 1, n = arguments.length; i < n; i++) {
s = arguments[i];
for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
}
return t;
};
var DirectiveResolver = function() {
function DirectiveResolver(_reflector) {
if (_reflector === void 0) {
_reflector = _angular_core.ɵreflector;
}
this._reflector = _reflector;
}
DirectiveResolver.prototype.isDirective = function(type) {
var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
return typeMetadata && typeMetadata.some(isDirectiveMetadata);
};
DirectiveResolver.prototype.resolve = function(type, throwIfNotFound) {
if (throwIfNotFound === void 0) {
throwIfNotFound = true;
}
var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
if (typeMetadata) {
var metadata = findLast(typeMetadata, isDirectiveMetadata);
if (metadata) {
var propertyMetadata = this._reflector.propMetadata(type);
return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
}
}
if (throwIfNotFound) {
throw new Error("No Directive annotation found on " + _angular_core.ɵstringify(type));
}
return null;
};
DirectiveResolver.prototype._mergeWithPropertyMetadata = function(dm, propertyMetadata, directiveType) {
var inputs = [];
var outputs = [];
var host = {};
var queries = {};
Object.keys(propertyMetadata).forEach(function(propName) {
var input = findLast(propertyMetadata[propName], function(a) {
return a instanceof _angular_core.Input;
});
if (input) {
if (input.bindingPropertyName) {
inputs.push(propName + ": " + input.bindingPropertyName);
} else {
inputs.push(propName);
}
}
var output = findLast(propertyMetadata[propName], function(a) {
return a instanceof _angular_core.Output;
});
if (output) {
if (output.bindingPropertyName) {
outputs.push(propName + ": " + output.bindingPropertyName);
} else {
outputs.push(propName);
}
}
var hostBindings = propertyMetadata[propName].filter(function(a) {
return a && a instanceof _angular_core.HostBinding;
});
hostBindings.forEach(function(hostBinding) {
if (hostBinding.hostPropertyName) {
var startWith = hostBinding.hostPropertyName[0];
if (startWith === "(") {
throw new Error("@HostBinding can not bind to events. Use @HostListener instead.");
} else if (startWith === "[") {
throw new Error("@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.");
}
host["[" + hostBinding.hostPropertyName + "]"] = propName;
} else {
host["[" + propName + "]"] = propName;
}
});
var hostListeners = propertyMetadata[propName].filter(function(a) {
return a && a instanceof _angular_core.HostListener;
});
hostListeners.forEach(function(hostListener) {
var args = hostListener.args || [];
host["(" + hostListener.eventName + ")"] = propName + "(" + args.join(",") + ")";
});
var query = findLast(propertyMetadata[propName], function(a) {
return a instanceof _angular_core.Query;
});
if (query) {
queries[propName] = query;
}
});
return this._merge(dm, inputs, outputs, host, queries, directiveType);
};
DirectiveResolver.prototype._extractPublicName = function(def) {
return splitAtColon(def, [ null, def ])[1].trim();
};
DirectiveResolver.prototype._dedupeBindings = function(bindings) {
var names = new Set();
var reversedResult = [];
for (var i = bindings.length - 1; i >= 0; i--) {
var binding = bindings[i];
var name = this._extractPublicName(binding);
if (!names.has(name)) {
names.add(name);
reversedResult.push(binding);
}
}
return reversedResult.reverse();
};
DirectiveResolver.prototype._merge = function(directive, inputs, outputs, host, queries, directiveType) {
var mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);
var mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);
var mergedHost = directive.host ? __assign({}, directive.host, host) : host;
var mergedQueries = directive.queries ? __assign({}, directive.queries, queries) : queries;
if (directive instanceof _angular_core.Component) {
return new _angular_core.Component({
selector: directive.selector,
inputs: mergedInputs,
outputs: mergedOutputs,
host: mergedHost,
exportAs: directive.exportAs,
moduleId: directive.moduleId,
queries: mergedQueries,
changeDetection: directive.changeDetection,
providers: directive.providers,
viewProviders: directive.viewProviders,
entryComponents: directive.entryComponents,
template: directive.template,
templateUrl: directive.templateUrl,
styles: directive.styles,
styleUrls: directive.styleUrls,
encapsulation: directive.encapsulation,
animations: directive.animations,
interpolation: directive.interpolation
});
} else {
return new _angular_core.Directive({
selector: directive.selector,
inputs: mergedInputs,
outputs: mergedOutputs,
host: mergedHost,
exportAs: directive.exportAs,
queries: mergedQueries,
providers: directive.providers
});
}
};
return DirectiveResolver;
}();
DirectiveResolver.decorators = [ {
type: CompilerInjectable
} ];
DirectiveResolver.ctorParameters = function() {
return [ {
type: _angular_core.ɵReflectorReader
} ];
};
function isDirectiveMetadata(type) {
return type instanceof _angular_core.Directive;
}
function findLast(arr, condition) {
for (var i = arr.length - 1; i >= 0; i--) {
if (condition(arr[i])) {
return arr[i];
}
}
return null;
}
var STRIP_SRC_FILE_SUFFIXES = /(\.ts|\.d\.ts|\.js|\.jsx|\.tsx)$/;
var NG_FACTORY = /\.ngfactory\./;
function ngfactoryFilePath(filePath) {
var urlWithSuffix = splitTypescriptSuffix(filePath);
return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
}
function stripNgFactory(filePath) {
return filePath.replace(NG_FACTORY, ".");
}
function isNgFactoryFile(filePath) {
return NG_FACTORY.test(filePath);
}
function splitTypescriptSuffix(path) {
if (path.endsWith(".d.ts")) {
return [ path.slice(0, -5), ".ts" ];
}
var lastDot = path.lastIndexOf(".");
if (lastDot !== -1) {
return [ path.substring(0, lastDot), path.substring(lastDot) ];
}
return [ path, "" ];
}
function summaryFileName(fileName) {
var fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, "");
return fileNameWithoutSuffix + ".ngsummary.json";
}
function hasLifecycleHook(hook, token) {
return _angular_core.ɵreflector.hasLifecycleHook(token, getHookName(hook));
}
function getHookName(hook) {
switch (hook) {
case _angular_core.ɵLifecycleHooks.OnInit:
return "ngOnInit";

case _angular_core.ɵLifecycleHooks.OnDestroy:
return "ngOnDestroy";

case _angular_core.ɵLifecycleHooks.DoCheck:
return "ngDoCheck";

case _angular_core.ɵLifecycleHooks.OnChanges:
return "ngOnChanges";

case _angular_core.ɵLifecycleHooks.AfterContentInit:
return "ngAfterContentInit";

case _angular_core.ɵLifecycleHooks.AfterContentChecked:
return "ngAfterContentChecked";

case _angular_core.ɵLifecycleHooks.AfterViewInit:
return "ngAfterViewInit";

case _angular_core.ɵLifecycleHooks.AfterViewChecked:
return "ngAfterViewChecked";
}
}
function _isNgModuleMetadata(obj) {
return obj instanceof _angular_core.NgModule;
}
var NgModuleResolver = function() {
function NgModuleResolver(_reflector) {
if (_reflector === void 0) {
_reflector = _angular_core.ɵreflector;
}
this._reflector = _reflector;
}
NgModuleResolver.prototype.isNgModule = function(type) {
return this._reflector.annotations(type).some(_isNgModuleMetadata);
};
NgModuleResolver.prototype.resolve = function(type, throwIfNotFound) {
if (throwIfNotFound === void 0) {
throwIfNotFound = true;
}
var ngModuleMeta = findLast(this._reflector.annotations(type), _isNgModuleMetadata);
if (ngModuleMeta) {
return ngModuleMeta;
} else {
if (throwIfNotFound) {
throw new Error("No NgModule metadata found for '" + _angular_core.ɵstringify(type) + "'.");
}
return null;
}
};
return NgModuleResolver;
}();
NgModuleResolver.decorators = [ {
type: CompilerInjectable
} ];
NgModuleResolver.ctorParameters = function() {
return [ {
type: _angular_core.ɵReflectorReader
} ];
};
function _isPipeMetadata(type) {
return type instanceof _angular_core.Pipe;
}
var PipeResolver = function() {
function PipeResolver(_reflector) {
if (_reflector === void 0) {
_reflector = _angular_core.ɵreflector;
}
this._reflector = _reflector;
}
PipeResolver.prototype.isPipe = function(type) {
var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
return typeMetadata && typeMetadata.some(_isPipeMetadata);
};
PipeResolver.prototype.resolve = function(type, throwIfNotFound) {
if (throwIfNotFound === void 0) {
throwIfNotFound = true;
}
var metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));
if (metas) {
var annotation = findLast(metas, _isPipeMetadata);
if (annotation) {
return annotation;
}
}
if (throwIfNotFound) {
throw new Error("No Pipe decorator found on " + _angular_core.ɵstringify(type));
}
return null;
};
return PipeResolver;
}();
PipeResolver.decorators = [ {
type: CompilerInjectable
} ];
PipeResolver.ctorParameters = function() {
return [ {
type: _angular_core.ɵReflectorReader
} ];
};
var SummaryResolver = function() {
function SummaryResolver() {}
SummaryResolver.prototype.isLibraryFile = function(fileName) {
return false;
};
SummaryResolver.prototype.getLibraryFileName = function(fileName) {
return null;
};
SummaryResolver.prototype.resolveSummary = function(reference) {
return null;
};
SummaryResolver.prototype.getSymbolsOf = function(filePath) {
return [];
};
SummaryResolver.prototype.getImportAs = function(reference) {
return reference;
};
return SummaryResolver;
}();
SummaryResolver.decorators = [ {
type: CompilerInjectable
} ];
SummaryResolver.ctorParameters = function() {
return [];
};
var ERROR_COLLECTOR_TOKEN = new _angular_core.InjectionToken("ErrorCollector");
var CompileMetadataResolver = function() {
function CompileMetadataResolver(_config, _ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _console, _staticSymbolCache, _reflector, _errorCollector) {
if (_reflector === void 0) {
_reflector = _angular_core.ɵreflector;
}
this._config = _config;
this._ngModuleResolver = _ngModuleResolver;
this._directiveResolver = _directiveResolver;
this._pipeResolver = _pipeResolver;
this._summaryResolver = _summaryResolver;
this._schemaRegistry = _schemaRegistry;
this._directiveNormalizer = _directiveNormalizer;
this._console = _console;
this._staticSymbolCache = _staticSymbolCache;
this._reflector = _reflector;
this._errorCollector = _errorCollector;
this._nonNormalizedDirectiveCache = new Map();
this._directiveCache = new Map();
this._summaryCache = new Map();
this._pipeCache = new Map();
this._ngModuleCache = new Map();
this._ngModuleOfTypes = new Map();
}
CompileMetadataResolver.prototype.clearCacheFor = function(type) {
var dirMeta = this._directiveCache.get(type);
this._directiveCache.delete(type);
this._nonNormalizedDirectiveCache.delete(type);
this._summaryCache.delete(type);
this._pipeCache.delete(type);
this._ngModuleOfTypes.delete(type);
this._ngModuleCache.clear();
if (dirMeta) {
this._directiveNormalizer.clearCacheFor(dirMeta);
}
};
CompileMetadataResolver.prototype.clearCache = function() {
this._directiveCache.clear();
this._nonNormalizedDirectiveCache.clear();
this._summaryCache.clear();
this._pipeCache.clear();
this._ngModuleCache.clear();
this._ngModuleOfTypes.clear();
this._directiveNormalizer.clearCache();
};
CompileMetadataResolver.prototype._createProxyClass = function(baseType, name) {
var delegate = null;
var proxyClass = function() {
if (!delegate) {
throw new Error("Illegal state: Class " + name + " for type " + _angular_core.ɵstringify(baseType) + " is not compiled yet!");
}
return delegate.apply(this, arguments);
};
proxyClass.setDelegate = function(d) {
delegate = d;
proxyClass.prototype = d.prototype;
};
proxyClass.overriddenName = name;
return proxyClass;
};
CompileMetadataResolver.prototype.getGeneratedClass = function(dirType, name) {
if (dirType instanceof StaticSymbol) {
return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), name);
} else {
return this._createProxyClass(dirType, name);
}
};
CompileMetadataResolver.prototype.getComponentViewClass = function(dirType) {
return this.getGeneratedClass(dirType, viewClassName(dirType, 0));
};
CompileMetadataResolver.prototype.getHostComponentViewClass = function(dirType) {
return this.getGeneratedClass(dirType, hostViewClassName(dirType));
};
CompileMetadataResolver.prototype.getHostComponentType = function(dirType) {
var name = identifierName({
reference: dirType
}) + "_Host";
if (dirType instanceof StaticSymbol) {
return this._staticSymbolCache.get(dirType.filePath, name);
} else {
var HostClass = function HostClass() {};
HostClass.overriddenName = name;
return HostClass;
}
};
CompileMetadataResolver.prototype.getRendererType = function(dirType) {
if (dirType instanceof StaticSymbol) {
return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), rendererTypeName(dirType));
} else {
return {};
}
};
CompileMetadataResolver.prototype.getComponentFactory = function(selector, dirType, inputs, outputs) {
if (dirType instanceof StaticSymbol) {
return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), componentFactoryName(dirType));
} else {
var hostView = this.getHostComponentViewClass(dirType);
return _angular_core.ɵccf(selector, dirType, hostView, inputs, outputs, []);
}
};
CompileMetadataResolver.prototype.initComponentFactory = function(factory, ngContentSelectors) {
if (!(factory instanceof StaticSymbol)) {
(_a = factory.ngContentSelectors).push.apply(_a, ngContentSelectors);
}
var _a;
};
CompileMetadataResolver.prototype._loadSummary = function(type, kind) {
var typeSummary = this._summaryCache.get(type);
if (!typeSummary) {
var summary = this._summaryResolver.resolveSummary(type);
typeSummary = summary ? summary.type : null;
this._summaryCache.set(type, typeSummary || null);
}
return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;
};
CompileMetadataResolver.prototype._loadDirectiveMetadata = function(ngModuleType, directiveType, isSync) {
var _this = this;
if (this._directiveCache.has(directiveType)) {
return null;
}
directiveType = _angular_core.resolveForwardRef(directiveType);
var _a = this.getNonNormalizedDirectiveMetadata(directiveType), annotation = _a.annotation, metadata = _a.metadata;
var createDirectiveMetadata = function(templateMetadata) {
var normalizedDirMeta = new CompileDirectiveMetadata({
isHost: false,
type: metadata.type,
isComponent: metadata.isComponent,
selector: metadata.selector,
exportAs: metadata.exportAs,
changeDetection: metadata.changeDetection,
inputs: metadata.inputs,
outputs: metadata.outputs,
hostListeners: metadata.hostListeners,
hostProperties: metadata.hostProperties,
hostAttributes: metadata.hostAttributes,
providers: metadata.providers,
viewProviders: metadata.viewProviders,
queries: metadata.queries,
viewQueries: metadata.viewQueries,
entryComponents: metadata.entryComponents,
componentViewType: metadata.componentViewType,
rendererType: metadata.rendererType,
componentFactory: metadata.componentFactory,
template: templateMetadata
});
if (templateMetadata) {
_this.initComponentFactory(metadata.componentFactory, templateMetadata.ngContentSelectors);
}
_this._directiveCache.set(directiveType, normalizedDirMeta);
_this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());
return normalizedDirMeta;
};
if (metadata.isComponent) {
var template = metadata.template;
var templateMeta = this._directiveNormalizer.normalizeTemplate({
ngModuleType: ngModuleType,
componentType: directiveType,
moduleUrl: componentModuleUrl(this._reflector, directiveType, annotation),
encapsulation: template.encapsulation,
template: template.template,
templateUrl: template.templateUrl,
styles: template.styles,
styleUrls: template.styleUrls,
animations: template.animations,
interpolation: template.interpolation
});
if (templateMeta.syncResult) {
createDirectiveMetadata(templateMeta.syncResult);
return null;
} else {
if (isSync) {
this._reportError(componentStillLoadingError(directiveType), directiveType);
return null;
}
return templateMeta.asyncResult.then(createDirectiveMetadata);
}
} else {
createDirectiveMetadata(null);
return null;
}
};
CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = function(directiveType) {
var _this = this;
directiveType = _angular_core.resolveForwardRef(directiveType);
if (!directiveType) {
return null;
}
var cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);
if (cacheEntry) {
return cacheEntry;
}
var dirMeta = this._directiveResolver.resolve(directiveType, false);
if (!dirMeta) {
return null;
}
var nonNormalizedTemplateMetadata = undefined;
if (dirMeta instanceof _angular_core.Component) {
assertArrayOfStrings("styles", dirMeta.styles);
assertArrayOfStrings("styleUrls", dirMeta.styleUrls);
assertInterpolationSymbols("interpolation", dirMeta.interpolation);
var animations = dirMeta.animations;
nonNormalizedTemplateMetadata = new CompileTemplateMetadata({
encapsulation: noUndefined(dirMeta.encapsulation),
template: noUndefined(dirMeta.template),
templateUrl: noUndefined(dirMeta.templateUrl),
styles: dirMeta.styles || [],
styleUrls: dirMeta.styleUrls || [],
animations: animations || [],
interpolation: noUndefined(dirMeta.interpolation),
isInline: !!dirMeta.template,
externalStylesheets: [],
ngContentSelectors: []
});
}
var changeDetectionStrategy = null;
var viewProviders = [];
var entryComponentMetadata = [];
var selector = dirMeta.selector;
if (dirMeta instanceof _angular_core.Component) {
changeDetectionStrategy = dirMeta.changeDetection;
if (dirMeta.viewProviders) {
viewProviders = this._getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, 'viewProviders for "' + stringifyType(directiveType) + '"', [], directiveType);
}
if (dirMeta.entryComponents) {
entryComponentMetadata = flattenAndDedupeArray(dirMeta.entryComponents).map(function(type) {
return _this._getEntryComponentMetadata(type);
}).concat(entryComponentMetadata);
}
if (!selector) {
selector = this._schemaRegistry.getDefaultComponentElementName();
}
} else {
if (!selector) {
this._reportError(syntaxError("Directive " + stringifyType(directiveType) + " has no selector, please add it!"), directiveType);
selector = "error";
}
}
var providers = [];
if (dirMeta.providers != null) {
providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, 'providers for "' + stringifyType(directiveType) + '"', [], directiveType);
}
var queries = [];
var viewQueries = [];
if (dirMeta.queries != null) {
queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);
viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);
}
var metadata = CompileDirectiveMetadata.create({
isHost: false,
selector: selector,
exportAs: noUndefined(dirMeta.exportAs),
isComponent: !!nonNormalizedTemplateMetadata,
type: this._getTypeMetadata(directiveType),
template: nonNormalizedTemplateMetadata,
changeDetection: changeDetectionStrategy,
inputs: dirMeta.inputs || [],
outputs: dirMeta.outputs || [],
host: dirMeta.host || {},
providers: providers || [],
viewProviders: viewProviders || [],
queries: queries || [],
viewQueries: viewQueries || [],
entryComponents: entryComponentMetadata,
componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) : null,
rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : null,
componentFactory: null
});
if (nonNormalizedTemplateMetadata) {
metadata.componentFactory = this.getComponentFactory(selector, directiveType, metadata.inputs, metadata.outputs);
}
cacheEntry = {
metadata: metadata,
annotation: dirMeta
};
this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry);
return cacheEntry;
};
CompileMetadataResolver.prototype.getDirectiveMetadata = function(directiveType) {
var dirMeta = this._directiveCache.get(directiveType);
if (!dirMeta) {
this._reportError(syntaxError("Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive " + stringifyType(directiveType) + "."), directiveType);
}
return dirMeta;
};
CompileMetadataResolver.prototype.getDirectiveSummary = function(dirType) {
var dirSummary = this._loadSummary(dirType, CompileSummaryKind.Directive);
if (!dirSummary) {
this._reportError(syntaxError("Illegal state: Could not load the summary for directive " + stringifyType(dirType) + "."), dirType);
}
return dirSummary;
};
CompileMetadataResolver.prototype.isDirective = function(type) {
return this._directiveResolver.isDirective(type);
};
CompileMetadataResolver.prototype.isPipe = function(type) {
return this._pipeResolver.isPipe(type);
};
CompileMetadataResolver.prototype.getNgModuleSummary = function(moduleType) {
var moduleSummary = this._loadSummary(moduleType, CompileSummaryKind.NgModule);
if (!moduleSummary) {
var moduleMeta = this.getNgModuleMetadata(moduleType, false);
moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;
if (moduleSummary) {
this._summaryCache.set(moduleType, moduleSummary);
}
}
return moduleSummary;
};
CompileMetadataResolver.prototype.loadNgModuleDirectiveAndPipeMetadata = function(moduleType, isSync, throwIfNotFound) {
var _this = this;
if (throwIfNotFound === void 0) {
throwIfNotFound = true;
}
var ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);
var loading = [];
if (ngModule) {
ngModule.declaredDirectives.forEach(function(id) {
var promise = _this._loadDirectiveMetadata(moduleType, id.reference, isSync);
if (promise) {
loading.push(promise);
}
});
ngModule.declaredPipes.forEach(function(id) {
return _this._loadPipeMetadata(id.reference);
});
}
return Promise.all(loading);
};
CompileMetadataResolver.prototype.getNgModuleMetadata = function(moduleType, throwIfNotFound) {
var _this = this;
if (throwIfNotFound === void 0) {
throwIfNotFound = true;
}
moduleType = _angular_core.resolveForwardRef(moduleType);
var compileMeta = this._ngModuleCache.get(moduleType);
if (compileMeta) {
return compileMeta;
}
var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
if (!meta) {
return null;
}
var declaredDirectives = [];
var exportedNonModuleIdentifiers = [];
var declaredPipes = [];
var importedModules = [];
var exportedModules = [];
var providers = [];
var entryComponents = [];
var bootstrapComponents = [];
var schemas = [];
if (meta.imports) {
flattenAndDedupeArray(meta.imports).forEach(function(importedType) {
var importedModuleType = undefined;
if (isValidType(importedType)) {
importedModuleType = importedType;
} else if (importedType && importedType.ngModule) {
var moduleWithProviders = importedType;
importedModuleType = moduleWithProviders.ngModule;
if (moduleWithProviders.providers) {
providers.push.apply(providers, _this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, "provider for the NgModule '" + stringifyType(importedModuleType) + "'", [], importedType));
}
}
if (importedModuleType) {
if (_this._checkSelfImport(moduleType, importedModuleType)) return;
var importedModuleSummary = _this.getNgModuleSummary(importedModuleType);
if (!importedModuleSummary) {
_this._reportError(syntaxError("Unexpected " + _this._getTypeDescriptor(importedType) + " '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'. Please add a @NgModule annotation."), moduleType);
return;
}
importedModules.push(importedModuleSummary);
} else {
_this._reportError(syntaxError("Unexpected value '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'"), moduleType);
return;
}
});
}
if (meta.exports) {
flattenAndDedupeArray(meta.exports).forEach(function(exportedType) {
if (!isValidType(exportedType)) {
_this._reportError(syntaxError("Unexpected value '" + stringifyType(exportedType) + "' exported by the module '" + stringifyType(moduleType) + "'"), moduleType);
return;
}
var exportedModuleSummary = _this.getNgModuleSummary(exportedType);
if (exportedModuleSummary) {
exportedModules.push(exportedModuleSummary);
} else {
exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType));
}
});
}
var transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);
if (meta.declarations) {
flattenAndDedupeArray(meta.declarations).forEach(function(declaredType) {
if (!isValidType(declaredType)) {
_this._reportError(syntaxError("Unexpected value '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'"), moduleType);
return;
}
var declaredIdentifier = _this._getIdentifierMetadata(declaredType);
if (_this._directiveResolver.isDirective(declaredType)) {
transitiveModule.addDirective(declaredIdentifier);
declaredDirectives.push(declaredIdentifier);
_this._addTypeToModule(declaredType, moduleType);
} else if (_this._pipeResolver.isPipe(declaredType)) {
transitiveModule.addPipe(declaredIdentifier);
transitiveModule.pipes.push(declaredIdentifier);
declaredPipes.push(declaredIdentifier);
_this._addTypeToModule(declaredType, moduleType);
} else {
_this._reportError(syntaxError("Unexpected " + _this._getTypeDescriptor(declaredType) + " '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'. Please add a @Pipe/@Directive/@Component annotation."), moduleType);
return;
}
});
}
var exportedDirectives = [];
var exportedPipes = [];
exportedNonModuleIdentifiers.forEach(function(exportedId) {
if (transitiveModule.directivesSet.has(exportedId.reference)) {
exportedDirectives.push(exportedId);
transitiveModule.addExportedDirective(exportedId);
} else if (transitiveModule.pipesSet.has(exportedId.reference)) {
exportedPipes.push(exportedId);
transitiveModule.addExportedPipe(exportedId);
} else {
_this._reportError(syntaxError("Can't export " + _this._getTypeDescriptor(exportedId.reference) + " " + stringifyType(exportedId.reference) + " from " + stringifyType(moduleType) + " as it was neither declared nor imported!"), moduleType);
return;
}
});
if (meta.providers) {
providers.push.apply(providers, this._getProvidersMetadata(meta.providers, entryComponents, "provider for the NgModule '" + stringifyType(moduleType) + "'", [], moduleType));
}
if (meta.entryComponents) {
entryComponents.push.apply(entryComponents, flattenAndDedupeArray(meta.entryComponents).map(function(type) {
return _this._getEntryComponentMetadata(type);
}));
}
if (meta.bootstrap) {
flattenAndDedupeArray(meta.bootstrap).forEach(function(type) {
if (!isValidType(type)) {
_this._reportError(syntaxError("Unexpected value '" + stringifyType(type) + "' used in the bootstrap property of module '" + stringifyType(moduleType) + "'"), moduleType);
return;
}
bootstrapComponents.push(_this._getIdentifierMetadata(type));
});
}
entryComponents.push.apply(entryComponents, bootstrapComponents.map(function(type) {
return _this._getEntryComponentMetadata(type.reference);
}));
if (meta.schemas) {
schemas.push.apply(schemas, flattenAndDedupeArray(meta.schemas));
}
compileMeta = new CompileNgModuleMetadata({
type: this._getTypeMetadata(moduleType),
providers: providers,
entryComponents: entryComponents,
bootstrapComponents: bootstrapComponents,
schemas: schemas,
declaredDirectives: declaredDirectives,
exportedDirectives: exportedDirectives,
declaredPipes: declaredPipes,
exportedPipes: exportedPipes,
importedModules: importedModules,
exportedModules: exportedModules,
transitiveModule: transitiveModule,
id: meta.id || null
});
entryComponents.forEach(function(id) {
return transitiveModule.addEntryComponent(id);
});
providers.forEach(function(provider) {
return transitiveModule.addProvider(provider, compileMeta.type);
});
transitiveModule.addModule(compileMeta.type);
this._ngModuleCache.set(moduleType, compileMeta);
return compileMeta;
};
CompileMetadataResolver.prototype._checkSelfImport = function(moduleType, importedModuleType) {
if (moduleType === importedModuleType) {
this._reportError(syntaxError("'" + stringifyType(moduleType) + "' module can't import itself"), moduleType);
return true;
}
return false;
};
CompileMetadataResolver.prototype._getTypeDescriptor = function(type) {
if (this._directiveResolver.isDirective(type)) {
return "directive";
}
if (this._pipeResolver.isPipe(type)) {
return "pipe";
}
if (this._ngModuleResolver.isNgModule(type)) {
return "module";
}
if (type.provide) {
return "provider";
}
return "value";
};
CompileMetadataResolver.prototype._addTypeToModule = function(type, moduleType) {
var oldModule = this._ngModuleOfTypes.get(type);
if (oldModule && oldModule !== moduleType) {
this._reportError(syntaxError("Type " + stringifyType(type) + " is part of the declarations of 2 modules: " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + "! " + ("Please consider moving " + stringifyType(type) + " to a higher module that imports " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ". ") + ("You can also create a new NgModule that exports and includes " + stringifyType(type) + " then import that NgModule in " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ".")), moduleType);
return;
}
this._ngModuleOfTypes.set(type, moduleType);
};
CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function(importedModules, exportedModules) {
var result = new TransitiveCompileNgModuleMetadata();
var modulesByToken = new Map();
importedModules.concat(exportedModules).forEach(function(modSummary) {
modSummary.modules.forEach(function(mod) {
return result.addModule(mod);
});
modSummary.entryComponents.forEach(function(comp) {
return result.addEntryComponent(comp);
});
var addedTokens = new Set();
modSummary.providers.forEach(function(entry) {
var tokenRef = tokenReference(entry.provider.token);
var prevModules = modulesByToken.get(tokenRef);
if (!prevModules) {
prevModules = new Set();
modulesByToken.set(tokenRef, prevModules);
}
var moduleRef = entry.module.reference;
if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {
prevModules.add(moduleRef);
addedTokens.add(tokenRef);
result.addProvider(entry.provider, entry.module);
}
});
});
exportedModules.forEach(function(modSummary) {
modSummary.exportedDirectives.forEach(function(id) {
return result.addExportedDirective(id);
});
modSummary.exportedPipes.forEach(function(id) {
return result.addExportedPipe(id);
});
});
importedModules.forEach(function(modSummary) {
modSummary.exportedDirectives.forEach(function(id) {
return result.addDirective(id);
});
modSummary.exportedPipes.forEach(function(id) {
return result.addPipe(id);
});
});
return result;
};
CompileMetadataResolver.prototype._getIdentifierMetadata = function(type) {
type = _angular_core.resolveForwardRef(type);
return {
reference: type
};
};
CompileMetadataResolver.prototype.isInjectable = function(type) {
var annotations = this._reflector.annotations(type);
return annotations.some(function(ann) {
return ann.constructor === _angular_core.Injectable;
});
};
CompileMetadataResolver.prototype.getInjectableSummary = function(type) {
return {
summaryKind: CompileSummaryKind.Injectable,
type: this._getTypeMetadata(type, null, false)
};
};
CompileMetadataResolver.prototype._getInjectableMetadata = function(type, dependencies) {
if (dependencies === void 0) {
dependencies = null;
}
var typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);
if (typeSummary) {
return typeSummary.type;
}
return this._getTypeMetadata(type, dependencies);
};
CompileMetadataResolver.prototype._getTypeMetadata = function(type, dependencies, throwOnUnknownDeps) {
if (dependencies === void 0) {
dependencies = null;
}
if (throwOnUnknownDeps === void 0) {
throwOnUnknownDeps = true;
}
var identifier = this._getIdentifierMetadata(type);
return {
reference: identifier.reference,
diDeps: this._getDependenciesMetadata(identifier.reference, dependencies, throwOnUnknownDeps),
lifecycleHooks: _angular_core.ɵLIFECYCLE_HOOKS_VALUES.filter(function(hook) {
return hasLifecycleHook(hook, identifier.reference);
})
};
};
CompileMetadataResolver.prototype._getFactoryMetadata = function(factory, dependencies) {
if (dependencies === void 0) {
dependencies = null;
}
factory = _angular_core.resolveForwardRef(factory);
return {
reference: factory,
diDeps: this._getDependenciesMetadata(factory, dependencies)
};
};
CompileMetadataResolver.prototype.getPipeMetadata = function(pipeType) {
var pipeMeta = this._pipeCache.get(pipeType);
if (!pipeMeta) {
this._reportError(syntaxError("Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe " + stringifyType(pipeType) + "."), pipeType);
}
return pipeMeta || null;
};
CompileMetadataResolver.prototype.getPipeSummary = function(pipeType) {
var pipeSummary = this._loadSummary(pipeType, CompileSummaryKind.Pipe);
if (!pipeSummary) {
this._reportError(syntaxError("Illegal state: Could not load the summary for pipe " + stringifyType(pipeType) + "."), pipeType);
}
return pipeSummary;
};
CompileMetadataResolver.prototype.getOrLoadPipeMetadata = function(pipeType) {
var pipeMeta = this._pipeCache.get(pipeType);
if (!pipeMeta) {
pipeMeta = this._loadPipeMetadata(pipeType);
}
return pipeMeta;
};
CompileMetadataResolver.prototype._loadPipeMetadata = function(pipeType) {
pipeType = _angular_core.resolveForwardRef(pipeType);
var pipeAnnotation = this._pipeResolver.resolve(pipeType);
var pipeMeta = new CompilePipeMetadata({
type: this._getTypeMetadata(pipeType),
name: pipeAnnotation.name,
pure: !!pipeAnnotation.pure
});
this._pipeCache.set(pipeType, pipeMeta);
this._summaryCache.set(pipeType, pipeMeta.toSummary());
return pipeMeta;
};
CompileMetadataResolver.prototype._getDependenciesMetadata = function(typeOrFunc, dependencies, throwOnUnknownDeps) {
var _this = this;
if (throwOnUnknownDeps === void 0) {
throwOnUnknownDeps = true;
}
var hasUnknownDeps = false;
var params = dependencies || this._reflector.parameters(typeOrFunc) || [];
var dependenciesMetadata = params.map(function(param) {
var isAttribute = false;
var isHost = false;
var isSelf = false;
var isSkipSelf = false;
var isOptional = false;
var token = null;
if (Array.isArray(param)) {
param.forEach(function(paramEntry) {
if (paramEntry instanceof _angular_core.Host) {
isHost = true;
} else if (paramEntry instanceof _angular_core.Self) {
isSelf = true;
} else if (paramEntry instanceof _angular_core.SkipSelf) {
isSkipSelf = true;
} else if (paramEntry instanceof _angular_core.Optional) {
isOptional = true;
} else if (paramEntry instanceof _angular_core.Attribute) {
isAttribute = true;
token = paramEntry.attributeName;
} else if (paramEntry instanceof _angular_core.Inject) {
token = paramEntry.token;
} else if (paramEntry instanceof _angular_core.InjectionToken) {
token = paramEntry;
} else if (isValidType(paramEntry) && token == null) {
token = paramEntry;
}
});
} else {
token = param;
}
if (token == null) {
hasUnknownDeps = true;
return null;
}
return {
isAttribute: isAttribute,
isHost: isHost,
isSelf: isSelf,
isSkipSelf: isSkipSelf,
isOptional: isOptional,
token: _this._getTokenMetadata(token)
};
});
if (hasUnknownDeps) {
var depsTokens = dependenciesMetadata.map(function(dep) {
return dep ? stringifyType(dep.token) : "?";
}).join(", ");
var message = "Can't resolve all parameters for " + stringifyType(typeOrFunc) + ": (" + depsTokens + ").";
if (throwOnUnknownDeps) {
this._reportError(syntaxError(message), typeOrFunc);
} else {
this._console.warn("Warning: " + message + " This will become an error in Angular v5.x");
}
}
return dependenciesMetadata;
};
CompileMetadataResolver.prototype._getTokenMetadata = function(token) {
token = _angular_core.resolveForwardRef(token);
var compileToken;
if (typeof token === "string") {
compileToken = {
value: token
};
} else {
compileToken = {
identifier: {
reference: token
}
};
}
return compileToken;
};
CompileMetadataResolver.prototype._getProvidersMetadata = function(providers, targetEntryComponents, debugInfo, compileProviders, type) {
var _this = this;
if (compileProviders === void 0) {
compileProviders = [];
}
providers.forEach(function(provider, providerIdx) {
if (Array.isArray(provider)) {
_this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);
} else {
provider = _angular_core.resolveForwardRef(provider);
var providerMeta = undefined;
if (provider && typeof provider === "object" && provider.hasOwnProperty("provide")) {
_this._validateProvider(provider);
providerMeta = new ProviderMeta(provider.provide, provider);
} else if (isValidType(provider)) {
providerMeta = new ProviderMeta(provider, {
useClass: provider
});
} else if (provider === void 0) {
_this._reportError(syntaxError("Encountered undefined provider! Usually this means you have a circular dependencies (might be caused by using 'barrel' index.ts files."));
return;
} else {
var providersInfo = providers.reduce(function(soFar, seenProvider, seenProviderIdx) {
if (seenProviderIdx < providerIdx) {
soFar.push("" + stringifyType(seenProvider));
} else if (seenProviderIdx == providerIdx) {
soFar.push("?" + stringifyType(seenProvider) + "?");
} else if (seenProviderIdx == providerIdx + 1) {
soFar.push("...");
}
return soFar;
}, []).join(", ");
_this._reportError(syntaxError("Invalid " + (debugInfo ? debugInfo : "provider") + " - only instances of Provider and Type are allowed, got: [" + providersInfo + "]"), type);
return;
}
if (providerMeta.token === resolveIdentifier(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {
targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(providerMeta, type));
} else {
compileProviders.push(_this.getProviderMetadata(providerMeta));
}
}
});
return compileProviders;
};
CompileMetadataResolver.prototype._validateProvider = function(provider) {
if (provider.hasOwnProperty("useClass") && provider.useClass == null) {
this._reportError(syntaxError("Invalid provider for " + stringifyType(provider.provide) + ". useClass cannot be " + provider.useClass + ".\n           Usually it happens when:\n           1. There's a circular dependency (might be caused by using index.ts (barrel) files).\n           2. Class was used before it was declared. Use forwardRef in this case."));
}
};
CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function(provider, type) {
var _this = this;
var components = [];
var collectedIdentifiers = [];
if (provider.useFactory || provider.useExisting || provider.useClass) {
this._reportError(syntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!"), type);
return [];
}
if (!provider.multi) {
this._reportError(syntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!"), type);
return [];
}
extractIdentifiers(provider.useValue, collectedIdentifiers);
collectedIdentifiers.forEach(function(identifier) {
var entry = _this._getEntryComponentMetadata(identifier.reference, false);
if (entry) {
components.push(entry);
}
});
return components;
};
CompileMetadataResolver.prototype._getEntryComponentMetadata = function(dirType, throwIfNotFound) {
if (throwIfNotFound === void 0) {
throwIfNotFound = true;
}
var dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);
if (dirMeta && dirMeta.metadata.isComponent) {
return {
componentType: dirType,
componentFactory: dirMeta.metadata.componentFactory
};
}
var dirSummary = this._loadSummary(dirType, CompileSummaryKind.Directive);
if (dirSummary && dirSummary.isComponent) {
return {
componentType: dirType,
componentFactory: dirSummary.componentFactory
};
}
if (throwIfNotFound) {
throw syntaxError(dirType.name + " cannot be used as an entry component.");
}
return null;
};
CompileMetadataResolver.prototype.getProviderMetadata = function(provider) {
var compileDeps = undefined;
var compileTypeMetadata = null;
var compileFactoryMetadata = null;
var token = this._getTokenMetadata(provider.token);
if (provider.useClass) {
compileTypeMetadata = this._getInjectableMetadata(provider.useClass, provider.dependencies);
compileDeps = compileTypeMetadata.diDeps;
if (provider.token === provider.useClass) {
token = {
identifier: compileTypeMetadata
};
}
} else if (provider.useFactory) {
compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);
compileDeps = compileFactoryMetadata.diDeps;
}
return {
token: token,
useClass: compileTypeMetadata,
useValue: provider.useValue,
useFactory: compileFactoryMetadata,
useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : undefined,
deps: compileDeps,
multi: provider.multi
};
};
CompileMetadataResolver.prototype._getQueriesMetadata = function(queries, isViewQuery, directiveType) {
var _this = this;
var res = [];
Object.keys(queries).forEach(function(propertyName) {
var query = queries[propertyName];
if (query.isViewQuery === isViewQuery) {
res.push(_this._getQueryMetadata(query, propertyName, directiveType));
}
});
return res;
};
CompileMetadataResolver.prototype._queryVarBindings = function(selector) {
return selector.split(/\s*,\s*/);
};
CompileMetadataResolver.prototype._getQueryMetadata = function(q, propertyName, typeOrFunc) {
var _this = this;
var selectors;
if (typeof q.selector === "string") {
selectors = this._queryVarBindings(q.selector).map(function(varName) {
return _this._getTokenMetadata(varName);
});
} else {
if (!q.selector) {
this._reportError(syntaxError("Can't construct a query for the property \"" + propertyName + '" of "' + stringifyType(typeOrFunc) + "\" since the query selector wasn't defined."), typeOrFunc);
selectors = [];
} else {
selectors = [ this._getTokenMetadata(q.selector) ];
}
}
return {
selectors: selectors,
first: q.first,
descendants: q.descendants,
propertyName: propertyName,
read: q.read ? this._getTokenMetadata(q.read) : null
};
};
CompileMetadataResolver.prototype._reportError = function(error, type, otherType) {
if (this._errorCollector) {
this._errorCollector(error, type);
if (otherType) {
this._errorCollector(error, otherType);
}
} else {
throw error;
}
};
return CompileMetadataResolver;
}();
CompileMetadataResolver.decorators = [ {
type: CompilerInjectable
} ];
CompileMetadataResolver.ctorParameters = function() {
return [ {
type: CompilerConfig
}, {
type: NgModuleResolver
}, {
type: DirectiveResolver
}, {
type: PipeResolver
}, {
type: SummaryResolver
}, {
type: ElementSchemaRegistry
}, {
type: DirectiveNormalizer
}, {
type: _angular_core.ɵConsole
}, {
type: StaticSymbolCache,
decorators: [ {
type: _angular_core.Optional
} ]
}, {
type: _angular_core.ɵReflectorReader
}, {
type: undefined,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Inject,
args: [ ERROR_COLLECTOR_TOKEN ]
} ]
} ];
};
function flattenArray(tree, out) {
if (out === void 0) {
out = [];
}
if (tree) {
for (var i = 0; i < tree.length; i++) {
var item = _angular_core.resolveForwardRef(tree[i]);
if (Array.isArray(item)) {
flattenArray(item, out);
} else {
out.push(item);
}
}
}
return out;
}
function dedupeArray(array) {
if (array) {
return Array.from(new Set(array));
}
return [];
}
function flattenAndDedupeArray(tree) {
return dedupeArray(flattenArray(tree));
}
function isValidType(value) {
return value instanceof StaticSymbol || value instanceof _angular_core.Type;
}
function componentModuleUrl(reflector, type, cmpMetadata) {
if (type instanceof StaticSymbol) {
return reflector.resourceUri(type);
}
var moduleId = cmpMetadata.moduleId;
if (typeof moduleId === "string") {
var scheme = getUrlScheme(moduleId);
return scheme ? moduleId : "package:" + moduleId + MODULE_SUFFIX;
} else if (moduleId !== null && moduleId !== void 0) {
throw syntaxError('moduleId should be a string in "' + stringifyType(type) + '". See https://goo.gl/wIDDiL for more information.\n' + "If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.");
}
return reflector.importUri(type);
}
function extractIdentifiers(value, targetIdentifiers) {
visitValue(value, new _CompileValueConverter(), targetIdentifiers);
}
var _CompileValueConverter = function(_super) {
__extends(_CompileValueConverter, _super);
function _CompileValueConverter() {
return _super !== null && _super.apply(this, arguments) || this;
}
_CompileValueConverter.prototype.visitOther = function(value, targetIdentifiers) {
targetIdentifiers.push({
reference: value
});
};
return _CompileValueConverter;
}(ValueTransformer);
function stringifyType(type) {
if (type instanceof StaticSymbol) {
return type.name + " in " + type.filePath;
} else {
return _angular_core.ɵstringify(type);
}
}
function componentStillLoadingError(compType) {
var error = Error("Can't compile synchronously as " + _angular_core.ɵstringify(compType) + " is still being loaded!");
error[_angular_core.ɵERROR_COMPONENT_TYPE] = compType;
return error;
}
var TypeModifier = {};
TypeModifier.Const = 0;
TypeModifier[TypeModifier.Const] = "Const";
var Type$1 = function() {
function Type$1(modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
this.modifiers = modifiers;
if (!modifiers) {
this.modifiers = [];
}
}
Type$1.prototype.visitType = function(visitor, context) {};
Type$1.prototype.hasModifier = function(modifier) {
return this.modifiers.indexOf(modifier) !== -1;
};
return Type$1;
}();
var BuiltinTypeName = {};
BuiltinTypeName.Dynamic = 0;
BuiltinTypeName.Bool = 1;
BuiltinTypeName.String = 2;
BuiltinTypeName.Int = 3;
BuiltinTypeName.Number = 4;
BuiltinTypeName.Function = 5;
BuiltinTypeName.Inferred = 6;
BuiltinTypeName[BuiltinTypeName.Dynamic] = "Dynamic";
BuiltinTypeName[BuiltinTypeName.Bool] = "Bool";
BuiltinTypeName[BuiltinTypeName.String] = "String";
BuiltinTypeName[BuiltinTypeName.Int] = "Int";
BuiltinTypeName[BuiltinTypeName.Number] = "Number";
BuiltinTypeName[BuiltinTypeName.Function] = "Function";
BuiltinTypeName[BuiltinTypeName.Inferred] = "Inferred";
var BuiltinType = function(_super) {
__extends(BuiltinType, _super);
function BuiltinType(name, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
var _this = _super.call(this, modifiers) || this;
_this.name = name;
return _this;
}
BuiltinType.prototype.visitType = function(visitor, context) {
return visitor.visitBuiltintType(this, context);
};
return BuiltinType;
}(Type$1);
var ExpressionType = function(_super) {
__extends(ExpressionType, _super);
function ExpressionType(value, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
var _this = _super.call(this, modifiers) || this;
_this.value = value;
return _this;
}
ExpressionType.prototype.visitType = function(visitor, context) {
return visitor.visitExpressionType(this, context);
};
return ExpressionType;
}(Type$1);
var ArrayType = function(_super) {
__extends(ArrayType, _super);
function ArrayType(of, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
var _this = _super.call(this, modifiers) || this;
_this.of = of;
return _this;
}
ArrayType.prototype.visitType = function(visitor, context) {
return visitor.visitArrayType(this, context);
};
return ArrayType;
}(Type$1);
var MapType = function(_super) {
__extends(MapType, _super);
function MapType(valueType, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
var _this = _super.call(this, modifiers) || this;
_this.valueType = valueType || null;
return _this;
}
MapType.prototype.visitType = function(visitor, context) {
return visitor.visitMapType(this, context);
};
return MapType;
}(Type$1);
var DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
var INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);
var BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
var INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
var NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
var STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
var FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
var BinaryOperator = {};
BinaryOperator.Equals = 0;
BinaryOperator.NotEquals = 1;
BinaryOperator.Identical = 2;
BinaryOperator.NotIdentical = 3;
BinaryOperator.Minus = 4;
BinaryOperator.Plus = 5;
BinaryOperator.Divide = 6;
BinaryOperator.Multiply = 7;
BinaryOperator.Modulo = 8;
BinaryOperator.And = 9;
BinaryOperator.Or = 10;
BinaryOperator.Lower = 11;
BinaryOperator.LowerEquals = 12;
BinaryOperator.Bigger = 13;
BinaryOperator.BiggerEquals = 14;
BinaryOperator[BinaryOperator.Equals] = "Equals";
BinaryOperator[BinaryOperator.NotEquals] = "NotEquals";
BinaryOperator[BinaryOperator.Identical] = "Identical";
BinaryOperator[BinaryOperator.NotIdentical] = "NotIdentical";
BinaryOperator[BinaryOperator.Minus] = "Minus";
BinaryOperator[BinaryOperator.Plus] = "Plus";
BinaryOperator[BinaryOperator.Divide] = "Divide";
BinaryOperator[BinaryOperator.Multiply] = "Multiply";
BinaryOperator[BinaryOperator.Modulo] = "Modulo";
BinaryOperator[BinaryOperator.And] = "And";
BinaryOperator[BinaryOperator.Or] = "Or";
BinaryOperator[BinaryOperator.Lower] = "Lower";
BinaryOperator[BinaryOperator.LowerEquals] = "LowerEquals";
BinaryOperator[BinaryOperator.Bigger] = "Bigger";
BinaryOperator[BinaryOperator.BiggerEquals] = "BiggerEquals";
var Expression = function() {
function Expression(type, sourceSpan) {
this.type = type || null;
this.sourceSpan = sourceSpan || null;
}
Expression.prototype.visitExpression = function(visitor, context) {};
Expression.prototype.prop = function(name, sourceSpan) {
return new ReadPropExpr(this, name, null, sourceSpan);
};
Expression.prototype.key = function(index, type, sourceSpan) {
return new ReadKeyExpr(this, index, type, sourceSpan);
};
Expression.prototype.callMethod = function(name, params, sourceSpan) {
return new InvokeMethodExpr(this, name, params, null, sourceSpan);
};
Expression.prototype.callFn = function(params, sourceSpan) {
return new InvokeFunctionExpr(this, params, null, sourceSpan);
};
Expression.prototype.instantiate = function(params, type, sourceSpan) {
return new InstantiateExpr(this, params, type, sourceSpan);
};
Expression.prototype.conditional = function(trueCase, falseCase, sourceSpan) {
if (falseCase === void 0) {
falseCase = null;
}
return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);
};
Expression.prototype.equals = function(rhs, sourceSpan) {
return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);
};
Expression.prototype.notEquals = function(rhs, sourceSpan) {
return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);
};
Expression.prototype.identical = function(rhs, sourceSpan) {
return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);
};
Expression.prototype.notIdentical = function(rhs, sourceSpan) {
return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);
};
Expression.prototype.minus = function(rhs, sourceSpan) {
return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);
};
Expression.prototype.plus = function(rhs, sourceSpan) {
return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);
};
Expression.prototype.divide = function(rhs, sourceSpan) {
return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);
};
Expression.prototype.multiply = function(rhs, sourceSpan) {
return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);
};
Expression.prototype.modulo = function(rhs, sourceSpan) {
return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);
};
Expression.prototype.and = function(rhs, sourceSpan) {
return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);
};
Expression.prototype.or = function(rhs, sourceSpan) {
return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);
};
Expression.prototype.lower = function(rhs, sourceSpan) {
return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);
};
Expression.prototype.lowerEquals = function(rhs, sourceSpan) {
return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);
};
Expression.prototype.bigger = function(rhs, sourceSpan) {
return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);
};
Expression.prototype.biggerEquals = function(rhs, sourceSpan) {
return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);
};
Expression.prototype.isBlank = function(sourceSpan) {
return this.equals(TYPED_NULL_EXPR, sourceSpan);
};
Expression.prototype.cast = function(type, sourceSpan) {
return new CastExpr(this, type, sourceSpan);
};
Expression.prototype.toStmt = function() {
return new ExpressionStatement(this, null);
};
return Expression;
}();
var BuiltinVar = {};
BuiltinVar.This = 0;
BuiltinVar.Super = 1;
BuiltinVar.CatchError = 2;
BuiltinVar.CatchStack = 3;
BuiltinVar[BuiltinVar.This] = "This";
BuiltinVar[BuiltinVar.Super] = "Super";
BuiltinVar[BuiltinVar.CatchError] = "CatchError";
BuiltinVar[BuiltinVar.CatchStack] = "CatchStack";
var ReadVarExpr = function(_super) {
__extends(ReadVarExpr, _super);
function ReadVarExpr(name, type, sourceSpan) {
var _this = _super.call(this, type, sourceSpan) || this;
if (typeof name === "string") {
_this.name = name;
_this.builtin = null;
} else {
_this.name = null;
_this.builtin = name;
}
return _this;
}
ReadVarExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitReadVarExpr(this, context);
};
ReadVarExpr.prototype.set = function(value) {
if (!this.name) {
throw new Error("Built in variable " + this.builtin + " can not be assigned to.");
}
return new WriteVarExpr(this.name, value, null, this.sourceSpan);
};
return ReadVarExpr;
}(Expression);
var WriteVarExpr = function(_super) {
__extends(WriteVarExpr, _super);
function WriteVarExpr(name, value, type, sourceSpan) {
var _this = _super.call(this, type || value.type, sourceSpan) || this;
_this.name = name;
_this.value = value;
return _this;
}
WriteVarExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitWriteVarExpr(this, context);
};
WriteVarExpr.prototype.toDeclStmt = function(type, modifiers) {
return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);
};
return WriteVarExpr;
}(Expression);
var WriteKeyExpr = function(_super) {
__extends(WriteKeyExpr, _super);
function WriteKeyExpr(receiver, index, value, type, sourceSpan) {
var _this = _super.call(this, type || value.type, sourceSpan) || this;
_this.receiver = receiver;
_this.index = index;
_this.value = value;
return _this;
}
WriteKeyExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitWriteKeyExpr(this, context);
};
return WriteKeyExpr;
}(Expression);
var WritePropExpr = function(_super) {
__extends(WritePropExpr, _super);
function WritePropExpr(receiver, name, value, type, sourceSpan) {
var _this = _super.call(this, type || value.type, sourceSpan) || this;
_this.receiver = receiver;
_this.name = name;
_this.value = value;
return _this;
}
WritePropExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitWritePropExpr(this, context);
};
return WritePropExpr;
}(Expression);
var BuiltinMethod = {};
BuiltinMethod.ConcatArray = 0;
BuiltinMethod.SubscribeObservable = 1;
BuiltinMethod.Bind = 2;
BuiltinMethod[BuiltinMethod.ConcatArray] = "ConcatArray";
BuiltinMethod[BuiltinMethod.SubscribeObservable] = "SubscribeObservable";
BuiltinMethod[BuiltinMethod.Bind] = "Bind";
var InvokeMethodExpr = function(_super) {
__extends(InvokeMethodExpr, _super);
function InvokeMethodExpr(receiver, method, args, type, sourceSpan) {
var _this = _super.call(this, type, sourceSpan) || this;
_this.receiver = receiver;
_this.args = args;
if (typeof method === "string") {
_this.name = method;
_this.builtin = null;
} else {
_this.name = null;
_this.builtin = method;
}
return _this;
}
InvokeMethodExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitInvokeMethodExpr(this, context);
};
return InvokeMethodExpr;
}(Expression);
var InvokeFunctionExpr = function(_super) {
__extends(InvokeFunctionExpr, _super);
function InvokeFunctionExpr(fn, args, type, sourceSpan) {
var _this = _super.call(this, type, sourceSpan) || this;
_this.fn = fn;
_this.args = args;
return _this;
}
InvokeFunctionExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitInvokeFunctionExpr(this, context);
};
return InvokeFunctionExpr;
}(Expression);
var InstantiateExpr = function(_super) {
__extends(InstantiateExpr, _super);
function InstantiateExpr(classExpr, args, type, sourceSpan) {
var _this = _super.call(this, type, sourceSpan) || this;
_this.classExpr = classExpr;
_this.args = args;
return _this;
}
InstantiateExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitInstantiateExpr(this, context);
};
return InstantiateExpr;
}(Expression);
var LiteralExpr = function(_super) {
__extends(LiteralExpr, _super);
function LiteralExpr(value, type, sourceSpan) {
var _this = _super.call(this, type, sourceSpan) || this;
_this.value = value;
return _this;
}
LiteralExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitLiteralExpr(this, context);
};
return LiteralExpr;
}(Expression);
var ExternalExpr = function(_super) {
__extends(ExternalExpr, _super);
function ExternalExpr(value, type, typeParams, sourceSpan) {
if (typeParams === void 0) {
typeParams = null;
}
var _this = _super.call(this, type, sourceSpan) || this;
_this.value = value;
_this.typeParams = typeParams;
return _this;
}
ExternalExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitExternalExpr(this, context);
};
return ExternalExpr;
}(Expression);
var ConditionalExpr = function(_super) {
__extends(ConditionalExpr, _super);
function ConditionalExpr(condition, trueCase, falseCase, type, sourceSpan) {
if (falseCase === void 0) {
falseCase = null;
}
var _this = _super.call(this, type || trueCase.type, sourceSpan) || this;
_this.condition = condition;
_this.falseCase = falseCase;
_this.trueCase = trueCase;
return _this;
}
ConditionalExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitConditionalExpr(this, context);
};
return ConditionalExpr;
}(Expression);
var NotExpr = function(_super) {
__extends(NotExpr, _super);
function NotExpr(condition, sourceSpan) {
var _this = _super.call(this, BOOL_TYPE, sourceSpan) || this;
_this.condition = condition;
return _this;
}
NotExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitNotExpr(this, context);
};
return NotExpr;
}(Expression);
var CastExpr = function(_super) {
__extends(CastExpr, _super);
function CastExpr(value, type, sourceSpan) {
var _this = _super.call(this, type, sourceSpan) || this;
_this.value = value;
return _this;
}
CastExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitCastExpr(this, context);
};
return CastExpr;
}(Expression);
var FnParam = function() {
function FnParam(name, type) {
if (type === void 0) {
type = null;
}
this.name = name;
this.type = type;
}
return FnParam;
}();
var FunctionExpr = function(_super) {
__extends(FunctionExpr, _super);
function FunctionExpr(params, statements, type, sourceSpan) {
var _this = _super.call(this, type, sourceSpan) || this;
_this.params = params;
_this.statements = statements;
return _this;
}
FunctionExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitFunctionExpr(this, context);
};
FunctionExpr.prototype.toDeclStmt = function(name, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);
};
return FunctionExpr;
}(Expression);
var BinaryOperatorExpr = function(_super) {
__extends(BinaryOperatorExpr, _super);
function BinaryOperatorExpr(operator, lhs, rhs, type, sourceSpan) {
var _this = _super.call(this, type || lhs.type, sourceSpan) || this;
_this.operator = operator;
_this.rhs = rhs;
_this.lhs = lhs;
return _this;
}
BinaryOperatorExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitBinaryOperatorExpr(this, context);
};
return BinaryOperatorExpr;
}(Expression);
var ReadPropExpr = function(_super) {
__extends(ReadPropExpr, _super);
function ReadPropExpr(receiver, name, type, sourceSpan) {
var _this = _super.call(this, type, sourceSpan) || this;
_this.receiver = receiver;
_this.name = name;
return _this;
}
ReadPropExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitReadPropExpr(this, context);
};
ReadPropExpr.prototype.set = function(value) {
return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);
};
return ReadPropExpr;
}(Expression);
var ReadKeyExpr = function(_super) {
__extends(ReadKeyExpr, _super);
function ReadKeyExpr(receiver, index, type, sourceSpan) {
var _this = _super.call(this, type, sourceSpan) || this;
_this.receiver = receiver;
_this.index = index;
return _this;
}
ReadKeyExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitReadKeyExpr(this, context);
};
ReadKeyExpr.prototype.set = function(value) {
return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);
};
return ReadKeyExpr;
}(Expression);
var LiteralArrayExpr = function(_super) {
__extends(LiteralArrayExpr, _super);
function LiteralArrayExpr(entries, type, sourceSpan) {
var _this = _super.call(this, type, sourceSpan) || this;
_this.entries = entries;
return _this;
}
LiteralArrayExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitLiteralArrayExpr(this, context);
};
return LiteralArrayExpr;
}(Expression);
var LiteralMapEntry = function() {
function LiteralMapEntry(key, value, quoted) {
if (quoted === void 0) {
quoted = false;
}
this.key = key;
this.value = value;
this.quoted = quoted;
}
return LiteralMapEntry;
}();
var LiteralMapExpr = function(_super) {
__extends(LiteralMapExpr, _super);
function LiteralMapExpr(entries, type, sourceSpan) {
var _this = _super.call(this, type, sourceSpan) || this;
_this.entries = entries;
_this.valueType = null;
if (type) {
_this.valueType = type.valueType;
}
return _this;
}
LiteralMapExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitLiteralMapExpr(this, context);
};
return LiteralMapExpr;
}(Expression);
var CommaExpr = function(_super) {
__extends(CommaExpr, _super);
function CommaExpr(parts, sourceSpan) {
var _this = _super.call(this, parts[parts.length - 1].type, sourceSpan) || this;
_this.parts = parts;
return _this;
}
CommaExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitCommaExpr(this, context);
};
return CommaExpr;
}(Expression);
var THIS_EXPR = new ReadVarExpr(BuiltinVar.This, null, null);
var SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super, null, null);
var CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError, null, null);
var CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack, null, null);
var NULL_EXPR = new LiteralExpr(null, null, null);
var TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null);
var StmtModifier = {};
StmtModifier.Final = 0;
StmtModifier.Private = 1;
StmtModifier[StmtModifier.Final] = "Final";
StmtModifier[StmtModifier.Private] = "Private";
var Statement = function() {
function Statement(modifiers, sourceSpan) {
this.modifiers = modifiers || [];
this.sourceSpan = sourceSpan || null;
}
Statement.prototype.visitStatement = function(visitor, context) {};
Statement.prototype.hasModifier = function(modifier) {
return this.modifiers.indexOf(modifier) !== -1;
};
return Statement;
}();
var DeclareVarStmt = function(_super) {
__extends(DeclareVarStmt, _super);
function DeclareVarStmt(name, value, type, modifiers, sourceSpan) {
if (modifiers === void 0) {
modifiers = null;
}
var _this = _super.call(this, modifiers, sourceSpan) || this;
_this.name = name;
_this.value = value;
_this.type = type || value.type;
return _this;
}
DeclareVarStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitDeclareVarStmt(this, context);
};
return DeclareVarStmt;
}(Statement);
var DeclareFunctionStmt = function(_super) {
__extends(DeclareFunctionStmt, _super);
function DeclareFunctionStmt(name, params, statements, type, modifiers, sourceSpan) {
if (modifiers === void 0) {
modifiers = null;
}
var _this = _super.call(this, modifiers, sourceSpan) || this;
_this.name = name;
_this.params = params;
_this.statements = statements;
_this.type = type || null;
return _this;
}
DeclareFunctionStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitDeclareFunctionStmt(this, context);
};
return DeclareFunctionStmt;
}(Statement);
var ExpressionStatement = function(_super) {
__extends(ExpressionStatement, _super);
function ExpressionStatement(expr, sourceSpan) {
var _this = _super.call(this, null, sourceSpan) || this;
_this.expr = expr;
return _this;
}
ExpressionStatement.prototype.visitStatement = function(visitor, context) {
return visitor.visitExpressionStmt(this, context);
};
return ExpressionStatement;
}(Statement);
var ReturnStatement = function(_super) {
__extends(ReturnStatement, _super);
function ReturnStatement(value, sourceSpan) {
var _this = _super.call(this, null, sourceSpan) || this;
_this.value = value;
return _this;
}
ReturnStatement.prototype.visitStatement = function(visitor, context) {
return visitor.visitReturnStmt(this, context);
};
return ReturnStatement;
}(Statement);
var AbstractClassPart = function() {
function AbstractClassPart(type, modifiers) {
this.modifiers = modifiers;
if (!modifiers) {
this.modifiers = [];
}
this.type = type || null;
}
AbstractClassPart.prototype.hasModifier = function(modifier) {
return this.modifiers.indexOf(modifier) !== -1;
};
return AbstractClassPart;
}();
var ClassField = function(_super) {
__extends(ClassField, _super);
function ClassField(name, type, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
var _this = _super.call(this, type, modifiers) || this;
_this.name = name;
return _this;
}
return ClassField;
}(AbstractClassPart);
var ClassMethod = function(_super) {
__extends(ClassMethod, _super);
function ClassMethod(name, params, body, type, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
var _this = _super.call(this, type, modifiers) || this;
_this.name = name;
_this.params = params;
_this.body = body;
return _this;
}
return ClassMethod;
}(AbstractClassPart);
var ClassGetter = function(_super) {
__extends(ClassGetter, _super);
function ClassGetter(name, body, type, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
var _this = _super.call(this, type, modifiers) || this;
_this.name = name;
_this.body = body;
return _this;
}
return ClassGetter;
}(AbstractClassPart);
var ClassStmt = function(_super) {
__extends(ClassStmt, _super);
function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers, sourceSpan) {
if (modifiers === void 0) {
modifiers = null;
}
var _this = _super.call(this, modifiers, sourceSpan) || this;
_this.name = name;
_this.parent = parent;
_this.fields = fields;
_this.getters = getters;
_this.constructorMethod = constructorMethod;
_this.methods = methods;
return _this;
}
ClassStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitDeclareClassStmt(this, context);
};
return ClassStmt;
}(Statement);
var IfStmt = function(_super) {
__extends(IfStmt, _super);
function IfStmt(condition, trueCase, falseCase, sourceSpan) {
if (falseCase === void 0) {
falseCase = [];
}
var _this = _super.call(this, null, sourceSpan) || this;
_this.condition = condition;
_this.trueCase = trueCase;
_this.falseCase = falseCase;
return _this;
}
IfStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitIfStmt(this, context);
};
return IfStmt;
}(Statement);
var TryCatchStmt = function(_super) {
__extends(TryCatchStmt, _super);
function TryCatchStmt(bodyStmts, catchStmts, sourceSpan) {
var _this = _super.call(this, null, sourceSpan) || this;
_this.bodyStmts = bodyStmts;
_this.catchStmts = catchStmts;
return _this;
}
TryCatchStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitTryCatchStmt(this, context);
};
return TryCatchStmt;
}(Statement);
var ThrowStmt = function(_super) {
__extends(ThrowStmt, _super);
function ThrowStmt(error, sourceSpan) {
var _this = _super.call(this, null, sourceSpan) || this;
_this.error = error;
return _this;
}
ThrowStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitThrowStmt(this, context);
};
return ThrowStmt;
}(Statement);
var AstTransformer$1 = function() {
function AstTransformer$1() {}
AstTransformer$1.prototype.transformExpr = function(expr, context) {
return expr;
};
AstTransformer$1.prototype.transformStmt = function(stmt, context) {
return stmt;
};
AstTransformer$1.prototype.visitReadVarExpr = function(ast, context) {
return this.transformExpr(ast, context);
};
AstTransformer$1.prototype.visitWriteVarExpr = function(expr, context) {
return this.transformExpr(new WriteVarExpr(expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
};
AstTransformer$1.prototype.visitWriteKeyExpr = function(expr, context) {
return this.transformExpr(new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
};
AstTransformer$1.prototype.visitWritePropExpr = function(expr, context) {
return this.transformExpr(new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
};
AstTransformer$1.prototype.visitInvokeMethodExpr = function(ast, context) {
var method = ast.builtin || ast.name;
return this.transformExpr(new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
};
AstTransformer$1.prototype.visitInvokeFunctionExpr = function(ast, context) {
return this.transformExpr(new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
};
AstTransformer$1.prototype.visitInstantiateExpr = function(ast, context) {
return this.transformExpr(new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
};
AstTransformer$1.prototype.visitLiteralExpr = function(ast, context) {
return this.transformExpr(ast, context);
};
AstTransformer$1.prototype.visitExternalExpr = function(ast, context) {
return this.transformExpr(ast, context);
};
AstTransformer$1.prototype.visitConditionalExpr = function(ast, context) {
return this.transformExpr(new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context), ast.type, ast.sourceSpan), context);
};
AstTransformer$1.prototype.visitNotExpr = function(ast, context) {
return this.transformExpr(new NotExpr(ast.condition.visitExpression(this, context), ast.sourceSpan), context);
};
AstTransformer$1.prototype.visitCastExpr = function(ast, context) {
return this.transformExpr(new CastExpr(ast.value.visitExpression(this, context), ast.type, ast.sourceSpan), context);
};
AstTransformer$1.prototype.visitFunctionExpr = function(ast, context) {
return this.transformExpr(new FunctionExpr(ast.params, this.visitAllStatements(ast.statements, context), ast.type, ast.sourceSpan), context);
};
AstTransformer$1.prototype.visitBinaryOperatorExpr = function(ast, context) {
return this.transformExpr(new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type, ast.sourceSpan), context);
};
AstTransformer$1.prototype.visitReadPropExpr = function(ast, context) {
return this.transformExpr(new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type, ast.sourceSpan), context);
};
AstTransformer$1.prototype.visitReadKeyExpr = function(ast, context) {
return this.transformExpr(new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type, ast.sourceSpan), context);
};
AstTransformer$1.prototype.visitLiteralArrayExpr = function(ast, context) {
return this.transformExpr(new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context), ast.type, ast.sourceSpan), context);
};
AstTransformer$1.prototype.visitLiteralMapExpr = function(ast, context) {
var _this = this;
var entries = ast.entries.map(function(entry) {
return new LiteralMapEntry(entry.key, entry.value.visitExpression(_this, context), entry.quoted);
});
var mapType = new MapType(ast.valueType, null);
return this.transformExpr(new LiteralMapExpr(entries, mapType, ast.sourceSpan), context);
};
AstTransformer$1.prototype.visitCommaExpr = function(ast, context) {
return this.transformExpr(new CommaExpr(this.visitAllExpressions(ast.parts, context), ast.sourceSpan), context);
};
AstTransformer$1.prototype.visitAllExpressions = function(exprs, context) {
var _this = this;
return exprs.map(function(expr) {
return expr.visitExpression(_this, context);
});
};
AstTransformer$1.prototype.visitDeclareVarStmt = function(stmt, context) {
return this.transformStmt(new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers, stmt.sourceSpan), context);
};
AstTransformer$1.prototype.visitDeclareFunctionStmt = function(stmt, context) {
return this.transformStmt(new DeclareFunctionStmt(stmt.name, stmt.params, this.visitAllStatements(stmt.statements, context), stmt.type, stmt.modifiers, stmt.sourceSpan), context);
};
AstTransformer$1.prototype.visitExpressionStmt = function(stmt, context) {
return this.transformStmt(new ExpressionStatement(stmt.expr.visitExpression(this, context), stmt.sourceSpan), context);
};
AstTransformer$1.prototype.visitReturnStmt = function(stmt, context) {
return this.transformStmt(new ReturnStatement(stmt.value.visitExpression(this, context), stmt.sourceSpan), context);
};
AstTransformer$1.prototype.visitDeclareClassStmt = function(stmt, context) {
var _this = this;
var parent = stmt.parent.visitExpression(this, context);
var getters = stmt.getters.map(function(getter) {
return new ClassGetter(getter.name, _this.visitAllStatements(getter.body, context), getter.type, getter.modifiers);
});
var ctorMethod = stmt.constructorMethod && new ClassMethod(stmt.constructorMethod.name, stmt.constructorMethod.params, this.visitAllStatements(stmt.constructorMethod.body, context), stmt.constructorMethod.type, stmt.constructorMethod.modifiers);
var methods = stmt.methods.map(function(method) {
return new ClassMethod(method.name, method.params, _this.visitAllStatements(method.body, context), method.type, method.modifiers);
});
return this.transformStmt(new ClassStmt(stmt.name, parent, stmt.fields, getters, ctorMethod, methods, stmt.modifiers, stmt.sourceSpan), context);
};
AstTransformer$1.prototype.visitIfStmt = function(stmt, context) {
return this.transformStmt(new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt.sourceSpan), context);
};
AstTransformer$1.prototype.visitTryCatchStmt = function(stmt, context) {
return this.transformStmt(new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt.sourceSpan), context);
};
AstTransformer$1.prototype.visitThrowStmt = function(stmt, context) {
return this.transformStmt(new ThrowStmt(stmt.error.visitExpression(this, context), stmt.sourceSpan), context);
};
AstTransformer$1.prototype.visitCommentStmt = function(stmt, context) {
return this.transformStmt(stmt, context);
};
AstTransformer$1.prototype.visitAllStatements = function(stmts, context) {
var _this = this;
return stmts.map(function(stmt) {
return stmt.visitStatement(_this, context);
});
};
return AstTransformer$1;
}();
var RecursiveAstVisitor$1 = function() {
function RecursiveAstVisitor$1() {}
RecursiveAstVisitor$1.prototype.visitReadVarExpr = function(ast, context) {
return ast;
};
RecursiveAstVisitor$1.prototype.visitWriteVarExpr = function(expr, context) {
expr.value.visitExpression(this, context);
return expr;
};
RecursiveAstVisitor$1.prototype.visitWriteKeyExpr = function(expr, context) {
expr.receiver.visitExpression(this, context);
expr.index.visitExpression(this, context);
expr.value.visitExpression(this, context);
return expr;
};
RecursiveAstVisitor$1.prototype.visitWritePropExpr = function(expr, context) {
expr.receiver.visitExpression(this, context);
expr.value.visitExpression(this, context);
return expr;
};
RecursiveAstVisitor$1.prototype.visitInvokeMethodExpr = function(ast, context) {
ast.receiver.visitExpression(this, context);
this.visitAllExpressions(ast.args, context);
return ast;
};
RecursiveAstVisitor$1.prototype.visitInvokeFunctionExpr = function(ast, context) {
ast.fn.visitExpression(this, context);
this.visitAllExpressions(ast.args, context);
return ast;
};
RecursiveAstVisitor$1.prototype.visitInstantiateExpr = function(ast, context) {
ast.classExpr.visitExpression(this, context);
this.visitAllExpressions(ast.args, context);
return ast;
};
RecursiveAstVisitor$1.prototype.visitLiteralExpr = function(ast, context) {
return ast;
};
RecursiveAstVisitor$1.prototype.visitExternalExpr = function(ast, context) {
return ast;
};
RecursiveAstVisitor$1.prototype.visitConditionalExpr = function(ast, context) {
ast.condition.visitExpression(this, context);
ast.trueCase.visitExpression(this, context);
ast.falseCase.visitExpression(this, context);
return ast;
};
RecursiveAstVisitor$1.prototype.visitNotExpr = function(ast, context) {
ast.condition.visitExpression(this, context);
return ast;
};
RecursiveAstVisitor$1.prototype.visitCastExpr = function(ast, context) {
ast.value.visitExpression(this, context);
return ast;
};
RecursiveAstVisitor$1.prototype.visitFunctionExpr = function(ast, context) {
this.visitAllStatements(ast.statements, context);
return ast;
};
RecursiveAstVisitor$1.prototype.visitBinaryOperatorExpr = function(ast, context) {
ast.lhs.visitExpression(this, context);
ast.rhs.visitExpression(this, context);
return ast;
};
RecursiveAstVisitor$1.prototype.visitReadPropExpr = function(ast, context) {
ast.receiver.visitExpression(this, context);
return ast;
};
RecursiveAstVisitor$1.prototype.visitReadKeyExpr = function(ast, context) {
ast.receiver.visitExpression(this, context);
ast.index.visitExpression(this, context);
return ast;
};
RecursiveAstVisitor$1.prototype.visitLiteralArrayExpr = function(ast, context) {
this.visitAllExpressions(ast.entries, context);
return ast;
};
RecursiveAstVisitor$1.prototype.visitLiteralMapExpr = function(ast, context) {
var _this = this;
ast.entries.forEach(function(entry) {
return entry.value.visitExpression(_this, context);
});
return ast;
};
RecursiveAstVisitor$1.prototype.visitCommaExpr = function(ast, context) {
this.visitAllExpressions(ast.parts, context);
};
RecursiveAstVisitor$1.prototype.visitAllExpressions = function(exprs, context) {
var _this = this;
exprs.forEach(function(expr) {
return expr.visitExpression(_this, context);
});
};
RecursiveAstVisitor$1.prototype.visitDeclareVarStmt = function(stmt, context) {
stmt.value.visitExpression(this, context);
return stmt;
};
RecursiveAstVisitor$1.prototype.visitDeclareFunctionStmt = function(stmt, context) {
this.visitAllStatements(stmt.statements, context);
return stmt;
};
RecursiveAstVisitor$1.prototype.visitExpressionStmt = function(stmt, context) {
stmt.expr.visitExpression(this, context);
return stmt;
};
RecursiveAstVisitor$1.prototype.visitReturnStmt = function(stmt, context) {
stmt.value.visitExpression(this, context);
return stmt;
};
RecursiveAstVisitor$1.prototype.visitDeclareClassStmt = function(stmt, context) {
var _this = this;
stmt.parent.visitExpression(this, context);
stmt.getters.forEach(function(getter) {
return _this.visitAllStatements(getter.body, context);
});
if (stmt.constructorMethod) {
this.visitAllStatements(stmt.constructorMethod.body, context);
}
stmt.methods.forEach(function(method) {
return _this.visitAllStatements(method.body, context);
});
return stmt;
};
RecursiveAstVisitor$1.prototype.visitIfStmt = function(stmt, context) {
stmt.condition.visitExpression(this, context);
this.visitAllStatements(stmt.trueCase, context);
this.visitAllStatements(stmt.falseCase, context);
return stmt;
};
RecursiveAstVisitor$1.prototype.visitTryCatchStmt = function(stmt, context) {
this.visitAllStatements(stmt.bodyStmts, context);
this.visitAllStatements(stmt.catchStmts, context);
return stmt;
};
RecursiveAstVisitor$1.prototype.visitThrowStmt = function(stmt, context) {
stmt.error.visitExpression(this, context);
return stmt;
};
RecursiveAstVisitor$1.prototype.visitCommentStmt = function(stmt, context) {
return stmt;
};
RecursiveAstVisitor$1.prototype.visitAllStatements = function(stmts, context) {
var _this = this;
stmts.forEach(function(stmt) {
return stmt.visitStatement(_this, context);
});
};
return RecursiveAstVisitor$1;
}();
function findReadVarNames(stmts) {
var visitor = new _ReadVarVisitor();
visitor.visitAllStatements(stmts, null);
return visitor.varNames;
}
var _ReadVarVisitor = function(_super) {
__extends(_ReadVarVisitor, _super);
function _ReadVarVisitor() {
var _this = _super.apply(this, arguments) || this;
_this.varNames = new Set();
return _this;
}
_ReadVarVisitor.prototype.visitDeclareFunctionStmt = function(stmt, context) {
return stmt;
};
_ReadVarVisitor.prototype.visitDeclareClassStmt = function(stmt, context) {
return stmt;
};
_ReadVarVisitor.prototype.visitReadVarExpr = function(ast, context) {
if (ast.name) {
this.varNames.add(ast.name);
}
return null;
};
return _ReadVarVisitor;
}(RecursiveAstVisitor$1);
function applySourceSpanToStatementIfNeeded(stmt, sourceSpan) {
if (!sourceSpan) {
return stmt;
}
var transformer = new _ApplySourceSpanTransformer(sourceSpan);
return stmt.visitStatement(transformer, null);
}
function applySourceSpanToExpressionIfNeeded(expr, sourceSpan) {
if (!sourceSpan) {
return expr;
}
var transformer = new _ApplySourceSpanTransformer(sourceSpan);
return expr.visitExpression(transformer, null);
}
var _ApplySourceSpanTransformer = function(_super) {
__extends(_ApplySourceSpanTransformer, _super);
function _ApplySourceSpanTransformer(sourceSpan) {
var _this = _super.call(this) || this;
_this.sourceSpan = sourceSpan;
return _this;
}
_ApplySourceSpanTransformer.prototype._clone = function(obj) {
var clone = Object.create(obj.constructor.prototype);
for (var prop in obj) {
clone[prop] = obj[prop];
}
return clone;
};
_ApplySourceSpanTransformer.prototype.transformExpr = function(expr, context) {
if (!expr.sourceSpan) {
expr = this._clone(expr);
expr.sourceSpan = this.sourceSpan;
}
return expr;
};
_ApplySourceSpanTransformer.prototype.transformStmt = function(stmt, context) {
if (!stmt.sourceSpan) {
stmt = this._clone(stmt);
stmt.sourceSpan = this.sourceSpan;
}
return stmt;
};
return _ApplySourceSpanTransformer;
}(AstTransformer$1);
function variable(name, type, sourceSpan) {
return new ReadVarExpr(name, type, sourceSpan);
}
function importExpr(id, typeParams, sourceSpan) {
if (typeParams === void 0) {
typeParams = null;
}
return new ExternalExpr(id, null, typeParams, sourceSpan);
}
function importType(id, typeParams, typeModifiers) {
if (typeParams === void 0) {
typeParams = null;
}
if (typeModifiers === void 0) {
typeModifiers = null;
}
return id != null ? expressionType(importExpr(id, typeParams, null), typeModifiers) : null;
}
function expressionType(expr, typeModifiers) {
if (typeModifiers === void 0) {
typeModifiers = null;
}
return expr != null ? new ExpressionType(expr, typeModifiers) : null;
}
function literalArr(values, type, sourceSpan) {
return new LiteralArrayExpr(values, type, sourceSpan);
}
function literalMap(values, type, quoted) {
if (type === void 0) {
type = null;
}
if (quoted === void 0) {
quoted = false;
}
return new LiteralMapExpr(values.map(function(entry) {
return new LiteralMapEntry(entry[0], entry[1], quoted);
}), type, null);
}
function not(expr, sourceSpan) {
return new NotExpr(expr, sourceSpan);
}
function fn(params, body, type, sourceSpan) {
return new FunctionExpr(params, body, type, sourceSpan);
}
function literal(value, type, sourceSpan) {
return new LiteralExpr(value, type, sourceSpan);
}
function createClassStmt(config) {
var parentArgs = config.parentArgs || [];
var superCtorStmts = config.parent ? [ SUPER_EXPR.callFn(parentArgs).toStmt() ] : [];
var builder = concatClassBuilderParts(Array.isArray(config.builders) ? config.builders : [ config.builders ]);
var ctor = new ClassMethod(null, config.ctorParams || [], superCtorStmts.concat(builder.ctorStmts));
return new ClassStmt(config.name, config.parent || null, builder.fields, builder.getters, ctor, builder.methods, config.modifiers || [], config.sourceSpan);
}
function concatClassBuilderParts(builders) {
return {
fields: [].concat.apply([], builders.map(function(builder) {
return builder.fields || [];
})),
methods: [].concat.apply([], builders.map(function(builder) {
return builder.methods || [];
})),
getters: [].concat.apply([], builders.map(function(builder) {
return builder.getters || [];
})),
ctorStmts: [].concat.apply([], builders.map(function(builder) {
return builder.ctorStmts || [];
}))
};
}
var QUOTED_KEYS = "$quoted$";
function convertValueToOutputAst(value, type) {
if (type === void 0) {
type = null;
}
return visitValue(value, new _ValueOutputAstTransformer(), type);
}
var _ValueOutputAstTransformer = function() {
function _ValueOutputAstTransformer() {}
_ValueOutputAstTransformer.prototype.visitArray = function(arr, type) {
var _this = this;
return literalArr(arr.map(function(value) {
return visitValue(value, _this, null);
}), type);
};
_ValueOutputAstTransformer.prototype.visitStringMap = function(map, type) {
var _this = this;
var entries = [];
var quotedSet = new Set(map && map[QUOTED_KEYS]);
Object.keys(map).forEach(function(key) {
entries.push(new LiteralMapEntry(key, visitValue(map[key], _this, null), quotedSet.has(key)));
});
return new LiteralMapExpr(entries, type);
};
_ValueOutputAstTransformer.prototype.visitPrimitive = function(value, type) {
return literal(value, type);
};
_ValueOutputAstTransformer.prototype.visitOther = function(value, type) {
if (value instanceof Expression) {
return value;
} else {
return importExpr({
reference: value
});
}
};
return _ValueOutputAstTransformer;
}();
var ComponentFactoryDependency = function() {
function ComponentFactoryDependency(compType) {
this.compType = compType;
}
return ComponentFactoryDependency;
}();
var NgModuleCompileResult = function() {
function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
this.statements = statements;
this.ngModuleFactoryVar = ngModuleFactoryVar;
this.dependencies = dependencies;
}
return NgModuleCompileResult;
}();
var NgModuleCompiler = function() {
function NgModuleCompiler() {}
NgModuleCompiler.prototype.compile = function(ngModuleMeta, extraProviders) {
var sourceSpan = typeSourceSpan("NgModule", ngModuleMeta.type);
var deps = [];
var bootstrapComponentFactories = [];
var entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function(entryComponent) {
if (ngModuleMeta.bootstrapComponents.some(function(id) {
return id.reference === entryComponent.componentType;
})) {
bootstrapComponentFactories.push({
reference: entryComponent.componentFactory
});
}
deps.push(new ComponentFactoryDependency(entryComponent.componentType));
return {
reference: entryComponent.componentFactory
};
});
var builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);
var providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
providerParser.parse().forEach(function(provider) {
return builder.addProvider(provider);
});
var injectorClass = builder.build();
var ngModuleFactoryVar = identifierName(ngModuleMeta.type) + "NgFactory";
var ngModuleFactoryStmt = variable(ngModuleFactoryVar).set(importExpr(createIdentifier(Identifiers.NgModuleFactory)).instantiate([ variable(injectorClass.name), importExpr(ngModuleMeta.type) ], importType(createIdentifier(Identifiers.NgModuleFactory), [ importType(ngModuleMeta.type) ], [ TypeModifier.Const ]))).toDeclStmt(null, [ StmtModifier.Final ]);
var stmts = [ injectorClass, ngModuleFactoryStmt ];
if (ngModuleMeta.id) {
var registerFactoryStmt = importExpr(createIdentifier(Identifiers.RegisterModuleFactoryFn)).callFn([ literal(ngModuleMeta.id), variable(ngModuleFactoryVar) ]).toStmt();
stmts.push(registerFactoryStmt);
}
return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps);
};
return NgModuleCompiler;
}();
NgModuleCompiler.decorators = [ {
type: CompilerInjectable
} ];
NgModuleCompiler.ctorParameters = function() {
return [];
};
var _InjectorBuilder = function() {
function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
this._ngModuleMeta = _ngModuleMeta;
this._entryComponentFactories = _entryComponentFactories;
this._bootstrapComponentFactories = _bootstrapComponentFactories;
this._sourceSpan = _sourceSpan;
this.fields = [];
this.getters = [];
this.methods = [];
this.ctorStmts = [];
this._lazyProps = new Map();
this._tokens = [];
this._instances = new Map();
this._createStmts = [];
this._destroyStmts = [];
}
_InjectorBuilder.prototype.addProvider = function(resolvedProvider) {
var _this = this;
var providerValueExpressions = resolvedProvider.providers.map(function(provider) {
return _this._getProviderValue(provider);
});
var propName = "_" + tokenName(resolvedProvider.token) + "_" + this._instances.size;
var instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
if (resolvedProvider.lifecycleHooks.indexOf(_angular_core.ɵLifecycleHooks.OnDestroy) !== -1) {
var callNgOnDestroy = instance.callMethod("ngOnDestroy", []);
if (!resolvedProvider.eager) {
callNgOnDestroy = this._lazyProps.get(instance.name).and(callNgOnDestroy);
}
this._destroyStmts.push(callNgOnDestroy.toStmt());
}
this._tokens.push(resolvedProvider.token);
this._instances.set(tokenReference(resolvedProvider.token), instance);
};
_InjectorBuilder.prototype.build = function() {
var _this = this;
var getMethodStmts = this._tokens.map(function(token) {
var providerExpr = _this._instances.get(tokenReference(token));
return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(token)), [ new ReturnStatement(providerExpr) ]);
});
var methods = [ new ClassMethod("createInternal", [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)), new ClassMethod("getInternal", [ new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE) ], getMethodStmts.concat([ new ReturnStatement(InjectMethodVars.notFoundResult) ]), DYNAMIC_TYPE), new ClassMethod("destroyInternal", [], this._destroyStmts) ];
var parentArgs = [ variable(InjectorProps.parent.name), literalArr(this._entryComponentFactories.map(function(componentFactory) {
return importExpr(componentFactory);
})), literalArr(this._bootstrapComponentFactories.map(function(componentFactory) {
return importExpr(componentFactory);
})) ];
var injClassName = identifierName(this._ngModuleMeta.type) + "Injector";
return createClassStmt({
name: injClassName,
ctorParams: [ new FnParam(InjectorProps.parent.name, importType(createIdentifier(Identifiers.Injector))) ],
parent: importExpr(createIdentifier(Identifiers.NgModuleInjector), [ importType(this._ngModuleMeta.type) ]),
parentArgs: parentArgs,
builders: [ {
methods: methods
}, this ]
});
};
_InjectorBuilder.prototype._getProviderValue = function(provider) {
var _this = this;
var result;
if (provider.useExisting != null) {
result = this._getDependency({
token: provider.useExisting
});
} else if (provider.useFactory != null) {
var deps = provider.deps || provider.useFactory.diDeps;
var depsExpr = deps.map(function(dep) {
return _this._getDependency(dep);
});
result = importExpr(provider.useFactory).callFn(depsExpr);
} else if (provider.useClass != null) {
var deps = provider.deps || provider.useClass.diDeps;
var depsExpr = deps.map(function(dep) {
return _this._getDependency(dep);
});
result = importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
} else {
result = convertValueToOutputAst(provider.useValue);
}
return result;
};
_InjectorBuilder.prototype._createProviderProperty = function(propName, provider, providerValueExpressions, isMulti, isEager) {
var resolvedProviderValueExpr;
var type;
if (isMulti) {
resolvedProviderValueExpr = literalArr(providerValueExpressions);
type = new ArrayType(DYNAMIC_TYPE);
} else {
resolvedProviderValueExpr = providerValueExpressions[0];
type = providerValueExpressions[0].type;
}
if (!type) {
type = DYNAMIC_TYPE;
}
if (isEager) {
this.fields.push(new ClassField(propName, type));
this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
} else {
var internalFieldProp = THIS_EXPR.prop("_" + propName);
this.fields.push(new ClassField(internalFieldProp.name, type));
var getterStmts = [ new IfStmt(internalFieldProp.isBlank(), [ internalFieldProp.set(resolvedProviderValueExpr).toStmt() ]), new ReturnStatement(internalFieldProp) ];
this.getters.push(new ClassGetter(propName, getterStmts, type));
this._lazyProps.set(propName, internalFieldProp);
}
return THIS_EXPR.prop(propName);
};
_InjectorBuilder.prototype._getDependency = function(dep) {
var result = null;
if (dep.isValue) {
result = literal(dep.value);
}
if (!dep.isSkipSelf) {
if (dep.token) {
if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector)) {
result = THIS_EXPR;
} else if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver)) {
result = THIS_EXPR.prop("componentFactoryResolver");
}
}
if (!result) {
result = this._instances.get(tokenReference(dep.token));
}
}
if (!result) {
var args = [ createDiTokenExpression(dep.token) ];
if (dep.isOptional) {
args.push(NULL_EXPR);
}
result = InjectorProps.parent.callMethod("get", args);
}
return result;
};
return _InjectorBuilder;
}();
function createDiTokenExpression(token) {
if (token.value != null) {
return literal(token.value);
} else {
return importExpr(token.identifier);
}
}
var InjectorProps = function() {
function InjectorProps() {}
return InjectorProps;
}();
InjectorProps.parent = THIS_EXPR.prop("parent");
var InjectMethodVars = function() {
function InjectMethodVars() {}
return InjectMethodVars;
}();
InjectMethodVars.token = variable("token");
InjectMethodVars.notFoundResult = variable("notFoundResult");
var VERSION$1 = 3;
var JS_B64_PREFIX = "# sourceMappingURL=data:application/json;base64,";
var SourceMapGenerator = function() {
function SourceMapGenerator(file) {
if (file === void 0) {
file = null;
}
this.file = file;
this.sourcesContent = new Map();
this.lines = [];
this.lastCol0 = 0;
this.hasMappings = false;
}
SourceMapGenerator.prototype.addSource = function(url, content) {
if (content === void 0) {
content = null;
}
if (!this.sourcesContent.has(url)) {
this.sourcesContent.set(url, content);
}
return this;
};
SourceMapGenerator.prototype.addLine = function() {
this.lines.push([]);
this.lastCol0 = 0;
return this;
};
SourceMapGenerator.prototype.addMapping = function(col0, sourceUrl, sourceLine0, sourceCol0) {
if (!this.currentLine) {
throw new Error("A line must be added before mappings can be added");
}
if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {
throw new Error('Unknown source file "' + sourceUrl + '"');
}
if (col0 == null) {
throw new Error("The column in the generated code must be provided");
}
if (col0 < this.lastCol0) {
throw new Error("Mapping should be added in output order");
}
if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {
throw new Error("The source location must be provided when a source url is provided");
}
this.hasMappings = true;
this.lastCol0 = col0;
this.currentLine.push({
col0: col0,
sourceUrl: sourceUrl,
sourceLine0: sourceLine0,
sourceCol0: sourceCol0
});
return this;
};
Object.defineProperty(SourceMapGenerator.prototype, "currentLine", {
get: function() {
return this.lines.slice(-1)[0];
},
enumerable: true,
configurable: true
});
SourceMapGenerator.prototype.toJSON = function() {
var _this = this;
if (!this.hasMappings) {
return null;
}
var sourcesIndex = new Map();
var sources = [];
var sourcesContent = [];
Array.from(this.sourcesContent.keys()).forEach(function(url, i) {
sourcesIndex.set(url, i);
sources.push(url);
sourcesContent.push(_this.sourcesContent.get(url) || null);
});
var mappings = "";
var lastCol0 = 0;
var lastSourceIndex = 0;
var lastSourceLine0 = 0;
var lastSourceCol0 = 0;
this.lines.forEach(function(segments) {
lastCol0 = 0;
mappings += segments.map(function(segment) {
var segAsStr = toBase64VLQ(segment.col0 - lastCol0);
lastCol0 = segment.col0;
if (segment.sourceUrl != null) {
segAsStr += toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);
lastSourceIndex = sourcesIndex.get(segment.sourceUrl);
segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);
lastSourceLine0 = segment.sourceLine0;
segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);
lastSourceCol0 = segment.sourceCol0;
}
return segAsStr;
}).join(",");
mappings += ";";
});
mappings = mappings.slice(0, -1);
return {
file: this.file || "",
version: VERSION$1,
sourceRoot: "",
sources: sources,
sourcesContent: sourcesContent,
mappings: mappings
};
};
SourceMapGenerator.prototype.toJsComment = function() {
return this.hasMappings ? "//" + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) : "";
};
return SourceMapGenerator;
}();
function toBase64String(value) {
var b64 = "";
value = utf8Encode(value);
for (var i = 0; i < value.length; ) {
var i1 = value.charCodeAt(i++);
var i2 = value.charCodeAt(i++);
var i3 = value.charCodeAt(i++);
b64 += toBase64Digit(i1 >> 2);
b64 += toBase64Digit((i1 & 3) << 4 | (isNaN(i2) ? 0 : i2 >> 4));
b64 += isNaN(i2) ? "=" : toBase64Digit((i2 & 15) << 2 | i3 >> 6);
b64 += isNaN(i2) || isNaN(i3) ? "=" : toBase64Digit(i3 & 63);
}
return b64;
}
function toBase64VLQ(value) {
value = value < 0 ? (-value << 1) + 1 : value << 1;
var out = "";
do {
var digit = value & 31;
value = value >> 5;
if (value > 0) {
digit = digit | 32;
}
out += toBase64Digit(digit);
} while (value > 0);
return out;
}
var B64_DIGITS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
function toBase64Digit(value) {
if (value < 0 || value >= 64) {
throw new Error("Can only encode value in the range [0, 63]");
}
return B64_DIGITS[value];
}
var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
var _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
var _INDENT_WITH = "  ";
var CATCH_ERROR_VAR$1 = variable("error", null, null);
var CATCH_STACK_VAR$1 = variable("stack", null, null);
var _EmittedLine = function() {
function _EmittedLine(indent) {
this.indent = indent;
this.parts = [];
this.srcSpans = [];
}
return _EmittedLine;
}();
var EmitterVisitorContext = function() {
function EmitterVisitorContext(_exportedVars, _indent) {
this._exportedVars = _exportedVars;
this._indent = _indent;
this._classes = [];
this._lines = [ new _EmittedLine(_indent) ];
}
EmitterVisitorContext.createRoot = function(exportedVars) {
return new EmitterVisitorContext(exportedVars, 0);
};
Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
get: function() {
return this._lines[this._lines.length - 1];
},
enumerable: true,
configurable: true
});
EmitterVisitorContext.prototype.isExportedVar = function(varName) {
return this._exportedVars.indexOf(varName) !== -1;
};
EmitterVisitorContext.prototype.println = function(from, lastPart) {
if (lastPart === void 0) {
lastPart = "";
}
this.print(from || null, lastPart, true);
};
EmitterVisitorContext.prototype.lineIsEmpty = function() {
return this._currentLine.parts.length === 0;
};
EmitterVisitorContext.prototype.print = function(from, part, newLine) {
if (newLine === void 0) {
newLine = false;
}
if (part.length > 0) {
this._currentLine.parts.push(part);
this._currentLine.srcSpans.push(from && from.sourceSpan || null);
}
if (newLine) {
this._lines.push(new _EmittedLine(this._indent));
}
};
EmitterVisitorContext.prototype.removeEmptyLastLine = function() {
if (this.lineIsEmpty()) {
this._lines.pop();
}
};
EmitterVisitorContext.prototype.incIndent = function() {
this._indent++;
this._currentLine.indent = this._indent;
};
EmitterVisitorContext.prototype.decIndent = function() {
this._indent--;
this._currentLine.indent = this._indent;
};
EmitterVisitorContext.prototype.pushClass = function(clazz) {
this._classes.push(clazz);
};
EmitterVisitorContext.prototype.popClass = function() {
return this._classes.pop();
};
Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
get: function() {
return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
},
enumerable: true,
configurable: true
});
EmitterVisitorContext.prototype.toSource = function() {
return this.sourceLines.map(function(l) {
return l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join("") : "";
}).join("\n");
};
EmitterVisitorContext.prototype.toSourceMapGenerator = function(sourceFilePath, genFilePath, startsAtLine) {
if (startsAtLine === void 0) {
startsAtLine = 0;
}
var map = new SourceMapGenerator(genFilePath);
var firstOffsetMapped = false;
var mapFirstOffsetIfNeeded = function() {
if (!firstOffsetMapped) {
map.addSource(sourceFilePath, " ").addMapping(0, sourceFilePath, 0, 0);
firstOffsetMapped = true;
}
};
for (var i = 0; i < startsAtLine; i++) {
map.addLine();
mapFirstOffsetIfNeeded();
}
this.sourceLines.forEach(function(line, lineIdx) {
map.addLine();
var spans = line.srcSpans;
var parts = line.parts;
var col0 = line.indent * _INDENT_WITH.length;
var spanIdx = 0;
while (spanIdx < spans.length && !spans[spanIdx]) {
col0 += parts[spanIdx].length;
spanIdx++;
}
if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {
firstOffsetMapped = true;
} else {
mapFirstOffsetIfNeeded();
}
while (spanIdx < spans.length) {
var span = spans[spanIdx];
var source = span.start.file;
var sourceLine = span.start.line;
var sourceCol = span.start.col;
map.addSource(source.url, source.content).addMapping(col0, source.url, sourceLine, sourceCol);
col0 += parts[spanIdx].length;
spanIdx++;
while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {
col0 += parts[spanIdx].length;
spanIdx++;
}
}
});
return map;
};
Object.defineProperty(EmitterVisitorContext.prototype, "sourceLines", {
get: function() {
if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {
return this._lines.slice(0, -1);
}
return this._lines;
},
enumerable: true,
configurable: true
});
return EmitterVisitorContext;
}();
var AbstractEmitterVisitor = function() {
function AbstractEmitterVisitor(_escapeDollarInStrings) {
this._escapeDollarInStrings = _escapeDollarInStrings;
}
AbstractEmitterVisitor.prototype.visitExpressionStmt = function(stmt, ctx) {
stmt.expr.visitExpression(this, ctx);
ctx.println(stmt, ";");
return null;
};
AbstractEmitterVisitor.prototype.visitReturnStmt = function(stmt, ctx) {
ctx.print(stmt, "return ");
stmt.value.visitExpression(this, ctx);
ctx.println(stmt, ";");
return null;
};
AbstractEmitterVisitor.prototype.visitCastExpr = function(ast, context) {};
AbstractEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {};
AbstractEmitterVisitor.prototype.visitIfStmt = function(stmt, ctx) {
ctx.print(stmt, "if (");
stmt.condition.visitExpression(this, ctx);
ctx.print(stmt, ") {");
var hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;
if (stmt.trueCase.length <= 1 && !hasElseCase) {
ctx.print(stmt, " ");
this.visitAllStatements(stmt.trueCase, ctx);
ctx.removeEmptyLastLine();
ctx.print(stmt, " ");
} else {
ctx.println();
ctx.incIndent();
this.visitAllStatements(stmt.trueCase, ctx);
ctx.decIndent();
if (hasElseCase) {
ctx.println(stmt, "} else {");
ctx.incIndent();
this.visitAllStatements(stmt.falseCase, ctx);
ctx.decIndent();
}
}
ctx.println(stmt, "}");
return null;
};
AbstractEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {};
AbstractEmitterVisitor.prototype.visitThrowStmt = function(stmt, ctx) {
ctx.print(stmt, "throw ");
stmt.error.visitExpression(this, ctx);
ctx.println(stmt, ";");
return null;
};
AbstractEmitterVisitor.prototype.visitCommentStmt = function(stmt, ctx) {
var lines = stmt.comment.split("\n");
lines.forEach(function(line) {
ctx.println(stmt, "// " + line);
});
return null;
};
AbstractEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {};
AbstractEmitterVisitor.prototype.visitWriteVarExpr = function(expr, ctx) {
var lineWasEmpty = ctx.lineIsEmpty();
if (!lineWasEmpty) {
ctx.print(expr, "(");
}
ctx.print(expr, expr.name + " = ");
expr.value.visitExpression(this, ctx);
if (!lineWasEmpty) {
ctx.print(expr, ")");
}
return null;
};
AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function(expr, ctx) {
var lineWasEmpty = ctx.lineIsEmpty();
if (!lineWasEmpty) {
ctx.print(expr, "(");
}
expr.receiver.visitExpression(this, ctx);
ctx.print(expr, "[");
expr.index.visitExpression(this, ctx);
ctx.print(expr, "] = ");
expr.value.visitExpression(this, ctx);
if (!lineWasEmpty) {
ctx.print(expr, ")");
}
return null;
};
AbstractEmitterVisitor.prototype.visitWritePropExpr = function(expr, ctx) {
var lineWasEmpty = ctx.lineIsEmpty();
if (!lineWasEmpty) {
ctx.print(expr, "(");
}
expr.receiver.visitExpression(this, ctx);
ctx.print(expr, "." + expr.name + " = ");
expr.value.visitExpression(this, ctx);
if (!lineWasEmpty) {
ctx.print(expr, ")");
}
return null;
};
AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function(expr, ctx) {
expr.receiver.visitExpression(this, ctx);
var name = expr.name;
if (expr.builtin != null) {
name = this.getBuiltinMethodName(expr.builtin);
if (name == null) {
return null;
}
}
ctx.print(expr, "." + name + "(");
this.visitAllExpressions(expr.args, ctx, ",");
ctx.print(expr, ")");
return null;
};
AbstractEmitterVisitor.prototype.getBuiltinMethodName = function(method) {};
AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
expr.fn.visitExpression(this, ctx);
ctx.print(expr, "(");
this.visitAllExpressions(expr.args, ctx, ",");
ctx.print(expr, ")");
return null;
};
AbstractEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
var varName = ast.name;
if (ast.builtin != null) {
switch (ast.builtin) {
case BuiltinVar.Super:
varName = "super";
break;

case BuiltinVar.This:
varName = "this";
break;

case BuiltinVar.CatchError:
varName = CATCH_ERROR_VAR$1.name;
break;

case BuiltinVar.CatchStack:
varName = CATCH_STACK_VAR$1.name;
break;

default:
throw new Error("Unknown builtin variable " + ast.builtin);
}
}
ctx.print(ast, varName);
return null;
};
AbstractEmitterVisitor.prototype.visitInstantiateExpr = function(ast, ctx) {
ctx.print(ast, "new ");
ast.classExpr.visitExpression(this, ctx);
ctx.print(ast, "(");
this.visitAllExpressions(ast.args, ctx, ",");
ctx.print(ast, ")");
return null;
};
AbstractEmitterVisitor.prototype.visitLiteralExpr = function(ast, ctx) {
var value = ast.value;
if (typeof value === "string") {
ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));
} else {
ctx.print(ast, "" + value);
}
return null;
};
AbstractEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {};
AbstractEmitterVisitor.prototype.visitConditionalExpr = function(ast, ctx) {
ctx.print(ast, "(");
ast.condition.visitExpression(this, ctx);
ctx.print(ast, "? ");
ast.trueCase.visitExpression(this, ctx);
ctx.print(ast, ": ");
ast.falseCase.visitExpression(this, ctx);
ctx.print(ast, ")");
return null;
};
AbstractEmitterVisitor.prototype.visitNotExpr = function(ast, ctx) {
ctx.print(ast, "!");
ast.condition.visitExpression(this, ctx);
return null;
};
AbstractEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {};
AbstractEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, context) {};
AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
var opStr;
switch (ast.operator) {
case BinaryOperator.Equals:
opStr = "==";
break;

case BinaryOperator.Identical:
opStr = "===";
break;

case BinaryOperator.NotEquals:
opStr = "!=";
break;

case BinaryOperator.NotIdentical:
opStr = "!==";
break;

case BinaryOperator.And:
opStr = "&&";
break;

case BinaryOperator.Or:
opStr = "||";
break;

case BinaryOperator.Plus:
opStr = "+";
break;

case BinaryOperator.Minus:
opStr = "-";
break;

case BinaryOperator.Divide:
opStr = "/";
break;

case BinaryOperator.Multiply:
opStr = "*";
break;

case BinaryOperator.Modulo:
opStr = "%";
break;

case BinaryOperator.Lower:
opStr = "<";
break;

case BinaryOperator.LowerEquals:
opStr = "<=";
break;

case BinaryOperator.Bigger:
opStr = ">";
break;

case BinaryOperator.BiggerEquals:
opStr = ">=";
break;

default:
throw new Error("Unknown operator " + ast.operator);
}
ctx.print(ast, "(");
ast.lhs.visitExpression(this, ctx);
ctx.print(ast, " " + opStr + " ");
ast.rhs.visitExpression(this, ctx);
ctx.print(ast, ")");
return null;
};
AbstractEmitterVisitor.prototype.visitReadPropExpr = function(ast, ctx) {
ast.receiver.visitExpression(this, ctx);
ctx.print(ast, ".");
ctx.print(ast, ast.name);
return null;
};
AbstractEmitterVisitor.prototype.visitReadKeyExpr = function(ast, ctx) {
ast.receiver.visitExpression(this, ctx);
ctx.print(ast, "[");
ast.index.visitExpression(this, ctx);
ctx.print(ast, "]");
return null;
};
AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function(ast, ctx) {
var useNewLine = ast.entries.length > 1;
ctx.print(ast, "[", useNewLine);
ctx.incIndent();
this.visitAllExpressions(ast.entries, ctx, ",", useNewLine);
ctx.decIndent();
ctx.print(ast, "]", useNewLine);
return null;
};
AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function(ast, ctx) {
var _this = this;
var useNewLine = ast.entries.length > 1;
ctx.print(ast, "{", useNewLine);
ctx.incIndent();
this.visitAllObjects(function(entry) {
ctx.print(ast, escapeIdentifier(entry.key, _this._escapeDollarInStrings, entry.quoted) + ": ");
entry.value.visitExpression(_this, ctx);
}, ast.entries, ctx, ",", useNewLine);
ctx.decIndent();
ctx.print(ast, "}", useNewLine);
return null;
};
AbstractEmitterVisitor.prototype.visitCommaExpr = function(ast, ctx) {
ctx.print(ast, "(");
this.visitAllExpressions(ast.parts, ctx, ",");
ctx.print(ast, ")");
return null;
};
AbstractEmitterVisitor.prototype.visitAllExpressions = function(expressions, ctx, separator, newLine) {
var _this = this;
if (newLine === void 0) {
newLine = false;
}
this.visitAllObjects(function(expr) {
return expr.visitExpression(_this, ctx);
}, expressions, ctx, separator, newLine);
};
AbstractEmitterVisitor.prototype.visitAllObjects = function(handler, expressions, ctx, separator, newLine) {
if (newLine === void 0) {
newLine = false;
}
for (var i = 0; i < expressions.length; i++) {
if (i > 0) {
ctx.print(null, separator, newLine);
}
handler(expressions[i]);
}
if (newLine) {
ctx.println();
}
};
AbstractEmitterVisitor.prototype.visitAllStatements = function(statements, ctx) {
var _this = this;
statements.forEach(function(stmt) {
return stmt.visitStatement(_this, ctx);
});
};
return AbstractEmitterVisitor;
}();
function escapeIdentifier(input, escapeDollar, alwaysQuote) {
if (alwaysQuote === void 0) {
alwaysQuote = true;
}
if (input == null) {
return null;
}
var body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function() {
var match = [];
for (var _i = 0; _i < arguments.length; _i++) {
match[_i] = arguments[_i];
}
if (match[0] == "$") {
return escapeDollar ? "\\$" : "$";
} else if (match[0] == "\n") {
return "\\n";
} else if (match[0] == "\r") {
return "\\r";
} else {
return "\\" + match[0];
}
});
var requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
return requiresQuotes ? "'" + body + "'" : body;
}
function _createIndent(count) {
var res = "";
for (var i = 0; i < count; i++) {
res += _INDENT_WITH;
}
return res;
}
var _debugFilePath = "/debug/lib";
function debugOutputAstAsTypeScript(ast) {
var converter = new _TsEmitterVisitor(_debugFilePath, {
fileNameToModuleName: function(filePath, containingFilePath) {
return filePath;
},
getImportAs: function(symbol) {
return null;
},
getTypeArity: function(symbol) {
return null;
}
});
var ctx = EmitterVisitorContext.createRoot([]);
var asts = Array.isArray(ast) ? ast : [ ast ];
asts.forEach(function(ast) {
if (ast instanceof Statement) {
ast.visitStatement(converter, ctx);
} else if (ast instanceof Expression) {
ast.visitExpression(converter, ctx);
} else if (ast instanceof Type$1) {
ast.visitType(converter, ctx);
} else {
throw new Error("Don't know how to print debug info for " + ast);
}
});
return ctx.toSource();
}
var TypeScriptEmitter = function() {
function TypeScriptEmitter(_importResolver) {
this._importResolver = _importResolver;
}
TypeScriptEmitter.prototype.emitStatements = function(srcFilePath, genFilePath, stmts, exportedVars, preamble) {
var _this = this;
if (preamble === void 0) {
preamble = "";
}
var converter = new _TsEmitterVisitor(genFilePath, this._importResolver);
var ctx = EmitterVisitorContext.createRoot(exportedVars);
converter.visitAllStatements(stmts, ctx);
var preambleLines = preamble ? preamble.split("\n") : [];
converter.reexports.forEach(function(reexports, exportedFilePath) {
var reexportsCode = reexports.map(function(reexport) {
return reexport.name + " as " + reexport.as;
}).join(",");
preambleLines.push("export {" + reexportsCode + "} from '" + _this._importResolver.fileNameToModuleName(exportedFilePath, genFilePath) + "';");
});
converter.importsWithPrefixes.forEach(function(prefix, importedFilePath) {
preambleLines.push("imp" + ("ort * as " + prefix + " from '" + _this._importResolver.fileNameToModuleName(importedFilePath, genFilePath) + "';"));
});
var sm = ctx.toSourceMapGenerator(srcFilePath, genFilePath, preambleLines.length).toJsComment();
var lines = preambleLines.concat([ ctx.toSource(), sm ]);
if (sm) {
lines.push("");
}
return lines.join("\n");
};
return TypeScriptEmitter;
}();
var _TsEmitterVisitor = function(_super) {
__extends(_TsEmitterVisitor, _super);
function _TsEmitterVisitor(_genFilePath, _importResolver) {
var _this = _super.call(this, false) || this;
_this._genFilePath = _genFilePath;
_this._importResolver = _importResolver;
_this.typeExpression = 0;
_this.importsWithPrefixes = new Map();
_this.reexports = new Map();
return _this;
}
_TsEmitterVisitor.prototype.visitType = function(t, ctx, defaultType) {
if (defaultType === void 0) {
defaultType = "any";
}
if (t) {
this.typeExpression++;
t.visitType(this, ctx);
this.typeExpression--;
} else {
ctx.print(null, defaultType);
}
};
_TsEmitterVisitor.prototype.visitLiteralExpr = function(ast, ctx) {
var value = ast.value;
if (value == null && ast.type != INFERRED_TYPE) {
ctx.print(ast, "(" + value + " as any)");
return null;
}
return _super.prototype.visitLiteralExpr.call(this, ast, ctx);
};
_TsEmitterVisitor.prototype.visitLiteralArrayExpr = function(ast, ctx) {
if (ast.entries.length === 0) {
ctx.print(ast, "(");
}
var result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);
if (ast.entries.length === 0) {
ctx.print(ast, " as any[])");
}
return result;
};
_TsEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
this._visitIdentifier(ast.value, ast.typeParams, ctx);
return null;
};
_TsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
if (ctx.isExportedVar(stmt.name) && stmt.value instanceof ExternalExpr && !stmt.type) {
var _a = this._resolveStaticSymbol(stmt.value.value), name = _a.name, filePath = _a.filePath, members = _a.members;
if (members.length === 0 && filePath !== this._genFilePath) {
var reexports = this.reexports.get(filePath);
if (!reexports) {
reexports = [];
this.reexports.set(filePath, reexports);
}
reexports.push({
name: name,
as: stmt.name
});
return null;
}
}
if (ctx.isExportedVar(stmt.name)) {
ctx.print(stmt, "export ");
}
if (stmt.hasModifier(StmtModifier.Final)) {
ctx.print(stmt, "const");
} else {
ctx.print(stmt, "var");
}
ctx.print(stmt, " " + stmt.name);
this._printColonType(stmt.type, ctx);
ctx.print(stmt, " = ");
stmt.value.visitExpression(this, ctx);
ctx.println(stmt, ";");
return null;
};
_TsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
ctx.print(ast, "(<");
ast.type.visitType(this, ctx);
ctx.print(ast, ">");
ast.value.visitExpression(this, ctx);
ctx.print(ast, ")");
return null;
};
_TsEmitterVisitor.prototype.visitInstantiateExpr = function(ast, ctx) {
ctx.print(ast, "new ");
this.typeExpression++;
ast.classExpr.visitExpression(this, ctx);
this.typeExpression--;
ctx.print(ast, "(");
this.visitAllExpressions(ast.args, ctx, ",");
ctx.print(ast, ")");
return null;
};
_TsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
var _this = this;
ctx.pushClass(stmt);
if (ctx.isExportedVar(stmt.name)) {
ctx.print(stmt, "export ");
}
ctx.print(stmt, "class " + stmt.name);
if (stmt.parent != null) {
ctx.print(stmt, " extends ");
this.typeExpression++;
stmt.parent.visitExpression(this, ctx);
this.typeExpression--;
}
ctx.println(stmt, " {");
ctx.incIndent();
stmt.fields.forEach(function(field) {
return _this._visitClassField(field, ctx);
});
if (stmt.constructorMethod != null) {
this._visitClassConstructor(stmt, ctx);
}
stmt.getters.forEach(function(getter) {
return _this._visitClassGetter(getter, ctx);
});
stmt.methods.forEach(function(method) {
return _this._visitClassMethod(method, ctx);
});
ctx.decIndent();
ctx.println(stmt, "}");
ctx.popClass();
return null;
};
_TsEmitterVisitor.prototype._visitClassField = function(field, ctx) {
if (field.hasModifier(StmtModifier.Private)) {
ctx.print(null, "/*private*/ ");
}
ctx.print(null, field.name);
this._printColonType(field.type, ctx);
ctx.println(null, ";");
};
_TsEmitterVisitor.prototype._visitClassGetter = function(getter, ctx) {
if (getter.hasModifier(StmtModifier.Private)) {
ctx.print(null, "private ");
}
ctx.print(null, "get " + getter.name + "()");
this._printColonType(getter.type, ctx);
ctx.println(null, " {");
ctx.incIndent();
this.visitAllStatements(getter.body, ctx);
ctx.decIndent();
ctx.println(null, "}");
};
_TsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
ctx.print(stmt, "constructor(");
this._visitParams(stmt.constructorMethod.params, ctx);
ctx.println(stmt, ") {");
ctx.incIndent();
this.visitAllStatements(stmt.constructorMethod.body, ctx);
ctx.decIndent();
ctx.println(stmt, "}");
};
_TsEmitterVisitor.prototype._visitClassMethod = function(method, ctx) {
if (method.hasModifier(StmtModifier.Private)) {
ctx.print(null, "private ");
}
ctx.print(null, method.name + "(");
this._visitParams(method.params, ctx);
ctx.print(null, ")");
this._printColonType(method.type, ctx, "void");
ctx.println(null, " {");
ctx.incIndent();
this.visitAllStatements(method.body, ctx);
ctx.decIndent();
ctx.println(null, "}");
};
_TsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
ctx.print(ast, "(");
this._visitParams(ast.params, ctx);
ctx.print(ast, ")");
this._printColonType(ast.type, ctx, "void");
ctx.println(ast, " => {");
ctx.incIndent();
this.visitAllStatements(ast.statements, ctx);
ctx.decIndent();
ctx.print(ast, "}");
return null;
};
_TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
if (ctx.isExportedVar(stmt.name)) {
ctx.print(stmt, "export ");
}
ctx.print(stmt, "function " + stmt.name + "(");
this._visitParams(stmt.params, ctx);
ctx.print(stmt, ")");
this._printColonType(stmt.type, ctx, "void");
ctx.println(stmt, " {");
ctx.incIndent();
this.visitAllStatements(stmt.statements, ctx);
ctx.decIndent();
ctx.println(stmt, "}");
return null;
};
_TsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
ctx.println(stmt, "try {");
ctx.incIndent();
this.visitAllStatements(stmt.bodyStmts, ctx);
ctx.decIndent();
ctx.println(stmt, "} catch (" + CATCH_ERROR_VAR$1.name + ") {");
ctx.incIndent();
var catchStmts = [ CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop("stack", null)).toDeclStmt(null, [ StmtModifier.Final ]) ].concat(stmt.catchStmts);
this.visitAllStatements(catchStmts, ctx);
ctx.decIndent();
ctx.println(stmt, "}");
return null;
};
_TsEmitterVisitor.prototype.visitBuiltintType = function(type, ctx) {
var typeStr;
switch (type.name) {
case BuiltinTypeName.Bool:
typeStr = "boolean";
break;

case BuiltinTypeName.Dynamic:
typeStr = "any";
break;

case BuiltinTypeName.Function:
typeStr = "Function";
break;

case BuiltinTypeName.Number:
typeStr = "number";
break;

case BuiltinTypeName.Int:
typeStr = "number";
break;

case BuiltinTypeName.String:
typeStr = "string";
break;

default:
throw new Error("Unsupported builtin type " + type.name);
}
ctx.print(null, typeStr);
return null;
};
_TsEmitterVisitor.prototype.visitExpressionType = function(ast, ctx) {
ast.value.visitExpression(this, ctx);
return null;
};
_TsEmitterVisitor.prototype.visitArrayType = function(type, ctx) {
this.visitType(type.of, ctx);
ctx.print(null, "[]");
return null;
};
_TsEmitterVisitor.prototype.visitMapType = function(type, ctx) {
ctx.print(null, "{[key: string]:");
this.visitType(type.valueType, ctx);
ctx.print(null, "}");
return null;
};
_TsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
var name;
switch (method) {
case BuiltinMethod.ConcatArray:
name = "concat";
break;

case BuiltinMethod.SubscribeObservable:
name = "subscribe";
break;

case BuiltinMethod.Bind:
name = "bind";
break;

default:
throw new Error("Unknown builtin method: " + method);
}
return name;
};
_TsEmitterVisitor.prototype._visitParams = function(params, ctx) {
var _this = this;
this.visitAllObjects(function(param) {
ctx.print(null, param.name);
_this._printColonType(param.type, ctx);
}, params, ctx, ",");
};
_TsEmitterVisitor.prototype._resolveStaticSymbol = function(value) {
var reference = value.reference;
if (!(reference instanceof StaticSymbol)) {
throw new Error("Internal error: unknown identifier " + JSON.stringify(value));
}
var arity = this._importResolver.getTypeArity(reference) || undefined;
var importReference = this._importResolver.getImportAs(reference) || reference;
return {
name: importReference.name,
filePath: importReference.filePath,
members: importReference.members,
arity: arity
};
};
_TsEmitterVisitor.prototype._visitIdentifier = function(value, typeParams, ctx) {
var _this = this;
var _a = this._resolveStaticSymbol(value), name = _a.name, filePath = _a.filePath, members = _a.members, arity = _a.arity;
if (filePath != this._genFilePath) {
var prefix = this.importsWithPrefixes.get(filePath);
if (prefix == null) {
prefix = "import" + this.importsWithPrefixes.size;
this.importsWithPrefixes.set(filePath, prefix);
}
ctx.print(null, prefix + ".");
}
if (members.length) {
ctx.print(null, name);
ctx.print(null, ".");
ctx.print(null, members.join("."));
} else {
ctx.print(null, name);
}
if (this.typeExpression > 0) {
var suppliedParameters = typeParams && typeParams.length || 0;
var additionalParameters = (arity || 0) - suppliedParameters;
if (suppliedParameters > 0 || additionalParameters > 0) {
ctx.print(null, "<");
if (suppliedParameters > 0) {
this.visitAllObjects(function(type) {
return type.visitType(_this, ctx);
}, typeParams, ctx, ",");
}
if (additionalParameters > 0) {
for (var i = 0; i < additionalParameters; i++) {
if (i > 0 || suppliedParameters > 0) ctx.print(null, ",");
ctx.print(null, "any");
}
}
ctx.print(null, ">");
}
}
};
_TsEmitterVisitor.prototype._printColonType = function(type, ctx, defaultType) {
if (type !== INFERRED_TYPE) {
ctx.print(null, ":");
this.visitType(type, ctx, defaultType);
}
};
return _TsEmitterVisitor;
}(AbstractEmitterVisitor);
var SECURITY_SCHEMA = {};
function registerContext(ctx, specs) {
for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {
var spec = specs_1[_i];
SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
}
}
registerContext(_angular_core.SecurityContext.HTML, [ "iframe|srcdoc", "*|innerHTML", "*|outerHTML" ]);
registerContext(_angular_core.SecurityContext.STYLE, [ "*|style" ]);
registerContext(_angular_core.SecurityContext.URL, [ "*|formAction", "area|href", "area|ping", "audio|src", "a|href", "a|ping", "blockquote|cite", "body|background", "del|cite", "form|action", "img|src", "img|srcset", "input|src", "ins|cite", "q|cite", "source|src", "source|srcset", "track|src", "video|poster", "video|src" ]);
registerContext(_angular_core.SecurityContext.RESOURCE_URL, [ "applet|code", "applet|codebase", "base|href", "embed|src", "frame|src", "head|profile", "html|manifest", "iframe|src", "link|href", "media|src", "object|codebase", "object|data", "script|src" ]);
var BOOLEAN = "boolean";
var NUMBER = "number";
var STRING = "string";
var OBJECT = "object";
var SCHEMA = [ "[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop", "[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate", "abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate", "media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume", ":svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex", ":svg:graphics^:svg:|", ":svg:animation^:svg:|*begin,*end,*repeat", ":svg:geometry^:svg:|", ":svg:componentTransferFunction^:svg:|", ":svg:gradient^:svg:|", ":svg:textContent^:svg:graphics|", ":svg:textPositioning^:svg:textContent|", "a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username", "area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username", "audio^media|", "br^[HTMLElement]|clear", "base^[HTMLElement]|href,target", "body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink", "button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value", "canvas^[HTMLElement]|#height,#width", "content^[HTMLElement]|select", "dl^[HTMLElement]|!compact", "datalist^[HTMLElement]|", "details^[HTMLElement]|!open", "dialog^[HTMLElement]|!open,returnValue", "dir^[HTMLElement]|!compact", "div^[HTMLElement]|align", "embed^[HTMLElement]|align,height,name,src,type,width", "fieldset^[HTMLElement]|!disabled,name", "font^[HTMLElement]|color,face,size", "form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target", "frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src", "frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows", "hr^[HTMLElement]|align,color,!noShade,size,width", "head^[HTMLElement]|", "h1,h2,h3,h4,h5,h6^[HTMLElement]|align", "html^[HTMLElement]|version", "iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width", "img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width", "input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width", "keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name", "li^[HTMLElement]|type,#value", "label^[HTMLElement]|htmlFor", "legend^[HTMLElement]|align", "link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type", "map^[HTMLElement]|name", "marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width", "menu^[HTMLElement]|!compact", "meta^[HTMLElement]|content,httpEquiv,name,scheme", "meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value", "ins,del^[HTMLElement]|cite,dateTime", "ol^[HTMLElement]|!compact,!reversed,#start,type", "object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width", "optgroup^[HTMLElement]|!disabled,label", "option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value", "output^[HTMLElement]|defaultValue,%htmlFor,name,value", "p^[HTMLElement]|align", "param^[HTMLElement]|name,type,value,valueType", "picture^[HTMLElement]|", "pre^[HTMLElement]|#width", "progress^[HTMLElement]|#max,#value", "q,blockquote,cite^[HTMLElement]|", "script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type", "select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value", "shadow^[HTMLElement]|", "source^[HTMLElement]|media,sizes,src,srcset,type", "span^[HTMLElement]|", "style^[HTMLElement]|!disabled,media,type", "caption^[HTMLElement]|align", "th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width", "col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width", "table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width", "tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign", "tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign", "template^[HTMLElement]|", "textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap", "title^[HTMLElement]|text", "track^[HTMLElement]|!default,kind,label,src,srclang", "ul^[HTMLElement]|!compact,type", "unknown^[HTMLElement]|", "video^media|#height,poster,#width", ":svg:a^:svg:graphics|", ":svg:animate^:svg:animation|", ":svg:animateMotion^:svg:animation|", ":svg:animateTransform^:svg:animation|", ":svg:circle^:svg:geometry|", ":svg:clipPath^:svg:graphics|", ":svg:cursor^:svg:|", ":svg:defs^:svg:graphics|", ":svg:desc^:svg:|", ":svg:discard^:svg:|", ":svg:ellipse^:svg:geometry|", ":svg:feBlend^:svg:|", ":svg:feColorMatrix^:svg:|", ":svg:feComponentTransfer^:svg:|", ":svg:feComposite^:svg:|", ":svg:feConvolveMatrix^:svg:|", ":svg:feDiffuseLighting^:svg:|", ":svg:feDisplacementMap^:svg:|", ":svg:feDistantLight^:svg:|", ":svg:feDropShadow^:svg:|", ":svg:feFlood^:svg:|", ":svg:feFuncA^:svg:componentTransferFunction|", ":svg:feFuncB^:svg:componentTransferFunction|", ":svg:feFuncG^:svg:componentTransferFunction|", ":svg:feFuncR^:svg:componentTransferFunction|", ":svg:feGaussianBlur^:svg:|", ":svg:feImage^:svg:|", ":svg:feMerge^:svg:|", ":svg:feMergeNode^:svg:|", ":svg:feMorphology^:svg:|", ":svg:feOffset^:svg:|", ":svg:fePointLight^:svg:|", ":svg:feSpecularLighting^:svg:|", ":svg:feSpotLight^:svg:|", ":svg:feTile^:svg:|", ":svg:feTurbulence^:svg:|", ":svg:filter^:svg:|", ":svg:foreignObject^:svg:graphics|", ":svg:g^:svg:graphics|", ":svg:image^:svg:graphics|", ":svg:line^:svg:geometry|", ":svg:linearGradient^:svg:gradient|", ":svg:mpath^:svg:|", ":svg:marker^:svg:|", ":svg:mask^:svg:|", ":svg:metadata^:svg:|", ":svg:path^:svg:geometry|", ":svg:pattern^:svg:|", ":svg:polygon^:svg:geometry|", ":svg:polyline^:svg:geometry|", ":svg:radialGradient^:svg:gradient|", ":svg:rect^:svg:geometry|", ":svg:svg^:svg:graphics|#currentScale,#zoomAndPan", ":svg:script^:svg:|type", ":svg:set^:svg:animation|", ":svg:stop^:svg:|", ":svg:style^:svg:|!disabled,media,title,type", ":svg:switch^:svg:graphics|", ":svg:symbol^:svg:|", ":svg:tspan^:svg:textPositioning|", ":svg:text^:svg:textPositioning|", ":svg:textPath^:svg:textContent|", ":svg:title^:svg:|", ":svg:use^:svg:graphics|", ":svg:view^:svg:|#zoomAndPan", "data^[HTMLElement]|value", "menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default", "summary^[HTMLElement]|", "time^[HTMLElement]|dateTime" ];
var _ATTR_TO_PROP = {
class: "className",
for: "htmlFor",
formaction: "formAction",
innerHtml: "innerHTML",
readonly: "readOnly",
tabindex: "tabIndex"
};
var DomElementSchemaRegistry = function(_super) {
__extends(DomElementSchemaRegistry, _super);
function DomElementSchemaRegistry() {
var _this = _super.call(this) || this;
_this._schema = {};
SCHEMA.forEach(function(encodedType) {
var type = {};
var _a = encodedType.split("|"), strType = _a[0], strProperties = _a[1];
var properties = strProperties.split(",");
var _b = strType.split("^"), typeNames = _b[0], superName = _b[1];
typeNames.split(",").forEach(function(tag) {
return _this._schema[tag.toLowerCase()] = type;
});
var superType = superName && _this._schema[superName.toLowerCase()];
if (superType) {
Object.keys(superType).forEach(function(prop) {
type[prop] = superType[prop];
});
}
properties.forEach(function(property) {
if (property.length > 0) {
switch (property[0]) {
case "*":
break;

case "!":
type[property.substring(1)] = BOOLEAN;
break;

case "#":
type[property.substring(1)] = NUMBER;
break;

case "%":
type[property.substring(1)] = OBJECT;
break;

default:
type[property] = STRING;
}
}
});
});
return _this;
}
DomElementSchemaRegistry.prototype.hasProperty = function(tagName, propName, schemaMetas) {
if (schemaMetas.some(function(schema) {
return schema.name === _angular_core.NO_ERRORS_SCHEMA.name;
})) {
return true;
}
if (tagName.indexOf("-") > -1) {
if (isNgContainer(tagName) || isNgContent(tagName)) {
return false;
}
if (schemaMetas.some(function(schema) {
return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name;
})) {
return true;
}
}
var elementProperties = this._schema[tagName.toLowerCase()] || this._schema["unknown"];
return !!elementProperties[propName];
};
DomElementSchemaRegistry.prototype.hasElement = function(tagName, schemaMetas) {
if (schemaMetas.some(function(schema) {
return schema.name === _angular_core.NO_ERRORS_SCHEMA.name;
})) {
return true;
}
if (tagName.indexOf("-") > -1) {
if (isNgContainer(tagName) || isNgContent(tagName)) {
return true;
}
if (schemaMetas.some(function(schema) {
return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name;
})) {
return true;
}
}
return !!this._schema[tagName.toLowerCase()];
};
DomElementSchemaRegistry.prototype.securityContext = function(tagName, propName, isAttribute) {
if (isAttribute) {
propName = this.getMappedPropName(propName);
}
tagName = tagName.toLowerCase();
propName = propName.toLowerCase();
var ctx = SECURITY_SCHEMA[tagName + "|" + propName];
if (ctx) {
return ctx;
}
ctx = SECURITY_SCHEMA["*|" + propName];
return ctx ? ctx : _angular_core.SecurityContext.NONE;
};
DomElementSchemaRegistry.prototype.getMappedPropName = function(propName) {
return _ATTR_TO_PROP[propName] || propName;
};
DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function() {
return "ng-component";
};
DomElementSchemaRegistry.prototype.validateProperty = function(name) {
if (name.toLowerCase().startsWith("on")) {
var msg = "Binding to event property '" + name + "' is disallowed for security reasons, " + ("please use (" + name.slice(2) + ")=...") + ("\nIf '" + name + "' is a directive input, make sure the directive is imported by the") + " current module.";
return {
error: true,
msg: msg
};
} else {
return {
error: false
};
}
};
DomElementSchemaRegistry.prototype.validateAttribute = function(name) {
if (name.toLowerCase().startsWith("on")) {
var msg = "Binding to event attribute '" + name + "' is disallowed for security reasons, " + ("please use (" + name.slice(2) + ")=...");
return {
error: true,
msg: msg
};
} else {
return {
error: false
};
}
};
DomElementSchemaRegistry.prototype.allKnownElementNames = function() {
return Object.keys(this._schema);
};
DomElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function(propName) {
return dashCaseToCamelCase(propName);
};
DomElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function(camelCaseProp, userProvidedProp, val) {
var unit = "";
var strVal = val.toString().trim();
var errorMsg = null;
if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== "0") {
if (typeof val === "number") {
unit = "px";
} else {
var valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
errorMsg = "Please provide a CSS unit value for " + userProvidedProp + ":" + val;
}
}
}
return {
error: errorMsg,
value: strVal + unit
};
};
return DomElementSchemaRegistry;
}(ElementSchemaRegistry);
DomElementSchemaRegistry.decorators = [ {
type: CompilerInjectable
} ];
DomElementSchemaRegistry.ctorParameters = function() {
return [];
};
function _isPixelDimensionStyle(prop) {
switch (prop) {
case "width":
case "height":
case "minWidth":
case "minHeight":
case "maxWidth":
case "maxHeight":
case "left":
case "top":
case "bottom":
case "right":
case "fontSize":
case "outlineWidth":
case "outlineOffset":
case "paddingTop":
case "paddingLeft":
case "paddingBottom":
case "paddingRight":
case "marginTop":
case "marginLeft":
case "marginBottom":
case "marginRight":
case "borderRadius":
case "borderWidth":
case "borderTopWidth":
case "borderLeftWidth":
case "borderRightWidth":
case "borderBottomWidth":
case "textIndent":
return true;

default:
return false;
}
}
var ShadowCss = function() {
function ShadowCss() {
this.strictStyling = true;
}
ShadowCss.prototype.shimCssText = function(cssText, selector, hostSelector) {
if (hostSelector === void 0) {
hostSelector = "";
}
var sourceMappingUrl = extractSourceMappingUrl(cssText);
cssText = stripComments(cssText);
cssText = this._insertDirectives(cssText);
return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;
};
ShadowCss.prototype._insertDirectives = function(cssText) {
cssText = this._insertPolyfillDirectivesInCssText(cssText);
return this._insertPolyfillRulesInCssText(cssText);
};
ShadowCss.prototype._insertPolyfillDirectivesInCssText = function(cssText) {
return cssText.replace(_cssContentNextSelectorRe, function() {
var m = [];
for (var _i = 0; _i < arguments.length; _i++) {
m[_i] = arguments[_i];
}
return m[2] + "{";
});
};
ShadowCss.prototype._insertPolyfillRulesInCssText = function(cssText) {
return cssText.replace(_cssContentRuleRe, function() {
var m = [];
for (var _i = 0; _i < arguments.length; _i++) {
m[_i] = arguments[_i];
}
var rule = m[0].replace(m[1], "").replace(m[2], "");
return m[4] + rule;
});
};
ShadowCss.prototype._scopeCssText = function(cssText, scopeSelector, hostSelector) {
var unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
cssText = this._insertPolyfillHostInCssText(cssText);
cssText = this._convertColonHost(cssText);
cssText = this._convertColonHostContext(cssText);
cssText = this._convertShadowDOMSelectors(cssText);
if (scopeSelector) {
cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
}
cssText = cssText + "\n" + unscopedRules;
return cssText.trim();
};
ShadowCss.prototype._extractUnscopedRulesFromCssText = function(cssText) {
var r = "";
var m;
_cssContentUnscopedRuleRe.lastIndex = 0;
while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
var rule = m[0].replace(m[2], "").replace(m[1], m[4]);
r += rule + "\n\n";
}
return r;
};
ShadowCss.prototype._convertColonHost = function(cssText) {
return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
};
ShadowCss.prototype._convertColonHostContext = function(cssText) {
return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
};
ShadowCss.prototype._convertColonRule = function(cssText, regExp, partReplacer) {
return cssText.replace(regExp, function() {
var m = [];
for (var _i = 0; _i < arguments.length; _i++) {
m[_i] = arguments[_i];
}
if (m[2]) {
var parts = m[2].split(",");
var r = [];
for (var i = 0; i < parts.length; i++) {
var p = parts[i].trim();
if (!p) break;
r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
}
return r.join(",");
} else {
return _polyfillHostNoCombinator + m[3];
}
});
};
ShadowCss.prototype._colonHostContextPartReplacer = function(host, part, suffix) {
if (part.indexOf(_polyfillHost) > -1) {
return this._colonHostPartReplacer(host, part, suffix);
} else {
return host + part + suffix + ", " + part + " " + host + suffix;
}
};
ShadowCss.prototype._colonHostPartReplacer = function(host, part, suffix) {
return host + part.replace(_polyfillHost, "") + suffix;
};
ShadowCss.prototype._convertShadowDOMSelectors = function(cssText) {
return _shadowDOMSelectorsRe.reduce(function(result, pattern) {
return result.replace(pattern, " ");
}, cssText);
};
ShadowCss.prototype._scopeSelectors = function(cssText, scopeSelector, hostSelector) {
var _this = this;
return processRules(cssText, function(rule) {
var selector = rule.selector;
var content = rule.content;
if (rule.selector[0] != "@") {
selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
} else if (rule.selector.startsWith("@media") || rule.selector.startsWith("@supports") || rule.selector.startsWith("@page") || rule.selector.startsWith("@document")) {
content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
}
return new CssRule(selector, content);
});
};
ShadowCss.prototype._scopeSelector = function(selector, scopeSelector, hostSelector, strict) {
var _this = this;
return selector.split(",").map(function(part) {
return part.trim().split(_shadowDeepSelectors);
}).map(function(deepParts) {
var shallowPart = deepParts[0], otherParts = deepParts.slice(1);
var applyScope = function(shallowPart) {
if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {
return strict ? _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) : _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
} else {
return shallowPart;
}
};
return [ applyScope(shallowPart) ].concat(otherParts).join(" ");
}).join(", ");
};
ShadowCss.prototype._selectorNeedsScoping = function(selector, scopeSelector) {
var re = this._makeScopeMatcher(scopeSelector);
return !re.test(selector);
};
ShadowCss.prototype._makeScopeMatcher = function(scopeSelector) {
var lre = /\[/g;
var rre = /\]/g;
scopeSelector = scopeSelector.replace(lre, "\\[").replace(rre, "\\]");
return new RegExp("^(" + scopeSelector + ")" + _selectorReSuffix, "m");
};
ShadowCss.prototype._applySelectorScope = function(selector, scopeSelector, hostSelector) {
return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
};
ShadowCss.prototype._applySimpleSelectorScope = function(selector, scopeSelector, hostSelector) {
_polyfillHostRe.lastIndex = 0;
if (_polyfillHostRe.test(selector)) {
var replaceBy_1 = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
return selector.replace(_polyfillHostNoCombinatorRe, function(hnc, selector) {
return selector.replace(/([^:]*)(:*)(.*)/, function(_, before, colon, after) {
return before + replaceBy_1 + colon + after;
});
}).replace(_polyfillHostRe, replaceBy_1 + " ");
}
return scopeSelector + " " + selector;
};
ShadowCss.prototype._applyStrictSelectorScope = function(selector, scopeSelector, hostSelector) {
var _this = this;
var isRe = /\[is=([^\]]*)\]/g;
scopeSelector = scopeSelector.replace(isRe, function(_) {
var parts = [];
for (var _i = 1; _i < arguments.length; _i++) {
parts[_i - 1] = arguments[_i];
}
return parts[0];
});
var attrName = "[" + scopeSelector + "]";
var _scopeSelectorPart = function(p) {
var scopedP = p.trim();
if (!scopedP) {
return "";
}
if (p.indexOf(_polyfillHostNoCombinator) > -1) {
scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
} else {
var t = p.replace(_polyfillHostRe, "");
if (t.length > 0) {
var matches = t.match(/([^:]*)(:*)(.*)/);
if (matches) {
scopedP = matches[1] + attrName + matches[2] + matches[3];
}
}
}
return scopedP;
};
var safeContent = new SafeSelector(selector);
selector = safeContent.content();
var scopedSelector = "";
var startIndex = 0;
var res;
var sep = /( |>|\+|~(?!=))\s*/g;
var scopeAfter = selector.indexOf(_polyfillHostNoCombinator);
while ((res = sep.exec(selector)) !== null) {
var separator = res[1];
var part = selector.slice(startIndex, res.index).trim();
var scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;
scopedSelector += scopedPart + " " + separator + " ";
startIndex = sep.lastIndex;
}
scopedSelector += _scopeSelectorPart(selector.substring(startIndex));
return safeContent.restore(scopedSelector);
};
ShadowCss.prototype._insertPolyfillHostInCssText = function(selector) {
return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);
};
return ShadowCss;
}();
var SafeSelector = function() {
function SafeSelector(selector) {
var _this = this;
this.placeholders = [];
this.index = 0;
selector = selector.replace(/(\[[^\]]*\])/g, function(_, keep) {
var replaceBy = "__ph-" + _this.index + "__";
_this.placeholders.push(keep);
_this.index++;
return replaceBy;
});
this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, function(_, pseudo, exp) {
var replaceBy = "__ph-" + _this.index + "__";
_this.placeholders.push(exp);
_this.index++;
return pseudo + replaceBy;
});
}
SafeSelector.prototype.restore = function(content) {
var _this = this;
return content.replace(/__ph-(\d+)__/g, function(ph, index) {
return _this.placeholders[+index];
});
};
SafeSelector.prototype.content = function() {
return this._content;
};
return SafeSelector;
}();
var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
var _polyfillHost = "-shadowcsshost";
var _polyfillHostContext = "-shadowcsscontext";
var _parenSuffix = ")(?:\\((" + "(?:\\([^)(]*\\)|[^)(]*)+?" + ")\\))?([^,{]*)";
var _cssColonHostRe = new RegExp("(" + _polyfillHost + _parenSuffix, "gim");
var _cssColonHostContextRe = new RegExp("(" + _polyfillHostContext + _parenSuffix, "gim");
var _polyfillHostNoCombinator = _polyfillHost + "-no-combinator";
var _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
var _shadowDOMSelectorsRe = [ /::shadow/g, /::content/g, /\/shadow-deep\//g, /\/shadow\//g ];
var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
var _selectorReSuffix = "([>\\s~+[.,{:][\\s\\S]*)?$";
var _polyfillHostRe = /-shadowcsshost/gim;
var _colonHostRe = /:host/gim;
var _colonHostContextRe = /:host-context/gim;
var _commentRe = /\/\*\s*[\s\S]*?\*\//g;
function stripComments(input) {
return input.replace(_commentRe, "");
}
var _sourceMappingUrlRe = /\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//;
function extractSourceMappingUrl(input) {
var matcher = input.match(_sourceMappingUrlRe);
return matcher ? matcher[0] : "";
}
var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
var _curlyRe = /([{}])/g;
var OPEN_CURLY = "{";
var CLOSE_CURLY = "}";
var BLOCK_PLACEHOLDER = "%BLOCK%";
var CssRule = function() {
function CssRule(selector, content) {
this.selector = selector;
this.content = content;
}
return CssRule;
}();
function processRules(input, ruleCallback) {
var inputWithEscapedBlocks = escapeBlocks(input);
var nextBlockIndex = 0;
return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function() {
var m = [];
for (var _i = 0; _i < arguments.length; _i++) {
m[_i] = arguments[_i];
}
var selector = m[2];
var content = "";
var suffix = m[4];
var contentPrefix = "";
if (suffix && suffix.startsWith("{" + BLOCK_PLACEHOLDER)) {
content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
contentPrefix = "{";
}
var rule = ruleCallback(new CssRule(selector, content));
return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
});
}
var StringWithEscapedBlocks = function() {
function StringWithEscapedBlocks(escapedString, blocks) {
this.escapedString = escapedString;
this.blocks = blocks;
}
return StringWithEscapedBlocks;
}();
function escapeBlocks(input) {
var inputParts = input.split(_curlyRe);
var resultParts = [];
var escapedBlocks = [];
var bracketCount = 0;
var currentBlockParts = [];
for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {
var part = inputParts[partIndex];
if (part == CLOSE_CURLY) {
bracketCount--;
}
if (bracketCount > 0) {
currentBlockParts.push(part);
} else {
if (currentBlockParts.length > 0) {
escapedBlocks.push(currentBlockParts.join(""));
resultParts.push(BLOCK_PLACEHOLDER);
currentBlockParts = [];
}
resultParts.push(part);
}
if (part == OPEN_CURLY) {
bracketCount++;
}
}
if (currentBlockParts.length > 0) {
escapedBlocks.push(currentBlockParts.join(""));
resultParts.push(BLOCK_PLACEHOLDER);
}
return new StringWithEscapedBlocks(resultParts.join(""), escapedBlocks);
}
var COMPONENT_VARIABLE = "%COMP%";
var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
var StylesCompileDependency = function() {
function StylesCompileDependency(name, moduleUrl, isShimmed, valuePlaceholder) {
this.name = name;
this.moduleUrl = moduleUrl;
this.isShimmed = isShimmed;
this.valuePlaceholder = valuePlaceholder;
}
return StylesCompileDependency;
}();
var StylesCompileResult = function() {
function StylesCompileResult(componentStylesheet, externalStylesheets) {
this.componentStylesheet = componentStylesheet;
this.externalStylesheets = externalStylesheets;
}
return StylesCompileResult;
}();
var CompiledStylesheet = function() {
function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
this.statements = statements;
this.stylesVar = stylesVar;
this.dependencies = dependencies;
this.isShimmed = isShimmed;
this.meta = meta;
}
return CompiledStylesheet;
}();
var StyleCompiler = function() {
function StyleCompiler(_urlResolver) {
this._urlResolver = _urlResolver;
this._shadowCss = new ShadowCss();
}
StyleCompiler.prototype.compileComponent = function(comp) {
var _this = this;
var template = comp.template;
var externalStylesheets = [];
var componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
styles: template.styles,
styleUrls: template.styleUrls,
moduleUrl: identifierModuleUrl(comp.type)
}), true);
template.externalStylesheets.forEach(function(stylesheetMeta) {
var compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, false);
externalStylesheets.push(compiledStylesheet);
});
return new StylesCompileResult(componentStylesheet, externalStylesheets);
};
StyleCompiler.prototype._compileStyles = function(comp, stylesheet, isComponentStylesheet) {
var _this = this;
var shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated;
var styleExpressions = stylesheet.styles.map(function(plainStyle) {
return literal(_this._shimIfNeeded(plainStyle, shim));
});
var dependencies = [];
for (var i = 0; i < stylesheet.styleUrls.length; i++) {
var identifier = {
reference: null
};
dependencies.push(new StylesCompileDependency(getStylesVarName(null), stylesheet.styleUrls[i], shim, identifier));
styleExpressions.push(new ExternalExpr(identifier));
}
var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
var stmt = variable(stylesVar).set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [ TypeModifier.Const ]))).toDeclStmt(null, [ StmtModifier.Final ]);
return new CompiledStylesheet([ stmt ], stylesVar, dependencies, shim, stylesheet);
};
StyleCompiler.prototype._shimIfNeeded = function(style$$1, shim) {
return shim ? this._shadowCss.shimCssText(style$$1, CONTENT_ATTR, HOST_ATTR) : style$$1;
};
return StyleCompiler;
}();
StyleCompiler.decorators = [ {
type: CompilerInjectable
} ];
StyleCompiler.ctorParameters = function() {
return [ {
type: UrlResolver
} ];
};
function getStylesVarName(component) {
var result = "styles";
if (component) {
result += "_" + identifierName(component.type);
}
return result;
}
var EventHandlerVars = function() {
function EventHandlerVars() {}
return EventHandlerVars;
}();
EventHandlerVars.event = variable("$event");
var ConvertActionBindingResult = function() {
function ConvertActionBindingResult(stmts, allowDefault) {
this.stmts = stmts;
this.allowDefault = allowDefault;
}
return ConvertActionBindingResult;
}();
function convertActionBinding(localResolver, implicitReceiver, action, bindingId) {
if (!localResolver) {
localResolver = new DefaultLocalResolver();
}
var actionWithoutBuiltins = convertPropertyBindingBuiltins({
createLiteralArrayConverter: function(argCount) {
return function(args) {
return literalArr(args);
};
},
createLiteralMapConverter: function(keys) {
return function(args) {
return literalMap(keys.map(function(key, i) {
return [ key, args[i] ];
}));
};
},
createPipeConverter: function(name) {
throw new Error("Illegal State: Actions are not allowed to contain pipes. Pipe: " + name);
}
}, action);
var visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId);
var actionStmts = [];
flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);
prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
var lastIndex = actionStmts.length - 1;
var preventDefaultVar = null;
if (lastIndex >= 0) {
var lastStatement = actionStmts[lastIndex];
var returnExpr = convertStmtIntoExpression(lastStatement);
if (returnExpr) {
preventDefaultVar = createPreventDefaultVar(bindingId);
actionStmts[lastIndex] = preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false))).toDeclStmt(null, [ StmtModifier.Final ]);
}
}
return new ConvertActionBindingResult(actionStmts, preventDefaultVar);
}
function convertPropertyBindingBuiltins(converterFactory, ast) {
return convertBuiltins(converterFactory, ast);
}
var ConvertPropertyBindingResult = function() {
function ConvertPropertyBindingResult(stmts, currValExpr) {
this.stmts = stmts;
this.currValExpr = currValExpr;
}
return ConvertPropertyBindingResult;
}();
function convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId) {
if (!localResolver) {
localResolver = new DefaultLocalResolver();
}
var currValExpr = createCurrValueExpr(bindingId);
var stmts = [];
var visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId);
var outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);
if (visitor.temporaryCount) {
for (var i = 0; i < visitor.temporaryCount; i++) {
stmts.push(temporaryDeclaration(bindingId, i));
}
}
stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [ StmtModifier.Final ]));
return new ConvertPropertyBindingResult(stmts, currValExpr);
}
function convertBuiltins(converterFactory, ast) {
var visitor = new _BuiltinAstConverter(converterFactory);
return ast.visit(visitor);
}
function temporaryName(bindingId, temporaryNumber) {
return "tmp_" + bindingId + "_" + temporaryNumber;
}
function temporaryDeclaration(bindingId, temporaryNumber) {
return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);
}
function prependTemporaryDecls(temporaryCount, bindingId, statements) {
for (var i = temporaryCount - 1; i >= 0; i--) {
statements.unshift(temporaryDeclaration(bindingId, i));
}
}
var _Mode = {};
_Mode.Statement = 0;
_Mode.Expression = 1;
_Mode[_Mode.Statement] = "Statement";
_Mode[_Mode.Expression] = "Expression";
function ensureStatementMode(mode, ast) {
if (mode !== _Mode.Statement) {
throw new Error("Expected a statement, but saw " + ast);
}
}
function ensureExpressionMode(mode, ast) {
if (mode !== _Mode.Expression) {
throw new Error("Expected an expression, but saw " + ast);
}
}
function convertToStatementIfNeeded(mode, expr) {
if (mode === _Mode.Statement) {
return expr.toStmt();
} else {
return expr;
}
}
var _BuiltinAstConverter = function(_super) {
__extends(_BuiltinAstConverter, _super);
function _BuiltinAstConverter(_converterFactory) {
var _this = _super.call(this) || this;
_this._converterFactory = _converterFactory;
return _this;
}
_BuiltinAstConverter.prototype.visitPipe = function(ast, context) {
var _this = this;
var args = [ ast.exp ].concat(ast.args).map(function(ast) {
return ast.visit(_this, context);
});
return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createPipeConverter(ast.name, args.length));
};
_BuiltinAstConverter.prototype.visitLiteralArray = function(ast, context) {
var _this = this;
var args = ast.expressions.map(function(ast) {
return ast.visit(_this, context);
});
return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));
};
_BuiltinAstConverter.prototype.visitLiteralMap = function(ast, context) {
var _this = this;
var args = ast.values.map(function(ast) {
return ast.visit(_this, context);
});
return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralMapConverter(ast.keys));
};
return _BuiltinAstConverter;
}(AstTransformer);
var _AstToIrVisitor = function() {
function _AstToIrVisitor(_localResolver, _implicitReceiver, bindingId) {
this._localResolver = _localResolver;
this._implicitReceiver = _implicitReceiver;
this.bindingId = bindingId;
this._nodeMap = new Map();
this._resultMap = new Map();
this._currentTemporary = 0;
this.temporaryCount = 0;
}
_AstToIrVisitor.prototype.visitBinary = function(ast, mode) {
var op;
switch (ast.operation) {
case "+":
op = BinaryOperator.Plus;
break;

case "-":
op = BinaryOperator.Minus;
break;

case "*":
op = BinaryOperator.Multiply;
break;

case "/":
op = BinaryOperator.Divide;
break;

case "%":
op = BinaryOperator.Modulo;
break;

case "&&":
op = BinaryOperator.And;
break;

case "||":
op = BinaryOperator.Or;
break;

case "==":
op = BinaryOperator.Equals;
break;

case "!=":
op = BinaryOperator.NotEquals;
break;

case "===":
op = BinaryOperator.Identical;
break;

case "!==":
op = BinaryOperator.NotIdentical;
break;

case "<":
op = BinaryOperator.Lower;
break;

case ">":
op = BinaryOperator.Bigger;
break;

case "<=":
op = BinaryOperator.LowerEquals;
break;

case ">=":
op = BinaryOperator.BiggerEquals;
break;

default:
throw new Error("Unsupported operation " + ast.operation);
}
return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
};
_AstToIrVisitor.prototype.visitChain = function(ast, mode) {
ensureStatementMode(mode, ast);
return this.visitAll(ast.expressions, mode);
};
_AstToIrVisitor.prototype.visitConditional = function(ast, mode) {
var value = this.visit(ast.condition, _Mode.Expression);
return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
};
_AstToIrVisitor.prototype.visitPipe = function(ast, mode) {
throw new Error("Illegal state: Pipes should have been converted into functions. Pipe: " + ast.name);
};
_AstToIrVisitor.prototype.visitFunctionCall = function(ast, mode) {
var convertedArgs = this.visitAll(ast.args, _Mode.Expression);
var fnResult;
if (ast instanceof BuiltinFunctionCall) {
fnResult = ast.converter(convertedArgs);
} else {
fnResult = this.visit(ast.target, _Mode.Expression).callFn(convertedArgs);
}
return convertToStatementIfNeeded(mode, fnResult);
};
_AstToIrVisitor.prototype.visitImplicitReceiver = function(ast, mode) {
ensureExpressionMode(mode, ast);
return this._implicitReceiver;
};
_AstToIrVisitor.prototype.visitInterpolation = function(ast, mode) {
ensureExpressionMode(mode, ast);
var args = [ literal(ast.expressions.length) ];
for (var i = 0; i < ast.strings.length - 1; i++) {
args.push(literal(ast.strings[i]));
args.push(this.visit(ast.expressions[i], _Mode.Expression));
}
args.push(literal(ast.strings[ast.strings.length - 1]));
return ast.expressions.length <= 9 ? importExpr(createIdentifier(Identifiers.inlineInterpolate)).callFn(args) : importExpr(createIdentifier(Identifiers.interpolate)).callFn([ args[0], literalArr(args.slice(1)) ]);
};
_AstToIrVisitor.prototype.visitKeyedRead = function(ast, mode) {
var leftMostSafe = this.leftMostSafeNode(ast);
if (leftMostSafe) {
return this.convertSafeAccess(ast, leftMostSafe, mode);
} else {
return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
}
};
_AstToIrVisitor.prototype.visitKeyedWrite = function(ast, mode) {
var obj = this.visit(ast.obj, _Mode.Expression);
var key = this.visit(ast.key, _Mode.Expression);
var value = this.visit(ast.value, _Mode.Expression);
return convertToStatementIfNeeded(mode, obj.key(key).set(value));
};
_AstToIrVisitor.prototype.visitLiteralArray = function(ast, mode) {
throw new Error("Illegal State: literal arrays should have been converted into functions");
};
_AstToIrVisitor.prototype.visitLiteralMap = function(ast, mode) {
throw new Error("Illegal State: literal maps should have been converted into functions");
};
_AstToIrVisitor.prototype.visitLiteralPrimitive = function(ast, mode) {
return convertToStatementIfNeeded(mode, literal(ast.value));
};
_AstToIrVisitor.prototype._getLocal = function(name) {
return this._localResolver.getLocal(name);
};
_AstToIrVisitor.prototype.visitMethodCall = function(ast, mode) {
var leftMostSafe = this.leftMostSafeNode(ast);
if (leftMostSafe) {
return this.convertSafeAccess(ast, leftMostSafe, mode);
} else {
var args = this.visitAll(ast.args, _Mode.Expression);
var result = null;
var receiver = this.visit(ast.receiver, _Mode.Expression);
if (receiver === this._implicitReceiver) {
var varExpr = this._getLocal(ast.name);
if (varExpr) {
result = varExpr.callFn(args);
}
}
if (result == null) {
result = receiver.callMethod(ast.name, args);
}
return convertToStatementIfNeeded(mode, result);
}
};
_AstToIrVisitor.prototype.visitPrefixNot = function(ast, mode) {
return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));
};
_AstToIrVisitor.prototype.visitPropertyRead = function(ast, mode) {
var leftMostSafe = this.leftMostSafeNode(ast);
if (leftMostSafe) {
return this.convertSafeAccess(ast, leftMostSafe, mode);
} else {
var result = null;
var receiver = this.visit(ast.receiver, _Mode.Expression);
if (receiver === this._implicitReceiver) {
result = this._getLocal(ast.name);
}
if (result == null) {
result = receiver.prop(ast.name);
}
return convertToStatementIfNeeded(mode, result);
}
};
_AstToIrVisitor.prototype.visitPropertyWrite = function(ast, mode) {
var receiver = this.visit(ast.receiver, _Mode.Expression);
if (receiver === this._implicitReceiver) {
var varExpr = this._getLocal(ast.name);
if (varExpr) {
throw new Error("Cannot assign to a reference or variable!");
}
}
return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
};
_AstToIrVisitor.prototype.visitSafePropertyRead = function(ast, mode) {
return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
};
_AstToIrVisitor.prototype.visitSafeMethodCall = function(ast, mode) {
return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
};
_AstToIrVisitor.prototype.visitAll = function(asts, mode) {
var _this = this;
return asts.map(function(ast) {
return _this.visit(ast, mode);
});
};
_AstToIrVisitor.prototype.visitQuote = function(ast, mode) {
throw new Error("Quotes are not supported for evaluation!\n        Statement: " + ast.uninterpretedExpression + " located at " + ast.location);
};
_AstToIrVisitor.prototype.visit = function(ast, mode) {
var result = this._resultMap.get(ast);
if (result) return result;
return (this._nodeMap.get(ast) || ast).visit(this, mode);
};
_AstToIrVisitor.prototype.convertSafeAccess = function(ast, leftMostSafe, mode) {
var guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression);
var temporary = undefined;
if (this.needsTemporary(leftMostSafe.receiver)) {
temporary = this.allocateTemporary();
guardedExpression = temporary.set(guardedExpression);
this._resultMap.set(leftMostSafe.receiver, temporary);
}
var condition = guardedExpression.isBlank();
if (leftMostSafe instanceof SafeMethodCall) {
this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
} else {
this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
}
var access = this.visit(ast, _Mode.Expression);
this._nodeMap.delete(leftMostSafe);
if (temporary) {
this.releaseTemporary(temporary);
}
return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));
};
_AstToIrVisitor.prototype.leftMostSafeNode = function(ast) {
var _this = this;
var visit = function(visitor, ast) {
return (_this._nodeMap.get(ast) || ast).visit(visitor);
};
return ast.visit({
visitBinary: function(ast) {
return null;
},
visitChain: function(ast) {
return null;
},
visitConditional: function(ast) {
return null;
},
visitFunctionCall: function(ast) {
return null;
},
visitImplicitReceiver: function(ast) {
return null;
},
visitInterpolation: function(ast) {
return null;
},
visitKeyedRead: function(ast) {
return visit(this, ast.obj);
},
visitKeyedWrite: function(ast) {
return null;
},
visitLiteralArray: function(ast) {
return null;
},
visitLiteralMap: function(ast) {
return null;
},
visitLiteralPrimitive: function(ast) {
return null;
},
visitMethodCall: function(ast) {
return visit(this, ast.receiver);
},
visitPipe: function(ast) {
return null;
},
visitPrefixNot: function(ast) {
return null;
},
visitPropertyRead: function(ast) {
return visit(this, ast.receiver);
},
visitPropertyWrite: function(ast) {
return null;
},
visitQuote: function(ast) {
return null;
},
visitSafeMethodCall: function(ast) {
return visit(this, ast.receiver) || ast;
},
visitSafePropertyRead: function(ast) {
return visit(this, ast.receiver) || ast;
}
});
};
_AstToIrVisitor.prototype.needsTemporary = function(ast) {
var _this = this;
var visit = function(visitor, ast) {
return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);
};
var visitSome = function(visitor, ast) {
return ast.some(function(ast) {
return visit(visitor, ast);
});
};
return ast.visit({
visitBinary: function(ast) {
return visit(this, ast.left) || visit(this, ast.right);
},
visitChain: function(ast) {
return false;
},
visitConditional: function(ast) {
return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp);
},
visitFunctionCall: function(ast) {
return true;
},
visitImplicitReceiver: function(ast) {
return false;
},
visitInterpolation: function(ast) {
return visitSome(this, ast.expressions);
},
visitKeyedRead: function(ast) {
return false;
},
visitKeyedWrite: function(ast) {
return false;
},
visitLiteralArray: function(ast) {
return true;
},
visitLiteralMap: function(ast) {
return true;
},
visitLiteralPrimitive: function(ast) {
return false;
},
visitMethodCall: function(ast) {
return true;
},
visitPipe: function(ast) {
return true;
},
visitPrefixNot: function(ast) {
return visit(this, ast.expression);
},
visitPropertyRead: function(ast) {
return false;
},
visitPropertyWrite: function(ast) {
return false;
},
visitQuote: function(ast) {
return false;
},
visitSafeMethodCall: function(ast) {
return true;
},
visitSafePropertyRead: function(ast) {
return false;
}
});
};
_AstToIrVisitor.prototype.allocateTemporary = function() {
var tempNumber = this._currentTemporary++;
this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
};
_AstToIrVisitor.prototype.releaseTemporary = function(temporary) {
this._currentTemporary--;
if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
throw new Error("Temporary " + temporary.name + " released out of order");
}
};
return _AstToIrVisitor;
}();
function flattenStatements(arg, output) {
if (Array.isArray(arg)) {
arg.forEach(function(entry) {
return flattenStatements(entry, output);
});
} else {
output.push(arg);
}
}
var DefaultLocalResolver = function() {
function DefaultLocalResolver() {}
DefaultLocalResolver.prototype.getLocal = function(name) {
if (name === EventHandlerVars.event.name) {
return EventHandlerVars.event;
}
return null;
};
return DefaultLocalResolver;
}();
function createCurrValueExpr(bindingId) {
return variable("currVal_" + bindingId);
}
function createPreventDefaultVar(bindingId) {
return variable("pd_" + bindingId);
}
function convertStmtIntoExpression(stmt) {
if (stmt instanceof ExpressionStatement) {
return stmt.expr;
} else if (stmt instanceof ReturnStatement) {
return stmt.value;
}
return null;
}
var BuiltinFunctionCall = function(_super) {
__extends(BuiltinFunctionCall, _super);
function BuiltinFunctionCall(span, args, converter) {
var _this = _super.call(this, span, null, args) || this;
_this.args = args;
_this.converter = converter;
return _this;
}
return BuiltinFunctionCall;
}(FunctionCall);
var CLASS_ATTR$1 = "class";
var STYLE_ATTR = "style";
var IMPLICIT_TEMPLATE_VAR = "$implicit";
var ViewCompileResult = function() {
function ViewCompileResult(statements, viewClassVar, rendererTypeVar) {
this.statements = statements;
this.viewClassVar = viewClassVar;
this.rendererTypeVar = rendererTypeVar;
}
return ViewCompileResult;
}();
var ViewCompiler = function() {
function ViewCompiler(_genConfigNext, _schemaRegistry) {
this._genConfigNext = _genConfigNext;
this._schemaRegistry = _schemaRegistry;
}
ViewCompiler.prototype.compileComponent = function(component, template, styles, usedPipes) {
var embeddedViewCount = 0;
var staticQueryIds = findStaticQueryIds(template);
var statements = [];
var renderComponentVarName = undefined;
if (!component.isHost) {
var template_1 = component.template;
var customRenderData = [];
if (template_1.animations && template_1.animations.length) {
customRenderData.push(new LiteralMapEntry("animation", convertValueToOutputAst(template_1.animations), true));
}
var renderComponentVar = variable(rendererTypeName(component.type.reference));
renderComponentVarName = renderComponentVar.name;
statements.push(renderComponentVar.set(importExpr(createIdentifier(Identifiers.createRendererType2)).callFn([ new LiteralMapExpr([ new LiteralMapEntry("encapsulation", literal(template_1.encapsulation)), new LiteralMapEntry("styles", styles), new LiteralMapEntry("data", new LiteralMapExpr(customRenderData)) ]) ])).toDeclStmt(importType(createIdentifier(Identifiers.RendererType2)), [ StmtModifier.Final ]));
}
var viewBuilderFactory = function(parent) {
var embeddedViewIndex = embeddedViewCount++;
return new ViewBuilder(parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory);
};
var visitor = viewBuilderFactory(null);
visitor.visitAll([], template);
statements.push.apply(statements, visitor.build());
return new ViewCompileResult(statements, visitor.viewName, renderComponentVarName);
};
return ViewCompiler;
}();
ViewCompiler.decorators = [ {
type: CompilerInjectable
} ];
ViewCompiler.ctorParameters = function() {
return [ {
type: CompilerConfig
}, {
type: ElementSchemaRegistry
} ];
};
var LOG_VAR = variable("l");
var VIEW_VAR = variable("v");
var CHECK_VAR = variable("ck");
var COMP_VAR = variable("co");
var EVENT_NAME_VAR = variable("en");
var ALLOW_DEFAULT_VAR = variable("ad");
var ViewBuilder = function() {
function ViewBuilder(parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory) {
this.parent = parent;
this.component = component;
this.embeddedViewIndex = embeddedViewIndex;
this.usedPipes = usedPipes;
this.staticQueryIds = staticQueryIds;
this.viewBuilderFactory = viewBuilderFactory;
this.nodes = [];
this.purePipeNodeIndices = Object.create(null);
this.refNodeIndices = Object.create(null);
this.variables = [];
this.children = [];
this.compType = this.embeddedViewIndex > 0 ? DYNAMIC_TYPE : importType(this.component.type);
}
Object.defineProperty(ViewBuilder.prototype, "viewName", {
get: function() {
return viewClassName(this.component.type.reference, this.embeddedViewIndex);
},
enumerable: true,
configurable: true
});
ViewBuilder.prototype.visitAll = function(variables, astNodes) {
var _this = this;
this.variables = variables;
if (!this.parent) {
this.usedPipes.forEach(function(pipe) {
if (pipe.pure) {
_this.purePipeNodeIndices[pipe.name] = _this._createPipe(null, pipe);
}
});
}
if (!this.parent) {
var queryIds_1 = staticViewQueryIds(this.staticQueryIds);
this.component.viewQueries.forEach(function(query, queryIndex) {
var queryId = queryIndex + 1;
var bindingType = query.first ? 0 : 1;
var flags = 67108864 | calcStaticDynamicQueryFlags(queryIds_1, queryId, query.first);
_this.nodes.push(function() {
return {
sourceSpan: null,
nodeFlags: flags,
nodeDef: importExpr(createIdentifier(Identifiers.queryDef)).callFn([ literal(flags), literal(queryId), new LiteralMapExpr([ new LiteralMapEntry(query.propertyName, literal(bindingType)) ]) ])
};
});
});
}
templateVisitAll(this, astNodes);
if (this.parent && (astNodes.length === 0 || needsAdditionalRootNode(astNodes))) {
this.nodes.push(function() {
return {
sourceSpan: null,
nodeFlags: 1,
nodeDef: importExpr(createIdentifier(Identifiers.anchorDef)).callFn([ literal(0), NULL_EXPR, NULL_EXPR, literal(0) ])
};
});
}
};
ViewBuilder.prototype.build = function(targetStatements) {
if (targetStatements === void 0) {
targetStatements = [];
}
this.children.forEach(function(child) {
return child.build(targetStatements);
});
var _a = this._createNodeExpressions(), updateRendererStmts = _a.updateRendererStmts, updateDirectivesStmts = _a.updateDirectivesStmts, nodeDefExprs = _a.nodeDefExprs;
var updateRendererFn = this._createUpdateFn(updateRendererStmts);
var updateDirectivesFn = this._createUpdateFn(updateDirectivesStmts);
var viewFlags = 0;
if (!this.parent && this.component.changeDetection === _angular_core.ChangeDetectionStrategy.OnPush) {
viewFlags |= 2;
}
var viewFactory = new DeclareFunctionStmt(this.viewName, [ new FnParam(LOG_VAR.name) ], [ new ReturnStatement(importExpr(createIdentifier(Identifiers.viewDef)).callFn([ literal(viewFlags), literalArr(nodeDefExprs), updateDirectivesFn, updateRendererFn ])) ], importType(createIdentifier(Identifiers.ViewDefinition)));
targetStatements.push(viewFactory);
return targetStatements;
};
ViewBuilder.prototype._createUpdateFn = function(updateStmts) {
var updateFn;
if (updateStmts.length > 0) {
var preStmts = [];
if (!this.component.isHost && findReadVarNames(updateStmts).has(COMP_VAR.name)) {
preStmts.push(COMP_VAR.set(VIEW_VAR.prop("component")).toDeclStmt(this.compType));
}
updateFn = fn([ new FnParam(CHECK_VAR.name, INFERRED_TYPE), new FnParam(VIEW_VAR.name, INFERRED_TYPE) ], preStmts.concat(updateStmts), INFERRED_TYPE);
} else {
updateFn = NULL_EXPR;
}
return updateFn;
};
ViewBuilder.prototype.visitNgContent = function(ast, context) {
this.nodes.push(function() {
return {
sourceSpan: ast.sourceSpan,
nodeFlags: 4,
nodeDef: importExpr(createIdentifier(Identifiers.ngContentDef)).callFn([ literal(ast.ngContentIndex), literal(ast.index) ])
};
});
};
ViewBuilder.prototype.visitText = function(ast, context) {
this.nodes.push(function() {
return {
sourceSpan: ast.sourceSpan,
nodeFlags: 2,
nodeDef: importExpr(createIdentifier(Identifiers.textDef)).callFn([ literal(ast.ngContentIndex), literalArr([ literal(ast.value) ]) ])
};
});
};
ViewBuilder.prototype.visitBoundText = function(ast, context) {
var _this = this;
var nodeIndex = this.nodes.length;
this.nodes.push(null);
var astWithSource = ast.value;
var inter = astWithSource.ast;
var updateRendererExpressions = inter.expressions.map(function(expr, bindingIndex) {
return _this._preprocessUpdateExpression({
nodeIndex: nodeIndex,
bindingIndex: bindingIndex,
sourceSpan: ast.sourceSpan,
context: COMP_VAR,
value: expr
});
});
this.nodes[nodeIndex] = function() {
return {
sourceSpan: ast.sourceSpan,
nodeFlags: 2,
nodeDef: importExpr(createIdentifier(Identifiers.textDef)).callFn([ literal(ast.ngContentIndex), literalArr(inter.strings.map(function(s) {
return literal(s);
})) ]),
updateRenderer: updateRendererExpressions
};
};
};
ViewBuilder.prototype.visitEmbeddedTemplate = function(ast, context) {
var _this = this;
var nodeIndex = this.nodes.length;
this.nodes.push(null);
var _a = this._visitElementOrTemplate(nodeIndex, ast), flags = _a.flags, queryMatchesExpr = _a.queryMatchesExpr, hostEvents = _a.hostEvents;
var childVisitor = this.viewBuilderFactory(this);
this.children.push(childVisitor);
childVisitor.visitAll(ast.variables, ast.children);
var childCount = this.nodes.length - nodeIndex - 1;
this.nodes[nodeIndex] = function() {
return {
sourceSpan: ast.sourceSpan,
nodeFlags: 1 | flags,
nodeDef: importExpr(createIdentifier(Identifiers.anchorDef)).callFn([ literal(flags), queryMatchesExpr, literal(ast.ngContentIndex), literal(childCount), _this._createElementHandleEventFn(nodeIndex, hostEvents), variable(childVisitor.viewName) ])
};
};
};
ViewBuilder.prototype.visitElement = function(ast, context) {
var _this = this;
var nodeIndex = this.nodes.length;
this.nodes.push(null);
var elName = isNgContainer(ast.name) ? null : ast.name;
var _a = this._visitElementOrTemplate(nodeIndex, ast), flags = _a.flags, usedEvents = _a.usedEvents, queryMatchesExpr = _a.queryMatchesExpr, dirHostBindings = _a.hostBindings, hostEvents = _a.hostEvents;
var inputDefs = [];
var updateRendererExpressions = [];
var outputDefs = [];
if (elName) {
var hostBindings = ast.inputs.map(function(inputAst) {
return {
context: COMP_VAR,
inputAst: inputAst,
dirAst: null
};
}).concat(dirHostBindings);
if (hostBindings.length) {
updateRendererExpressions = hostBindings.map(function(hostBinding, bindingIndex) {
return _this._preprocessUpdateExpression({
context: hostBinding.context,
nodeIndex: nodeIndex,
bindingIndex: bindingIndex,
sourceSpan: hostBinding.inputAst.sourceSpan,
value: hostBinding.inputAst.value
});
});
inputDefs = hostBindings.map(function(hostBinding) {
return elementBindingDef(hostBinding.inputAst, hostBinding.dirAst);
});
}
outputDefs = usedEvents.map(function(_a) {
var target = _a[0], eventName = _a[1];
return literalArr([ literal(target), literal(eventName) ]);
});
}
templateVisitAll(this, ast.children);
var childCount = this.nodes.length - nodeIndex - 1;
var compAst = ast.directives.find(function(dirAst) {
return dirAst.directive.isComponent;
});
var compRendererType = NULL_EXPR;
var compView = NULL_EXPR;
if (compAst) {
compView = importExpr({
reference: compAst.directive.componentViewType
});
compRendererType = importExpr({
reference: compAst.directive.rendererType
});
}
this.nodes[nodeIndex] = function() {
return {
sourceSpan: ast.sourceSpan,
nodeFlags: 1 | flags,
nodeDef: importExpr(createIdentifier(Identifiers.elementDef)).callFn([ literal(flags), queryMatchesExpr, literal(ast.ngContentIndex), literal(childCount), literal(elName), elName ? fixedAttrsDef(ast) : NULL_EXPR, inputDefs.length ? literalArr(inputDefs) : NULL_EXPR, outputDefs.length ? literalArr(outputDefs) : NULL_EXPR, _this._createElementHandleEventFn(nodeIndex, hostEvents), compView, compRendererType ]),
updateRenderer: updateRendererExpressions
};
};
};
ViewBuilder.prototype._visitElementOrTemplate = function(nodeIndex, ast) {
var _this = this;
var flags = 0;
if (ast.hasViewContainer) {
flags |= 8388608;
}
var usedEvents = new Map();
ast.outputs.forEach(function(event) {
var _a = elementEventNameAndTarget(event, null), name = _a.name, target = _a.target;
usedEvents.set(_angular_core.ɵelementEventFullName(target, name), [ target, name ]);
});
ast.directives.forEach(function(dirAst) {
dirAst.hostEvents.forEach(function(event) {
var _a = elementEventNameAndTarget(event, dirAst), name = _a.name, target = _a.target;
usedEvents.set(_angular_core.ɵelementEventFullName(target, name), [ target, name ]);
});
});
var hostBindings = [];
var hostEvents = [];
var componentFactoryResolverProvider = createComponentFactoryResolver(ast.directives);
if (componentFactoryResolverProvider) {
this._visitProvider(componentFactoryResolverProvider, ast.queryMatches);
}
ast.providers.forEach(function(providerAst, providerIndex) {
var dirAst = undefined;
var dirIndex = undefined;
ast.directives.forEach(function(localDirAst, i) {
if (localDirAst.directive.type.reference === tokenReference(providerAst.token)) {
dirAst = localDirAst;
dirIndex = i;
}
});
if (dirAst) {
var _a = _this._visitDirective(providerAst, dirAst, dirIndex, nodeIndex, ast.references, ast.queryMatches, usedEvents, _this.staticQueryIds.get(ast)), dirHostBindings = _a.hostBindings, dirHostEvents = _a.hostEvents;
hostBindings.push.apply(hostBindings, dirHostBindings);
hostEvents.push.apply(hostEvents, dirHostEvents);
} else {
_this._visitProvider(providerAst, ast.queryMatches);
}
});
var queryMatchExprs = [];
ast.queryMatches.forEach(function(match) {
var valueType = undefined;
if (tokenReference(match.value) === resolveIdentifier(Identifiers.ElementRef)) {
valueType = 0;
} else if (tokenReference(match.value) === resolveIdentifier(Identifiers.ViewContainerRef)) {
valueType = 3;
} else if (tokenReference(match.value) === resolveIdentifier(Identifiers.TemplateRef)) {
valueType = 2;
}
if (valueType != null) {
queryMatchExprs.push(literalArr([ literal(match.queryId), literal(valueType) ]));
}
});
ast.references.forEach(function(ref) {
var valueType = undefined;
if (!ref.value) {
valueType = 1;
} else if (tokenReference(ref.value) === resolveIdentifier(Identifiers.TemplateRef)) {
valueType = 2;
}
if (valueType != null) {
_this.refNodeIndices[ref.name] = nodeIndex;
queryMatchExprs.push(literalArr([ literal(ref.name), literal(valueType) ]));
}
});
ast.outputs.forEach(function(outputAst) {
hostEvents.push({
context: COMP_VAR,
eventAst: outputAst,
dirAst: null
});
});
return {
flags: flags,
usedEvents: Array.from(usedEvents.values()),
queryMatchesExpr: queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,
hostBindings: hostBindings,
hostEvents: hostEvents
};
};
ViewBuilder.prototype._visitDirective = function(providerAst, dirAst, directiveIndex, elementNodeIndex, refs, queryMatches, usedEvents, queryIds) {
var _this = this;
var nodeIndex = this.nodes.length;
this.nodes.push(null);
dirAst.directive.queries.forEach(function(query, queryIndex) {
var queryId = dirAst.contentQueryStartId + queryIndex;
var flags = 33554432 | calcStaticDynamicQueryFlags(queryIds, queryId, query.first);
var bindingType = query.first ? 0 : 1;
_this.nodes.push(function() {
return {
sourceSpan: dirAst.sourceSpan,
nodeFlags: flags,
nodeDef: importExpr(createIdentifier(Identifiers.queryDef)).callFn([ literal(flags), literal(queryId), new LiteralMapExpr([ new LiteralMapEntry(query.propertyName, literal(bindingType)) ]) ])
};
});
});
var childCount = this.nodes.length - nodeIndex - 1;
var _a = this._visitProviderOrDirective(providerAst, queryMatches), flags = _a.flags, queryMatchExprs = _a.queryMatchExprs, providerExpr = _a.providerExpr, depsExpr = _a.depsExpr;
refs.forEach(function(ref) {
if (ref.value && tokenReference(ref.value) === tokenReference(providerAst.token)) {
_this.refNodeIndices[ref.name] = nodeIndex;
queryMatchExprs.push(literalArr([ literal(ref.name), literal(4) ]));
}
});
if (dirAst.directive.isComponent) {
flags |= 16384;
}
var inputDefs = dirAst.inputs.map(function(inputAst, inputIndex) {
var mapValue = literalArr([ literal(inputIndex), literal(inputAst.directiveName) ]);
return new LiteralMapEntry(inputAst.directiveName, mapValue, false);
});
var outputDefs = [];
var dirMeta = dirAst.directive;
Object.keys(dirMeta.outputs).forEach(function(propName) {
var eventName = dirMeta.outputs[propName];
if (usedEvents.has(eventName)) {
outputDefs.push(new LiteralMapEntry(propName, literal(eventName), false));
}
});
var updateDirectiveExpressions = [];
if (dirAst.inputs.length || (flags & (131072 | 32768)) > 0) {
updateDirectiveExpressions = dirAst.inputs.map(function(input, bindingIndex) {
return _this._preprocessUpdateExpression({
nodeIndex: nodeIndex,
bindingIndex: bindingIndex,
sourceSpan: input.sourceSpan,
context: COMP_VAR,
value: input.value
});
});
}
var dirContextExpr = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([ VIEW_VAR, literal(nodeIndex) ]);
var hostBindings = dirAst.hostProperties.map(function(inputAst) {
return {
context: dirContextExpr,
dirAst: dirAst,
inputAst: inputAst
};
});
var hostEvents = dirAst.hostEvents.map(function(hostEventAst) {
return {
context: dirContextExpr,
eventAst: hostEventAst,
dirAst: dirAst
};
});
this.nodes[nodeIndex] = function() {
return {
sourceSpan: dirAst.sourceSpan,
nodeFlags: 8192 | flags,
nodeDef: importExpr(createIdentifier(Identifiers.directiveDef)).callFn([ literal(flags), queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR, literal(childCount), providerExpr, depsExpr, inputDefs.length ? new LiteralMapExpr(inputDefs) : NULL_EXPR, outputDefs.length ? new LiteralMapExpr(outputDefs) : NULL_EXPR ]),
updateDirectives: updateDirectiveExpressions,
directive: dirAst.directive.type
};
};
return {
hostBindings: hostBindings,
hostEvents: hostEvents
};
};
ViewBuilder.prototype._visitProvider = function(providerAst, queryMatches) {
var nodeIndex = this.nodes.length;
this.nodes.push(null);
var _a = this._visitProviderOrDirective(providerAst, queryMatches), flags = _a.flags, queryMatchExprs = _a.queryMatchExprs, providerExpr = _a.providerExpr, depsExpr = _a.depsExpr;
this.nodes[nodeIndex] = function() {
return {
sourceSpan: providerAst.sourceSpan,
nodeFlags: flags,
nodeDef: importExpr(createIdentifier(Identifiers.providerDef)).callFn([ literal(flags), queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR, tokenExpr(providerAst.token), providerExpr, depsExpr ])
};
};
};
ViewBuilder.prototype._visitProviderOrDirective = function(providerAst, queryMatches) {
var flags = 0;
if (!providerAst.eager) {
flags |= 2048;
}
if (providerAst.providerType === ProviderAstType.PrivateService) {
flags |= 4096;
}
providerAst.lifecycleHooks.forEach(function(lifecycleHook) {
if (lifecycleHook === _angular_core.ɵLifecycleHooks.OnDestroy || providerAst.providerType === ProviderAstType.Directive || providerAst.providerType === ProviderAstType.Component) {
flags |= lifecycleHookToNodeFlag(lifecycleHook);
}
});
var queryMatchExprs = [];
queryMatches.forEach(function(match) {
if (tokenReference(match.value) === tokenReference(providerAst.token)) {
queryMatchExprs.push(literalArr([ literal(match.queryId), literal(4) ]));
}
});
var _a = providerDef(providerAst), providerExpr = _a.providerExpr, depsExpr = _a.depsExpr, providerType = _a.flags;
return {
flags: flags | providerType,
queryMatchExprs: queryMatchExprs,
providerExpr: providerExpr,
depsExpr: depsExpr
};
};
ViewBuilder.prototype.getLocal = function(name) {
if (name == EventHandlerVars.event.name) {
return EventHandlerVars.event;
}
var currViewExpr = VIEW_VAR;
for (var currBuilder = this; currBuilder; currBuilder = currBuilder.parent, currViewExpr = currViewExpr.prop("parent").cast(DYNAMIC_TYPE)) {
var refNodeIndex = currBuilder.refNodeIndices[name];
if (refNodeIndex != null) {
return importExpr(createIdentifier(Identifiers.nodeValue)).callFn([ currViewExpr, literal(refNodeIndex) ]);
}
var varAst = currBuilder.variables.find(function(varAst) {
return varAst.name === name;
});
if (varAst) {
var varValue = varAst.value || IMPLICIT_TEMPLATE_VAR;
return currViewExpr.prop("context").prop(varValue);
}
}
return null;
};
ViewBuilder.prototype.createLiteralArrayConverter = function(sourceSpan, argCount) {
if (argCount === 0) {
var valueExpr_1 = importExpr(createIdentifier(Identifiers.EMPTY_ARRAY));
return function() {
return valueExpr_1;
};
}
var nodeIndex = this.nodes.length;
this.nodes.push(function() {
return {
sourceSpan: sourceSpan,
nodeFlags: 16,
nodeDef: importExpr(createIdentifier(Identifiers.pureArrayDef)).callFn([ literal(argCount) ])
};
});
return function(args) {
return callCheckStmt(nodeIndex, args);
};
};
ViewBuilder.prototype.createLiteralMapConverter = function(sourceSpan, keys) {
if (keys.length === 0) {
var valueExpr_2 = importExpr(createIdentifier(Identifiers.EMPTY_MAP));
return function() {
return valueExpr_2;
};
}
var nodeIndex = this.nodes.length;
this.nodes.push(function() {
return {
sourceSpan: sourceSpan,
nodeFlags: 32,
nodeDef: importExpr(createIdentifier(Identifiers.pureObjectDef)).callFn([ literalArr(keys.map(function(key) {
return literal(key);
})) ])
};
});
return function(args) {
return callCheckStmt(nodeIndex, args);
};
};
ViewBuilder.prototype.createPipeConverter = function(expression, name, argCount) {
var pipe = this.usedPipes.find(function(pipeSummary) {
return pipeSummary.name === name;
});
if (pipe.pure) {
var nodeIndex_1 = this.nodes.length;
this.nodes.push(function() {
return {
sourceSpan: expression.sourceSpan,
nodeFlags: 64,
nodeDef: importExpr(createIdentifier(Identifiers.purePipeDef)).callFn([ literal(argCount) ])
};
});
var compViewExpr = VIEW_VAR;
var compBuilder = this;
while (compBuilder.parent) {
compBuilder = compBuilder.parent;
compViewExpr = compViewExpr.prop("parent").cast(DYNAMIC_TYPE);
}
var pipeNodeIndex = compBuilder.purePipeNodeIndices[name];
var pipeValueExpr_1 = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([ compViewExpr, literal(pipeNodeIndex) ]);
return function(args) {
return callUnwrapValue(expression.nodeIndex, expression.bindingIndex, callCheckStmt(nodeIndex_1, [ pipeValueExpr_1 ].concat(args)));
};
} else {
var nodeIndex = this._createPipe(expression.sourceSpan, pipe);
var nodeValueExpr_1 = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([ VIEW_VAR, literal(nodeIndex) ]);
return function(args) {
return callUnwrapValue(expression.nodeIndex, expression.bindingIndex, nodeValueExpr_1.callMethod("transform", args));
};
}
};
ViewBuilder.prototype._createPipe = function(sourceSpan, pipe) {
var nodeIndex = this.nodes.length;
var flags = 0;
pipe.type.lifecycleHooks.forEach(function(lifecycleHook) {
if (lifecycleHook === _angular_core.ɵLifecycleHooks.OnDestroy) {
flags |= lifecycleHookToNodeFlag(lifecycleHook);
}
});
var depExprs = pipe.type.diDeps.map(depDef);
this.nodes.push(function() {
return {
sourceSpan: sourceSpan,
nodeFlags: 8,
nodeDef: importExpr(createIdentifier(Identifiers.pipeDef)).callFn([ literal(flags), importExpr(pipe.type), literalArr(depExprs) ])
};
});
return nodeIndex;
};
ViewBuilder.prototype._preprocessUpdateExpression = function(expression) {
var _this = this;
return {
nodeIndex: expression.nodeIndex,
bindingIndex: expression.bindingIndex,
sourceSpan: expression.sourceSpan,
context: expression.context,
value: convertPropertyBindingBuiltins({
createLiteralArrayConverter: function(argCount) {
return _this.createLiteralArrayConverter(expression.sourceSpan, argCount);
},
createLiteralMapConverter: function(keys) {
return _this.createLiteralMapConverter(expression.sourceSpan, keys);
},
createPipeConverter: function(name, argCount) {
return _this.createPipeConverter(expression, name, argCount);
}
}, expression.value)
};
};
ViewBuilder.prototype._createNodeExpressions = function() {
var self = this;
var updateBindingCount = 0;
var updateRendererStmts = [];
var updateDirectivesStmts = [];
var nodeDefExprs = this.nodes.map(function(factory, nodeIndex) {
var _a = factory(), nodeDef = _a.nodeDef, nodeFlags = _a.nodeFlags, updateDirectives = _a.updateDirectives, updateRenderer = _a.updateRenderer, sourceSpan = _a.sourceSpan;
if (updateRenderer) {
updateRendererStmts.push.apply(updateRendererStmts, createUpdateStatements(nodeIndex, sourceSpan, updateRenderer, false));
}
if (updateDirectives) {
updateDirectivesStmts.push.apply(updateDirectivesStmts, createUpdateStatements(nodeIndex, sourceSpan, updateDirectives, (nodeFlags & (131072 | 32768)) > 0));
}
var logWithNodeDef = nodeFlags & 3 ? new CommaExpr([ LOG_VAR.callFn([]).callFn([]), nodeDef ]) : nodeDef;
return applySourceSpanToExpressionIfNeeded(logWithNodeDef, sourceSpan);
});
return {
updateRendererStmts: updateRendererStmts,
updateDirectivesStmts: updateDirectivesStmts,
nodeDefExprs: nodeDefExprs
};
function createUpdateStatements(nodeIndex, sourceSpan, expressions, allowEmptyExprs) {
var updateStmts = [];
var exprs = expressions.map(function(_a) {
var sourceSpan = _a.sourceSpan, context = _a.context, value = _a.value;
var bindingId = "" + updateBindingCount++;
var nameResolver = context === COMP_VAR ? self : null;
var _b = convertPropertyBinding(nameResolver, context, value, bindingId), stmts = _b.stmts, currValExpr = _b.currValExpr;
updateStmts.push.apply(updateStmts, stmts.map(function(stmt) {
return applySourceSpanToStatementIfNeeded(stmt, sourceSpan);
}));
return applySourceSpanToExpressionIfNeeded(currValExpr, sourceSpan);
});
if (expressions.length || allowEmptyExprs) {
updateStmts.push(applySourceSpanToStatementIfNeeded(callCheckStmt(nodeIndex, exprs).toStmt(), sourceSpan));
}
return updateStmts;
}
};
ViewBuilder.prototype._createElementHandleEventFn = function(nodeIndex, handlers) {
var _this = this;
var handleEventStmts = [];
var handleEventBindingCount = 0;
handlers.forEach(function(_a) {
var context = _a.context, eventAst = _a.eventAst, dirAst = _a.dirAst;
var bindingId = "" + handleEventBindingCount++;
var nameResolver = context === COMP_VAR ? _this : null;
var _b = convertActionBinding(nameResolver, context, eventAst.handler, bindingId), stmts = _b.stmts, allowDefault = _b.allowDefault;
var trueStmts = stmts;
if (allowDefault) {
trueStmts.push(ALLOW_DEFAULT_VAR.set(allowDefault.and(ALLOW_DEFAULT_VAR)).toStmt());
}
var _c = elementEventNameAndTarget(eventAst, dirAst), eventTarget = _c.target, eventName = _c.name;
var fullEventName = _angular_core.ɵelementEventFullName(eventTarget, eventName);
handleEventStmts.push(applySourceSpanToStatementIfNeeded(new IfStmt(literal(fullEventName).identical(EVENT_NAME_VAR), trueStmts), eventAst.sourceSpan));
});
var handleEventFn;
if (handleEventStmts.length > 0) {
var preStmts = [ ALLOW_DEFAULT_VAR.set(literal(true)).toDeclStmt(BOOL_TYPE) ];
if (!this.component.isHost && findReadVarNames(handleEventStmts).has(COMP_VAR.name)) {
preStmts.push(COMP_VAR.set(VIEW_VAR.prop("component")).toDeclStmt(this.compType));
}
handleEventFn = fn([ new FnParam(VIEW_VAR.name, INFERRED_TYPE), new FnParam(EVENT_NAME_VAR.name, INFERRED_TYPE), new FnParam(EventHandlerVars.event.name, INFERRED_TYPE) ], preStmts.concat(handleEventStmts, [ new ReturnStatement(ALLOW_DEFAULT_VAR) ]), INFERRED_TYPE);
} else {
handleEventFn = NULL_EXPR;
}
return handleEventFn;
};
ViewBuilder.prototype.visitDirective = function(ast, context) {};
ViewBuilder.prototype.visitDirectiveProperty = function(ast, context) {};
ViewBuilder.prototype.visitReference = function(ast, context) {};
ViewBuilder.prototype.visitVariable = function(ast, context) {};
ViewBuilder.prototype.visitEvent = function(ast, context) {};
ViewBuilder.prototype.visitElementProperty = function(ast, context) {};
ViewBuilder.prototype.visitAttr = function(ast, context) {};
return ViewBuilder;
}();
function providerDef(providerAst) {
return providerAst.multiProvider ? multiProviderDef(providerAst.providers) : singleProviderDef(providerAst.providerType, providerAst.providers[0]);
}
function multiProviderDef(providers) {
var allDepDefs = [];
var allParams = [];
var exprs = providers.map(function(provider, providerIndex) {
var expr;
if (provider.useClass) {
var depExprs = convertDeps(providerIndex, provider.deps || provider.useClass.diDeps);
expr = importExpr(provider.useClass).instantiate(depExprs);
} else if (provider.useFactory) {
var depExprs = convertDeps(providerIndex, provider.deps || provider.useFactory.diDeps);
expr = importExpr(provider.useFactory).callFn(depExprs);
} else if (provider.useExisting) {
var depExprs = convertDeps(providerIndex, [ {
token: provider.useExisting
} ]);
expr = depExprs[0];
} else {
expr = convertValueToOutputAst(provider.useValue);
}
return expr;
});
var providerExpr = fn(allParams, [ new ReturnStatement(literalArr(exprs)) ], INFERRED_TYPE);
return {
providerExpr: providerExpr,
flags: 512,
depsExpr: literalArr(allDepDefs)
};
function convertDeps(providerIndex, deps) {
return deps.map(function(dep, depIndex) {
var paramName = "p" + providerIndex + "_" + depIndex;
allParams.push(new FnParam(paramName, DYNAMIC_TYPE));
allDepDefs.push(depDef(dep));
return variable(paramName);
});
}
}
function singleProviderDef(providerType, providerMeta) {
var providerExpr;
var flags;
var deps;
if (providerType === ProviderAstType.Directive || providerType === ProviderAstType.Component) {
providerExpr = importExpr(providerMeta.useClass);
flags = 8192;
deps = providerMeta.deps || providerMeta.useClass.diDeps;
} else {
if (providerMeta.useClass) {
providerExpr = importExpr(providerMeta.useClass);
flags = 256;
deps = providerMeta.deps || providerMeta.useClass.diDeps;
} else if (providerMeta.useFactory) {
providerExpr = importExpr(providerMeta.useFactory);
flags = 512;
deps = providerMeta.deps || providerMeta.useFactory.diDeps;
} else if (providerMeta.useExisting) {
providerExpr = NULL_EXPR;
flags = 1024;
deps = [ {
token: providerMeta.useExisting
} ];
} else {
providerExpr = convertValueToOutputAst(providerMeta.useValue);
flags = 128;
deps = [];
}
}
var depsExpr = literalArr(deps.map(function(dep) {
return depDef(dep);
}));
return {
providerExpr: providerExpr,
flags: flags,
depsExpr: depsExpr
};
}
function tokenExpr(tokenMeta) {
return tokenMeta.identifier ? importExpr(tokenMeta.identifier) : literal(tokenMeta.value);
}
function depDef(dep) {
var expr = dep.isValue ? convertValueToOutputAst(dep.value) : tokenExpr(dep.token);
var flags = 0;
if (dep.isSkipSelf) {
flags |= 1;
}
if (dep.isOptional) {
flags |= 2;
}
if (dep.isValue) {
flags |= 8;
}
return flags === 0 ? expr : literalArr([ literal(flags), expr ]);
}
function needsAdditionalRootNode(astNodes) {
var lastAstNode = astNodes[astNodes.length - 1];
if (lastAstNode instanceof EmbeddedTemplateAst) {
return lastAstNode.hasViewContainer;
}
if (lastAstNode instanceof ElementAst) {
if (isNgContainer(lastAstNode.name) && lastAstNode.children.length) {
return needsAdditionalRootNode(lastAstNode.children);
}
return lastAstNode.hasViewContainer;
}
return lastAstNode instanceof NgContentAst;
}
function lifecycleHookToNodeFlag(lifecycleHook) {
var nodeFlag = 0;
switch (lifecycleHook) {
case _angular_core.ɵLifecycleHooks.AfterContentChecked:
nodeFlag = 1048576;
break;

case _angular_core.ɵLifecycleHooks.AfterContentInit:
nodeFlag = 524288;
break;

case _angular_core.ɵLifecycleHooks.AfterViewChecked:
nodeFlag = 4194304;
break;

case _angular_core.ɵLifecycleHooks.AfterViewInit:
nodeFlag = 2097152;
break;

case _angular_core.ɵLifecycleHooks.DoCheck:
nodeFlag = 131072;
break;

case _angular_core.ɵLifecycleHooks.OnChanges:
nodeFlag = 262144;
break;

case _angular_core.ɵLifecycleHooks.OnDestroy:
nodeFlag = 65536;
break;

case _angular_core.ɵLifecycleHooks.OnInit:
nodeFlag = 32768;
break;
}
return nodeFlag;
}
function elementBindingDef(inputAst, dirAst) {
switch (inputAst.type) {
case PropertyBindingType.Attribute:
return literalArr([ literal(1), literal(inputAst.name), literal(inputAst.securityContext) ]);

case PropertyBindingType.Property:
return literalArr([ literal(8), literal(inputAst.name), literal(inputAst.securityContext) ]);

case PropertyBindingType.Animation:
var bindingType = 8 | (dirAst && dirAst.directive.isComponent ? 32 : 16);
return literalArr([ literal(bindingType), literal("@" + inputAst.name), literal(inputAst.securityContext) ]);

case PropertyBindingType.Class:
return literalArr([ literal(2), literal(inputAst.name), NULL_EXPR ]);

case PropertyBindingType.Style:
return literalArr([ literal(4), literal(inputAst.name), literal(inputAst.unit) ]);
}
}
function fixedAttrsDef(elementAst) {
var mapResult = Object.create(null);
elementAst.attrs.forEach(function(attrAst) {
mapResult[attrAst.name] = attrAst.value;
});
elementAst.directives.forEach(function(dirAst) {
Object.keys(dirAst.directive.hostAttributes).forEach(function(name) {
var value = dirAst.directive.hostAttributes[name];
var prevValue = mapResult[name];
mapResult[name] = prevValue != null ? mergeAttributeValue(name, prevValue, value) : value;
});
});
return literalArr(Object.keys(mapResult).sort().map(function(attrName) {
return literalArr([ literal(attrName), literal(mapResult[attrName]) ]);
}));
}
function mergeAttributeValue(attrName, attrValue1, attrValue2) {
if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {
return attrValue1 + " " + attrValue2;
} else {
return attrValue2;
}
}
function callCheckStmt(nodeIndex, exprs) {
if (exprs.length > 10) {
return CHECK_VAR.callFn([ VIEW_VAR, literal(nodeIndex), literal(1), literalArr(exprs) ]);
} else {
return CHECK_VAR.callFn([ VIEW_VAR, literal(nodeIndex), literal(0) ].concat(exprs));
}
}
function callUnwrapValue(nodeIndex, bindingIdx, expr) {
return importExpr(createIdentifier(Identifiers.unwrapValue)).callFn([ VIEW_VAR, literal(nodeIndex), literal(bindingIdx), expr ]);
}
function findStaticQueryIds(nodes, result) {
if (result === void 0) {
result = new Map();
}
nodes.forEach(function(node) {
var staticQueryIds = new Set();
var dynamicQueryIds = new Set();
var queryMatches = undefined;
if (node instanceof ElementAst) {
findStaticQueryIds(node.children, result);
node.children.forEach(function(child) {
var childData = result.get(child);
childData.staticQueryIds.forEach(function(queryId) {
return staticQueryIds.add(queryId);
});
childData.dynamicQueryIds.forEach(function(queryId) {
return dynamicQueryIds.add(queryId);
});
});
queryMatches = node.queryMatches;
} else if (node instanceof EmbeddedTemplateAst) {
findStaticQueryIds(node.children, result);
node.children.forEach(function(child) {
var childData = result.get(child);
childData.staticQueryIds.forEach(function(queryId) {
return dynamicQueryIds.add(queryId);
});
childData.dynamicQueryIds.forEach(function(queryId) {
return dynamicQueryIds.add(queryId);
});
});
queryMatches = node.queryMatches;
}
if (queryMatches) {
queryMatches.forEach(function(match) {
return staticQueryIds.add(match.queryId);
});
}
dynamicQueryIds.forEach(function(queryId) {
return staticQueryIds.delete(queryId);
});
result.set(node, {
staticQueryIds: staticQueryIds,
dynamicQueryIds: dynamicQueryIds
});
});
return result;
}
function staticViewQueryIds(nodeStaticQueryIds) {
var staticQueryIds = new Set();
var dynamicQueryIds = new Set();
Array.from(nodeStaticQueryIds.values()).forEach(function(entry) {
entry.staticQueryIds.forEach(function(queryId) {
return staticQueryIds.add(queryId);
});
entry.dynamicQueryIds.forEach(function(queryId) {
return dynamicQueryIds.add(queryId);
});
});
dynamicQueryIds.forEach(function(queryId) {
return staticQueryIds.delete(queryId);
});
return {
staticQueryIds: staticQueryIds,
dynamicQueryIds: dynamicQueryIds
};
}
function createComponentFactoryResolver(directives) {
var componentDirMeta = directives.find(function(dirAst) {
return dirAst.directive.isComponent;
});
if (componentDirMeta && componentDirMeta.directive.entryComponents.length) {
var entryComponentFactories = componentDirMeta.directive.entryComponents.map(function(entryComponent) {
return importExpr({
reference: entryComponent.componentFactory
});
});
var token = createIdentifierToken(Identifiers.ComponentFactoryResolver);
var classMeta = {
diDeps: [ {
isValue: true,
value: literalArr(entryComponentFactories)
}, {
token: token,
isSkipSelf: true,
isOptional: true
}, {
token: createIdentifierToken(Identifiers.NgModuleRef)
} ],
lifecycleHooks: [],
reference: resolveIdentifier(Identifiers.CodegenComponentFactoryResolver)
};
return new ProviderAst(token, false, true, [ {
token: token,
multi: false,
useClass: classMeta
} ], ProviderAstType.PrivateService, [], componentDirMeta.sourceSpan);
}
return null;
}
function elementEventNameAndTarget(eventAst, dirAst) {
if (eventAst.isAnimation) {
return {
name: "@" + eventAst.name + "." + eventAst.phase,
target: dirAst && dirAst.directive.isComponent ? "component" : null
};
} else {
return eventAst;
}
}
function calcStaticDynamicQueryFlags(queryIds, queryId, isFirst) {
var flags = 0;
if (isFirst && (queryIds.staticQueryIds.has(queryId) || !queryIds.dynamicQueryIds.has(queryId))) {
flags |= 134217728;
} else {
flags |= 268435456;
}
return flags;
}
var GeneratedFile = function() {
function GeneratedFile(srcFileUrl, genFileUrl, source) {
this.srcFileUrl = srcFileUrl;
this.genFileUrl = genFileUrl;
this.source = source;
}
return GeneratedFile;
}();
function serializeSummaries(summaryResolver, symbolResolver, symbols, types) {
var serializer = new Serializer$1(symbolResolver, summaryResolver);
symbols.forEach(function(resolvedSymbol) {
return serializer.addOrMergeSummary({
symbol: resolvedSymbol.symbol,
metadata: resolvedSymbol.metadata
});
});
for (var processedIndex = 0; processedIndex < serializer.symbols.length; processedIndex++) {
var symbol = serializer.symbols[processedIndex];
if (summaryResolver.isLibraryFile(symbol.filePath)) {
var summary = summaryResolver.resolveSummary(symbol);
if (!summary) {
var resolvedSymbol = symbolResolver.resolveSymbol(symbol);
if (resolvedSymbol) {
summary = {
symbol: resolvedSymbol.symbol,
metadata: resolvedSymbol.metadata
};
}
}
if (summary) {
serializer.addOrMergeSummary(summary);
}
}
}
types.forEach(function(typeSummary) {
serializer.addOrMergeSummary({
symbol: typeSummary.type.reference,
metadata: null,
type: typeSummary
});
if (typeSummary.summaryKind === CompileSummaryKind.NgModule) {
var ngModuleSummary = typeSummary;
ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach(function(id) {
var symbol = id.reference;
if (summaryResolver.isLibraryFile(symbol.filePath)) {
var summary = summaryResolver.resolveSummary(symbol);
if (summary) {
serializer.addOrMergeSummary(summary);
}
}
});
}
});
return serializer.serialize();
}
function deserializeSummaries(symbolCache, json) {
var deserializer = new Deserializer(symbolCache);
return deserializer.deserialize(json);
}
var Serializer$1 = function(_super) {
__extends(Serializer$1, _super);
function Serializer$1(symbolResolver, summaryResolver) {
var _this = _super.call(this) || this;
_this.symbolResolver = symbolResolver;
_this.summaryResolver = summaryResolver;
_this.symbols = [];
_this.indexBySymbol = new Map();
_this.processedSummaryBySymbol = new Map();
_this.processedSummaries = [];
return _this;
}
Serializer$1.prototype.addOrMergeSummary = function(summary) {
var symbolMeta = summary.metadata;
if (symbolMeta && symbolMeta.__symbolic === "class") {
var clone_1 = {};
Object.keys(symbolMeta).forEach(function(propName) {
if (propName !== "decorators") {
clone_1[propName] = symbolMeta[propName];
}
});
symbolMeta = clone_1;
}
var processedSummary = this.processedSummaryBySymbol.get(summary.symbol);
if (!processedSummary) {
processedSummary = this.processValue({
symbol: summary.symbol
});
this.processedSummaries.push(processedSummary);
this.processedSummaryBySymbol.set(summary.symbol, processedSummary);
}
if (processedSummary.metadata == null && symbolMeta != null) {
processedSummary.metadata = this.processValue(symbolMeta);
}
if (processedSummary.type == null && summary.type != null) {
processedSummary.type = this.processValue(summary.type);
}
};
Serializer$1.prototype.serialize = function() {
var _this = this;
var exportAs = [];
var json = JSON.stringify({
summaries: this.processedSummaries,
symbols: this.symbols.map(function(symbol, index) {
symbol.assertNoMembers();
var importAs = undefined;
if (_this.summaryResolver.isLibraryFile(symbol.filePath)) {
importAs = symbol.name + "_" + index;
exportAs.push({
symbol: symbol,
exportAs: importAs
});
}
return {
__symbol: index,
name: symbol.name,
filePath: _this.summaryResolver.getLibraryFileName(symbol.filePath),
importAs: importAs
};
})
});
return {
json: json,
exportAs: exportAs
};
};
Serializer$1.prototype.processValue = function(value) {
return visitValue(value, this, null);
};
Serializer$1.prototype.visitOther = function(value, context) {
if (value instanceof StaticSymbol) {
var baseSymbol = this.symbolResolver.getStaticSymbol(value.filePath, value.name);
var index = this.indexBySymbol.get(baseSymbol);
if (index == null) {
index = this.indexBySymbol.size;
this.indexBySymbol.set(baseSymbol, index);
this.symbols.push(baseSymbol);
}
return {
__symbol: index,
members: value.members
};
}
};
return Serializer$1;
}(ValueTransformer);
var Deserializer = function(_super) {
__extends(Deserializer, _super);
function Deserializer(symbolCache) {
var _this = _super.call(this) || this;
_this.symbolCache = symbolCache;
return _this;
}
Deserializer.prototype.deserialize = function(json) {
var _this = this;
var data = JSON.parse(json);
var importAs = [];
this.symbols = [];
data.symbols.forEach(function(serializedSymbol) {
var symbol = _this.symbolCache.get(serializedSymbol.filePath, serializedSymbol.name);
_this.symbols.push(symbol);
if (serializedSymbol.importAs) {
importAs.push({
symbol: symbol,
importAs: serializedSymbol.importAs
});
}
});
var summaries = visitValue(data.summaries, this, null);
return {
summaries: summaries,
importAs: importAs
};
};
Deserializer.prototype.visitStringMap = function(map, context) {
if ("__symbol" in map) {
var baseSymbol = this.symbols[map["__symbol"]];
var members = map["members"];
return members.length ? this.symbolCache.get(baseSymbol.filePath, baseSymbol.name, members) : baseSymbol;
} else {
return _super.prototype.visitStringMap.call(this, map, context);
}
};
return Deserializer;
}(ValueTransformer);
var AotCompiler = function() {
function AotCompiler(_config, _host, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _outputEmitter, _summaryResolver, _localeId, _translationFormat, _genFilePreamble, _symbolResolver) {
this._config = _config;
this._host = _host;
this._metadataResolver = _metadataResolver;
this._templateParser = _templateParser;
this._styleCompiler = _styleCompiler;
this._viewCompiler = _viewCompiler;
this._ngModuleCompiler = _ngModuleCompiler;
this._outputEmitter = _outputEmitter;
this._summaryResolver = _summaryResolver;
this._localeId = _localeId;
this._translationFormat = _translationFormat;
this._genFilePreamble = _genFilePreamble;
this._symbolResolver = _symbolResolver;
}
AotCompiler.prototype.clearCache = function() {
this._metadataResolver.clearCache();
};
AotCompiler.prototype.compileAll = function(rootFiles) {
var _this = this;
var programSymbols = extractProgramSymbols(this._symbolResolver, rootFiles, this._host);
var _a = analyzeAndValidateNgModules(programSymbols, this._host, this._metadataResolver), ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective, files = _a.files, ngModules = _a.ngModules;
return Promise.all(ngModules.map(function(ngModule) {
return _this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false);
})).then(function() {
var sourceModules = files.map(function(file) {
return _this._compileSrcFile(file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables);
});
return flatten(sourceModules);
});
};
AotCompiler.prototype._compileSrcFile = function(srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables) {
var _this = this;
var fileSuffix = splitTypescriptSuffix(srcFileUrl)[1];
var statements = [];
var exportedVars = [];
var generatedFiles = [];
generatedFiles.push(this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables, statements, exportedVars));
exportedVars.push.apply(exportedVars, ngModules.map(function(ngModuleType) {
return _this._compileModule(ngModuleType, statements);
}));
directives.forEach(function(dirType) {
var compMeta = _this._metadataResolver.getDirectiveMetadata(dirType);
if (!compMeta.isComponent) {
return Promise.resolve(null);
}
var ngModule = ngModuleByPipeOrDirective.get(dirType);
if (!ngModule) {
throw new Error("Internal Error: cannot determine the module for component " + identifierName(compMeta.type) + "!");
}
_assertComponent(compMeta);
var stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);
stylesCompileResults.externalStylesheets.forEach(function(compiledStyleSheet) {
generatedFiles.push(_this._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix));
});
var compViewVars = _this._compileComponent(compMeta, ngModule, ngModule.transitiveModule.directives, stylesCompileResults.componentStylesheet, fileSuffix, statements);
exportedVars.push(_this._compileComponentFactory(compMeta, ngModule, fileSuffix, statements), compViewVars.viewClassVar, compViewVars.compRenderTypeVar);
});
if (statements.length > 0) {
var srcModule = this._codegenSourceModule(srcFileUrl, ngfactoryFilePath(srcFileUrl), statements, exportedVars);
generatedFiles.unshift(srcModule);
}
return generatedFiles;
};
AotCompiler.prototype._createSummary = function(srcFileUrl, directives, pipes, ngModules, injectables, targetStatements, targetExportedVars) {
var _this = this;
var symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileUrl).map(function(symbol) {
return _this._symbolResolver.resolveSymbol(symbol);
});
var typeSummaries = ngModules.map(function(ref) {
return _this._metadataResolver.getNgModuleSummary(ref);
}).concat(directives.map(function(ref) {
return _this._metadataResolver.getDirectiveSummary(ref);
}), pipes.map(function(ref) {
return _this._metadataResolver.getPipeSummary(ref);
}), injectables.map(function(ref) {
return _this._metadataResolver.getInjectableSummary(ref);
}));
var _a = serializeSummaries(this._summaryResolver, this._symbolResolver, symbolSummaries, typeSummaries), json = _a.json, exportAs = _a.exportAs;
exportAs.forEach(function(entry) {
targetStatements.push(variable(entry.exportAs).set(importExpr({
reference: entry.symbol
})).toDeclStmt());
targetExportedVars.push(entry.exportAs);
});
return new GeneratedFile(srcFileUrl, summaryFileName(srcFileUrl), json);
};
AotCompiler.prototype._compileModule = function(ngModuleType, targetStatements) {
var ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);
var providers = [];
if (this._localeId) {
providers.push({
token: createIdentifierToken(Identifiers.LOCALE_ID),
useValue: this._localeId
});
}
if (this._translationFormat) {
providers.push({
token: createIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),
useValue: this._translationFormat
});
}
var appCompileResult = this._ngModuleCompiler.compile(ngModule, providers);
targetStatements.push.apply(targetStatements, appCompileResult.statements);
return appCompileResult.ngModuleFactoryVar;
};
AotCompiler.prototype._compileComponentFactory = function(compMeta, ngModule, fileSuffix, targetStatements) {
var hostType = this._metadataResolver.getHostComponentType(compMeta.type.reference);
var hostMeta = createHostComponentMeta(hostType, compMeta, this._metadataResolver.getHostComponentViewClass(hostType));
var hostViewFactoryVar = this._compileComponent(hostMeta, ngModule, [ compMeta.type ], null, fileSuffix, targetStatements).viewClassVar;
var compFactoryVar = componentFactoryName(compMeta.type.reference);
var inputsExprs = [];
for (var propName in compMeta.inputs) {
var templateName = compMeta.inputs[propName];
inputsExprs.push(new LiteralMapEntry(propName, literal(templateName), false));
}
var outputsExprs = [];
for (var propName in compMeta.outputs) {
var templateName = compMeta.outputs[propName];
outputsExprs.push(new LiteralMapEntry(propName, literal(templateName), false));
}
targetStatements.push(variable(compFactoryVar).set(importExpr(createIdentifier(Identifiers.createComponentFactory)).callFn([ literal(compMeta.selector), importExpr(compMeta.type), variable(hostViewFactoryVar), new LiteralMapExpr(inputsExprs), new LiteralMapExpr(outputsExprs), literalArr(compMeta.template.ngContentSelectors.map(function(selector) {
return literal(selector);
})) ])).toDeclStmt(importType(createIdentifier(Identifiers.ComponentFactory), [ importType(compMeta.type) ], [ TypeModifier.Const ]), [ StmtModifier.Final ]));
return compFactoryVar;
};
AotCompiler.prototype._compileComponent = function(compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix, targetStatements) {
var _this = this;
var directives = directiveIdentifiers.map(function(dir) {
return _this._metadataResolver.getDirectiveSummary(dir.reference);
});
var pipes = ngModule.transitiveModule.pipes.map(function(pipe) {
return _this._metadataResolver.getPipeSummary(pipe.reference);
});
var _a = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, ngModule.schemas, templateSourceUrl(ngModule.type, compMeta, compMeta.template)), parsedTemplate = _a.template, usedPipes = _a.pipes;
var stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);
var viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, usedPipes);
if (componentStyles) {
targetStatements.push.apply(targetStatements, _resolveStyleStatements(this._symbolResolver, componentStyles, fileSuffix));
}
targetStatements.push.apply(targetStatements, viewResult.statements);
return {
viewClassVar: viewResult.viewClassVar,
compRenderTypeVar: viewResult.rendererTypeVar
};
};
AotCompiler.prototype._codgenStyles = function(fileUrl, stylesCompileResult, fileSuffix) {
_resolveStyleStatements(this._symbolResolver, stylesCompileResult, fileSuffix);
return this._codegenSourceModule(fileUrl, _stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [ stylesCompileResult.stylesVar ]);
};
AotCompiler.prototype._codegenSourceModule = function(srcFileUrl, genFileUrl, statements, exportedVars) {
return new GeneratedFile(srcFileUrl, genFileUrl, this._outputEmitter.emitStatements(sourceUrl(srcFileUrl), genFileUrl, statements, exportedVars, this._genFilePreamble));
};
return AotCompiler;
}();
function _resolveStyleStatements(reflector, compileResult, fileSuffix) {
compileResult.dependencies.forEach(function(dep) {
dep.valuePlaceholder.reference = reflector.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix), dep.name);
});
return compileResult.statements;
}
function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
return "" + stylesheetUrl + (shim ? ".shim" : "") + ".ngstyle" + suffix;
}
function _assertComponent(meta) {
if (!meta.isComponent) {
throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.");
}
}
function analyzeNgModules(programStaticSymbols, host, metadataResolver) {
var _a = _createNgModules(programStaticSymbols, host, metadataResolver), ngModules = _a.ngModules, symbolsMissingModule = _a.symbolsMissingModule;
return _analyzeNgModules(programStaticSymbols, ngModules, symbolsMissingModule, metadataResolver);
}
function analyzeAndValidateNgModules(programStaticSymbols, host, metadataResolver) {
var result = analyzeNgModules(programStaticSymbols, host, metadataResolver);
if (result.symbolsMissingModule && result.symbolsMissingModule.length) {
var messages = result.symbolsMissingModule.map(function(s) {
return "Cannot determine the module for class " + s.name + " in " + s.filePath + "! Add " + s.name + " to the NgModule to fix it.";
});
throw syntaxError(messages.join("\n"));
}
return result;
}
function _analyzeNgModules(programSymbols, ngModuleMetas, symbolsMissingModule, metadataResolver) {
var moduleMetasByRef = new Map();
ngModuleMetas.forEach(function(ngModule) {
return moduleMetasByRef.set(ngModule.type.reference, ngModule);
});
var ngModuleByPipeOrDirective = new Map();
var ngModulesByFile = new Map();
var ngDirectivesByFile = new Map();
var ngPipesByFile = new Map();
var ngInjectablesByFile = new Map();
var filePaths = new Set();
programSymbols.forEach(function(symbol) {
var filePath = symbol.filePath;
filePaths.add(filePath);
if (metadataResolver.isInjectable(symbol)) {
ngInjectablesByFile.set(filePath, (ngInjectablesByFile.get(filePath) || []).concat(symbol));
}
});
ngModuleMetas.forEach(function(ngModuleMeta) {
var srcFileUrl = ngModuleMeta.type.reference.filePath;
filePaths.add(srcFileUrl);
ngModulesByFile.set(srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference));
ngModuleMeta.declaredDirectives.forEach(function(dirIdentifier) {
var fileUrl = dirIdentifier.reference.filePath;
filePaths.add(fileUrl);
ngDirectivesByFile.set(fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirIdentifier.reference));
ngModuleByPipeOrDirective.set(dirIdentifier.reference, ngModuleMeta);
});
ngModuleMeta.declaredPipes.forEach(function(pipeIdentifier) {
var fileUrl = pipeIdentifier.reference.filePath;
filePaths.add(fileUrl);
ngPipesByFile.set(fileUrl, (ngPipesByFile.get(fileUrl) || []).concat(pipeIdentifier.reference));
ngModuleByPipeOrDirective.set(pipeIdentifier.reference, ngModuleMeta);
});
});
var files = [];
filePaths.forEach(function(srcUrl) {
var directives = ngDirectivesByFile.get(srcUrl) || [];
var pipes = ngPipesByFile.get(srcUrl) || [];
var ngModules = ngModulesByFile.get(srcUrl) || [];
var injectables = ngInjectablesByFile.get(srcUrl) || [];
files.push({
srcUrl: srcUrl,
directives: directives,
pipes: pipes,
ngModules: ngModules,
injectables: injectables
});
});
return {
ngModuleByPipeOrDirective: ngModuleByPipeOrDirective,
files: files,
ngModules: ngModuleMetas,
symbolsMissingModule: symbolsMissingModule
};
}
function extractProgramSymbols(staticSymbolResolver, files, host) {
var staticSymbols = [];
files.filter(function(fileName) {
return host.isSourceFile(fileName);
}).forEach(function(sourceFile) {
staticSymbolResolver.getSymbolsOf(sourceFile).forEach(function(symbol) {
var resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);
var symbolMeta = resolvedSymbol.metadata;
if (symbolMeta) {
if (symbolMeta.__symbolic != "error") {
staticSymbols.push(resolvedSymbol.symbol);
}
}
});
});
return staticSymbols;
}
function _createNgModules(programStaticSymbols, host, metadataResolver) {
var ngModules = new Map();
var programPipesAndDirectives = [];
var ngModulePipesAndDirective = new Set();
var addNgModule = function(staticSymbol) {
if (ngModules.has(staticSymbol) || !host.isSourceFile(staticSymbol.filePath)) {
return false;
}
var ngModule = metadataResolver.getNgModuleMetadata(staticSymbol, false);
if (ngModule) {
ngModules.set(ngModule.type.reference, ngModule);
ngModule.declaredDirectives.forEach(function(dir) {
return ngModulePipesAndDirective.add(dir.reference);
});
ngModule.declaredPipes.forEach(function(pipe) {
return ngModulePipesAndDirective.add(pipe.reference);
});
ngModule.transitiveModule.modules.forEach(function(modMeta) {
return addNgModule(modMeta.reference);
});
}
return !!ngModule;
};
programStaticSymbols.forEach(function(staticSymbol) {
if (!addNgModule(staticSymbol) && (metadataResolver.isDirective(staticSymbol) || metadataResolver.isPipe(staticSymbol))) {
programPipesAndDirectives.push(staticSymbol);
}
});
var symbolsMissingModule = programPipesAndDirectives.filter(function(s) {
return !ngModulePipesAndDirective.has(s);
});
return {
ngModules: Array.from(ngModules.values()),
symbolsMissingModule: symbolsMissingModule
};
}
var StaticAndDynamicReflectionCapabilities = function() {
function StaticAndDynamicReflectionCapabilities(staticDelegate) {
this.staticDelegate = staticDelegate;
this.dynamicDelegate = new _angular_core.ɵReflectionCapabilities();
}
StaticAndDynamicReflectionCapabilities.install = function(staticDelegate) {
_angular_core.ɵreflector.updateCapabilities(new StaticAndDynamicReflectionCapabilities(staticDelegate));
};
StaticAndDynamicReflectionCapabilities.prototype.isReflectionEnabled = function() {
return true;
};
StaticAndDynamicReflectionCapabilities.prototype.factory = function(type) {
return this.dynamicDelegate.factory(type);
};
StaticAndDynamicReflectionCapabilities.prototype.hasLifecycleHook = function(type, lcProperty) {
return isStaticType(type) ? this.staticDelegate.hasLifecycleHook(type, lcProperty) : this.dynamicDelegate.hasLifecycleHook(type, lcProperty);
};
StaticAndDynamicReflectionCapabilities.prototype.parameters = function(type) {
return isStaticType(type) ? this.staticDelegate.parameters(type) : this.dynamicDelegate.parameters(type);
};
StaticAndDynamicReflectionCapabilities.prototype.annotations = function(type) {
return isStaticType(type) ? this.staticDelegate.annotations(type) : this.dynamicDelegate.annotations(type);
};
StaticAndDynamicReflectionCapabilities.prototype.propMetadata = function(typeOrFunc) {
return isStaticType(typeOrFunc) ? this.staticDelegate.propMetadata(typeOrFunc) : this.dynamicDelegate.propMetadata(typeOrFunc);
};
StaticAndDynamicReflectionCapabilities.prototype.getter = function(name) {
return this.dynamicDelegate.getter(name);
};
StaticAndDynamicReflectionCapabilities.prototype.setter = function(name) {
return this.dynamicDelegate.setter(name);
};
StaticAndDynamicReflectionCapabilities.prototype.method = function(name) {
return this.dynamicDelegate.method(name);
};
StaticAndDynamicReflectionCapabilities.prototype.importUri = function(type) {
return this.staticDelegate.importUri(type);
};
StaticAndDynamicReflectionCapabilities.prototype.resourceUri = function(type) {
return this.staticDelegate.resourceUri(type);
};
StaticAndDynamicReflectionCapabilities.prototype.resolveIdentifier = function(name, moduleUrl, members, runtime) {
return this.staticDelegate.resolveIdentifier(name, moduleUrl, members);
};
StaticAndDynamicReflectionCapabilities.prototype.resolveEnum = function(enumIdentifier, name) {
if (isStaticType(enumIdentifier)) {
return this.staticDelegate.resolveEnum(enumIdentifier, name);
} else {
return null;
}
};
return StaticAndDynamicReflectionCapabilities;
}();
function isStaticType(type) {
return typeof type === "object" && type.name && type.filePath;
}
var ANGULAR_CORE = "@angular/core";
var HIDDEN_KEY = /^\$.*\$$/;
var IGNORE = {
__symbolic: "ignore"
};
function shouldIgnore(value) {
return value && value.__symbolic == "ignore";
}
var StaticReflector = function() {
function StaticReflector(summaryResolver, symbolResolver, knownMetadataClasses, knownMetadataFunctions, errorRecorder) {
if (knownMetadataClasses === void 0) {
knownMetadataClasses = [];
}
if (knownMetadataFunctions === void 0) {
knownMetadataFunctions = [];
}
var _this = this;
this.summaryResolver = summaryResolver;
this.symbolResolver = symbolResolver;
this.errorRecorder = errorRecorder;
this.annotationCache = new Map();
this.propertyCache = new Map();
this.parameterCache = new Map();
this.methodCache = new Map();
this.conversionMap = new Map();
this.annotationForParentClassWithSummaryKind = new Map();
this.annotationNames = new Map();
this.initializeConversionMap();
knownMetadataClasses.forEach(function(kc) {
return _this._registerDecoratorOrConstructor(_this.getStaticSymbol(kc.filePath, kc.name), kc.ctor);
});
knownMetadataFunctions.forEach(function(kf) {
return _this._registerFunction(_this.getStaticSymbol(kf.filePath, kf.name), kf.fn);
});
this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Directive, [ _angular_core.Directive, _angular_core.Component ]);
this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Pipe, [ _angular_core.Pipe ]);
this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.NgModule, [ _angular_core.NgModule ]);
this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Injectable, [ _angular_core.Injectable, _angular_core.Pipe, _angular_core.Directive, _angular_core.Component, _angular_core.NgModule ]);
this.annotationNames.set(_angular_core.Directive, "Directive");
this.annotationNames.set(_angular_core.Component, "Component");
this.annotationNames.set(_angular_core.Pipe, "Pipe");
this.annotationNames.set(_angular_core.NgModule, "NgModule");
this.annotationNames.set(_angular_core.Injectable, "Injectable");
}
StaticReflector.prototype.importUri = function(typeOrFunc) {
var staticSymbol = this.findSymbolDeclaration(typeOrFunc);
return staticSymbol ? staticSymbol.filePath : null;
};
StaticReflector.prototype.resourceUri = function(typeOrFunc) {
var staticSymbol = this.findSymbolDeclaration(typeOrFunc);
return this.symbolResolver.getResourcePath(staticSymbol);
};
StaticReflector.prototype.resolveIdentifier = function(name, moduleUrl, members) {
var importSymbol = this.getStaticSymbol(moduleUrl, name);
var rootSymbol = this.findDeclaration(moduleUrl, name);
if (importSymbol != rootSymbol) {
this.symbolResolver.recordImportAs(rootSymbol, importSymbol);
}
if (members && members.length) {
return this.getStaticSymbol(rootSymbol.filePath, rootSymbol.name, members);
}
return rootSymbol;
};
StaticReflector.prototype.findDeclaration = function(moduleUrl, name, containingFile) {
return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));
};
StaticReflector.prototype.findSymbolDeclaration = function(symbol) {
var resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);
if (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {
return this.findSymbolDeclaration(resolvedSymbol.metadata);
} else {
return symbol;
}
};
StaticReflector.prototype.resolveEnum = function(enumIdentifier, name) {
var staticSymbol = enumIdentifier;
var members = (staticSymbol.members || []).concat(name);
return this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name, members);
};
StaticReflector.prototype.annotations = function(type) {
var _this = this;
var annotations = this.annotationCache.get(type);
if (!annotations) {
annotations = [];
var classMetadata = this.getTypeMetadata(type);
var parentType = this.findParentType(type, classMetadata);
if (parentType) {
var parentAnnotations = this.annotations(parentType);
annotations.push.apply(annotations, parentAnnotations);
}
var ownAnnotations_1 = [];
if (classMetadata["decorators"]) {
ownAnnotations_1 = this.simplify(type, classMetadata["decorators"]);
annotations.push.apply(annotations, ownAnnotations_1);
}
if (parentType && !this.summaryResolver.isLibraryFile(type.filePath) && this.summaryResolver.isLibraryFile(parentType.filePath)) {
var summary = this.summaryResolver.resolveSummary(parentType);
if (summary && summary.type) {
var requiredAnnotationTypes = this.annotationForParentClassWithSummaryKind.get(summary.type.summaryKind);
var typeHasRequiredAnnotation = requiredAnnotationTypes.some(function(requiredType) {
return ownAnnotations_1.some(function(ann) {
return ann instanceof requiredType;
});
});
if (!typeHasRequiredAnnotation) {
this.reportError(syntaxError("Class " + type.name + " in " + type.filePath + " extends from a " + CompileSummaryKind[summary.type.summaryKind] + " in another compilation unit without duplicating the decorator. " + ("Please add a " + requiredAnnotationTypes.map(function(type) {
return _this.annotationNames.get(type);
}).join(" or ") + " decorator to the class.")), type);
}
}
}
this.annotationCache.set(type, annotations.filter(function(ann) {
return !!ann;
}));
}
return annotations;
};
StaticReflector.prototype.propMetadata = function(type) {
var _this = this;
var propMetadata = this.propertyCache.get(type);
if (!propMetadata) {
var classMetadata = this.getTypeMetadata(type);
propMetadata = {};
var parentType = this.findParentType(type, classMetadata);
if (parentType) {
var parentPropMetadata_1 = this.propMetadata(parentType);
Object.keys(parentPropMetadata_1).forEach(function(parentProp) {
propMetadata[parentProp] = parentPropMetadata_1[parentProp];
});
}
var members_1 = classMetadata["members"] || {};
Object.keys(members_1).forEach(function(propName) {
var propData = members_1[propName];
var prop = propData.find(function(a) {
return a["__symbolic"] == "property" || a["__symbolic"] == "method";
});
var decorators = [];
if (propMetadata[propName]) {
decorators.push.apply(decorators, propMetadata[propName]);
}
propMetadata[propName] = decorators;
if (prop && prop["decorators"]) {
decorators.push.apply(decorators, _this.simplify(type, prop["decorators"]));
}
});
this.propertyCache.set(type, propMetadata);
}
return propMetadata;
};
StaticReflector.prototype.parameters = function(type) {
if (!(type instanceof StaticSymbol)) {
this.reportError(new Error("parameters received " + JSON.stringify(type) + " which is not a StaticSymbol"), type);
return [];
}
try {
var parameters_1 = this.parameterCache.get(type);
if (!parameters_1) {
var classMetadata = this.getTypeMetadata(type);
var parentType = this.findParentType(type, classMetadata);
var members = classMetadata ? classMetadata["members"] : null;
var ctorData = members ? members["__ctor__"] : null;
if (ctorData) {
var ctor = ctorData.find(function(a) {
return a["__symbolic"] == "constructor";
});
var parameterTypes = this.simplify(type, ctor["parameters"] || []);
var parameterDecorators_1 = this.simplify(type, ctor["parameterDecorators"] || []);
parameters_1 = [];
parameterTypes.forEach(function(paramType, index) {
var nestedResult = [];
if (paramType) {
nestedResult.push(paramType);
}
var decorators = parameterDecorators_1 ? parameterDecorators_1[index] : null;
if (decorators) {
nestedResult.push.apply(nestedResult, decorators);
}
parameters_1.push(nestedResult);
});
} else if (parentType) {
parameters_1 = this.parameters(parentType);
}
if (!parameters_1) {
parameters_1 = [];
}
this.parameterCache.set(type, parameters_1);
}
return parameters_1;
} catch (e) {
console.error("Failed on type " + JSON.stringify(type) + " with error " + e);
throw e;
}
};
StaticReflector.prototype._methodNames = function(type) {
var methodNames = this.methodCache.get(type);
if (!methodNames) {
var classMetadata = this.getTypeMetadata(type);
methodNames = {};
var parentType = this.findParentType(type, classMetadata);
if (parentType) {
var parentMethodNames_1 = this._methodNames(parentType);
Object.keys(parentMethodNames_1).forEach(function(parentProp) {
methodNames[parentProp] = parentMethodNames_1[parentProp];
});
}
var members_2 = classMetadata["members"] || {};
Object.keys(members_2).forEach(function(propName) {
var propData = members_2[propName];
var isMethod = propData.some(function(a) {
return a["__symbolic"] == "method";
});
methodNames[propName] = methodNames[propName] || isMethod;
});
this.methodCache.set(type, methodNames);
}
return methodNames;
};
StaticReflector.prototype.findParentType = function(type, classMetadata) {
var parentType = this.trySimplify(type, classMetadata["extends"]);
if (parentType instanceof StaticSymbol) {
return parentType;
}
};
StaticReflector.prototype.hasLifecycleHook = function(type, lcProperty) {
if (!(type instanceof StaticSymbol)) {
this.reportError(new Error("hasLifecycleHook received " + JSON.stringify(type) + " which is not a StaticSymbol"), type);
}
try {
return !!this._methodNames(type)[lcProperty];
} catch (e) {
console.error("Failed on type " + JSON.stringify(type) + " with error " + e);
throw e;
}
};
StaticReflector.prototype._registerDecoratorOrConstructor = function(type, ctor) {
this.conversionMap.set(type, function(context, args) {
return new (ctor.bind.apply(ctor, [ void 0 ].concat(args)))();
});
};
StaticReflector.prototype._registerFunction = function(type, fn) {
this.conversionMap.set(type, function(context, args) {
return fn.apply(undefined, args);
});
};
StaticReflector.prototype.initializeConversionMap = function() {
this.injectionToken = this.findDeclaration(ANGULAR_CORE, "InjectionToken");
this.opaqueToken = this.findDeclaration(ANGULAR_CORE, "OpaqueToken");
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Host"), _angular_core.Host);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Injectable"), _angular_core.Injectable);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Self"), _angular_core.Self);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "SkipSelf"), _angular_core.SkipSelf);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Inject"), _angular_core.Inject);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Optional"), _angular_core.Optional);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Attribute"), _angular_core.Attribute);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "ContentChild"), _angular_core.ContentChild);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "ContentChildren"), _angular_core.ContentChildren);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "ViewChild"), _angular_core.ViewChild);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "ViewChildren"), _angular_core.ViewChildren);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Input"), _angular_core.Input);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Output"), _angular_core.Output);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Pipe"), _angular_core.Pipe);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "HostBinding"), _angular_core.HostBinding);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "HostListener"), _angular_core.HostListener);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Directive"), _angular_core.Directive);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Component"), _angular_core.Component);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "NgModule"), _angular_core.NgModule);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Host"), _angular_core.Host);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Self"), _angular_core.Self);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "SkipSelf"), _angular_core.SkipSelf);
this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Optional"), _angular_core.Optional);
this._registerFunction(this.findDeclaration(ANGULAR_CORE, "trigger"), _angular_core.trigger);
this._registerFunction(this.findDeclaration(ANGULAR_CORE, "state"), _angular_core.state);
this._registerFunction(this.findDeclaration(ANGULAR_CORE, "transition"), _angular_core.transition);
this._registerFunction(this.findDeclaration(ANGULAR_CORE, "style"), _angular_core.style);
this._registerFunction(this.findDeclaration(ANGULAR_CORE, "animate"), _angular_core.animate);
this._registerFunction(this.findDeclaration(ANGULAR_CORE, "keyframes"), _angular_core.keyframes);
this._registerFunction(this.findDeclaration(ANGULAR_CORE, "sequence"), _angular_core.sequence);
this._registerFunction(this.findDeclaration(ANGULAR_CORE, "group"), _angular_core.group);
};
StaticReflector.prototype.getStaticSymbol = function(declarationFile, name, members) {
return this.symbolResolver.getStaticSymbol(declarationFile, name, members);
};
StaticReflector.prototype.reportError = function(error, context, path) {
if (this.errorRecorder) {
this.errorRecorder(error, context && context.filePath || path);
} else {
throw error;
}
};
StaticReflector.prototype.trySimplify = function(context, value) {
var originalRecorder = this.errorRecorder;
this.errorRecorder = function(error, fileName) {};
var result = this.simplify(context, value);
this.errorRecorder = originalRecorder;
return result;
};
StaticReflector.prototype.simplify = function(context, value) {
var _this = this;
var self = this;
var scope = BindingScope.empty;
var calling = new Map();
function simplifyInContext(context, value, depth) {
function resolveReferenceValue(staticSymbol) {
var resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);
return resolvedSymbol ? resolvedSymbol.metadata : null;
}
function simplifyCall(functionSymbol, targetFunction, args) {
if (targetFunction && targetFunction["__symbolic"] == "function") {
if (calling.get(functionSymbol)) {
throw new Error("Recursion not supported");
}
calling.set(functionSymbol, true);
try {
var value_1 = targetFunction["value"];
if (value_1 && (depth != 0 || value_1.__symbolic != "error")) {
var parameters = targetFunction["parameters"];
var defaults = targetFunction.defaults;
args = args.map(function(arg) {
return simplifyInContext(context, arg, depth + 1);
}).map(function(arg) {
return shouldIgnore(arg) ? undefined : arg;
});
if (defaults && defaults.length > args.length) {
args.push.apply(args, defaults.slice(args.length).map(function(value) {
return simplify(value);
}));
}
var functionScope = BindingScope.build();
for (var i = 0; i < parameters.length; i++) {
functionScope.define(parameters[i], args[i]);
}
var oldScope = scope;
var result_1;
try {
scope = functionScope.done();
result_1 = simplifyInContext(functionSymbol, value_1, depth + 1);
} finally {
scope = oldScope;
}
return result_1;
}
} finally {
calling.delete(functionSymbol);
}
}
if (depth === 0) {
return IGNORE;
}
return simplify({
__symbolic: "error",
message: "Function call not supported",
context: functionSymbol
});
}
function simplify(expression) {
if (isPrimitive(expression)) {
return expression;
}
if (expression instanceof Array) {
var result_2 = [];
for (var _i = 0, _a = expression; _i < _a.length; _i++) {
var item = _a[_i];
if (item && item.__symbolic === "spread") {
var spreadArray = simplify(item.expression);
if (Array.isArray(spreadArray)) {
for (var _b = 0, spreadArray_1 = spreadArray; _b < spreadArray_1.length; _b++) {
var spreadItem = spreadArray_1[_b];
result_2.push(spreadItem);
}
continue;
}
}
var value_2 = simplify(item);
if (shouldIgnore(value_2)) {
continue;
}
result_2.push(value_2);
}
return result_2;
}
if (expression instanceof StaticSymbol) {
if (expression === self.injectionToken || expression === self.opaqueToken || self.conversionMap.has(expression)) {
return expression;
} else {
var staticSymbol = expression;
var declarationValue = resolveReferenceValue(staticSymbol);
if (declarationValue) {
return simplifyInContext(staticSymbol, declarationValue, depth + 1);
} else {
return staticSymbol;
}
}
}
if (expression) {
if (expression["__symbolic"]) {
var staticSymbol = void 0;
switch (expression["__symbolic"]) {
case "binop":
var left = simplify(expression["left"]);
if (shouldIgnore(left)) return left;
var right = simplify(expression["right"]);
if (shouldIgnore(right)) return right;
switch (expression["operator"]) {
case "&&":
return left && right;

case "||":
return left || right;

case "|":
return left | right;

case "^":
return left ^ right;

case "&":
return left & right;

case "==":
return left == right;

case "!=":
return left != right;

case "===":
return left === right;

case "!==":
return left !== right;

case "<":
return left < right;

case ">":
return left > right;

case "<=":
return left <= right;

case ">=":
return left >= right;

case "<<":
return left << right;

case ">>":
return left >> right;

case "+":
return left + right;

case "-":
return left - right;

case "*":
return left * right;

case "/":
return left / right;

case "%":
return left % right;
}
return null;

case "if":
var condition = simplify(expression["condition"]);
return condition ? simplify(expression["thenExpression"]) : simplify(expression["elseExpression"]);

case "pre":
var operand = simplify(expression["operand"]);
if (shouldIgnore(operand)) return operand;
switch (expression["operator"]) {
case "+":
return operand;

case "-":
return -operand;

case "!":
return !operand;

case "~":
return ~operand;
}
return null;

case "index":
var indexTarget = simplify(expression["expression"]);
var index = simplify(expression["index"]);
if (indexTarget && isPrimitive(index)) return indexTarget[index];
return null;

case "select":
var member = expression["member"];
var selectContext = context;
var selectTarget = simplify(expression["expression"]);
if (selectTarget instanceof StaticSymbol) {
var members = selectTarget.members.concat(member);
selectContext = self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);
var declarationValue = resolveReferenceValue(selectContext);
if (declarationValue) {
return simplifyInContext(selectContext, declarationValue, depth + 1);
} else {
return selectContext;
}
}
if (selectTarget && isPrimitive(member)) return simplifyInContext(selectContext, selectTarget[member], depth + 1);
return null;

case "reference":
var name = expression["name"];
var localValue = scope.resolve(name);
if (localValue != BindingScope.missing) {
return localValue;
}
break;

case "class":
return context;

case "function":
return context;

case "new":
case "call":
staticSymbol = simplifyInContext(context, expression["expression"], depth + 1);
if (staticSymbol instanceof StaticSymbol) {
if (staticSymbol === self.injectionToken || staticSymbol === self.opaqueToken) {
return context;
}
var argExpressions = expression["arguments"] || [];
var converter = self.conversionMap.get(staticSymbol);
if (converter) {
var args = argExpressions.map(function(arg) {
return simplifyInContext(context, arg, depth + 1);
}).map(function(arg) {
return shouldIgnore(arg) ? undefined : arg;
});
return converter(context, args);
} else {
var targetFunction = resolveReferenceValue(staticSymbol);
return simplifyCall(staticSymbol, targetFunction, argExpressions);
}
}
return IGNORE;

case "error":
var message = produceErrorMessage(expression);
if (expression["line"]) {
message = message + " (position " + (expression["line"] + 1) + ":" + (expression["character"] + 1) + " in the original .ts file)";
self.reportError(positionalError(message, context.filePath, expression["line"], expression["character"]), context);
} else {
self.reportError(new Error(message), context);
}
return IGNORE;

case "ignore":
return expression;
}
return null;
}
return mapStringMap(expression, function(value, name) {
return simplify(value);
});
}
return IGNORE;
}
try {
return simplify(value);
} catch (e) {
var members = context.members.length ? "." + context.members.join(".") : "";
var message = e.message + ", resolving symbol " + context.name + members + " in " + context.filePath;
if (e.fileName) {
throw positionalError(message, e.fileName, e.line, e.column);
}
throw syntaxError(message);
}
}
var recordedSimplifyInContext = function(context, value, depth) {
try {
return simplifyInContext(context, value, depth);
} catch (e) {
_this.reportError(e, context);
}
};
var result = this.errorRecorder ? recordedSimplifyInContext(context, value, 0) : simplifyInContext(context, value, 0);
if (shouldIgnore(result)) {
return undefined;
}
return result;
};
StaticReflector.prototype.getTypeMetadata = function(type) {
var resolvedSymbol = this.symbolResolver.resolveSymbol(type);
return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata : {
__symbolic: "class"
};
};
return StaticReflector;
}();
function expandedMessage(error) {
switch (error.message) {
case "Reference to non-exported class":
if (error.context && error.context.className) {
return "Reference to a non-exported class " + error.context.className + ". Consider exporting the class";
}
break;

case "Variable not initialized":
return "Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler";

case "Destructuring not supported":
return "Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring";

case "Could not resolve type":
if (error.context && error.context.typeName) {
return "Could not resolve type " + error.context.typeName;
}
break;

case "Function call not supported":
var prefix = error.context && error.context.name ? "Calling function '" + error.context.name + "', f" : "F";
return prefix + "unction calls are not supported. Consider replacing the function or lambda with a reference to an exported function";

case "Reference to a local symbol":
if (error.context && error.context.name) {
return "Reference to a local (non-exported) symbol '" + error.context.name + "'. Consider exporting the symbol";
}
break;
}
return error.message;
}
function produceErrorMessage(error) {
return "Error encountered resolving symbol values statically. " + expandedMessage(error);
}
function mapStringMap(input, transform) {
if (!input) return {};
var result = {};
Object.keys(input).forEach(function(key) {
var value = transform(input[key], key);
if (!shouldIgnore(value)) {
if (HIDDEN_KEY.test(key)) {
Object.defineProperty(result, key, {
enumerable: false,
configurable: true,
value: value
});
} else {
result[key] = value;
}
}
});
return result;
}
function isPrimitive(o) {
return o === null || typeof o !== "function" && typeof o !== "object";
}
var BindingScope = function() {
function BindingScope() {}
BindingScope.prototype.resolve = function(name) {};
BindingScope.build = function() {
var current = new Map();
return {
define: function(name, value) {
current.set(name, value);
return this;
},
done: function() {
return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;
}
};
};
return BindingScope;
}();
BindingScope.missing = {};
BindingScope.empty = {
resolve: function(name) {
return BindingScope.missing;
}
};
var PopulatedScope = function(_super) {
__extends(PopulatedScope, _super);
function PopulatedScope(bindings) {
var _this = _super.call(this) || this;
_this.bindings = bindings;
return _this;
}
PopulatedScope.prototype.resolve = function(name) {
return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing;
};
return PopulatedScope;
}(BindingScope);
function positionalError(message, fileName, line, column) {
var result = new Error(message);
result.fileName = fileName;
result.line = line;
result.column = column;
return result;
}
var ResolvedStaticSymbol = function() {
function ResolvedStaticSymbol(symbol, metadata) {
this.symbol = symbol;
this.metadata = metadata;
}
return ResolvedStaticSymbol;
}();
var SUPPORTED_SCHEMA_VERSION = 3;
var StaticSymbolResolver = function() {
function StaticSymbolResolver(host, staticSymbolCache, summaryResolver, errorRecorder) {
this.host = host;
this.staticSymbolCache = staticSymbolCache;
this.summaryResolver = summaryResolver;
this.errorRecorder = errorRecorder;
this.metadataCache = new Map();
this.resolvedSymbols = new Map();
this.resolvedFilePaths = new Set();
this.importAs = new Map();
this.symbolResourcePaths = new Map();
this.symbolFromFile = new Map();
}
StaticSymbolResolver.prototype.resolveSymbol = function(staticSymbol) {
if (staticSymbol.members.length > 0) {
return this._resolveSymbolMembers(staticSymbol);
}
var result = this.resolvedSymbols.get(staticSymbol);
if (result) {
return result;
}
result = this._resolveSymbolFromSummary(staticSymbol);
if (result) {
return result;
}
this._createSymbolsOf(staticSymbol.filePath);
result = this.resolvedSymbols.get(staticSymbol);
return result;
};
StaticSymbolResolver.prototype.getImportAs = function(staticSymbol) {
if (staticSymbol.members.length) {
var baseSymbol = this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name);
var baseImportAs = this.getImportAs(baseSymbol);
return baseImportAs ? this.getStaticSymbol(baseImportAs.filePath, baseImportAs.name, staticSymbol.members) : null;
}
var result = this.summaryResolver.getImportAs(staticSymbol);
if (!result) {
result = this.importAs.get(staticSymbol);
}
return result;
};
StaticSymbolResolver.prototype.getResourcePath = function(staticSymbol) {
return this.symbolResourcePaths.get(staticSymbol) || staticSymbol.filePath;
};
StaticSymbolResolver.prototype.getTypeArity = function(staticSymbol) {
if (isNgFactoryFile(staticSymbol.filePath)) {
return null;
}
var resolvedSymbol = this.resolveSymbol(staticSymbol);
while (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {
resolvedSymbol = this.resolveSymbol(resolvedSymbol.metadata);
}
return resolvedSymbol && resolvedSymbol.metadata && resolvedSymbol.metadata.arity || null;
};
StaticSymbolResolver.prototype.recordImportAs = function(sourceSymbol, targetSymbol) {
sourceSymbol.assertNoMembers();
targetSymbol.assertNoMembers();
this.importAs.set(sourceSymbol, targetSymbol);
};
StaticSymbolResolver.prototype.invalidateFile = function(fileName) {
this.metadataCache.delete(fileName);
this.resolvedFilePaths.delete(fileName);
var symbols = this.symbolFromFile.get(fileName);
if (symbols) {
this.symbolFromFile.delete(fileName);
for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {
var symbol = symbols_1[_i];
this.resolvedSymbols.delete(symbol);
this.importAs.delete(symbol);
this.symbolResourcePaths.delete(symbol);
}
}
};
StaticSymbolResolver.prototype._resolveSymbolMembers = function(staticSymbol) {
var members = staticSymbol.members;
var baseResolvedSymbol = this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name));
if (!baseResolvedSymbol) {
return null;
}
var baseMetadata = baseResolvedSymbol.metadata;
if (baseMetadata instanceof StaticSymbol) {
return new ResolvedStaticSymbol(staticSymbol, this.getStaticSymbol(baseMetadata.filePath, baseMetadata.name, members));
} else if (baseMetadata && baseMetadata.__symbolic === "class") {
if (baseMetadata.statics && members.length === 1) {
return new ResolvedStaticSymbol(staticSymbol, baseMetadata.statics[members[0]]);
}
} else {
var value = baseMetadata;
for (var i = 0; i < members.length && value; i++) {
value = value[members[i]];
}
return new ResolvedStaticSymbol(staticSymbol, value);
}
return null;
};
StaticSymbolResolver.prototype._resolveSymbolFromSummary = function(staticSymbol) {
var summary = this.summaryResolver.resolveSummary(staticSymbol);
return summary ? new ResolvedStaticSymbol(staticSymbol, summary.metadata) : null;
};
StaticSymbolResolver.prototype.getStaticSymbol = function(declarationFile, name, members) {
return this.staticSymbolCache.get(declarationFile, name, members);
};
StaticSymbolResolver.prototype.getSymbolsOf = function(filePath) {
var symbols = new Set(this.summaryResolver.getSymbolsOf(filePath));
this._createSymbolsOf(filePath);
this.resolvedSymbols.forEach(function(resolvedSymbol) {
if (resolvedSymbol.symbol.filePath === filePath) {
symbols.add(resolvedSymbol.symbol);
}
});
return Array.from(symbols);
};
StaticSymbolResolver.prototype._createSymbolsOf = function(filePath) {
var _this = this;
if (this.resolvedFilePaths.has(filePath)) {
return;
}
this.resolvedFilePaths.add(filePath);
var resolvedSymbols = [];
var metadata = this.getModuleMetadata(filePath);
if (metadata["metadata"]) {
var topLevelSymbolNames_1 = new Set(Object.keys(metadata["metadata"]).map(unescapeIdentifier));
var origins_1 = metadata["origins"] || {};
Object.keys(metadata["metadata"]).forEach(function(metadataKey) {
var symbolMeta = metadata["metadata"][metadataKey];
var name = unescapeIdentifier(metadataKey);
var symbol = _this.getStaticSymbol(filePath, name);
var importSymbol = undefined;
if (metadata["importAs"]) {
importSymbol = _this.getStaticSymbol(metadata["importAs"], name);
_this.recordImportAs(symbol, importSymbol);
}
var origin = origins_1.hasOwnProperty(metadataKey) && origins_1[metadataKey];
if (origin) {
var originFilePath = _this.resolveModule(origin, filePath);
if (!originFilePath) {
_this.reportError(new Error("Couldn't resolve original symbol for " + origin + " from " + filePath));
} else {
_this.symbolResourcePaths.set(symbol, originFilePath);
}
}
resolvedSymbols.push(_this.createResolvedSymbol(symbol, filePath, topLevelSymbolNames_1, symbolMeta));
});
}
if (metadata["exports"]) {
var _loop_1 = function(moduleExport) {
if (moduleExport.export) {
moduleExport.export.forEach(function(exportSymbol) {
var symbolName;
if (typeof exportSymbol === "string") {
symbolName = exportSymbol;
} else {
symbolName = exportSymbol.as;
}
symbolName = unescapeIdentifier(symbolName);
var symName = symbolName;
if (typeof exportSymbol !== "string") {
symName = unescapeIdentifier(exportSymbol.name);
}
var resolvedModule = _this.resolveModule(moduleExport.from, filePath);
if (resolvedModule) {
var targetSymbol = _this.getStaticSymbol(resolvedModule, symName);
var sourceSymbol = _this.getStaticSymbol(filePath, symbolName);
resolvedSymbols.push(_this.createExport(sourceSymbol, targetSymbol));
}
});
} else {
var resolvedModule = this_1.resolveModule(moduleExport.from, filePath);
if (resolvedModule) {
var nestedExports = this_1.getSymbolsOf(resolvedModule);
nestedExports.forEach(function(targetSymbol) {
var sourceSymbol = _this.getStaticSymbol(filePath, targetSymbol.name);
resolvedSymbols.push(_this.createExport(sourceSymbol, targetSymbol));
});
}
}
};
var this_1 = this;
for (var _i = 0, _a = metadata["exports"]; _i < _a.length; _i++) {
var moduleExport = _a[_i];
_loop_1(moduleExport);
}
}
resolvedSymbols.forEach(function(resolvedSymbol) {
return _this.resolvedSymbols.set(resolvedSymbol.symbol, resolvedSymbol);
});
this.symbolFromFile.set(filePath, resolvedSymbols.map(function(resolvedSymbol) {
return resolvedSymbol.symbol;
}));
};
StaticSymbolResolver.prototype.createResolvedSymbol = function(sourceSymbol, topLevelPath, topLevelSymbolNames, metadata) {
if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath) && metadata && metadata["__symbolic"] === "class") {
var transformedMeta_1 = {
__symbolic: "class",
arity: metadata.arity
};
return new ResolvedStaticSymbol(sourceSymbol, transformedMeta_1);
}
var self = this;
var ReferenceTransformer = function(_super) {
__extends(ReferenceTransformer, _super);
function ReferenceTransformer() {
return _super !== null && _super.apply(this, arguments) || this;
}
ReferenceTransformer.prototype.visitStringMap = function(map, functionParams) {
var symbolic = map["__symbolic"];
if (symbolic === "function") {
var oldLen = functionParams.length;
functionParams.push.apply(functionParams, map["parameters"] || []);
var result = _super.prototype.visitStringMap.call(this, map, functionParams);
functionParams.length = oldLen;
return result;
} else if (symbolic === "reference") {
var module_1 = map["module"];
var name = map["name"] ? unescapeIdentifier(map["name"]) : map["name"];
if (!name) {
return null;
}
var filePath = void 0;
if (module_1) {
filePath = self.resolveModule(module_1, sourceSymbol.filePath);
if (!filePath) {
return {
__symbolic: "error",
message: "Could not resolve " + module_1 + " relative to " + sourceSymbol.filePath + "."
};
}
return self.getStaticSymbol(filePath, name);
} else if (functionParams.indexOf(name) >= 0) {
return {
__symbolic: "reference",
name: name
};
} else {
if (topLevelSymbolNames.has(name)) {
return self.getStaticSymbol(topLevelPath, name);
}
null;
}
} else {
return _super.prototype.visitStringMap.call(this, map, functionParams);
}
};
return ReferenceTransformer;
}(ValueTransformer);
var transformedMeta = visitValue(metadata, new ReferenceTransformer(), []);
if (transformedMeta instanceof StaticSymbol) {
return this.createExport(sourceSymbol, transformedMeta);
}
return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);
};
StaticSymbolResolver.prototype.createExport = function(sourceSymbol, targetSymbol) {
sourceSymbol.assertNoMembers();
targetSymbol.assertNoMembers();
if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath)) {
this.importAs.set(targetSymbol, this.getImportAs(sourceSymbol) || sourceSymbol);
}
return new ResolvedStaticSymbol(sourceSymbol, targetSymbol);
};
StaticSymbolResolver.prototype.reportError = function(error, context, path) {
if (this.errorRecorder) {
this.errorRecorder(error, context && context.filePath || path);
} else {
throw error;
}
};
StaticSymbolResolver.prototype.getModuleMetadata = function(module) {
var moduleMetadata = this.metadataCache.get(module);
if (!moduleMetadata) {
var moduleMetadatas = this.host.getMetadataFor(module);
if (moduleMetadatas) {
var maxVersion_1 = -1;
moduleMetadatas.forEach(function(md) {
if (md["version"] > maxVersion_1) {
maxVersion_1 = md["version"];
moduleMetadata = md;
}
});
}
if (!moduleMetadata) {
moduleMetadata = {
__symbolic: "module",
version: SUPPORTED_SCHEMA_VERSION,
module: module,
metadata: {}
};
}
if (moduleMetadata["version"] != SUPPORTED_SCHEMA_VERSION) {
var errorMessage = moduleMetadata["version"] == 2 ? "Unsupported metadata version " + moduleMetadata["version"] + " for module " + module + ". This module should be compiled with a newer version of ngc" : "Metadata version mismatch for module " + module + ", found version " + moduleMetadata["version"] + ", expected " + SUPPORTED_SCHEMA_VERSION;
this.reportError(new Error(errorMessage));
}
this.metadataCache.set(module, moduleMetadata);
}
return moduleMetadata;
};
StaticSymbolResolver.prototype.getSymbolByModule = function(module, symbolName, containingFile) {
var filePath = this.resolveModule(module, containingFile);
if (!filePath) {
this.reportError(new Error("Could not resolve module " + module + (containingFile ? " relative to $ {\n            containingFile\n          } " : "")));
return this.getStaticSymbol("ERROR:" + module, symbolName);
}
return this.getStaticSymbol(filePath, symbolName);
};
StaticSymbolResolver.prototype.resolveModule = function(module, containingFile) {
try {
return this.host.moduleNameToFileName(module, containingFile);
} catch (e) {
console.error("Could not resolve module '" + module + "' relative to file " + containingFile);
this.reportError(e, undefined, containingFile);
}
return null;
};
return StaticSymbolResolver;
}();
function unescapeIdentifier(identifier) {
return identifier.startsWith("___") ? identifier.substr(1) : identifier;
}
var AotSummaryResolver = function() {
function AotSummaryResolver(host, staticSymbolCache) {
this.host = host;
this.staticSymbolCache = staticSymbolCache;
this.summaryCache = new Map();
this.loadedFilePaths = new Set();
this.importAs = new Map();
}
AotSummaryResolver.prototype.isLibraryFile = function(filePath) {
return !this.host.isSourceFile(stripNgFactory(filePath));
};
AotSummaryResolver.prototype.getLibraryFileName = function(filePath) {
return this.host.getOutputFileName(filePath);
};
AotSummaryResolver.prototype.resolveSummary = function(staticSymbol) {
staticSymbol.assertNoMembers();
var summary = this.summaryCache.get(staticSymbol);
if (!summary) {
this._loadSummaryFile(staticSymbol.filePath);
summary = this.summaryCache.get(staticSymbol);
}
return summary;
};
AotSummaryResolver.prototype.getSymbolsOf = function(filePath) {
this._loadSummaryFile(filePath);
return Array.from(this.summaryCache.keys()).filter(function(symbol) {
return symbol.filePath === filePath;
});
};
AotSummaryResolver.prototype.getImportAs = function(staticSymbol) {
staticSymbol.assertNoMembers();
return this.importAs.get(staticSymbol);
};
AotSummaryResolver.prototype._loadSummaryFile = function(filePath) {
var _this = this;
if (this.loadedFilePaths.has(filePath)) {
return;
}
this.loadedFilePaths.add(filePath);
if (this.isLibraryFile(filePath)) {
var summaryFilePath = summaryFileName(filePath);
var json = void 0;
try {
json = this.host.loadSummary(summaryFilePath);
} catch (e) {
console.error("Error loading summary file " + summaryFilePath);
throw e;
}
if (json) {
var _a = deserializeSummaries(this.staticSymbolCache, json), summaries = _a.summaries, importAs = _a.importAs;
summaries.forEach(function(summary) {
return _this.summaryCache.set(summary.symbol, summary);
});
importAs.forEach(function(importAs) {
_this.importAs.set(importAs.symbol, _this.staticSymbolCache.get(ngfactoryFilePath(filePath), importAs.importAs));
});
}
}
};
return AotSummaryResolver;
}();
function createAotCompiler(compilerHost, options) {
var translations = options.translations || "";
var urlResolver = createOfflineCompileUrlResolver();
var symbolCache = new StaticSymbolCache();
var summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);
var symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);
var staticReflector = new StaticReflector(summaryResolver, symbolResolver);
StaticAndDynamicReflectionCapabilities.install(staticReflector);
var console = new _angular_core.ɵConsole();
var htmlParser = new I18NHtmlParser(new HtmlParser(), translations, options.i18nFormat, _angular_core.MissingTranslationStrategy.Warning, console);
var config = new CompilerConfig({
defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,
useJit: false,
enableLegacyTemplate: options.enableLegacyTemplate !== false
});
var normalizer = new DirectiveNormalizer({
get: function(url) {
return compilerHost.loadResource(url);
}
}, urlResolver, htmlParser, config);
var expressionParser = new Parser(new Lexer());
var elementSchemaRegistry = new DomElementSchemaRegistry();
var tmplParser = new TemplateParser(config, expressionParser, elementSchemaRegistry, htmlParser, console, []);
var resolver = new CompileMetadataResolver(config, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector);
var importResolver = {
getImportAs: function(symbol) {
return symbolResolver.getImportAs(symbol);
},
fileNameToModuleName: function(fileName, containingFilePath) {
return compilerHost.fileNameToModuleName(fileName, containingFilePath);
},
getTypeArity: function(symbol) {
return symbolResolver.getTypeArity(symbol);
}
};
var viewCompiler = new ViewCompiler(config, elementSchemaRegistry);
var compiler = new AotCompiler(config, compilerHost, resolver, tmplParser, new StyleCompiler(urlResolver), viewCompiler, new NgModuleCompiler(), new TypeScriptEmitter(importResolver), summaryResolver, options.locale || null, options.i18nFormat || null, options.genFilePreamble || null, symbolResolver);
return {
compiler: compiler,
reflector: staticReflector
};
}
function interpretStatements(statements, resultVars) {
var stmtsWithReturn = statements.concat([ new ReturnStatement(literalArr(resultVars.map(function(resultVar) {
return variable(resultVar);
}))) ]);
var ctx = new _ExecutionContext(null, null, null, new Map());
var visitor = new StatementInterpreter();
var result = visitor.visitAllStatements(stmtsWithReturn, ctx);
return result != null ? result.value : null;
}
function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
var childCtx = ctx.createChildWihtLocalVars();
for (var i = 0; i < varNames.length; i++) {
childCtx.vars.set(varNames[i], varValues[i]);
}
var result = visitor.visitAllStatements(statements, childCtx);
return result ? result.value : null;
}
var _ExecutionContext = function() {
function _ExecutionContext(parent, instance, className, vars) {
this.parent = parent;
this.instance = instance;
this.className = className;
this.vars = vars;
}
_ExecutionContext.prototype.createChildWihtLocalVars = function() {
return new _ExecutionContext(this, this.instance, this.className, new Map());
};
return _ExecutionContext;
}();
var ReturnValue = function() {
function ReturnValue(value) {
this.value = value;
}
return ReturnValue;
}();
function createDynamicClass(_classStmt, _ctx, _visitor) {
var propertyDescriptors = {};
_classStmt.getters.forEach(function(getter) {
propertyDescriptors[getter.name] = {
configurable: false,
get: function() {
var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
}
};
});
_classStmt.methods.forEach(function(method) {
var paramNames = method.params.map(function(param) {
return param.name;
});
propertyDescriptors[method.name] = {
writable: false,
configurable: false,
value: function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i] = arguments[_i];
}
var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
}
};
});
var ctorParamNames = _classStmt.constructorMethod.params.map(function(param) {
return param.name;
});
var ctor = function() {
var _this = this;
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i] = arguments[_i];
}
var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
_classStmt.fields.forEach(function(field) {
_this[field.name] = undefined;
});
_executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
};
var superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;
ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
return ctor;
}
var StatementInterpreter = function() {
function StatementInterpreter() {}
StatementInterpreter.prototype.debugAst = function(ast) {
return debugOutputAstAsTypeScript(ast);
};
StatementInterpreter.prototype.visitDeclareVarStmt = function(stmt, ctx) {
ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
return null;
};
StatementInterpreter.prototype.visitWriteVarExpr = function(expr, ctx) {
var value = expr.value.visitExpression(this, ctx);
var currCtx = ctx;
while (currCtx != null) {
if (currCtx.vars.has(expr.name)) {
currCtx.vars.set(expr.name, value);
return value;
}
currCtx = currCtx.parent;
}
throw new Error("Not declared variable " + expr.name);
};
StatementInterpreter.prototype.visitReadVarExpr = function(ast, ctx) {
var varName = ast.name;
if (ast.builtin != null) {
switch (ast.builtin) {
case BuiltinVar.Super:
return ctx.instance.__proto__;

case BuiltinVar.This:
return ctx.instance;

case BuiltinVar.CatchError:
varName = CATCH_ERROR_VAR$2;
break;

case BuiltinVar.CatchStack:
varName = CATCH_STACK_VAR$2;
break;

default:
throw new Error("Unknown builtin variable " + ast.builtin);
}
}
var currCtx = ctx;
while (currCtx != null) {
if (currCtx.vars.has(varName)) {
return currCtx.vars.get(varName);
}
currCtx = currCtx.parent;
}
throw new Error("Not declared variable " + varName);
};
StatementInterpreter.prototype.visitWriteKeyExpr = function(expr, ctx) {
var receiver = expr.receiver.visitExpression(this, ctx);
var index = expr.index.visitExpression(this, ctx);
var value = expr.value.visitExpression(this, ctx);
receiver[index] = value;
return value;
};
StatementInterpreter.prototype.visitWritePropExpr = function(expr, ctx) {
var receiver = expr.receiver.visitExpression(this, ctx);
var value = expr.value.visitExpression(this, ctx);
receiver[expr.name] = value;
return value;
};
StatementInterpreter.prototype.visitInvokeMethodExpr = function(expr, ctx) {
var receiver = expr.receiver.visitExpression(this, ctx);
var args = this.visitAllExpressions(expr.args, ctx);
var result;
if (expr.builtin != null) {
switch (expr.builtin) {
case BuiltinMethod.ConcatArray:
result = receiver.concat.apply(receiver, args);
break;

case BuiltinMethod.SubscribeObservable:
result = receiver.subscribe({
next: args[0]
});
break;

case BuiltinMethod.Bind:
result = receiver.bind.apply(receiver, args);
break;

default:
throw new Error("Unknown builtin method " + expr.builtin);
}
} else {
result = receiver[expr.name].apply(receiver, args);
}
return result;
};
StatementInterpreter.prototype.visitInvokeFunctionExpr = function(stmt, ctx) {
var args = this.visitAllExpressions(stmt.args, ctx);
var fnExpr = stmt.fn;
if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
return null;
} else {
var fn$$1 = stmt.fn.visitExpression(this, ctx);
return fn$$1.apply(null, args);
}
};
StatementInterpreter.prototype.visitReturnStmt = function(stmt, ctx) {
return new ReturnValue(stmt.value.visitExpression(this, ctx));
};
StatementInterpreter.prototype.visitDeclareClassStmt = function(stmt, ctx) {
var clazz = createDynamicClass(stmt, ctx, this);
ctx.vars.set(stmt.name, clazz);
return null;
};
StatementInterpreter.prototype.visitExpressionStmt = function(stmt, ctx) {
return stmt.expr.visitExpression(this, ctx);
};
StatementInterpreter.prototype.visitIfStmt = function(stmt, ctx) {
var condition = stmt.condition.visitExpression(this, ctx);
if (condition) {
return this.visitAllStatements(stmt.trueCase, ctx);
} else if (stmt.falseCase != null) {
return this.visitAllStatements(stmt.falseCase, ctx);
}
return null;
};
StatementInterpreter.prototype.visitTryCatchStmt = function(stmt, ctx) {
try {
return this.visitAllStatements(stmt.bodyStmts, ctx);
} catch (e) {
var childCtx = ctx.createChildWihtLocalVars();
childCtx.vars.set(CATCH_ERROR_VAR$2, e);
childCtx.vars.set(CATCH_STACK_VAR$2, e.stack);
return this.visitAllStatements(stmt.catchStmts, childCtx);
}
};
StatementInterpreter.prototype.visitThrowStmt = function(stmt, ctx) {
throw stmt.error.visitExpression(this, ctx);
};
StatementInterpreter.prototype.visitCommentStmt = function(stmt, context) {
return null;
};
StatementInterpreter.prototype.visitInstantiateExpr = function(ast, ctx) {
var args = this.visitAllExpressions(ast.args, ctx);
var clazz = ast.classExpr.visitExpression(this, ctx);
return new (clazz.bind.apply(clazz, [ void 0 ].concat(args)))();
};
StatementInterpreter.prototype.visitLiteralExpr = function(ast, ctx) {
return ast.value;
};
StatementInterpreter.prototype.visitExternalExpr = function(ast, ctx) {
return ast.value.reference;
};
StatementInterpreter.prototype.visitConditionalExpr = function(ast, ctx) {
if (ast.condition.visitExpression(this, ctx)) {
return ast.trueCase.visitExpression(this, ctx);
} else if (ast.falseCase != null) {
return ast.falseCase.visitExpression(this, ctx);
}
return null;
};
StatementInterpreter.prototype.visitNotExpr = function(ast, ctx) {
return !ast.condition.visitExpression(this, ctx);
};
StatementInterpreter.prototype.visitCastExpr = function(ast, ctx) {
return ast.value.visitExpression(this, ctx);
};
StatementInterpreter.prototype.visitFunctionExpr = function(ast, ctx) {
var paramNames = ast.params.map(function(param) {
return param.name;
});
return _declareFn(paramNames, ast.statements, ctx, this);
};
StatementInterpreter.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
var paramNames = stmt.params.map(function(param) {
return param.name;
});
ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
return null;
};
StatementInterpreter.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
var _this = this;
var lhs = function() {
return ast.lhs.visitExpression(_this, ctx);
};
var rhs = function() {
return ast.rhs.visitExpression(_this, ctx);
};
switch (ast.operator) {
case BinaryOperator.Equals:
return lhs() == rhs();

case BinaryOperator.Identical:
return lhs() === rhs();

case BinaryOperator.NotEquals:
return lhs() != rhs();

case BinaryOperator.NotIdentical:
return lhs() !== rhs();

case BinaryOperator.And:
return lhs() && rhs();

case BinaryOperator.Or:
return lhs() || rhs();

case BinaryOperator.Plus:
return lhs() + rhs();

case BinaryOperator.Minus:
return lhs() - rhs();

case BinaryOperator.Divide:
return lhs() / rhs();

case BinaryOperator.Multiply:
return lhs() * rhs();

case BinaryOperator.Modulo:
return lhs() % rhs();

case BinaryOperator.Lower:
return lhs() < rhs();

case BinaryOperator.LowerEquals:
return lhs() <= rhs();

case BinaryOperator.Bigger:
return lhs() > rhs();

case BinaryOperator.BiggerEquals:
return lhs() >= rhs();

default:
throw new Error("Unknown operator " + ast.operator);
}
};
StatementInterpreter.prototype.visitReadPropExpr = function(ast, ctx) {
var result;
var receiver = ast.receiver.visitExpression(this, ctx);
result = receiver[ast.name];
return result;
};
StatementInterpreter.prototype.visitReadKeyExpr = function(ast, ctx) {
var receiver = ast.receiver.visitExpression(this, ctx);
var prop = ast.index.visitExpression(this, ctx);
return receiver[prop];
};
StatementInterpreter.prototype.visitLiteralArrayExpr = function(ast, ctx) {
return this.visitAllExpressions(ast.entries, ctx);
};
StatementInterpreter.prototype.visitLiteralMapExpr = function(ast, ctx) {
var _this = this;
var result = {};
ast.entries.forEach(function(entry) {
return result[entry.key] = entry.value.visitExpression(_this, ctx);
});
return result;
};
StatementInterpreter.prototype.visitCommaExpr = function(ast, context) {
var values = this.visitAllExpressions(ast.parts, context);
return values[values.length - 1];
};
StatementInterpreter.prototype.visitAllExpressions = function(expressions, ctx) {
var _this = this;
return expressions.map(function(expr) {
return expr.visitExpression(_this, ctx);
});
};
StatementInterpreter.prototype.visitAllStatements = function(statements, ctx) {
for (var i = 0; i < statements.length; i++) {
var stmt = statements[i];
var val = stmt.visitStatement(this, ctx);
if (val instanceof ReturnValue) {
return val;
}
}
return null;
};
return StatementInterpreter;
}();
function _declareFn(varNames, statements, ctx, visitor) {
return function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i] = arguments[_i];
}
return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
};
}
var CATCH_ERROR_VAR$2 = "error";
var CATCH_STACK_VAR$2 = "stack";
var AbstractJsEmitterVisitor = function(_super) {
__extends(AbstractJsEmitterVisitor, _super);
function AbstractJsEmitterVisitor() {
return _super.call(this, false) || this;
}
AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
var _this = this;
ctx.pushClass(stmt);
this._visitClassConstructor(stmt, ctx);
if (stmt.parent != null) {
ctx.print(stmt, stmt.name + ".prototype = Object.create(");
stmt.parent.visitExpression(this, ctx);
ctx.println(stmt, ".prototype);");
}
stmt.getters.forEach(function(getter) {
return _this._visitClassGetter(stmt, getter, ctx);
});
stmt.methods.forEach(function(method) {
return _this._visitClassMethod(stmt, method, ctx);
});
ctx.popClass();
return null;
};
AbstractJsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
ctx.print(stmt, "function " + stmt.name + "(");
if (stmt.constructorMethod != null) {
this._visitParams(stmt.constructorMethod.params, ctx);
}
ctx.println(stmt, ") {");
ctx.incIndent();
if (stmt.constructorMethod != null) {
if (stmt.constructorMethod.body.length > 0) {
ctx.println(stmt, "var self = this;");
this.visitAllStatements(stmt.constructorMethod.body, ctx);
}
}
ctx.decIndent();
ctx.println(stmt, "}");
};
AbstractJsEmitterVisitor.prototype._visitClassGetter = function(stmt, getter, ctx) {
ctx.println(stmt, "Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
ctx.incIndent();
if (getter.body.length > 0) {
ctx.println(stmt, "var self = this;");
this.visitAllStatements(getter.body, ctx);
}
ctx.decIndent();
ctx.println(stmt, "}});");
};
AbstractJsEmitterVisitor.prototype._visitClassMethod = function(stmt, method, ctx) {
ctx.print(stmt, stmt.name + ".prototype." + method.name + " = function(");
this._visitParams(method.params, ctx);
ctx.println(stmt, ") {");
ctx.incIndent();
if (method.body.length > 0) {
ctx.println(stmt, "var self = this;");
this.visitAllStatements(method.body, ctx);
}
ctx.decIndent();
ctx.println(stmt, "};");
};
AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
if (ast.builtin === BuiltinVar.This) {
ctx.print(ast, "self");
} else if (ast.builtin === BuiltinVar.Super) {
throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!");
} else {
_super.prototype.visitReadVarExpr.call(this, ast, ctx);
}
return null;
};
AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
ctx.print(stmt, "var " + stmt.name + " = ");
stmt.value.visitExpression(this, ctx);
ctx.println(stmt, ";");
return null;
};
AbstractJsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
ast.value.visitExpression(this, ctx);
return null;
};
AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
var fnExpr = expr.fn;
if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
ctx.currentClass.parent.visitExpression(this, ctx);
ctx.print(expr, ".call(this");
if (expr.args.length > 0) {
ctx.print(expr, ", ");
this.visitAllExpressions(expr.args, ctx, ",");
}
ctx.print(expr, ")");
} else {
_super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
}
return null;
};
AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
ctx.print(ast, "function(");
this._visitParams(ast.params, ctx);
ctx.println(ast, ") {");
ctx.incIndent();
this.visitAllStatements(ast.statements, ctx);
ctx.decIndent();
ctx.print(ast, "}");
return null;
};
AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
ctx.print(stmt, "function " + stmt.name + "(");
this._visitParams(stmt.params, ctx);
ctx.println(stmt, ") {");
ctx.incIndent();
this.visitAllStatements(stmt.statements, ctx);
ctx.decIndent();
ctx.println(stmt, "}");
return null;
};
AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
ctx.println(stmt, "try {");
ctx.incIndent();
this.visitAllStatements(stmt.bodyStmts, ctx);
ctx.decIndent();
ctx.println(stmt, "} catch (" + CATCH_ERROR_VAR$1.name + ") {");
ctx.incIndent();
var catchStmts = [ CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop("stack")).toDeclStmt(null, [ StmtModifier.Final ]) ].concat(stmt.catchStmts);
this.visitAllStatements(catchStmts, ctx);
ctx.decIndent();
ctx.println(stmt, "}");
return null;
};
AbstractJsEmitterVisitor.prototype._visitParams = function(params, ctx) {
this.visitAllObjects(function(param) {
return ctx.print(null, param.name);
}, params, ctx, ",");
};
AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
var name;
switch (method) {
case BuiltinMethod.ConcatArray:
name = "concat";
break;

case BuiltinMethod.SubscribeObservable:
name = "subscribe";
break;

case BuiltinMethod.Bind:
name = "bind";
break;

default:
throw new Error("Unknown builtin method: " + method);
}
return name;
};
return AbstractJsEmitterVisitor;
}(AbstractEmitterVisitor);
function evalExpression(sourceUrl$$1, ctx, vars) {
var fnBody = ctx.toSource() + "\n//# sourceURL=" + sourceUrl$$1;
var fnArgNames = [];
var fnArgValues = [];
for (var argName in vars) {
fnArgNames.push(argName);
fnArgValues.push(vars[argName]);
}
if (_angular_core.isDevMode()) {
var emptyFn = new (Function.bind.apply(Function, [ void 0 ].concat(fnArgNames.concat("return null;"))))().toString();
var headerLines = emptyFn.slice(0, emptyFn.indexOf("return null;")).split("\n").length - 1;
fnBody += "\n" + ctx.toSourceMapGenerator(sourceUrl$$1, sourceUrl$$1, headerLines).toJsComment();
}
return new (Function.bind.apply(Function, [ void 0 ].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
}
function jitStatements(sourceUrl$$1, statements, resultVars) {
var converter = new JitEmitterVisitor();
var ctx = EmitterVisitorContext.createRoot(resultVars);
var returnStmt = new ReturnStatement(literalArr(resultVars.map(function(resultVar) {
return variable(resultVar);
})));
converter.visitAllStatements(statements.concat([ returnStmt ]), ctx);
return evalExpression(sourceUrl$$1, ctx, converter.getArgs());
}
var JitEmitterVisitor = function(_super) {
__extends(JitEmitterVisitor, _super);
function JitEmitterVisitor() {
var _this = _super.apply(this, arguments) || this;
_this._evalArgNames = [];
_this._evalArgValues = [];
return _this;
}
JitEmitterVisitor.prototype.getArgs = function() {
var result = {};
for (var i = 0; i < this._evalArgNames.length; i++) {
result[this._evalArgNames[i]] = this._evalArgValues[i];
}
return result;
};
JitEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
var value = ast.value.reference;
var id = this._evalArgValues.indexOf(value);
if (id === -1) {
id = this._evalArgValues.length;
this._evalArgValues.push(value);
var name = identifierName(ast.value) || "val";
this._evalArgNames.push("jit_" + name + id);
}
ctx.print(ast, this._evalArgNames[id]);
return null;
};
return JitEmitterVisitor;
}(AbstractJsEmitterVisitor);
var JitCompiler = function() {
function JitCompiler(_injector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _compilerConfig, _console) {
this._injector = _injector;
this._metadataResolver = _metadataResolver;
this._templateParser = _templateParser;
this._styleCompiler = _styleCompiler;
this._viewCompiler = _viewCompiler;
this._ngModuleCompiler = _ngModuleCompiler;
this._compilerConfig = _compilerConfig;
this._console = _console;
this._compiledTemplateCache = new Map();
this._compiledHostTemplateCache = new Map();
this._compiledDirectiveWrapperCache = new Map();
this._compiledNgModuleCache = new Map();
this._sharedStylesheetCount = 0;
}
Object.defineProperty(JitCompiler.prototype, "injector", {
get: function() {
return this._injector;
},
enumerable: true,
configurable: true
});
JitCompiler.prototype.compileModuleSync = function(moduleType) {
return this._compileModuleAndComponents(moduleType, true).syncResult;
};
JitCompiler.prototype.compileModuleAsync = function(moduleType) {
return this._compileModuleAndComponents(moduleType, false).asyncResult;
};
JitCompiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
return this._compileModuleAndAllComponents(moduleType, true).syncResult;
};
JitCompiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
return this._compileModuleAndAllComponents(moduleType, false).asyncResult;
};
JitCompiler.prototype.getNgContentSelectors = function(component) {
this._console.warn("Compiler.getNgContentSelectors is deprecated. Use ComponentFactory.ngContentSelectors instead!");
var template = this._compiledTemplateCache.get(component);
if (!template) {
throw new Error("The component " + _angular_core.ɵstringify(component) + " is not yet compiled!");
}
return template.compMeta.template.ngContentSelectors;
};
JitCompiler.prototype._compileModuleAndComponents = function(moduleType, isSync) {
var _this = this;
var loadingPromise = this._loadModules(moduleType, isSync);
var createResult = function() {
_this._compileComponents(moduleType, null);
return _this._compileModule(moduleType);
};
if (isSync) {
return new SyncAsyncResult(createResult());
} else {
return new SyncAsyncResult(null, loadingPromise.then(createResult));
}
};
JitCompiler.prototype._compileModuleAndAllComponents = function(moduleType, isSync) {
var _this = this;
var loadingPromise = this._loadModules(moduleType, isSync);
var createResult = function() {
var componentFactories = [];
_this._compileComponents(moduleType, componentFactories);
return new _angular_core.ModuleWithComponentFactories(_this._compileModule(moduleType), componentFactories);
};
if (isSync) {
return new SyncAsyncResult(createResult());
} else {
return new SyncAsyncResult(null, loadingPromise.then(createResult));
}
};
JitCompiler.prototype._loadModules = function(mainModule, isSync) {
var _this = this;
var loadingPromises = [];
var ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
ngModule.transitiveModule.modules.forEach(function(localModuleMeta) {
loadingPromises.push(_this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(localModuleMeta.reference, isSync));
});
return Promise.all(loadingPromises);
};
JitCompiler.prototype._compileModule = function(moduleType) {
var _this = this;
var ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
if (!ngModuleFactory) {
var moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType);
var extraProviders = [ this._metadataResolver.getProviderMetadata(new ProviderMeta(_angular_core.Compiler, {
useFactory: function() {
return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference);
}
})) ];
var compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);
if (!this._compilerConfig.useJit) {
ngModuleFactory = interpretStatements(compileResult.statements, [ compileResult.ngModuleFactoryVar ])[0];
} else {
ngModuleFactory = jitStatements(ngModuleJitUrl(moduleMeta_1), compileResult.statements, [ compileResult.ngModuleFactoryVar ])[0];
}
this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory);
}
return ngModuleFactory;
};
JitCompiler.prototype._compileComponents = function(mainModule, allComponentFactories) {
var _this = this;
var ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
var moduleByDirective = new Map();
var templates = new Set();
ngModule.transitiveModule.modules.forEach(function(localModuleSummary) {
var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);
localModuleMeta.declaredDirectives.forEach(function(dirIdentifier) {
moduleByDirective.set(dirIdentifier.reference, localModuleMeta);
var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
if (dirMeta.isComponent) {
templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));
if (allComponentFactories) {
var template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);
templates.add(template);
allComponentFactories.push(dirMeta.componentFactory);
}
}
});
});
ngModule.transitiveModule.modules.forEach(function(localModuleSummary) {
var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);
localModuleMeta.declaredDirectives.forEach(function(dirIdentifier) {
var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
if (dirMeta.isComponent) {
dirMeta.entryComponents.forEach(function(entryComponentType) {
var moduleMeta = moduleByDirective.get(entryComponentType.componentType);
templates.add(_this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));
});
}
});
localModuleMeta.entryComponents.forEach(function(entryComponentType) {
var moduleMeta = moduleByDirective.get(entryComponentType.componentType);
templates.add(_this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));
});
});
templates.forEach(function(template) {
return _this._compileTemplate(template);
});
};
JitCompiler.prototype.clearCacheFor = function(type) {
this._compiledNgModuleCache.delete(type);
this._metadataResolver.clearCacheFor(type);
this._compiledHostTemplateCache.delete(type);
var compiledTemplate = this._compiledTemplateCache.get(type);
if (compiledTemplate) {
this._compiledTemplateCache.delete(type);
}
};
JitCompiler.prototype.clearCache = function() {
this._metadataResolver.clearCache();
this._compiledTemplateCache.clear();
this._compiledHostTemplateCache.clear();
this._compiledNgModuleCache.clear();
};
JitCompiler.prototype._createCompiledHostTemplate = function(compType, ngModule) {
if (!ngModule) {
throw new Error("Component " + _angular_core.ɵstringify(compType) + " is not part of any NgModule or the module has not been imported into your module.");
}
var compiledTemplate = this._compiledHostTemplateCache.get(compType);
if (!compiledTemplate) {
var compMeta = this._metadataResolver.getDirectiveMetadata(compType);
assertComponent(compMeta);
var componentFactory = compMeta.componentFactory;
var hostClass = this._metadataResolver.getHostComponentType(compType);
var hostMeta = createHostComponentMeta(hostClass, compMeta, _angular_core.ɵgetComponentViewDefinitionFactory(componentFactory));
compiledTemplate = new CompiledTemplate(true, compMeta.type, hostMeta, ngModule, [ compMeta.type ]);
this._compiledHostTemplateCache.set(compType, compiledTemplate);
}
return compiledTemplate;
};
JitCompiler.prototype._createCompiledTemplate = function(compMeta, ngModule) {
var compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);
if (!compiledTemplate) {
assertComponent(compMeta);
compiledTemplate = new CompiledTemplate(false, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);
this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
}
return compiledTemplate;
};
JitCompiler.prototype._compileTemplate = function(template) {
var _this = this;
if (template.isCompiled) {
return;
}
var compMeta = template.compMeta;
var externalStylesheetsByModuleUrl = new Map();
var stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
stylesCompileResult.externalStylesheets.forEach(function(r) {
externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r);
});
this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
var directives = template.directives.map(function(dir) {
return _this._metadataResolver.getDirectiveSummary(dir.reference);
});
var pipes = template.ngModule.transitiveModule.pipes.map(function(pipe) {
return _this._metadataResolver.getPipeSummary(pipe.reference);
});
var _a = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, template.ngModule.schemas, templateSourceUrl(template.ngModule.type, template.compMeta, template.compMeta.template)), parsedTemplate = _a.template, usedPipes = _a.pipes;
var compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), usedPipes);
var statements = stylesCompileResult.componentStylesheet.statements.concat(compileResult.statements);
var viewClassAndRendererTypeVars = compMeta.isHost ? [ compileResult.viewClassVar ] : [ compileResult.viewClassVar, compileResult.rendererTypeVar ];
var viewClass;
var rendererType;
if (!this._compilerConfig.useJit) {
_b = interpretStatements(statements, viewClassAndRendererTypeVars), viewClass = _b[0], 
rendererType = _b[1];
} else {
_c = jitStatements(templateJitUrl(template.ngModule.type, template.compMeta), statements, viewClassAndRendererTypeVars), 
viewClass = _c[0], rendererType = _c[1];
}
template.compiled(viewClass, rendererType);
var _b, _c;
};
JitCompiler.prototype._resolveStylesCompileResult = function(result, externalStylesheetsByModuleUrl) {
var _this = this;
result.dependencies.forEach(function(dep, i) {
var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);
var nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
dep.valuePlaceholder.reference = nestedStylesArr;
});
};
JitCompiler.prototype._resolveAndEvalStylesCompileResult = function(result, externalStylesheetsByModuleUrl) {
this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
if (!this._compilerConfig.useJit) {
return interpretStatements(result.statements, [ result.stylesVar ])[0];
} else {
return jitStatements(sharedStylesheetJitUrl(result.meta, this._sharedStylesheetCount++), result.statements, [ result.stylesVar ])[0];
}
};
return JitCompiler;
}();
JitCompiler.decorators = [ {
type: CompilerInjectable
} ];
JitCompiler.ctorParameters = function() {
return [ {
type: _angular_core.Injector
}, {
type: CompileMetadataResolver
}, {
type: TemplateParser
}, {
type: StyleCompiler
}, {
type: ViewCompiler
}, {
type: NgModuleCompiler
}, {
type: CompilerConfig
}, {
type: _angular_core.ɵConsole
} ];
};
var CompiledTemplate = function() {
function CompiledTemplate(isHost, compType, compMeta, ngModule, directives) {
this.isHost = isHost;
this.compType = compType;
this.compMeta = compMeta;
this.ngModule = ngModule;
this.directives = directives;
this._viewClass = null;
this.isCompiled = false;
}
CompiledTemplate.prototype.compiled = function(viewClass, rendererType) {
this._viewClass = viewClass;
this.compMeta.componentViewType.setDelegate(viewClass);
for (var prop in rendererType) {
this.compMeta.rendererType[prop] = rendererType[prop];
}
this.isCompiled = true;
};
return CompiledTemplate;
}();
function assertComponent(meta) {
if (!meta.isComponent) {
throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.");
}
}
var ModuleBoundCompiler = function() {
function ModuleBoundCompiler(_delegate, _ngModule) {
this._delegate = _delegate;
this._ngModule = _ngModule;
}
Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", {
get: function() {
return this._delegate.injector;
},
enumerable: true,
configurable: true
});
ModuleBoundCompiler.prototype.compileModuleSync = function(moduleType) {
return this._delegate.compileModuleSync(moduleType);
};
ModuleBoundCompiler.prototype.compileModuleAsync = function(moduleType) {
return this._delegate.compileModuleAsync(moduleType);
};
ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
return this._delegate.compileModuleAndAllComponentsSync(moduleType);
};
ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
};
ModuleBoundCompiler.prototype.getNgContentSelectors = function(component) {
return this._delegate.getNgContentSelectors(component);
};
ModuleBoundCompiler.prototype.clearCache = function() {
this._delegate.clearCache();
};
ModuleBoundCompiler.prototype.clearCacheFor = function(type) {
this._delegate.clearCacheFor(type);
};
return ModuleBoundCompiler;
}();
var MessageBundle = function() {
function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs, _locale) {
if (_locale === void 0) {
_locale = null;
}
this._htmlParser = _htmlParser;
this._implicitTags = _implicitTags;
this._implicitAttrs = _implicitAttrs;
this._locale = _locale;
this._messages = [];
}
MessageBundle.prototype.updateFromTemplate = function(html, url, interpolationConfig) {
var htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);
if (htmlParserResult.errors.length) {
return htmlParserResult.errors;
}
var i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
if (i18nParserResult.errors.length) {
return i18nParserResult.errors;
}
(_a = this._messages).push.apply(_a, i18nParserResult.messages);
return null;
var _a;
};
MessageBundle.prototype.getMessages = function() {
return this._messages;
};
MessageBundle.prototype.write = function(serializer, filterSources) {
var messages = {};
var mapperVisitor = new MapPlaceholderNames();
this._messages.forEach(function(message) {
var id = serializer.digest(message);
if (!messages.hasOwnProperty(id)) {
messages[id] = message;
} else {
(_a = messages[id].sources).push.apply(_a, message.sources);
}
var _a;
});
var msgList = Object.keys(messages).map(function(id) {
var mapper = serializer.createNameMapper(messages[id]);
var src = messages[id];
var nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;
var transformedMessage = new Message(nodes, {}, {}, src.meaning, src.description, id);
transformedMessage.sources = src.sources;
if (filterSources) {
transformedMessage.sources.forEach(function(source) {
return source.filePath = filterSources(source.filePath);
});
}
return transformedMessage;
});
return serializer.write(msgList, this._locale);
};
return MessageBundle;
}();
var MapPlaceholderNames = function(_super) {
__extends(MapPlaceholderNames, _super);
function MapPlaceholderNames() {
return _super !== null && _super.apply(this, arguments) || this;
}
MapPlaceholderNames.prototype.convert = function(nodes, mapper) {
var _this = this;
return mapper ? nodes.map(function(n) {
return n.visit(_this, mapper);
}) : nodes;
};
MapPlaceholderNames.prototype.visitTagPlaceholder = function(ph, mapper) {
var _this = this;
var startName = mapper.toPublicName(ph.startName);
var closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName;
var children = ph.children.map(function(n) {
return n.visit(_this, mapper);
});
return new TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan);
};
MapPlaceholderNames.prototype.visitPlaceholder = function(ph, mapper) {
return new Placeholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);
};
MapPlaceholderNames.prototype.visitIcuPlaceholder = function(ph, mapper) {
return new IcuPlaceholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);
};
return MapPlaceholderNames;
}(CloneVisitor);
var Extractor = function() {
function Extractor(host, staticSymbolResolver, messageBundle, metadataResolver) {
this.host = host;
this.staticSymbolResolver = staticSymbolResolver;
this.messageBundle = messageBundle;
this.metadataResolver = metadataResolver;
}
Extractor.prototype.extract = function(rootFiles) {
var _this = this;
var programSymbols = extractProgramSymbols(this.staticSymbolResolver, rootFiles, this.host);
var _a = analyzeAndValidateNgModules(programSymbols, this.host, this.metadataResolver), files = _a.files, ngModules = _a.ngModules;
return Promise.all(ngModules.map(function(ngModule) {
return _this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false);
})).then(function() {
var errors = [];
files.forEach(function(file) {
var compMetas = [];
file.directives.forEach(function(directiveType) {
var dirMeta = _this.metadataResolver.getDirectiveMetadata(directiveType);
if (dirMeta && dirMeta.isComponent) {
compMetas.push(dirMeta);
}
});
compMetas.forEach(function(compMeta) {
var html = compMeta.template.template;
var interpolationConfig = InterpolationConfig.fromArray(compMeta.template.interpolation);
errors.push.apply(errors, _this.messageBundle.updateFromTemplate(html, file.srcUrl, interpolationConfig));
});
});
if (errors.length) {
throw new Error(errors.map(function(e) {
return e.toString();
}).join("\n"));
}
return _this.messageBundle;
});
};
Extractor.create = function(host, locale) {
var htmlParser = new I18NHtmlParser(new HtmlParser());
var urlResolver = createOfflineCompileUrlResolver();
var symbolCache = new StaticSymbolCache();
var summaryResolver = new AotSummaryResolver(host, symbolCache);
var staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);
var staticReflector = new StaticReflector(summaryResolver, staticSymbolResolver);
StaticAndDynamicReflectionCapabilities.install(staticReflector);
var config = new CompilerConfig({
defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,
useJit: false
});
var normalizer = new DirectiveNormalizer({
get: function(url) {
return host.loadResource(url);
}
}, urlResolver, htmlParser, config);
var elementSchemaRegistry = new DomElementSchemaRegistry();
var resolver = new CompileMetadataResolver(config, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, new _angular_core.ɵConsole(), symbolCache, staticReflector);
var messageBundle = new MessageBundle(htmlParser, [], {}, locale);
var extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);
return {
extractor: extractor,
staticReflector: staticReflector
};
};
return Extractor;
}();
var _NO_RESOURCE_LOADER = {
get: function(url) {
throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + '"');
}
};
var baseHtmlParser = new _angular_core.InjectionToken("HtmlParser");
function i18nHtmlParserFactory(parser, translations, format, config, console) {
return new I18NHtmlParser(parser, translations, format, config.missingTranslation, console);
}
var COMPILER_PROVIDERS = [ {
provide: _angular_core.ɵReflector,
useValue: _angular_core.ɵreflector
}, {
provide: _angular_core.ɵReflectorReader,
useExisting: _angular_core.ɵReflector
}, {
provide: ResourceLoader,
useValue: _NO_RESOURCE_LOADER
}, SummaryResolver, _angular_core.ɵConsole, Lexer, Parser, {
provide: baseHtmlParser,
useClass: HtmlParser
}, {
provide: I18NHtmlParser,
useFactory: i18nHtmlParserFactory,
deps: [ baseHtmlParser, [ new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS) ], [ new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS_FORMAT) ], [ CompilerConfig ], [ _angular_core.ɵConsole ] ]
}, {
provide: HtmlParser,
useExisting: I18NHtmlParser
}, TemplateParser, DirectiveNormalizer, CompileMetadataResolver, DEFAULT_PACKAGE_URL_PROVIDER, StyleCompiler, ViewCompiler, NgModuleCompiler, {
provide: CompilerConfig,
useValue: new CompilerConfig()
}, JitCompiler, {
provide: _angular_core.Compiler,
useExisting: JitCompiler
}, DomElementSchemaRegistry, {
provide: ElementSchemaRegistry,
useExisting: DomElementSchemaRegistry
}, UrlResolver, DirectiveResolver, PipeResolver, NgModuleResolver ];
var JitCompilerFactory = function() {
function JitCompilerFactory(defaultOptions) {
var compilerOptions = {
useDebug: _angular_core.isDevMode(),
useJit: true,
defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,
missingTranslation: _angular_core.MissingTranslationStrategy.Warning,
enableLegacyTemplate: true
};
this._defaultOptions = [ compilerOptions ].concat(defaultOptions);
}
JitCompilerFactory.prototype.createCompiler = function(options) {
if (options === void 0) {
options = [];
}
var opts = _mergeOptions(this._defaultOptions.concat(options));
var injector = _angular_core.ReflectiveInjector.resolveAndCreate([ COMPILER_PROVIDERS, {
provide: CompilerConfig,
useFactory: function() {
return new CompilerConfig({
useJit: opts.useJit,
defaultEncapsulation: opts.defaultEncapsulation,
missingTranslation: opts.missingTranslation,
enableLegacyTemplate: opts.enableLegacyTemplate
});
},
deps: []
}, opts.providers ]);
return injector.get(_angular_core.Compiler);
};
return JitCompilerFactory;
}();
JitCompilerFactory.decorators = [ {
type: CompilerInjectable
} ];
JitCompilerFactory.ctorParameters = function() {
return [ {
type: Array,
decorators: [ {
type: _angular_core.Inject,
args: [ _angular_core.COMPILER_OPTIONS ]
} ]
} ];
};
function _initReflector() {
_angular_core.ɵreflector.reflectionCapabilities = new _angular_core.ɵReflectionCapabilities();
}
var platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, "coreDynamic", [ {
provide: _angular_core.COMPILER_OPTIONS,
useValue: {},
multi: true
}, {
provide: _angular_core.CompilerFactory,
useClass: JitCompilerFactory
}, {
provide: _angular_core.PLATFORM_INITIALIZER,
useValue: _initReflector,
multi: true
} ]);
function _mergeOptions(optionsArr) {
return {
useJit: _lastDefined(optionsArr.map(function(options) {
return options.useJit;
})),
defaultEncapsulation: _lastDefined(optionsArr.map(function(options) {
return options.defaultEncapsulation;
})),
providers: _mergeArrays(optionsArr.map(function(options) {
return options.providers;
})),
missingTranslation: _lastDefined(optionsArr.map(function(options) {
return options.missingTranslation;
}))
};
}
function _lastDefined(args) {
for (var i = args.length - 1; i >= 0; i--) {
if (args[i] !== undefined) {
return args[i];
}
}
return undefined;
}
function _mergeArrays(parts) {
var result = [];
parts.forEach(function(part) {
return part && result.push.apply(result, part);
});
return result;
}
var ImportResolver = function() {
function ImportResolver() {}
ImportResolver.prototype.fileNameToModuleName = function(importedFilePath, containingFilePath) {};
ImportResolver.prototype.getImportAs = function(symbol) {};
ImportResolver.prototype.getTypeArity = function(symbol) {};
return ImportResolver;
}();
exports.VERSION = VERSION;
exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS;
exports.CompilerConfig = CompilerConfig;
exports.JitCompiler = JitCompiler;
exports.DirectiveResolver = DirectiveResolver;
exports.PipeResolver = PipeResolver;
exports.NgModuleResolver = NgModuleResolver;
exports.DEFAULT_INTERPOLATION_CONFIG = DEFAULT_INTERPOLATION_CONFIG;
exports.InterpolationConfig = InterpolationConfig;
exports.NgModuleCompiler = NgModuleCompiler;
exports.ViewCompiler = ViewCompiler;
exports.isSyntaxError = isSyntaxError;
exports.syntaxError = syntaxError;
exports.TextAst = TextAst;
exports.BoundTextAst = BoundTextAst;
exports.AttrAst = AttrAst;
exports.BoundElementPropertyAst = BoundElementPropertyAst;
exports.BoundEventAst = BoundEventAst;
exports.ReferenceAst = ReferenceAst;
exports.VariableAst = VariableAst;
exports.ElementAst = ElementAst;
exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
exports.DirectiveAst = DirectiveAst;
exports.ProviderAst = ProviderAst;
exports.ProviderAstType = ProviderAstType;
exports.NgContentAst = NgContentAst;
exports.PropertyBindingType = PropertyBindingType;
exports.templateVisitAll = templateVisitAll;
exports.CompileAnimationEntryMetadata = CompileAnimationEntryMetadata;
exports.CompileAnimationStateMetadata = CompileAnimationStateMetadata;
exports.CompileAnimationStateDeclarationMetadata = CompileAnimationStateDeclarationMetadata;
exports.CompileAnimationStateTransitionMetadata = CompileAnimationStateTransitionMetadata;
exports.CompileAnimationMetadata = CompileAnimationMetadata;
exports.CompileAnimationKeyframesSequenceMetadata = CompileAnimationKeyframesSequenceMetadata;
exports.CompileAnimationStyleMetadata = CompileAnimationStyleMetadata;
exports.CompileAnimationAnimateMetadata = CompileAnimationAnimateMetadata;
exports.CompileAnimationWithStepsMetadata = CompileAnimationWithStepsMetadata;
exports.CompileAnimationSequenceMetadata = CompileAnimationSequenceMetadata;
exports.CompileAnimationGroupMetadata = CompileAnimationGroupMetadata;
exports.identifierName = identifierName;
exports.identifierModuleUrl = identifierModuleUrl;
exports.viewClassName = viewClassName;
exports.rendererTypeName = rendererTypeName;
exports.hostViewClassName = hostViewClassName;
exports.dirWrapperClassName = dirWrapperClassName;
exports.componentFactoryName = componentFactoryName;
exports.CompileSummaryKind = CompileSummaryKind;
exports.tokenName = tokenName;
exports.tokenReference = tokenReference;
exports.CompileStylesheetMetadata = CompileStylesheetMetadata;
exports.CompileTemplateMetadata = CompileTemplateMetadata;
exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
exports.createHostComponentMeta = createHostComponentMeta;
exports.CompilePipeMetadata = CompilePipeMetadata;
exports.CompileNgModuleMetadata = CompileNgModuleMetadata;
exports.TransitiveCompileNgModuleMetadata = TransitiveCompileNgModuleMetadata;
exports.ProviderMeta = ProviderMeta;
exports.flatten = flatten;
exports.sourceUrl = sourceUrl;
exports.templateSourceUrl = templateSourceUrl;
exports.sharedStylesheetJitUrl = sharedStylesheetJitUrl;
exports.ngModuleJitUrl = ngModuleJitUrl;
exports.templateJitUrl = templateJitUrl;
exports.createAotCompiler = createAotCompiler;
exports.AotCompiler = AotCompiler;
exports.analyzeNgModules = analyzeNgModules;
exports.analyzeAndValidateNgModules = analyzeAndValidateNgModules;
exports.extractProgramSymbols = extractProgramSymbols;
exports.GeneratedFile = GeneratedFile;
exports.StaticReflector = StaticReflector;
exports.StaticAndDynamicReflectionCapabilities = StaticAndDynamicReflectionCapabilities;
exports.StaticSymbol = StaticSymbol;
exports.StaticSymbolCache = StaticSymbolCache;
exports.ResolvedStaticSymbol = ResolvedStaticSymbol;
exports.StaticSymbolResolver = StaticSymbolResolver;
exports.unescapeIdentifier = unescapeIdentifier;
exports.AotSummaryResolver = AotSummaryResolver;
exports.SummaryResolver = SummaryResolver;
exports.i18nHtmlParserFactory = i18nHtmlParserFactory;
exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS;
exports.JitCompilerFactory = JitCompilerFactory;
exports.platformCoreDynamic = platformCoreDynamic;
exports.createUrlResolverWithoutPackagePrefix = createUrlResolverWithoutPackagePrefix;
exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;
exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER;
exports.UrlResolver = UrlResolver;
exports.getUrlScheme = getUrlScheme;
exports.ResourceLoader = ResourceLoader;
exports.ElementSchemaRegistry = ElementSchemaRegistry;
exports.Extractor = Extractor;
exports.I18NHtmlParser = I18NHtmlParser;
exports.MessageBundle = MessageBundle;
exports.Serializer = Serializer;
exports.Xliff = Xliff;
exports.Xliff2 = Xliff2;
exports.Xmb = Xmb;
exports.Xtb = Xtb;
exports.DirectiveNormalizer = DirectiveNormalizer;
exports.ParserError = ParserError;
exports.ParseSpan = ParseSpan;
exports.AST = AST;
exports.Quote = Quote;
exports.EmptyExpr = EmptyExpr;
exports.ImplicitReceiver = ImplicitReceiver;
exports.Chain = Chain;
exports.Conditional = Conditional;
exports.PropertyRead = PropertyRead;
exports.PropertyWrite = PropertyWrite;
exports.SafePropertyRead = SafePropertyRead;
exports.KeyedRead = KeyedRead;
exports.KeyedWrite = KeyedWrite;
exports.BindingPipe = BindingPipe;
exports.LiteralPrimitive = LiteralPrimitive;
exports.LiteralArray = LiteralArray;
exports.LiteralMap = LiteralMap;
exports.Interpolation = Interpolation;
exports.Binary = Binary;
exports.PrefixNot = PrefixNot;
exports.MethodCall = MethodCall;
exports.SafeMethodCall = SafeMethodCall;
exports.FunctionCall = FunctionCall;
exports.ASTWithSource = ASTWithSource;
exports.TemplateBinding = TemplateBinding;
exports.RecursiveAstVisitor = RecursiveAstVisitor;
exports.AstTransformer = AstTransformer;
exports.TokenType = TokenType;
exports.Lexer = Lexer;
exports.Token = Token;
exports.EOF = EOF;
exports.isIdentifier = isIdentifier;
exports.isQuote = isQuote;
exports.SplitInterpolation = SplitInterpolation;
exports.TemplateBindingParseResult = TemplateBindingParseResult;
exports.Parser = Parser;
exports._ParseAST = _ParseAST;
exports.ERROR_COLLECTOR_TOKEN = ERROR_COLLECTOR_TOKEN;
exports.CompileMetadataResolver = CompileMetadataResolver;
exports.componentModuleUrl = componentModuleUrl;
exports.Text = Text;
exports.Expansion = Expansion;
exports.ExpansionCase = ExpansionCase;
exports.Attribute = Attribute$1;
exports.Element = Element;
exports.Comment = Comment;
exports.visitAll = visitAll;
exports.ParseTreeResult = ParseTreeResult;
exports.TreeError = TreeError;
exports.HtmlParser = HtmlParser;
exports.HtmlTagDefinition = HtmlTagDefinition;
exports.getHtmlTagDefinition = getHtmlTagDefinition;
exports.TagContentType = TagContentType;
exports.splitNsName = splitNsName;
exports.isNgContainer = isNgContainer;
exports.isNgContent = isNgContent;
exports.isNgTemplate = isNgTemplate;
exports.getNsPrefix = getNsPrefix;
exports.mergeNsAndName = mergeNsAndName;
exports.NAMED_ENTITIES = NAMED_ENTITIES;
exports.ImportResolver = ImportResolver;
exports.debugOutputAstAsTypeScript = debugOutputAstAsTypeScript;
exports.TypeScriptEmitter = TypeScriptEmitter;
exports.ParseLocation = ParseLocation;
exports.ParseSourceFile = ParseSourceFile;
exports.ParseSourceSpan = ParseSourceSpan;
exports.ParseErrorLevel = ParseErrorLevel;
exports.ParseError = ParseError;
exports.typeSourceSpan = typeSourceSpan;
exports.DomElementSchemaRegistry = DomElementSchemaRegistry;
exports.CssSelector = CssSelector;
exports.SelectorMatcher = SelectorMatcher;
exports.SelectorListContext = SelectorListContext;
exports.SelectorContext = SelectorContext;
exports.StylesCompileDependency = StylesCompileDependency;
exports.StylesCompileResult = StylesCompileResult;
exports.CompiledStylesheet = CompiledStylesheet;
exports.StyleCompiler = StyleCompiler;
exports.TemplateParseError = TemplateParseError;
exports.TemplateParseResult = TemplateParseResult;
exports.TemplateParser = TemplateParser;
exports.splitClasses = splitClasses;
exports.createElementCssSelector = createElementCssSelector;
exports.removeSummaryDuplicates = removeSummaryDuplicates;
Object.defineProperty(exports, "__esModule", {
value: true
});
});
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var trace_1 = __webpack_require__(126);
var lang_facade_1 = __webpack_require__(143);
var NativeScriptDomAdapter = function() {
function NativeScriptDomAdapter() {
this.resourceLoaderType = null;
}
NativeScriptDomAdapter.makeCurrent = function() {
if (!global.TNS_WEBPACK) {
try {
var privateAPI = global.require("@angular/platform-browser");
var setRootDomAdapter = privateAPI.ɵsetRootDomAdapter;
trace_1.rendererLog("Setting root DOM adapter...");
setRootDomAdapter(new NativeScriptDomAdapter());
} catch (e) {
trace_1.rendererLog("@angular/platform-browser package not present. NOT setting root DOM adapter...");
}
}
};
NativeScriptDomAdapter.prototype.hasProperty = function(_element, _name) {
return true;
};
NativeScriptDomAdapter.prototype.log = function(arg) {
lang_facade_1.print(arg);
};
NativeScriptDomAdapter.prototype.logError = function(arg) {
lang_facade_1.print(arg);
};
NativeScriptDomAdapter.prototype.logGroup = function(arg) {
lang_facade_1.print(arg);
};
NativeScriptDomAdapter.prototype.logGroupEnd = function() {};
Object.defineProperty(NativeScriptDomAdapter.prototype, "attrToPropMap", {
get: function() {
throw new Error("Not implemented!");
},
set: function(_value) {
throw new Error("Not implemented!");
},
enumerable: true,
configurable: true
});
NativeScriptDomAdapter.prototype.setProperty = function(_el, _name, _value) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getProperty = function(_el, _name) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.invoke = function(_el, _methodName, _args) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.contains = function(_nodeA, _nodeB) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.parse = function(_templateHtml) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.query = function(_selector) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.querySelector = function(_el, _selector) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.querySelectorAll = function(_el, _selector) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.on = function(_el, _evt, _listener) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.onAndCancel = function(_el, _evt, _listener) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.dispatchEvent = function(_el, _evt) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.createMouseEvent = function(_eventType) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.createEvent = function(_eventType) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.preventDefault = function(_evt) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.isPrevented = function(_evt) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getInnerHTML = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getTemplateContent = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getOuterHTML = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.nodeName = function(_node) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.nodeValue = function(_node) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.type = function(_node) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.content = function(_node) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.firstChild = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.nextSibling = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.parentElement = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.childNodes = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.childNodesAsList = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.clearNodes = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.appendChild = function(_el, _node) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.removeChild = function(_el, _node) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.replaceChild = function(_el, _newNode, _oldNode) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.remove = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.insertBefore = function(_el, _node) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.insertAllBefore = function(_el, _nodes) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.insertAfter = function(_el, _node) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.setInnerHTML = function(_el, _value) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getText = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.setText = function(_el, _value) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getValue = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.setValue = function(_el, _value) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getChecked = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.setChecked = function(_el, _value) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.createComment = function(_text) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.createTemplate = function(_html) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.createElement = function(_tagName, _doc) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.createElementNS = function(_ns, _tagName, _doc) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.createTextNode = function(_text, _doc) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.createScriptTag = function(_attrName, _attrValue, _doc) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.createStyleElement = function(_css, _doc) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.createShadowRoot = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getShadowRoot = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getHost = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getDistributedNodes = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.clone = function(_node) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getElementsByClassName = function(_element, _name) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getElementsByTagName = function(_element, _name) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.classList = function(_element) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.addClass = function(_element, _className) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.removeClass = function(_element, _className) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.hasClass = function(_element, _className) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.setStyle = function(_element, _styleName, _styleValue) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.removeStyle = function(_element, _styleName) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getStyle = function(_element, _styleName) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.hasStyle = function(_element, _styleName, _styleValue) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.tagName = function(_element) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.attributeMap = function(_element) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.hasAttribute = function(_element, _attribute) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.hasAttributeNS = function(_element, _ns, _attribute) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getAttribute = function(_element, _attribute) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getAttributeNS = function(_element, _ns, _attribute) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.setAttribute = function(_element, _name, _value) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.setAttributeNS = function(_element, _ns, _name, _value) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.removeAttribute = function(_element, _attribute) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.removeAttributeNS = function(_element, _ns, _attribute) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.templateAwareRoot = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.createHtmlDocument = function() {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.defaultDoc = function() {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getBoundingClientRect = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getTitle = function() {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.setTitle = function(_doc, _newTitle) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.elementMatches = function(_n, _selector) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.isTemplateElement = function(_el) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.isTextNode = function(_node) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.isCommentNode = function(_node) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.isElementNode = function(_node) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.hasShadowRoot = function(_node) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.isShadowRoot = function(_node) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.importIntoDoc = function(_node) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.adoptNode = function(_node) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getHref = function(_element) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getEventKey = function(_event) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.resolveAndSetHref = function(_element, _baseUrl, _href) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.supportsDOMEvents = function() {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.supportsNativeShadowDOM = function() {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getGlobalEventTarget = function(_doc, _target) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getHistory = function() {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getLocation = function() {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getBaseHref = function() {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.resetBaseElement = function() {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getUserAgent = function() {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.setData = function(_element, _name, _value) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getComputedStyle = function(_element) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getData = function(_element, _name) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.setGlobalVar = function(_name, _value) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.supportsWebAnimation = function() {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.performanceNow = function() {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getAnimationPrefix = function() {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getTransitionEnd = function() {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.supportsAnimation = function() {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.supportsCookies = function() {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.getCookie = function(_name) {
throw new Error("Not implemented!");
};
NativeScriptDomAdapter.prototype.setCookie = function(_name, _value) {
throw new Error("Not implemented!");
};
return NativeScriptDomAdapter;
}();
exports.NativeScriptDomAdapter = NativeScriptDomAdapter;
NativeScriptDomAdapter.makeCurrent();
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var globalScope = exports.global;
exports.global = globalScope;
function isPresent(obj) {
return obj !== undefined && obj !== null;
}
exports.isPresent = isPresent;
function isBlank(obj) {
return obj === undefined || obj === null;
}
exports.isBlank = isBlank;
function isNumber(obj) {
return typeof obj === "number";
}
exports.isNumber = isNumber;
function isDate(obj) {
return obj instanceof Date && !isNaN(obj.valueOf());
}
exports.isDate = isDate;
function print(obj) {
console.log(obj);
}
exports.print = print;
function isJsObject(o) {
return o !== null && (typeof o === "function" || typeof o === "object");
}
exports.isJsObject = isJsObject;
function isArray(obj) {
return Array.isArray(obj);
}
exports.isArray = isArray;
var _symbolIterator = null;
function getSymbolIterator() {
if (isBlank(_symbolIterator)) {
if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
_symbolIterator = Symbol.iterator;
} else {
var keys = Object.getOwnPropertyNames(Map.prototype);
for (var i = 0; i < keys.length; ++i) {
var key = keys[i];
if (key !== "entries" && key !== "size" && Map.prototype[key] === Map.prototype["entries"]) {
_symbolIterator = key;
}
}
}
}
return _symbolIterator;
}
exports.getSymbolIterator = getSymbolIterator;
function setValueOnPath(global, path, value) {
var parts = path.split(".");
var obj = global;
while (parts.length > 1) {
var name_1 = parts.shift();
if (obj.hasOwnProperty(name_1) && isPresent(obj[name_1])) {
obj = obj[name_1];
} else {
obj = obj[name_1] = {};
}
}
if (obj === undefined || obj === null) {
obj = {};
}
obj[parts.shift()] = value;
}
exports.setValueOnPath = setValueOnPath;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var compiler_1 = __webpack_require__(141);
var SecurityContext;
(function(SecurityContext) {
SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
SecurityContext[SecurityContext["URL"] = 4] = "URL";
SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
})(SecurityContext = exports.SecurityContext || (exports.SecurityContext = {}));
var NativeScriptElementSchemaRegistry = function(_super) {
__extends(NativeScriptElementSchemaRegistry, _super);
function NativeScriptElementSchemaRegistry() {
return _super !== null && _super.apply(this, arguments) || this;
}
NativeScriptElementSchemaRegistry.prototype.hasProperty = function(_tagName, _propName) {
return true;
};
NativeScriptElementSchemaRegistry.prototype.hasElement = function(_tagName, _schemaMetas) {
return true;
};
NativeScriptElementSchemaRegistry.prototype.getMappedPropName = function(propName) {
return propName;
};
NativeScriptElementSchemaRegistry.prototype.getDefaultComponentElementName = function() {
return "ng-component";
};
NativeScriptElementSchemaRegistry.prototype.securityContext = function(_tagName, _propName) {
return SecurityContext.NONE;
};
NativeScriptElementSchemaRegistry.prototype.validateProperty = function(_name) {
return {
error: false
};
};
NativeScriptElementSchemaRegistry.prototype.validateAttribute = function(_name) {
return {
error: false
};
};
NativeScriptElementSchemaRegistry.prototype.allKnownElementNames = function() {
return [];
};
NativeScriptElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function(propName) {
return propName;
};
NativeScriptElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function(_camelCaseProp, _userProvidedProp, val) {
return {
error: null,
value: val.toString()
};
};
return NativeScriptElementSchemaRegistry;
}(compiler_1.ElementSchemaRegistry);
exports.NativeScriptElementSchemaRegistry = NativeScriptElementSchemaRegistry;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var file_system_1 = __webpack_require__(22);
var compiler_1 = __webpack_require__(141);
var FileSystemResourceLoader = function(_super) {
__extends(FileSystemResourceLoader, _super);
function FileSystemResourceLoader() {
return _super !== null && _super.apply(this, arguments) || this;
}
FileSystemResourceLoader.prototype.resolve = function(url, baseUrl) {
if (url.indexOf("/") !== 0) {
return file_system_1.path.join(baseUrl, url);
} else {
return url;
}
};
FileSystemResourceLoader.prototype.get = function(url) {
var appDir = file_system_1.knownFolders.currentApp().path;
var templatePath = this.resolve(url, appDir);
if (!file_system_1.File.exists(templatePath)) {
throw new Error("File " + templatePath + " does not exist. Resolved from: " + url + ".");
}
var templateFile = file_system_1.File.fromPath(templatePath);
return templateFile.readText();
};
return FileSystemResourceLoader;
}(compiler_1.ResourceLoader);
exports.FileSystemResourceLoader = FileSystemResourceLoader;
}, function(module, exports, __webpack_require__) {
global.__requireOverride = function() {
var map = {
"@angular/animations": function() {
return __webpack_require__(147);
},
"@angular/animations/": function() {
return __webpack_require__(147);
},
"@angular/animations/@angular/animations": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "@angular/animations/@angular/animations.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"@angular/animations/@angular/animations.es5": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "@angular/animations/@angular/animations.es5.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"@angular/animations/@angular/animations.es5.js": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "@angular/animations/@angular/animations.es5.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"@angular/animations/@angular/animations.js": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "@angular/animations/@angular/animations.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"@angular/animations/@angular/animations/browser": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "@angular/animations/@angular/animations/browser.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"@angular/animations/@angular/animations/browser.es5": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "@angular/animations/@angular/animations/browser.es5.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"@angular/animations/@angular/animations/browser.es5.js": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "@angular/animations/@angular/animations/browser.es5.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"@angular/animations/@angular/animations/browser.js": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "@angular/animations/@angular/animations/browser.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"@angular/animations/@angular/animations/browser/testing": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "@angular/animations/@angular/animations/browser/testing.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"@angular/animations/@angular/animations/browser/testing.es5": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "@angular/animations/@angular/animations/browser/testing.es5.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"@angular/animations/@angular/animations/browser/testing.es5.js": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "@angular/animations/@angular/animations/browser/testing.es5.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"@angular/animations/@angular/animations/browser/testing.js": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "@angular/animations/@angular/animations/browser/testing.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"@angular/animations/browser": function() {
return __webpack_require__(154);
},
"@angular/animations/browser/": function() {
return __webpack_require__(154);
},
"@angular/animations/browser/testing": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "@angular/animations/browser/testing"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"@angular/animations/browser/testing/": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "@angular/animations/browser/testing"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"@angular/animations/bundles/animations-browser-testing.umd": function() {
return __webpack_require__(155);
},
"@angular/animations/bundles/animations-browser-testing.umd.js": function() {
return __webpack_require__(155);
},
"@angular/animations/bundles/animations-browser-testing.umd.min": function() {
return __webpack_require__(156);
},
"@angular/animations/bundles/animations-browser-testing.umd.min.js": function() {
return __webpack_require__(156);
},
"@angular/animations/bundles/animations-browser.umd": function() {
return __webpack_require__(154);
},
"@angular/animations/bundles/animations-browser.umd.js": function() {
return __webpack_require__(154);
},
"@angular/animations/bundles/animations-browser.umd.min": function() {
return __webpack_require__(157);
},
"@angular/animations/bundles/animations-browser.umd.min.js": function() {
return __webpack_require__(157);
},
"@angular/animations/bundles/animations.umd": function() {
return __webpack_require__(147);
},
"@angular/animations/bundles/animations.umd.js": function() {
return __webpack_require__(147);
},
"@angular/animations/bundles/animations.umd.min": function() {
return __webpack_require__(158);
},
"@angular/animations/bundles/animations.umd.min.js": function() {
return __webpack_require__(158);
},
"@angular/common": function() {
return __webpack_require__(159);
},
"@angular/common/": function() {
return __webpack_require__(159);
},
"@angular/compiler": function() {
return __webpack_require__(141);
},
"@angular/compiler/": function() {
return __webpack_require__(141);
},
"@angular/core": function() {
return __webpack_require__(92);
},
"@angular/core/": function() {
return __webpack_require__(92);
},
"@angular/forms": function() {
return __webpack_require__(160);
},
"@angular/forms/": function() {
return __webpack_require__(160);
},
"@angular/http": function() {
return __webpack_require__(167);
},
"@angular/http/": function() {
return __webpack_require__(167);
},
"@angular/platform-browser": function() {
return __webpack_require__(166);
},
"@angular/platform-browser-dynamic": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "@angular/platform-browser-dynamic"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"@angular/platform-browser-dynamic/": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "@angular/platform-browser-dynamic"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"@angular/platform-browser/": function() {
return __webpack_require__(166);
},
"@angular/router": function() {
return __webpack_require__(168);
},
"@angular/router/": function() {
return __webpack_require__(168);
},
application: function() {
return __webpack_require__(18);
},
"application-settings": function() {
return __webpack_require__(187);
},
"application-settings/": function() {
return __webpack_require__(187);
},
"application-settings/application-settings": function() {
return __webpack_require__(187);
},
"application-settings/application-settings-common": function() {
return __webpack_require__(188);
},
"application-settings/application-settings-common.js": function() {
return __webpack_require__(188);
},
"application-settings/application-settings.js": function() {
return __webpack_require__(187);
},
"application/": function() {
return __webpack_require__(18);
},
"application/application": function() {
return __webpack_require__(18);
},
"application/application-common": function() {
return __webpack_require__(19);
},
"application/application-common.js": function() {
return __webpack_require__(19);
},
"application/application.js": function() {
return __webpack_require__(18);
},
"bundle-entry-points": function() {
return __webpack_require__(189);
},
"bundle-entry-points.js": function() {
return __webpack_require__(189);
},
color: function() {
return __webpack_require__(27);
},
"color/": function() {
return __webpack_require__(27);
},
"color/color": function() {
return __webpack_require__(27);
},
"color/color-common": function() {
return __webpack_require__(28);
},
"color/color-common.js": function() {
return __webpack_require__(28);
},
"color/color.js": function() {
return __webpack_require__(27);
},
"color/known-colors": function() {
return __webpack_require__(29);
},
"color/known-colors.js": function() {
return __webpack_require__(29);
},
connectivity: function() {
return __webpack_require__(234);
},
"connectivity/": function() {
return __webpack_require__(234);
},
"connectivity/connectivity": function() {
return __webpack_require__(234);
},
"connectivity/connectivity.js": function() {
return __webpack_require__(234);
},
console: function() {
return __webpack_require__(87);
},
"console/": function() {
return __webpack_require__(87);
},
"console/console": function() {
return __webpack_require__(87);
},
"console/console.js": function() {
return __webpack_require__(87);
},
css: function() {
return __webpack_require__(46);
},
"css-value": function() {
return __webpack_require__(21);
},
"css-value/": function() {
return __webpack_require__(21);
},
"css-value/index": function() {
return __webpack_require__(21);
},
"css-value/index.js": function() {
return __webpack_require__(21);
},
"css/": function() {
return __webpack_require__(46);
},
"css/index": function() {
return __webpack_require__(46);
},
"css/index.js": function() {
return __webpack_require__(46);
},
"css/lib/parse/index": function() {
return __webpack_require__(47);
},
"css/lib/parse/index.js": function() {
return __webpack_require__(47);
},
"data/observable": function() {
return __webpack_require__(20);
},
"data/observable-array": function() {
return __webpack_require__(75);
},
"data/observable-array/": function() {
return __webpack_require__(75);
},
"data/observable-array/observable-array": function() {
return __webpack_require__(75);
},
"data/observable-array/observable-array.js": function() {
return __webpack_require__(75);
},
"data/observable/": function() {
return __webpack_require__(20);
},
"data/observable/observable": function() {
return __webpack_require__(20);
},
"data/observable/observable.js": function() {
return __webpack_require__(20);
},
"data/virtual-array": function() {
return __webpack_require__(235);
},
"data/virtual-array/": function() {
return __webpack_require__(235);
},
"data/virtual-array/virtual-array": function() {
return __webpack_require__(235);
},
"data/virtual-array/virtual-array.js": function() {
return __webpack_require__(235);
},
debugger: function() {
return __webpack_require__(84);
},
"debugger/": function() {
return __webpack_require__(84);
},
"debugger/debugger": function() {
return __webpack_require__(84);
},
"debugger/debugger.js": function() {
return __webpack_require__(84);
},
fetch: function() {
return __webpack_require__(86);
},
"fetch/": function() {
return __webpack_require__(86);
},
"fetch/fetch": function() {
return __webpack_require__(86);
},
"fetch/fetch.js": function() {
return __webpack_require__(86);
},
"file-system": function() {
return __webpack_require__(22);
},
"file-system/": function() {
return __webpack_require__(22);
},
"file-system/file-name-resolver": function() {
return __webpack_require__(58);
},
"file-system/file-name-resolver/": function() {
return __webpack_require__(58);
},
"file-system/file-name-resolver/file-name-resolver": function() {
return __webpack_require__(58);
},
"file-system/file-name-resolver/file-name-resolver.js": function() {
return __webpack_require__(58);
},
"file-system/file-system": function() {
return __webpack_require__(22);
},
"file-system/file-system-access": function() {
return __webpack_require__(23);
},
"file-system/file-system-access.js": function() {
return __webpack_require__(23);
},
"file-system/file-system.js": function() {
return __webpack_require__(22);
},
"fps-meter": function() {
return __webpack_require__(236);
},
"fps-meter/": function() {
return __webpack_require__(236);
},
"fps-meter/fps-meter": function() {
return __webpack_require__(236);
},
"fps-meter/fps-meter.js": function() {
return __webpack_require__(236);
},
"fps-meter/fps-native": function() {
return __webpack_require__(237);
},
"fps-meter/fps-native.js": function() {
return __webpack_require__(237);
},
globals: function() {
return __webpack_require__(5);
},
"globals/": function() {
return __webpack_require__(5);
},
"globals/decorators": function() {
return __webpack_require__(6);
},
"globals/decorators.js": function() {
return __webpack_require__(6);
},
"globals/globals": function() {
return __webpack_require__(5);
},
"globals/globals.js": function() {
return __webpack_require__(5);
},
http: function() {
return __webpack_require__(82);
},
"http/": function() {
return __webpack_require__(82);
},
"http/http": function() {
return __webpack_require__(82);
},
"http/http-request": function() {
return __webpack_require__(83);
},
"http/http-request/": function() {
return __webpack_require__(83);
},
"http/http-request/http-request": function() {
return __webpack_require__(83);
},
"http/http-request/http-request.js": function() {
return __webpack_require__(83);
},
"http/http.js": function() {
return __webpack_require__(82);
},
"image-asset": function() {
return __webpack_require__(199);
},
"image-asset/": function() {
return __webpack_require__(199);
},
"image-asset/image-asset": function() {
return __webpack_require__(199);
},
"image-asset/image-asset-common": function() {
return __webpack_require__(200);
},
"image-asset/image-asset-common.js": function() {
return __webpack_require__(200);
},
"image-asset/image-asset.js": function() {
return __webpack_require__(199);
},
"image-source": function() {
return __webpack_require__(85);
},
"image-source/": function() {
return __webpack_require__(85);
},
"image-source/image-source": function() {
return __webpack_require__(85);
},
"image-source/image-source.js": function() {
return __webpack_require__(85);
},
"js-libs/easysax": function() {
return __webpack_require__(61);
},
"js-libs/easysax/": function() {
return __webpack_require__(61);
},
"js-libs/easysax/easysax": function() {
return __webpack_require__(61);
},
"js-libs/easysax/easysax.js": function() {
return __webpack_require__(61);
},
"js-libs/esprima": function() {
return __webpack_require__(43);
},
"js-libs/esprima/": function() {
return __webpack_require__(43);
},
"js-libs/esprima/esprima": function() {
return __webpack_require__(43);
},
"js-libs/esprima/esprima.js": function() {
return __webpack_require__(43);
},
"js-libs/polymer-expressions": function() {
return __webpack_require__(42);
},
"js-libs/polymer-expressions/": function() {
return __webpack_require__(42);
},
"js-libs/polymer-expressions/path-parser": function() {
return __webpack_require__(44);
},
"js-libs/polymer-expressions/path-parser.js": function() {
return __webpack_require__(44);
},
"js-libs/polymer-expressions/polymer-expressions": function() {
return __webpack_require__(42);
},
"js-libs/polymer-expressions/polymer-expressions.js": function() {
return __webpack_require__(42);
},
"nativescript-angular/animations": function() {
return __webpack_require__(238);
},
"nativescript-angular/animations.js": function() {
return __webpack_require__(238);
},
"nativescript-angular/animations/animation-driver": function() {
return __webpack_require__(242);
},
"nativescript-angular/animations/animation-driver.js": function() {
return __webpack_require__(242);
},
"nativescript-angular/animations/animation-engine": function() {
return __webpack_require__(240);
},
"nativescript-angular/animations/animation-engine.js": function() {
return __webpack_require__(240);
},
"nativescript-angular/animations/animation-player": function() {
return __webpack_require__(243);
},
"nativescript-angular/animations/animation-player.js": function() {
return __webpack_require__(243);
},
"nativescript-angular/animations/dom-utils": function() {
return __webpack_require__(241);
},
"nativescript-angular/animations/dom-utils.js": function() {
return __webpack_require__(241);
},
"nativescript-angular/animations/utils": function() {
return __webpack_require__(244);
},
"nativescript-angular/animations/utils.js": function() {
return __webpack_require__(244);
},
"nativescript-angular/collection-facade": function() {
return __webpack_require__(256);
},
"nativescript-angular/collection-facade.js": function() {
return __webpack_require__(256);
},
"nativescript-angular/common/detached-loader": function() {
return __webpack_require__(252);
},
"nativescript-angular/common/detached-loader.js": function() {
return __webpack_require__(252);
},
"nativescript-angular/common/utils": function() {
return __webpack_require__(258);
},
"nativescript-angular/common/utils.js": function() {
return __webpack_require__(258);
},
"nativescript-angular/directives": function() {
return __webpack_require__(254);
},
"nativescript-angular/directives.js": function() {
return __webpack_require__(254);
},
"nativescript-angular/directives/action-bar": function() {
return __webpack_require__(259);
},
"nativescript-angular/directives/action-bar.js": function() {
return __webpack_require__(259);
},
"nativescript-angular/directives/dialogs": function() {
return __webpack_require__(253);
},
"nativescript-angular/directives/dialogs.js": function() {
return __webpack_require__(253);
},
"nativescript-angular/directives/list-view-comp": function() {
return __webpack_require__(255);
},
"nativescript-angular/directives/list-view-comp.js": function() {
return __webpack_require__(255);
},
"nativescript-angular/directives/platform-filters": function() {
return __webpack_require__(260);
},
"nativescript-angular/directives/platform-filters.js": function() {
return __webpack_require__(260);
},
"nativescript-angular/directives/tab-view": function() {
return __webpack_require__(257);
},
"nativescript-angular/directives/tab-view.js": function() {
return __webpack_require__(257);
},
"nativescript-angular/dom-adapter": function() {
return __webpack_require__(142);
},
"nativescript-angular/dom-adapter.js": function() {
return __webpack_require__(142);
},
"nativescript-angular/element-registry": function() {
return __webpack_require__(249);
},
"nativescript-angular/element-registry.js": function() {
return __webpack_require__(249);
},
"nativescript-angular/file-system/ns-file-system": function() {
return __webpack_require__(268);
},
"nativescript-angular/file-system/ns-file-system.js": function() {
return __webpack_require__(268);
},
"nativescript-angular/forms": function() {
return __webpack_require__(269);
},
"nativescript-angular/forms.js": function() {
return __webpack_require__(269);
},
"nativescript-angular/hooks/before-livesync": function() {
return __webpack_require__(270);
},
"nativescript-angular/hooks/before-livesync.js": function() {
return __webpack_require__(270);
},
"nativescript-angular/hooks/hook-helper": function() {
return __webpack_require__(271);
},
"nativescript-angular/hooks/hook-helper.js": function() {
return __webpack_require__(271);
},
"nativescript-angular/http": function() {
return __webpack_require__(273);
},
"nativescript-angular/http.js": function() {
return __webpack_require__(273);
},
"nativescript-angular/http/ns-http": function() {
return __webpack_require__(274);
},
"nativescript-angular/http/ns-http.js": function() {
return __webpack_require__(274);
},
"nativescript-angular/index": function() {
return __webpack_require__(276);
},
"nativescript-angular/index.js": function() {
return __webpack_require__(276);
},
"nativescript-angular/lang-facade": function() {
return __webpack_require__(143);
},
"nativescript-angular/lang-facade.js": function() {
return __webpack_require__(143);
},
"nativescript-angular/modal-dialog": function() {
return __webpack_require__(287);
},
"nativescript-angular/modal-dialog.js": function() {
return __webpack_require__(287);
},
"nativescript-angular/nativescript.module": function() {
return __webpack_require__(246);
},
"nativescript-angular/nativescript.module.js": function() {
return __webpack_require__(246);
},
"nativescript-angular/platform": function() {
return __webpack_require__(3);
},
"nativescript-angular/platform-common": function() {
return __webpack_require__(4);
},
"nativescript-angular/platform-common.js": function() {
return __webpack_require__(4);
},
"nativescript-angular/platform-providers": function() {
return __webpack_require__(127);
},
"nativescript-angular/platform-providers.js": function() {
return __webpack_require__(127);
},
"nativescript-angular/platform-static": function() {
return __webpack_require__(277);
},
"nativescript-angular/platform-static.js": function() {
return __webpack_require__(277);
},
"nativescript-angular/platform.js": function() {
return __webpack_require__(3);
},
"nativescript-angular/polyfills/array": function() {
return __webpack_require__(90);
},
"nativescript-angular/polyfills/array.js": function() {
return __webpack_require__(90);
},
"nativescript-angular/polyfills/console": function() {
return __webpack_require__(91);
},
"nativescript-angular/polyfills/console.js": function() {
return __webpack_require__(91);
},
"nativescript-angular/postinstall": function() {
return __webpack_require__(288);
},
"nativescript-angular/postinstall.js": function() {
return __webpack_require__(288);
},
"nativescript-angular/renderer": function() {
return __webpack_require__(247);
},
"nativescript-angular/renderer.js": function() {
return __webpack_require__(247);
},
"nativescript-angular/resource-loader": function() {
return __webpack_require__(145);
},
"nativescript-angular/resource-loader.js": function() {
return __webpack_require__(145);
},
"nativescript-angular/router": function() {
return __webpack_require__(278);
},
"nativescript-angular/router-url-tree": function() {
return __webpack_require__(284);
},
"nativescript-angular/router-url-tree.js": function() {
return __webpack_require__(284);
},
"nativescript-angular/router.js": function() {
return __webpack_require__(278);
},
"nativescript-angular/router/ns-location-strategy": function() {
return __webpack_require__(281);
},
"nativescript-angular/router/ns-location-strategy.js": function() {
return __webpack_require__(281);
},
"nativescript-angular/router/ns-module-factory-loader": function() {
return __webpack_require__(286);
},
"nativescript-angular/router/ns-module-factory-loader.js": function() {
return __webpack_require__(286);
},
"nativescript-angular/router/ns-platform-location": function() {
return __webpack_require__(285);
},
"nativescript-angular/router/ns-platform-location.js": function() {
return __webpack_require__(285);
},
"nativescript-angular/router/ns-router-link": function() {
return __webpack_require__(279);
},
"nativescript-angular/router/ns-router-link-active": function() {
return __webpack_require__(283);
},
"nativescript-angular/router/ns-router-link-active.js": function() {
return __webpack_require__(283);
},
"nativescript-angular/router/ns-router-link.js": function() {
return __webpack_require__(279);
},
"nativescript-angular/router/page-router-outlet": function() {
return __webpack_require__(280);
},
"nativescript-angular/router/page-router-outlet.js": function() {
return __webpack_require__(280);
},
"nativescript-angular/router/router-extensions": function() {
return __webpack_require__(282);
},
"nativescript-angular/router/router-extensions.js": function() {
return __webpack_require__(282);
},
"nativescript-angular/schema-registry": function() {
return __webpack_require__(144);
},
"nativescript-angular/schema-registry.js": function() {
return __webpack_require__(144);
},
"nativescript-angular/trace": function() {
return __webpack_require__(126);
},
"nativescript-angular/trace.js": function() {
return __webpack_require__(126);
},
"nativescript-angular/value-accessors/base-value-accessor": function() {
return __webpack_require__(262);
},
"nativescript-angular/value-accessors/base-value-accessor.js": function() {
return __webpack_require__(262);
},
"nativescript-angular/value-accessors/checked-value-accessor": function() {
return __webpack_require__(263);
},
"nativescript-angular/value-accessors/checked-value-accessor.js": function() {
return __webpack_require__(263);
},
"nativescript-angular/value-accessors/date-value-accessor": function() {
return __webpack_require__(264);
},
"nativescript-angular/value-accessors/date-value-accessor.js": function() {
return __webpack_require__(264);
},
"nativescript-angular/value-accessors/number-value-accessor": function() {
return __webpack_require__(266);
},
"nativescript-angular/value-accessors/number-value-accessor.js": function() {
return __webpack_require__(266);
},
"nativescript-angular/value-accessors/selectedIndex-value-accessor": function() {
return __webpack_require__(267);
},
"nativescript-angular/value-accessors/selectedIndex-value-accessor.js": function() {
return __webpack_require__(267);
},
"nativescript-angular/value-accessors/text-value-accessor": function() {
return __webpack_require__(261);
},
"nativescript-angular/value-accessors/text-value-accessor.js": function() {
return __webpack_require__(261);
},
"nativescript-angular/value-accessors/time-value-accessor": function() {
return __webpack_require__(265);
},
"nativescript-angular/value-accessors/time-value-accessor.js": function() {
return __webpack_require__(265);
},
"nativescript-angular/view-util": function() {
return __webpack_require__(248);
},
"nativescript-angular/view-util.js": function() {
return __webpack_require__(248);
},
"nativescript-angular/zone-js/dist/zone-nativescript": function() {
return __webpack_require__(88);
},
"nativescript-angular/zone-js/dist/zone-nativescript.js": function() {
return __webpack_require__(88);
},
"nativescript-intl/index": function() {
return __webpack_require__(138);
},
"nativescript-intl/index.js": function() {
return __webpack_require__(138);
},
"nativescript-intl/nativescript-intl": function() {
return __webpack_require__(139);
},
"nativescript-intl/nativescript-intl-common": function() {
return __webpack_require__(140);
},
"nativescript-intl/nativescript-intl-common.js": function() {
return __webpack_require__(140);
},
"nativescript-intl/nativescript-intl.js": function() {
return __webpack_require__(139);
},
platform: function() {
return __webpack_require__(25);
},
"platform/": function() {
return __webpack_require__(25);
},
"platform/platform": function() {
return __webpack_require__(25);
},
"platform/platform.js": function() {
return __webpack_require__(25);
},
"reflect-metadata": function() {
return __webpack_require__(89);
},
"reflect-metadata/": function() {
return __webpack_require__(89);
},
"reflect-metadata/Reflect": function() {
return __webpack_require__(89);
},
"reflect-metadata/Reflect.js": function() {
return __webpack_require__(89);
},
"reflect-metadata/docs/ecmarkup": function() {
return __webpack_require__(290);
},
"reflect-metadata/docs/ecmarkup.js": function() {
return __webpack_require__(290);
},
"reflect-metadata/gulpfile": function() {
return __webpack_require__(291);
},
"reflect-metadata/gulpfile.js": function() {
return __webpack_require__(291);
},
rxjs: function() {
return __webpack_require__(292);
},
"rxjs/": function() {
return __webpack_require__(292);
},
"rxjs/AsyncSubject": function() {
return __webpack_require__(296);
},
"rxjs/AsyncSubject.js": function() {
return __webpack_require__(296);
},
"rxjs/BehaviorSubject": function() {
return __webpack_require__(169);
},
"rxjs/BehaviorSubject.js": function() {
return __webpack_require__(169);
},
"rxjs/InnerSubscriber": function() {
return __webpack_require__(119);
},
"rxjs/InnerSubscriber.js": function() {
return __webpack_require__(119);
},
"rxjs/Notification": function() {
return __webpack_require__(175);
},
"rxjs/Notification.js": function() {
return __webpack_require__(175);
},
"rxjs/Observable": function() {
return __webpack_require__(93);
},
"rxjs/Observable.js": function() {
return __webpack_require__(93);
},
"rxjs/Observer": function() {
return __webpack_require__(104);
},
"rxjs/Observer.js": function() {
return __webpack_require__(104);
},
"rxjs/Operator": function() {
return __webpack_require__(576);
},
"rxjs/Operator.js": function() {
return __webpack_require__(576);
},
"rxjs/OuterSubscriber": function() {
return __webpack_require__(114);
},
"rxjs/OuterSubscriber.js": function() {
return __webpack_require__(114);
},
"rxjs/ReplaySubject": function() {
return __webpack_require__(368);
},
"rxjs/ReplaySubject.js": function() {
return __webpack_require__(368);
},
"rxjs/Rx": function() {
return __webpack_require__(292);
},
"rxjs/Rx.js": function() {
return __webpack_require__(292);
},
"rxjs/Scheduler": function() {
return __webpack_require__(332);
},
"rxjs/Scheduler.js": function() {
return __webpack_require__(332);
},
"rxjs/Subject": function() {
return __webpack_require__(123);
},
"rxjs/Subject.js": function() {
return __webpack_require__(123);
},
"rxjs/SubjectSubscription": function() {
return __webpack_require__(125);
},
"rxjs/SubjectSubscription.js": function() {
return __webpack_require__(125);
},
"rxjs/Subscriber": function() {
return __webpack_require__(96);
},
"rxjs/Subscriber.js": function() {
return __webpack_require__(96);
},
"rxjs/Subscription": function() {
return __webpack_require__(98);
},
"rxjs/Subscription.js": function() {
return __webpack_require__(98);
},
"rxjs/add/observable/bindCallback": function() {
return __webpack_require__(293);
},
"rxjs/add/observable/bindCallback.js": function() {
return __webpack_require__(293);
},
"rxjs/add/observable/bindNodeCallback": function() {
return __webpack_require__(297);
},
"rxjs/add/observable/bindNodeCallback.js": function() {
return __webpack_require__(297);
},
"rxjs/add/observable/combineLatest": function() {
return __webpack_require__(300);
},
"rxjs/add/observable/combineLatest.js": function() {
return __webpack_require__(300);
},
"rxjs/add/observable/concat": function() {
return __webpack_require__(303);
},
"rxjs/add/observable/concat.js": function() {
return __webpack_require__(303);
},
"rxjs/add/observable/defer": function() {
return __webpack_require__(306);
},
"rxjs/add/observable/defer.js": function() {
return __webpack_require__(306);
},
"rxjs/add/observable/dom/ajax": function() {
return __webpack_require__(362);
},
"rxjs/add/observable/dom/ajax.js": function() {
return __webpack_require__(362);
},
"rxjs/add/observable/dom/webSocket": function() {
return __webpack_require__(365);
},
"rxjs/add/observable/dom/webSocket.js": function() {
return __webpack_require__(365);
},
"rxjs/add/observable/empty": function() {
return __webpack_require__(309);
},
"rxjs/add/observable/empty.js": function() {
return __webpack_require__(309);
},
"rxjs/add/observable/forkJoin": function() {
return __webpack_require__(311);
},
"rxjs/add/observable/forkJoin.js": function() {
return __webpack_require__(311);
},
"rxjs/add/observable/from": function() {
return __webpack_require__(312);
},
"rxjs/add/observable/from.js": function() {
return __webpack_require__(312);
},
"rxjs/add/observable/fromEvent": function() {
return __webpack_require__(313);
},
"rxjs/add/observable/fromEvent.js": function() {
return __webpack_require__(313);
},
"rxjs/add/observable/fromEventPattern": function() {
return __webpack_require__(316);
},
"rxjs/add/observable/fromEventPattern.js": function() {
return __webpack_require__(316);
},
"rxjs/add/observable/fromPromise": function() {
return __webpack_require__(275);
},
"rxjs/add/observable/fromPromise.js": function() {
return __webpack_require__(275);
},
"rxjs/add/observable/generate": function() {
return __webpack_require__(319);
},
"rxjs/add/observable/generate.js": function() {
return __webpack_require__(319);
},
"rxjs/add/observable/if": function() {
return __webpack_require__(321);
},
"rxjs/add/observable/if.js": function() {
return __webpack_require__(321);
},
"rxjs/add/observable/interval": function() {
return __webpack_require__(324);
},
"rxjs/add/observable/interval.js": function() {
return __webpack_require__(324);
},
"rxjs/add/observable/merge": function() {
return __webpack_require__(333);
},
"rxjs/add/observable/merge.js": function() {
return __webpack_require__(333);
},
"rxjs/add/observable/never": function() {
return __webpack_require__(336);
},
"rxjs/add/observable/never.js": function() {
return __webpack_require__(336);
},
"rxjs/add/observable/of": function() {
return __webpack_require__(340);
},
"rxjs/add/observable/of.js": function() {
return __webpack_require__(340);
},
"rxjs/add/observable/onErrorResumeNext": function() {
return __webpack_require__(341);
},
"rxjs/add/observable/onErrorResumeNext.js": function() {
return __webpack_require__(341);
},
"rxjs/add/observable/pairs": function() {
return __webpack_require__(343);
},
"rxjs/add/observable/pairs.js": function() {
return __webpack_require__(343);
},
"rxjs/add/observable/race": function() {
return __webpack_require__(334);
},
"rxjs/add/observable/race.js": function() {
return __webpack_require__(334);
},
"rxjs/add/observable/range": function() {
return __webpack_require__(346);
},
"rxjs/add/observable/range.js": function() {
return __webpack_require__(346);
},
"rxjs/add/observable/throw": function() {
return __webpack_require__(352);
},
"rxjs/add/observable/throw.js": function() {
return __webpack_require__(352);
},
"rxjs/add/observable/timer": function() {
return __webpack_require__(355);
},
"rxjs/add/observable/timer.js": function() {
return __webpack_require__(355);
},
"rxjs/add/observable/using": function() {
return __webpack_require__(349);
},
"rxjs/add/observable/using.js": function() {
return __webpack_require__(349);
},
"rxjs/add/observable/zip": function() {
return __webpack_require__(359);
},
"rxjs/add/observable/zip.js": function() {
return __webpack_require__(359);
},
"rxjs/add/operator/audit": function() {
return __webpack_require__(442);
},
"rxjs/add/operator/audit.js": function() {
return __webpack_require__(442);
},
"rxjs/add/operator/auditTime": function() {
return __webpack_require__(444);
},
"rxjs/add/operator/auditTime.js": function() {
return __webpack_require__(444);
},
"rxjs/add/operator/buffer": function() {
return __webpack_require__(373);
},
"rxjs/add/operator/buffer.js": function() {
return __webpack_require__(373);
},
"rxjs/add/operator/bufferCount": function() {
return __webpack_require__(375);
},
"rxjs/add/operator/bufferCount.js": function() {
return __webpack_require__(375);
},
"rxjs/add/operator/bufferTime": function() {
return __webpack_require__(377);
},
"rxjs/add/operator/bufferTime.js": function() {
return __webpack_require__(377);
},
"rxjs/add/operator/bufferToggle": function() {
return __webpack_require__(379);
},
"rxjs/add/operator/bufferToggle.js": function() {
return __webpack_require__(379);
},
"rxjs/add/operator/bufferWhen": function() {
return __webpack_require__(381);
},
"rxjs/add/operator/bufferWhen.js": function() {
return __webpack_require__(381);
},
"rxjs/add/operator/catch": function() {
return __webpack_require__(383);
},
"rxjs/add/operator/catch.js": function() {
return __webpack_require__(383);
},
"rxjs/add/operator/combineAll": function() {
return __webpack_require__(384);
},
"rxjs/add/operator/combineAll.js": function() {
return __webpack_require__(384);
},
"rxjs/add/operator/combineLatest": function() {
return __webpack_require__(386);
},
"rxjs/add/operator/combineLatest.js": function() {
return __webpack_require__(386);
},
"rxjs/add/operator/concat": function() {
return __webpack_require__(387);
},
"rxjs/add/operator/concat.js": function() {
return __webpack_require__(387);
},
"rxjs/add/operator/concatAll": function() {
return __webpack_require__(388);
},
"rxjs/add/operator/concatAll.js": function() {
return __webpack_require__(388);
},
"rxjs/add/operator/concatMap": function() {
return __webpack_require__(389);
},
"rxjs/add/operator/concatMap.js": function() {
return __webpack_require__(389);
},
"rxjs/add/operator/concatMapTo": function() {
return __webpack_require__(390);
},
"rxjs/add/operator/concatMapTo.js": function() {
return __webpack_require__(390);
},
"rxjs/add/operator/count": function() {
return __webpack_require__(393);
},
"rxjs/add/operator/count.js": function() {
return __webpack_require__(393);
},
"rxjs/add/operator/debounce": function() {
return __webpack_require__(397);
},
"rxjs/add/operator/debounce.js": function() {
return __webpack_require__(397);
},
"rxjs/add/operator/debounceTime": function() {
return __webpack_require__(399);
},
"rxjs/add/operator/debounceTime.js": function() {
return __webpack_require__(399);
},
"rxjs/add/operator/defaultIfEmpty": function() {
return __webpack_require__(401);
},
"rxjs/add/operator/defaultIfEmpty.js": function() {
return __webpack_require__(401);
},
"rxjs/add/operator/delay": function() {
return __webpack_require__(403);
},
"rxjs/add/operator/delay.js": function() {
return __webpack_require__(403);
},
"rxjs/add/operator/delayWhen": function() {
return __webpack_require__(405);
},
"rxjs/add/operator/delayWhen.js": function() {
return __webpack_require__(405);
},
"rxjs/add/operator/dematerialize": function() {
return __webpack_require__(395);
},
"rxjs/add/operator/dematerialize.js": function() {
return __webpack_require__(395);
},
"rxjs/add/operator/distinct": function() {
return __webpack_require__(407);
},
"rxjs/add/operator/distinct.js": function() {
return __webpack_require__(407);
},
"rxjs/add/operator/distinctUntilChanged": function() {
return __webpack_require__(410);
},
"rxjs/add/operator/distinctUntilChanged.js": function() {
return __webpack_require__(410);
},
"rxjs/add/operator/distinctUntilKeyChanged": function() {
return __webpack_require__(412);
},
"rxjs/add/operator/distinctUntilKeyChanged.js": function() {
return __webpack_require__(412);
},
"rxjs/add/operator/do": function() {
return __webpack_require__(414);
},
"rxjs/add/operator/do.js": function() {
return __webpack_require__(414);
},
"rxjs/add/operator/elementAt": function() {
return __webpack_require__(422);
},
"rxjs/add/operator/elementAt.js": function() {
return __webpack_require__(422);
},
"rxjs/add/operator/every": function() {
return __webpack_require__(449);
},
"rxjs/add/operator/every.js": function() {
return __webpack_require__(449);
},
"rxjs/add/operator/exhaust": function() {
return __webpack_require__(416);
},
"rxjs/add/operator/exhaust.js": function() {
return __webpack_require__(416);
},
"rxjs/add/operator/exhaustMap": function() {
return __webpack_require__(418);
},
"rxjs/add/operator/exhaustMap.js": function() {
return __webpack_require__(418);
},
"rxjs/add/operator/expand": function() {
return __webpack_require__(420);
},
"rxjs/add/operator/expand.js": function() {
return __webpack_require__(420);
},
"rxjs/add/operator/filter": function() {
return __webpack_require__(425);
},
"rxjs/add/operator/filter.js": function() {
return __webpack_require__(425);
},
"rxjs/add/operator/finally": function() {
return __webpack_require__(426);
},
"rxjs/add/operator/finally.js": function() {
return __webpack_require__(426);
},
"rxjs/add/operator/find": function() {
return __webpack_require__(428);
},
"rxjs/add/operator/find.js": function() {
return __webpack_require__(428);
},
"rxjs/add/operator/findIndex": function() {
return __webpack_require__(430);
},
"rxjs/add/operator/findIndex.js": function() {
return __webpack_require__(430);
},
"rxjs/add/operator/first": function() {
return __webpack_require__(432);
},
"rxjs/add/operator/first.js": function() {
return __webpack_require__(432);
},
"rxjs/add/operator/groupBy": function() {
return __webpack_require__(433);
},
"rxjs/add/operator/groupBy.js": function() {
return __webpack_require__(433);
},
"rxjs/add/operator/ignoreElements": function() {
return __webpack_require__(438);
},
"rxjs/add/operator/ignoreElements.js": function() {
return __webpack_require__(438);
},
"rxjs/add/operator/isEmpty": function() {
return __webpack_require__(440);
},
"rxjs/add/operator/isEmpty.js": function() {
return __webpack_require__(440);
},
"rxjs/add/operator/last": function() {
return __webpack_require__(446);
},
"rxjs/add/operator/last.js": function() {
return __webpack_require__(446);
},
"rxjs/add/operator/let": function() {
return __webpack_require__(447);
},
"rxjs/add/operator/let.js": function() {
return __webpack_require__(447);
},
"rxjs/add/operator/map": function() {
return __webpack_require__(450);
},
"rxjs/add/operator/map.js": function() {
return __webpack_require__(450);
},
"rxjs/add/operator/mapTo": function() {
return __webpack_require__(451);
},
"rxjs/add/operator/mapTo.js": function() {
return __webpack_require__(451);
},
"rxjs/add/operator/materialize": function() {
return __webpack_require__(453);
},
"rxjs/add/operator/materialize.js": function() {
return __webpack_require__(453);
},
"rxjs/add/operator/max": function() {
return __webpack_require__(455);
},
"rxjs/add/operator/max.js": function() {
return __webpack_require__(455);
},
"rxjs/add/operator/merge": function() {
return __webpack_require__(457);
},
"rxjs/add/operator/merge.js": function() {
return __webpack_require__(457);
},
"rxjs/add/operator/mergeAll": function() {
return __webpack_require__(458);
},
"rxjs/add/operator/mergeAll.js": function() {
return __webpack_require__(458);
},
"rxjs/add/operator/mergeMap": function() {
return __webpack_require__(459);
},
"rxjs/add/operator/mergeMap.js": function() {
return __webpack_require__(459);
},
"rxjs/add/operator/mergeMapTo": function() {
return __webpack_require__(460);
},
"rxjs/add/operator/mergeMapTo.js": function() {
return __webpack_require__(460);
},
"rxjs/add/operator/mergeScan": function() {
return __webpack_require__(461);
},
"rxjs/add/operator/mergeScan.js": function() {
return __webpack_require__(461);
},
"rxjs/add/operator/min": function() {
return __webpack_require__(463);
},
"rxjs/add/operator/min.js": function() {
return __webpack_require__(463);
},
"rxjs/add/operator/multicast": function() {
return __webpack_require__(465);
},
"rxjs/add/operator/multicast.js": function() {
return __webpack_require__(465);
},
"rxjs/add/operator/observeOn": function() {
return __webpack_require__(466);
},
"rxjs/add/operator/observeOn.js": function() {
return __webpack_require__(466);
},
"rxjs/add/operator/onErrorResumeNext": function() {
return __webpack_require__(467);
},
"rxjs/add/operator/onErrorResumeNext.js": function() {
return __webpack_require__(467);
},
"rxjs/add/operator/pairwise": function() {
return __webpack_require__(468);
},
"rxjs/add/operator/pairwise.js": function() {
return __webpack_require__(468);
},
"rxjs/add/operator/partition": function() {
return __webpack_require__(470);
},
"rxjs/add/operator/partition.js": function() {
return __webpack_require__(470);
},
"rxjs/add/operator/pluck": function() {
return __webpack_require__(473);
},
"rxjs/add/operator/pluck.js": function() {
return __webpack_require__(473);
},
"rxjs/add/operator/publish": function() {
return __webpack_require__(475);
},
"rxjs/add/operator/publish.js": function() {
return __webpack_require__(475);
},
"rxjs/add/operator/publishBehavior": function() {
return __webpack_require__(477);
},
"rxjs/add/operator/publishBehavior.js": function() {
return __webpack_require__(477);
},
"rxjs/add/operator/publishLast": function() {
return __webpack_require__(481);
},
"rxjs/add/operator/publishLast.js": function() {
return __webpack_require__(481);
},
"rxjs/add/operator/publishReplay": function() {
return __webpack_require__(479);
},
"rxjs/add/operator/publishReplay.js": function() {
return __webpack_require__(479);
},
"rxjs/add/operator/race": function() {
return __webpack_require__(483);
},
"rxjs/add/operator/race.js": function() {
return __webpack_require__(483);
},
"rxjs/add/operator/reduce": function() {
return __webpack_require__(484);
},
"rxjs/add/operator/reduce.js": function() {
return __webpack_require__(484);
},
"rxjs/add/operator/repeat": function() {
return __webpack_require__(485);
},
"rxjs/add/operator/repeat.js": function() {
return __webpack_require__(485);
},
"rxjs/add/operator/repeatWhen": function() {
return __webpack_require__(487);
},
"rxjs/add/operator/repeatWhen.js": function() {
return __webpack_require__(487);
},
"rxjs/add/operator/retry": function() {
return __webpack_require__(489);
},
"rxjs/add/operator/retry.js": function() {
return __webpack_require__(489);
},
"rxjs/add/operator/retryWhen": function() {
return __webpack_require__(491);
},
"rxjs/add/operator/retryWhen.js": function() {
return __webpack_require__(491);
},
"rxjs/add/operator/sample": function() {
return __webpack_require__(493);
},
"rxjs/add/operator/sample.js": function() {
return __webpack_require__(493);
},
"rxjs/add/operator/sampleTime": function() {
return __webpack_require__(495);
},
"rxjs/add/operator/sampleTime.js": function() {
return __webpack_require__(495);
},
"rxjs/add/operator/scan": function() {
return __webpack_require__(497);
},
"rxjs/add/operator/scan.js": function() {
return __webpack_require__(497);
},
"rxjs/add/operator/sequenceEqual": function() {
return __webpack_require__(499);
},
"rxjs/add/operator/sequenceEqual.js": function() {
return __webpack_require__(499);
},
"rxjs/add/operator/share": function() {
return __webpack_require__(501);
},
"rxjs/add/operator/share.js": function() {
return __webpack_require__(501);
},
"rxjs/add/operator/single": function() {
return __webpack_require__(502);
},
"rxjs/add/operator/single.js": function() {
return __webpack_require__(502);
},
"rxjs/add/operator/skip": function() {
return __webpack_require__(504);
},
"rxjs/add/operator/skip.js": function() {
return __webpack_require__(504);
},
"rxjs/add/operator/skipUntil": function() {
return __webpack_require__(506);
},
"rxjs/add/operator/skipUntil.js": function() {
return __webpack_require__(506);
},
"rxjs/add/operator/skipWhile": function() {
return __webpack_require__(508);
},
"rxjs/add/operator/skipWhile.js": function() {
return __webpack_require__(508);
},
"rxjs/add/operator/startWith": function() {
return __webpack_require__(510);
},
"rxjs/add/operator/startWith.js": function() {
return __webpack_require__(510);
},
"rxjs/add/operator/subscribeOn": function() {
return __webpack_require__(512);
},
"rxjs/add/operator/subscribeOn.js": function() {
return __webpack_require__(512);
},
"rxjs/add/operator/switch": function() {
return __webpack_require__(519);
},
"rxjs/add/operator/switch.js": function() {
return __webpack_require__(519);
},
"rxjs/add/operator/switchMap": function() {
return __webpack_require__(521);
},
"rxjs/add/operator/switchMap.js": function() {
return __webpack_require__(521);
},
"rxjs/add/operator/switchMapTo": function() {
return __webpack_require__(523);
},
"rxjs/add/operator/switchMapTo.js": function() {
return __webpack_require__(523);
},
"rxjs/add/operator/take": function() {
return __webpack_require__(525);
},
"rxjs/add/operator/take.js": function() {
return __webpack_require__(525);
},
"rxjs/add/operator/takeLast": function() {
return __webpack_require__(527);
},
"rxjs/add/operator/takeLast.js": function() {
return __webpack_require__(527);
},
"rxjs/add/operator/takeUntil": function() {
return __webpack_require__(529);
},
"rxjs/add/operator/takeUntil.js": function() {
return __webpack_require__(529);
},
"rxjs/add/operator/takeWhile": function() {
return __webpack_require__(531);
},
"rxjs/add/operator/takeWhile.js": function() {
return __webpack_require__(531);
},
"rxjs/add/operator/throttle": function() {
return __webpack_require__(533);
},
"rxjs/add/operator/throttle.js": function() {
return __webpack_require__(533);
},
"rxjs/add/operator/throttleTime": function() {
return __webpack_require__(535);
},
"rxjs/add/operator/throttleTime.js": function() {
return __webpack_require__(535);
},
"rxjs/add/operator/timeInterval": function() {
return __webpack_require__(537);
},
"rxjs/add/operator/timeInterval.js": function() {
return __webpack_require__(537);
},
"rxjs/add/operator/timeout": function() {
return __webpack_require__(539);
},
"rxjs/add/operator/timeout.js": function() {
return __webpack_require__(539);
},
"rxjs/add/operator/timeoutWith": function() {
return __webpack_require__(542);
},
"rxjs/add/operator/timeoutWith.js": function() {
return __webpack_require__(542);
},
"rxjs/add/operator/timestamp": function() {
return __webpack_require__(544);
},
"rxjs/add/operator/timestamp.js": function() {
return __webpack_require__(544);
},
"rxjs/add/operator/toArray": function() {
return __webpack_require__(546);
},
"rxjs/add/operator/toArray.js": function() {
return __webpack_require__(546);
},
"rxjs/add/operator/toPromise": function() {
return __webpack_require__(548);
},
"rxjs/add/operator/toPromise.js": function() {
return __webpack_require__(548);
},
"rxjs/add/operator/window": function() {
return __webpack_require__(550);
},
"rxjs/add/operator/window.js": function() {
return __webpack_require__(550);
},
"rxjs/add/operator/windowCount": function() {
return __webpack_require__(552);
},
"rxjs/add/operator/windowCount.js": function() {
return __webpack_require__(552);
},
"rxjs/add/operator/windowTime": function() {
return __webpack_require__(554);
},
"rxjs/add/operator/windowTime.js": function() {
return __webpack_require__(554);
},
"rxjs/add/operator/windowToggle": function() {
return __webpack_require__(556);
},
"rxjs/add/operator/windowToggle.js": function() {
return __webpack_require__(556);
},
"rxjs/add/operator/windowWhen": function() {
return __webpack_require__(558);
},
"rxjs/add/operator/windowWhen.js": function() {
return __webpack_require__(558);
},
"rxjs/add/operator/withLatestFrom": function() {
return __webpack_require__(560);
},
"rxjs/add/operator/withLatestFrom.js": function() {
return __webpack_require__(560);
},
"rxjs/add/operator/zip": function() {
return __webpack_require__(562);
},
"rxjs/add/operator/zip.js": function() {
return __webpack_require__(562);
},
"rxjs/add/operator/zipAll": function() {
return __webpack_require__(563);
},
"rxjs/add/operator/zipAll.js": function() {
return __webpack_require__(563);
},
"rxjs/observable/ArrayLikeObservable": function() {
return __webpack_require__(173);
},
"rxjs/observable/ArrayLikeObservable.js": function() {
return __webpack_require__(173);
},
"rxjs/observable/ArrayObservable": function() {
return __webpack_require__(109);
},
"rxjs/observable/ArrayObservable.js": function() {
return __webpack_require__(109);
},
"rxjs/observable/BoundCallbackObservable": function() {
return __webpack_require__(295);
},
"rxjs/observable/BoundCallbackObservable.js": function() {
return __webpack_require__(295);
},
"rxjs/observable/BoundNodeCallbackObservable": function() {
return __webpack_require__(299);
},
"rxjs/observable/BoundNodeCallbackObservable.js": function() {
return __webpack_require__(299);
},
"rxjs/observable/ConnectableObservable": function() {
return __webpack_require__(122);
},
"rxjs/observable/ConnectableObservable.js": function() {
return __webpack_require__(122);
},
"rxjs/observable/DeferObservable": function() {
return __webpack_require__(308);
},
"rxjs/observable/DeferObservable.js": function() {
return __webpack_require__(308);
},
"rxjs/observable/EmptyObservable": function() {
return __webpack_require__(111);
},
"rxjs/observable/EmptyObservable.js": function() {
return __webpack_require__(111);
},
"rxjs/observable/ErrorObservable": function() {
return __webpack_require__(354);
},
"rxjs/observable/ErrorObservable.js": function() {
return __webpack_require__(354);
},
"rxjs/observable/ForkJoinObservable": function() {
return __webpack_require__(162);
},
"rxjs/observable/ForkJoinObservable.js": function() {
return __webpack_require__(162);
},
"rxjs/observable/FromEventObservable": function() {
return __webpack_require__(315);
},
"rxjs/observable/FromEventObservable.js": function() {
return __webpack_require__(315);
},
"rxjs/observable/FromEventPatternObservable": function() {
return __webpack_require__(318);
},
"rxjs/observable/FromEventPatternObservable.js": function() {
return __webpack_require__(318);
},
"rxjs/observable/FromObservable": function() {
return __webpack_require__(171);
},
"rxjs/observable/FromObservable.js": function() {
return __webpack_require__(171);
},
"rxjs/observable/GenerateObservable": function() {
return __webpack_require__(320);
},
"rxjs/observable/GenerateObservable.js": function() {
return __webpack_require__(320);
},
"rxjs/observable/IfObservable": function() {
return __webpack_require__(323);
},
"rxjs/observable/IfObservable.js": function() {
return __webpack_require__(323);
},
"rxjs/observable/IntervalObservable": function() {
return __webpack_require__(326);
},
"rxjs/observable/IntervalObservable.js": function() {
return __webpack_require__(326);
},
"rxjs/observable/IteratorObservable": function() {
return __webpack_require__(172);
},
"rxjs/observable/IteratorObservable.js": function() {
return __webpack_require__(172);
},
"rxjs/observable/NeverObservable": function() {
return __webpack_require__(338);
},
"rxjs/observable/NeverObservable.js": function() {
return __webpack_require__(338);
},
"rxjs/observable/PairsObservable": function() {
return __webpack_require__(345);
},
"rxjs/observable/PairsObservable.js": function() {
return __webpack_require__(345);
},
"rxjs/observable/PromiseObservable": function() {
return __webpack_require__(164);
},
"rxjs/observable/PromiseObservable.js": function() {
return __webpack_require__(164);
},
"rxjs/observable/RangeObservable": function() {
return __webpack_require__(348);
},
"rxjs/observable/RangeObservable.js": function() {
return __webpack_require__(348);
},
"rxjs/observable/ScalarObservable": function() {
return __webpack_require__(110);
},
"rxjs/observable/ScalarObservable.js": function() {
return __webpack_require__(110);
},
"rxjs/observable/SubscribeOnObservable": function() {
return __webpack_require__(514);
},
"rxjs/observable/SubscribeOnObservable.js": function() {
return __webpack_require__(514);
},
"rxjs/observable/TimerObservable": function() {
return __webpack_require__(357);
},
"rxjs/observable/TimerObservable.js": function() {
return __webpack_require__(357);
},
"rxjs/observable/UsingObservable": function() {
return __webpack_require__(351);
},
"rxjs/observable/UsingObservable.js": function() {
return __webpack_require__(351);
},
"rxjs/observable/bindCallback": function() {
return __webpack_require__(294);
},
"rxjs/observable/bindCallback.js": function() {
return __webpack_require__(294);
},
"rxjs/observable/bindNodeCallback": function() {
return __webpack_require__(298);
},
"rxjs/observable/bindNodeCallback.js": function() {
return __webpack_require__(298);
},
"rxjs/observable/combineLatest": function() {
return __webpack_require__(301);
},
"rxjs/observable/combineLatest.js": function() {
return __webpack_require__(301);
},
"rxjs/observable/concat": function() {
return __webpack_require__(304);
},
"rxjs/observable/concat.js": function() {
return __webpack_require__(304);
},
"rxjs/observable/defer": function() {
return __webpack_require__(307);
},
"rxjs/observable/defer.js": function() {
return __webpack_require__(307);
},
"rxjs/observable/dom/AjaxObservable": function() {
return __webpack_require__(364);
},
"rxjs/observable/dom/AjaxObservable.js": function() {
return __webpack_require__(364);
},
"rxjs/observable/dom/WebSocketSubject": function() {
return __webpack_require__(367);
},
"rxjs/observable/dom/WebSocketSubject.js": function() {
return __webpack_require__(367);
},
"rxjs/observable/dom/ajax": function() {
return __webpack_require__(363);
},
"rxjs/observable/dom/ajax.js": function() {
return __webpack_require__(363);
},
"rxjs/observable/dom/webSocket": function() {
return __webpack_require__(366);
},
"rxjs/observable/dom/webSocket.js": function() {
return __webpack_require__(366);
},
"rxjs/observable/empty": function() {
return __webpack_require__(310);
},
"rxjs/observable/empty.js": function() {
return __webpack_require__(310);
},
"rxjs/observable/forkJoin": function() {
return __webpack_require__(161);
},
"rxjs/observable/forkJoin.js": function() {
return __webpack_require__(161);
},
"rxjs/observable/from": function() {
return __webpack_require__(170);
},
"rxjs/observable/from.js": function() {
return __webpack_require__(170);
},
"rxjs/observable/fromEvent": function() {
return __webpack_require__(314);
},
"rxjs/observable/fromEvent.js": function() {
return __webpack_require__(314);
},
"rxjs/observable/fromEventPattern": function() {
return __webpack_require__(317);
},
"rxjs/observable/fromEventPattern.js": function() {
return __webpack_require__(317);
},
"rxjs/observable/fromPromise": function() {
return __webpack_require__(163);
},
"rxjs/observable/fromPromise.js": function() {
return __webpack_require__(163);
},
"rxjs/observable/if": function() {
return __webpack_require__(322);
},
"rxjs/observable/if.js": function() {
return __webpack_require__(322);
},
"rxjs/observable/interval": function() {
return __webpack_require__(325);
},
"rxjs/observable/interval.js": function() {
return __webpack_require__(325);
},
"rxjs/observable/merge": function() {
return __webpack_require__(107);
},
"rxjs/observable/merge.js": function() {
return __webpack_require__(107);
},
"rxjs/observable/never": function() {
return __webpack_require__(337);
},
"rxjs/observable/never.js": function() {
return __webpack_require__(337);
},
"rxjs/observable/of": function() {
return __webpack_require__(176);
},
"rxjs/observable/of.js": function() {
return __webpack_require__(176);
},
"rxjs/observable/pairs": function() {
return __webpack_require__(344);
},
"rxjs/observable/pairs.js": function() {
return __webpack_require__(344);
},
"rxjs/observable/range": function() {
return __webpack_require__(347);
},
"rxjs/observable/range.js": function() {
return __webpack_require__(347);
},
"rxjs/observable/throw": function() {
return __webpack_require__(353);
},
"rxjs/observable/throw.js": function() {
return __webpack_require__(353);
},
"rxjs/observable/timer": function() {
return __webpack_require__(356);
},
"rxjs/observable/timer.js": function() {
return __webpack_require__(356);
},
"rxjs/observable/using": function() {
return __webpack_require__(350);
},
"rxjs/observable/using.js": function() {
return __webpack_require__(350);
},
"rxjs/observable/zip": function() {
return __webpack_require__(360);
},
"rxjs/observable/zip.js": function() {
return __webpack_require__(360);
},
"rxjs/operator/audit": function() {
return __webpack_require__(443);
},
"rxjs/operator/audit.js": function() {
return __webpack_require__(443);
},
"rxjs/operator/auditTime": function() {
return __webpack_require__(445);
},
"rxjs/operator/auditTime.js": function() {
return __webpack_require__(445);
},
"rxjs/operator/buffer": function() {
return __webpack_require__(374);
},
"rxjs/operator/buffer.js": function() {
return __webpack_require__(374);
},
"rxjs/operator/bufferCount": function() {
return __webpack_require__(376);
},
"rxjs/operator/bufferCount.js": function() {
return __webpack_require__(376);
},
"rxjs/operator/bufferTime": function() {
return __webpack_require__(378);
},
"rxjs/operator/bufferTime.js": function() {
return __webpack_require__(378);
},
"rxjs/operator/bufferToggle": function() {
return __webpack_require__(380);
},
"rxjs/operator/bufferToggle.js": function() {
return __webpack_require__(380);
},
"rxjs/operator/bufferWhen": function() {
return __webpack_require__(382);
},
"rxjs/operator/bufferWhen.js": function() {
return __webpack_require__(382);
},
"rxjs/operator/catch": function() {
return __webpack_require__(183);
},
"rxjs/operator/catch.js": function() {
return __webpack_require__(183);
},
"rxjs/operator/combineAll": function() {
return __webpack_require__(385);
},
"rxjs/operator/combineAll.js": function() {
return __webpack_require__(385);
},
"rxjs/operator/combineLatest": function() {
return __webpack_require__(302);
},
"rxjs/operator/combineLatest.js": function() {
return __webpack_require__(302);
},
"rxjs/operator/concat": function() {
return __webpack_require__(305);
},
"rxjs/operator/concat.js": function() {
return __webpack_require__(305);
},
"rxjs/operator/concatAll": function() {
return __webpack_require__(184);
},
"rxjs/operator/concatAll.js": function() {
return __webpack_require__(184);
},
"rxjs/operator/concatMap": function() {
return __webpack_require__(177);
},
"rxjs/operator/concatMap.js": function() {
return __webpack_require__(177);
},
"rxjs/operator/concatMapTo": function() {
return __webpack_require__(391);
},
"rxjs/operator/concatMapTo.js": function() {
return __webpack_require__(391);
},
"rxjs/operator/count": function() {
return __webpack_require__(394);
},
"rxjs/operator/count.js": function() {
return __webpack_require__(394);
},
"rxjs/operator/debounce": function() {
return __webpack_require__(398);
},
"rxjs/operator/debounce.js": function() {
return __webpack_require__(398);
},
"rxjs/operator/debounceTime": function() {
return __webpack_require__(400);
},
"rxjs/operator/debounceTime.js": function() {
return __webpack_require__(400);
},
"rxjs/operator/defaultIfEmpty": function() {
return __webpack_require__(402);
},
"rxjs/operator/defaultIfEmpty.js": function() {
return __webpack_require__(402);
},
"rxjs/operator/delay": function() {
return __webpack_require__(404);
},
"rxjs/operator/delay.js": function() {
return __webpack_require__(404);
},
"rxjs/operator/delayWhen": function() {
return __webpack_require__(406);
},
"rxjs/operator/delayWhen.js": function() {
return __webpack_require__(406);
},
"rxjs/operator/dematerialize": function() {
return __webpack_require__(396);
},
"rxjs/operator/dematerialize.js": function() {
return __webpack_require__(396);
},
"rxjs/operator/distinct": function() {
return __webpack_require__(408);
},
"rxjs/operator/distinct.js": function() {
return __webpack_require__(408);
},
"rxjs/operator/distinctUntilChanged": function() {
return __webpack_require__(411);
},
"rxjs/operator/distinctUntilChanged.js": function() {
return __webpack_require__(411);
},
"rxjs/operator/distinctUntilKeyChanged": function() {
return __webpack_require__(413);
},
"rxjs/operator/distinctUntilKeyChanged.js": function() {
return __webpack_require__(413);
},
"rxjs/operator/do": function() {
return __webpack_require__(415);
},
"rxjs/operator/do.js": function() {
return __webpack_require__(415);
},
"rxjs/operator/elementAt": function() {
return __webpack_require__(423);
},
"rxjs/operator/elementAt.js": function() {
return __webpack_require__(423);
},
"rxjs/operator/every": function() {
return __webpack_require__(179);
},
"rxjs/operator/every.js": function() {
return __webpack_require__(179);
},
"rxjs/operator/exhaust": function() {
return __webpack_require__(417);
},
"rxjs/operator/exhaust.js": function() {
return __webpack_require__(417);
},
"rxjs/operator/exhaustMap": function() {
return __webpack_require__(419);
},
"rxjs/operator/exhaustMap.js": function() {
return __webpack_require__(419);
},
"rxjs/operator/expand": function() {
return __webpack_require__(421);
},
"rxjs/operator/expand.js": function() {
return __webpack_require__(421);
},
"rxjs/operator/filter": function() {
return __webpack_require__(186);
},
"rxjs/operator/filter.js": function() {
return __webpack_require__(186);
},
"rxjs/operator/finally": function() {
return __webpack_require__(427);
},
"rxjs/operator/finally.js": function() {
return __webpack_require__(427);
},
"rxjs/operator/find": function() {
return __webpack_require__(429);
},
"rxjs/operator/find.js": function() {
return __webpack_require__(429);
},
"rxjs/operator/findIndex": function() {
return __webpack_require__(431);
},
"rxjs/operator/findIndex.js": function() {
return __webpack_require__(431);
},
"rxjs/operator/first": function() {
return __webpack_require__(180);
},
"rxjs/operator/first.js": function() {
return __webpack_require__(180);
},
"rxjs/operator/groupBy": function() {
return __webpack_require__(434);
},
"rxjs/operator/groupBy.js": function() {
return __webpack_require__(434);
},
"rxjs/operator/ignoreElements": function() {
return __webpack_require__(439);
},
"rxjs/operator/ignoreElements.js": function() {
return __webpack_require__(439);
},
"rxjs/operator/isEmpty": function() {
return __webpack_require__(441);
},
"rxjs/operator/isEmpty.js": function() {
return __webpack_require__(441);
},
"rxjs/operator/last": function() {
return __webpack_require__(185);
},
"rxjs/operator/last.js": function() {
return __webpack_require__(185);
},
"rxjs/operator/let": function() {
return __webpack_require__(448);
},
"rxjs/operator/let.js": function() {
return __webpack_require__(448);
},
"rxjs/operator/map": function() {
return __webpack_require__(165);
},
"rxjs/operator/map.js": function() {
return __webpack_require__(165);
},
"rxjs/operator/mapTo": function() {
return __webpack_require__(452);
},
"rxjs/operator/mapTo.js": function() {
return __webpack_require__(452);
},
"rxjs/operator/materialize": function() {
return __webpack_require__(454);
},
"rxjs/operator/materialize.js": function() {
return __webpack_require__(454);
},
"rxjs/operator/max": function() {
return __webpack_require__(456);
},
"rxjs/operator/max.js": function() {
return __webpack_require__(456);
},
"rxjs/operator/merge": function() {
return __webpack_require__(108);
},
"rxjs/operator/merge.js": function() {
return __webpack_require__(108);
},
"rxjs/operator/mergeAll": function() {
return __webpack_require__(113);
},
"rxjs/operator/mergeAll.js": function() {
return __webpack_require__(113);
},
"rxjs/operator/mergeMap": function() {
return __webpack_require__(178);
},
"rxjs/operator/mergeMap.js": function() {
return __webpack_require__(178);
},
"rxjs/operator/mergeMapTo": function() {
return __webpack_require__(392);
},
"rxjs/operator/mergeMapTo.js": function() {
return __webpack_require__(392);
},
"rxjs/operator/mergeScan": function() {
return __webpack_require__(462);
},
"rxjs/operator/mergeScan.js": function() {
return __webpack_require__(462);
},
"rxjs/operator/min": function() {
return __webpack_require__(464);
},
"rxjs/operator/min.js": function() {
return __webpack_require__(464);
},
"rxjs/operator/multicast": function() {
return __webpack_require__(121);
},
"rxjs/operator/multicast.js": function() {
return __webpack_require__(121);
},
"rxjs/operator/observeOn": function() {
return __webpack_require__(174);
},
"rxjs/operator/observeOn.js": function() {
return __webpack_require__(174);
},
"rxjs/operator/onErrorResumeNext": function() {
return __webpack_require__(342);
},
"rxjs/operator/onErrorResumeNext.js": function() {
return __webpack_require__(342);
},
"rxjs/operator/pairwise": function() {
return __webpack_require__(469);
},
"rxjs/operator/pairwise.js": function() {
return __webpack_require__(469);
},
"rxjs/operator/partition": function() {
return __webpack_require__(471);
},
"rxjs/operator/partition.js": function() {
return __webpack_require__(471);
},
"rxjs/operator/pluck": function() {
return __webpack_require__(474);
},
"rxjs/operator/pluck.js": function() {
return __webpack_require__(474);
},
"rxjs/operator/publish": function() {
return __webpack_require__(476);
},
"rxjs/operator/publish.js": function() {
return __webpack_require__(476);
},
"rxjs/operator/publishBehavior": function() {
return __webpack_require__(478);
},
"rxjs/operator/publishBehavior.js": function() {
return __webpack_require__(478);
},
"rxjs/operator/publishLast": function() {
return __webpack_require__(482);
},
"rxjs/operator/publishLast.js": function() {
return __webpack_require__(482);
},
"rxjs/operator/publishReplay": function() {
return __webpack_require__(480);
},
"rxjs/operator/publishReplay.js": function() {
return __webpack_require__(480);
},
"rxjs/operator/race": function() {
return __webpack_require__(335);
},
"rxjs/operator/race.js": function() {
return __webpack_require__(335);
},
"rxjs/operator/reduce": function() {
return __webpack_require__(182);
},
"rxjs/operator/reduce.js": function() {
return __webpack_require__(182);
},
"rxjs/operator/repeat": function() {
return __webpack_require__(486);
},
"rxjs/operator/repeat.js": function() {
return __webpack_require__(486);
},
"rxjs/operator/repeatWhen": function() {
return __webpack_require__(488);
},
"rxjs/operator/repeatWhen.js": function() {
return __webpack_require__(488);
},
"rxjs/operator/retry": function() {
return __webpack_require__(490);
},
"rxjs/operator/retry.js": function() {
return __webpack_require__(490);
},
"rxjs/operator/retryWhen": function() {
return __webpack_require__(492);
},
"rxjs/operator/retryWhen.js": function() {
return __webpack_require__(492);
},
"rxjs/operator/sample": function() {
return __webpack_require__(494);
},
"rxjs/operator/sample.js": function() {
return __webpack_require__(494);
},
"rxjs/operator/sampleTime": function() {
return __webpack_require__(496);
},
"rxjs/operator/sampleTime.js": function() {
return __webpack_require__(496);
},
"rxjs/operator/scan": function() {
return __webpack_require__(498);
},
"rxjs/operator/scan.js": function() {
return __webpack_require__(498);
},
"rxjs/operator/sequenceEqual": function() {
return __webpack_require__(500);
},
"rxjs/operator/sequenceEqual.js": function() {
return __webpack_require__(500);
},
"rxjs/operator/share": function() {
return __webpack_require__(120);
},
"rxjs/operator/share.js": function() {
return __webpack_require__(120);
},
"rxjs/operator/single": function() {
return __webpack_require__(503);
},
"rxjs/operator/single.js": function() {
return __webpack_require__(503);
},
"rxjs/operator/skip": function() {
return __webpack_require__(505);
},
"rxjs/operator/skip.js": function() {
return __webpack_require__(505);
},
"rxjs/operator/skipUntil": function() {
return __webpack_require__(507);
},
"rxjs/operator/skipUntil.js": function() {
return __webpack_require__(507);
},
"rxjs/operator/skipWhile": function() {
return __webpack_require__(509);
},
"rxjs/operator/skipWhile.js": function() {
return __webpack_require__(509);
},
"rxjs/operator/startWith": function() {
return __webpack_require__(511);
},
"rxjs/operator/startWith.js": function() {
return __webpack_require__(511);
},
"rxjs/operator/subscribeOn": function() {
return __webpack_require__(513);
},
"rxjs/operator/subscribeOn.js": function() {
return __webpack_require__(513);
},
"rxjs/operator/switch": function() {
return __webpack_require__(520);
},
"rxjs/operator/switch.js": function() {
return __webpack_require__(520);
},
"rxjs/operator/switchMap": function() {
return __webpack_require__(522);
},
"rxjs/operator/switchMap.js": function() {
return __webpack_require__(522);
},
"rxjs/operator/switchMapTo": function() {
return __webpack_require__(524);
},
"rxjs/operator/switchMapTo.js": function() {
return __webpack_require__(524);
},
"rxjs/operator/take": function() {
return __webpack_require__(526);
},
"rxjs/operator/take.js": function() {
return __webpack_require__(526);
},
"rxjs/operator/takeLast": function() {
return __webpack_require__(528);
},
"rxjs/operator/takeLast.js": function() {
return __webpack_require__(528);
},
"rxjs/operator/takeUntil": function() {
return __webpack_require__(530);
},
"rxjs/operator/takeUntil.js": function() {
return __webpack_require__(530);
},
"rxjs/operator/takeWhile": function() {
return __webpack_require__(532);
},
"rxjs/operator/takeWhile.js": function() {
return __webpack_require__(532);
},
"rxjs/operator/throttle": function() {
return __webpack_require__(534);
},
"rxjs/operator/throttle.js": function() {
return __webpack_require__(534);
},
"rxjs/operator/throttleTime": function() {
return __webpack_require__(536);
},
"rxjs/operator/throttleTime.js": function() {
return __webpack_require__(536);
},
"rxjs/operator/timeInterval": function() {
return __webpack_require__(538);
},
"rxjs/operator/timeInterval.js": function() {
return __webpack_require__(538);
},
"rxjs/operator/timeout": function() {
return __webpack_require__(540);
},
"rxjs/operator/timeout.js": function() {
return __webpack_require__(540);
},
"rxjs/operator/timeoutWith": function() {
return __webpack_require__(543);
},
"rxjs/operator/timeoutWith.js": function() {
return __webpack_require__(543);
},
"rxjs/operator/timestamp": function() {
return __webpack_require__(545);
},
"rxjs/operator/timestamp.js": function() {
return __webpack_require__(545);
},
"rxjs/operator/toArray": function() {
return __webpack_require__(547);
},
"rxjs/operator/toArray.js": function() {
return __webpack_require__(547);
},
"rxjs/operator/toPromise": function() {
return __webpack_require__(549);
},
"rxjs/operator/toPromise.js": function() {
return __webpack_require__(549);
},
"rxjs/operator/window": function() {
return __webpack_require__(551);
},
"rxjs/operator/window.js": function() {
return __webpack_require__(551);
},
"rxjs/operator/windowCount": function() {
return __webpack_require__(553);
},
"rxjs/operator/windowCount.js": function() {
return __webpack_require__(553);
},
"rxjs/operator/windowTime": function() {
return __webpack_require__(555);
},
"rxjs/operator/windowTime.js": function() {
return __webpack_require__(555);
},
"rxjs/operator/windowToggle": function() {
return __webpack_require__(557);
},
"rxjs/operator/windowToggle.js": function() {
return __webpack_require__(557);
},
"rxjs/operator/windowWhen": function() {
return __webpack_require__(559);
},
"rxjs/operator/windowWhen.js": function() {
return __webpack_require__(559);
},
"rxjs/operator/withLatestFrom": function() {
return __webpack_require__(561);
},
"rxjs/operator/withLatestFrom.js": function() {
return __webpack_require__(561);
},
"rxjs/operator/zip": function() {
return __webpack_require__(361);
},
"rxjs/operator/zip.js": function() {
return __webpack_require__(361);
},
"rxjs/operator/zipAll": function() {
return __webpack_require__(564);
},
"rxjs/operator/zipAll.js": function() {
return __webpack_require__(564);
},
"rxjs/scheduler/Action": function() {
return __webpack_require__(330);
},
"rxjs/scheduler/Action.js": function() {
return __webpack_require__(330);
},
"rxjs/scheduler/AnimationFrameAction": function() {
return __webpack_require__(573);
},
"rxjs/scheduler/AnimationFrameAction.js": function() {
return __webpack_require__(573);
},
"rxjs/scheduler/AnimationFrameScheduler": function() {
return __webpack_require__(575);
},
"rxjs/scheduler/AnimationFrameScheduler.js": function() {
return __webpack_require__(575);
},
"rxjs/scheduler/AsapAction": function() {
return __webpack_require__(516);
},
"rxjs/scheduler/AsapAction.js": function() {
return __webpack_require__(516);
},
"rxjs/scheduler/AsapScheduler": function() {
return __webpack_require__(518);
},
"rxjs/scheduler/AsapScheduler.js": function() {
return __webpack_require__(518);
},
"rxjs/scheduler/AsyncAction": function() {
return __webpack_require__(329);
},
"rxjs/scheduler/AsyncAction.js": function() {
return __webpack_require__(329);
},
"rxjs/scheduler/AsyncScheduler": function() {
return __webpack_require__(331);
},
"rxjs/scheduler/AsyncScheduler.js": function() {
return __webpack_require__(331);
},
"rxjs/scheduler/QueueAction": function() {
return __webpack_require__(370);
},
"rxjs/scheduler/QueueAction.js": function() {
return __webpack_require__(370);
},
"rxjs/scheduler/QueueScheduler": function() {
return __webpack_require__(371);
},
"rxjs/scheduler/QueueScheduler.js": function() {
return __webpack_require__(371);
},
"rxjs/scheduler/VirtualTimeScheduler": function() {
return __webpack_require__(571);
},
"rxjs/scheduler/VirtualTimeScheduler.js": function() {
return __webpack_require__(571);
},
"rxjs/scheduler/animationFrame": function() {
return __webpack_require__(572);
},
"rxjs/scheduler/animationFrame.js": function() {
return __webpack_require__(572);
},
"rxjs/scheduler/asap": function() {
return __webpack_require__(515);
},
"rxjs/scheduler/asap.js": function() {
return __webpack_require__(515);
},
"rxjs/scheduler/async": function() {
return __webpack_require__(328);
},
"rxjs/scheduler/async.js": function() {
return __webpack_require__(328);
},
"rxjs/scheduler/queue": function() {
return __webpack_require__(369);
},
"rxjs/scheduler/queue.js": function() {
return __webpack_require__(369);
},
"rxjs/src/Rx.global": function() {
return __webpack_require__(577);
},
"rxjs/src/Rx.global.js": function() {
return __webpack_require__(577);
},
"rxjs/symbol/iterator": function() {
return __webpack_require__(118);
},
"rxjs/symbol/iterator.js": function() {
return __webpack_require__(118);
},
"rxjs/symbol/observable": function() {
return __webpack_require__(106);
},
"rxjs/symbol/observable.js": function() {
return __webpack_require__(106);
},
"rxjs/symbol/rxSubscriber": function() {
return __webpack_require__(105);
},
"rxjs/symbol/rxSubscriber.js": function() {
return __webpack_require__(105);
},
"rxjs/util/AnimationFrame": function() {
return __webpack_require__(574);
},
"rxjs/util/AnimationFrame.js": function() {
return __webpack_require__(574);
},
"rxjs/util/ArgumentOutOfRangeError": function() {
return __webpack_require__(424);
},
"rxjs/util/ArgumentOutOfRangeError.js": function() {
return __webpack_require__(424);
},
"rxjs/util/EmptyError": function() {
return __webpack_require__(181);
},
"rxjs/util/EmptyError.js": function() {
return __webpack_require__(181);
},
"rxjs/util/FastMap": function() {
return __webpack_require__(437);
},
"rxjs/util/FastMap.js": function() {
return __webpack_require__(437);
},
"rxjs/util/Immediate": function() {
return __webpack_require__(517);
},
"rxjs/util/Immediate.js": function() {
return __webpack_require__(517);
},
"rxjs/util/Map": function() {
return __webpack_require__(435);
},
"rxjs/util/Map.js": function() {
return __webpack_require__(435);
},
"rxjs/util/MapPolyfill": function() {
return __webpack_require__(436);
},
"rxjs/util/MapPolyfill.js": function() {
return __webpack_require__(436);
},
"rxjs/util/ObjectUnsubscribedError": function() {
return __webpack_require__(124);
},
"rxjs/util/ObjectUnsubscribedError.js": function() {
return __webpack_require__(124);
},
"rxjs/util/Set": function() {
return __webpack_require__(409);
},
"rxjs/util/Set.js": function() {
return __webpack_require__(409);
},
"rxjs/util/TimeoutError": function() {
return __webpack_require__(541);
},
"rxjs/util/TimeoutError.js": function() {
return __webpack_require__(541);
},
"rxjs/util/UnsubscriptionError": function() {
return __webpack_require__(103);
},
"rxjs/util/UnsubscriptionError.js": function() {
return __webpack_require__(103);
},
"rxjs/util/applyMixins": function() {
return __webpack_require__(569);
},
"rxjs/util/applyMixins.js": function() {
return __webpack_require__(569);
},
"rxjs/util/assign": function() {
return __webpack_require__(372);
},
"rxjs/util/assign.js": function() {
return __webpack_require__(372);
},
"rxjs/util/errorObject": function() {
return __webpack_require__(102);
},
"rxjs/util/errorObject.js": function() {
return __webpack_require__(102);
},
"rxjs/util/isArray": function() {
return __webpack_require__(99);
},
"rxjs/util/isArray.js": function() {
return __webpack_require__(99);
},
"rxjs/util/isArrayLike": function() {
return __webpack_require__(116);
},
"rxjs/util/isArrayLike.js": function() {
return __webpack_require__(116);
},
"rxjs/util/isDate": function() {
return __webpack_require__(358);
},
"rxjs/util/isDate.js": function() {
return __webpack_require__(358);
},
"rxjs/util/isFunction": function() {
return __webpack_require__(97);
},
"rxjs/util/isFunction.js": function() {
return __webpack_require__(97);
},
"rxjs/util/isNumeric": function() {
return __webpack_require__(327);
},
"rxjs/util/isNumeric.js": function() {
return __webpack_require__(327);
},
"rxjs/util/isObject": function() {
return __webpack_require__(100);
},
"rxjs/util/isObject.js": function() {
return __webpack_require__(100);
},
"rxjs/util/isPromise": function() {
return __webpack_require__(117);
},
"rxjs/util/isPromise.js": function() {
return __webpack_require__(117);
},
"rxjs/util/isScheduler": function() {
return __webpack_require__(112);
},
"rxjs/util/isScheduler.js": function() {
return __webpack_require__(112);
},
"rxjs/util/noop": function() {
return __webpack_require__(339);
},
"rxjs/util/noop.js": function() {
return __webpack_require__(339);
},
"rxjs/util/not": function() {
return __webpack_require__(472);
},
"rxjs/util/not.js": function() {
return __webpack_require__(472);
},
"rxjs/util/root": function() {
return __webpack_require__(94);
},
"rxjs/util/root.js": function() {
return __webpack_require__(94);
},
"rxjs/util/subscribeToResult": function() {
return __webpack_require__(115);
},
"rxjs/util/subscribeToResult.js": function() {
return __webpack_require__(115);
},
"rxjs/util/toSubscriber": function() {
return __webpack_require__(95);
},
"rxjs/util/toSubscriber.js": function() {
return __webpack_require__(95);
},
"rxjs/util/tryCatch": function() {
return __webpack_require__(101);
},
"rxjs/util/tryCatch.js": function() {
return __webpack_require__(101);
},
"symbol-observable/index": function() {
return __webpack_require__(578);
},
"symbol-observable/index.js": function() {
return __webpack_require__(578);
},
"symbol-observable/lib/index": function() {
return __webpack_require__(579);
},
"symbol-observable/lib/index.js": function() {
return __webpack_require__(579);
},
"symbol-observable/lib/ponyfill": function() {
return __webpack_require__(581);
},
"symbol-observable/lib/ponyfill.js": function() {
return __webpack_require__(581);
},
text: function() {
return __webpack_require__(24);
},
"text/": function() {
return __webpack_require__(24);
},
"text/formatted-string": function() {
return __webpack_require__(73);
},
"text/formatted-string.js": function() {
return __webpack_require__(73);
},
"text/span": function() {
return __webpack_require__(74);
},
"text/span.js": function() {
return __webpack_require__(74);
},
"text/text": function() {
return __webpack_require__(24);
},
"text/text.js": function() {
return __webpack_require__(24);
},
timer: function() {
return __webpack_require__(7);
},
"timer/": function() {
return __webpack_require__(7);
},
"timer/timer": function() {
return __webpack_require__(7);
},
"timer/timer.js": function() {
return __webpack_require__(7);
},
"tns-core-modules/application": function() {
return __webpack_require__(18);
},
"tns-core-modules/application-settings": function() {
return __webpack_require__(187);
},
"tns-core-modules/application-settings/": function() {
return __webpack_require__(187);
},
"tns-core-modules/application-settings/application-settings": function() {
return __webpack_require__(187);
},
"tns-core-modules/application-settings/application-settings-common": function() {
return __webpack_require__(188);
},
"tns-core-modules/application-settings/application-settings-common.js": function() {
return __webpack_require__(188);
},
"tns-core-modules/application-settings/application-settings.js": function() {
return __webpack_require__(187);
},
"tns-core-modules/application/": function() {
return __webpack_require__(18);
},
"tns-core-modules/application/application": function() {
return __webpack_require__(18);
},
"tns-core-modules/application/application-common": function() {
return __webpack_require__(19);
},
"tns-core-modules/application/application-common.js": function() {
return __webpack_require__(19);
},
"tns-core-modules/application/application.js": function() {
return __webpack_require__(18);
},
"tns-core-modules/bundle-entry-points": function() {
return __webpack_require__(189);
},
"tns-core-modules/bundle-entry-points.js": function() {
return __webpack_require__(189);
},
"tns-core-modules/color": function() {
return __webpack_require__(27);
},
"tns-core-modules/color/": function() {
return __webpack_require__(27);
},
"tns-core-modules/color/color": function() {
return __webpack_require__(27);
},
"tns-core-modules/color/color-common": function() {
return __webpack_require__(28);
},
"tns-core-modules/color/color-common.js": function() {
return __webpack_require__(28);
},
"tns-core-modules/color/color.js": function() {
return __webpack_require__(27);
},
"tns-core-modules/color/known-colors": function() {
return __webpack_require__(29);
},
"tns-core-modules/color/known-colors.js": function() {
return __webpack_require__(29);
},
"tns-core-modules/connectivity": function() {
return __webpack_require__(234);
},
"tns-core-modules/connectivity/": function() {
return __webpack_require__(234);
},
"tns-core-modules/connectivity/connectivity": function() {
return __webpack_require__(234);
},
"tns-core-modules/connectivity/connectivity.js": function() {
return __webpack_require__(234);
},
"tns-core-modules/console": function() {
return __webpack_require__(87);
},
"tns-core-modules/console/": function() {
return __webpack_require__(87);
},
"tns-core-modules/console/console": function() {
return __webpack_require__(87);
},
"tns-core-modules/console/console.js": function() {
return __webpack_require__(87);
},
"tns-core-modules/css": function() {
return __webpack_require__(46);
},
"tns-core-modules/css-value": function() {
return __webpack_require__(21);
},
"tns-core-modules/css-value/": function() {
return __webpack_require__(21);
},
"tns-core-modules/css-value/index": function() {
return __webpack_require__(21);
},
"tns-core-modules/css-value/index.js": function() {
return __webpack_require__(21);
},
"tns-core-modules/css/": function() {
return __webpack_require__(46);
},
"tns-core-modules/css/index": function() {
return __webpack_require__(46);
},
"tns-core-modules/css/index.js": function() {
return __webpack_require__(46);
},
"tns-core-modules/css/lib/parse/index": function() {
return __webpack_require__(47);
},
"tns-core-modules/css/lib/parse/index.js": function() {
return __webpack_require__(47);
},
"tns-core-modules/data/observable": function() {
return __webpack_require__(20);
},
"tns-core-modules/data/observable-array": function() {
return __webpack_require__(75);
},
"tns-core-modules/data/observable-array/": function() {
return __webpack_require__(75);
},
"tns-core-modules/data/observable-array/observable-array": function() {
return __webpack_require__(75);
},
"tns-core-modules/data/observable-array/observable-array.js": function() {
return __webpack_require__(75);
},
"tns-core-modules/data/observable/": function() {
return __webpack_require__(20);
},
"tns-core-modules/data/observable/observable": function() {
return __webpack_require__(20);
},
"tns-core-modules/data/observable/observable.js": function() {
return __webpack_require__(20);
},
"tns-core-modules/data/virtual-array": function() {
return __webpack_require__(235);
},
"tns-core-modules/data/virtual-array/": function() {
return __webpack_require__(235);
},
"tns-core-modules/data/virtual-array/virtual-array": function() {
return __webpack_require__(235);
},
"tns-core-modules/data/virtual-array/virtual-array.js": function() {
return __webpack_require__(235);
},
"tns-core-modules/debugger": function() {
return __webpack_require__(84);
},
"tns-core-modules/debugger/": function() {
return __webpack_require__(84);
},
"tns-core-modules/debugger/debugger": function() {
return __webpack_require__(84);
},
"tns-core-modules/debugger/debugger.js": function() {
return __webpack_require__(84);
},
"tns-core-modules/fetch": function() {
return __webpack_require__(86);
},
"tns-core-modules/fetch/": function() {
return __webpack_require__(86);
},
"tns-core-modules/fetch/fetch": function() {
return __webpack_require__(86);
},
"tns-core-modules/fetch/fetch.js": function() {
return __webpack_require__(86);
},
"tns-core-modules/file-system": function() {
return __webpack_require__(22);
},
"tns-core-modules/file-system/": function() {
return __webpack_require__(22);
},
"tns-core-modules/file-system/file-name-resolver": function() {
return __webpack_require__(58);
},
"tns-core-modules/file-system/file-name-resolver/": function() {
return __webpack_require__(58);
},
"tns-core-modules/file-system/file-name-resolver/file-name-resolver": function() {
return __webpack_require__(58);
},
"tns-core-modules/file-system/file-name-resolver/file-name-resolver.js": function() {
return __webpack_require__(58);
},
"tns-core-modules/file-system/file-system": function() {
return __webpack_require__(22);
},
"tns-core-modules/file-system/file-system-access": function() {
return __webpack_require__(23);
},
"tns-core-modules/file-system/file-system-access.js": function() {
return __webpack_require__(23);
},
"tns-core-modules/file-system/file-system.js": function() {
return __webpack_require__(22);
},
"tns-core-modules/fps-meter": function() {
return __webpack_require__(236);
},
"tns-core-modules/fps-meter/": function() {
return __webpack_require__(236);
},
"tns-core-modules/fps-meter/fps-meter": function() {
return __webpack_require__(236);
},
"tns-core-modules/fps-meter/fps-meter.js": function() {
return __webpack_require__(236);
},
"tns-core-modules/fps-meter/fps-native": function() {
return __webpack_require__(237);
},
"tns-core-modules/fps-meter/fps-native.js": function() {
return __webpack_require__(237);
},
"tns-core-modules/globals": function() {
return __webpack_require__(5);
},
"tns-core-modules/globals/": function() {
return __webpack_require__(5);
},
"tns-core-modules/globals/decorators": function() {
return __webpack_require__(6);
},
"tns-core-modules/globals/decorators.js": function() {
return __webpack_require__(6);
},
"tns-core-modules/globals/globals": function() {
return __webpack_require__(5);
},
"tns-core-modules/globals/globals.js": function() {
return __webpack_require__(5);
},
"tns-core-modules/http": function() {
return __webpack_require__(82);
},
"tns-core-modules/http/": function() {
return __webpack_require__(82);
},
"tns-core-modules/http/http": function() {
return __webpack_require__(82);
},
"tns-core-modules/http/http-request": function() {
return __webpack_require__(83);
},
"tns-core-modules/http/http-request/": function() {
return __webpack_require__(83);
},
"tns-core-modules/http/http-request/http-request": function() {
return __webpack_require__(83);
},
"tns-core-modules/http/http-request/http-request.js": function() {
return __webpack_require__(83);
},
"tns-core-modules/http/http.js": function() {
return __webpack_require__(82);
},
"tns-core-modules/image-asset": function() {
return __webpack_require__(199);
},
"tns-core-modules/image-asset/": function() {
return __webpack_require__(199);
},
"tns-core-modules/image-asset/image-asset": function() {
return __webpack_require__(199);
},
"tns-core-modules/image-asset/image-asset-common": function() {
return __webpack_require__(200);
},
"tns-core-modules/image-asset/image-asset-common.js": function() {
return __webpack_require__(200);
},
"tns-core-modules/image-asset/image-asset.js": function() {
return __webpack_require__(199);
},
"tns-core-modules/image-source": function() {
return __webpack_require__(85);
},
"tns-core-modules/image-source/": function() {
return __webpack_require__(85);
},
"tns-core-modules/image-source/image-source": function() {
return __webpack_require__(85);
},
"tns-core-modules/image-source/image-source.js": function() {
return __webpack_require__(85);
},
"tns-core-modules/js-libs/easysax": function() {
return __webpack_require__(61);
},
"tns-core-modules/js-libs/easysax/": function() {
return __webpack_require__(61);
},
"tns-core-modules/js-libs/easysax/easysax": function() {
return __webpack_require__(61);
},
"tns-core-modules/js-libs/easysax/easysax.js": function() {
return __webpack_require__(61);
},
"tns-core-modules/js-libs/esprima": function() {
return __webpack_require__(43);
},
"tns-core-modules/js-libs/esprima/": function() {
return __webpack_require__(43);
},
"tns-core-modules/js-libs/esprima/esprima": function() {
return __webpack_require__(43);
},
"tns-core-modules/js-libs/esprima/esprima.js": function() {
return __webpack_require__(43);
},
"tns-core-modules/js-libs/polymer-expressions": function() {
return __webpack_require__(42);
},
"tns-core-modules/js-libs/polymer-expressions/": function() {
return __webpack_require__(42);
},
"tns-core-modules/js-libs/polymer-expressions/path-parser": function() {
return __webpack_require__(44);
},
"tns-core-modules/js-libs/polymer-expressions/path-parser.js": function() {
return __webpack_require__(44);
},
"tns-core-modules/js-libs/polymer-expressions/polymer-expressions": function() {
return __webpack_require__(42);
},
"tns-core-modules/js-libs/polymer-expressions/polymer-expressions.js": function() {
return __webpack_require__(42);
},
"tns-core-modules/platform": function() {
return __webpack_require__(25);
},
"tns-core-modules/platform/": function() {
return __webpack_require__(25);
},
"tns-core-modules/platform/platform": function() {
return __webpack_require__(25);
},
"tns-core-modules/platform/platform.js": function() {
return __webpack_require__(25);
},
"tns-core-modules/text": function() {
return __webpack_require__(24);
},
"tns-core-modules/text/": function() {
return __webpack_require__(24);
},
"tns-core-modules/text/formatted-string": function() {
return __webpack_require__(73);
},
"tns-core-modules/text/formatted-string.js": function() {
return __webpack_require__(73);
},
"tns-core-modules/text/span": function() {
return __webpack_require__(74);
},
"tns-core-modules/text/span.js": function() {
return __webpack_require__(74);
},
"tns-core-modules/text/text": function() {
return __webpack_require__(24);
},
"tns-core-modules/text/text.js": function() {
return __webpack_require__(24);
},
"tns-core-modules/timer": function() {
return __webpack_require__(7);
},
"tns-core-modules/timer/": function() {
return __webpack_require__(7);
},
"tns-core-modules/timer/timer": function() {
return __webpack_require__(7);
},
"tns-core-modules/timer/timer.js": function() {
return __webpack_require__(7);
},
"tns-core-modules/trace": function() {
return __webpack_require__(15);
},
"tns-core-modules/trace/": function() {
return __webpack_require__(15);
},
"tns-core-modules/trace/trace": function() {
return __webpack_require__(15);
},
"tns-core-modules/trace/trace.js": function() {
return __webpack_require__(15);
},
"tns-core-modules/ui/action-bar": function() {
return __webpack_require__(131);
},
"tns-core-modules/ui/action-bar/": function() {
return __webpack_require__(131);
},
"tns-core-modules/ui/action-bar/action-bar": function() {
return __webpack_require__(131);
},
"tns-core-modules/ui/action-bar/action-bar-common": function() {
return __webpack_require__(132);
},
"tns-core-modules/ui/action-bar/action-bar-common.js": function() {
return __webpack_require__(132);
},
"tns-core-modules/ui/action-bar/action-bar.js": function() {
return __webpack_require__(131);
},
"tns-core-modules/ui/activity-indicator": function() {
return __webpack_require__(190);
},
"tns-core-modules/ui/activity-indicator/": function() {
return __webpack_require__(190);
},
"tns-core-modules/ui/activity-indicator/activity-indicator": function() {
return __webpack_require__(190);
},
"tns-core-modules/ui/activity-indicator/activity-indicator-common": function() {
return __webpack_require__(191);
},
"tns-core-modules/ui/activity-indicator/activity-indicator-common.js": function() {
return __webpack_require__(191);
},
"tns-core-modules/ui/activity-indicator/activity-indicator.js": function() {
return __webpack_require__(190);
},
"tns-core-modules/ui/animation": function() {
return __webpack_require__(51);
},
"tns-core-modules/ui/animation/": function() {
return __webpack_require__(51);
},
"tns-core-modules/ui/animation/animation": function() {
return __webpack_require__(51);
},
"tns-core-modules/ui/animation/animation-common": function() {
return __webpack_require__(52);
},
"tns-core-modules/ui/animation/animation-common.js": function() {
return __webpack_require__(52);
},
"tns-core-modules/ui/animation/animation.js": function() {
return __webpack_require__(51);
},
"tns-core-modules/ui/animation/keyframe-animation": function() {
return __webpack_require__(50);
},
"tns-core-modules/ui/animation/keyframe-animation.js": function() {
return __webpack_require__(50);
},
"tns-core-modules/ui/border": function() {
return __webpack_require__(192);
},
"tns-core-modules/ui/border/": function() {
return __webpack_require__(192);
},
"tns-core-modules/ui/border/border": function() {
return __webpack_require__(192);
},
"tns-core-modules/ui/border/border.js": function() {
return __webpack_require__(192);
},
"tns-core-modules/ui/builder": function() {
return __webpack_require__(59);
},
"tns-core-modules/ui/builder/": function() {
return __webpack_require__(59);
},
"tns-core-modules/ui/builder/binding-builder": function() {
return __webpack_require__(41);
},
"tns-core-modules/ui/builder/binding-builder.js": function() {
return __webpack_require__(41);
},
"tns-core-modules/ui/builder/builder": function() {
return __webpack_require__(59);
},
"tns-core-modules/ui/builder/builder.js": function() {
return __webpack_require__(59);
},
"tns-core-modules/ui/builder/component-builder": function() {
return __webpack_require__(62);
},
"tns-core-modules/ui/builder/component-builder/": function() {
return __webpack_require__(62);
},
"tns-core-modules/ui/builder/component-builder/component-builder": function() {
return __webpack_require__(62);
},
"tns-core-modules/ui/builder/component-builder/component-builder.js": function() {
return __webpack_require__(62);
},
"tns-core-modules/ui/button": function() {
return __webpack_require__(69);
},
"tns-core-modules/ui/button/": function() {
return __webpack_require__(69);
},
"tns-core-modules/ui/button/button": function() {
return __webpack_require__(69);
},
"tns-core-modules/ui/button/button-common": function() {
return __webpack_require__(70);
},
"tns-core-modules/ui/button/button-common.js": function() {
return __webpack_require__(70);
},
"tns-core-modules/ui/button/button.js": function() {
return __webpack_require__(69);
},
"tns-core-modules/ui/content-view": function() {
return __webpack_require__(130);
},
"tns-core-modules/ui/content-view/": function() {
return __webpack_require__(130);
},
"tns-core-modules/ui/content-view/content-view": function() {
return __webpack_require__(130);
},
"tns-core-modules/ui/content-view/content-view.js": function() {
return __webpack_require__(130);
},
"tns-core-modules/ui/core/bindable": function() {
return __webpack_require__(39);
},
"tns-core-modules/ui/core/bindable/": function() {
return __webpack_require__(39);
},
"tns-core-modules/ui/core/bindable/bindable": function() {
return __webpack_require__(39);
},
"tns-core-modules/ui/core/bindable/bindable.js": function() {
return __webpack_require__(39);
},
"tns-core-modules/ui/core/control-state-change": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "tns-core-modules/ui/core/control-state-change"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"tns-core-modules/ui/core/control-state-change/": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "tns-core-modules/ui/core/control-state-change"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"tns-core-modules/ui/core/dependency-observable": function() {
return __webpack_require__(582);
},
"tns-core-modules/ui/core/dependency-observable/": function() {
return __webpack_require__(582);
},
"tns-core-modules/ui/core/dependency-observable/dependency-observable": function() {
return __webpack_require__(582);
},
"tns-core-modules/ui/core/dependency-observable/dependency-observable.js": function() {
return __webpack_require__(582);
},
"tns-core-modules/ui/core/properties": function() {
return __webpack_require__(34);
},
"tns-core-modules/ui/core/properties/": function() {
return __webpack_require__(34);
},
"tns-core-modules/ui/core/properties/properties": function() {
return __webpack_require__(34);
},
"tns-core-modules/ui/core/properties/properties.js": function() {
return __webpack_require__(34);
},
"tns-core-modules/ui/core/view": function() {
return __webpack_require__(12);
},
"tns-core-modules/ui/core/view-base": function() {
return __webpack_require__(38);
},
"tns-core-modules/ui/core/view-base/": function() {
return __webpack_require__(38);
},
"tns-core-modules/ui/core/view-base/view-base": function() {
return __webpack_require__(38);
},
"tns-core-modules/ui/core/view-base/view-base.js": function() {
return __webpack_require__(38);
},
"tns-core-modules/ui/core/view/": function() {
return __webpack_require__(12);
},
"tns-core-modules/ui/core/view/view": function() {
return __webpack_require__(12);
},
"tns-core-modules/ui/core/view/view-common": function() {
return __webpack_require__(30);
},
"tns-core-modules/ui/core/view/view-common.js": function() {
return __webpack_require__(30);
},
"tns-core-modules/ui/core/view/view.js": function() {
return __webpack_require__(12);
},
"tns-core-modules/ui/core/weak-event-listener": function() {
return __webpack_require__(40);
},
"tns-core-modules/ui/core/weak-event-listener/": function() {
return __webpack_require__(40);
},
"tns-core-modules/ui/core/weak-event-listener/weak-event-listener": function() {
return __webpack_require__(40);
},
"tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js": function() {
return __webpack_require__(40);
},
"tns-core-modules/ui/date-picker": function() {
return __webpack_require__(193);
},
"tns-core-modules/ui/date-picker/": function() {
return __webpack_require__(193);
},
"tns-core-modules/ui/date-picker/date-picker": function() {
return __webpack_require__(193);
},
"tns-core-modules/ui/date-picker/date-picker-common": function() {
return __webpack_require__(194);
},
"tns-core-modules/ui/date-picker/date-picker-common.js": function() {
return __webpack_require__(194);
},
"tns-core-modules/ui/date-picker/date-picker.js": function() {
return __webpack_require__(193);
},
"tns-core-modules/ui/dialogs": function() {
return __webpack_require__(8);
},
"tns-core-modules/ui/dialogs/": function() {
return __webpack_require__(8);
},
"tns-core-modules/ui/dialogs/dialogs": function() {
return __webpack_require__(8);
},
"tns-core-modules/ui/dialogs/dialogs-common": function() {
return __webpack_require__(9);
},
"tns-core-modules/ui/dialogs/dialogs-common.js": function() {
return __webpack_require__(9);
},
"tns-core-modules/ui/dialogs/dialogs.js": function() {
return __webpack_require__(8);
},
"tns-core-modules/ui/editable-text-base": function() {
return __webpack_require__(78);
},
"tns-core-modules/ui/editable-text-base/": function() {
return __webpack_require__(78);
},
"tns-core-modules/ui/editable-text-base/editable-text-base": function() {
return __webpack_require__(78);
},
"tns-core-modules/ui/editable-text-base/editable-text-base-common": function() {
return __webpack_require__(79);
},
"tns-core-modules/ui/editable-text-base/editable-text-base-common.js": function() {
return __webpack_require__(79);
},
"tns-core-modules/ui/editable-text-base/editable-text-base.js": function() {
return __webpack_require__(78);
},
"tns-core-modules/ui/enums": function() {
return __webpack_require__(245);
},
"tns-core-modules/ui/enums/": function() {
return __webpack_require__(245);
},
"tns-core-modules/ui/enums/enums": function() {
return __webpack_require__(245);
},
"tns-core-modules/ui/enums/enums.js": function() {
return __webpack_require__(245);
},
"tns-core-modules/ui/frame": function() {
return __webpack_require__(10);
},
"tns-core-modules/ui/frame/": function() {
return __webpack_require__(10);
},
"tns-core-modules/ui/frame/activity": function() {
return __webpack_require__(583);
},
"tns-core-modules/ui/frame/activity.js": function() {
return __webpack_require__(583);
},
"tns-core-modules/ui/frame/fragment": function() {
return __webpack_require__(68);
},
"tns-core-modules/ui/frame/fragment.js": function() {
return __webpack_require__(68);
},
"tns-core-modules/ui/frame/frame": function() {
return __webpack_require__(10);
},
"tns-core-modules/ui/frame/frame-common": function() {
return __webpack_require__(11);
},
"tns-core-modules/ui/frame/frame-common.js": function() {
return __webpack_require__(11);
},
"tns-core-modules/ui/frame/frame.js": function() {
return __webpack_require__(10);
},
"tns-core-modules/ui/gestures": function() {
return __webpack_require__(56);
},
"tns-core-modules/ui/gestures/": function() {
return __webpack_require__(56);
},
"tns-core-modules/ui/gestures/gestures": function() {
return __webpack_require__(56);
},
"tns-core-modules/ui/gestures/gestures-common": function() {
return __webpack_require__(57);
},
"tns-core-modules/ui/gestures/gestures-common.js": function() {
return __webpack_require__(57);
},
"tns-core-modules/ui/gestures/gestures.js": function() {
return __webpack_require__(56);
},
"tns-core-modules/ui/html-view": function() {
return __webpack_require__(195);
},
"tns-core-modules/ui/html-view/": function() {
return __webpack_require__(195);
},
"tns-core-modules/ui/html-view/html-view": function() {
return __webpack_require__(195);
},
"tns-core-modules/ui/html-view/html-view-common": function() {
return __webpack_require__(196);
},
"tns-core-modules/ui/html-view/html-view-common.js": function() {
return __webpack_require__(196);
},
"tns-core-modules/ui/html-view/html-view.js": function() {
return __webpack_require__(195);
},
"tns-core-modules/ui/image": function() {
return __webpack_require__(197);
},
"tns-core-modules/ui/image-cache": function() {
return __webpack_require__(584);
},
"tns-core-modules/ui/image-cache/": function() {
return __webpack_require__(584);
},
"tns-core-modules/ui/image-cache/image-cache": function() {
return __webpack_require__(584);
},
"tns-core-modules/ui/image-cache/image-cache-common": function() {
return __webpack_require__(585);
},
"tns-core-modules/ui/image-cache/image-cache-common.js": function() {
return __webpack_require__(585);
},
"tns-core-modules/ui/image-cache/image-cache.js": function() {
return __webpack_require__(584);
},
"tns-core-modules/ui/image/": function() {
return __webpack_require__(197);
},
"tns-core-modules/ui/image/image": function() {
return __webpack_require__(197);
},
"tns-core-modules/ui/image/image-common": function() {
return __webpack_require__(198);
},
"tns-core-modules/ui/image/image-common.js": function() {
return __webpack_require__(198);
},
"tns-core-modules/ui/image/image.js": function() {
return __webpack_require__(197);
},
"tns-core-modules/ui/label": function() {
return __webpack_require__(80);
},
"tns-core-modules/ui/label/": function() {
return __webpack_require__(80);
},
"tns-core-modules/ui/label/label": function() {
return __webpack_require__(80);
},
"tns-core-modules/ui/label/label-common": function() {
return __webpack_require__(586);
},
"tns-core-modules/ui/label/label-common.js": function() {
return __webpack_require__(586);
},
"tns-core-modules/ui/label/label.js": function() {
return __webpack_require__(80);
},
"tns-core-modules/ui/layouts/absolute-layout": function() {
return __webpack_require__(201);
},
"tns-core-modules/ui/layouts/absolute-layout/": function() {
return __webpack_require__(201);
},
"tns-core-modules/ui/layouts/absolute-layout/absolute-layout": function() {
return __webpack_require__(201);
},
"tns-core-modules/ui/layouts/absolute-layout/absolute-layout-common": function() {
return __webpack_require__(202);
},
"tns-core-modules/ui/layouts/absolute-layout/absolute-layout-common.js": function() {
return __webpack_require__(202);
},
"tns-core-modules/ui/layouts/absolute-layout/absolute-layout.js": function() {
return __webpack_require__(201);
},
"tns-core-modules/ui/layouts/dock-layout": function() {
return __webpack_require__(203);
},
"tns-core-modules/ui/layouts/dock-layout/": function() {
return __webpack_require__(203);
},
"tns-core-modules/ui/layouts/dock-layout/dock-layout": function() {
return __webpack_require__(203);
},
"tns-core-modules/ui/layouts/dock-layout/dock-layout-common": function() {
return __webpack_require__(204);
},
"tns-core-modules/ui/layouts/dock-layout/dock-layout-common.js": function() {
return __webpack_require__(204);
},
"tns-core-modules/ui/layouts/dock-layout/dock-layout.js": function() {
return __webpack_require__(203);
},
"tns-core-modules/ui/layouts/flexbox-layout": function() {
return __webpack_require__(207);
},
"tns-core-modules/ui/layouts/flexbox-layout/": function() {
return __webpack_require__(207);
},
"tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout": function() {
return __webpack_require__(207);
},
"tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout-common": function() {
return __webpack_require__(208);
},
"tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout-common.js": function() {
return __webpack_require__(208);
},
"tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout.js": function() {
return __webpack_require__(207);
},
"tns-core-modules/ui/layouts/grid-layout": function() {
return __webpack_require__(133);
},
"tns-core-modules/ui/layouts/grid-layout/": function() {
return __webpack_require__(133);
},
"tns-core-modules/ui/layouts/grid-layout/grid-layout": function() {
return __webpack_require__(133);
},
"tns-core-modules/ui/layouts/grid-layout/grid-layout-common": function() {
return __webpack_require__(134);
},
"tns-core-modules/ui/layouts/grid-layout/grid-layout-common.js": function() {
return __webpack_require__(134);
},
"tns-core-modules/ui/layouts/grid-layout/grid-layout.js": function() {
return __webpack_require__(133);
},
"tns-core-modules/ui/layouts/layout": function() {
return __webpack_require__(587);
},
"tns-core-modules/ui/layouts/layout-base": function() {
return __webpack_require__(135);
},
"tns-core-modules/ui/layouts/layout-base-common": function() {
return __webpack_require__(136);
},
"tns-core-modules/ui/layouts/layout-base-common.js": function() {
return __webpack_require__(136);
},
"tns-core-modules/ui/layouts/layout-base.js": function() {
return __webpack_require__(135);
},
"tns-core-modules/ui/layouts/layout.js": function() {
return __webpack_require__(587);
},
"tns-core-modules/ui/layouts/stack-layout": function() {
return __webpack_require__(205);
},
"tns-core-modules/ui/layouts/stack-layout/": function() {
return __webpack_require__(205);
},
"tns-core-modules/ui/layouts/stack-layout/stack-layout": function() {
return __webpack_require__(205);
},
"tns-core-modules/ui/layouts/stack-layout/stack-layout-common": function() {
return __webpack_require__(206);
},
"tns-core-modules/ui/layouts/stack-layout/stack-layout-common.js": function() {
return __webpack_require__(206);
},
"tns-core-modules/ui/layouts/stack-layout/stack-layout.js": function() {
return __webpack_require__(205);
},
"tns-core-modules/ui/layouts/wrap-layout": function() {
return __webpack_require__(250);
},
"tns-core-modules/ui/layouts/wrap-layout/": function() {
return __webpack_require__(250);
},
"tns-core-modules/ui/layouts/wrap-layout/wrap-layout": function() {
return __webpack_require__(250);
},
"tns-core-modules/ui/layouts/wrap-layout/wrap-layout-common": function() {
return __webpack_require__(251);
},
"tns-core-modules/ui/layouts/wrap-layout/wrap-layout-common.js": function() {
return __webpack_require__(251);
},
"tns-core-modules/ui/layouts/wrap-layout/wrap-layout.js": function() {
return __webpack_require__(250);
},
"tns-core-modules/ui/list-picker": function() {
return __webpack_require__(209);
},
"tns-core-modules/ui/list-picker/": function() {
return __webpack_require__(209);
},
"tns-core-modules/ui/list-picker/list-picker": function() {
return __webpack_require__(209);
},
"tns-core-modules/ui/list-picker/list-picker-common": function() {
return __webpack_require__(210);
},
"tns-core-modules/ui/list-picker/list-picker-common.js": function() {
return __webpack_require__(210);
},
"tns-core-modules/ui/list-picker/list-picker.js": function() {
return __webpack_require__(209);
},
"tns-core-modules/ui/list-view": function() {
return __webpack_require__(232);
},
"tns-core-modules/ui/list-view/": function() {
return __webpack_require__(232);
},
"tns-core-modules/ui/list-view/list-view": function() {
return __webpack_require__(232);
},
"tns-core-modules/ui/list-view/list-view-common": function() {
return __webpack_require__(233);
},
"tns-core-modules/ui/list-view/list-view-common.js": function() {
return __webpack_require__(233);
},
"tns-core-modules/ui/list-view/list-view.js": function() {
return __webpack_require__(232);
},
"tns-core-modules/ui/page": function() {
return __webpack_require__(128);
},
"tns-core-modules/ui/page/": function() {
return __webpack_require__(128);
},
"tns-core-modules/ui/page/constants": function() {
return __webpack_require__(63);
},
"tns-core-modules/ui/page/constants.js": function() {
return __webpack_require__(63);
},
"tns-core-modules/ui/page/page": function() {
return __webpack_require__(128);
},
"tns-core-modules/ui/page/page-common": function() {
return __webpack_require__(129);
},
"tns-core-modules/ui/page/page-common.js": function() {
return __webpack_require__(129);
},
"tns-core-modules/ui/page/page.js": function() {
return __webpack_require__(128);
},
"tns-core-modules/ui/placeholder": function() {
return __webpack_require__(211);
},
"tns-core-modules/ui/placeholder/": function() {
return __webpack_require__(211);
},
"tns-core-modules/ui/placeholder/placeholder": function() {
return __webpack_require__(211);
},
"tns-core-modules/ui/placeholder/placeholder.js": function() {
return __webpack_require__(211);
},
"tns-core-modules/ui/progress": function() {
return __webpack_require__(212);
},
"tns-core-modules/ui/progress/": function() {
return __webpack_require__(212);
},
"tns-core-modules/ui/progress/progress": function() {
return __webpack_require__(212);
},
"tns-core-modules/ui/progress/progress-common": function() {
return __webpack_require__(213);
},
"tns-core-modules/ui/progress/progress-common.js": function() {
return __webpack_require__(213);
},
"tns-core-modules/ui/progress/progress.js": function() {
return __webpack_require__(212);
},
"tns-core-modules/ui/proxy-view-container": function() {
return __webpack_require__(214);
},
"tns-core-modules/ui/proxy-view-container/": function() {
return __webpack_require__(214);
},
"tns-core-modules/ui/proxy-view-container/proxy-view-container": function() {
return __webpack_require__(214);
},
"tns-core-modules/ui/proxy-view-container/proxy-view-container.js": function() {
return __webpack_require__(214);
},
"tns-core-modules/ui/repeater": function() {
return __webpack_require__(215);
},
"tns-core-modules/ui/repeater/": function() {
return __webpack_require__(215);
},
"tns-core-modules/ui/repeater/repeater": function() {
return __webpack_require__(215);
},
"tns-core-modules/ui/repeater/repeater.js": function() {
return __webpack_require__(215);
},
"tns-core-modules/ui/scroll-view": function() {
return __webpack_require__(216);
},
"tns-core-modules/ui/scroll-view/": function() {
return __webpack_require__(216);
},
"tns-core-modules/ui/scroll-view/scroll-view": function() {
return __webpack_require__(216);
},
"tns-core-modules/ui/scroll-view/scroll-view-common": function() {
return __webpack_require__(217);
},
"tns-core-modules/ui/scroll-view/scroll-view-common.js": function() {
return __webpack_require__(217);
},
"tns-core-modules/ui/scroll-view/scroll-view.js": function() {
return __webpack_require__(216);
},
"tns-core-modules/ui/search-bar": function() {
return __webpack_require__(218);
},
"tns-core-modules/ui/search-bar/": function() {
return __webpack_require__(218);
},
"tns-core-modules/ui/search-bar/search-bar": function() {
return __webpack_require__(218);
},
"tns-core-modules/ui/search-bar/search-bar-common": function() {
return __webpack_require__(219);
},
"tns-core-modules/ui/search-bar/search-bar-common.js": function() {
return __webpack_require__(219);
},
"tns-core-modules/ui/search-bar/search-bar.js": function() {
return __webpack_require__(218);
},
"tns-core-modules/ui/segmented-bar": function() {
return __webpack_require__(220);
},
"tns-core-modules/ui/segmented-bar/": function() {
return __webpack_require__(220);
},
"tns-core-modules/ui/segmented-bar/segmented-bar": function() {
return __webpack_require__(220);
},
"tns-core-modules/ui/segmented-bar/segmented-bar-common": function() {
return __webpack_require__(221);
},
"tns-core-modules/ui/segmented-bar/segmented-bar-common.js": function() {
return __webpack_require__(221);
},
"tns-core-modules/ui/segmented-bar/segmented-bar.js": function() {
return __webpack_require__(220);
},
"tns-core-modules/ui/slider": function() {
return __webpack_require__(222);
},
"tns-core-modules/ui/slider/": function() {
return __webpack_require__(222);
},
"tns-core-modules/ui/slider/slider": function() {
return __webpack_require__(222);
},
"tns-core-modules/ui/slider/slider-common": function() {
return __webpack_require__(223);
},
"tns-core-modules/ui/slider/slider-common.js": function() {
return __webpack_require__(223);
},
"tns-core-modules/ui/slider/slider.js": function() {
return __webpack_require__(222);
},
"tns-core-modules/ui/styling": function() {
return __webpack_require__(35);
},
"tns-core-modules/ui/styling/": function() {
return __webpack_require__(35);
},
"tns-core-modules/ui/styling/background": function() {
return __webpack_require__(13);
},
"tns-core-modules/ui/styling/background-common": function() {
return __webpack_require__(26);
},
"tns-core-modules/ui/styling/background-common.js": function() {
return __webpack_require__(26);
},
"tns-core-modules/ui/styling/background.js": function() {
return __webpack_require__(13);
},
"tns-core-modules/ui/styling/converters": function() {
return __webpack_require__(55);
},
"tns-core-modules/ui/styling/converters.js": function() {
return __webpack_require__(55);
},
"tns-core-modules/ui/styling/css-animation-parser": function() {
return __webpack_require__(54);
},
"tns-core-modules/ui/styling/css-animation-parser.js": function() {
return __webpack_require__(54);
},
"tns-core-modules/ui/styling/css-selector": function() {
return __webpack_require__(48);
},
"tns-core-modules/ui/styling/css-selector-parser": function() {
return __webpack_require__(49);
},
"tns-core-modules/ui/styling/css-selector-parser.js": function() {
return __webpack_require__(49);
},
"tns-core-modules/ui/styling/css-selector/": function() {
return __webpack_require__(48);
},
"tns-core-modules/ui/styling/css-selector/css-selector": function() {
return __webpack_require__(48);
},
"tns-core-modules/ui/styling/css-selector/css-selector.js": function() {
return __webpack_require__(48);
},
"tns-core-modules/ui/styling/font": function() {
return __webpack_require__(32);
},
"tns-core-modules/ui/styling/font-common": function() {
return __webpack_require__(33);
},
"tns-core-modules/ui/styling/font-common.js": function() {
return __webpack_require__(33);
},
"tns-core-modules/ui/styling/font.js": function() {
return __webpack_require__(32);
},
"tns-core-modules/ui/styling/style": function() {
return __webpack_require__(35);
},
"tns-core-modules/ui/styling/style-properties": function() {
return __webpack_require__(31);
},
"tns-core-modules/ui/styling/style-properties.js": function() {
return __webpack_require__(31);
},
"tns-core-modules/ui/styling/style-scope": function() {
return __webpack_require__(45);
},
"tns-core-modules/ui/styling/style-scope.js": function() {
return __webpack_require__(45);
},
"tns-core-modules/ui/styling/style/": function() {
return __webpack_require__(35);
},
"tns-core-modules/ui/styling/style/style": function() {
return __webpack_require__(35);
},
"tns-core-modules/ui/styling/style/style.js": function() {
return __webpack_require__(35);
},
"tns-core-modules/ui/switch": function() {
return __webpack_require__(224);
},
"tns-core-modules/ui/switch/": function() {
return __webpack_require__(224);
},
"tns-core-modules/ui/switch/switch": function() {
return __webpack_require__(224);
},
"tns-core-modules/ui/switch/switch-common": function() {
return __webpack_require__(225);
},
"tns-core-modules/ui/switch/switch-common.js": function() {
return __webpack_require__(225);
},
"tns-core-modules/ui/switch/switch.js": function() {
return __webpack_require__(224);
},
"tns-core-modules/ui/tab-view": function() {
return __webpack_require__(226);
},
"tns-core-modules/ui/tab-view/": function() {
return __webpack_require__(226);
},
"tns-core-modules/ui/tab-view/tab-view": function() {
return __webpack_require__(226);
},
"tns-core-modules/ui/tab-view/tab-view-common": function() {
return __webpack_require__(227);
},
"tns-core-modules/ui/tab-view/tab-view-common.js": function() {
return __webpack_require__(227);
},
"tns-core-modules/ui/tab-view/tab-view.js": function() {
return __webpack_require__(226);
},
"tns-core-modules/ui/text-base": function() {
return __webpack_require__(71);
},
"tns-core-modules/ui/text-base/": function() {
return __webpack_require__(71);
},
"tns-core-modules/ui/text-base/text-base": function() {
return __webpack_require__(71);
},
"tns-core-modules/ui/text-base/text-base-common": function() {
return __webpack_require__(72);
},
"tns-core-modules/ui/text-base/text-base-common.js": function() {
return __webpack_require__(72);
},
"tns-core-modules/ui/text-base/text-base.js": function() {
return __webpack_require__(71);
},
"tns-core-modules/ui/text-field": function() {
return __webpack_require__(76);
},
"tns-core-modules/ui/text-field/": function() {
return __webpack_require__(76);
},
"tns-core-modules/ui/text-field/text-field": function() {
return __webpack_require__(76);
},
"tns-core-modules/ui/text-field/text-field-common": function() {
return __webpack_require__(77);
},
"tns-core-modules/ui/text-field/text-field-common.js": function() {
return __webpack_require__(77);
},
"tns-core-modules/ui/text-field/text-field.js": function() {
return __webpack_require__(76);
},
"tns-core-modules/ui/text-view": function() {
return __webpack_require__(137);
},
"tns-core-modules/ui/text-view/": function() {
return __webpack_require__(137);
},
"tns-core-modules/ui/text-view/text-view": function() {
return __webpack_require__(137);
},
"tns-core-modules/ui/text-view/text-view-common": function() {
return __webpack_require__(588);
},
"tns-core-modules/ui/text-view/text-view-common.js": function() {
return __webpack_require__(588);
},
"tns-core-modules/ui/text-view/text-view.js": function() {
return __webpack_require__(137);
},
"tns-core-modules/ui/time-picker": function() {
return __webpack_require__(230);
},
"tns-core-modules/ui/time-picker/": function() {
return __webpack_require__(230);
},
"tns-core-modules/ui/time-picker/time-picker": function() {
return __webpack_require__(230);
},
"tns-core-modules/ui/time-picker/time-picker-common": function() {
return __webpack_require__(231);
},
"tns-core-modules/ui/time-picker/time-picker-common.js": function() {
return __webpack_require__(231);
},
"tns-core-modules/ui/time-picker/time-picker.js": function() {
return __webpack_require__(230);
},
"tns-core-modules/ui/transition": function() {
return __webpack_require__(64);
},
"tns-core-modules/ui/transition/": function() {
return __webpack_require__(64);
},
"tns-core-modules/ui/transition/fade-transition": function() {
return __webpack_require__(66);
},
"tns-core-modules/ui/transition/fade-transition.js": function() {
return __webpack_require__(66);
},
"tns-core-modules/ui/transition/flip-transition": function() {
return __webpack_require__(67);
},
"tns-core-modules/ui/transition/flip-transition.js": function() {
return __webpack_require__(67);
},
"tns-core-modules/ui/transition/slide-transition": function() {
return __webpack_require__(65);
},
"tns-core-modules/ui/transition/slide-transition.js": function() {
return __webpack_require__(65);
},
"tns-core-modules/ui/transition/transition": function() {
return __webpack_require__(64);
},
"tns-core-modules/ui/transition/transition.js": function() {
return __webpack_require__(64);
},
"tns-core-modules/ui/web-view": function() {
return __webpack_require__(228);
},
"tns-core-modules/ui/web-view/": function() {
return __webpack_require__(228);
},
"tns-core-modules/ui/web-view/web-view": function() {
return __webpack_require__(228);
},
"tns-core-modules/ui/web-view/web-view-common": function() {
return __webpack_require__(229);
},
"tns-core-modules/ui/web-view/web-view-common.js": function() {
return __webpack_require__(229);
},
"tns-core-modules/ui/web-view/web-view.js": function() {
return __webpack_require__(228);
},
"tns-core-modules/utils/debug": function() {
return __webpack_require__(36);
},
"tns-core-modules/utils/debug-common": function() {
return __webpack_require__(37);
},
"tns-core-modules/utils/debug-common.js": function() {
return __webpack_require__(37);
},
"tns-core-modules/utils/debug.js": function() {
return __webpack_require__(36);
},
"tns-core-modules/utils/lazy": function() {
return __webpack_require__(53);
},
"tns-core-modules/utils/lazy.js": function() {
return __webpack_require__(53);
},
"tns-core-modules/utils/module-merge": function() {
return __webpack_require__(589);
},
"tns-core-modules/utils/module-merge.js": function() {
return __webpack_require__(589);
},
"tns-core-modules/utils/number-utils": function() {
return __webpack_require__(590);
},
"tns-core-modules/utils/number-utils.js": function() {
return __webpack_require__(590);
},
"tns-core-modules/utils/types": function() {
return __webpack_require__(17);
},
"tns-core-modules/utils/types.js": function() {
return __webpack_require__(17);
},
"tns-core-modules/utils/utils": function() {
return __webpack_require__(14);
},
"tns-core-modules/utils/utils-common": function() {
return __webpack_require__(16);
},
"tns-core-modules/utils/utils-common.js": function() {
return __webpack_require__(16);
},
"tns-core-modules/utils/utils.js": function() {
return __webpack_require__(14);
},
"tns-core-modules/xhr": function() {
return __webpack_require__(81);
},
"tns-core-modules/xhr/": function() {
return __webpack_require__(81);
},
"tns-core-modules/xhr/xhr": function() {
return __webpack_require__(81);
},
"tns-core-modules/xhr/xhr.js": function() {
return __webpack_require__(81);
},
"tns-core-modules/xml": function() {
return __webpack_require__(60);
},
"tns-core-modules/xml/": function() {
return __webpack_require__(60);
},
"tns-core-modules/xml/xml": function() {
return __webpack_require__(60);
},
"tns-core-modules/xml/xml.js": function() {
return __webpack_require__(60);
},
trace: function() {
return __webpack_require__(15);
},
"trace/": function() {
return __webpack_require__(15);
},
"trace/trace": function() {
return __webpack_require__(15);
},
"trace/trace.js": function() {
return __webpack_require__(15);
},
"ui/action-bar": function() {
return __webpack_require__(131);
},
"ui/action-bar/": function() {
return __webpack_require__(131);
},
"ui/action-bar/action-bar": function() {
return __webpack_require__(131);
},
"ui/action-bar/action-bar-common": function() {
return __webpack_require__(132);
},
"ui/action-bar/action-bar-common.js": function() {
return __webpack_require__(132);
},
"ui/action-bar/action-bar.js": function() {
return __webpack_require__(131);
},
"ui/activity-indicator": function() {
return __webpack_require__(190);
},
"ui/activity-indicator/": function() {
return __webpack_require__(190);
},
"ui/activity-indicator/activity-indicator": function() {
return __webpack_require__(190);
},
"ui/activity-indicator/activity-indicator-common": function() {
return __webpack_require__(191);
},
"ui/activity-indicator/activity-indicator-common.js": function() {
return __webpack_require__(191);
},
"ui/activity-indicator/activity-indicator.js": function() {
return __webpack_require__(190);
},
"ui/animation": function() {
return __webpack_require__(51);
},
"ui/animation/": function() {
return __webpack_require__(51);
},
"ui/animation/animation": function() {
return __webpack_require__(51);
},
"ui/animation/animation-common": function() {
return __webpack_require__(52);
},
"ui/animation/animation-common.js": function() {
return __webpack_require__(52);
},
"ui/animation/animation.js": function() {
return __webpack_require__(51);
},
"ui/animation/keyframe-animation": function() {
return __webpack_require__(50);
},
"ui/animation/keyframe-animation.js": function() {
return __webpack_require__(50);
},
"ui/border": function() {
return __webpack_require__(192);
},
"ui/border/": function() {
return __webpack_require__(192);
},
"ui/border/border": function() {
return __webpack_require__(192);
},
"ui/border/border.js": function() {
return __webpack_require__(192);
},
"ui/builder": function() {
return __webpack_require__(59);
},
"ui/builder/": function() {
return __webpack_require__(59);
},
"ui/builder/binding-builder": function() {
return __webpack_require__(41);
},
"ui/builder/binding-builder.js": function() {
return __webpack_require__(41);
},
"ui/builder/builder": function() {
return __webpack_require__(59);
},
"ui/builder/builder.js": function() {
return __webpack_require__(59);
},
"ui/builder/component-builder": function() {
return __webpack_require__(62);
},
"ui/builder/component-builder/": function() {
return __webpack_require__(62);
},
"ui/builder/component-builder/component-builder": function() {
return __webpack_require__(62);
},
"ui/builder/component-builder/component-builder.js": function() {
return __webpack_require__(62);
},
"ui/button": function() {
return __webpack_require__(69);
},
"ui/button/": function() {
return __webpack_require__(69);
},
"ui/button/button": function() {
return __webpack_require__(69);
},
"ui/button/button-common": function() {
return __webpack_require__(70);
},
"ui/button/button-common.js": function() {
return __webpack_require__(70);
},
"ui/button/button.js": function() {
return __webpack_require__(69);
},
"ui/content-view": function() {
return __webpack_require__(130);
},
"ui/content-view/": function() {
return __webpack_require__(130);
},
"ui/content-view/content-view": function() {
return __webpack_require__(130);
},
"ui/content-view/content-view.js": function() {
return __webpack_require__(130);
},
"ui/core/bindable": function() {
return __webpack_require__(39);
},
"ui/core/bindable/": function() {
return __webpack_require__(39);
},
"ui/core/bindable/bindable": function() {
return __webpack_require__(39);
},
"ui/core/bindable/bindable.js": function() {
return __webpack_require__(39);
},
"ui/core/control-state-change": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "tns-core-modules/ui/core/control-state-change"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"ui/core/control-state-change/": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "tns-core-modules/ui/core/control-state-change"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"ui/core/dependency-observable": function() {
return __webpack_require__(582);
},
"ui/core/dependency-observable/": function() {
return __webpack_require__(582);
},
"ui/core/dependency-observable/dependency-observable": function() {
return __webpack_require__(582);
},
"ui/core/dependency-observable/dependency-observable.js": function() {
return __webpack_require__(582);
},
"ui/core/properties": function() {
return __webpack_require__(34);
},
"ui/core/properties/": function() {
return __webpack_require__(34);
},
"ui/core/properties/properties": function() {
return __webpack_require__(34);
},
"ui/core/properties/properties.js": function() {
return __webpack_require__(34);
},
"ui/core/view": function() {
return __webpack_require__(12);
},
"ui/core/view-base": function() {
return __webpack_require__(38);
},
"ui/core/view-base/": function() {
return __webpack_require__(38);
},
"ui/core/view-base/view-base": function() {
return __webpack_require__(38);
},
"ui/core/view-base/view-base.js": function() {
return __webpack_require__(38);
},
"ui/core/view/": function() {
return __webpack_require__(12);
},
"ui/core/view/view": function() {
return __webpack_require__(12);
},
"ui/core/view/view-common": function() {
return __webpack_require__(30);
},
"ui/core/view/view-common.js": function() {
return __webpack_require__(30);
},
"ui/core/view/view.js": function() {
return __webpack_require__(12);
},
"ui/core/weak-event-listener": function() {
return __webpack_require__(40);
},
"ui/core/weak-event-listener/": function() {
return __webpack_require__(40);
},
"ui/core/weak-event-listener/weak-event-listener": function() {
return __webpack_require__(40);
},
"ui/core/weak-event-listener/weak-event-listener.js": function() {
return __webpack_require__(40);
},
"ui/date-picker": function() {
return __webpack_require__(193);
},
"ui/date-picker/": function() {
return __webpack_require__(193);
},
"ui/date-picker/date-picker": function() {
return __webpack_require__(193);
},
"ui/date-picker/date-picker-common": function() {
return __webpack_require__(194);
},
"ui/date-picker/date-picker-common.js": function() {
return __webpack_require__(194);
},
"ui/date-picker/date-picker.js": function() {
return __webpack_require__(193);
},
"ui/dialogs": function() {
return __webpack_require__(8);
},
"ui/dialogs/": function() {
return __webpack_require__(8);
},
"ui/dialogs/dialogs": function() {
return __webpack_require__(8);
},
"ui/dialogs/dialogs-common": function() {
return __webpack_require__(9);
},
"ui/dialogs/dialogs-common.js": function() {
return __webpack_require__(9);
},
"ui/dialogs/dialogs.js": function() {
return __webpack_require__(8);
},
"ui/editable-text-base": function() {
return __webpack_require__(78);
},
"ui/editable-text-base/": function() {
return __webpack_require__(78);
},
"ui/editable-text-base/editable-text-base": function() {
return __webpack_require__(78);
},
"ui/editable-text-base/editable-text-base-common": function() {
return __webpack_require__(79);
},
"ui/editable-text-base/editable-text-base-common.js": function() {
return __webpack_require__(79);
},
"ui/editable-text-base/editable-text-base.js": function() {
return __webpack_require__(78);
},
"ui/enums": function() {
return __webpack_require__(245);
},
"ui/enums/": function() {
return __webpack_require__(245);
},
"ui/enums/enums": function() {
return __webpack_require__(245);
},
"ui/enums/enums.js": function() {
return __webpack_require__(245);
},
"ui/frame": function() {
return __webpack_require__(10);
},
"ui/frame/": function() {
return __webpack_require__(10);
},
"ui/frame/activity": function() {
return __webpack_require__(583);
},
"ui/frame/activity.js": function() {
return __webpack_require__(583);
},
"ui/frame/fragment": function() {
return __webpack_require__(68);
},
"ui/frame/fragment.js": function() {
return __webpack_require__(68);
},
"ui/frame/frame": function() {
return __webpack_require__(10);
},
"ui/frame/frame-common": function() {
return __webpack_require__(11);
},
"ui/frame/frame-common.js": function() {
return __webpack_require__(11);
},
"ui/frame/frame.js": function() {
return __webpack_require__(10);
},
"ui/gestures": function() {
return __webpack_require__(56);
},
"ui/gestures/": function() {
return __webpack_require__(56);
},
"ui/gestures/gestures": function() {
return __webpack_require__(56);
},
"ui/gestures/gestures-common": function() {
return __webpack_require__(57);
},
"ui/gestures/gestures-common.js": function() {
return __webpack_require__(57);
},
"ui/gestures/gestures.js": function() {
return __webpack_require__(56);
},
"ui/html-view": function() {
return __webpack_require__(195);
},
"ui/html-view/": function() {
return __webpack_require__(195);
},
"ui/html-view/html-view": function() {
return __webpack_require__(195);
},
"ui/html-view/html-view-common": function() {
return __webpack_require__(196);
},
"ui/html-view/html-view-common.js": function() {
return __webpack_require__(196);
},
"ui/html-view/html-view.js": function() {
return __webpack_require__(195);
},
"ui/image": function() {
return __webpack_require__(197);
},
"ui/image-cache": function() {
return __webpack_require__(584);
},
"ui/image-cache/": function() {
return __webpack_require__(584);
},
"ui/image-cache/image-cache": function() {
return __webpack_require__(584);
},
"ui/image-cache/image-cache-common": function() {
return __webpack_require__(585);
},
"ui/image-cache/image-cache-common.js": function() {
return __webpack_require__(585);
},
"ui/image-cache/image-cache.js": function() {
return __webpack_require__(584);
},
"ui/image/": function() {
return __webpack_require__(197);
},
"ui/image/image": function() {
return __webpack_require__(197);
},
"ui/image/image-common": function() {
return __webpack_require__(198);
},
"ui/image/image-common.js": function() {
return __webpack_require__(198);
},
"ui/image/image.js": function() {
return __webpack_require__(197);
},
"ui/label": function() {
return __webpack_require__(80);
},
"ui/label/": function() {
return __webpack_require__(80);
},
"ui/label/label": function() {
return __webpack_require__(80);
},
"ui/label/label-common": function() {
return __webpack_require__(586);
},
"ui/label/label-common.js": function() {
return __webpack_require__(586);
},
"ui/label/label.js": function() {
return __webpack_require__(80);
},
"ui/layouts/absolute-layout": function() {
return __webpack_require__(201);
},
"ui/layouts/absolute-layout/": function() {
return __webpack_require__(201);
},
"ui/layouts/absolute-layout/absolute-layout": function() {
return __webpack_require__(201);
},
"ui/layouts/absolute-layout/absolute-layout-common": function() {
return __webpack_require__(202);
},
"ui/layouts/absolute-layout/absolute-layout-common.js": function() {
return __webpack_require__(202);
},
"ui/layouts/absolute-layout/absolute-layout.js": function() {
return __webpack_require__(201);
},
"ui/layouts/dock-layout": function() {
return __webpack_require__(203);
},
"ui/layouts/dock-layout/": function() {
return __webpack_require__(203);
},
"ui/layouts/dock-layout/dock-layout": function() {
return __webpack_require__(203);
},
"ui/layouts/dock-layout/dock-layout-common": function() {
return __webpack_require__(204);
},
"ui/layouts/dock-layout/dock-layout-common.js": function() {
return __webpack_require__(204);
},
"ui/layouts/dock-layout/dock-layout.js": function() {
return __webpack_require__(203);
},
"ui/layouts/flexbox-layout": function() {
return __webpack_require__(207);
},
"ui/layouts/flexbox-layout/": function() {
return __webpack_require__(207);
},
"ui/layouts/flexbox-layout/flexbox-layout": function() {
return __webpack_require__(207);
},
"ui/layouts/flexbox-layout/flexbox-layout-common": function() {
return __webpack_require__(208);
},
"ui/layouts/flexbox-layout/flexbox-layout-common.js": function() {
return __webpack_require__(208);
},
"ui/layouts/flexbox-layout/flexbox-layout.js": function() {
return __webpack_require__(207);
},
"ui/layouts/grid-layout": function() {
return __webpack_require__(133);
},
"ui/layouts/grid-layout/": function() {
return __webpack_require__(133);
},
"ui/layouts/grid-layout/grid-layout": function() {
return __webpack_require__(133);
},
"ui/layouts/grid-layout/grid-layout-common": function() {
return __webpack_require__(134);
},
"ui/layouts/grid-layout/grid-layout-common.js": function() {
return __webpack_require__(134);
},
"ui/layouts/grid-layout/grid-layout.js": function() {
return __webpack_require__(133);
},
"ui/layouts/layout": function() {
return __webpack_require__(587);
},
"ui/layouts/layout-base": function() {
return __webpack_require__(135);
},
"ui/layouts/layout-base-common": function() {
return __webpack_require__(136);
},
"ui/layouts/layout-base-common.js": function() {
return __webpack_require__(136);
},
"ui/layouts/layout-base.js": function() {
return __webpack_require__(135);
},
"ui/layouts/layout.js": function() {
return __webpack_require__(587);
},
"ui/layouts/stack-layout": function() {
return __webpack_require__(205);
},
"ui/layouts/stack-layout/": function() {
return __webpack_require__(205);
},
"ui/layouts/stack-layout/stack-layout": function() {
return __webpack_require__(205);
},
"ui/layouts/stack-layout/stack-layout-common": function() {
return __webpack_require__(206);
},
"ui/layouts/stack-layout/stack-layout-common.js": function() {
return __webpack_require__(206);
},
"ui/layouts/stack-layout/stack-layout.js": function() {
return __webpack_require__(205);
},
"ui/layouts/wrap-layout": function() {
return __webpack_require__(250);
},
"ui/layouts/wrap-layout/": function() {
return __webpack_require__(250);
},
"ui/layouts/wrap-layout/wrap-layout": function() {
return __webpack_require__(250);
},
"ui/layouts/wrap-layout/wrap-layout-common": function() {
return __webpack_require__(251);
},
"ui/layouts/wrap-layout/wrap-layout-common.js": function() {
return __webpack_require__(251);
},
"ui/layouts/wrap-layout/wrap-layout.js": function() {
return __webpack_require__(250);
},
"ui/list-picker": function() {
return __webpack_require__(209);
},
"ui/list-picker/": function() {
return __webpack_require__(209);
},
"ui/list-picker/list-picker": function() {
return __webpack_require__(209);
},
"ui/list-picker/list-picker-common": function() {
return __webpack_require__(210);
},
"ui/list-picker/list-picker-common.js": function() {
return __webpack_require__(210);
},
"ui/list-picker/list-picker.js": function() {
return __webpack_require__(209);
},
"ui/list-view": function() {
return __webpack_require__(232);
},
"ui/list-view/": function() {
return __webpack_require__(232);
},
"ui/list-view/list-view": function() {
return __webpack_require__(232);
},
"ui/list-view/list-view-common": function() {
return __webpack_require__(233);
},
"ui/list-view/list-view-common.js": function() {
return __webpack_require__(233);
},
"ui/list-view/list-view.js": function() {
return __webpack_require__(232);
},
"ui/page": function() {
return __webpack_require__(128);
},
"ui/page/": function() {
return __webpack_require__(128);
},
"ui/page/constants": function() {
return __webpack_require__(63);
},
"ui/page/constants.js": function() {
return __webpack_require__(63);
},
"ui/page/page": function() {
return __webpack_require__(128);
},
"ui/page/page-common": function() {
return __webpack_require__(129);
},
"ui/page/page-common.js": function() {
return __webpack_require__(129);
},
"ui/page/page.js": function() {
return __webpack_require__(128);
},
"ui/placeholder": function() {
return __webpack_require__(211);
},
"ui/placeholder/": function() {
return __webpack_require__(211);
},
"ui/placeholder/placeholder": function() {
return __webpack_require__(211);
},
"ui/placeholder/placeholder.js": function() {
return __webpack_require__(211);
},
"ui/progress": function() {
return __webpack_require__(212);
},
"ui/progress/": function() {
return __webpack_require__(212);
},
"ui/progress/progress": function() {
return __webpack_require__(212);
},
"ui/progress/progress-common": function() {
return __webpack_require__(213);
},
"ui/progress/progress-common.js": function() {
return __webpack_require__(213);
},
"ui/progress/progress.js": function() {
return __webpack_require__(212);
},
"ui/proxy-view-container": function() {
return __webpack_require__(214);
},
"ui/proxy-view-container/": function() {
return __webpack_require__(214);
},
"ui/proxy-view-container/proxy-view-container": function() {
return __webpack_require__(214);
},
"ui/proxy-view-container/proxy-view-container.js": function() {
return __webpack_require__(214);
},
"ui/repeater": function() {
return __webpack_require__(215);
},
"ui/repeater/": function() {
return __webpack_require__(215);
},
"ui/repeater/repeater": function() {
return __webpack_require__(215);
},
"ui/repeater/repeater.js": function() {
return __webpack_require__(215);
},
"ui/scroll-view": function() {
return __webpack_require__(216);
},
"ui/scroll-view/": function() {
return __webpack_require__(216);
},
"ui/scroll-view/scroll-view": function() {
return __webpack_require__(216);
},
"ui/scroll-view/scroll-view-common": function() {
return __webpack_require__(217);
},
"ui/scroll-view/scroll-view-common.js": function() {
return __webpack_require__(217);
},
"ui/scroll-view/scroll-view.js": function() {
return __webpack_require__(216);
},
"ui/search-bar": function() {
return __webpack_require__(218);
},
"ui/search-bar/": function() {
return __webpack_require__(218);
},
"ui/search-bar/search-bar": function() {
return __webpack_require__(218);
},
"ui/search-bar/search-bar-common": function() {
return __webpack_require__(219);
},
"ui/search-bar/search-bar-common.js": function() {
return __webpack_require__(219);
},
"ui/search-bar/search-bar.js": function() {
return __webpack_require__(218);
},
"ui/segmented-bar": function() {
return __webpack_require__(220);
},
"ui/segmented-bar/": function() {
return __webpack_require__(220);
},
"ui/segmented-bar/segmented-bar": function() {
return __webpack_require__(220);
},
"ui/segmented-bar/segmented-bar-common": function() {
return __webpack_require__(221);
},
"ui/segmented-bar/segmented-bar-common.js": function() {
return __webpack_require__(221);
},
"ui/segmented-bar/segmented-bar.js": function() {
return __webpack_require__(220);
},
"ui/slider": function() {
return __webpack_require__(222);
},
"ui/slider/": function() {
return __webpack_require__(222);
},
"ui/slider/slider": function() {
return __webpack_require__(222);
},
"ui/slider/slider-common": function() {
return __webpack_require__(223);
},
"ui/slider/slider-common.js": function() {
return __webpack_require__(223);
},
"ui/slider/slider.js": function() {
return __webpack_require__(222);
},
"ui/styling": function() {
return __webpack_require__(35);
},
"ui/styling/": function() {
return __webpack_require__(35);
},
"ui/styling/background": function() {
return __webpack_require__(13);
},
"ui/styling/background-common": function() {
return __webpack_require__(26);
},
"ui/styling/background-common.js": function() {
return __webpack_require__(26);
},
"ui/styling/background.js": function() {
return __webpack_require__(13);
},
"ui/styling/converters": function() {
return __webpack_require__(55);
},
"ui/styling/converters.js": function() {
return __webpack_require__(55);
},
"ui/styling/css-animation-parser": function() {
return __webpack_require__(54);
},
"ui/styling/css-animation-parser.js": function() {
return __webpack_require__(54);
},
"ui/styling/css-selector": function() {
return __webpack_require__(48);
},
"ui/styling/css-selector-parser": function() {
return __webpack_require__(49);
},
"ui/styling/css-selector-parser.js": function() {
return __webpack_require__(49);
},
"ui/styling/css-selector/": function() {
return __webpack_require__(48);
},
"ui/styling/css-selector/css-selector": function() {
return __webpack_require__(48);
},
"ui/styling/css-selector/css-selector.js": function() {
return __webpack_require__(48);
},
"ui/styling/font": function() {
return __webpack_require__(32);
},
"ui/styling/font-common": function() {
return __webpack_require__(33);
},
"ui/styling/font-common.js": function() {
return __webpack_require__(33);
},
"ui/styling/font.js": function() {
return __webpack_require__(32);
},
"ui/styling/style": function() {
return __webpack_require__(35);
},
"ui/styling/style-properties": function() {
return __webpack_require__(31);
},
"ui/styling/style-properties.js": function() {
return __webpack_require__(31);
},
"ui/styling/style-scope": function() {
return __webpack_require__(45);
},
"ui/styling/style-scope.js": function() {
return __webpack_require__(45);
},
"ui/styling/style/": function() {
return __webpack_require__(35);
},
"ui/styling/style/style": function() {
return __webpack_require__(35);
},
"ui/styling/style/style.js": function() {
return __webpack_require__(35);
},
"ui/switch": function() {
return __webpack_require__(224);
},
"ui/switch/": function() {
return __webpack_require__(224);
},
"ui/switch/switch": function() {
return __webpack_require__(224);
},
"ui/switch/switch-common": function() {
return __webpack_require__(225);
},
"ui/switch/switch-common.js": function() {
return __webpack_require__(225);
},
"ui/switch/switch.js": function() {
return __webpack_require__(224);
},
"ui/tab-view": function() {
return __webpack_require__(226);
},
"ui/tab-view/": function() {
return __webpack_require__(226);
},
"ui/tab-view/tab-view": function() {
return __webpack_require__(226);
},
"ui/tab-view/tab-view-common": function() {
return __webpack_require__(227);
},
"ui/tab-view/tab-view-common.js": function() {
return __webpack_require__(227);
},
"ui/tab-view/tab-view.js": function() {
return __webpack_require__(226);
},
"ui/text-base": function() {
return __webpack_require__(71);
},
"ui/text-base/": function() {
return __webpack_require__(71);
},
"ui/text-base/text-base": function() {
return __webpack_require__(71);
},
"ui/text-base/text-base-common": function() {
return __webpack_require__(72);
},
"ui/text-base/text-base-common.js": function() {
return __webpack_require__(72);
},
"ui/text-base/text-base.js": function() {
return __webpack_require__(71);
},
"ui/text-field": function() {
return __webpack_require__(76);
},
"ui/text-field/": function() {
return __webpack_require__(76);
},
"ui/text-field/text-field": function() {
return __webpack_require__(76);
},
"ui/text-field/text-field-common": function() {
return __webpack_require__(77);
},
"ui/text-field/text-field-common.js": function() {
return __webpack_require__(77);
},
"ui/text-field/text-field.js": function() {
return __webpack_require__(76);
},
"ui/text-view": function() {
return __webpack_require__(137);
},
"ui/text-view/": function() {
return __webpack_require__(137);
},
"ui/text-view/text-view": function() {
return __webpack_require__(137);
},
"ui/text-view/text-view-common": function() {
return __webpack_require__(588);
},
"ui/text-view/text-view-common.js": function() {
return __webpack_require__(588);
},
"ui/text-view/text-view.js": function() {
return __webpack_require__(137);
},
"ui/time-picker": function() {
return __webpack_require__(230);
},
"ui/time-picker/": function() {
return __webpack_require__(230);
},
"ui/time-picker/time-picker": function() {
return __webpack_require__(230);
},
"ui/time-picker/time-picker-common": function() {
return __webpack_require__(231);
},
"ui/time-picker/time-picker-common.js": function() {
return __webpack_require__(231);
},
"ui/time-picker/time-picker.js": function() {
return __webpack_require__(230);
},
"ui/transition": function() {
return __webpack_require__(64);
},
"ui/transition/": function() {
return __webpack_require__(64);
},
"ui/transition/fade-transition": function() {
return __webpack_require__(66);
},
"ui/transition/fade-transition.js": function() {
return __webpack_require__(66);
},
"ui/transition/flip-transition": function() {
return __webpack_require__(67);
},
"ui/transition/flip-transition.js": function() {
return __webpack_require__(67);
},
"ui/transition/slide-transition": function() {
return __webpack_require__(65);
},
"ui/transition/slide-transition.js": function() {
return __webpack_require__(65);
},
"ui/transition/transition": function() {
return __webpack_require__(64);
},
"ui/transition/transition.js": function() {
return __webpack_require__(64);
},
"ui/web-view": function() {
return __webpack_require__(228);
},
"ui/web-view/": function() {
return __webpack_require__(228);
},
"ui/web-view/web-view": function() {
return __webpack_require__(228);
},
"ui/web-view/web-view-common": function() {
return __webpack_require__(229);
},
"ui/web-view/web-view-common.js": function() {
return __webpack_require__(229);
},
"ui/web-view/web-view.js": function() {
return __webpack_require__(228);
},
"utils/debug": function() {
return __webpack_require__(36);
},
"utils/debug-common": function() {
return __webpack_require__(37);
},
"utils/debug-common.js": function() {
return __webpack_require__(37);
},
"utils/debug.js": function() {
return __webpack_require__(36);
},
"utils/lazy": function() {
return __webpack_require__(53);
},
"utils/lazy.js": function() {
return __webpack_require__(53);
},
"utils/module-merge": function() {
return __webpack_require__(589);
},
"utils/module-merge.js": function() {
return __webpack_require__(589);
},
"utils/number-utils": function() {
return __webpack_require__(590);
},
"utils/number-utils.js": function() {
return __webpack_require__(590);
},
"utils/types": function() {
return __webpack_require__(17);
},
"utils/types.js": function() {
return __webpack_require__(17);
},
"utils/utils": function() {
return __webpack_require__(14);
},
"utils/utils-common": function() {
return __webpack_require__(16);
},
"utils/utils-common.js": function() {
return __webpack_require__(16);
},
"utils/utils.js": function() {
return __webpack_require__(14);
},
xhr: function() {
return __webpack_require__(81);
},
"xhr/": function() {
return __webpack_require__(81);
},
"xhr/xhr": function() {
return __webpack_require__(81);
},
"xhr/xhr.js": function() {
return __webpack_require__(81);
},
xml: function() {
return __webpack_require__(60);
},
"xml/": function() {
return __webpack_require__(60);
},
"xml/xml": function() {
return __webpack_require__(60);
},
"xml/xml.js": function() {
return __webpack_require__(60);
},
"zone.js": function() {
return __webpack_require__(591);
},
"zone.js/": function() {
return __webpack_require__(591);
},
"zone.js/dist/async-test": function() {
return __webpack_require__(617);
},
"zone.js/dist/async-test.js": function() {
return __webpack_require__(617);
},
"zone.js/dist/fake-async-test": function() {
return __webpack_require__(618);
},
"zone.js/dist/fake-async-test.js": function() {
return __webpack_require__(618);
},
"zone.js/dist/jasmine-patch": function() {
return __webpack_require__(619);
},
"zone.js/dist/jasmine-patch.js": function() {
return __webpack_require__(619);
},
"zone.js/dist/jasmine-patch.min": function() {
return __webpack_require__(620);
},
"zone.js/dist/jasmine-patch.min.js": function() {
return __webpack_require__(620);
},
"zone.js/dist/long-stack-trace-zone": function() {
return __webpack_require__(621);
},
"zone.js/dist/long-stack-trace-zone.js": function() {
return __webpack_require__(621);
},
"zone.js/dist/long-stack-trace-zone.min": function() {
return __webpack_require__(622);
},
"zone.js/dist/long-stack-trace-zone.min.js": function() {
return __webpack_require__(622);
},
"zone.js/dist/mocha-patch": function() {
return __webpack_require__(623);
},
"zone.js/dist/mocha-patch.js": function() {
return __webpack_require__(623);
},
"zone.js/dist/mocha-patch.min": function() {
return __webpack_require__(624);
},
"zone.js/dist/mocha-patch.min.js": function() {
return __webpack_require__(624);
},
"zone.js/dist/proxy": function() {
return __webpack_require__(625);
},
"zone.js/dist/proxy.js": function() {
return __webpack_require__(625);
},
"zone.js/dist/proxy.min": function() {
return __webpack_require__(626);
},
"zone.js/dist/proxy.min.js": function() {
return __webpack_require__(626);
},
"zone.js/dist/sync-test": function() {
return __webpack_require__(627);
},
"zone.js/dist/sync-test.js": function() {
return __webpack_require__(627);
},
"zone.js/dist/task-tracking": function() {
return __webpack_require__(628);
},
"zone.js/dist/task-tracking.js": function() {
return __webpack_require__(628);
},
"zone.js/dist/task-tracking.min": function() {
return __webpack_require__(629);
},
"zone.js/dist/task-tracking.min.js": function() {
return __webpack_require__(629);
},
"zone.js/dist/web-api": function() {
return __webpack_require__(630);
},
"zone.js/dist/web-api.js": function() {
return __webpack_require__(630);
},
"zone.js/dist/webapis-media-query": function() {
return __webpack_require__(631);
},
"zone.js/dist/webapis-media-query.js": function() {
return __webpack_require__(631);
},
"zone.js/dist/webapis-media-query.min": function() {
return __webpack_require__(632);
},
"zone.js/dist/webapis-media-query.min.js": function() {
return __webpack_require__(632);
},
"zone.js/dist/webapis-notification": function() {
return __webpack_require__(633);
},
"zone.js/dist/webapis-notification.js": function() {
return __webpack_require__(633);
},
"zone.js/dist/webapis-notification.min": function() {
return __webpack_require__(634);
},
"zone.js/dist/webapis-notification.min.js": function() {
return __webpack_require__(634);
},
"zone.js/dist/wtf": function() {
return __webpack_require__(635);
},
"zone.js/dist/wtf.js": function() {
return __webpack_require__(635);
},
"zone.js/dist/wtf.min": function() {
return __webpack_require__(636);
},
"zone.js/dist/wtf.min.js": function() {
return __webpack_require__(636);
},
"zone.js/dist/zone": function() {
return __webpack_require__(637);
},
"zone.js/dist/zone-bluebird": function() {
return __webpack_require__(638);
},
"zone.js/dist/zone-bluebird.js": function() {
return __webpack_require__(638);
},
"zone.js/dist/zone-bluebird.min": function() {
return __webpack_require__(639);
},
"zone.js/dist/zone-bluebird.min.js": function() {
return __webpack_require__(639);
},
"zone.js/dist/zone-mix": function() {
return __webpack_require__(640);
},
"zone.js/dist/zone-mix.js": function() {
return __webpack_require__(640);
},
"zone.js/dist/zone-node": function() {
return __webpack_require__(591);
},
"zone.js/dist/zone-node.js": function() {
return __webpack_require__(591);
},
"zone.js/dist/zone.js": function() {
return __webpack_require__(637);
},
"zone.js/dist/zone.min": function() {
return __webpack_require__(641);
},
"zone.js/dist/zone.min.js": function() {
return __webpack_require__(641);
},
"zone.js/dist/zone_externs": function() {
return __webpack_require__(642);
},
"zone.js/dist/zone_externs.js": function() {
return __webpack_require__(642);
}
};
function __join() {
var parts = [];
for (var i = 0, l = arguments.length; i < l; i++) {
parts = parts.concat(arguments[i].split("/"));
}
var newParts = [];
for (i = 0, l = parts.length; i < l; i++) {
var part = parts[i];
if (!part || part === ".") continue;
if (part === "..") newParts.pop(); else newParts.push(part);
}
if (parts[0] === "") newParts.unshift("");
return newParts.join("/") || (newParts.length ? "/" : ".");
}
function __require(moduleId) {
var moduleEntry = map[moduleId];
if (!moduleEntry) {
return;
}
return moduleEntry();
}
function __trace(message) {
android.util.Log.v("TNS.Native", "" + message);
}
return function(moduleId, dirname) {
while (global.__pendingSnapshotCalls && __pendingSnapshotCalls.length) {
var call = __pendingSnapshotCalls.shift();
call();
}
var resolvedModuleId = moduleId.replace(/^\.\/tns_modules\//, "");
if (resolvedModuleId[0] === ".") {
if (resolvedModuleId === "./_embedded_script_.js") {
return {};
}
resolvedModuleId = __join(dirname, resolvedModuleId);
}
if (resolvedModuleId[0] === "/") {
resolvedModuleId = resolvedModuleId.replace(/^\/.*\/files\/app\/tns_modules\//, "");
}
var module = __require(resolvedModuleId);
if (module) {
return module;
}
};
}();
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports) : typeof define === "function" && define.amd ? define([ "exports" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.animations = global.ng.animations || {}));
})(this, function(exports) {
"use strict";
var AUTO_STYLE = "*";
function trigger(name, definitions) {
return {
name: name,
definitions: definitions
};
}
function animate(timings, styles) {
if (styles === void 0) {
styles = null;
}
return {
type: 4,
styles: styles,
timings: timings
};
}
function group(steps) {
return {
type: 3,
steps: steps
};
}
function sequence(steps) {
return {
type: 2,
steps: steps
};
}
function style(tokens) {
return {
type: 6,
styles: tokens
};
}
function state(name, styles) {
return {
type: 0,
name: name,
styles: styles
};
}
function keyframes(steps) {
return {
type: 5,
steps: steps
};
}
function transition(stateChangeExpr, steps) {
return {
type: 1,
expr: stateChangeExpr,
animation: steps
};
}
function scheduleMicroTask(cb) {
Promise.resolve(null).then(cb);
}
var AnimationPlayer = function() {
function AnimationPlayer() {}
AnimationPlayer.prototype.onDone = function(fn) {};
AnimationPlayer.prototype.onStart = function(fn) {};
AnimationPlayer.prototype.onDestroy = function(fn) {};
AnimationPlayer.prototype.init = function() {};
AnimationPlayer.prototype.hasStarted = function() {};
AnimationPlayer.prototype.play = function() {};
AnimationPlayer.prototype.pause = function() {};
AnimationPlayer.prototype.restart = function() {};
AnimationPlayer.prototype.finish = function() {};
AnimationPlayer.prototype.destroy = function() {};
AnimationPlayer.prototype.reset = function() {};
AnimationPlayer.prototype.setPosition = function(p) {};
AnimationPlayer.prototype.getPosition = function() {};
Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
get: function() {
throw new Error("NOT IMPLEMENTED: Base Class");
},
set: function(player) {
throw new Error("NOT IMPLEMENTED: Base Class");
},
enumerable: true,
configurable: true
});
return AnimationPlayer;
}();
var NoopAnimationPlayer = function() {
function NoopAnimationPlayer() {
this._onDoneFns = [];
this._onStartFns = [];
this._onDestroyFns = [];
this._started = false;
this._destroyed = false;
this._finished = false;
this.parentPlayer = null;
}
NoopAnimationPlayer.prototype._onFinish = function() {
if (!this._finished) {
this._finished = true;
this._onDoneFns.forEach(function(fn) {
return fn();
});
this._onDoneFns = [];
}
};
NoopAnimationPlayer.prototype.onStart = function(fn) {
this._onStartFns.push(fn);
};
NoopAnimationPlayer.prototype.onDone = function(fn) {
this._onDoneFns.push(fn);
};
NoopAnimationPlayer.prototype.onDestroy = function(fn) {
this._onDestroyFns.push(fn);
};
NoopAnimationPlayer.prototype.hasStarted = function() {
return this._started;
};
NoopAnimationPlayer.prototype.init = function() {};
NoopAnimationPlayer.prototype.play = function() {
var _this = this;
if (!this.hasStarted()) {
scheduleMicroTask(function() {
return _this._onFinish();
});
this._onStart();
}
this._started = true;
};
NoopAnimationPlayer.prototype._onStart = function() {
this._onStartFns.forEach(function(fn) {
return fn();
});
this._onStartFns = [];
};
NoopAnimationPlayer.prototype.pause = function() {};
NoopAnimationPlayer.prototype.restart = function() {};
NoopAnimationPlayer.prototype.finish = function() {
this._onFinish();
};
NoopAnimationPlayer.prototype.destroy = function() {
if (!this._destroyed) {
this._destroyed = true;
if (!this.hasStarted()) {
this._onStart();
}
this.finish();
this._onDestroyFns.forEach(function(fn) {
return fn();
});
this._onDestroyFns = [];
}
};
NoopAnimationPlayer.prototype.reset = function() {};
NoopAnimationPlayer.prototype.setPosition = function(p) {};
NoopAnimationPlayer.prototype.getPosition = function() {
return 0;
};
return NoopAnimationPlayer;
}();
var AnimationGroupPlayer = function() {
function AnimationGroupPlayer(_players) {
var _this = this;
this._players = _players;
this._onDoneFns = [];
this._onStartFns = [];
this._finished = false;
this._started = false;
this._destroyed = false;
this._onDestroyFns = [];
this.parentPlayer = null;
var count = 0;
var total = this._players.length;
if (total == 0) {
scheduleMicroTask(function() {
return _this._onFinish();
});
} else {
this._players.forEach(function(player) {
player.parentPlayer = _this;
player.onDone(function() {
if (++count >= total) {
_this._onFinish();
}
});
});
}
}
AnimationGroupPlayer.prototype._onFinish = function() {
if (!this._finished) {
this._finished = true;
this._onDoneFns.forEach(function(fn) {
return fn();
});
this._onDoneFns = [];
}
};
AnimationGroupPlayer.prototype.init = function() {
this._players.forEach(function(player) {
return player.init();
});
};
AnimationGroupPlayer.prototype.onStart = function(fn) {
this._onStartFns.push(fn);
};
AnimationGroupPlayer.prototype.onDone = function(fn) {
this._onDoneFns.push(fn);
};
AnimationGroupPlayer.prototype.onDestroy = function(fn) {
this._onDestroyFns.push(fn);
};
AnimationGroupPlayer.prototype.hasStarted = function() {
return this._started;
};
AnimationGroupPlayer.prototype.play = function() {
if (!this.parentPlayer) {
this.init();
}
if (!this.hasStarted()) {
this._onStartFns.forEach(function(fn) {
return fn();
});
this._onStartFns = [];
this._started = true;
}
this._players.forEach(function(player) {
return player.play();
});
};
AnimationGroupPlayer.prototype.pause = function() {
this._players.forEach(function(player) {
return player.pause();
});
};
AnimationGroupPlayer.prototype.restart = function() {
this._players.forEach(function(player) {
return player.restart();
});
};
AnimationGroupPlayer.prototype.finish = function() {
this._onFinish();
this._players.forEach(function(player) {
return player.finish();
});
};
AnimationGroupPlayer.prototype.destroy = function() {
if (!this._destroyed) {
this._onFinish();
this._players.forEach(function(player) {
return player.destroy();
});
this._destroyed = true;
this._onDestroyFns.forEach(function(fn) {
return fn();
});
this._onDestroyFns = [];
}
};
AnimationGroupPlayer.prototype.reset = function() {
this._players.forEach(function(player) {
return player.reset();
});
this._destroyed = false;
this._finished = false;
this._started = false;
};
AnimationGroupPlayer.prototype.setPosition = function(p) {
this._players.forEach(function(player) {
player.setPosition(p);
});
};
AnimationGroupPlayer.prototype.getPosition = function() {
var min = 0;
this._players.forEach(function(player) {
var p = player.getPosition();
min = Math.min(p, min);
});
return min;
};
Object.defineProperty(AnimationGroupPlayer.prototype, "players", {
get: function() {
return this._players;
},
enumerable: true,
configurable: true
});
return AnimationGroupPlayer;
}();
exports.AUTO_STYLE = AUTO_STYLE;
exports.animate = animate;
exports.group = group;
exports.keyframes = keyframes;
exports.sequence = sequence;
exports.state = state;
exports.style = style;
exports.transition = transition;
exports.trigger = trigger;
exports.AnimationPlayer = AnimationPlayer;
exports.NoopAnimationPlayer = NoopAnimationPlayer;
exports.ɵAnimationGroupPlayer = AnimationGroupPlayer;
Object.defineProperty(exports, "__esModule", {
value: true
});
});
}, , , , , , , function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(147)) : typeof define === "function" && define.amd ? define([ "exports", "@angular/animations" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.animations = global.ng.animations || {}, global.ng.animations.browser = global.ng.animations.browser || {}), global.ng.animations);
})(this, function(exports, _angular_animations) {
"use strict";
var __extends = undefined && undefined.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var NoopAnimationDriver = function() {
function NoopAnimationDriver() {}
NoopAnimationDriver.prototype.animate = function(element, keyframes, duration, delay, easing, previousPlayers) {
if (previousPlayers === void 0) {
previousPlayers = [];
}
return new _angular_animations.NoopAnimationPlayer();
};
return NoopAnimationDriver;
}();
var AnimationDriver = function() {
function AnimationDriver() {}
return AnimationDriver;
}();
AnimationDriver.NOOP = new NoopAnimationDriver();
var AnimationEngine = function() {
function AnimationEngine() {}
AnimationEngine.prototype.registerTrigger = function(trigger, name) {};
AnimationEngine.prototype.onInsert = function(element, domFn) {};
AnimationEngine.prototype.onRemove = function(element, domFn) {};
AnimationEngine.prototype.setProperty = function(element, property, value) {};
AnimationEngine.prototype.listen = function(element, eventName, eventPhase, callback) {};
AnimationEngine.prototype.flush = function() {};
Object.defineProperty(AnimationEngine.prototype, "activePlayers", {
get: function() {
throw new Error("...");
},
enumerable: true,
configurable: true
});
Object.defineProperty(AnimationEngine.prototype, "queuedPlayers", {
get: function() {
throw new Error("...");
},
enumerable: true,
configurable: true
});
return AnimationEngine;
}();
var ONE_SECOND = 1e3;
function parseTimeExpression(exp, errors) {
var regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i;
var duration;
var delay = 0;
var easing = null;
if (typeof exp === "string") {
var matches = exp.match(regex);
if (matches === null) {
errors.push('The provided timing value "' + exp + '" is invalid.');
return {
duration: 0,
delay: 0,
easing: null
};
}
var durationMatch = parseFloat(matches[1]);
var durationUnit = matches[2];
if (durationUnit == "s") {
durationMatch *= ONE_SECOND;
}
duration = Math.floor(durationMatch);
var delayMatch = matches[3];
var delayUnit = matches[4];
if (delayMatch != null) {
var delayVal = parseFloat(delayMatch);
if (delayUnit != null && delayUnit == "s") {
delayVal *= ONE_SECOND;
}
delay = Math.floor(delayVal);
}
var easingVal = matches[5];
if (easingVal) {
easing = easingVal;
}
} else {
duration = exp;
}
return {
duration: duration,
delay: delay,
easing: easing
};
}
function normalizeStyles(styles) {
var normalizedStyles = {};
if (Array.isArray(styles)) {
styles.forEach(function(data) {
return copyStyles(data, false, normalizedStyles);
});
} else {
copyStyles(styles, false, normalizedStyles);
}
return normalizedStyles;
}
function copyStyles(styles, readPrototype, destination) {
if (destination === void 0) {
destination = {};
}
if (readPrototype) {
for (var prop in styles) {
destination[prop] = styles[prop];
}
} else {
Object.keys(styles).forEach(function(prop) {
return destination[prop] = styles[prop];
});
}
return destination;
}
function setStyles(element, styles) {
if (element["style"]) {
Object.keys(styles).forEach(function(prop) {
return element.style[prop] = styles[prop];
});
}
}
function eraseStyles(element, styles) {
if (element["style"]) {
Object.keys(styles).forEach(function(prop) {
element.style[prop] = "";
});
}
}
function visitAnimationNode(visitor, node, context) {
switch (node.type) {
case 0:
return visitor.visitState(node, context);

case 1:
return visitor.visitTransition(node, context);

case 2:
return visitor.visitSequence(node, context);

case 3:
return visitor.visitGroup(node, context);

case 4:
return visitor.visitAnimate(node, context);

case 5:
return visitor.visitKeyframeSequence(node, context);

case 6:
return visitor.visitStyle(node, context);

default:
throw new Error("Unable to resolve animation metadata node #" + node.type);
}
}
var ANY_STATE = "*";
function parseTransitionExpr(transitionValue, errors) {
var expressions = [];
if (typeof transitionValue == "string") {
transitionValue.split(/\s*,\s*/).forEach(function(str) {
return parseInnerTransitionStr(str, expressions, errors);
});
} else {
expressions.push(transitionValue);
}
return expressions;
}
function parseInnerTransitionStr(eventStr, expressions, errors) {
if (eventStr[0] == ":") {
eventStr = parseAnimationAlias(eventStr, errors);
}
var match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
if (match == null || match.length < 4) {
errors.push('The provided transition expression "' + eventStr + '" is not supported');
return expressions;
}
var fromState = match[1];
var separator = match[2];
var toState = match[3];
expressions.push(makeLambdaFromStates(fromState, toState));
var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
if (separator[0] == "<" && !isFullAnyStateExpr) {
expressions.push(makeLambdaFromStates(toState, fromState));
}
}
function parseAnimationAlias(alias, errors) {
switch (alias) {
case ":enter":
return "void => *";

case ":leave":
return "* => void";

default:
errors.push('The transition alias value "' + alias + '" is not supported');
return "* => *";
}
}
function makeLambdaFromStates(lhs, rhs) {
return function(fromState, toState) {
var lhsMatch = lhs == ANY_STATE || lhs == fromState;
var rhsMatch = rhs == ANY_STATE || rhs == toState;
return lhsMatch && rhsMatch;
};
}
function createTimelineInstruction(keyframes, duration, delay, easing) {
return {
type: 1,
keyframes: keyframes,
duration: duration,
delay: delay,
totalTime: duration + delay,
easing: easing
};
}
function buildAnimationKeyframes(ast, startingStyles, finalStyles) {
if (startingStyles === void 0) {
startingStyles = {};
}
if (finalStyles === void 0) {
finalStyles = {};
}
var normalizedAst = Array.isArray(ast) ? _angular_animations.sequence(ast) : ast;
return new AnimationTimelineVisitor().buildKeyframes(normalizedAst, startingStyles, finalStyles);
}
var AnimationTimelineContext = function() {
function AnimationTimelineContext(errors, timelines, initialTimeline) {
this.errors = errors;
this.timelines = timelines;
this.previousNode = {};
this.subContextCount = 0;
this.currentTimeline = initialTimeline || new TimelineBuilder(0);
timelines.push(this.currentTimeline);
}
AnimationTimelineContext.prototype.createSubContext = function() {
var context = new AnimationTimelineContext(this.errors, this.timelines, this.currentTimeline.fork());
context.previousNode = this.previousNode;
context.currentAnimateTimings = this.currentAnimateTimings;
this.subContextCount++;
return context;
};
AnimationTimelineContext.prototype.transformIntoNewTimeline = function(newTime) {
if (newTime === void 0) {
newTime = 0;
}
this.currentTimeline = this.currentTimeline.fork(newTime);
this.timelines.push(this.currentTimeline);
return this.currentTimeline;
};
AnimationTimelineContext.prototype.incrementTime = function(time) {
this.currentTimeline.forwardTime(this.currentTimeline.duration + time);
};
return AnimationTimelineContext;
}();
var AnimationTimelineVisitor = function() {
function AnimationTimelineVisitor() {}
AnimationTimelineVisitor.prototype.buildKeyframes = function(ast, startingStyles, finalStyles) {
var context = new AnimationTimelineContext([], []);
context.currentTimeline.setStyles(startingStyles);
visitAnimationNode(this, ast, context);
var timelines = context.timelines.filter(function(timeline) {
return timeline.hasStyling();
});
if (timelines.length && Object.keys(finalStyles).length) {
var tl = timelines[timelines.length - 1];
if (!tl.allowOnlyTimelineStyles()) {
tl.setStyles(finalStyles);
}
}
return timelines.length ? timelines.map(function(timeline) {
return timeline.buildKeyframes();
}) : [ createTimelineInstruction([], 0, 0, "") ];
};
AnimationTimelineVisitor.prototype.visitState = function(ast, context) {};
AnimationTimelineVisitor.prototype.visitTransition = function(ast, context) {};
AnimationTimelineVisitor.prototype.visitSequence = function(ast, context) {
var _this = this;
var subContextCount = context.subContextCount;
if (context.previousNode.type == 6) {
context.currentTimeline.forwardFrame();
context.currentTimeline.snapshotCurrentStyles();
}
ast.steps.forEach(function(s) {
return visitAnimationNode(_this, s, context);
});
if (context.subContextCount > subContextCount) {
context.transformIntoNewTimeline();
}
context.previousNode = ast;
};
AnimationTimelineVisitor.prototype.visitGroup = function(ast, context) {
var _this = this;
var innerTimelines = [];
var furthestTime = context.currentTimeline.currentTime;
ast.steps.forEach(function(s) {
var innerContext = context.createSubContext();
visitAnimationNode(_this, s, innerContext);
furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);
innerTimelines.push(innerContext.currentTimeline);
});
innerTimelines.forEach(function(timeline) {
return context.currentTimeline.mergeTimelineCollectedStyles(timeline);
});
context.transformIntoNewTimeline(furthestTime);
context.previousNode = ast;
};
AnimationTimelineVisitor.prototype.visitAnimate = function(ast, context) {
var timings = ast.timings.hasOwnProperty("duration") ? ast.timings : parseTimeExpression(ast.timings, context.errors);
context.currentAnimateTimings = timings;
if (timings.delay) {
context.incrementTime(timings.delay);
context.currentTimeline.snapshotCurrentStyles();
}
var astType = ast.styles ? ast.styles.type : -1;
if (astType == 5) {
this.visitKeyframeSequence(ast.styles, context);
} else {
var styleAst = ast.styles;
if (!styleAst) {
var newStyleData = {};
if (timings.easing) {
newStyleData["easing"] = timings.easing;
}
styleAst = _angular_animations.style(newStyleData);
styleAst["treatAsEmptyStep"] = true;
}
context.incrementTime(timings.duration);
if (styleAst) {
this.visitStyle(styleAst, context);
}
}
context.currentAnimateTimings = null;
context.previousNode = ast;
};
AnimationTimelineVisitor.prototype.visitStyle = function(ast, context) {
if (!context.currentAnimateTimings && context.previousNode.type == 4) {
context.currentTimeline.forwardFrame();
}
var normalizedStyles = normalizeStyles(ast.styles);
var easing = context.currentAnimateTimings && context.currentAnimateTimings.easing;
this._applyStyles(normalizedStyles, easing, ast["treatAsEmptyStep"] ? true : false, context);
context.previousNode = ast;
};
AnimationTimelineVisitor.prototype._applyStyles = function(styles, easing, treatAsEmptyStep, context) {
if (styles.hasOwnProperty("easing")) {
easing = easing || styles["easing"];
delete styles["easing"];
}
context.currentTimeline.setStyles(styles, easing, treatAsEmptyStep);
};
AnimationTimelineVisitor.prototype.visitKeyframeSequence = function(ast, context) {
var _this = this;
var MAX_KEYFRAME_OFFSET = 1;
var limit = ast.steps.length - 1;
var firstKeyframe = ast.steps[0];
var offsetGap = 0;
var containsOffsets = getOffset(firstKeyframe) != null;
if (!containsOffsets) {
offsetGap = MAX_KEYFRAME_OFFSET / limit;
}
var startTime = context.currentTimeline.duration;
var duration = context.currentAnimateTimings.duration;
var innerContext = context.createSubContext();
var innerTimeline = innerContext.currentTimeline;
innerTimeline.easing = context.currentAnimateTimings.easing;
ast.steps.forEach(function(step, i) {
var normalizedStyles = normalizeStyles(step.styles);
var offset = containsOffsets ? step.offset != null ? step.offset : parseFloat(normalizedStyles["offset"]) : i == limit ? MAX_KEYFRAME_OFFSET : i * offsetGap;
innerTimeline.forwardTime(offset * duration);
_this._applyStyles(normalizedStyles, null, false, innerContext);
});
context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);
context.transformIntoNewTimeline(startTime + duration);
context.previousNode = ast;
};
return AnimationTimelineVisitor;
}();
var TimelineBuilder = function() {
function TimelineBuilder(startTime, globalTimelineStyles) {
this.startTime = startTime;
this.duration = 0;
this.easing = "";
this._previousKeyframe = {};
this._keyframes = new Map();
this._styleSummary = {};
this._backFill = {};
this._currentEmptyStepKeyframe = null;
this._localTimelineStyles = Object.create(this._backFill, {});
this._globalTimelineStyles = globalTimelineStyles ? globalTimelineStyles : this._localTimelineStyles;
this._loadKeyframe();
}
TimelineBuilder.prototype.hasStyling = function() {
return this._keyframes.size > 1;
};
Object.defineProperty(TimelineBuilder.prototype, "currentTime", {
get: function() {
return this.startTime + this.duration;
},
enumerable: true,
configurable: true
});
TimelineBuilder.prototype.fork = function(currentTime) {
if (currentTime === void 0) {
currentTime = 0;
}
return new TimelineBuilder(currentTime || this.currentTime, this._globalTimelineStyles);
};
TimelineBuilder.prototype._loadKeyframe = function() {
if (this._currentKeyframe) {
this._previousKeyframe = this._currentKeyframe;
}
this._currentKeyframe = this._keyframes.get(this.duration);
if (!this._currentKeyframe) {
this._currentKeyframe = Object.create(this._backFill, {});
this._keyframes.set(this.duration, this._currentKeyframe);
}
};
TimelineBuilder.prototype.forwardFrame = function() {
this.duration++;
this._loadKeyframe();
};
TimelineBuilder.prototype.forwardTime = function(time) {
this.duration = time;
this._loadKeyframe();
};
TimelineBuilder.prototype._updateStyle = function(prop, value) {
this._localTimelineStyles[prop] = value;
this._globalTimelineStyles[prop] = value;
this._styleSummary[prop] = {
time: this.currentTime,
value: value
};
};
TimelineBuilder.prototype.allowOnlyTimelineStyles = function() {
return this._currentEmptyStepKeyframe !== this._currentKeyframe;
};
TimelineBuilder.prototype.setStyles = function(styles, easing, treatAsEmptyStep) {
var _this = this;
if (easing === void 0) {
easing = null;
}
if (treatAsEmptyStep === void 0) {
treatAsEmptyStep = false;
}
if (easing) {
this._previousKeyframe["easing"] = easing;
}
if (treatAsEmptyStep) {
Object.keys(this._globalTimelineStyles).forEach(function(prop) {
_this._backFill[prop] = _this._globalTimelineStyles[prop] || _angular_animations.AUTO_STYLE;
_this._currentKeyframe[prop] = _angular_animations.AUTO_STYLE;
});
this._currentEmptyStepKeyframe = this._currentKeyframe;
} else {
Object.keys(styles).forEach(function(prop) {
if (prop !== "offset") {
var val = styles[prop];
_this._currentKeyframe[prop] = val;
if (!_this._localTimelineStyles[prop]) {
_this._backFill[prop] = _this._globalTimelineStyles[prop] || _angular_animations.AUTO_STYLE;
}
_this._updateStyle(prop, val);
}
});
Object.keys(this._localTimelineStyles).forEach(function(prop) {
if (!_this._currentKeyframe.hasOwnProperty(prop)) {
_this._currentKeyframe[prop] = _this._localTimelineStyles[prop];
}
});
}
};
TimelineBuilder.prototype.snapshotCurrentStyles = function() {
copyStyles(this._localTimelineStyles, false, this._currentKeyframe);
};
TimelineBuilder.prototype.getFinalKeyframe = function() {
return this._keyframes.get(this.duration);
};
Object.defineProperty(TimelineBuilder.prototype, "properties", {
get: function() {
var properties = [];
for (var prop in this._currentKeyframe) {
properties.push(prop);
}
return properties;
},
enumerable: true,
configurable: true
});
TimelineBuilder.prototype.mergeTimelineCollectedStyles = function(timeline) {
var _this = this;
Object.keys(timeline._styleSummary).forEach(function(prop) {
var details0 = _this._styleSummary[prop];
var details1 = timeline._styleSummary[prop];
if (!details0 || details1.time > details0.time) {
_this._updateStyle(prop, details1.value);
}
});
};
TimelineBuilder.prototype.buildKeyframes = function() {
var _this = this;
var finalKeyframes = [];
if (this.duration == 0) {
var targetKeyframe = this.getFinalKeyframe();
var firstKeyframe = copyStyles(targetKeyframe, true);
firstKeyframe["offset"] = 0;
finalKeyframes.push(firstKeyframe);
var lastKeyframe = copyStyles(targetKeyframe, true);
lastKeyframe["offset"] = 1;
finalKeyframes.push(lastKeyframe);
} else {
this._keyframes.forEach(function(keyframe, time) {
var finalKeyframe = copyStyles(keyframe, true);
finalKeyframe["offset"] = time / _this.duration;
finalKeyframes.push(finalKeyframe);
});
}
return createTimelineInstruction(finalKeyframes, this.duration, this.startTime, this.easing);
};
return TimelineBuilder;
}();
function getOffset(ast) {
var offset = ast.offset;
if (offset == null) {
var styles = ast.styles;
if (Array.isArray(styles)) {
for (var i = 0; i < styles.length; i++) {
var o = styles[i]["offset"];
if (o != null) {
offset = o;
break;
}
}
} else {
offset = styles["offset"];
}
}
return offset;
}
function createTransitionInstruction(triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines) {
return {
type: 0,
triggerName: triggerName,
isRemovalTransition: isRemovalTransition,
fromState: fromState,
fromStyles: fromStyles,
toState: toState,
toStyles: toStyles,
timelines: timelines
};
}
var AnimationTransitionFactory = function() {
function AnimationTransitionFactory(_triggerName, ast, matchFns, _stateStyles) {
this._triggerName = _triggerName;
this.matchFns = matchFns;
this._stateStyles = _stateStyles;
var normalizedAst = Array.isArray(ast.animation) ? _angular_animations.sequence(ast.animation) : ast.animation;
this._animationAst = normalizedAst;
}
AnimationTransitionFactory.prototype.match = function(currentState, nextState) {
if (!oneOrMoreTransitionsMatch(this.matchFns, currentState, nextState)) return;
var backupStateStyles = this._stateStyles["*"] || {};
var currentStateStyles = this._stateStyles[currentState] || backupStateStyles;
var nextStateStyles = this._stateStyles[nextState] || backupStateStyles;
var timelines = buildAnimationKeyframes(this._animationAst, currentStateStyles, nextStateStyles);
return createTransitionInstruction(this._triggerName, currentState, nextState, nextState === "void", currentStateStyles, nextStateStyles, timelines);
};
return AnimationTransitionFactory;
}();
function oneOrMoreTransitionsMatch(matchFns, currentState, nextState) {
return matchFns.some(function(fn) {
return fn(currentState, nextState);
});
}
function validateAnimationSequence(ast) {
var normalizedAst = Array.isArray(ast) ? _angular_animations.sequence(ast) : ast;
return new AnimationValidatorVisitor().validate(normalizedAst);
}
var AnimationValidatorVisitor = function() {
function AnimationValidatorVisitor() {}
AnimationValidatorVisitor.prototype.validate = function(ast) {
var context = new AnimationValidatorContext();
visitAnimationNode(this, ast, context);
return context.errors;
};
AnimationValidatorVisitor.prototype.visitState = function(ast, context) {};
AnimationValidatorVisitor.prototype.visitTransition = function(ast, context) {};
AnimationValidatorVisitor.prototype.visitSequence = function(ast, context) {
var _this = this;
ast.steps.forEach(function(step) {
return visitAnimationNode(_this, step, context);
});
};
AnimationValidatorVisitor.prototype.visitGroup = function(ast, context) {
var _this = this;
var currentTime = context.currentTime;
var furthestTime = 0;
ast.steps.forEach(function(step) {
context.currentTime = currentTime;
visitAnimationNode(_this, step, context);
furthestTime = Math.max(furthestTime, context.currentTime);
});
context.currentTime = furthestTime;
};
AnimationValidatorVisitor.prototype.visitAnimate = function(ast, context) {
context.currentAnimateTimings = ast.timings = parseTimeExpression(ast.timings, context.errors);
var astType = ast.styles && ast.styles.type;
if (astType == 5) {
this.visitKeyframeSequence(ast.styles, context);
} else {
context.currentTime += context.currentAnimateTimings.duration + context.currentAnimateTimings.delay;
if (astType == 6) {
this.visitStyle(ast.styles, context);
}
}
context.currentAnimateTimings = null;
};
AnimationValidatorVisitor.prototype.visitStyle = function(ast, context) {
var styleData = normalizeStyles(ast.styles);
var timings = context.currentAnimateTimings;
var endTime = context.currentTime;
var startTime = context.currentTime;
if (timings && startTime > 0) {
startTime -= timings.duration + timings.delay;
}
Object.keys(styleData).forEach(function(prop) {
var collectedEntry = context.collectedStyles[prop];
var updateCollectedStyle = true;
if (collectedEntry) {
if (startTime != endTime && startTime >= collectedEntry.startTime && endTime <= collectedEntry.endTime) {
context.errors.push('The CSS property "' + prop + '" that exists between the times of "' + collectedEntry.startTime + 'ms" and "' + collectedEntry.endTime + 'ms" is also being animated in a parallel animation between the times of "' + startTime + 'ms" and "' + endTime + 'ms"');
updateCollectedStyle = false;
}
startTime = collectedEntry.startTime;
}
if (updateCollectedStyle) {
context.collectedStyles[prop] = {
startTime: startTime,
endTime: endTime
};
}
});
};
AnimationValidatorVisitor.prototype.visitKeyframeSequence = function(ast, context) {
var _this = this;
var totalKeyframesWithOffsets = 0;
var offsets = [];
var offsetsOutOfOrder = false;
var keyframesOutOfRange = false;
var previousOffset = 0;
ast.steps.forEach(function(step) {
var styleData = normalizeStyles(step.styles);
var offset = 0;
if (styleData.hasOwnProperty("offset")) {
totalKeyframesWithOffsets++;
offset = styleData["offset"];
}
keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;
offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;
previousOffset = offset;
offsets.push(offset);
});
if (keyframesOutOfRange) {
context.errors.push("Please ensure that all keyframe offsets are between 0 and 1");
}
if (offsetsOutOfOrder) {
context.errors.push("Please ensure that all keyframe offsets are in order");
}
var length = ast.steps.length;
var generatedOffset = 0;
if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {
context.errors.push("Not all style() steps within the declared keyframes() contain offsets");
} else if (totalKeyframesWithOffsets == 0) {
generatedOffset = 1 / length;
}
var limit = length - 1;
var currentTime = context.currentTime;
var animateDuration = context.currentAnimateTimings.duration;
ast.steps.forEach(function(step, i) {
var offset = generatedOffset > 0 ? i == limit ? 1 : generatedOffset * i : offsets[i];
var durationUpToThisFrame = offset * animateDuration;
context.currentTime = currentTime + context.currentAnimateTimings.delay + durationUpToThisFrame;
context.currentAnimateTimings.duration = durationUpToThisFrame;
_this.visitStyle(step, context);
});
};
return AnimationValidatorVisitor;
}();
var AnimationValidatorContext = function() {
function AnimationValidatorContext() {
this.errors = [];
this.currentTime = 0;
this.collectedStyles = {};
}
return AnimationValidatorContext;
}();
function buildTrigger(name, definitions) {
return new AnimationTriggerVisitor().buildTrigger(name, definitions);
}
var AnimationTrigger = function() {
function AnimationTrigger(name, states, _transitionAsts) {
var _this = this;
this.name = name;
this._transitionAsts = _transitionAsts;
this.transitionFactories = [];
this.states = {};
Object.keys(states).forEach(function(stateName) {
_this.states[stateName] = copyStyles(states[stateName], false);
});
var errors = [];
_transitionAsts.forEach(function(ast) {
var exprs = parseTransitionExpr(ast.expr, errors);
var sequenceErrors = validateAnimationSequence(ast);
if (sequenceErrors.length) {
errors.push.apply(errors, sequenceErrors);
} else {
_this.transitionFactories.push(new AnimationTransitionFactory(_this.name, ast, exprs, states));
}
});
if (errors.length) {
var LINE_START = "\n - ";
throw new Error("Animation parsing for the " + name + " trigger have failed:" + LINE_START + errors.join(LINE_START));
}
}
AnimationTrigger.prototype.createFallbackInstruction = function(currentState, nextState) {
var backupStateStyles = this.states["*"] || {};
var currentStateStyles = this.states[currentState] || backupStateStyles;
var nextStateStyles = this.states[nextState] || backupStateStyles;
return createTransitionInstruction(this.name, currentState, nextState, nextState == "void", currentStateStyles, nextStateStyles, []);
};
AnimationTrigger.prototype.matchTransition = function(currentState, nextState) {
for (var i = 0; i < this.transitionFactories.length; i++) {
var result = this.transitionFactories[i].match(currentState, nextState);
if (result) return result;
}
return null;
};
return AnimationTrigger;
}();
var AnimationTriggerContext = function() {
function AnimationTriggerContext() {
this.errors = [];
this.states = {};
this.transitions = [];
}
return AnimationTriggerContext;
}();
var AnimationTriggerVisitor = function() {
function AnimationTriggerVisitor() {}
AnimationTriggerVisitor.prototype.buildTrigger = function(name, definitions) {
var _this = this;
var context = new AnimationTriggerContext();
definitions.forEach(function(def) {
return visitAnimationNode(_this, def, context);
});
return new AnimationTrigger(name, context.states, context.transitions);
};
AnimationTriggerVisitor.prototype.visitState = function(ast, context) {
var styles = normalizeStyles(ast.styles.styles);
ast.name.split(/\s*,\s*/).forEach(function(name) {
context.states[name] = styles;
});
};
AnimationTriggerVisitor.prototype.visitTransition = function(ast, context) {
context.transitions.push(ast);
};
AnimationTriggerVisitor.prototype.visitSequence = function(ast, context) {};
AnimationTriggerVisitor.prototype.visitGroup = function(ast, context) {};
AnimationTriggerVisitor.prototype.visitAnimate = function(ast, context) {};
AnimationTriggerVisitor.prototype.visitStyle = function(ast, context) {};
AnimationTriggerVisitor.prototype.visitKeyframeSequence = function(ast, context) {};
return AnimationTriggerVisitor;
}();
var MARKED_FOR_ANIMATION_CLASSNAME = "ng-animating";
var MARKED_FOR_ANIMATION_SELECTOR = ".ng-animating";
var MARKED_FOR_REMOVAL = "$$ngRemove";
var VOID_STATE = "void";
var DomAnimationEngine = function() {
function DomAnimationEngine(_driver, _normalizer) {
this._driver = _driver;
this._normalizer = _normalizer;
this._flaggedInserts = new Set();
this._queuedRemovals = new Map();
this._queuedTransitionAnimations = [];
this._activeTransitionAnimations = new Map();
this._activeElementAnimations = new Map();
this._elementTriggerStates = new Map();
this._triggers = Object.create(null);
this._triggerListeners = new Map();
this._pendingListenerRemovals = new Map();
}
Object.defineProperty(DomAnimationEngine.prototype, "queuedPlayers", {
get: function() {
return this._queuedTransitionAnimations.map(function(q) {
return q.player;
});
},
enumerable: true,
configurable: true
});
Object.defineProperty(DomAnimationEngine.prototype, "activePlayers", {
get: function() {
var players = [];
this._activeElementAnimations.forEach(function(activePlayers) {
return players.push.apply(players, activePlayers);
});
return players;
},
enumerable: true,
configurable: true
});
DomAnimationEngine.prototype.registerTrigger = function(trigger, name) {
name = name || trigger.name;
if (this._triggers[name]) {
return;
}
this._triggers[name] = buildTrigger(name, trigger.definitions);
};
DomAnimationEngine.prototype.onInsert = function(element, domFn) {
if (element["nodeType"] == 1) {
this._flaggedInserts.add(element);
}
domFn();
};
DomAnimationEngine.prototype.onRemove = function(element, domFn) {
var _this = this;
if (element["nodeType"] != 1) {
domFn();
return;
}
var lookupRef = this._elementTriggerStates.get(element);
if (lookupRef) {
var possibleTriggers = Object.keys(lookupRef);
var hasRemoval = possibleTriggers.some(function(triggerName) {
var oldValue = lookupRef[triggerName];
var instruction = _this._triggers[triggerName].matchTransition(oldValue, VOID_STATE);
return !!instruction;
});
if (hasRemoval) {
element[MARKED_FOR_REMOVAL] = true;
this._queuedRemovals.set(element, domFn);
return;
}
}
if (this._triggerListeners.has(element)) {
element[MARKED_FOR_REMOVAL] = true;
this._queuedRemovals.set(element, function() {});
}
this._onRemovalTransition(element).forEach(function(player) {
return player.destroy();
});
domFn();
};
DomAnimationEngine.prototype.setProperty = function(element, property, value) {
var trigger = this._triggers[property];
if (!trigger) {
throw new Error('The provided animation trigger "' + property + '" has not been registered!');
}
var lookupRef = this._elementTriggerStates.get(element);
if (!lookupRef) {
this._elementTriggerStates.set(element, lookupRef = {});
}
var oldValue = lookupRef.hasOwnProperty(property) ? lookupRef[property] : VOID_STATE;
if (oldValue !== value) {
value = normalizeTriggerValue(value);
var instruction = trigger.matchTransition(oldValue, value);
if (!instruction) {
instruction = trigger.createFallbackInstruction(oldValue, value);
}
this.animateTransition(element, instruction);
lookupRef[property] = value;
}
};
DomAnimationEngine.prototype.listen = function(element, eventName, eventPhase, callback) {
var _this = this;
if (!eventPhase) {
throw new Error('Unable to listen on the animation trigger "' + eventName + '" because the provided event is undefined!');
}
if (!this._triggers[eventName]) {
throw new Error('Unable to listen on the animation trigger event "' + eventPhase + '" because the animation trigger "' + eventName + "\" doesn't exist!");
}
var elementListeners = this._triggerListeners.get(element);
if (!elementListeners) {
this._triggerListeners.set(element, elementListeners = []);
}
validatePlayerEvent(eventName, eventPhase);
var tuple = {
triggerName: eventName,
phase: eventPhase,
callback: callback
};
elementListeners.push(tuple);
return function() {
getOrSetAsInMap(_this._pendingListenerRemovals, element, []).push(tuple);
};
};
DomAnimationEngine.prototype._clearPendingListenerRemovals = function() {
var _this = this;
this._pendingListenerRemovals.forEach(function(tuples, element) {
var elementListeners = _this._triggerListeners.get(element);
if (elementListeners) {
tuples.forEach(function(tuple) {
var index = elementListeners.indexOf(tuple);
if (index >= 0) {
elementListeners.splice(index, 1);
}
});
}
});
this._pendingListenerRemovals.clear();
};
DomAnimationEngine.prototype._onRemovalTransition = function(element) {
var elms = element.querySelectorAll(MARKED_FOR_ANIMATION_SELECTOR);
var _loop_1 = function(i) {
var elm = elms[i];
var activePlayers = this_1._activeElementAnimations.get(elm);
if (activePlayers) {
activePlayers.forEach(function(player) {
return player.destroy();
});
}
var activeTransitions = this_1._activeTransitionAnimations.get(elm);
if (activeTransitions) {
Object.keys(activeTransitions).forEach(function(triggerName) {
var player = activeTransitions[triggerName];
if (player) {
player.destroy();
}
});
}
};
var this_1 = this;
for (var i = 0; i < elms.length; i++) {
_loop_1(i);
}
return copyArray(this._activeElementAnimations.get(element));
};
DomAnimationEngine.prototype.animateTransition = function(element, instruction) {
var _this = this;
var triggerName = instruction.triggerName;
var previousPlayers;
if (instruction.isRemovalTransition) {
previousPlayers = this._onRemovalTransition(element);
} else {
previousPlayers = [];
var existingTransitions = this._activeTransitionAnimations.get(element);
var existingPlayer = existingTransitions ? existingTransitions[triggerName] : null;
if (existingPlayer) {
previousPlayers.push(existingPlayer);
}
}
eraseStyles(element, instruction.fromStyles);
var totalTime = 0;
var players = instruction.timelines.map(function(timelineInstruction, i) {
totalTime = Math.max(totalTime, timelineInstruction.totalTime);
return _this._buildPlayer(element, timelineInstruction, previousPlayers, i);
});
previousPlayers.forEach(function(previousPlayer) {
return previousPlayer.destroy();
});
var player = optimizeGroupPlayer(players);
player.onDone(function() {
player.destroy();
var elmTransitionMap = _this._activeTransitionAnimations.get(element);
if (elmTransitionMap) {
delete elmTransitionMap[triggerName];
if (Object.keys(elmTransitionMap).length == 0) {
_this._activeTransitionAnimations.delete(element);
}
}
deleteFromArrayMap(_this._activeElementAnimations, element, player);
setStyles(element, instruction.toStyles);
});
var elmTransitionMap = getOrSetAsInMap(this._activeTransitionAnimations, element, {});
elmTransitionMap[triggerName] = player;
this._queuePlayer(element, triggerName, player, makeAnimationEvent(element, triggerName, instruction.fromState, instruction.toState, null, totalTime));
return player;
};
DomAnimationEngine.prototype.animateTimeline = function(element, instructions, previousPlayers) {
var _this = this;
if (previousPlayers === void 0) {
previousPlayers = [];
}
var players = instructions.map(function(instruction, i) {
var player = _this._buildPlayer(element, instruction, previousPlayers, i);
player.onDestroy(function() {
deleteFromArrayMap(_this._activeElementAnimations, element, player);
});
_this._markPlayerAsActive(element, player);
return player;
});
return optimizeGroupPlayer(players);
};
DomAnimationEngine.prototype._buildPlayer = function(element, instruction, previousPlayers, index) {
if (index === void 0) {
index = 0;
}
if (index && previousPlayers.length) {
previousPlayers = [];
}
return this._driver.animate(element, this._normalizeKeyframes(instruction.keyframes), instruction.duration, instruction.delay, instruction.easing, previousPlayers);
};
DomAnimationEngine.prototype._normalizeKeyframes = function(keyframes) {
var _this = this;
var errors = [];
var normalizedKeyframes = [];
keyframes.forEach(function(kf) {
var normalizedKeyframe = {};
Object.keys(kf).forEach(function(prop) {
var normalizedProp = prop;
var normalizedValue = kf[prop];
if (prop != "offset") {
normalizedProp = _this._normalizer.normalizePropertyName(prop, errors);
normalizedValue = _this._normalizer.normalizeStyleValue(prop, normalizedProp, kf[prop], errors);
}
normalizedKeyframe[normalizedProp] = normalizedValue;
});
normalizedKeyframes.push(normalizedKeyframe);
});
if (errors.length) {
var LINE_START = "\n - ";
throw new Error("Unable to animate due to the following errors:" + LINE_START + errors.join(LINE_START));
}
return normalizedKeyframes;
};
DomAnimationEngine.prototype._markPlayerAsActive = function(element, player) {
var elementAnimations = getOrSetAsInMap(this._activeElementAnimations, element, []);
elementAnimations.push(player);
};
DomAnimationEngine.prototype._queuePlayer = function(element, triggerName, player, event) {
var tuple = {
element: element,
player: player,
triggerName: triggerName,
event: event
};
this._queuedTransitionAnimations.push(tuple);
player.init();
element.classList.add(MARKED_FOR_ANIMATION_CLASSNAME);
player.onDone(function() {
element.classList.remove(MARKED_FOR_ANIMATION_CLASSNAME);
});
};
DomAnimationEngine.prototype._flushQueuedAnimations = function() {
var _loop_2 = function() {
var _a = this_2._queuedTransitionAnimations.shift(), player = _a.player, element = _a.element, triggerName = _a.triggerName, event = _a.event;
var parent = element;
while (parent = parent.parentNode) {
if (parent[MARKED_FOR_REMOVAL]) return "continue-parentLoop";
}
var listeners = this_2._triggerListeners.get(element);
if (listeners) {
listeners.forEach(function(tuple) {
if (tuple.triggerName == triggerName) {
listenOnPlayer(player, tuple.phase, event, tuple.callback);
}
});
}
if (this_2._queuedRemovals.has(element)) {
player.destroy();
return "continue";
}
this_2._markPlayerAsActive(element, player);
player.init();
if (!player.hasStarted()) {
player.play();
}
};
var this_2 = this;
parentLoop: while (this._queuedTransitionAnimations.length) {
var state_1 = _loop_2();
switch (state_1) {
case "continue-parentLoop":
continue parentLoop;
}
}
};
DomAnimationEngine.prototype.flush = function() {
var _this = this;
var leaveListeners = new Map();
this._queuedRemovals.forEach(function(callback, element) {
var tuple = _this._pendingListenerRemovals.get(element);
if (tuple) {
leaveListeners.set(element, tuple);
_this._pendingListenerRemovals.delete(element);
}
});
this._clearPendingListenerRemovals();
this._pendingListenerRemovals = leaveListeners;
this._flushQueuedAnimations();
var flushAgain = false;
this._queuedRemovals.forEach(function(callback, element) {
if (_this._flaggedInserts.has(element)) return;
var parent = element;
var players = [];
while (parent = parent.parentNode) {
if (parent[MARKED_FOR_REMOVAL]) {
callback();
return;
}
var match = _this._activeElementAnimations.get(parent);
if (match) {
players.push.apply(players, match);
break;
}
}
if (players.length == 0) {
var stateDetails_1 = _this._elementTriggerStates.get(element);
if (stateDetails_1) {
Object.keys(stateDetails_1).forEach(function(triggerName) {
flushAgain = true;
var oldValue = stateDetails_1[triggerName];
var instruction = _this._triggers[triggerName].matchTransition(oldValue, VOID_STATE);
if (instruction) {
players.push(_this.animateTransition(element, instruction));
} else {
var event = makeAnimationEvent(element, triggerName, oldValue, VOID_STATE, "", 0);
var player = new _angular_animations.NoopAnimationPlayer();
_this._queuePlayer(element, triggerName, player, event);
}
});
}
}
if (players.length) {
optimizeGroupPlayer(players).onDone(callback);
} else {
callback();
}
});
this._queuedRemovals.clear();
this._flaggedInserts.clear();
if (flushAgain) {
this._flushQueuedAnimations();
this._clearPendingListenerRemovals();
}
};
return DomAnimationEngine;
}();
function getOrSetAsInMap(map, key, defaultValue) {
var value = map.get(key);
if (!value) {
map.set(key, value = defaultValue);
}
return value;
}
function deleteFromArrayMap(map, key, value) {
var arr = map.get(key);
if (arr) {
var index = arr.indexOf(value);
if (index >= 0) {
arr.splice(index, 1);
if (arr.length == 0) {
map.delete(key);
}
}
}
}
function optimizeGroupPlayer(players) {
switch (players.length) {
case 0:
return new _angular_animations.NoopAnimationPlayer();

case 1:
return players[0];

default:
return new _angular_animations.ɵAnimationGroupPlayer(players);
}
}
function copyArray(source) {
return source ? source.splice(0) : [];
}
function validatePlayerEvent(triggerName, eventName) {
switch (eventName) {
case "start":
case "done":
return;

default:
throw new Error('The provided animation trigger event "' + eventName + '" for the animation trigger "' + triggerName + '" is not supported!');
}
}
function listenOnPlayer(player, eventName, baseEvent, callback) {
switch (eventName) {
case "start":
player.onStart(function() {
var event = copyAnimationEvent(baseEvent);
event.phaseName = "start";
callback(event);
});
break;

case "done":
player.onDone(function() {
var event = copyAnimationEvent(baseEvent);
event.phaseName = "done";
callback(event);
});
break;
}
}
function copyAnimationEvent(e) {
return makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, e.phaseName, e.totalTime);
}
function makeAnimationEvent(element, triggerName, fromState, toState, phaseName, totalTime) {
return {
element: element,
triggerName: triggerName,
fromState: fromState,
toState: toState,
phaseName: phaseName,
totalTime: totalTime
};
}
function normalizeTriggerValue(value) {
switch (typeof value) {
case "boolean":
return value ? "1" : "0";

default:
return value ? value.toString() : null;
}
}
var AnimationStyleNormalizer = function() {
function AnimationStyleNormalizer() {}
AnimationStyleNormalizer.prototype.normalizePropertyName = function(propertyName, errors) {};
AnimationStyleNormalizer.prototype.normalizeStyleValue = function(userProvidedProperty, normalizedProperty, value, errors) {};
return AnimationStyleNormalizer;
}();
var NoopAnimationStyleNormalizer = function() {
function NoopAnimationStyleNormalizer() {}
NoopAnimationStyleNormalizer.prototype.normalizePropertyName = function(propertyName, errors) {
return propertyName;
};
NoopAnimationStyleNormalizer.prototype.normalizeStyleValue = function(userProvidedProperty, normalizedProperty, value, errors) {
return value;
};
return NoopAnimationStyleNormalizer;
}();
var Animation = function() {
function Animation(input) {
var ast = Array.isArray(input) ? _angular_animations.sequence(input) : input;
var errors = validateAnimationSequence(ast);
if (errors.length) {
var errorMessage = "animation validation failed:\n" + errors.join("\n");
throw new Error(errorMessage);
}
this._animationAst = ast;
}
Animation.prototype.buildTimelines = function(startingStyles, destinationStyles) {
var start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) : startingStyles;
var dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) : destinationStyles;
return buildAnimationKeyframes(this._animationAst, start, dest);
};
Animation.prototype.create = function(injector, element, startingStyles, destinationStyles) {
if (startingStyles === void 0) {
startingStyles = {};
}
if (destinationStyles === void 0) {
destinationStyles = {};
}
var instructions = this.buildTimelines(startingStyles, destinationStyles);
var driver = injector.get(AnimationDriver);
var normalizer = injector.get(AnimationStyleNormalizer);
var engine = new DomAnimationEngine(driver, normalizer);
return engine.animateTimeline(element, instructions);
};
return Animation;
}();
var WebAnimationsStyleNormalizer = function(_super) {
__extends(WebAnimationsStyleNormalizer, _super);
function WebAnimationsStyleNormalizer() {
return _super !== null && _super.apply(this, arguments) || this;
}
WebAnimationsStyleNormalizer.prototype.normalizePropertyName = function(propertyName, errors) {
return dashCaseToCamelCase(propertyName);
};
WebAnimationsStyleNormalizer.prototype.normalizeStyleValue = function(userProvidedProperty, normalizedProperty, value, errors) {
var unit = "";
var strVal = value.toString().trim();
if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== "0") {
if (typeof value === "number") {
unit = "px";
} else {
var valAndSuffixMatch = value.match(/^[+-]?[\d\.]+([a-z]*)$/);
if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
errors.push("Please provide a CSS unit value for " + userProvidedProperty + ":" + value);
}
}
}
return strVal + unit;
};
return WebAnimationsStyleNormalizer;
}(AnimationStyleNormalizer);
var DIMENSIONAL_PROP_MAP = makeBooleanMap("width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent".split(","));
function makeBooleanMap(keys) {
var map = {};
keys.forEach(function(key) {
return map[key] = true;
});
return map;
}
var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
function dashCaseToCamelCase(input) {
return input.replace(DASH_CASE_REGEXP, function() {
var m = [];
for (var _i = 0; _i < arguments.length; _i++) {
m[_i] = arguments[_i];
}
return m[1].toUpperCase();
});
}
var DEFAULT_STATE_VALUE = "void";
var DEFAULT_STATE_STYLES = "*";
var NoopAnimationEngine = function(_super) {
__extends(NoopAnimationEngine, _super);
function NoopAnimationEngine() {
var _this = _super.apply(this, arguments) || this;
_this._listeners = new Map();
_this._changes = [];
_this._flaggedRemovals = new Set();
_this._onDoneFns = [];
_this._triggerStyles = Object.create(null);
return _this;
}
NoopAnimationEngine.prototype.registerTrigger = function(trigger, name) {
name = name || trigger.name;
if (this._triggerStyles[name]) {
return;
}
var stateMap = {};
trigger.definitions.forEach(function(def) {
if (def.type === 0) {
var stateDef = def;
stateMap[stateDef.name] = normalizeStyles(stateDef.styles.styles);
}
});
this._triggerStyles[name] = stateMap;
};
NoopAnimationEngine.prototype.onInsert = function(element, domFn) {
domFn();
};
NoopAnimationEngine.prototype.onRemove = function(element, domFn) {
domFn();
if (element["nodeType"] == 1) {
this._flaggedRemovals.add(element);
}
};
NoopAnimationEngine.prototype.setProperty = function(element, property, value) {
var storageProp = makeStorageProp(property);
var oldValue = element[storageProp] || DEFAULT_STATE_VALUE;
this._changes.push({
element: element,
oldValue: oldValue,
newValue: value,
triggerName: property
});
var triggerStateStyles = this._triggerStyles[property] || {};
var fromStateStyles = triggerStateStyles[oldValue] || triggerStateStyles[DEFAULT_STATE_STYLES];
if (fromStateStyles) {
eraseStyles(element, fromStateStyles);
}
element[storageProp] = value;
this._onDoneFns.push(function() {
var toStateStyles = triggerStateStyles[value] || triggerStateStyles[DEFAULT_STATE_STYLES];
if (toStateStyles) {
setStyles(element, toStateStyles);
}
});
};
NoopAnimationEngine.prototype.listen = function(element, eventName, eventPhase, callback) {
var listeners = this._listeners.get(element);
if (!listeners) {
this._listeners.set(element, listeners = []);
}
var tuple = {
triggerName: eventName,
eventPhase: eventPhase,
callback: callback
};
listeners.push(tuple);
return function() {
return tuple.doRemove = true;
};
};
NoopAnimationEngine.prototype.flush = function() {
var _this = this;
var onStartCallbacks = [];
var onDoneCallbacks = [];
function handleListener(listener, data) {
var phase = listener.eventPhase;
var event = makeAnimationEvent$1(data.element, data.triggerName, data.oldValue, data.newValue, phase, 0);
if (phase == "start") {
onStartCallbacks.push(function() {
return listener.callback(event);
});
} else if (phase == "done") {
onDoneCallbacks.push(function() {
return listener.callback(event);
});
}
}
this._changes.forEach(function(change) {
var element = change.element;
var listeners = _this._listeners.get(element);
if (listeners) {
listeners.forEach(function(listener) {
if (listener.triggerName == change.triggerName) {
handleListener(listener, change);
}
});
}
});
this._flaggedRemovals.forEach(function(element) {
var listeners = _this._listeners.get(element);
if (listeners) {
listeners.forEach(function(listener) {
var triggerName = listener.triggerName;
var storageProp = makeStorageProp(triggerName);
handleListener(listener, {
element: element,
triggerName: triggerName,
oldValue: element[storageProp] || DEFAULT_STATE_VALUE,
newValue: DEFAULT_STATE_VALUE
});
});
}
});
Array.from(this._listeners.keys()).forEach(function(element) {
var listenersToKeep = _this._listeners.get(element).filter(function(l) {
return !l.doRemove;
});
if (listenersToKeep.length) {
_this._listeners.set(element, listenersToKeep);
} else {
_this._listeners.delete(element);
}
});
onStartCallbacks.forEach(function(fn) {
return fn();
});
onDoneCallbacks.forEach(function(fn) {
return fn();
});
this._flaggedRemovals.clear();
this._changes = [];
this._onDoneFns.forEach(function(doneFn) {
return doneFn();
});
this._onDoneFns = [];
};
Object.defineProperty(NoopAnimationEngine.prototype, "activePlayers", {
get: function() {
return [];
},
enumerable: true,
configurable: true
});
Object.defineProperty(NoopAnimationEngine.prototype, "queuedPlayers", {
get: function() {
return [];
},
enumerable: true,
configurable: true
});
return NoopAnimationEngine;
}(AnimationEngine);
function makeAnimationEvent$1(element, triggerName, fromState, toState, phaseName, totalTime) {
return {
element: element,
triggerName: triggerName,
fromState: fromState,
toState: toState,
phaseName: phaseName,
totalTime: totalTime
};
}
function makeStorageProp(property) {
return "_@_" + property;
}
var WebAnimationsPlayer = function() {
function WebAnimationsPlayer(element, keyframes, options, previousPlayers) {
if (previousPlayers === void 0) {
previousPlayers = [];
}
var _this = this;
this.element = element;
this.keyframes = keyframes;
this.options = options;
this._onDoneFns = [];
this._onStartFns = [];
this._onDestroyFns = [];
this._initialized = false;
this._finished = false;
this._started = false;
this._destroyed = false;
this.time = 0;
this.parentPlayer = null;
this._duration = options["duration"];
this._delay = options["delay"] || 0;
this.time = this._duration + this._delay;
this.previousStyles = {};
previousPlayers.forEach(function(player) {
var styles = player._captureStyles();
Object.keys(styles).forEach(function(prop) {
return _this.previousStyles[prop] = styles[prop];
});
});
}
WebAnimationsPlayer.prototype._onFinish = function() {
if (!this._finished) {
this._finished = true;
this._onDoneFns.forEach(function(fn) {
return fn();
});
this._onDoneFns = [];
}
};
WebAnimationsPlayer.prototype.init = function() {
var _this = this;
if (this._initialized) return;
this._initialized = true;
var keyframes = this.keyframes.map(function(styles) {
var formattedKeyframe = {};
Object.keys(styles).forEach(function(prop, index) {
var value = styles[prop];
if (value == _angular_animations.AUTO_STYLE) {
value = _computeStyle(_this.element, prop);
}
if (value != undefined) {
formattedKeyframe[prop] = value;
}
});
return formattedKeyframe;
});
var previousStyleProps = Object.keys(this.previousStyles);
if (previousStyleProps.length) {
var startingKeyframe_1 = keyframes[0];
var missingStyleProps_1 = [];
previousStyleProps.forEach(function(prop) {
if (!startingKeyframe_1.hasOwnProperty(prop)) {
missingStyleProps_1.push(prop);
}
startingKeyframe_1[prop] = _this.previousStyles[prop];
});
if (missingStyleProps_1.length) {
var self_1 = this;
var _loop_3 = function() {
var kf = keyframes[i];
missingStyleProps_1.forEach(function(prop) {
kf[prop] = _computeStyle(self_1.element, prop);
});
};
for (var i = 1; i < keyframes.length; i++) {
_loop_3();
}
}
}
this._player = this._triggerWebAnimation(this.element, keyframes, this.options);
this._finalKeyframe = keyframes.length ? _copyKeyframeStyles(keyframes[keyframes.length - 1]) : {};
this._resetDomPlayerState();
this._player.addEventListener("finish", function() {
return _this._onFinish();
});
};
WebAnimationsPlayer.prototype._triggerWebAnimation = function(element, keyframes, options) {
return element["animate"](keyframes, options);
};
Object.defineProperty(WebAnimationsPlayer.prototype, "domPlayer", {
get: function() {
return this._player;
},
enumerable: true,
configurable: true
});
WebAnimationsPlayer.prototype.onStart = function(fn) {
this._onStartFns.push(fn);
};
WebAnimationsPlayer.prototype.onDone = function(fn) {
this._onDoneFns.push(fn);
};
WebAnimationsPlayer.prototype.onDestroy = function(fn) {
this._onDestroyFns.push(fn);
};
WebAnimationsPlayer.prototype.play = function() {
this.init();
if (!this.hasStarted()) {
this._onStartFns.forEach(function(fn) {
return fn();
});
this._onStartFns = [];
this._started = true;
}
this._player.play();
};
WebAnimationsPlayer.prototype.pause = function() {
this.init();
this._player.pause();
};
WebAnimationsPlayer.prototype.finish = function() {
this.init();
this._onFinish();
this._player.finish();
};
WebAnimationsPlayer.prototype.reset = function() {
this._resetDomPlayerState();
this._destroyed = false;
this._finished = false;
this._started = false;
};
WebAnimationsPlayer.prototype._resetDomPlayerState = function() {
if (this._player) {
this._player.cancel();
}
};
WebAnimationsPlayer.prototype.restart = function() {
this.reset();
this.play();
};
WebAnimationsPlayer.prototype.hasStarted = function() {
return this._started;
};
WebAnimationsPlayer.prototype.destroy = function() {
if (!this._destroyed) {
this._resetDomPlayerState();
this._onFinish();
this._destroyed = true;
this._onDestroyFns.forEach(function(fn) {
return fn();
});
this._onDestroyFns = [];
}
};
WebAnimationsPlayer.prototype.setPosition = function(p) {
this._player.currentTime = p * this.time;
};
WebAnimationsPlayer.prototype.getPosition = function() {
return this._player.currentTime / this.time;
};
WebAnimationsPlayer.prototype._captureStyles = function() {
var _this = this;
var styles = {};
if (this.hasStarted()) {
Object.keys(this._finalKeyframe).forEach(function(prop) {
if (prop != "offset") {
styles[prop] = _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop);
}
});
}
return styles;
};
return WebAnimationsPlayer;
}();
function _computeStyle(element, prop) {
return window.getComputedStyle(element)[prop];
}
function _copyKeyframeStyles(styles) {
var newStyles = {};
Object.keys(styles).forEach(function(prop) {
if (prop != "offset") {
newStyles[prop] = styles[prop];
}
});
return newStyles;
}
var WebAnimationsDriver = function() {
function WebAnimationsDriver() {}
WebAnimationsDriver.prototype.animate = function(element, keyframes, duration, delay, easing, previousPlayers) {
if (previousPlayers === void 0) {
previousPlayers = [];
}
var playerOptions = {
duration: duration,
delay: delay,
fill: "forwards"
};
if (easing) {
playerOptions["easing"] = easing;
}
var previousWebAnimationPlayers = previousPlayers.filter(function(player) {
return player instanceof WebAnimationsPlayer;
});
return new WebAnimationsPlayer(element, keyframes, playerOptions, previousWebAnimationPlayers);
};
return WebAnimationsDriver;
}();
function supportsWebAnimations() {
return typeof Element !== "undefined" && typeof Element.prototype["animate"] === "function";
}
exports.AnimationDriver = AnimationDriver;
exports.ɵAnimationEngine = AnimationEngine;
exports.ɵAnimation = Animation;
exports.ɵAnimationStyleNormalizer = AnimationStyleNormalizer;
exports.ɵNoopAnimationStyleNormalizer = NoopAnimationStyleNormalizer;
exports.ɵWebAnimationsStyleNormalizer = WebAnimationsStyleNormalizer;
exports.ɵNoopAnimationDriver = NoopAnimationDriver;
exports.ɵDomAnimationEngine = DomAnimationEngine;
exports.ɵNoopAnimationEngine = NoopAnimationEngine;
exports.ɵWebAnimationsDriver = WebAnimationsDriver;
exports.ɵsupportsWebAnimations = supportsWebAnimations;
exports.ɵWebAnimationsPlayer = WebAnimationsPlayer;
Object.defineProperty(exports, "__esModule", {
value: true
});
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(147)) : typeof define === "function" && define.amd ? define([ "exports", "@angular/animations" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.animations = global.ng.animations || {}, global.ng.animations.browser = global.ng.animations.browser || {}, 
global.ng.animations.browser.testing = global.ng.animations.browser.testing || {}), global.ng.animations);
})(this, function(exports, _angular_animations) {
"use strict";
var __extends = undefined && undefined.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MockAnimationDriver = function() {
function MockAnimationDriver() {}
MockAnimationDriver.prototype.animate = function(element, keyframes, duration, delay, easing, previousPlayers) {
if (previousPlayers === void 0) {
previousPlayers = [];
}
var player = new MockAnimationPlayer(element, keyframes, duration, delay, easing, previousPlayers);
MockAnimationDriver.log.push(player);
return player;
};
return MockAnimationDriver;
}();
MockAnimationDriver.log = [];
var MockAnimationPlayer = function(_super) {
__extends(MockAnimationPlayer, _super);
function MockAnimationPlayer(element, keyframes, duration, delay, easing, previousPlayers) {
var _this = _super.call(this) || this;
_this.element = element;
_this.keyframes = keyframes;
_this.duration = duration;
_this.delay = delay;
_this.easing = easing;
_this.previousPlayers = previousPlayers;
_this.__finished = false;
_this.previousStyles = {};
_this._onInitFns = [];
previousPlayers.forEach(function(player) {
if (player instanceof MockAnimationPlayer) {
var styles_1 = player._captureStyles();
Object.keys(styles_1).forEach(function(prop) {
_this.previousStyles[prop] = styles_1[prop];
});
}
});
return _this;
}
MockAnimationPlayer.prototype.onInit = function(fn) {
this._onInitFns.push(fn);
};
MockAnimationPlayer.prototype.init = function() {
_super.prototype.init.call(this);
this._onInitFns.forEach(function(fn) {
return fn();
});
this._onInitFns = [];
};
MockAnimationPlayer.prototype.finish = function() {
_super.prototype.finish.call(this);
this.__finished = true;
};
MockAnimationPlayer.prototype.destroy = function() {
_super.prototype.destroy.call(this);
this.__finished = true;
};
MockAnimationPlayer.prototype._captureStyles = function() {
var _this = this;
var captures = {};
Object.keys(this.previousStyles).forEach(function(prop) {
captures[prop] = _this.previousStyles[prop];
});
if (this.hasStarted()) {
this.keyframes.forEach(function(kf) {
Object.keys(kf).forEach(function(prop) {
if (prop != "offset") {
captures[prop] = _this.__finished ? kf[prop] : _angular_animations.AUTO_STYLE;
}
});
});
}
return captures;
};
return MockAnimationPlayer;
}(_angular_animations.NoopAnimationPlayer);
exports.MockAnimationDriver = MockAnimationDriver;
exports.MockAnimationPlayer = MockAnimationPlayer;
Object.defineProperty(exports, "__esModule", {
value: true
});
});
}, function(module, exports, __webpack_require__) {
!function(global, factory) {
true ? factory(exports, __webpack_require__(147)) : "function" == typeof define && define.amd ? define([ "exports", "@angular/animations" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.animations = global.ng.animations || {}, global.ng.animations.browser = global.ng.animations.browser || {}, 
global.ng.animations.browser.testing = global.ng.animations.browser.testing || {}), global.ng.animations);
}(this, function(exports, _angular_animations) {
"use strict";
var __extends = function(d, b) {
function __() {
this.constructor = d;
}
for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
}, MockAnimationDriver = function() {
function MockAnimationDriver() {}
return MockAnimationDriver.prototype.animate = function(element, keyframes, duration, delay, easing, previousPlayers) {
void 0 === previousPlayers && (previousPlayers = []);
var player = new MockAnimationPlayer(element, keyframes, duration, delay, easing, previousPlayers);
return MockAnimationDriver.log.push(player), player;
}, MockAnimationDriver;
}();
MockAnimationDriver.log = [];
var MockAnimationPlayer = function(_super) {
function MockAnimationPlayer(element, keyframes, duration, delay, easing, previousPlayers) {
var _this = _super.call(this) || this;
return _this.element = element, _this.keyframes = keyframes, _this.duration = duration, 
_this.delay = delay, _this.easing = easing, _this.previousPlayers = previousPlayers, 
_this.__finished = !1, _this.previousStyles = {}, _this._onInitFns = [], previousPlayers.forEach(function(player) {
if (player instanceof MockAnimationPlayer) {
var styles_1 = player._captureStyles();
Object.keys(styles_1).forEach(function(prop) {
_this.previousStyles[prop] = styles_1[prop];
});
}
}), _this;
}
return __extends(MockAnimationPlayer, _super), MockAnimationPlayer.prototype.onInit = function(fn) {
this._onInitFns.push(fn);
}, MockAnimationPlayer.prototype.init = function() {
_super.prototype.init.call(this), this._onInitFns.forEach(function(fn) {
return fn();
}), this._onInitFns = [];
}, MockAnimationPlayer.prototype.finish = function() {
_super.prototype.finish.call(this), this.__finished = !0;
}, MockAnimationPlayer.prototype.destroy = function() {
_super.prototype.destroy.call(this), this.__finished = !0;
}, MockAnimationPlayer.prototype._captureStyles = function() {
var _this = this, captures = {};
return Object.keys(this.previousStyles).forEach(function(prop) {
captures[prop] = _this.previousStyles[prop];
}), this.hasStarted() && this.keyframes.forEach(function(kf) {
Object.keys(kf).forEach(function(prop) {
"offset" != prop && (captures[prop] = _this.__finished ? kf[prop] : _angular_animations.AUTO_STYLE);
});
}), captures;
}, MockAnimationPlayer;
}(_angular_animations.NoopAnimationPlayer);
exports.MockAnimationDriver = MockAnimationDriver, exports.MockAnimationPlayer = MockAnimationPlayer, 
Object.defineProperty(exports, "__esModule", {
value: !0
});
});
}, function(module, exports, __webpack_require__) {
!function(global, factory) {
true ? factory(exports, __webpack_require__(147)) : "function" == typeof define && define.amd ? define([ "exports", "@angular/animations" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.animations = global.ng.animations || {}, global.ng.animations.browser = global.ng.animations.browser || {}), global.ng.animations);
}(this, function(exports, _angular_animations) {
"use strict";
function parseTimeExpression(exp, errors) {
var duration, regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i, delay = 0, easing = null;
if ("string" == typeof exp) {
var matches = exp.match(regex);
if (null === matches) return errors.push('The provided timing value "' + exp + '" is invalid.'), 
{
duration: 0,
delay: 0,
easing: null
};
var durationMatch = parseFloat(matches[1]), durationUnit = matches[2];
"s" == durationUnit && (durationMatch *= ONE_SECOND), duration = Math.floor(durationMatch);
var delayMatch = matches[3], delayUnit = matches[4];
if (null != delayMatch) {
var delayVal = parseFloat(delayMatch);
null != delayUnit && "s" == delayUnit && (delayVal *= ONE_SECOND), delay = Math.floor(delayVal);
}
var easingVal = matches[5];
easingVal && (easing = easingVal);
} else duration = exp;
return {
duration: duration,
delay: delay,
easing: easing
};
}
function normalizeStyles(styles) {
var normalizedStyles = {};
return Array.isArray(styles) ? styles.forEach(function(data) {
return copyStyles(data, !1, normalizedStyles);
}) : copyStyles(styles, !1, normalizedStyles), normalizedStyles;
}
function copyStyles(styles, readPrototype, destination) {
if (void 0 === destination && (destination = {}), readPrototype) for (var prop in styles) destination[prop] = styles[prop]; else Object.keys(styles).forEach(function(prop) {
return destination[prop] = styles[prop];
});
return destination;
}
function setStyles(element, styles) {
element.style && Object.keys(styles).forEach(function(prop) {
return element.style[prop] = styles[prop];
});
}
function eraseStyles(element, styles) {
element.style && Object.keys(styles).forEach(function(prop) {
element.style[prop] = "";
});
}
function visitAnimationNode(visitor, node, context) {
switch (node.type) {
case 0:
return visitor.visitState(node, context);

case 1:
return visitor.visitTransition(node, context);

case 2:
return visitor.visitSequence(node, context);

case 3:
return visitor.visitGroup(node, context);

case 4:
return visitor.visitAnimate(node, context);

case 5:
return visitor.visitKeyframeSequence(node, context);

case 6:
return visitor.visitStyle(node, context);

default:
throw new Error("Unable to resolve animation metadata node #" + node.type);
}
}
function parseTransitionExpr(transitionValue, errors) {
var expressions = [];
return "string" == typeof transitionValue ? transitionValue.split(/\s*,\s*/).forEach(function(str) {
return parseInnerTransitionStr(str, expressions, errors);
}) : expressions.push(transitionValue), expressions;
}
function parseInnerTransitionStr(eventStr, expressions, errors) {
":" == eventStr[0] && (eventStr = parseAnimationAlias(eventStr, errors));
var match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
if (null == match || match.length < 4) return errors.push('The provided transition expression "' + eventStr + '" is not supported'), 
expressions;
var fromState = match[1], separator = match[2], toState = match[3];
expressions.push(makeLambdaFromStates(fromState, toState));
var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
"<" != separator[0] || isFullAnyStateExpr || expressions.push(makeLambdaFromStates(toState, fromState));
}
function parseAnimationAlias(alias, errors) {
switch (alias) {
case ":enter":
return "void => *";

case ":leave":
return "* => void";

default:
return errors.push('The transition alias value "' + alias + '" is not supported'), 
"* => *";
}
}
function makeLambdaFromStates(lhs, rhs) {
return function(fromState, toState) {
var lhsMatch = lhs == ANY_STATE || lhs == fromState, rhsMatch = rhs == ANY_STATE || rhs == toState;
return lhsMatch && rhsMatch;
};
}
function createTimelineInstruction(keyframes, duration, delay, easing) {
return {
type: 1,
keyframes: keyframes,
duration: duration,
delay: delay,
totalTime: duration + delay,
easing: easing
};
}
function buildAnimationKeyframes(ast, startingStyles, finalStyles) {
void 0 === startingStyles && (startingStyles = {}), void 0 === finalStyles && (finalStyles = {});
var normalizedAst = Array.isArray(ast) ? _angular_animations.sequence(ast) : ast;
return new AnimationTimelineVisitor().buildKeyframes(normalizedAst, startingStyles, finalStyles);
}
function getOffset(ast) {
var offset = ast.offset;
if (null == offset) {
var styles = ast.styles;
if (Array.isArray(styles)) for (var i = 0; i < styles.length; i++) {
var o = styles[i].offset;
if (null != o) {
offset = o;
break;
}
} else offset = styles.offset;
}
return offset;
}
function createTransitionInstruction(triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines) {
return {
type: 0,
triggerName: triggerName,
isRemovalTransition: isRemovalTransition,
fromState: fromState,
fromStyles: fromStyles,
toState: toState,
toStyles: toStyles,
timelines: timelines
};
}
function oneOrMoreTransitionsMatch(matchFns, currentState, nextState) {
return matchFns.some(function(fn) {
return fn(currentState, nextState);
});
}
function validateAnimationSequence(ast) {
var normalizedAst = Array.isArray(ast) ? _angular_animations.sequence(ast) : ast;
return new AnimationValidatorVisitor().validate(normalizedAst);
}
function buildTrigger(name, definitions) {
return new AnimationTriggerVisitor().buildTrigger(name, definitions);
}
function getOrSetAsInMap(map, key, defaultValue) {
var value = map.get(key);
return value || map.set(key, value = defaultValue), value;
}
function deleteFromArrayMap(map, key, value) {
var arr = map.get(key);
if (arr) {
var index = arr.indexOf(value);
index >= 0 && (arr.splice(index, 1), 0 == arr.length && map.delete(key));
}
}
function optimizeGroupPlayer(players) {
switch (players.length) {
case 0:
return new _angular_animations.NoopAnimationPlayer();

case 1:
return players[0];

default:
return new _angular_animations.ɵAnimationGroupPlayer(players);
}
}
function copyArray(source) {
return source ? source.splice(0) : [];
}
function validatePlayerEvent(triggerName, eventName) {
switch (eventName) {
case "start":
case "done":
return;

default:
throw new Error('The provided animation trigger event "' + eventName + '" for the animation trigger "' + triggerName + '" is not supported!');
}
}
function listenOnPlayer(player, eventName, baseEvent, callback) {
switch (eventName) {
case "start":
player.onStart(function() {
var event = copyAnimationEvent(baseEvent);
event.phaseName = "start", callback(event);
});
break;

case "done":
player.onDone(function() {
var event = copyAnimationEvent(baseEvent);
event.phaseName = "done", callback(event);
});
}
}
function copyAnimationEvent(e) {
return makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, e.phaseName, e.totalTime);
}
function makeAnimationEvent(element, triggerName, fromState, toState, phaseName, totalTime) {
return {
element: element,
triggerName: triggerName,
fromState: fromState,
toState: toState,
phaseName: phaseName,
totalTime: totalTime
};
}
function normalizeTriggerValue(value) {
switch (typeof value) {
case "boolean":
return value ? "1" : "0";

default:
return value ? value.toString() : null;
}
}
function makeBooleanMap(keys) {
var map = {};
return keys.forEach(function(key) {
return map[key] = !0;
}), map;
}
function dashCaseToCamelCase(input) {
return input.replace(DASH_CASE_REGEXP, function() {
for (var m = [], _i = 0; _i < arguments.length; _i++) m[_i] = arguments[_i];
return m[1].toUpperCase();
});
}
function makeAnimationEvent$1(element, triggerName, fromState, toState, phaseName, totalTime) {
return {
element: element,
triggerName: triggerName,
fromState: fromState,
toState: toState,
phaseName: phaseName,
totalTime: totalTime
};
}
function makeStorageProp(property) {
return "_@_" + property;
}
function _computeStyle(element, prop) {
return window.getComputedStyle(element)[prop];
}
function _copyKeyframeStyles(styles) {
var newStyles = {};
return Object.keys(styles).forEach(function(prop) {
"offset" != prop && (newStyles[prop] = styles[prop]);
}), newStyles;
}
function supportsWebAnimations() {
return "undefined" != typeof Element && "function" == typeof Element.prototype.animate;
}
var __extends = function(d, b) {
function __() {
this.constructor = d;
}
for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
}, NoopAnimationDriver = function() {
function NoopAnimationDriver() {}
return NoopAnimationDriver.prototype.animate = function(element, keyframes, duration, delay, easing, previousPlayers) {
return void 0 === previousPlayers && (previousPlayers = []), new _angular_animations.NoopAnimationPlayer();
}, NoopAnimationDriver;
}(), AnimationDriver = function() {
function AnimationDriver() {}
return AnimationDriver;
}();
AnimationDriver.NOOP = new NoopAnimationDriver();
var AnimationEngine = function() {
function AnimationEngine() {}
return AnimationEngine.prototype.registerTrigger = function(trigger, name) {}, AnimationEngine.prototype.onInsert = function(element, domFn) {}, 
AnimationEngine.prototype.onRemove = function(element, domFn) {}, AnimationEngine.prototype.setProperty = function(element, property, value) {}, 
AnimationEngine.prototype.listen = function(element, eventName, eventPhase, callback) {}, 
AnimationEngine.prototype.flush = function() {}, Object.defineProperty(AnimationEngine.prototype, "activePlayers", {
get: function() {
throw new Error("...");
},
enumerable: !0,
configurable: !0
}), Object.defineProperty(AnimationEngine.prototype, "queuedPlayers", {
get: function() {
throw new Error("...");
},
enumerable: !0,
configurable: !0
}), AnimationEngine;
}(), ONE_SECOND = 1e3, ANY_STATE = "*", AnimationTimelineContext = function() {
function AnimationTimelineContext(errors, timelines, initialTimeline) {
this.errors = errors, this.timelines = timelines, this.previousNode = {}, this.subContextCount = 0, 
this.currentTimeline = initialTimeline || new TimelineBuilder(0), timelines.push(this.currentTimeline);
}
return AnimationTimelineContext.prototype.createSubContext = function() {
var context = new AnimationTimelineContext(this.errors, this.timelines, this.currentTimeline.fork());
return context.previousNode = this.previousNode, context.currentAnimateTimings = this.currentAnimateTimings, 
this.subContextCount++, context;
}, AnimationTimelineContext.prototype.transformIntoNewTimeline = function(newTime) {
return void 0 === newTime && (newTime = 0), this.currentTimeline = this.currentTimeline.fork(newTime), 
this.timelines.push(this.currentTimeline), this.currentTimeline;
}, AnimationTimelineContext.prototype.incrementTime = function(time) {
this.currentTimeline.forwardTime(this.currentTimeline.duration + time);
}, AnimationTimelineContext;
}(), AnimationTimelineVisitor = function() {
function AnimationTimelineVisitor() {}
return AnimationTimelineVisitor.prototype.buildKeyframes = function(ast, startingStyles, finalStyles) {
var context = new AnimationTimelineContext([], []);
context.currentTimeline.setStyles(startingStyles), visitAnimationNode(this, ast, context);
var timelines = context.timelines.filter(function(timeline) {
return timeline.hasStyling();
});
if (timelines.length && Object.keys(finalStyles).length) {
var tl = timelines[timelines.length - 1];
tl.allowOnlyTimelineStyles() || tl.setStyles(finalStyles);
}
return timelines.length ? timelines.map(function(timeline) {
return timeline.buildKeyframes();
}) : [ createTimelineInstruction([], 0, 0, "") ];
}, AnimationTimelineVisitor.prototype.visitState = function(ast, context) {}, AnimationTimelineVisitor.prototype.visitTransition = function(ast, context) {}, 
AnimationTimelineVisitor.prototype.visitSequence = function(ast, context) {
var _this = this, subContextCount = context.subContextCount;
6 == context.previousNode.type && (context.currentTimeline.forwardFrame(), context.currentTimeline.snapshotCurrentStyles()), 
ast.steps.forEach(function(s) {
return visitAnimationNode(_this, s, context);
}), context.subContextCount > subContextCount && context.transformIntoNewTimeline(), 
context.previousNode = ast;
}, AnimationTimelineVisitor.prototype.visitGroup = function(ast, context) {
var _this = this, innerTimelines = [], furthestTime = context.currentTimeline.currentTime;
ast.steps.forEach(function(s) {
var innerContext = context.createSubContext();
visitAnimationNode(_this, s, innerContext), furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime), 
innerTimelines.push(innerContext.currentTimeline);
}), innerTimelines.forEach(function(timeline) {
return context.currentTimeline.mergeTimelineCollectedStyles(timeline);
}), context.transformIntoNewTimeline(furthestTime), context.previousNode = ast;
}, AnimationTimelineVisitor.prototype.visitAnimate = function(ast, context) {
var timings = ast.timings.hasOwnProperty("duration") ? ast.timings : parseTimeExpression(ast.timings, context.errors);
context.currentAnimateTimings = timings, timings.delay && (context.incrementTime(timings.delay), 
context.currentTimeline.snapshotCurrentStyles());
var astType = ast.styles ? ast.styles.type : -1;
if (5 == astType) this.visitKeyframeSequence(ast.styles, context); else {
var styleAst = ast.styles;
if (!styleAst) {
var newStyleData = {};
timings.easing && (newStyleData.easing = timings.easing), styleAst = _angular_animations.style(newStyleData), 
styleAst.treatAsEmptyStep = !0;
}
context.incrementTime(timings.duration), styleAst && this.visitStyle(styleAst, context);
}
context.currentAnimateTimings = null, context.previousNode = ast;
}, AnimationTimelineVisitor.prototype.visitStyle = function(ast, context) {
context.currentAnimateTimings || 4 != context.previousNode.type || context.currentTimeline.forwardFrame();
var normalizedStyles = normalizeStyles(ast.styles), easing = context.currentAnimateTimings && context.currentAnimateTimings.easing;
this._applyStyles(normalizedStyles, easing, !!ast.treatAsEmptyStep, context), context.previousNode = ast;
}, AnimationTimelineVisitor.prototype._applyStyles = function(styles, easing, treatAsEmptyStep, context) {
styles.hasOwnProperty("easing") && (easing = easing || styles.easing, delete styles.easing), 
context.currentTimeline.setStyles(styles, easing, treatAsEmptyStep);
}, AnimationTimelineVisitor.prototype.visitKeyframeSequence = function(ast, context) {
var _this = this, MAX_KEYFRAME_OFFSET = 1, limit = ast.steps.length - 1, firstKeyframe = ast.steps[0], offsetGap = 0, containsOffsets = null != getOffset(firstKeyframe);
containsOffsets || (offsetGap = MAX_KEYFRAME_OFFSET / limit);
var startTime = context.currentTimeline.duration, duration = context.currentAnimateTimings.duration, innerContext = context.createSubContext(), innerTimeline = innerContext.currentTimeline;
innerTimeline.easing = context.currentAnimateTimings.easing, ast.steps.forEach(function(step, i) {
var normalizedStyles = normalizeStyles(step.styles), offset = containsOffsets ? null != step.offset ? step.offset : parseFloat(normalizedStyles.offset) : i == limit ? MAX_KEYFRAME_OFFSET : i * offsetGap;
innerTimeline.forwardTime(offset * duration), _this._applyStyles(normalizedStyles, null, !1, innerContext);
}), context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline), context.transformIntoNewTimeline(startTime + duration), 
context.previousNode = ast;
}, AnimationTimelineVisitor;
}(), TimelineBuilder = function() {
function TimelineBuilder(startTime, globalTimelineStyles) {
this.startTime = startTime, this.duration = 0, this.easing = "", this._previousKeyframe = {}, 
this._keyframes = new Map(), this._styleSummary = {}, this._backFill = {}, this._currentEmptyStepKeyframe = null, 
this._localTimelineStyles = Object.create(this._backFill, {}), this._globalTimelineStyles = globalTimelineStyles ? globalTimelineStyles : this._localTimelineStyles, 
this._loadKeyframe();
}
return TimelineBuilder.prototype.hasStyling = function() {
return this._keyframes.size > 1;
}, Object.defineProperty(TimelineBuilder.prototype, "currentTime", {
get: function() {
return this.startTime + this.duration;
},
enumerable: !0,
configurable: !0
}), TimelineBuilder.prototype.fork = function(currentTime) {
return void 0 === currentTime && (currentTime = 0), new TimelineBuilder(currentTime || this.currentTime, this._globalTimelineStyles);
}, TimelineBuilder.prototype._loadKeyframe = function() {
this._currentKeyframe && (this._previousKeyframe = this._currentKeyframe), this._currentKeyframe = this._keyframes.get(this.duration), 
this._currentKeyframe || (this._currentKeyframe = Object.create(this._backFill, {}), 
this._keyframes.set(this.duration, this._currentKeyframe));
}, TimelineBuilder.prototype.forwardFrame = function() {
this.duration++, this._loadKeyframe();
}, TimelineBuilder.prototype.forwardTime = function(time) {
this.duration = time, this._loadKeyframe();
}, TimelineBuilder.prototype._updateStyle = function(prop, value) {
this._localTimelineStyles[prop] = value, this._globalTimelineStyles[prop] = value, 
this._styleSummary[prop] = {
time: this.currentTime,
value: value
};
}, TimelineBuilder.prototype.allowOnlyTimelineStyles = function() {
return this._currentEmptyStepKeyframe !== this._currentKeyframe;
}, TimelineBuilder.prototype.setStyles = function(styles, easing, treatAsEmptyStep) {
var _this = this;
void 0 === easing && (easing = null), void 0 === treatAsEmptyStep && (treatAsEmptyStep = !1), 
easing && (this._previousKeyframe.easing = easing), treatAsEmptyStep ? (Object.keys(this._globalTimelineStyles).forEach(function(prop) {
_this._backFill[prop] = _this._globalTimelineStyles[prop] || _angular_animations.AUTO_STYLE, 
_this._currentKeyframe[prop] = _angular_animations.AUTO_STYLE;
}), this._currentEmptyStepKeyframe = this._currentKeyframe) : (Object.keys(styles).forEach(function(prop) {
if ("offset" !== prop) {
var val = styles[prop];
_this._currentKeyframe[prop] = val, _this._localTimelineStyles[prop] || (_this._backFill[prop] = _this._globalTimelineStyles[prop] || _angular_animations.AUTO_STYLE), 
_this._updateStyle(prop, val);
}
}), Object.keys(this._localTimelineStyles).forEach(function(prop) {
_this._currentKeyframe.hasOwnProperty(prop) || (_this._currentKeyframe[prop] = _this._localTimelineStyles[prop]);
}));
}, TimelineBuilder.prototype.snapshotCurrentStyles = function() {
copyStyles(this._localTimelineStyles, !1, this._currentKeyframe);
}, TimelineBuilder.prototype.getFinalKeyframe = function() {
return this._keyframes.get(this.duration);
}, Object.defineProperty(TimelineBuilder.prototype, "properties", {
get: function() {
var properties = [];
for (var prop in this._currentKeyframe) properties.push(prop);
return properties;
},
enumerable: !0,
configurable: !0
}), TimelineBuilder.prototype.mergeTimelineCollectedStyles = function(timeline) {
var _this = this;
Object.keys(timeline._styleSummary).forEach(function(prop) {
var details0 = _this._styleSummary[prop], details1 = timeline._styleSummary[prop];
(!details0 || details1.time > details0.time) && _this._updateStyle(prop, details1.value);
});
}, TimelineBuilder.prototype.buildKeyframes = function() {
var _this = this, finalKeyframes = [];
if (0 == this.duration) {
var targetKeyframe = this.getFinalKeyframe(), firstKeyframe = copyStyles(targetKeyframe, !0);
firstKeyframe.offset = 0, finalKeyframes.push(firstKeyframe);
var lastKeyframe = copyStyles(targetKeyframe, !0);
lastKeyframe.offset = 1, finalKeyframes.push(lastKeyframe);
} else this._keyframes.forEach(function(keyframe, time) {
var finalKeyframe = copyStyles(keyframe, !0);
finalKeyframe.offset = time / _this.duration, finalKeyframes.push(finalKeyframe);
});
return createTimelineInstruction(finalKeyframes, this.duration, this.startTime, this.easing);
}, TimelineBuilder;
}(), AnimationTransitionFactory = function() {
function AnimationTransitionFactory(_triggerName, ast, matchFns, _stateStyles) {
this._triggerName = _triggerName, this.matchFns = matchFns, this._stateStyles = _stateStyles;
var normalizedAst = Array.isArray(ast.animation) ? _angular_animations.sequence(ast.animation) : ast.animation;
this._animationAst = normalizedAst;
}
return AnimationTransitionFactory.prototype.match = function(currentState, nextState) {
if (oneOrMoreTransitionsMatch(this.matchFns, currentState, nextState)) {
var backupStateStyles = this._stateStyles["*"] || {}, currentStateStyles = this._stateStyles[currentState] || backupStateStyles, nextStateStyles = this._stateStyles[nextState] || backupStateStyles, timelines = buildAnimationKeyframes(this._animationAst, currentStateStyles, nextStateStyles);
return createTransitionInstruction(this._triggerName, currentState, nextState, "void" === nextState, currentStateStyles, nextStateStyles, timelines);
}
}, AnimationTransitionFactory;
}(), AnimationValidatorVisitor = function() {
function AnimationValidatorVisitor() {}
return AnimationValidatorVisitor.prototype.validate = function(ast) {
var context = new AnimationValidatorContext();
return visitAnimationNode(this, ast, context), context.errors;
}, AnimationValidatorVisitor.prototype.visitState = function(ast, context) {}, AnimationValidatorVisitor.prototype.visitTransition = function(ast, context) {}, 
AnimationValidatorVisitor.prototype.visitSequence = function(ast, context) {
var _this = this;
ast.steps.forEach(function(step) {
return visitAnimationNode(_this, step, context);
});
}, AnimationValidatorVisitor.prototype.visitGroup = function(ast, context) {
var _this = this, currentTime = context.currentTime, furthestTime = 0;
ast.steps.forEach(function(step) {
context.currentTime = currentTime, visitAnimationNode(_this, step, context), furthestTime = Math.max(furthestTime, context.currentTime);
}), context.currentTime = furthestTime;
}, AnimationValidatorVisitor.prototype.visitAnimate = function(ast, context) {
context.currentAnimateTimings = ast.timings = parseTimeExpression(ast.timings, context.errors);
var astType = ast.styles && ast.styles.type;
5 == astType ? this.visitKeyframeSequence(ast.styles, context) : (context.currentTime += context.currentAnimateTimings.duration + context.currentAnimateTimings.delay, 
6 == astType && this.visitStyle(ast.styles, context)), context.currentAnimateTimings = null;
}, AnimationValidatorVisitor.prototype.visitStyle = function(ast, context) {
var styleData = normalizeStyles(ast.styles), timings = context.currentAnimateTimings, endTime = context.currentTime, startTime = context.currentTime;
timings && startTime > 0 && (startTime -= timings.duration + timings.delay), Object.keys(styleData).forEach(function(prop) {
var collectedEntry = context.collectedStyles[prop], updateCollectedStyle = !0;
collectedEntry && (startTime != endTime && startTime >= collectedEntry.startTime && endTime <= collectedEntry.endTime && (context.errors.push('The CSS property "' + prop + '" that exists between the times of "' + collectedEntry.startTime + 'ms" and "' + collectedEntry.endTime + 'ms" is also being animated in a parallel animation between the times of "' + startTime + 'ms" and "' + endTime + 'ms"'), 
updateCollectedStyle = !1), startTime = collectedEntry.startTime), updateCollectedStyle && (context.collectedStyles[prop] = {
startTime: startTime,
endTime: endTime
});
});
}, AnimationValidatorVisitor.prototype.visitKeyframeSequence = function(ast, context) {
var _this = this, totalKeyframesWithOffsets = 0, offsets = [], offsetsOutOfOrder = !1, keyframesOutOfRange = !1, previousOffset = 0;
ast.steps.forEach(function(step) {
var styleData = normalizeStyles(step.styles), offset = 0;
styleData.hasOwnProperty("offset") && (totalKeyframesWithOffsets++, offset = styleData.offset), 
keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1, offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset, 
previousOffset = offset, offsets.push(offset);
}), keyframesOutOfRange && context.errors.push("Please ensure that all keyframe offsets are between 0 and 1"), 
offsetsOutOfOrder && context.errors.push("Please ensure that all keyframe offsets are in order");
var length = ast.steps.length, generatedOffset = 0;
totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length ? context.errors.push("Not all style() steps within the declared keyframes() contain offsets") : 0 == totalKeyframesWithOffsets && (generatedOffset = 1 / length);
var limit = length - 1, currentTime = context.currentTime, animateDuration = context.currentAnimateTimings.duration;
ast.steps.forEach(function(step, i) {
var offset = generatedOffset > 0 ? i == limit ? 1 : generatedOffset * i : offsets[i], durationUpToThisFrame = offset * animateDuration;
context.currentTime = currentTime + context.currentAnimateTimings.delay + durationUpToThisFrame, 
context.currentAnimateTimings.duration = durationUpToThisFrame, _this.visitStyle(step, context);
});
}, AnimationValidatorVisitor;
}(), AnimationValidatorContext = function() {
function AnimationValidatorContext() {
this.errors = [], this.currentTime = 0, this.collectedStyles = {};
}
return AnimationValidatorContext;
}(), AnimationTrigger = function() {
function AnimationTrigger(name, states, _transitionAsts) {
var _this = this;
this.name = name, this._transitionAsts = _transitionAsts, this.transitionFactories = [], 
this.states = {}, Object.keys(states).forEach(function(stateName) {
_this.states[stateName] = copyStyles(states[stateName], !1);
});
var errors = [];
if (_transitionAsts.forEach(function(ast) {
var exprs = parseTransitionExpr(ast.expr, errors), sequenceErrors = validateAnimationSequence(ast);
sequenceErrors.length ? errors.push.apply(errors, sequenceErrors) : _this.transitionFactories.push(new AnimationTransitionFactory(_this.name, ast, exprs, states));
}), errors.length) {
var LINE_START = "\n - ";
throw new Error("Animation parsing for the " + name + " trigger have failed:" + LINE_START + errors.join(LINE_START));
}
}
return AnimationTrigger.prototype.createFallbackInstruction = function(currentState, nextState) {
var backupStateStyles = this.states["*"] || {}, currentStateStyles = this.states[currentState] || backupStateStyles, nextStateStyles = this.states[nextState] || backupStateStyles;
return createTransitionInstruction(this.name, currentState, nextState, "void" == nextState, currentStateStyles, nextStateStyles, []);
}, AnimationTrigger.prototype.matchTransition = function(currentState, nextState) {
for (var i = 0; i < this.transitionFactories.length; i++) {
var result = this.transitionFactories[i].match(currentState, nextState);
if (result) return result;
}
return null;
}, AnimationTrigger;
}(), AnimationTriggerContext = function() {
function AnimationTriggerContext() {
this.errors = [], this.states = {}, this.transitions = [];
}
return AnimationTriggerContext;
}(), AnimationTriggerVisitor = function() {
function AnimationTriggerVisitor() {}
return AnimationTriggerVisitor.prototype.buildTrigger = function(name, definitions) {
var _this = this, context = new AnimationTriggerContext();
return definitions.forEach(function(def) {
return visitAnimationNode(_this, def, context);
}), new AnimationTrigger(name, context.states, context.transitions);
}, AnimationTriggerVisitor.prototype.visitState = function(ast, context) {
var styles = normalizeStyles(ast.styles.styles);
ast.name.split(/\s*,\s*/).forEach(function(name) {
context.states[name] = styles;
});
}, AnimationTriggerVisitor.prototype.visitTransition = function(ast, context) {
context.transitions.push(ast);
}, AnimationTriggerVisitor.prototype.visitSequence = function(ast, context) {}, 
AnimationTriggerVisitor.prototype.visitGroup = function(ast, context) {}, AnimationTriggerVisitor.prototype.visitAnimate = function(ast, context) {}, 
AnimationTriggerVisitor.prototype.visitStyle = function(ast, context) {}, AnimationTriggerVisitor.prototype.visitKeyframeSequence = function(ast, context) {}, 
AnimationTriggerVisitor;
}(), MARKED_FOR_ANIMATION_CLASSNAME = "ng-animating", MARKED_FOR_ANIMATION_SELECTOR = ".ng-animating", MARKED_FOR_REMOVAL = "$$ngRemove", VOID_STATE = "void", DomAnimationEngine = function() {
function DomAnimationEngine(_driver, _normalizer) {
this._driver = _driver, this._normalizer = _normalizer, this._flaggedInserts = new Set(), 
this._queuedRemovals = new Map(), this._queuedTransitionAnimations = [], this._activeTransitionAnimations = new Map(), 
this._activeElementAnimations = new Map(), this._elementTriggerStates = new Map(), 
this._triggers = Object.create(null), this._triggerListeners = new Map(), this._pendingListenerRemovals = new Map();
}
return Object.defineProperty(DomAnimationEngine.prototype, "queuedPlayers", {
get: function() {
return this._queuedTransitionAnimations.map(function(q) {
return q.player;
});
},
enumerable: !0,
configurable: !0
}), Object.defineProperty(DomAnimationEngine.prototype, "activePlayers", {
get: function() {
var players = [];
return this._activeElementAnimations.forEach(function(activePlayers) {
return players.push.apply(players, activePlayers);
}), players;
},
enumerable: !0,
configurable: !0
}), DomAnimationEngine.prototype.registerTrigger = function(trigger, name) {
name = name || trigger.name, this._triggers[name] || (this._triggers[name] = buildTrigger(name, trigger.definitions));
}, DomAnimationEngine.prototype.onInsert = function(element, domFn) {
1 == element.nodeType && this._flaggedInserts.add(element), domFn();
}, DomAnimationEngine.prototype.onRemove = function(element, domFn) {
var _this = this;
if (1 != element.nodeType) return void domFn();
var lookupRef = this._elementTriggerStates.get(element);
if (lookupRef) {
var possibleTriggers = Object.keys(lookupRef), hasRemoval = possibleTriggers.some(function(triggerName) {
var oldValue = lookupRef[triggerName], instruction = _this._triggers[triggerName].matchTransition(oldValue, VOID_STATE);
return !!instruction;
});
if (hasRemoval) return element[MARKED_FOR_REMOVAL] = !0, void this._queuedRemovals.set(element, domFn);
}
this._triggerListeners.has(element) && (element[MARKED_FOR_REMOVAL] = !0, this._queuedRemovals.set(element, function() {})), 
this._onRemovalTransition(element).forEach(function(player) {
return player.destroy();
}), domFn();
}, DomAnimationEngine.prototype.setProperty = function(element, property, value) {
var trigger = this._triggers[property];
if (!trigger) throw new Error('The provided animation trigger "' + property + '" has not been registered!');
var lookupRef = this._elementTriggerStates.get(element);
lookupRef || this._elementTriggerStates.set(element, lookupRef = {});
var oldValue = lookupRef.hasOwnProperty(property) ? lookupRef[property] : VOID_STATE;
if (oldValue !== value) {
value = normalizeTriggerValue(value);
var instruction = trigger.matchTransition(oldValue, value);
instruction || (instruction = trigger.createFallbackInstruction(oldValue, value)), 
this.animateTransition(element, instruction), lookupRef[property] = value;
}
}, DomAnimationEngine.prototype.listen = function(element, eventName, eventPhase, callback) {
var _this = this;
if (!eventPhase) throw new Error('Unable to listen on the animation trigger "' + eventName + '" because the provided event is undefined!');
if (!this._triggers[eventName]) throw new Error('Unable to listen on the animation trigger event "' + eventPhase + '" because the animation trigger "' + eventName + "\" doesn't exist!");
var elementListeners = this._triggerListeners.get(element);
elementListeners || this._triggerListeners.set(element, elementListeners = []), 
validatePlayerEvent(eventName, eventPhase);
var tuple = {
triggerName: eventName,
phase: eventPhase,
callback: callback
};
return elementListeners.push(tuple), function() {
getOrSetAsInMap(_this._pendingListenerRemovals, element, []).push(tuple);
};
}, DomAnimationEngine.prototype._clearPendingListenerRemovals = function() {
var _this = this;
this._pendingListenerRemovals.forEach(function(tuples, element) {
var elementListeners = _this._triggerListeners.get(element);
elementListeners && tuples.forEach(function(tuple) {
var index = elementListeners.indexOf(tuple);
index >= 0 && elementListeners.splice(index, 1);
});
}), this._pendingListenerRemovals.clear();
}, DomAnimationEngine.prototype._onRemovalTransition = function(element) {
for (var elms = element.querySelectorAll(MARKED_FOR_ANIMATION_SELECTOR), _loop_1 = function(i) {
var elm = elms[i], activePlayers = this_1._activeElementAnimations.get(elm);
activePlayers && activePlayers.forEach(function(player) {
return player.destroy();
});
var activeTransitions = this_1._activeTransitionAnimations.get(elm);
activeTransitions && Object.keys(activeTransitions).forEach(function(triggerName) {
var player = activeTransitions[triggerName];
player && player.destroy();
});
}, this_1 = this, i = 0; i < elms.length; i++) _loop_1(i);
return copyArray(this._activeElementAnimations.get(element));
}, DomAnimationEngine.prototype.animateTransition = function(element, instruction) {
var previousPlayers, _this = this, triggerName = instruction.triggerName;
if (instruction.isRemovalTransition) previousPlayers = this._onRemovalTransition(element); else {
previousPlayers = [];
var existingTransitions = this._activeTransitionAnimations.get(element), existingPlayer = existingTransitions ? existingTransitions[triggerName] : null;
existingPlayer && previousPlayers.push(existingPlayer);
}
eraseStyles(element, instruction.fromStyles);
var totalTime = 0, players = instruction.timelines.map(function(timelineInstruction, i) {
return totalTime = Math.max(totalTime, timelineInstruction.totalTime), _this._buildPlayer(element, timelineInstruction, previousPlayers, i);
});
previousPlayers.forEach(function(previousPlayer) {
return previousPlayer.destroy();
});
var player = optimizeGroupPlayer(players);
player.onDone(function() {
player.destroy();
var elmTransitionMap = _this._activeTransitionAnimations.get(element);
elmTransitionMap && (delete elmTransitionMap[triggerName], 0 == Object.keys(elmTransitionMap).length && _this._activeTransitionAnimations.delete(element)), 
deleteFromArrayMap(_this._activeElementAnimations, element, player), setStyles(element, instruction.toStyles);
});
var elmTransitionMap = getOrSetAsInMap(this._activeTransitionAnimations, element, {});
return elmTransitionMap[triggerName] = player, this._queuePlayer(element, triggerName, player, makeAnimationEvent(element, triggerName, instruction.fromState, instruction.toState, null, totalTime)), 
player;
}, DomAnimationEngine.prototype.animateTimeline = function(element, instructions, previousPlayers) {
var _this = this;
void 0 === previousPlayers && (previousPlayers = []);
var players = instructions.map(function(instruction, i) {
var player = _this._buildPlayer(element, instruction, previousPlayers, i);
return player.onDestroy(function() {
deleteFromArrayMap(_this._activeElementAnimations, element, player);
}), _this._markPlayerAsActive(element, player), player;
});
return optimizeGroupPlayer(players);
}, DomAnimationEngine.prototype._buildPlayer = function(element, instruction, previousPlayers, index) {
return void 0 === index && (index = 0), index && previousPlayers.length && (previousPlayers = []), 
this._driver.animate(element, this._normalizeKeyframes(instruction.keyframes), instruction.duration, instruction.delay, instruction.easing, previousPlayers);
}, DomAnimationEngine.prototype._normalizeKeyframes = function(keyframes) {
var _this = this, errors = [], normalizedKeyframes = [];
if (keyframes.forEach(function(kf) {
var normalizedKeyframe = {};
Object.keys(kf).forEach(function(prop) {
var normalizedProp = prop, normalizedValue = kf[prop];
"offset" != prop && (normalizedProp = _this._normalizer.normalizePropertyName(prop, errors), 
normalizedValue = _this._normalizer.normalizeStyleValue(prop, normalizedProp, kf[prop], errors)), 
normalizedKeyframe[normalizedProp] = normalizedValue;
}), normalizedKeyframes.push(normalizedKeyframe);
}), errors.length) {
var LINE_START = "\n - ";
throw new Error("Unable to animate due to the following errors:" + LINE_START + errors.join(LINE_START));
}
return normalizedKeyframes;
}, DomAnimationEngine.prototype._markPlayerAsActive = function(element, player) {
var elementAnimations = getOrSetAsInMap(this._activeElementAnimations, element, []);
elementAnimations.push(player);
}, DomAnimationEngine.prototype._queuePlayer = function(element, triggerName, player, event) {
var tuple = {
element: element,
player: player,
triggerName: triggerName,
event: event
};
this._queuedTransitionAnimations.push(tuple), player.init(), element.classList.add(MARKED_FOR_ANIMATION_CLASSNAME), 
player.onDone(function() {
element.classList.remove(MARKED_FOR_ANIMATION_CLASSNAME);
});
}, DomAnimationEngine.prototype._flushQueuedAnimations = function() {
var _loop_2 = function() {
for (var _a = this_2._queuedTransitionAnimations.shift(), player = _a.player, element = _a.element, triggerName = _a.triggerName, event = _a.event, parent = element; parent = parent.parentNode; ) if (parent[MARKED_FOR_REMOVAL]) return "continue-parentLoop";
var listeners = this_2._triggerListeners.get(element);
return listeners && listeners.forEach(function(tuple) {
tuple.triggerName == triggerName && listenOnPlayer(player, tuple.phase, event, tuple.callback);
}), this_2._queuedRemovals.has(element) ? (player.destroy(), "continue") : (this_2._markPlayerAsActive(element, player), 
player.init(), void (player.hasStarted() || player.play()));
}, this_2 = this;
parentLoop: for (;this._queuedTransitionAnimations.length; ) {
var state_1 = _loop_2();
switch (state_1) {
case "continue-parentLoop":
continue parentLoop;
}
}
}, DomAnimationEngine.prototype.flush = function() {
var _this = this, leaveListeners = new Map();
this._queuedRemovals.forEach(function(callback, element) {
var tuple = _this._pendingListenerRemovals.get(element);
tuple && (leaveListeners.set(element, tuple), _this._pendingListenerRemovals.delete(element));
}), this._clearPendingListenerRemovals(), this._pendingListenerRemovals = leaveListeners, 
this._flushQueuedAnimations();
var flushAgain = !1;
this._queuedRemovals.forEach(function(callback, element) {
if (!_this._flaggedInserts.has(element)) {
for (var parent = element, players = []; parent = parent.parentNode; ) {
if (parent[MARKED_FOR_REMOVAL]) return void callback();
var match = _this._activeElementAnimations.get(parent);
if (match) {
players.push.apply(players, match);
break;
}
}
if (0 == players.length) {
var stateDetails_1 = _this._elementTriggerStates.get(element);
stateDetails_1 && Object.keys(stateDetails_1).forEach(function(triggerName) {
flushAgain = !0;
var oldValue = stateDetails_1[triggerName], instruction = _this._triggers[triggerName].matchTransition(oldValue, VOID_STATE);
if (instruction) players.push(_this.animateTransition(element, instruction)); else {
var event = makeAnimationEvent(element, triggerName, oldValue, VOID_STATE, "", 0), player = new _angular_animations.NoopAnimationPlayer();
_this._queuePlayer(element, triggerName, player, event);
}
});
}
players.length ? optimizeGroupPlayer(players).onDone(callback) : callback();
}
}), this._queuedRemovals.clear(), this._flaggedInserts.clear(), flushAgain && (this._flushQueuedAnimations(), 
this._clearPendingListenerRemovals());
}, DomAnimationEngine;
}(), AnimationStyleNormalizer = function() {
function AnimationStyleNormalizer() {}
return AnimationStyleNormalizer.prototype.normalizePropertyName = function(propertyName, errors) {}, 
AnimationStyleNormalizer.prototype.normalizeStyleValue = function(userProvidedProperty, normalizedProperty, value, errors) {}, 
AnimationStyleNormalizer;
}(), NoopAnimationStyleNormalizer = function() {
function NoopAnimationStyleNormalizer() {}
return NoopAnimationStyleNormalizer.prototype.normalizePropertyName = function(propertyName, errors) {
return propertyName;
}, NoopAnimationStyleNormalizer.prototype.normalizeStyleValue = function(userProvidedProperty, normalizedProperty, value, errors) {
return value;
}, NoopAnimationStyleNormalizer;
}(), Animation = function() {
function Animation(input) {
var ast = Array.isArray(input) ? _angular_animations.sequence(input) : input, errors = validateAnimationSequence(ast);
if (errors.length) {
var errorMessage = "animation validation failed:\n" + errors.join("\n");
throw new Error(errorMessage);
}
this._animationAst = ast;
}
return Animation.prototype.buildTimelines = function(startingStyles, destinationStyles) {
var start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) : startingStyles, dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) : destinationStyles;
return buildAnimationKeyframes(this._animationAst, start, dest);
}, Animation.prototype.create = function(injector, element, startingStyles, destinationStyles) {
void 0 === startingStyles && (startingStyles = {}), void 0 === destinationStyles && (destinationStyles = {});
var instructions = this.buildTimelines(startingStyles, destinationStyles), driver = injector.get(AnimationDriver), normalizer = injector.get(AnimationStyleNormalizer), engine = new DomAnimationEngine(driver, normalizer);
return engine.animateTimeline(element, instructions);
}, Animation;
}(), WebAnimationsStyleNormalizer = function(_super) {
function WebAnimationsStyleNormalizer() {
return null !== _super && _super.apply(this, arguments) || this;
}
return __extends(WebAnimationsStyleNormalizer, _super), WebAnimationsStyleNormalizer.prototype.normalizePropertyName = function(propertyName, errors) {
return dashCaseToCamelCase(propertyName);
}, WebAnimationsStyleNormalizer.prototype.normalizeStyleValue = function(userProvidedProperty, normalizedProperty, value, errors) {
var unit = "", strVal = value.toString().trim();
if (DIMENSIONAL_PROP_MAP[normalizedProperty] && 0 !== value && "0" !== value) if ("number" == typeof value) unit = "px"; else {
var valAndSuffixMatch = value.match(/^[+-]?[\d\.]+([a-z]*)$/);
valAndSuffixMatch && 0 == valAndSuffixMatch[1].length && errors.push("Please provide a CSS unit value for " + userProvidedProperty + ":" + value);
}
return strVal + unit;
}, WebAnimationsStyleNormalizer;
}(AnimationStyleNormalizer), DIMENSIONAL_PROP_MAP = makeBooleanMap("width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent".split(",")), DASH_CASE_REGEXP = /-+([a-z0-9])/g, DEFAULT_STATE_VALUE = "void", DEFAULT_STATE_STYLES = "*", NoopAnimationEngine = function(_super) {
function NoopAnimationEngine() {
var _this = _super.apply(this, arguments) || this;
return _this._listeners = new Map(), _this._changes = [], _this._flaggedRemovals = new Set(), 
_this._onDoneFns = [], _this._triggerStyles = Object.create(null), _this;
}
return __extends(NoopAnimationEngine, _super), NoopAnimationEngine.prototype.registerTrigger = function(trigger, name) {
if (name = name || trigger.name, !this._triggerStyles[name]) {
var stateMap = {};
trigger.definitions.forEach(function(def) {
if (0 === def.type) {
var stateDef = def;
stateMap[stateDef.name] = normalizeStyles(stateDef.styles.styles);
}
}), this._triggerStyles[name] = stateMap;
}
}, NoopAnimationEngine.prototype.onInsert = function(element, domFn) {
domFn();
}, NoopAnimationEngine.prototype.onRemove = function(element, domFn) {
domFn(), 1 == element.nodeType && this._flaggedRemovals.add(element);
}, NoopAnimationEngine.prototype.setProperty = function(element, property, value) {
var storageProp = makeStorageProp(property), oldValue = element[storageProp] || DEFAULT_STATE_VALUE;
this._changes.push({
element: element,
oldValue: oldValue,
newValue: value,
triggerName: property
});
var triggerStateStyles = this._triggerStyles[property] || {}, fromStateStyles = triggerStateStyles[oldValue] || triggerStateStyles[DEFAULT_STATE_STYLES];
fromStateStyles && eraseStyles(element, fromStateStyles), element[storageProp] = value, 
this._onDoneFns.push(function() {
var toStateStyles = triggerStateStyles[value] || triggerStateStyles[DEFAULT_STATE_STYLES];
toStateStyles && setStyles(element, toStateStyles);
});
}, NoopAnimationEngine.prototype.listen = function(element, eventName, eventPhase, callback) {
var listeners = this._listeners.get(element);
listeners || this._listeners.set(element, listeners = []);
var tuple = {
triggerName: eventName,
eventPhase: eventPhase,
callback: callback
};
return listeners.push(tuple), function() {
return tuple.doRemove = !0;
};
}, NoopAnimationEngine.prototype.flush = function() {
function handleListener(listener, data) {
var phase = listener.eventPhase, event = makeAnimationEvent$1(data.element, data.triggerName, data.oldValue, data.newValue, phase, 0);
"start" == phase ? onStartCallbacks.push(function() {
return listener.callback(event);
}) : "done" == phase && onDoneCallbacks.push(function() {
return listener.callback(event);
});
}
var _this = this, onStartCallbacks = [], onDoneCallbacks = [];
this._changes.forEach(function(change) {
var element = change.element, listeners = _this._listeners.get(element);
listeners && listeners.forEach(function(listener) {
listener.triggerName == change.triggerName && handleListener(listener, change);
});
}), this._flaggedRemovals.forEach(function(element) {
var listeners = _this._listeners.get(element);
listeners && listeners.forEach(function(listener) {
var triggerName = listener.triggerName, storageProp = makeStorageProp(triggerName);
handleListener(listener, {
element: element,
triggerName: triggerName,
oldValue: element[storageProp] || DEFAULT_STATE_VALUE,
newValue: DEFAULT_STATE_VALUE
});
});
}), Array.from(this._listeners.keys()).forEach(function(element) {
var listenersToKeep = _this._listeners.get(element).filter(function(l) {
return !l.doRemove;
});
listenersToKeep.length ? _this._listeners.set(element, listenersToKeep) : _this._listeners.delete(element);
}), onStartCallbacks.forEach(function(fn) {
return fn();
}), onDoneCallbacks.forEach(function(fn) {
return fn();
}), this._flaggedRemovals.clear(), this._changes = [], this._onDoneFns.forEach(function(doneFn) {
return doneFn();
}), this._onDoneFns = [];
}, Object.defineProperty(NoopAnimationEngine.prototype, "activePlayers", {
get: function() {
return [];
},
enumerable: !0,
configurable: !0
}), Object.defineProperty(NoopAnimationEngine.prototype, "queuedPlayers", {
get: function() {
return [];
},
enumerable: !0,
configurable: !0
}), NoopAnimationEngine;
}(AnimationEngine), WebAnimationsPlayer = function() {
function WebAnimationsPlayer(element, keyframes, options, previousPlayers) {
void 0 === previousPlayers && (previousPlayers = []);
var _this = this;
this.element = element, this.keyframes = keyframes, this.options = options, this._onDoneFns = [], 
this._onStartFns = [], this._onDestroyFns = [], this._initialized = !1, this._finished = !1, 
this._started = !1, this._destroyed = !1, this.time = 0, this.parentPlayer = null, 
this._duration = options.duration, this._delay = options.delay || 0, this.time = this._duration + this._delay, 
this.previousStyles = {}, previousPlayers.forEach(function(player) {
var styles = player._captureStyles();
Object.keys(styles).forEach(function(prop) {
return _this.previousStyles[prop] = styles[prop];
});
});
}
return WebAnimationsPlayer.prototype._onFinish = function() {
this._finished || (this._finished = !0, this._onDoneFns.forEach(function(fn) {
return fn();
}), this._onDoneFns = []);
}, WebAnimationsPlayer.prototype.init = function() {
var _this = this;
if (!this._initialized) {
this._initialized = !0;
var keyframes = this.keyframes.map(function(styles) {
var formattedKeyframe = {};
return Object.keys(styles).forEach(function(prop, index) {
var value = styles[prop];
value == _angular_animations.AUTO_STYLE && (value = _computeStyle(_this.element, prop)), 
void 0 != value && (formattedKeyframe[prop] = value);
}), formattedKeyframe;
}), previousStyleProps = Object.keys(this.previousStyles);
if (previousStyleProps.length) {
var startingKeyframe_1 = keyframes[0], missingStyleProps_1 = [];
if (previousStyleProps.forEach(function(prop) {
startingKeyframe_1.hasOwnProperty(prop) || missingStyleProps_1.push(prop), startingKeyframe_1[prop] = _this.previousStyles[prop];
}), missingStyleProps_1.length) for (var self_1 = this, _loop_3 = function() {
var kf = keyframes[i];
missingStyleProps_1.forEach(function(prop) {
kf[prop] = _computeStyle(self_1.element, prop);
});
}, i = 1; i < keyframes.length; i++) _loop_3();
}
this._player = this._triggerWebAnimation(this.element, keyframes, this.options), 
this._finalKeyframe = keyframes.length ? _copyKeyframeStyles(keyframes[keyframes.length - 1]) : {}, 
this._resetDomPlayerState(), this._player.addEventListener("finish", function() {
return _this._onFinish();
});
}
}, WebAnimationsPlayer.prototype._triggerWebAnimation = function(element, keyframes, options) {
return element.animate(keyframes, options);
}, Object.defineProperty(WebAnimationsPlayer.prototype, "domPlayer", {
get: function() {
return this._player;
},
enumerable: !0,
configurable: !0
}), WebAnimationsPlayer.prototype.onStart = function(fn) {
this._onStartFns.push(fn);
}, WebAnimationsPlayer.prototype.onDone = function(fn) {
this._onDoneFns.push(fn);
}, WebAnimationsPlayer.prototype.onDestroy = function(fn) {
this._onDestroyFns.push(fn);
}, WebAnimationsPlayer.prototype.play = function() {
this.init(), this.hasStarted() || (this._onStartFns.forEach(function(fn) {
return fn();
}), this._onStartFns = [], this._started = !0), this._player.play();
}, WebAnimationsPlayer.prototype.pause = function() {
this.init(), this._player.pause();
}, WebAnimationsPlayer.prototype.finish = function() {
this.init(), this._onFinish(), this._player.finish();
}, WebAnimationsPlayer.prototype.reset = function() {
this._resetDomPlayerState(), this._destroyed = !1, this._finished = !1, this._started = !1;
}, WebAnimationsPlayer.prototype._resetDomPlayerState = function() {
this._player && this._player.cancel();
}, WebAnimationsPlayer.prototype.restart = function() {
this.reset(), this.play();
}, WebAnimationsPlayer.prototype.hasStarted = function() {
return this._started;
}, WebAnimationsPlayer.prototype.destroy = function() {
this._destroyed || (this._resetDomPlayerState(), this._onFinish(), this._destroyed = !0, 
this._onDestroyFns.forEach(function(fn) {
return fn();
}), this._onDestroyFns = []);
}, WebAnimationsPlayer.prototype.setPosition = function(p) {
this._player.currentTime = p * this.time;
}, WebAnimationsPlayer.prototype.getPosition = function() {
return this._player.currentTime / this.time;
}, WebAnimationsPlayer.prototype._captureStyles = function() {
var _this = this, styles = {};
return this.hasStarted() && Object.keys(this._finalKeyframe).forEach(function(prop) {
"offset" != prop && (styles[prop] = _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop));
}), styles;
}, WebAnimationsPlayer;
}(), WebAnimationsDriver = function() {
function WebAnimationsDriver() {}
return WebAnimationsDriver.prototype.animate = function(element, keyframes, duration, delay, easing, previousPlayers) {
void 0 === previousPlayers && (previousPlayers = []);
var playerOptions = {
duration: duration,
delay: delay,
fill: "forwards"
};
easing && (playerOptions.easing = easing);
var previousWebAnimationPlayers = previousPlayers.filter(function(player) {
return player instanceof WebAnimationsPlayer;
});
return new WebAnimationsPlayer(element, keyframes, playerOptions, previousWebAnimationPlayers);
}, WebAnimationsDriver;
}();
exports.AnimationDriver = AnimationDriver, exports.ɵAnimationEngine = AnimationEngine, 
exports.ɵAnimation = Animation, exports.ɵAnimationStyleNormalizer = AnimationStyleNormalizer, 
exports.ɵNoopAnimationStyleNormalizer = NoopAnimationStyleNormalizer, exports.ɵWebAnimationsStyleNormalizer = WebAnimationsStyleNormalizer, 
exports.ɵNoopAnimationDriver = NoopAnimationDriver, exports.ɵDomAnimationEngine = DomAnimationEngine, 
exports.ɵNoopAnimationEngine = NoopAnimationEngine, exports.ɵWebAnimationsDriver = WebAnimationsDriver, 
exports.ɵsupportsWebAnimations = supportsWebAnimations, exports.ɵWebAnimationsPlayer = WebAnimationsPlayer, 
Object.defineProperty(exports, "__esModule", {
value: !0
});
});
}, function(module, exports, __webpack_require__) {
!function(global, factory) {
true ? factory(exports) : "function" == typeof define && define.amd ? define([ "exports" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.animations = global.ng.animations || {}));
}(this, function(exports) {
"use strict";
function trigger(name, definitions) {
return {
name: name,
definitions: definitions
};
}
function animate(timings, styles) {
return void 0 === styles && (styles = null), {
type: 4,
styles: styles,
timings: timings
};
}
function group(steps) {
return {
type: 3,
steps: steps
};
}
function sequence(steps) {
return {
type: 2,
steps: steps
};
}
function style(tokens) {
return {
type: 6,
styles: tokens
};
}
function state(name, styles) {
return {
type: 0,
name: name,
styles: styles
};
}
function keyframes(steps) {
return {
type: 5,
steps: steps
};
}
function transition(stateChangeExpr, steps) {
return {
type: 1,
expr: stateChangeExpr,
animation: steps
};
}
function scheduleMicroTask(cb) {
Promise.resolve(null).then(cb);
}
var AUTO_STYLE = "*", AnimationPlayer = function() {
function AnimationPlayer() {}
return AnimationPlayer.prototype.onDone = function(fn) {}, AnimationPlayer.prototype.onStart = function(fn) {}, 
AnimationPlayer.prototype.onDestroy = function(fn) {}, AnimationPlayer.prototype.init = function() {}, 
AnimationPlayer.prototype.hasStarted = function() {}, AnimationPlayer.prototype.play = function() {}, 
AnimationPlayer.prototype.pause = function() {}, AnimationPlayer.prototype.restart = function() {}, 
AnimationPlayer.prototype.finish = function() {}, AnimationPlayer.prototype.destroy = function() {}, 
AnimationPlayer.prototype.reset = function() {}, AnimationPlayer.prototype.setPosition = function(p) {}, 
AnimationPlayer.prototype.getPosition = function() {}, Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
get: function() {
throw new Error("NOT IMPLEMENTED: Base Class");
},
set: function(player) {
throw new Error("NOT IMPLEMENTED: Base Class");
},
enumerable: !0,
configurable: !0
}), AnimationPlayer;
}(), NoopAnimationPlayer = function() {
function NoopAnimationPlayer() {
this._onDoneFns = [], this._onStartFns = [], this._onDestroyFns = [], this._started = !1, 
this._destroyed = !1, this._finished = !1, this.parentPlayer = null;
}
return NoopAnimationPlayer.prototype._onFinish = function() {
this._finished || (this._finished = !0, this._onDoneFns.forEach(function(fn) {
return fn();
}), this._onDoneFns = []);
}, NoopAnimationPlayer.prototype.onStart = function(fn) {
this._onStartFns.push(fn);
}, NoopAnimationPlayer.prototype.onDone = function(fn) {
this._onDoneFns.push(fn);
}, NoopAnimationPlayer.prototype.onDestroy = function(fn) {
this._onDestroyFns.push(fn);
}, NoopAnimationPlayer.prototype.hasStarted = function() {
return this._started;
}, NoopAnimationPlayer.prototype.init = function() {}, NoopAnimationPlayer.prototype.play = function() {
var _this = this;
this.hasStarted() || (scheduleMicroTask(function() {
return _this._onFinish();
}), this._onStart()), this._started = !0;
}, NoopAnimationPlayer.prototype._onStart = function() {
this._onStartFns.forEach(function(fn) {
return fn();
}), this._onStartFns = [];
}, NoopAnimationPlayer.prototype.pause = function() {}, NoopAnimationPlayer.prototype.restart = function() {}, 
NoopAnimationPlayer.prototype.finish = function() {
this._onFinish();
}, NoopAnimationPlayer.prototype.destroy = function() {
this._destroyed || (this._destroyed = !0, this.hasStarted() || this._onStart(), 
this.finish(), this._onDestroyFns.forEach(function(fn) {
return fn();
}), this._onDestroyFns = []);
}, NoopAnimationPlayer.prototype.reset = function() {}, NoopAnimationPlayer.prototype.setPosition = function(p) {}, 
NoopAnimationPlayer.prototype.getPosition = function() {
return 0;
}, NoopAnimationPlayer;
}(), AnimationGroupPlayer = function() {
function AnimationGroupPlayer(_players) {
var _this = this;
this._players = _players, this._onDoneFns = [], this._onStartFns = [], this._finished = !1, 
this._started = !1, this._destroyed = !1, this._onDestroyFns = [], this.parentPlayer = null;
var count = 0, total = this._players.length;
0 == total ? scheduleMicroTask(function() {
return _this._onFinish();
}) : this._players.forEach(function(player) {
player.parentPlayer = _this, player.onDone(function() {
++count >= total && _this._onFinish();
});
});
}
return AnimationGroupPlayer.prototype._onFinish = function() {
this._finished || (this._finished = !0, this._onDoneFns.forEach(function(fn) {
return fn();
}), this._onDoneFns = []);
}, AnimationGroupPlayer.prototype.init = function() {
this._players.forEach(function(player) {
return player.init();
});
}, AnimationGroupPlayer.prototype.onStart = function(fn) {
this._onStartFns.push(fn);
}, AnimationGroupPlayer.prototype.onDone = function(fn) {
this._onDoneFns.push(fn);
}, AnimationGroupPlayer.prototype.onDestroy = function(fn) {
this._onDestroyFns.push(fn);
}, AnimationGroupPlayer.prototype.hasStarted = function() {
return this._started;
}, AnimationGroupPlayer.prototype.play = function() {
this.parentPlayer || this.init(), this.hasStarted() || (this._onStartFns.forEach(function(fn) {
return fn();
}), this._onStartFns = [], this._started = !0), this._players.forEach(function(player) {
return player.play();
});
}, AnimationGroupPlayer.prototype.pause = function() {
this._players.forEach(function(player) {
return player.pause();
});
}, AnimationGroupPlayer.prototype.restart = function() {
this._players.forEach(function(player) {
return player.restart();
});
}, AnimationGroupPlayer.prototype.finish = function() {
this._onFinish(), this._players.forEach(function(player) {
return player.finish();
});
}, AnimationGroupPlayer.prototype.destroy = function() {
this._destroyed || (this._onFinish(), this._players.forEach(function(player) {
return player.destroy();
}), this._destroyed = !0, this._onDestroyFns.forEach(function(fn) {
return fn();
}), this._onDestroyFns = []);
}, AnimationGroupPlayer.prototype.reset = function() {
this._players.forEach(function(player) {
return player.reset();
}), this._destroyed = !1, this._finished = !1, this._started = !1;
}, AnimationGroupPlayer.prototype.setPosition = function(p) {
this._players.forEach(function(player) {
player.setPosition(p);
});
}, AnimationGroupPlayer.prototype.getPosition = function() {
var min = 0;
return this._players.forEach(function(player) {
var p = player.getPosition();
min = Math.min(p, min);
}), min;
}, Object.defineProperty(AnimationGroupPlayer.prototype, "players", {
get: function() {
return this._players;
},
enumerable: !0,
configurable: !0
}), AnimationGroupPlayer;
}();
exports.AUTO_STYLE = AUTO_STYLE, exports.animate = animate, exports.group = group, 
exports.keyframes = keyframes, exports.sequence = sequence, exports.state = state, 
exports.style = style, exports.transition = transition, exports.trigger = trigger, 
exports.AnimationPlayer = AnimationPlayer, exports.NoopAnimationPlayer = NoopAnimationPlayer, 
exports.ɵAnimationGroupPlayer = AnimationGroupPlayer, Object.defineProperty(exports, "__esModule", {
value: !0
});
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(92)) : typeof define === "function" && define.amd ? define([ "exports", "@angular/core" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.common = global.ng.common || {}), global.ng.core);
})(this, function(exports, _angular_core) {
"use strict";
var __extends = undefined && undefined.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var PlatformLocation = function() {
function PlatformLocation() {}
PlatformLocation.prototype.getBaseHrefFromDOM = function() {};
PlatformLocation.prototype.onPopState = function(fn) {};
PlatformLocation.prototype.onHashChange = function(fn) {};
PlatformLocation.prototype.pathname = function() {};
PlatformLocation.prototype.search = function() {};
PlatformLocation.prototype.hash = function() {};
PlatformLocation.prototype.replaceState = function(state, title, url) {};
PlatformLocation.prototype.pushState = function(state, title, url) {};
PlatformLocation.prototype.forward = function() {};
PlatformLocation.prototype.back = function() {};
return PlatformLocation;
}();
var LOCATION_INITIALIZED = new _angular_core.InjectionToken("Location Initialized");
var LocationStrategy = function() {
function LocationStrategy() {}
LocationStrategy.prototype.path = function(includeHash) {};
LocationStrategy.prototype.prepareExternalUrl = function(internal) {};
LocationStrategy.prototype.pushState = function(state, title, url, queryParams) {};
LocationStrategy.prototype.replaceState = function(state, title, url, queryParams) {};
LocationStrategy.prototype.forward = function() {};
LocationStrategy.prototype.back = function() {};
LocationStrategy.prototype.onPopState = function(fn) {};
LocationStrategy.prototype.getBaseHref = function() {};
return LocationStrategy;
}();
var APP_BASE_HREF = new _angular_core.InjectionToken("appBaseHref");
var Location = function() {
function Location(platformStrategy) {
var _this = this;
this._subject = new _angular_core.EventEmitter();
this._platformStrategy = platformStrategy;
var browserBaseHref = this._platformStrategy.getBaseHref();
this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
this._platformStrategy.onPopState(function(ev) {
_this._subject.emit({
url: _this.path(true),
pop: true,
type: ev.type
});
});
}
Location.prototype.path = function(includeHash) {
if (includeHash === void 0) {
includeHash = false;
}
return this.normalize(this._platformStrategy.path(includeHash));
};
Location.prototype.isCurrentPathEqualTo = function(path, query) {
if (query === void 0) {
query = "";
}
return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
};
Location.prototype.normalize = function(url) {
return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
};
Location.prototype.prepareExternalUrl = function(url) {
if (url && url[0] !== "/") {
url = "/" + url;
}
return this._platformStrategy.prepareExternalUrl(url);
};
Location.prototype.go = function(path, query) {
if (query === void 0) {
query = "";
}
this._platformStrategy.pushState(null, "", path, query);
};
Location.prototype.replaceState = function(path, query) {
if (query === void 0) {
query = "";
}
this._platformStrategy.replaceState(null, "", path, query);
};
Location.prototype.forward = function() {
this._platformStrategy.forward();
};
Location.prototype.back = function() {
this._platformStrategy.back();
};
Location.prototype.subscribe = function(onNext, onThrow, onReturn) {
return this._subject.subscribe({
next: onNext,
error: onThrow,
complete: onReturn
});
};
Location.normalizeQueryParams = function(params) {
return params && params[0] !== "?" ? "?" + params : params;
};
Location.joinWithSlash = function(start, end) {
if (start.length == 0) {
return end;
}
if (end.length == 0) {
return start;
}
var slashes = 0;
if (start.endsWith("/")) {
slashes++;
}
if (end.startsWith("/")) {
slashes++;
}
if (slashes == 2) {
return start + end.substring(1);
}
if (slashes == 1) {
return start + end;
}
return start + "/" + end;
};
Location.stripTrailingSlash = function(url) {
return url.replace(/\/$/, "");
};
return Location;
}();
Location.decorators = [ {
type: _angular_core.Injectable
} ];
Location.ctorParameters = function() {
return [ {
type: LocationStrategy
} ];
};
function _stripBaseHref(baseHref, url) {
return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
}
function _stripIndexHtml(url) {
return url.replace(/\/index.html$/, "");
}
var HashLocationStrategy = function(_super) {
__extends(HashLocationStrategy, _super);
function HashLocationStrategy(_platformLocation, _baseHref) {
var _this = _super.call(this) || this;
_this._platformLocation = _platformLocation;
_this._baseHref = "";
if (_baseHref != null) {
_this._baseHref = _baseHref;
}
return _this;
}
HashLocationStrategy.prototype.onPopState = function(fn) {
this._platformLocation.onPopState(fn);
this._platformLocation.onHashChange(fn);
};
HashLocationStrategy.prototype.getBaseHref = function() {
return this._baseHref;
};
HashLocationStrategy.prototype.path = function(includeHash) {
if (includeHash === void 0) {
includeHash = false;
}
var path = this._platformLocation.hash;
if (path == null) path = "#";
return path.length > 0 ? path.substring(1) : path;
};
HashLocationStrategy.prototype.prepareExternalUrl = function(internal) {
var url = Location.joinWithSlash(this._baseHref, internal);
return url.length > 0 ? "#" + url : url;
};
HashLocationStrategy.prototype.pushState = function(state, title, path, queryParams) {
var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
if (url.length == 0) {
url = this._platformLocation.pathname;
}
this._platformLocation.pushState(state, title, url);
};
HashLocationStrategy.prototype.replaceState = function(state, title, path, queryParams) {
var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
if (url.length == 0) {
url = this._platformLocation.pathname;
}
this._platformLocation.replaceState(state, title, url);
};
HashLocationStrategy.prototype.forward = function() {
this._platformLocation.forward();
};
HashLocationStrategy.prototype.back = function() {
this._platformLocation.back();
};
return HashLocationStrategy;
}(LocationStrategy);
HashLocationStrategy.decorators = [ {
type: _angular_core.Injectable
} ];
HashLocationStrategy.ctorParameters = function() {
return [ {
type: PlatformLocation
}, {
type: undefined,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Inject,
args: [ APP_BASE_HREF ]
} ]
} ];
};
var PathLocationStrategy = function(_super) {
__extends(PathLocationStrategy, _super);
function PathLocationStrategy(_platformLocation, href) {
var _this = _super.call(this) || this;
_this._platformLocation = _platformLocation;
if (href == null) {
href = _this._platformLocation.getBaseHrefFromDOM();
}
if (href == null) {
throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
}
_this._baseHref = href;
return _this;
}
PathLocationStrategy.prototype.onPopState = function(fn) {
this._platformLocation.onPopState(fn);
this._platformLocation.onHashChange(fn);
};
PathLocationStrategy.prototype.getBaseHref = function() {
return this._baseHref;
};
PathLocationStrategy.prototype.prepareExternalUrl = function(internal) {
return Location.joinWithSlash(this._baseHref, internal);
};
PathLocationStrategy.prototype.path = function(includeHash) {
if (includeHash === void 0) {
includeHash = false;
}
var pathname = this._platformLocation.pathname + Location.normalizeQueryParams(this._platformLocation.search);
var hash = this._platformLocation.hash;
return hash && includeHash ? "" + pathname + hash : pathname;
};
PathLocationStrategy.prototype.pushState = function(state, title, url, queryParams) {
var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
this._platformLocation.pushState(state, title, externalUrl);
};
PathLocationStrategy.prototype.replaceState = function(state, title, url, queryParams) {
var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
this._platformLocation.replaceState(state, title, externalUrl);
};
PathLocationStrategy.prototype.forward = function() {
this._platformLocation.forward();
};
PathLocationStrategy.prototype.back = function() {
this._platformLocation.back();
};
return PathLocationStrategy;
}(LocationStrategy);
PathLocationStrategy.decorators = [ {
type: _angular_core.Injectable
} ];
PathLocationStrategy.ctorParameters = function() {
return [ {
type: PlatformLocation
}, {
type: undefined,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Inject,
args: [ APP_BASE_HREF ]
} ]
} ];
};
var NgLocalization = function() {
function NgLocalization() {}
NgLocalization.prototype.getPluralCategory = function(value) {};
return NgLocalization;
}();
function getPluralCategory(value, cases, ngLocalization) {
var key = "=" + value;
if (cases.indexOf(key) > -1) {
return key;
}
key = ngLocalization.getPluralCategory(value);
if (cases.indexOf(key) > -1) {
return key;
}
if (cases.indexOf("other") > -1) {
return "other";
}
throw new Error('No plural message found for value "' + value + '"');
}
var NgLocaleLocalization = function(_super) {
__extends(NgLocaleLocalization, _super);
function NgLocaleLocalization(locale) {
var _this = _super.call(this) || this;
_this.locale = locale;
return _this;
}
NgLocaleLocalization.prototype.getPluralCategory = function(value) {
var plural = getPluralCase(this.locale, value);
switch (plural) {
case Plural.Zero:
return "zero";

case Plural.One:
return "one";

case Plural.Two:
return "two";

case Plural.Few:
return "few";

case Plural.Many:
return "many";

default:
return "other";
}
};
return NgLocaleLocalization;
}(NgLocalization);
NgLocaleLocalization.decorators = [ {
type: _angular_core.Injectable
} ];
NgLocaleLocalization.ctorParameters = function() {
return [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ _angular_core.LOCALE_ID ]
} ]
} ];
};
var Plural = {};
Plural.Zero = 0;
Plural.One = 1;
Plural.Two = 2;
Plural.Few = 3;
Plural.Many = 4;
Plural.Other = 5;
Plural[Plural.Zero] = "Zero";
Plural[Plural.One] = "One";
Plural[Plural.Two] = "Two";
Plural[Plural.Few] = "Few";
Plural[Plural.Many] = "Many";
Plural[Plural.Other] = "Other";
function getPluralCase(locale, nLike) {
if (typeof nLike === "string") {
nLike = parseInt(nLike, 10);
}
var n = nLike;
var nDecimal = n.toString().replace(/^[^.]*\.?/, "");
var i = Math.floor(Math.abs(n));
var v = nDecimal.length;
var f = parseInt(nDecimal, 10);
var t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ""), 10) || 0;
var lang = locale.split("-")[0].toLowerCase();
switch (lang) {
case "af":
case "asa":
case "az":
case "bem":
case "bez":
case "bg":
case "brx":
case "ce":
case "cgg":
case "chr":
case "ckb":
case "ee":
case "el":
case "eo":
case "es":
case "eu":
case "fo":
case "fur":
case "gsw":
case "ha":
case "haw":
case "hu":
case "jgo":
case "jmc":
case "ka":
case "kk":
case "kkj":
case "kl":
case "ks":
case "ksb":
case "ky":
case "lb":
case "lg":
case "mas":
case "mgo":
case "ml":
case "mn":
case "nb":
case "nd":
case "ne":
case "nn":
case "nnh":
case "nyn":
case "om":
case "or":
case "os":
case "ps":
case "rm":
case "rof":
case "rwk":
case "saq":
case "seh":
case "sn":
case "so":
case "sq":
case "ta":
case "te":
case "teo":
case "tk":
case "tr":
case "ug":
case "uz":
case "vo":
case "vun":
case "wae":
case "xog":
if (n === 1) return Plural.One;
return Plural.Other;

case "agq":
case "bas":
case "cu":
case "dav":
case "dje":
case "dua":
case "dyo":
case "ebu":
case "ewo":
case "guz":
case "kam":
case "khq":
case "ki":
case "kln":
case "kok":
case "ksf":
case "lrc":
case "lu":
case "luo":
case "luy":
case "mer":
case "mfe":
case "mgh":
case "mua":
case "mzn":
case "nmg":
case "nus":
case "qu":
case "rn":
case "rw":
case "sbp":
case "twq":
case "vai":
case "yav":
case "yue":
case "zgh":
case "ak":
case "ln":
case "mg":
case "pa":
case "ti":
if (n === Math.floor(n) && n >= 0 && n <= 1) return Plural.One;
return Plural.Other;

case "am":
case "as":
case "bn":
case "fa":
case "gu":
case "hi":
case "kn":
case "mr":
case "zu":
if (i === 0 || n === 1) return Plural.One;
return Plural.Other;

case "ar":
if (n === 0) return Plural.Zero;
if (n === 1) return Plural.One;
if (n === 2) return Plural.Two;
if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10) return Plural.Few;
if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99) return Plural.Many;
return Plural.Other;

case "ast":
case "ca":
case "de":
case "en":
case "et":
case "fi":
case "fy":
case "gl":
case "it":
case "nl":
case "sv":
case "sw":
case "ur":
case "yi":
if (i === 1 && v === 0) return Plural.One;
return Plural.Other;

case "be":
if (n % 10 === 1 && !(n % 100 === 11)) return Plural.One;
if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 && !(n % 100 >= 12 && n % 100 <= 14)) return Plural.Few;
if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14) return Plural.Many;
return Plural.Other;

case "br":
if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91)) return Plural.One;
if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92)) return Plural.Two;
if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) && !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 || n % 100 >= 90 && n % 100 <= 99)) return Plural.Few;
if (!(n === 0) && n % 1e6 === 0) return Plural.Many;
return Plural.Other;

case "bs":
case "hr":
case "sr":
if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11)) return Plural.One;
if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14) || f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 && !(f % 100 >= 12 && f % 100 <= 14)) return Plural.Few;
return Plural.Other;

case "cs":
case "sk":
if (i === 1 && v === 0) return Plural.One;
if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0) return Plural.Few;
if (!(v === 0)) return Plural.Many;
return Plural.Other;

case "cy":
if (n === 0) return Plural.Zero;
if (n === 1) return Plural.One;
if (n === 2) return Plural.Two;
if (n === 3) return Plural.Few;
if (n === 6) return Plural.Many;
return Plural.Other;

case "da":
if (n === 1 || !(t === 0) && (i === 0 || i === 1)) return Plural.One;
return Plural.Other;

case "dsb":
case "hsb":
if (v === 0 && i % 100 === 1 || f % 100 === 1) return Plural.One;
if (v === 0 && i % 100 === 2 || f % 100 === 2) return Plural.Two;
if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4) return Plural.Few;
return Plural.Other;

case "ff":
case "fr":
case "hy":
case "kab":
if (i === 0 || i === 1) return Plural.One;
return Plural.Other;

case "fil":
if (v === 0 && (i === 1 || i === 2 || i === 3) || v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) || !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9)) return Plural.One;
return Plural.Other;

case "ga":
if (n === 1) return Plural.One;
if (n === 2) return Plural.Two;
if (n === Math.floor(n) && n >= 3 && n <= 6) return Plural.Few;
if (n === Math.floor(n) && n >= 7 && n <= 10) return Plural.Many;
return Plural.Other;

case "gd":
if (n === 1 || n === 11) return Plural.One;
if (n === 2 || n === 12) return Plural.Two;
if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19)) return Plural.Few;
return Plural.Other;

case "gv":
if (v === 0 && i % 10 === 1) return Plural.One;
if (v === 0 && i % 10 === 2) return Plural.Two;
if (v === 0 && (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80)) return Plural.Few;
if (!(v === 0)) return Plural.Many;
return Plural.Other;

case "he":
if (i === 1 && v === 0) return Plural.One;
if (i === 2 && v === 0) return Plural.Two;
if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0) return Plural.Many;
return Plural.Other;

case "is":
if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0)) return Plural.One;
return Plural.Other;

case "ksh":
if (n === 0) return Plural.Zero;
if (n === 1) return Plural.One;
return Plural.Other;

case "kw":
case "naq":
case "se":
case "smn":
if (n === 1) return Plural.One;
if (n === 2) return Plural.Two;
return Plural.Other;

case "lag":
if (n === 0) return Plural.Zero;
if ((i === 0 || i === 1) && !(n === 0)) return Plural.One;
return Plural.Other;

case "lt":
if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19)) return Plural.One;
if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 && !(n % 100 >= 11 && n % 100 <= 19)) return Plural.Few;
if (!(f === 0)) return Plural.Many;
return Plural.Other;

case "lv":
case "prg":
if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 || v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19) return Plural.Zero;
if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) || !(v === 2) && f % 10 === 1) return Plural.One;
return Plural.Other;

case "mk":
if (v === 0 && i % 10 === 1 || f % 10 === 1) return Plural.One;
return Plural.Other;

case "mt":
if (n === 1) return Plural.One;
if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10) return Plural.Few;
if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19) return Plural.Many;
return Plural.Other;

case "pl":
if (i === 1 && v === 0) return Plural.One;
if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14)) return Plural.Few;
if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14) return Plural.Many;
return Plural.Other;

case "pt":
if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2)) return Plural.One;
return Plural.Other;

case "ro":
if (i === 1 && v === 0) return Plural.One;
if (!(v === 0) || n === 0 || !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19) return Plural.Few;
return Plural.Other;

case "ru":
case "uk":
if (v === 0 && i % 10 === 1 && !(i % 100 === 11)) return Plural.One;
if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14)) return Plural.Few;
if (v === 0 && i % 10 === 0 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14) return Plural.Many;
return Plural.Other;

case "shi":
if (i === 0 || n === 1) return Plural.One;
if (n === Math.floor(n) && n >= 2 && n <= 10) return Plural.Few;
return Plural.Other;

case "si":
if (n === 0 || n === 1 || i === 0 && f === 1) return Plural.One;
return Plural.Other;

case "sl":
if (v === 0 && i % 100 === 1) return Plural.One;
if (v === 0 && i % 100 === 2) return Plural.Two;
if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0)) return Plural.Few;
return Plural.Other;

case "tzm":
if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99) return Plural.One;
return Plural.Other;

default:
return Plural.Other;
}
}
var NgClass = function() {
function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
this._iterableDiffers = _iterableDiffers;
this._keyValueDiffers = _keyValueDiffers;
this._ngEl = _ngEl;
this._renderer = _renderer;
this._initialClasses = [];
}
Object.defineProperty(NgClass.prototype, "klass", {
set: function(v) {
this._applyInitialClasses(true);
this._initialClasses = typeof v === "string" ? v.split(/\s+/) : [];
this._applyInitialClasses(false);
this._applyClasses(this._rawClass, false);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgClass.prototype, "ngClass", {
set: function(v) {
this._cleanupClasses(this._rawClass);
this._iterableDiffer = null;
this._keyValueDiffer = null;
this._rawClass = typeof v === "string" ? v.split(/\s+/) : v;
if (this._rawClass) {
if (_angular_core.ɵisListLikeIterable(this._rawClass)) {
this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();
} else {
this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();
}
}
},
enumerable: true,
configurable: true
});
NgClass.prototype.ngDoCheck = function() {
if (this._iterableDiffer) {
var iterableChanges = this._iterableDiffer.diff(this._rawClass);
if (iterableChanges) {
this._applyIterableChanges(iterableChanges);
}
} else if (this._keyValueDiffer) {
var keyValueChanges = this._keyValueDiffer.diff(this._rawClass);
if (keyValueChanges) {
this._applyKeyValueChanges(keyValueChanges);
}
}
};
NgClass.prototype._cleanupClasses = function(rawClassVal) {
this._applyClasses(rawClassVal, true);
this._applyInitialClasses(false);
};
NgClass.prototype._applyKeyValueChanges = function(changes) {
var _this = this;
changes.forEachAddedItem(function(record) {
return _this._toggleClass(record.key, record.currentValue);
});
changes.forEachChangedItem(function(record) {
return _this._toggleClass(record.key, record.currentValue);
});
changes.forEachRemovedItem(function(record) {
if (record.previousValue) {
_this._toggleClass(record.key, false);
}
});
};
NgClass.prototype._applyIterableChanges = function(changes) {
var _this = this;
changes.forEachAddedItem(function(record) {
if (typeof record.item === "string") {
_this._toggleClass(record.item, true);
} else {
throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + _angular_core.ɵstringify(record.item));
}
});
changes.forEachRemovedItem(function(record) {
return _this._toggleClass(record.item, false);
});
};
NgClass.prototype._applyInitialClasses = function(isCleanup) {
var _this = this;
this._initialClasses.forEach(function(klass) {
return _this._toggleClass(klass, !isCleanup);
});
};
NgClass.prototype._applyClasses = function(rawClassVal, isCleanup) {
var _this = this;
if (rawClassVal) {
if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
rawClassVal.forEach(function(klass) {
return _this._toggleClass(klass, !isCleanup);
});
} else {
Object.keys(rawClassVal).forEach(function(klass) {
if (rawClassVal[klass] != null) _this._toggleClass(klass, !isCleanup);
});
}
}
};
NgClass.prototype._toggleClass = function(klass, enabled) {
var _this = this;
klass = klass.trim();
if (klass) {
klass.split(/\s+/g).forEach(function(klass) {
_this._renderer.setElementClass(_this._ngEl.nativeElement, klass, !!enabled);
});
}
};
return NgClass;
}();
NgClass.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngClass]"
} ]
} ];
NgClass.ctorParameters = function() {
return [ {
type: _angular_core.IterableDiffers
}, {
type: _angular_core.KeyValueDiffers
}, {
type: _angular_core.ElementRef
}, {
type: _angular_core.Renderer
} ];
};
NgClass.propDecorators = {
klass: [ {
type: _angular_core.Input,
args: [ "class" ]
} ],
ngClass: [ {
type: _angular_core.Input
} ]
};
var NgComponentOutlet = function() {
function NgComponentOutlet(_viewContainerRef) {
this._viewContainerRef = _viewContainerRef;
this._componentRef = null;
this._moduleRef = null;
}
NgComponentOutlet.prototype.ngOnChanges = function(changes) {
this._viewContainerRef.clear();
this._componentRef = null;
if (this.ngComponentOutlet) {
var elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;
if (changes["ngComponentOutletNgModuleFactory"]) {
if (this._moduleRef) this._moduleRef.destroy();
if (this.ngComponentOutletNgModuleFactory) {
var parentModule = elInjector.get(_angular_core.NgModuleRef);
this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);
} else {
this._moduleRef = null;
}
}
var componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver : elInjector.get(_angular_core.ComponentFactoryResolver);
var componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);
this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);
}
};
NgComponentOutlet.prototype.ngOnDestroy = function() {
if (this._moduleRef) this._moduleRef.destroy();
};
return NgComponentOutlet;
}();
NgComponentOutlet.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngComponentOutlet]"
} ]
} ];
NgComponentOutlet.ctorParameters = function() {
return [ {
type: _angular_core.ViewContainerRef
} ];
};
NgComponentOutlet.propDecorators = {
ngComponentOutlet: [ {
type: _angular_core.Input
} ],
ngComponentOutletInjector: [ {
type: _angular_core.Input
} ],
ngComponentOutletContent: [ {
type: _angular_core.Input
} ],
ngComponentOutletNgModuleFactory: [ {
type: _angular_core.Input
} ]
};
var NgForOfContext = function() {
function NgForOfContext($implicit, ngForOf, index, count) {
this.$implicit = $implicit;
this.ngForOf = ngForOf;
this.index = index;
this.count = count;
}
Object.defineProperty(NgForOfContext.prototype, "first", {
get: function() {
return this.index === 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForOfContext.prototype, "last", {
get: function() {
return this.index === this.count - 1;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForOfContext.prototype, "even", {
get: function() {
return this.index % 2 === 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForOfContext.prototype, "odd", {
get: function() {
return !this.even;
},
enumerable: true,
configurable: true
});
return NgForOfContext;
}();
var NgForOf = function() {
function NgForOf(_viewContainer, _template, _differs) {
this._viewContainer = _viewContainer;
this._template = _template;
this._differs = _differs;
this._differ = null;
}
Object.defineProperty(NgForOf.prototype, "ngForTrackBy", {
get: function() {
return this._trackByFn;
},
set: function(fn) {
if (_angular_core.isDevMode() && fn != null && typeof fn !== "function") {
if (console && console.warn) {
console.warn("trackBy must be a function, but received " + JSON.stringify(fn) + ". " + "See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.");
}
}
this._trackByFn = fn;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForOf.prototype, "ngForTemplate", {
set: function(value) {
if (value) {
this._template = value;
}
},
enumerable: true,
configurable: true
});
NgForOf.prototype.ngOnChanges = function(changes) {
if ("ngForOf" in changes) {
var value = changes["ngForOf"].currentValue;
if (!this._differ && value) {
try {
this._differ = this._differs.find(value).create(this.ngForTrackBy);
} catch (e) {
throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
}
}
}
};
NgForOf.prototype.ngDoCheck = function() {
if (this._differ) {
var changes = this._differ.diff(this.ngForOf);
if (changes) this._applyChanges(changes);
}
};
NgForOf.prototype._applyChanges = function(changes) {
var _this = this;
var insertTuples = [];
changes.forEachOperation(function(item, adjustedPreviousIndex, currentIndex) {
if (item.previousIndex == null) {
var view = _this._viewContainer.createEmbeddedView(_this._template, new NgForOfContext(null, _this.ngForOf, -1, -1), currentIndex);
var tuple = new RecordViewTuple(item, view);
insertTuples.push(tuple);
} else if (currentIndex == null) {
_this._viewContainer.remove(adjustedPreviousIndex);
} else {
var view = _this._viewContainer.get(adjustedPreviousIndex);
_this._viewContainer.move(view, currentIndex);
var tuple = new RecordViewTuple(item, view);
insertTuples.push(tuple);
}
});
for (var i = 0; i < insertTuples.length; i++) {
this._perViewChange(insertTuples[i].view, insertTuples[i].record);
}
for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) {
var viewRef = this._viewContainer.get(i);
viewRef.context.index = i;
viewRef.context.count = ilen;
}
changes.forEachIdentityChange(function(record) {
var viewRef = _this._viewContainer.get(record.currentIndex);
viewRef.context.$implicit = record.item;
});
};
NgForOf.prototype._perViewChange = function(view, record) {
view.context.$implicit = record.item;
};
return NgForOf;
}();
NgForOf.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngFor][ngForOf]"
} ]
} ];
NgForOf.ctorParameters = function() {
return [ {
type: _angular_core.ViewContainerRef
}, {
type: _angular_core.TemplateRef
}, {
type: _angular_core.IterableDiffers
} ];
};
NgForOf.propDecorators = {
ngForOf: [ {
type: _angular_core.Input
} ],
ngForTrackBy: [ {
type: _angular_core.Input
} ],
ngForTemplate: [ {
type: _angular_core.Input
} ]
};
var RecordViewTuple = function() {
function RecordViewTuple(record, view) {
this.record = record;
this.view = view;
}
return RecordViewTuple;
}();
var NgFor = NgForOf;
function getTypeNameForDebugging(type) {
return type["name"] || typeof type;
}
var NgIf = function() {
function NgIf(_viewContainer, templateRef) {
this._viewContainer = _viewContainer;
this._context = new NgIfContext();
this._thenTemplateRef = null;
this._elseTemplateRef = null;
this._thenViewRef = null;
this._elseViewRef = null;
this._thenTemplateRef = templateRef;
}
Object.defineProperty(NgIf.prototype, "ngIf", {
set: function(condition) {
this._context.$implicit = this._context.ngIf = condition;
this._updateView();
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgIf.prototype, "ngIfThen", {
set: function(templateRef) {
this._thenTemplateRef = templateRef;
this._thenViewRef = null;
this._updateView();
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgIf.prototype, "ngIfElse", {
set: function(templateRef) {
this._elseTemplateRef = templateRef;
this._elseViewRef = null;
this._updateView();
},
enumerable: true,
configurable: true
});
NgIf.prototype._updateView = function() {
if (this._context.$implicit) {
if (!this._thenViewRef) {
this._viewContainer.clear();
this._elseViewRef = null;
if (this._thenTemplateRef) {
this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
}
}
} else {
if (!this._elseViewRef) {
this._viewContainer.clear();
this._thenViewRef = null;
if (this._elseTemplateRef) {
this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
}
}
}
};
return NgIf;
}();
NgIf.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngIf]"
} ]
} ];
NgIf.ctorParameters = function() {
return [ {
type: _angular_core.ViewContainerRef
}, {
type: _angular_core.TemplateRef
} ];
};
NgIf.propDecorators = {
ngIf: [ {
type: _angular_core.Input
} ],
ngIfThen: [ {
type: _angular_core.Input
} ],
ngIfElse: [ {
type: _angular_core.Input
} ]
};
var NgIfContext = function() {
function NgIfContext() {
this.$implicit = null;
this.ngIf = null;
}
return NgIfContext;
}();
var SwitchView = function() {
function SwitchView(_viewContainerRef, _templateRef) {
this._viewContainerRef = _viewContainerRef;
this._templateRef = _templateRef;
this._created = false;
}
SwitchView.prototype.create = function() {
this._created = true;
this._viewContainerRef.createEmbeddedView(this._templateRef);
};
SwitchView.prototype.destroy = function() {
this._created = false;
this._viewContainerRef.clear();
};
SwitchView.prototype.enforceState = function(created) {
if (created && !this._created) {
this.create();
} else if (!created && this._created) {
this.destroy();
}
};
return SwitchView;
}();
var NgSwitch = function() {
function NgSwitch() {
this._defaultUsed = false;
this._caseCount = 0;
this._lastCaseCheckIndex = 0;
this._lastCasesMatched = false;
}
Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
set: function(newValue) {
this._ngSwitch = newValue;
if (this._caseCount === 0) {
this._updateDefaultCases(true);
}
},
enumerable: true,
configurable: true
});
NgSwitch.prototype._addCase = function() {
return this._caseCount++;
};
NgSwitch.prototype._addDefault = function(view) {
if (!this._defaultViews) {
this._defaultViews = [];
}
this._defaultViews.push(view);
};
NgSwitch.prototype._matchCase = function(value) {
var matched = value == this._ngSwitch;
this._lastCasesMatched = this._lastCasesMatched || matched;
this._lastCaseCheckIndex++;
if (this._lastCaseCheckIndex === this._caseCount) {
this._updateDefaultCases(!this._lastCasesMatched);
this._lastCaseCheckIndex = 0;
this._lastCasesMatched = false;
}
return matched;
};
NgSwitch.prototype._updateDefaultCases = function(useDefault) {
if (this._defaultViews && useDefault !== this._defaultUsed) {
this._defaultUsed = useDefault;
for (var i = 0; i < this._defaultViews.length; i++) {
var defaultView = this._defaultViews[i];
defaultView.enforceState(useDefault);
}
}
};
return NgSwitch;
}();
NgSwitch.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngSwitch]"
} ]
} ];
NgSwitch.ctorParameters = function() {
return [];
};
NgSwitch.propDecorators = {
ngSwitch: [ {
type: _angular_core.Input
} ]
};
var NgSwitchCase = function() {
function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
this.ngSwitch = ngSwitch;
ngSwitch._addCase();
this._view = new SwitchView(viewContainer, templateRef);
}
NgSwitchCase.prototype.ngDoCheck = function() {
this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
};
return NgSwitchCase;
}();
NgSwitchCase.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngSwitchCase]"
} ]
} ];
NgSwitchCase.ctorParameters = function() {
return [ {
type: _angular_core.ViewContainerRef
}, {
type: _angular_core.TemplateRef
}, {
type: NgSwitch,
decorators: [ {
type: _angular_core.Host
} ]
} ];
};
NgSwitchCase.propDecorators = {
ngSwitchCase: [ {
type: _angular_core.Input
} ]
};
var NgSwitchDefault = function() {
function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
}
return NgSwitchDefault;
}();
NgSwitchDefault.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngSwitchDefault]"
} ]
} ];
NgSwitchDefault.ctorParameters = function() {
return [ {
type: _angular_core.ViewContainerRef
}, {
type: _angular_core.TemplateRef
}, {
type: NgSwitch,
decorators: [ {
type: _angular_core.Host
} ]
} ];
};
var NgPlural = function() {
function NgPlural(_localization) {
this._localization = _localization;
this._caseViews = {};
}
Object.defineProperty(NgPlural.prototype, "ngPlural", {
set: function(value) {
this._switchValue = value;
this._updateView();
},
enumerable: true,
configurable: true
});
NgPlural.prototype.addCase = function(value, switchView) {
this._caseViews[value] = switchView;
};
NgPlural.prototype._updateView = function() {
this._clearViews();
var cases = Object.keys(this._caseViews);
var key = getPluralCategory(this._switchValue, cases, this._localization);
this._activateView(this._caseViews[key]);
};
NgPlural.prototype._clearViews = function() {
if (this._activeView) this._activeView.destroy();
};
NgPlural.prototype._activateView = function(view) {
if (view) {
this._activeView = view;
this._activeView.create();
}
};
return NgPlural;
}();
NgPlural.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngPlural]"
} ]
} ];
NgPlural.ctorParameters = function() {
return [ {
type: NgLocalization
} ];
};
NgPlural.propDecorators = {
ngPlural: [ {
type: _angular_core.Input
} ]
};
var NgPluralCase = function() {
function NgPluralCase(value, template, viewContainer, ngPlural) {
this.value = value;
var isANumber = !isNaN(Number(value));
ngPlural.addCase(isANumber ? "=" + value : value, new SwitchView(viewContainer, template));
}
return NgPluralCase;
}();
NgPluralCase.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngPluralCase]"
} ]
} ];
NgPluralCase.ctorParameters = function() {
return [ {
type: undefined,
decorators: [ {
type: _angular_core.Attribute,
args: [ "ngPluralCase" ]
} ]
}, {
type: _angular_core.TemplateRef
}, {
type: _angular_core.ViewContainerRef
}, {
type: NgPlural,
decorators: [ {
type: _angular_core.Host
} ]
} ];
};
var NgStyle = function() {
function NgStyle(_differs, _ngEl, _renderer) {
this._differs = _differs;
this._ngEl = _ngEl;
this._renderer = _renderer;
}
Object.defineProperty(NgStyle.prototype, "ngStyle", {
set: function(v) {
this._ngStyle = v;
if (!this._differ && v) {
this._differ = this._differs.find(v).create();
}
},
enumerable: true,
configurable: true
});
NgStyle.prototype.ngDoCheck = function() {
if (this._differ) {
var changes = this._differ.diff(this._ngStyle);
if (changes) {
this._applyChanges(changes);
}
}
};
NgStyle.prototype._applyChanges = function(changes) {
var _this = this;
changes.forEachRemovedItem(function(record) {
return _this._setStyle(record.key, null);
});
changes.forEachAddedItem(function(record) {
return _this._setStyle(record.key, record.currentValue);
});
changes.forEachChangedItem(function(record) {
return _this._setStyle(record.key, record.currentValue);
});
};
NgStyle.prototype._setStyle = function(nameAndUnit, value) {
var _a = nameAndUnit.split("."), name = _a[0], unit = _a[1];
value = value != null && unit ? "" + value + unit : value;
this._renderer.setElementStyle(this._ngEl.nativeElement, name, value);
};
return NgStyle;
}();
NgStyle.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngStyle]"
} ]
} ];
NgStyle.ctorParameters = function() {
return [ {
type: _angular_core.KeyValueDiffers
}, {
type: _angular_core.ElementRef
}, {
type: _angular_core.Renderer
} ];
};
NgStyle.propDecorators = {
ngStyle: [ {
type: _angular_core.Input
} ]
};
var NgTemplateOutlet = function() {
function NgTemplateOutlet(_viewContainerRef) {
this._viewContainerRef = _viewContainerRef;
}
Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
set: function(context) {
this.ngTemplateOutletContext = context;
},
enumerable: true,
configurable: true
});
NgTemplateOutlet.prototype.ngOnChanges = function(changes) {
if (this._viewRef) {
this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
}
if (this.ngTemplateOutlet) {
this._viewRef = this._viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext);
}
};
return NgTemplateOutlet;
}();
NgTemplateOutlet.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngTemplateOutlet]"
} ]
} ];
NgTemplateOutlet.ctorParameters = function() {
return [ {
type: _angular_core.ViewContainerRef
} ];
};
NgTemplateOutlet.propDecorators = {
ngTemplateOutletContext: [ {
type: _angular_core.Input
} ],
ngTemplateOutlet: [ {
type: _angular_core.Input
} ],
ngOutletContext: [ {
type: _angular_core.Input
} ]
};
var COMMON_DIRECTIVES = [ NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase ];
function invalidPipeArgumentError(type, value) {
return Error("InvalidPipeArgument: '" + value + "' for pipe '" + _angular_core.ɵstringify(type) + "'");
}
var ObservableStrategy = function() {
function ObservableStrategy() {}
ObservableStrategy.prototype.createSubscription = function(async, updateLatestValue) {
return async.subscribe({
next: updateLatestValue,
error: function(e) {
throw e;
}
});
};
ObservableStrategy.prototype.dispose = function(subscription) {
subscription.unsubscribe();
};
ObservableStrategy.prototype.onDestroy = function(subscription) {
subscription.unsubscribe();
};
return ObservableStrategy;
}();
var PromiseStrategy = function() {
function PromiseStrategy() {}
PromiseStrategy.prototype.createSubscription = function(async, updateLatestValue) {
return async.then(updateLatestValue, function(e) {
throw e;
});
};
PromiseStrategy.prototype.dispose = function(subscription) {};
PromiseStrategy.prototype.onDestroy = function(subscription) {};
return PromiseStrategy;
}();
var _promiseStrategy = new PromiseStrategy();
var _observableStrategy = new ObservableStrategy();
var AsyncPipe = function() {
function AsyncPipe(_ref) {
this._ref = _ref;
this._latestValue = null;
this._latestReturnedValue = null;
this._subscription = null;
this._obj = null;
this._strategy = null;
}
AsyncPipe.prototype.ngOnDestroy = function() {
if (this._subscription) {
this._dispose();
}
};
AsyncPipe.prototype.transform = function(obj) {
if (!this._obj) {
if (obj) {
this._subscribe(obj);
}
this._latestReturnedValue = this._latestValue;
return this._latestValue;
}
if (obj !== this._obj) {
this._dispose();
return this.transform(obj);
}
if (this._latestValue === this._latestReturnedValue) {
return this._latestReturnedValue;
}
this._latestReturnedValue = this._latestValue;
return _angular_core.WrappedValue.wrap(this._latestValue);
};
AsyncPipe.prototype._subscribe = function(obj) {
var _this = this;
this._obj = obj;
this._strategy = this._selectStrategy(obj);
this._subscription = this._strategy.createSubscription(obj, function(value) {
return _this._updateLatestValue(obj, value);
});
};
AsyncPipe.prototype._selectStrategy = function(obj) {
if (_angular_core.ɵisPromise(obj)) {
return _promiseStrategy;
}
if (_angular_core.ɵisObservable(obj)) {
return _observableStrategy;
}
throw invalidPipeArgumentError(AsyncPipe, obj);
};
AsyncPipe.prototype._dispose = function() {
this._strategy.dispose(this._subscription);
this._latestValue = null;
this._latestReturnedValue = null;
this._subscription = null;
this._obj = null;
};
AsyncPipe.prototype._updateLatestValue = function(async, value) {
if (async === this._obj) {
this._latestValue = value;
this._ref.markForCheck();
}
};
return AsyncPipe;
}();
AsyncPipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "async",
pure: false
} ]
} ];
AsyncPipe.ctorParameters = function() {
return [ {
type: _angular_core.ChangeDetectorRef
} ];
};
var LowerCasePipe = function() {
function LowerCasePipe() {}
LowerCasePipe.prototype.transform = function(value) {
if (!value) return value;
if (typeof value !== "string") {
throw invalidPipeArgumentError(LowerCasePipe, value);
}
return value.toLowerCase();
};
return LowerCasePipe;
}();
LowerCasePipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "lowercase"
} ]
} ];
LowerCasePipe.ctorParameters = function() {
return [];
};
function titleCaseWord(word) {
if (!word) return word;
return word[0].toUpperCase() + word.substr(1).toLowerCase();
}
var TitleCasePipe = function() {
function TitleCasePipe() {}
TitleCasePipe.prototype.transform = function(value) {
if (!value) return value;
if (typeof value !== "string") {
throw invalidPipeArgumentError(TitleCasePipe, value);
}
return value.split(/\b/g).map(function(word) {
return titleCaseWord(word);
}).join("");
};
return TitleCasePipe;
}();
TitleCasePipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "titlecase"
} ]
} ];
TitleCasePipe.ctorParameters = function() {
return [];
};
var UpperCasePipe = function() {
function UpperCasePipe() {}
UpperCasePipe.prototype.transform = function(value) {
if (!value) return value;
if (typeof value !== "string") {
throw invalidPipeArgumentError(UpperCasePipe, value);
}
return value.toUpperCase();
};
return UpperCasePipe;
}();
UpperCasePipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "uppercase"
} ]
} ];
UpperCasePipe.ctorParameters = function() {
return [];
};
var NumberFormatStyle = {};
NumberFormatStyle.Decimal = 0;
NumberFormatStyle.Percent = 1;
NumberFormatStyle.Currency = 2;
NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal";
NumberFormatStyle[NumberFormatStyle.Percent] = "Percent";
NumberFormatStyle[NumberFormatStyle.Currency] = "Currency";
var NumberFormatter = function() {
function NumberFormatter() {}
NumberFormatter.format = function(num, locale, style, _a) {
var _b = _a === void 0 ? {} : _a, minimumIntegerDigits = _b.minimumIntegerDigits, minimumFractionDigits = _b.minimumFractionDigits, maximumFractionDigits = _b.maximumFractionDigits, currency = _b.currency, _c = _b.currencyAsSymbol, currencyAsSymbol = _c === void 0 ? false : _c;
var options = {
minimumIntegerDigits: minimumIntegerDigits,
minimumFractionDigits: minimumFractionDigits,
maximumFractionDigits: maximumFractionDigits,
style: NumberFormatStyle[style].toLowerCase()
};
if (style == NumberFormatStyle.Currency) {
options.currency = typeof currency == "string" ? currency : undefined;
options.currencyDisplay = currencyAsSymbol ? "symbol" : "code";
}
return new Intl.NumberFormat(locale, options).format(num);
};
return NumberFormatter;
}();
var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
var PATTERN_ALIASES = {
yMMMdjms: datePartGetterFactory(combine([ digitCondition("year", 1), nameCondition("month", 3), digitCondition("day", 1), digitCondition("hour", 1), digitCondition("minute", 1), digitCondition("second", 1) ])),
yMdjm: datePartGetterFactory(combine([ digitCondition("year", 1), digitCondition("month", 1), digitCondition("day", 1), digitCondition("hour", 1), digitCondition("minute", 1) ])),
yMMMMEEEEd: datePartGetterFactory(combine([ digitCondition("year", 1), nameCondition("month", 4), nameCondition("weekday", 4), digitCondition("day", 1) ])),
yMMMMd: datePartGetterFactory(combine([ digitCondition("year", 1), nameCondition("month", 4), digitCondition("day", 1) ])),
yMMMd: datePartGetterFactory(combine([ digitCondition("year", 1), nameCondition("month", 3), digitCondition("day", 1) ])),
yMd: datePartGetterFactory(combine([ digitCondition("year", 1), digitCondition("month", 1), digitCondition("day", 1) ])),
jms: datePartGetterFactory(combine([ digitCondition("hour", 1), digitCondition("second", 1), digitCondition("minute", 1) ])),
jm: datePartGetterFactory(combine([ digitCondition("hour", 1), digitCondition("minute", 1) ]))
};
var DATE_FORMATS = {
yyyy: datePartGetterFactory(digitCondition("year", 4)),
yy: datePartGetterFactory(digitCondition("year", 2)),
y: datePartGetterFactory(digitCondition("year", 1)),
MMMM: datePartGetterFactory(nameCondition("month", 4)),
MMM: datePartGetterFactory(nameCondition("month", 3)),
MM: datePartGetterFactory(digitCondition("month", 2)),
M: datePartGetterFactory(digitCondition("month", 1)),
LLLL: datePartGetterFactory(nameCondition("month", 4)),
L: datePartGetterFactory(nameCondition("month", 1)),
dd: datePartGetterFactory(digitCondition("day", 2)),
d: datePartGetterFactory(digitCondition("day", 1)),
HH: digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 2), false)))),
H: hourExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), false))),
hh: digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 2), true)))),
h: hourExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), true))),
jj: datePartGetterFactory(digitCondition("hour", 2)),
j: datePartGetterFactory(digitCondition("hour", 1)),
mm: digitModifier(datePartGetterFactory(digitCondition("minute", 2))),
m: datePartGetterFactory(digitCondition("minute", 1)),
ss: digitModifier(datePartGetterFactory(digitCondition("second", 2))),
s: datePartGetterFactory(digitCondition("second", 1)),
sss: datePartGetterFactory(digitCondition("second", 3)),
EEEE: datePartGetterFactory(nameCondition("weekday", 4)),
EEE: datePartGetterFactory(nameCondition("weekday", 3)),
EE: datePartGetterFactory(nameCondition("weekday", 2)),
E: datePartGetterFactory(nameCondition("weekday", 1)),
a: hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), true))),
Z: timeZoneGetter("short"),
z: timeZoneGetter("long"),
ww: datePartGetterFactory({}),
w: datePartGetterFactory({}),
G: datePartGetterFactory(nameCondition("era", 1)),
GG: datePartGetterFactory(nameCondition("era", 2)),
GGG: datePartGetterFactory(nameCondition("era", 3)),
GGGG: datePartGetterFactory(nameCondition("era", 4))
};
function digitModifier(inner) {
return function(date, locale) {
var result = inner(date, locale);
return result.length == 1 ? "0" + result : result;
};
}
function hourClockExtractor(inner) {
return function(date, locale) {
return inner(date, locale).split(" ")[1];
};
}
function hourExtractor(inner) {
return function(date, locale) {
return inner(date, locale).split(" ")[0];
};
}
function intlDateFormat(date, locale, options) {
return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, "");
}
function timeZoneGetter(timezone) {
var options = {
hour: "2-digit",
hour12: false,
timeZoneName: timezone
};
return function(date, locale) {
var result = intlDateFormat(date, locale, options);
return result ? result.substring(3) : "";
};
}
function hour12Modify(options, value) {
options.hour12 = value;
return options;
}
function digitCondition(prop, len) {
var result = {};
result[prop] = len === 2 ? "2-digit" : "numeric";
return result;
}
function nameCondition(prop, len) {
var result = {};
if (len < 4) {
result[prop] = len > 1 ? "short" : "narrow";
} else {
result[prop] = "long";
}
return result;
}
function combine(options) {
return Object.assign.apply(Object, [ {} ].concat(options));
}
function datePartGetterFactory(ret) {
return function(date, locale) {
return intlDateFormat(date, locale, ret);
};
}
var DATE_FORMATTER_CACHE = new Map();
function dateFormatter(format, date, locale) {
var fn = PATTERN_ALIASES[format];
if (fn) return fn(date, locale);
var cacheKey = format;
var parts = DATE_FORMATTER_CACHE.get(cacheKey);
if (!parts) {
parts = [];
var match = void 0;
DATE_FORMATS_SPLIT.exec(format);
var _format = format;
while (_format) {
match = DATE_FORMATS_SPLIT.exec(_format);
if (match) {
parts = parts.concat(match.slice(1));
_format = parts.pop();
} else {
parts.push(_format);
_format = null;
}
}
DATE_FORMATTER_CACHE.set(cacheKey, parts);
}
return parts.reduce(function(text, part) {
var fn = DATE_FORMATS[part];
return text + (fn ? fn(date, locale) : partToTime(part));
}, "");
}
function partToTime(part) {
return part === "''" ? "'" : part.replace(/(^'|'$)/g, "").replace(/''/g, "'");
}
var DateFormatter = function() {
function DateFormatter() {}
DateFormatter.format = function(date, locale, pattern) {
return dateFormatter(pattern, date, locale);
};
return DateFormatter;
}();
var _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
if (currency === void 0) {
currency = null;
}
if (currencyAsSymbol === void 0) {
currencyAsSymbol = false;
}
if (value == null) return null;
value = typeof value === "string" && isNumeric(value) ? +value : value;
if (typeof value !== "number") {
throw invalidPipeArgumentError(pipe, value);
}
var minInt = undefined;
var minFraction = undefined;
var maxFraction = undefined;
if (style !== NumberFormatStyle.Currency) {
minInt = 1;
minFraction = 0;
maxFraction = 3;
}
if (digits) {
var parts = digits.match(_NUMBER_FORMAT_REGEXP);
if (parts === null) {
throw new Error(digits + " is not a valid digit info for number pipes");
}
if (parts[1] != null) {
minInt = parseIntAutoRadix(parts[1]);
}
if (parts[3] != null) {
minFraction = parseIntAutoRadix(parts[3]);
}
if (parts[5] != null) {
maxFraction = parseIntAutoRadix(parts[5]);
}
}
return NumberFormatter.format(value, locale, style, {
minimumIntegerDigits: minInt,
minimumFractionDigits: minFraction,
maximumFractionDigits: maxFraction,
currency: currency,
currencyAsSymbol: currencyAsSymbol
});
}
var DecimalPipe = function() {
function DecimalPipe(_locale) {
this._locale = _locale;
}
DecimalPipe.prototype.transform = function(value, digits) {
return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
};
return DecimalPipe;
}();
DecimalPipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "number"
} ]
} ];
DecimalPipe.ctorParameters = function() {
return [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ _angular_core.LOCALE_ID ]
} ]
} ];
};
var PercentPipe = function() {
function PercentPipe(_locale) {
this._locale = _locale;
}
PercentPipe.prototype.transform = function(value, digits) {
return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
};
return PercentPipe;
}();
PercentPipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "percent"
} ]
} ];
PercentPipe.ctorParameters = function() {
return [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ _angular_core.LOCALE_ID ]
} ]
} ];
};
var CurrencyPipe = function() {
function CurrencyPipe(_locale) {
this._locale = _locale;
}
CurrencyPipe.prototype.transform = function(value, currencyCode, symbolDisplay, digits) {
if (currencyCode === void 0) {
currencyCode = "USD";
}
if (symbolDisplay === void 0) {
symbolDisplay = false;
}
return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
};
return CurrencyPipe;
}();
CurrencyPipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "currency"
} ]
} ];
CurrencyPipe.ctorParameters = function() {
return [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ _angular_core.LOCALE_ID ]
} ]
} ];
};
function parseIntAutoRadix(text) {
var result = parseInt(text);
if (isNaN(result)) {
throw new Error("Invalid integer literal when parsing " + text);
}
return result;
}
function isNumeric(value) {
return !isNaN(value - parseFloat(value));
}
var ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
var DatePipe = function() {
function DatePipe(_locale) {
this._locale = _locale;
}
DatePipe.prototype.transform = function(value, pattern) {
if (pattern === void 0) {
pattern = "mediumDate";
}
var date;
if (isBlank(value) || value !== value) return null;
if (typeof value === "string") {
value = value.trim();
}
if (isDate(value)) {
date = value;
} else if (isNumeric(value)) {
date = new Date(parseFloat(value));
} else if (typeof value === "string" && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
var _a = value.split("-").map(function(val) {
return parseInt(val, 10);
}), y = _a[0], m = _a[1], d = _a[2];
date = new Date(y, m - 1, d);
} else {
date = new Date(value);
}
if (!isDate(date)) {
var match = void 0;
if (typeof value === "string" && (match = value.match(ISO8601_DATE_REGEX))) {
date = isoStringToDate(match);
} else {
throw invalidPipeArgumentError(DatePipe, value);
}
}
return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
};
return DatePipe;
}();
DatePipe._ALIASES = {
medium: "yMMMdjms",
short: "yMdjm",
fullDate: "yMMMMEEEEd",
longDate: "yMMMMd",
mediumDate: "yMMMd",
shortDate: "yMd",
mediumTime: "jms",
shortTime: "jm"
};
DatePipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "date",
pure: true
} ]
} ];
DatePipe.ctorParameters = function() {
return [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ _angular_core.LOCALE_ID ]
} ]
} ];
};
function isBlank(obj) {
return obj == null || obj === "";
}
function isDate(obj) {
return obj instanceof Date && !isNaN(obj.valueOf());
}
function isoStringToDate(match) {
var date = new Date(0);
var tzHour = 0;
var tzMin = 0;
var dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
var timeSetter = match[8] ? date.setUTCHours : date.setHours;
if (match[9]) {
tzHour = toInt(match[9] + match[10]);
tzMin = toInt(match[9] + match[11]);
}
dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
var h = toInt(match[4] || "0") - tzHour;
var m = toInt(match[5] || "0") - tzMin;
var s = toInt(match[6] || "0");
var ms = Math.round(parseFloat("0." + (match[7] || 0)) * 1e3);
timeSetter.call(date, h, m, s, ms);
return date;
}
function toInt(str) {
return parseInt(str, 10);
}
var _INTERPOLATION_REGEXP = /#/g;
var I18nPluralPipe = function() {
function I18nPluralPipe(_localization) {
this._localization = _localization;
}
I18nPluralPipe.prototype.transform = function(value, pluralMap) {
if (value == null) return "";
if (typeof pluralMap !== "object" || pluralMap === null) {
throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);
}
var key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
};
return I18nPluralPipe;
}();
I18nPluralPipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "i18nPlural",
pure: true
} ]
} ];
I18nPluralPipe.ctorParameters = function() {
return [ {
type: NgLocalization
} ];
};
var I18nSelectPipe = function() {
function I18nSelectPipe() {}
I18nSelectPipe.prototype.transform = function(value, mapping) {
if (value == null) return "";
if (typeof mapping !== "object" || typeof value !== "string") {
throw invalidPipeArgumentError(I18nSelectPipe, mapping);
}
if (mapping.hasOwnProperty(value)) {
return mapping[value];
}
if (mapping.hasOwnProperty("other")) {
return mapping["other"];
}
return "";
};
return I18nSelectPipe;
}();
I18nSelectPipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "i18nSelect",
pure: true
} ]
} ];
I18nSelectPipe.ctorParameters = function() {
return [];
};
var JsonPipe = function() {
function JsonPipe() {}
JsonPipe.prototype.transform = function(value) {
return JSON.stringify(value, null, 2);
};
return JsonPipe;
}();
JsonPipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "json",
pure: false
} ]
} ];
JsonPipe.ctorParameters = function() {
return [];
};
var SlicePipe = function() {
function SlicePipe() {}
SlicePipe.prototype.transform = function(value, start, end) {
if (value == null) return value;
if (!this.supports(value)) {
throw invalidPipeArgumentError(SlicePipe, value);
}
return value.slice(start, end);
};
SlicePipe.prototype.supports = function(obj) {
return typeof obj === "string" || Array.isArray(obj);
};
return SlicePipe;
}();
SlicePipe.decorators = [ {
type: _angular_core.Pipe,
args: [ {
name: "slice",
pure: false
} ]
} ];
SlicePipe.ctorParameters = function() {
return [];
};
var COMMON_PIPES = [ AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe ];
var CommonModule = function() {
function CommonModule() {}
return CommonModule;
}();
CommonModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
declarations: [ COMMON_DIRECTIVES, COMMON_PIPES ],
exports: [ COMMON_DIRECTIVES, COMMON_PIPES ],
providers: [ {
provide: NgLocalization,
useClass: NgLocaleLocalization
} ]
} ]
} ];
CommonModule.ctorParameters = function() {
return [];
};
var PLATFORM_BROWSER_ID = "browser";
var PLATFORM_SERVER_ID = "server";
var PLATFORM_WORKER_APP_ID = "browserWorkerApp";
var PLATFORM_WORKER_UI_ID = "browserWorkerUi";
function isPlatformBrowser(platformId) {
return platformId === PLATFORM_BROWSER_ID;
}
function isPlatformServer(platformId) {
return platformId === PLATFORM_SERVER_ID;
}
function isPlatformWorkerApp(platformId) {
return platformId === PLATFORM_WORKER_APP_ID;
}
function isPlatformWorkerUi(platformId) {
return platformId === PLATFORM_WORKER_UI_ID;
}
var VERSION = new _angular_core.Version("4.1.0");
exports.NgLocaleLocalization = NgLocaleLocalization;
exports.NgLocalization = NgLocalization;
exports.CommonModule = CommonModule;
exports.NgClass = NgClass;
exports.NgFor = NgFor;
exports.NgForOf = NgForOf;
exports.NgForOfContext = NgForOfContext;
exports.NgIf = NgIf;
exports.NgIfContext = NgIfContext;
exports.NgPlural = NgPlural;
exports.NgPluralCase = NgPluralCase;
exports.NgStyle = NgStyle;
exports.NgSwitch = NgSwitch;
exports.NgSwitchCase = NgSwitchCase;
exports.NgSwitchDefault = NgSwitchDefault;
exports.NgTemplateOutlet = NgTemplateOutlet;
exports.NgComponentOutlet = NgComponentOutlet;
exports.AsyncPipe = AsyncPipe;
exports.DatePipe = DatePipe;
exports.I18nPluralPipe = I18nPluralPipe;
exports.I18nSelectPipe = I18nSelectPipe;
exports.JsonPipe = JsonPipe;
exports.LowerCasePipe = LowerCasePipe;
exports.CurrencyPipe = CurrencyPipe;
exports.DecimalPipe = DecimalPipe;
exports.PercentPipe = PercentPipe;
exports.SlicePipe = SlicePipe;
exports.UpperCasePipe = UpperCasePipe;
exports.TitleCasePipe = TitleCasePipe;
exports.ɵPLATFORM_BROWSER_ID = PLATFORM_BROWSER_ID;
exports.ɵPLATFORM_SERVER_ID = PLATFORM_SERVER_ID;
exports.ɵPLATFORM_WORKER_APP_ID = PLATFORM_WORKER_APP_ID;
exports.ɵPLATFORM_WORKER_UI_ID = PLATFORM_WORKER_UI_ID;
exports.isPlatformBrowser = isPlatformBrowser;
exports.isPlatformServer = isPlatformServer;
exports.isPlatformWorkerApp = isPlatformWorkerApp;
exports.isPlatformWorkerUi = isPlatformWorkerUi;
exports.VERSION = VERSION;
exports.PlatformLocation = PlatformLocation;
exports.LOCATION_INITIALIZED = LOCATION_INITIALIZED;
exports.LocationStrategy = LocationStrategy;
exports.APP_BASE_HREF = APP_BASE_HREF;
exports.HashLocationStrategy = HashLocationStrategy;
exports.PathLocationStrategy = PathLocationStrategy;
exports.Location = Location;
exports.ɵa = COMMON_DIRECTIVES;
exports.ɵb = COMMON_PIPES;
Object.defineProperty(exports, "__esModule", {
value: true
});
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(92), __webpack_require__(161), __webpack_require__(163), __webpack_require__(165), __webpack_require__(166)) : typeof define === "function" && define.amd ? define([ "exports", "@angular/core", "rxjs/observable/forkJoin", "rxjs/observable/fromPromise", "rxjs/operator/map", "@angular/platform-browser" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.forms = global.ng.forms || {}), global.ng.core, global.Rx.Observable, global.Rx.Observable, global.Rx.Observable.prototype, global.ng.platformBrowser);
})(this, function(exports, _angular_core, rxjs_observable_forkJoin, rxjs_observable_fromPromise, rxjs_operator_map, _angular_platformBrowser) {
"use strict";
var __extends = undefined && undefined.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AbstractControlDirective = function() {
function AbstractControlDirective() {}
AbstractControlDirective.prototype.control = function() {};
Object.defineProperty(AbstractControlDirective.prototype, "value", {
get: function() {
return this.control ? this.control.value : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "valid", {
get: function() {
return this.control ? this.control.valid : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "invalid", {
get: function() {
return this.control ? this.control.invalid : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "pending", {
get: function() {
return this.control ? this.control.pending : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "errors", {
get: function() {
return this.control ? this.control.errors : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
get: function() {
return this.control ? this.control.pristine : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
get: function() {
return this.control ? this.control.dirty : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "touched", {
get: function() {
return this.control ? this.control.touched : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
get: function() {
return this.control ? this.control.untouched : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "disabled", {
get: function() {
return this.control ? this.control.disabled : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "enabled", {
get: function() {
return this.control ? this.control.enabled : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", {
get: function() {
return this.control ? this.control.statusChanges : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", {
get: function() {
return this.control ? this.control.valueChanges : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "path", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
AbstractControlDirective.prototype.reset = function(value) {
if (value === void 0) {
value = undefined;
}
if (this.control) this.control.reset(value);
};
AbstractControlDirective.prototype.hasError = function(errorCode, path) {
return this.control ? this.control.hasError(errorCode, path) : false;
};
AbstractControlDirective.prototype.getError = function(errorCode, path) {
return this.control ? this.control.getError(errorCode, path) : null;
};
return AbstractControlDirective;
}();
var ControlContainer = function(_super) {
__extends(ControlContainer, _super);
function ControlContainer() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(ControlContainer.prototype, "formDirective", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ControlContainer.prototype, "path", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
return ControlContainer;
}(AbstractControlDirective);
var __assign = undefined && undefined.__assign || Object.assign || function(t) {
for (var s, i = 1, n = arguments.length; i < n; i++) {
s = arguments[i];
for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
}
return t;
};
function isEmptyInputValue(value) {
return value == null || value.length === 0;
}
var NG_VALIDATORS = new _angular_core.InjectionToken("NgValidators");
var NG_ASYNC_VALIDATORS = new _angular_core.InjectionToken("NgAsyncValidators");
var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;
var Validators = function() {
function Validators() {}
Validators.required = function(control) {
return isEmptyInputValue(control.value) ? {
required: true
} : null;
};
Validators.requiredTrue = function(control) {
return control.value === true ? null : {
required: true
};
};
Validators.email = function(control) {
return EMAIL_REGEXP.test(control.value) ? null : {
email: true
};
};
Validators.minLength = function(minLength) {
return function(control) {
if (isEmptyInputValue(control.value)) {
return null;
}
var length = control.value ? control.value.length : 0;
return length < minLength ? {
minlength: {
requiredLength: minLength,
actualLength: length
}
} : null;
};
};
Validators.maxLength = function(maxLength) {
return function(control) {
var length = control.value ? control.value.length : 0;
return length > maxLength ? {
maxlength: {
requiredLength: maxLength,
actualLength: length
}
} : null;
};
};
Validators.pattern = function(pattern) {
if (!pattern) return Validators.nullValidator;
var regex;
var regexStr;
if (typeof pattern === "string") {
regexStr = "^" + pattern + "$";
regex = new RegExp(regexStr);
} else {
regexStr = pattern.toString();
regex = pattern;
}
return function(control) {
if (isEmptyInputValue(control.value)) {
return null;
}
var value = control.value;
return regex.test(value) ? null : {
pattern: {
requiredPattern: regexStr,
actualValue: value
}
};
};
};
Validators.nullValidator = function(c) {
return null;
};
Validators.compose = function(validators) {
if (!validators) return null;
var presentValidators = validators.filter(isPresent);
if (presentValidators.length == 0) return null;
return function(control) {
return _mergeErrors(_executeValidators(control, presentValidators));
};
};
Validators.composeAsync = function(validators) {
if (!validators) return null;
var presentValidators = validators.filter(isPresent);
if (presentValidators.length == 0) return null;
return function(control) {
var observables = _executeAsyncValidators(control, presentValidators).map(toObservable);
return rxjs_operator_map.map.call(rxjs_observable_forkJoin.forkJoin(observables), _mergeErrors);
};
};
return Validators;
}();
function isPresent(o) {
return o != null;
}
function toObservable(r) {
var obs = _angular_core.ɵisPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;
if (!_angular_core.ɵisObservable(obs)) {
throw new Error("Expected validator to return Promise or Observable.");
}
return obs;
}
function _executeValidators(control, validators) {
return validators.map(function(v) {
return v(control);
});
}
function _executeAsyncValidators(control, validators) {
return validators.map(function(v) {
return v(control);
});
}
function _mergeErrors(arrayOfErrors) {
var res = arrayOfErrors.reduce(function(res, errors) {
return errors != null ? __assign({}, res, errors) : res;
}, {});
return Object.keys(res).length === 0 ? null : res;
}
var NG_VALUE_ACCESSOR = new _angular_core.InjectionToken("NgValueAccessor");
var CHECKBOX_VALUE_ACCESSOR = {
provide: NG_VALUE_ACCESSOR,
useExisting: _angular_core.forwardRef(function() {
return CheckboxControlValueAccessor;
}),
multi: true
};
var CheckboxControlValueAccessor = function() {
function CheckboxControlValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this.onChange = function(_) {};
this.onTouched = function() {};
}
CheckboxControlValueAccessor.prototype.writeValue = function(value) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "checked", value);
};
CheckboxControlValueAccessor.prototype.registerOnChange = function(fn) {
this.onChange = fn;
};
CheckboxControlValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
CheckboxControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
};
return CheckboxControlValueAccessor;
}();
CheckboxControlValueAccessor.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]",
host: {
"(change)": "onChange($event.target.checked)",
"(blur)": "onTouched()"
},
providers: [ CHECKBOX_VALUE_ACCESSOR ]
} ]
} ];
CheckboxControlValueAccessor.ctorParameters = function() {
return [ {
type: _angular_core.Renderer
}, {
type: _angular_core.ElementRef
} ];
};
var DEFAULT_VALUE_ACCESSOR = {
provide: NG_VALUE_ACCESSOR,
useExisting: _angular_core.forwardRef(function() {
return DefaultValueAccessor;
}),
multi: true
};
function _isAndroid() {
var userAgent = _angular_platformBrowser.ɵgetDOM() ? _angular_platformBrowser.ɵgetDOM().getUserAgent() : "";
return /android (\d+)/.test(userAgent.toLowerCase());
}
var COMPOSITION_BUFFER_MODE = new _angular_core.InjectionToken("CompositionEventMode");
var DefaultValueAccessor = function() {
function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this._compositionMode = _compositionMode;
this.onChange = function(_) {};
this.onTouched = function() {};
this._composing = false;
if (this._compositionMode == null) {
this._compositionMode = !_isAndroid();
}
}
DefaultValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = value == null ? "" : value;
this._renderer.setElementProperty(this._elementRef.nativeElement, "value", normalizedValue);
};
DefaultValueAccessor.prototype.registerOnChange = function(fn) {
this.onChange = fn;
};
DefaultValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
DefaultValueAccessor.prototype.setDisabledState = function(isDisabled) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
};
DefaultValueAccessor.prototype._handleInput = function(value) {
if (!this._compositionMode || this._compositionMode && !this._composing) {
this.onChange(value);
}
};
DefaultValueAccessor.prototype._compositionStart = function() {
this._composing = true;
};
DefaultValueAccessor.prototype._compositionEnd = function(value) {
this._composing = false;
this._compositionMode && this.onChange(value);
};
return DefaultValueAccessor;
}();
DefaultValueAccessor.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]",
host: {
"(input)": "_handleInput($event.target.value)",
"(blur)": "onTouched()",
"(compositionstart)": "_compositionStart()",
"(compositionend)": "_compositionEnd($event.target.value)"
},
providers: [ DEFAULT_VALUE_ACCESSOR ]
} ]
} ];
DefaultValueAccessor.ctorParameters = function() {
return [ {
type: _angular_core.Renderer
}, {
type: _angular_core.ElementRef
}, {
type: undefined,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Inject,
args: [ COMPOSITION_BUFFER_MODE ]
} ]
} ];
};
function normalizeValidator(validator) {
if (validator.validate) {
return function(c) {
return validator.validate(c);
};
} else {
return validator;
}
}
function normalizeAsyncValidator(validator) {
if (validator.validate) {
return function(c) {
return validator.validate(c);
};
} else {
return validator;
}
}
var NUMBER_VALUE_ACCESSOR = {
provide: NG_VALUE_ACCESSOR,
useExisting: _angular_core.forwardRef(function() {
return NumberValueAccessor;
}),
multi: true
};
var NumberValueAccessor = function() {
function NumberValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this.onChange = function(_) {};
this.onTouched = function() {};
}
NumberValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = value == null ? "" : value;
this._renderer.setElementProperty(this._elementRef.nativeElement, "value", normalizedValue);
};
NumberValueAccessor.prototype.registerOnChange = function(fn) {
this.onChange = function(value) {
fn(value == "" ? null : parseFloat(value));
};
};
NumberValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
NumberValueAccessor.prototype.setDisabledState = function(isDisabled) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
};
return NumberValueAccessor;
}();
NumberValueAccessor.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]",
host: {
"(change)": "onChange($event.target.value)",
"(input)": "onChange($event.target.value)",
"(blur)": "onTouched()"
},
providers: [ NUMBER_VALUE_ACCESSOR ]
} ]
} ];
NumberValueAccessor.ctorParameters = function() {
return [ {
type: _angular_core.Renderer
}, {
type: _angular_core.ElementRef
} ];
};
function unimplemented() {
throw new Error("unimplemented");
}
var NgControl = function(_super) {
__extends(NgControl, _super);
function NgControl() {
var _this = _super.apply(this, arguments) || this;
_this._parent = null;
_this.name = null;
_this.valueAccessor = null;
_this._rawValidators = [];
_this._rawAsyncValidators = [];
return _this;
}
Object.defineProperty(NgControl.prototype, "validator", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControl.prototype, "asyncValidator", {
get: function() {
return unimplemented();
},
enumerable: true,
configurable: true
});
NgControl.prototype.viewToModelUpdate = function(newValue) {};
return NgControl;
}(AbstractControlDirective);
var RADIO_VALUE_ACCESSOR = {
provide: NG_VALUE_ACCESSOR,
useExisting: _angular_core.forwardRef(function() {
return RadioControlValueAccessor;
}),
multi: true
};
var RadioControlRegistry = function() {
function RadioControlRegistry() {
this._accessors = [];
}
RadioControlRegistry.prototype.add = function(control, accessor) {
this._accessors.push([ control, accessor ]);
};
RadioControlRegistry.prototype.remove = function(accessor) {
for (var i = this._accessors.length - 1; i >= 0; --i) {
if (this._accessors[i][1] === accessor) {
this._accessors.splice(i, 1);
return;
}
}
};
RadioControlRegistry.prototype.select = function(accessor) {
var _this = this;
this._accessors.forEach(function(c) {
if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
c[1].fireUncheck(accessor.value);
}
});
};
RadioControlRegistry.prototype._isSameGroup = function(controlPair, accessor) {
if (!controlPair[0].control) return false;
return controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;
};
return RadioControlRegistry;
}();
RadioControlRegistry.decorators = [ {
type: _angular_core.Injectable
} ];
RadioControlRegistry.ctorParameters = function() {
return [];
};
var RadioControlValueAccessor = function() {
function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this._registry = _registry;
this._injector = _injector;
this.onChange = function() {};
this.onTouched = function() {};
}
RadioControlValueAccessor.prototype.ngOnInit = function() {
this._control = this._injector.get(NgControl);
this._checkName();
this._registry.add(this._control, this);
};
RadioControlValueAccessor.prototype.ngOnDestroy = function() {
this._registry.remove(this);
};
RadioControlValueAccessor.prototype.writeValue = function(value) {
this._state = value === this.value;
this._renderer.setElementProperty(this._elementRef.nativeElement, "checked", this._state);
};
RadioControlValueAccessor.prototype.registerOnChange = function(fn) {
var _this = this;
this._fn = fn;
this.onChange = function() {
fn(_this.value);
_this._registry.select(_this);
};
};
RadioControlValueAccessor.prototype.fireUncheck = function(value) {
this.writeValue(value);
};
RadioControlValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
RadioControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
};
RadioControlValueAccessor.prototype._checkName = function() {
if (this.name && this.formControlName && this.name !== this.formControlName) {
this._throwNameError();
}
if (!this.name && this.formControlName) this.name = this.formControlName;
};
RadioControlValueAccessor.prototype._throwNameError = function() {
throw new Error('\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type="radio" formControlName="food" name="food">\n    ');
};
return RadioControlValueAccessor;
}();
RadioControlValueAccessor.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]",
host: {
"(change)": "onChange()",
"(blur)": "onTouched()"
},
providers: [ RADIO_VALUE_ACCESSOR ]
} ]
} ];
RadioControlValueAccessor.ctorParameters = function() {
return [ {
type: _angular_core.Renderer
}, {
type: _angular_core.ElementRef
}, {
type: RadioControlRegistry
}, {
type: _angular_core.Injector
} ];
};
RadioControlValueAccessor.propDecorators = {
name: [ {
type: _angular_core.Input
} ],
formControlName: [ {
type: _angular_core.Input
} ],
value: [ {
type: _angular_core.Input
} ]
};
var RANGE_VALUE_ACCESSOR = {
provide: NG_VALUE_ACCESSOR,
useExisting: _angular_core.forwardRef(function() {
return RangeValueAccessor;
}),
multi: true
};
var RangeValueAccessor = function() {
function RangeValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this.onChange = function(_) {};
this.onTouched = function() {};
}
RangeValueAccessor.prototype.writeValue = function(value) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "value", parseFloat(value));
};
RangeValueAccessor.prototype.registerOnChange = function(fn) {
this.onChange = function(value) {
fn(value == "" ? null : parseFloat(value));
};
};
RangeValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
RangeValueAccessor.prototype.setDisabledState = function(isDisabled) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
};
return RangeValueAccessor;
}();
RangeValueAccessor.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]",
host: {
"(change)": "onChange($event.target.value)",
"(input)": "onChange($event.target.value)",
"(blur)": "onTouched()"
},
providers: [ RANGE_VALUE_ACCESSOR ]
} ]
} ];
RangeValueAccessor.ctorParameters = function() {
return [ {
type: _angular_core.Renderer
}, {
type: _angular_core.ElementRef
} ];
};
var SELECT_VALUE_ACCESSOR = {
provide: NG_VALUE_ACCESSOR,
useExisting: _angular_core.forwardRef(function() {
return SelectControlValueAccessor;
}),
multi: true
};
function _buildValueString(id, value) {
if (id == null) return "" + value;
if (value && typeof value === "object") value = "Object";
return (id + ": " + value).slice(0, 50);
}
function _extractId(valueString) {
return valueString.split(":")[0];
}
var SelectControlValueAccessor = function() {
function SelectControlValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this._optionMap = new Map();
this._idCounter = 0;
this.onChange = function(_) {};
this.onTouched = function() {};
this._compareWith = _angular_core.ɵlooseIdentical;
}
Object.defineProperty(SelectControlValueAccessor.prototype, "compareWith", {
set: function(fn) {
if (typeof fn !== "function") {
throw new Error("compareWith must be a function, but received " + JSON.stringify(fn));
}
this._compareWith = fn;
},
enumerable: true,
configurable: true
});
SelectControlValueAccessor.prototype.writeValue = function(value) {
this.value = value;
var id = this._getOptionId(value);
if (id == null) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "selectedIndex", -1);
}
var valueString = _buildValueString(id, value);
this._renderer.setElementProperty(this._elementRef.nativeElement, "value", valueString);
};
SelectControlValueAccessor.prototype.registerOnChange = function(fn) {
var _this = this;
this.onChange = function(valueString) {
_this.value = valueString;
fn(_this._getOptionValue(valueString));
};
};
SelectControlValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
SelectControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
};
SelectControlValueAccessor.prototype._registerOption = function() {
return (this._idCounter++).toString();
};
SelectControlValueAccessor.prototype._getOptionId = function(value) {
for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
var id = _a[_i];
if (this._compareWith(this._optionMap.get(id), value)) return id;
}
return null;
};
SelectControlValueAccessor.prototype._getOptionValue = function(valueString) {
var id = _extractId(valueString);
return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
};
return SelectControlValueAccessor;
}();
SelectControlValueAccessor.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]",
host: {
"(change)": "onChange($event.target.value)",
"(blur)": "onTouched()"
},
providers: [ SELECT_VALUE_ACCESSOR ]
} ]
} ];
SelectControlValueAccessor.ctorParameters = function() {
return [ {
type: _angular_core.Renderer
}, {
type: _angular_core.ElementRef
} ];
};
SelectControlValueAccessor.propDecorators = {
compareWith: [ {
type: _angular_core.Input
} ]
};
var NgSelectOption = function() {
function NgSelectOption(_element, _renderer, _select) {
this._element = _element;
this._renderer = _renderer;
this._select = _select;
if (this._select) this.id = this._select._registerOption();
}
Object.defineProperty(NgSelectOption.prototype, "ngValue", {
set: function(value) {
if (this._select == null) return;
this._select._optionMap.set(this.id, value);
this._setElementValue(_buildValueString(this.id, value));
this._select.writeValue(this._select.value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgSelectOption.prototype, "value", {
set: function(value) {
this._setElementValue(value);
if (this._select) this._select.writeValue(this._select.value);
},
enumerable: true,
configurable: true
});
NgSelectOption.prototype._setElementValue = function(value) {
this._renderer.setElementProperty(this._element.nativeElement, "value", value);
};
NgSelectOption.prototype.ngOnDestroy = function() {
if (this._select) {
this._select._optionMap.delete(this.id);
this._select.writeValue(this._select.value);
}
};
return NgSelectOption;
}();
NgSelectOption.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "option"
} ]
} ];
NgSelectOption.ctorParameters = function() {
return [ {
type: _angular_core.ElementRef
}, {
type: _angular_core.Renderer
}, {
type: SelectControlValueAccessor,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Host
} ]
} ];
};
NgSelectOption.propDecorators = {
ngValue: [ {
type: _angular_core.Input,
args: [ "ngValue" ]
} ],
value: [ {
type: _angular_core.Input,
args: [ "value" ]
} ]
};
var SELECT_MULTIPLE_VALUE_ACCESSOR = {
provide: NG_VALUE_ACCESSOR,
useExisting: _angular_core.forwardRef(function() {
return SelectMultipleControlValueAccessor;
}),
multi: true
};
function _buildValueString$1(id, value) {
if (id == null) return "" + value;
if (typeof value === "string") value = "'" + value + "'";
if (value && typeof value === "object") value = "Object";
return (id + ": " + value).slice(0, 50);
}
function _extractId$1(valueString) {
return valueString.split(":")[0];
}
var SelectMultipleControlValueAccessor = function() {
function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this._optionMap = new Map();
this._idCounter = 0;
this.onChange = function(_) {};
this.onTouched = function() {};
this._compareWith = _angular_core.ɵlooseIdentical;
}
Object.defineProperty(SelectMultipleControlValueAccessor.prototype, "compareWith", {
set: function(fn) {
if (typeof fn !== "function") {
throw new Error("compareWith must be a function, but received " + JSON.stringify(fn));
}
this._compareWith = fn;
},
enumerable: true,
configurable: true
});
SelectMultipleControlValueAccessor.prototype.writeValue = function(value) {
var _this = this;
this.value = value;
var optionSelectedStateSetter;
if (Array.isArray(value)) {
var ids_1 = value.map(function(v) {
return _this._getOptionId(v);
});
optionSelectedStateSetter = function(opt, o) {
opt._setSelected(ids_1.indexOf(o.toString()) > -1);
};
} else {
optionSelectedStateSetter = function(opt, o) {
opt._setSelected(false);
};
}
this._optionMap.forEach(optionSelectedStateSetter);
};
SelectMultipleControlValueAccessor.prototype.registerOnChange = function(fn) {
var _this = this;
this.onChange = function(_) {
var selected = [];
if (_.hasOwnProperty("selectedOptions")) {
var options = _.selectedOptions;
for (var i = 0; i < options.length; i++) {
var opt = options.item(i);
var val = _this._getOptionValue(opt.value);
selected.push(val);
}
} else {
var options = _.options;
for (var i = 0; i < options.length; i++) {
var opt = options.item(i);
if (opt.selected) {
var val = _this._getOptionValue(opt.value);
selected.push(val);
}
}
}
_this.value = selected;
fn(selected);
};
};
SelectMultipleControlValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
SelectMultipleControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
};
SelectMultipleControlValueAccessor.prototype._registerOption = function(value) {
var id = (this._idCounter++).toString();
this._optionMap.set(id, value);
return id;
};
SelectMultipleControlValueAccessor.prototype._getOptionId = function(value) {
for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
var id = _a[_i];
if (this._compareWith(this._optionMap.get(id)._value, value)) return id;
}
return null;
};
SelectMultipleControlValueAccessor.prototype._getOptionValue = function(valueString) {
var id = _extractId$1(valueString);
return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
};
return SelectMultipleControlValueAccessor;
}();
SelectMultipleControlValueAccessor.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]",
host: {
"(change)": "onChange($event.target)",
"(blur)": "onTouched()"
},
providers: [ SELECT_MULTIPLE_VALUE_ACCESSOR ]
} ]
} ];
SelectMultipleControlValueAccessor.ctorParameters = function() {
return [ {
type: _angular_core.Renderer
}, {
type: _angular_core.ElementRef
} ];
};
SelectMultipleControlValueAccessor.propDecorators = {
compareWith: [ {
type: _angular_core.Input
} ]
};
var NgSelectMultipleOption = function() {
function NgSelectMultipleOption(_element, _renderer, _select) {
this._element = _element;
this._renderer = _renderer;
this._select = _select;
if (this._select) {
this.id = this._select._registerOption(this);
}
}
Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", {
set: function(value) {
if (this._select == null) return;
this._value = value;
this._setElementValue(_buildValueString$1(this.id, value));
this._select.writeValue(this._select.value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgSelectMultipleOption.prototype, "value", {
set: function(value) {
if (this._select) {
this._value = value;
this._setElementValue(_buildValueString$1(this.id, value));
this._select.writeValue(this._select.value);
} else {
this._setElementValue(value);
}
},
enumerable: true,
configurable: true
});
NgSelectMultipleOption.prototype._setElementValue = function(value) {
this._renderer.setElementProperty(this._element.nativeElement, "value", value);
};
NgSelectMultipleOption.prototype._setSelected = function(selected) {
this._renderer.setElementProperty(this._element.nativeElement, "selected", selected);
};
NgSelectMultipleOption.prototype.ngOnDestroy = function() {
if (this._select) {
this._select._optionMap.delete(this.id);
this._select.writeValue(this._select.value);
}
};
return NgSelectMultipleOption;
}();
NgSelectMultipleOption.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "option"
} ]
} ];
NgSelectMultipleOption.ctorParameters = function() {
return [ {
type: _angular_core.ElementRef
}, {
type: _angular_core.Renderer
}, {
type: SelectMultipleControlValueAccessor,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Host
} ]
} ];
};
NgSelectMultipleOption.propDecorators = {
ngValue: [ {
type: _angular_core.Input,
args: [ "ngValue" ]
} ],
value: [ {
type: _angular_core.Input,
args: [ "value" ]
} ]
};
function controlPath(name, parent) {
return parent.path.concat([ name ]);
}
function setUpControl(control, dir) {
if (!control) _throwError(dir, "Cannot find control with");
if (!dir.valueAccessor) _throwError(dir, "No value accessor for form control with");
control.validator = Validators.compose([ control.validator, dir.validator ]);
control.asyncValidator = Validators.composeAsync([ control.asyncValidator, dir.asyncValidator ]);
dir.valueAccessor.writeValue(control.value);
dir.valueAccessor.registerOnChange(function(newValue) {
dir.viewToModelUpdate(newValue);
control.markAsDirty();
control.setValue(newValue, {
emitModelToViewChange: false
});
});
dir.valueAccessor.registerOnTouched(function() {
return control.markAsTouched();
});
control.registerOnChange(function(newValue, emitModelEvent) {
dir.valueAccessor.writeValue(newValue);
if (emitModelEvent) dir.viewToModelUpdate(newValue);
});
if (dir.valueAccessor.setDisabledState) {
control.registerOnDisabledChange(function(isDisabled) {
dir.valueAccessor.setDisabledState(isDisabled);
});
}
dir._rawValidators.forEach(function(validator) {
if (validator.registerOnValidatorChange) validator.registerOnValidatorChange(function() {
return control.updateValueAndValidity();
});
});
dir._rawAsyncValidators.forEach(function(validator) {
if (validator.registerOnValidatorChange) validator.registerOnValidatorChange(function() {
return control.updateValueAndValidity();
});
});
}
function cleanUpControl(control, dir) {
dir.valueAccessor.registerOnChange(function() {
return _noControlError(dir);
});
dir.valueAccessor.registerOnTouched(function() {
return _noControlError(dir);
});
dir._rawValidators.forEach(function(validator) {
if (validator.registerOnValidatorChange) {
validator.registerOnValidatorChange(null);
}
});
dir._rawAsyncValidators.forEach(function(validator) {
if (validator.registerOnValidatorChange) {
validator.registerOnValidatorChange(null);
}
});
if (control) control._clearChangeFns();
}
function setUpFormContainer(control, dir) {
if (control == null) _throwError(dir, "Cannot find control with");
control.validator = Validators.compose([ control.validator, dir.validator ]);
control.asyncValidator = Validators.composeAsync([ control.asyncValidator, dir.asyncValidator ]);
}
function _noControlError(dir) {
return _throwError(dir, "There is no FormControl instance attached to form control element with");
}
function _throwError(dir, message) {
var messageEnd;
if (dir.path.length > 1) {
messageEnd = "path: '" + dir.path.join(" -> ") + "'";
} else if (dir.path[0]) {
messageEnd = "name: '" + dir.path + "'";
} else {
messageEnd = "unspecified name attribute";
}
throw new Error(message + " " + messageEnd);
}
function composeValidators(validators) {
return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;
}
function composeAsyncValidators(validators) {
return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;
}
function isPropertyUpdated(changes, viewModel) {
if (!changes.hasOwnProperty("model")) return false;
var change = changes["model"];
if (change.isFirstChange()) return true;
return !_angular_core.ɵlooseIdentical(viewModel, change.currentValue);
}
var BUILTIN_ACCESSORS = [ CheckboxControlValueAccessor, RangeValueAccessor, NumberValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor ];
function isBuiltInAccessor(valueAccessor) {
return BUILTIN_ACCESSORS.some(function(a) {
return valueAccessor.constructor === a;
});
}
function selectValueAccessor(dir, valueAccessors) {
if (!valueAccessors) return null;
var defaultAccessor = undefined;
var builtinAccessor = undefined;
var customAccessor = undefined;
valueAccessors.forEach(function(v) {
if (v.constructor === DefaultValueAccessor) {
defaultAccessor = v;
} else if (isBuiltInAccessor(v)) {
if (builtinAccessor) _throwError(dir, "More than one built-in value accessor matches form control with");
builtinAccessor = v;
} else {
if (customAccessor) _throwError(dir, "More than one custom value accessor matches form control with");
customAccessor = v;
}
});
if (customAccessor) return customAccessor;
if (builtinAccessor) return builtinAccessor;
if (defaultAccessor) return defaultAccessor;
_throwError(dir, "No valid value accessor for form control with");
return null;
}
var AbstractFormGroupDirective = function(_super) {
__extends(AbstractFormGroupDirective, _super);
function AbstractFormGroupDirective() {
return _super !== null && _super.apply(this, arguments) || this;
}
AbstractFormGroupDirective.prototype.ngOnInit = function() {
this._checkParentType();
this.formDirective.addFormGroup(this);
};
AbstractFormGroupDirective.prototype.ngOnDestroy = function() {
if (this.formDirective) {
this.formDirective.removeFormGroup(this);
}
};
Object.defineProperty(AbstractFormGroupDirective.prototype, "control", {
get: function() {
return this.formDirective.getFormGroup(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractFormGroupDirective.prototype, "path", {
get: function() {
return controlPath(this.name, this._parent);
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", {
get: function() {
return this._parent ? this._parent.formDirective : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", {
get: function() {
return composeValidators(this._validators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", {
get: function() {
return composeAsyncValidators(this._asyncValidators);
},
enumerable: true,
configurable: true
});
AbstractFormGroupDirective.prototype._checkParentType = function() {};
return AbstractFormGroupDirective;
}(ControlContainer);
var AbstractControlStatus = function() {
function AbstractControlStatus(cd) {
this._cd = cd;
}
Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", {
get: function() {
return this._cd.control ? this._cd.control.untouched : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", {
get: function() {
return this._cd.control ? this._cd.control.touched : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", {
get: function() {
return this._cd.control ? this._cd.control.pristine : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", {
get: function() {
return this._cd.control ? this._cd.control.dirty : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", {
get: function() {
return this._cd.control ? this._cd.control.valid : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", {
get: function() {
return this._cd.control ? this._cd.control.invalid : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlStatus.prototype, "ngClassPending", {
get: function() {
return this._cd.control ? this._cd.control.pending : false;
},
enumerable: true,
configurable: true
});
return AbstractControlStatus;
}();
var ngControlStatusHost = {
"[class.ng-untouched]": "ngClassUntouched",
"[class.ng-touched]": "ngClassTouched",
"[class.ng-pristine]": "ngClassPristine",
"[class.ng-dirty]": "ngClassDirty",
"[class.ng-valid]": "ngClassValid",
"[class.ng-invalid]": "ngClassInvalid",
"[class.ng-pending]": "ngClassPending"
};
var NgControlStatus = function(_super) {
__extends(NgControlStatus, _super);
function NgControlStatus(cd) {
return _super.call(this, cd) || this;
}
return NgControlStatus;
}(AbstractControlStatus);
NgControlStatus.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[formControlName],[ngModel],[formControl]",
host: ngControlStatusHost
} ]
} ];
NgControlStatus.ctorParameters = function() {
return [ {
type: NgControl,
decorators: [ {
type: _angular_core.Self
} ]
} ];
};
var NgControlStatusGroup = function(_super) {
__extends(NgControlStatusGroup, _super);
function NgControlStatusGroup(cd) {
return _super.call(this, cd) || this;
}
return NgControlStatusGroup;
}(AbstractControlStatus);
NgControlStatusGroup.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]",
host: ngControlStatusHost
} ]
} ];
NgControlStatusGroup.ctorParameters = function() {
return [ {
type: ControlContainer,
decorators: [ {
type: _angular_core.Self
} ]
} ];
};
var VALID = "VALID";
var INVALID = "INVALID";
var PENDING = "PENDING";
var DISABLED = "DISABLED";
function _find(control, path, delimiter) {
if (path == null) return null;
if (!(path instanceof Array)) {
path = path.split(delimiter);
}
if (path instanceof Array && path.length === 0) return null;
return path.reduce(function(v, name) {
if (v instanceof FormGroup) {
return v.controls[name] || null;
}
if (v instanceof FormArray) {
return v.at(name) || null;
}
return null;
}, control);
}
function coerceToValidator(validator) {
return Array.isArray(validator) ? composeValidators(validator) : validator || null;
}
function coerceToAsyncValidator(asyncValidator) {
return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator || null;
}
var AbstractControl = function() {
function AbstractControl(validator, asyncValidator) {
this.validator = validator;
this.asyncValidator = asyncValidator;
this._onCollectionChange = function() {};
this._pristine = true;
this._touched = false;
this._onDisabledChange = [];
}
Object.defineProperty(AbstractControl.prototype, "value", {
get: function() {
return this._value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "status", {
get: function() {
return this._status;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "valid", {
get: function() {
return this._status === VALID;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "invalid", {
get: function() {
return this._status === INVALID;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "pending", {
get: function() {
return this._status == PENDING;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "disabled", {
get: function() {
return this._status === DISABLED;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "enabled", {
get: function() {
return this._status !== DISABLED;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "errors", {
get: function() {
return this._errors;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "pristine", {
get: function() {
return this._pristine;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "dirty", {
get: function() {
return !this.pristine;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "touched", {
get: function() {
return this._touched;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "untouched", {
get: function() {
return !this._touched;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "valueChanges", {
get: function() {
return this._valueChanges;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "statusChanges", {
get: function() {
return this._statusChanges;
},
enumerable: true,
configurable: true
});
AbstractControl.prototype.setValidators = function(newValidator) {
this.validator = coerceToValidator(newValidator);
};
AbstractControl.prototype.setAsyncValidators = function(newValidator) {
this.asyncValidator = coerceToAsyncValidator(newValidator);
};
AbstractControl.prototype.clearValidators = function() {
this.validator = null;
};
AbstractControl.prototype.clearAsyncValidators = function() {
this.asyncValidator = null;
};
AbstractControl.prototype.markAsTouched = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
this._touched = true;
if (this._parent && !onlySelf) {
this._parent.markAsTouched({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype.markAsUntouched = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
this._touched = false;
this._forEachChild(function(control) {
control.markAsUntouched({
onlySelf: true
});
});
if (this._parent && !onlySelf) {
this._parent._updateTouched({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype.markAsDirty = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
this._pristine = false;
if (this._parent && !onlySelf) {
this._parent.markAsDirty({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype.markAsPristine = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
this._pristine = true;
this._forEachChild(function(control) {
control.markAsPristine({
onlySelf: true
});
});
if (this._parent && !onlySelf) {
this._parent._updatePristine({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype.markAsPending = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
this._status = PENDING;
if (this._parent && !onlySelf) {
this._parent.markAsPending({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype.disable = function(_a) {
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
this._status = DISABLED;
this._errors = null;
this._forEachChild(function(control) {
control.disable({
onlySelf: true
});
});
this._updateValue();
if (emitEvent !== false) {
this._valueChanges.emit(this._value);
this._statusChanges.emit(this._status);
}
this._updateAncestors(!!onlySelf);
this._onDisabledChange.forEach(function(changeFn) {
return changeFn(true);
});
};
AbstractControl.prototype.enable = function(_a) {
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
this._status = VALID;
this._forEachChild(function(control) {
control.enable({
onlySelf: true
});
});
this.updateValueAndValidity({
onlySelf: true,
emitEvent: emitEvent
});
this._updateAncestors(!!onlySelf);
this._onDisabledChange.forEach(function(changeFn) {
return changeFn(false);
});
};
AbstractControl.prototype._updateAncestors = function(onlySelf) {
if (this._parent && !onlySelf) {
this._parent.updateValueAndValidity();
this._parent._updatePristine();
this._parent._updateTouched();
}
};
AbstractControl.prototype.setParent = function(parent) {
this._parent = parent;
};
AbstractControl.prototype.setValue = function(value, options) {};
AbstractControl.prototype.patchValue = function(value, options) {};
AbstractControl.prototype.reset = function(value, options) {};
AbstractControl.prototype.updateValueAndValidity = function(_a) {
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
this._setInitialStatus();
this._updateValue();
if (this.enabled) {
this._cancelExistingSubscription();
this._errors = this._runValidator();
this._status = this._calculateStatus();
if (this._status === VALID || this._status === PENDING) {
this._runAsyncValidator(emitEvent);
}
}
if (emitEvent !== false) {
this._valueChanges.emit(this._value);
this._statusChanges.emit(this._status);
}
if (this._parent && !onlySelf) {
this._parent.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
}
};
AbstractControl.prototype._updateTreeValidity = function(_a) {
var emitEvent = (_a === void 0 ? {
emitEvent: true
} : _a).emitEvent;
this._forEachChild(function(ctrl) {
return ctrl._updateTreeValidity({
emitEvent: emitEvent
});
});
this.updateValueAndValidity({
onlySelf: true,
emitEvent: emitEvent
});
};
AbstractControl.prototype._setInitialStatus = function() {
this._status = this._allControlsDisabled() ? DISABLED : VALID;
};
AbstractControl.prototype._runValidator = function() {
return this.validator ? this.validator(this) : null;
};
AbstractControl.prototype._runAsyncValidator = function(emitEvent) {
var _this = this;
if (this.asyncValidator) {
this._status = PENDING;
var obs = toObservable(this.asyncValidator(this));
this._asyncValidationSubscription = obs.subscribe(function(errors) {
return _this.setErrors(errors, {
emitEvent: emitEvent
});
});
}
};
AbstractControl.prototype._cancelExistingSubscription = function() {
if (this._asyncValidationSubscription) {
this._asyncValidationSubscription.unsubscribe();
}
};
AbstractControl.prototype.setErrors = function(errors, _a) {
var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
this._errors = errors;
this._updateControlsErrors(emitEvent !== false);
};
AbstractControl.prototype.get = function(path) {
return _find(this, path, ".");
};
AbstractControl.prototype.getError = function(errorCode, path) {
var control = path ? this.get(path) : this;
return control && control._errors ? control._errors[errorCode] : null;
};
AbstractControl.prototype.hasError = function(errorCode, path) {
return !!this.getError(errorCode, path);
};
Object.defineProperty(AbstractControl.prototype, "root", {
get: function() {
var x = this;
while (x._parent) {
x = x._parent;
}
return x;
},
enumerable: true,
configurable: true
});
AbstractControl.prototype._updateControlsErrors = function(emitEvent) {
this._status = this._calculateStatus();
if (emitEvent) {
this._statusChanges.emit(this._status);
}
if (this._parent) {
this._parent._updateControlsErrors(emitEvent);
}
};
AbstractControl.prototype._initObservables = function() {
this._valueChanges = new _angular_core.EventEmitter();
this._statusChanges = new _angular_core.EventEmitter();
};
AbstractControl.prototype._calculateStatus = function() {
if (this._allControlsDisabled()) return DISABLED;
if (this._errors) return INVALID;
if (this._anyControlsHaveStatus(PENDING)) return PENDING;
if (this._anyControlsHaveStatus(INVALID)) return INVALID;
return VALID;
};
AbstractControl.prototype._updateValue = function() {};
AbstractControl.prototype._forEachChild = function(cb) {};
AbstractControl.prototype._anyControls = function(condition) {};
AbstractControl.prototype._allControlsDisabled = function() {};
AbstractControl.prototype._anyControlsHaveStatus = function(status) {
return this._anyControls(function(control) {
return control.status === status;
});
};
AbstractControl.prototype._anyControlsDirty = function() {
return this._anyControls(function(control) {
return control.dirty;
});
};
AbstractControl.prototype._anyControlsTouched = function() {
return this._anyControls(function(control) {
return control.touched;
});
};
AbstractControl.prototype._updatePristine = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
this._pristine = !this._anyControlsDirty();
if (this._parent && !onlySelf) {
this._parent._updatePristine({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype._updateTouched = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
this._touched = this._anyControlsTouched();
if (this._parent && !onlySelf) {
this._parent._updateTouched({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype._isBoxedValue = function(formState) {
return typeof formState === "object" && formState !== null && Object.keys(formState).length === 2 && "value" in formState && "disabled" in formState;
};
AbstractControl.prototype._registerOnCollectionChange = function(fn) {
this._onCollectionChange = fn;
};
return AbstractControl;
}();
var FormControl = function(_super) {
__extends(FormControl, _super);
function FormControl(formState, validator, asyncValidator) {
if (formState === void 0) {
formState = null;
}
var _this = _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator)) || this;
_this._onChange = [];
_this._applyFormState(formState);
_this.updateValueAndValidity({
onlySelf: true,
emitEvent: false
});
_this._initObservables();
return _this;
}
FormControl.prototype.setValue = function(value, _a) {
var _this = this;
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;
this._value = value;
if (this._onChange.length && emitModelToViewChange !== false) {
this._onChange.forEach(function(changeFn) {
return changeFn(_this._value, emitViewToModelChange !== false);
});
}
this.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
};
FormControl.prototype.patchValue = function(value, options) {
if (options === void 0) {
options = {};
}
this.setValue(value, options);
};
FormControl.prototype.reset = function(formState, _a) {
if (formState === void 0) {
formState = null;
}
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
this._applyFormState(formState);
this.markAsPristine({
onlySelf: onlySelf
});
this.markAsUntouched({
onlySelf: onlySelf
});
this.setValue(this._value, {
onlySelf: onlySelf,
emitEvent: emitEvent
});
};
FormControl.prototype._updateValue = function() {};
FormControl.prototype._anyControls = function(condition) {
return false;
};
FormControl.prototype._allControlsDisabled = function() {
return this.disabled;
};
FormControl.prototype.registerOnChange = function(fn) {
this._onChange.push(fn);
};
FormControl.prototype._clearChangeFns = function() {
this._onChange = [];
this._onDisabledChange = [];
this._onCollectionChange = function() {};
};
FormControl.prototype.registerOnDisabledChange = function(fn) {
this._onDisabledChange.push(fn);
};
FormControl.prototype._forEachChild = function(cb) {};
FormControl.prototype._applyFormState = function(formState) {
if (this._isBoxedValue(formState)) {
this._value = formState.value;
formState.disabled ? this.disable({
onlySelf: true,
emitEvent: false
}) : this.enable({
onlySelf: true,
emitEvent: false
});
} else {
this._value = formState;
}
};
return FormControl;
}(AbstractControl);
var FormGroup = function(_super) {
__extends(FormGroup, _super);
function FormGroup(controls, validator, asyncValidator) {
var _this = _super.call(this, validator || null, asyncValidator || null) || this;
_this.controls = controls;
_this._initObservables();
_this._setUpControls();
_this.updateValueAndValidity({
onlySelf: true,
emitEvent: false
});
return _this;
}
FormGroup.prototype.registerControl = function(name, control) {
if (this.controls[name]) return this.controls[name];
this.controls[name] = control;
control.setParent(this);
control._registerOnCollectionChange(this._onCollectionChange);
return control;
};
FormGroup.prototype.addControl = function(name, control) {
this.registerControl(name, control);
this.updateValueAndValidity();
this._onCollectionChange();
};
FormGroup.prototype.removeControl = function(name) {
if (this.controls[name]) this.controls[name]._registerOnCollectionChange(function() {});
delete this.controls[name];
this.updateValueAndValidity();
this._onCollectionChange();
};
FormGroup.prototype.setControl = function(name, control) {
if (this.controls[name]) this.controls[name]._registerOnCollectionChange(function() {});
delete this.controls[name];
if (control) this.registerControl(name, control);
this.updateValueAndValidity();
this._onCollectionChange();
};
FormGroup.prototype.contains = function(controlName) {
return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
};
FormGroup.prototype.setValue = function(value, _a) {
var _this = this;
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
this._checkAllValuesPresent(value);
Object.keys(value).forEach(function(name) {
_this._throwIfControlMissing(name);
_this.controls[name].setValue(value[name], {
onlySelf: true,
emitEvent: emitEvent
});
});
this.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
};
FormGroup.prototype.patchValue = function(value, _a) {
var _this = this;
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
Object.keys(value).forEach(function(name) {
if (_this.controls[name]) {
_this.controls[name].patchValue(value[name], {
onlySelf: true,
emitEvent: emitEvent
});
}
});
this.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
};
FormGroup.prototype.reset = function(value, _a) {
if (value === void 0) {
value = {};
}
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
this._forEachChild(function(control, name) {
control.reset(value[name], {
onlySelf: true,
emitEvent: emitEvent
});
});
this.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
this._updatePristine({
onlySelf: onlySelf
});
this._updateTouched({
onlySelf: onlySelf
});
};
FormGroup.prototype.getRawValue = function() {
return this._reduceChildren({}, function(acc, control, name) {
acc[name] = control instanceof FormControl ? control.value : control.getRawValue();
return acc;
});
};
FormGroup.prototype._throwIfControlMissing = function(name) {
if (!Object.keys(this.controls).length) {
throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
}
if (!this.controls[name]) {
throw new Error("Cannot find form control with name: " + name + ".");
}
};
FormGroup.prototype._forEachChild = function(cb) {
var _this = this;
Object.keys(this.controls).forEach(function(k) {
return cb(_this.controls[k], k);
});
};
FormGroup.prototype._setUpControls = function() {
var _this = this;
this._forEachChild(function(control) {
control.setParent(_this);
control._registerOnCollectionChange(_this._onCollectionChange);
});
};
FormGroup.prototype._updateValue = function() {
this._value = this._reduceValue();
};
FormGroup.prototype._anyControls = function(condition) {
var _this = this;
var res = false;
this._forEachChild(function(control, name) {
res = res || _this.contains(name) && condition(control);
});
return res;
};
FormGroup.prototype._reduceValue = function() {
var _this = this;
return this._reduceChildren({}, function(acc, control, name) {
if (control.enabled || _this.disabled) {
acc[name] = control.value;
}
return acc;
});
};
FormGroup.prototype._reduceChildren = function(initValue, fn) {
var res = initValue;
this._forEachChild(function(control, name) {
res = fn(res, control, name);
});
return res;
};
FormGroup.prototype._allControlsDisabled = function() {
for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {
var controlName = _a[_i];
if (this.controls[controlName].enabled) {
return false;
}
}
return Object.keys(this.controls).length > 0 || this.disabled;
};
FormGroup.prototype._checkAllValuesPresent = function(value) {
this._forEachChild(function(control, name) {
if (value[name] === undefined) {
throw new Error("Must supply a value for form control with name: '" + name + "'.");
}
});
};
return FormGroup;
}(AbstractControl);
var FormArray = function(_super) {
__extends(FormArray, _super);
function FormArray(controls, validator, asyncValidator) {
var _this = _super.call(this, validator || null, asyncValidator || null) || this;
_this.controls = controls;
_this._initObservables();
_this._setUpControls();
_this.updateValueAndValidity({
onlySelf: true,
emitEvent: false
});
return _this;
}
FormArray.prototype.at = function(index) {
return this.controls[index];
};
FormArray.prototype.push = function(control) {
this.controls.push(control);
this._registerControl(control);
this.updateValueAndValidity();
this._onCollectionChange();
};
FormArray.prototype.insert = function(index, control) {
this.controls.splice(index, 0, control);
this._registerControl(control);
this.updateValueAndValidity();
this._onCollectionChange();
};
FormArray.prototype.removeAt = function(index) {
if (this.controls[index]) this.controls[index]._registerOnCollectionChange(function() {});
this.controls.splice(index, 1);
this.updateValueAndValidity();
this._onCollectionChange();
};
FormArray.prototype.setControl = function(index, control) {
if (this.controls[index]) this.controls[index]._registerOnCollectionChange(function() {});
this.controls.splice(index, 1);
if (control) {
this.controls.splice(index, 0, control);
this._registerControl(control);
}
this.updateValueAndValidity();
this._onCollectionChange();
};
Object.defineProperty(FormArray.prototype, "length", {
get: function() {
return this.controls.length;
},
enumerable: true,
configurable: true
});
FormArray.prototype.setValue = function(value, _a) {
var _this = this;
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
this._checkAllValuesPresent(value);
value.forEach(function(newValue, index) {
_this._throwIfControlMissing(index);
_this.at(index).setValue(newValue, {
onlySelf: true,
emitEvent: emitEvent
});
});
this.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
};
FormArray.prototype.patchValue = function(value, _a) {
var _this = this;
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
value.forEach(function(newValue, index) {
if (_this.at(index)) {
_this.at(index).patchValue(newValue, {
onlySelf: true,
emitEvent: emitEvent
});
}
});
this.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
};
FormArray.prototype.reset = function(value, _a) {
if (value === void 0) {
value = [];
}
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
this._forEachChild(function(control, index) {
control.reset(value[index], {
onlySelf: true,
emitEvent: emitEvent
});
});
this.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
this._updatePristine({
onlySelf: onlySelf
});
this._updateTouched({
onlySelf: onlySelf
});
};
FormArray.prototype.getRawValue = function() {
return this.controls.map(function(control) {
return control instanceof FormControl ? control.value : control.getRawValue();
});
};
FormArray.prototype._throwIfControlMissing = function(index) {
if (!this.controls.length) {
throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
}
if (!this.at(index)) {
throw new Error("Cannot find form control at index " + index);
}
};
FormArray.prototype._forEachChild = function(cb) {
this.controls.forEach(function(control, index) {
cb(control, index);
});
};
FormArray.prototype._updateValue = function() {
var _this = this;
this._value = this.controls.filter(function(control) {
return control.enabled || _this.disabled;
}).map(function(control) {
return control.value;
});
};
FormArray.prototype._anyControls = function(condition) {
return this.controls.some(function(control) {
return control.enabled && condition(control);
});
};
FormArray.prototype._setUpControls = function() {
var _this = this;
this._forEachChild(function(control) {
return _this._registerControl(control);
});
};
FormArray.prototype._checkAllValuesPresent = function(value) {
this._forEachChild(function(control, i) {
if (value[i] === undefined) {
throw new Error("Must supply a value for form control at index: " + i + ".");
}
});
};
FormArray.prototype._allControlsDisabled = function() {
for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {
var control = _a[_i];
if (control.enabled) return false;
}
return this.controls.length > 0 || this.disabled;
};
FormArray.prototype._registerControl = function(control) {
control.setParent(this);
control._registerOnCollectionChange(this._onCollectionChange);
};
return FormArray;
}(AbstractControl);
var formDirectiveProvider = {
provide: ControlContainer,
useExisting: _angular_core.forwardRef(function() {
return NgForm;
})
};
var resolvedPromise = Promise.resolve(null);
var NgForm = function(_super) {
__extends(NgForm, _super);
function NgForm(validators, asyncValidators) {
var _this = _super.call(this) || this;
_this._submitted = false;
_this.ngSubmit = new _angular_core.EventEmitter();
_this.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
return _this;
}
Object.defineProperty(NgForm.prototype, "submitted", {
get: function() {
return this._submitted;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForm.prototype, "formDirective", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForm.prototype, "control", {
get: function() {
return this.form;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForm.prototype, "path", {
get: function() {
return [];
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForm.prototype, "controls", {
get: function() {
return this.form.controls;
},
enumerable: true,
configurable: true
});
NgForm.prototype.addControl = function(dir) {
var _this = this;
resolvedPromise.then(function() {
var container = _this._findContainer(dir.path);
dir._control = container.registerControl(dir.name, dir.control);
setUpControl(dir.control, dir);
dir.control.updateValueAndValidity({
emitEvent: false
});
});
};
NgForm.prototype.getControl = function(dir) {
return this.form.get(dir.path);
};
NgForm.prototype.removeControl = function(dir) {
var _this = this;
resolvedPromise.then(function() {
var container = _this._findContainer(dir.path);
if (container) {
container.removeControl(dir.name);
}
});
};
NgForm.prototype.addFormGroup = function(dir) {
var _this = this;
resolvedPromise.then(function() {
var container = _this._findContainer(dir.path);
var group = new FormGroup({});
setUpFormContainer(group, dir);
container.registerControl(dir.name, group);
group.updateValueAndValidity({
emitEvent: false
});
});
};
NgForm.prototype.removeFormGroup = function(dir) {
var _this = this;
resolvedPromise.then(function() {
var container = _this._findContainer(dir.path);
if (container) {
container.removeControl(dir.name);
}
});
};
NgForm.prototype.getFormGroup = function(dir) {
return this.form.get(dir.path);
};
NgForm.prototype.updateModel = function(dir, value) {
var _this = this;
resolvedPromise.then(function() {
var ctrl = _this.form.get(dir.path);
ctrl.setValue(value);
});
};
NgForm.prototype.setValue = function(value) {
this.control.setValue(value);
};
NgForm.prototype.onSubmit = function($event) {
this._submitted = true;
this.ngSubmit.emit($event);
return false;
};
NgForm.prototype.onReset = function() {
this.resetForm();
};
NgForm.prototype.resetForm = function(value) {
if (value === void 0) {
value = undefined;
}
this.form.reset(value);
this._submitted = false;
};
NgForm.prototype._findContainer = function(path) {
path.pop();
return path.length ? this.form.get(path) : this.form;
};
return NgForm;
}(ControlContainer);
NgForm.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]",
providers: [ formDirectiveProvider ],
host: {
"(submit)": "onSubmit($event)",
"(reset)": "onReset()"
},
outputs: [ "ngSubmit" ],
exportAs: "ngForm"
} ]
} ];
NgForm.ctorParameters = function() {
return [ {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_ASYNC_VALIDATORS ]
} ]
} ];
};
var FormErrorExamples = {
formControlName: '\n    <div [formGroup]="myGroup">\n      <input formControlName="firstName">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });',
formGroupName: '\n    <div [formGroup]="myGroup">\n       <div formGroupName="person">\n          <input formControlName="firstName">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });',
formArrayName: '\n    <div [formGroup]="myGroup">\n      <div formArrayName="cities">\n        <div *ngFor="let city of cityArray.controls; index as i">\n          <input [formControlName]="i">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl(\'SF\')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });',
ngModelGroup: '\n    <form>\n       <div ngModelGroup="person">\n          <input [(ngModel)]="person.name" name="firstName">\n       </div>\n    </form>',
ngModelWithFormGroup: '\n    <div [formGroup]="myGroup">\n       <input formControlName="firstName">\n       <input [(ngModel)]="showMoreControls" [ngModelOptions]="{standalone: true}">\n    </div>\n  '
};
var TemplateDrivenErrors = function() {
function TemplateDrivenErrors() {}
TemplateDrivenErrors.modelParentException = function() {
throw new Error('\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup\'s partner directive "formControlName" instead.  Example:\n\n      ' + FormErrorExamples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + FormErrorExamples.ngModelWithFormGroup);
};
TemplateDrivenErrors.formGroupNameException = function() {
throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + FormErrorExamples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + FormErrorExamples.ngModelGroup);
};
TemplateDrivenErrors.missingNameException = function() {
throw new Error('If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as \'standalone\' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]="person.firstName" name="first">\n      Example 2: <input [(ngModel)]="person.firstName" [ngModelOptions]="{standalone: true}">');
};
TemplateDrivenErrors.modelGroupParentException = function() {
throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + FormErrorExamples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + FormErrorExamples.ngModelGroup);
};
return TemplateDrivenErrors;
}();
var modelGroupProvider = {
provide: ControlContainer,
useExisting: _angular_core.forwardRef(function() {
return NgModelGroup;
})
};
var NgModelGroup = function(_super) {
__extends(NgModelGroup, _super);
function NgModelGroup(parent, validators, asyncValidators) {
var _this = _super.call(this) || this;
_this._parent = parent;
_this._validators = validators;
_this._asyncValidators = asyncValidators;
return _this;
}
NgModelGroup.prototype._checkParentType = function() {
if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
TemplateDrivenErrors.modelGroupParentException();
}
};
return NgModelGroup;
}(AbstractFormGroupDirective);
NgModelGroup.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngModelGroup]",
providers: [ modelGroupProvider ],
exportAs: "ngModelGroup"
} ]
} ];
NgModelGroup.ctorParameters = function() {
return [ {
type: ControlContainer,
decorators: [ {
type: _angular_core.Host
}, {
type: _angular_core.SkipSelf
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_ASYNC_VALIDATORS ]
} ]
} ];
};
NgModelGroup.propDecorators = {
name: [ {
type: _angular_core.Input,
args: [ "ngModelGroup" ]
} ]
};
var formControlBinding = {
provide: NgControl,
useExisting: _angular_core.forwardRef(function() {
return NgModel;
})
};
var resolvedPromise$1 = Promise.resolve(null);
var NgModel = function(_super) {
__extends(NgModel, _super);
function NgModel(parent, validators, asyncValidators, valueAccessors) {
var _this = _super.call(this) || this;
_this._control = new FormControl();
_this._registered = false;
_this.update = new _angular_core.EventEmitter();
_this._parent = parent;
_this._rawValidators = validators || [];
_this._rawAsyncValidators = asyncValidators || [];
_this.valueAccessor = selectValueAccessor(_this, valueAccessors);
return _this;
}
NgModel.prototype.ngOnChanges = function(changes) {
this._checkForErrors();
if (!this._registered) this._setUpControl();
if ("isDisabled" in changes) {
this._updateDisabled(changes);
}
if (isPropertyUpdated(changes, this.viewModel)) {
this._updateValue(this.model);
this.viewModel = this.model;
}
};
NgModel.prototype.ngOnDestroy = function() {
this.formDirective && this.formDirective.removeControl(this);
};
Object.defineProperty(NgModel.prototype, "control", {
get: function() {
return this._control;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModel.prototype, "path", {
get: function() {
return this._parent ? controlPath(this.name, this._parent) : [ this.name ];
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModel.prototype, "formDirective", {
get: function() {
return this._parent ? this._parent.formDirective : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModel.prototype, "validator", {
get: function() {
return composeValidators(this._rawValidators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModel.prototype, "asyncValidator", {
get: function() {
return composeAsyncValidators(this._rawAsyncValidators);
},
enumerable: true,
configurable: true
});
NgModel.prototype.viewToModelUpdate = function(newValue) {
this.viewModel = newValue;
this.update.emit(newValue);
};
NgModel.prototype._setUpControl = function() {
this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);
this._registered = true;
};
NgModel.prototype._isStandalone = function() {
return !this._parent || !!(this.options && this.options.standalone);
};
NgModel.prototype._setUpStandalone = function() {
setUpControl(this._control, this);
this._control.updateValueAndValidity({
emitEvent: false
});
};
NgModel.prototype._checkForErrors = function() {
if (!this._isStandalone()) {
this._checkParentType();
}
this._checkName();
};
NgModel.prototype._checkParentType = function() {
if (!(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective) {
TemplateDrivenErrors.formGroupNameException();
} else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
TemplateDrivenErrors.modelParentException();
}
};
NgModel.prototype._checkName = function() {
if (this.options && this.options.name) this.name = this.options.name;
if (!this._isStandalone() && !this.name) {
TemplateDrivenErrors.missingNameException();
}
};
NgModel.prototype._updateValue = function(value) {
var _this = this;
resolvedPromise$1.then(function() {
_this.control.setValue(value, {
emitViewToModelChange: false
});
});
};
NgModel.prototype._updateDisabled = function(changes) {
var _this = this;
var disabledValue = changes["isDisabled"].currentValue;
var isDisabled = disabledValue === "" || disabledValue && disabledValue !== "false";
resolvedPromise$1.then(function() {
if (isDisabled && !_this.control.disabled) {
_this.control.disable();
} else if (!isDisabled && _this.control.disabled) {
_this.control.enable();
}
});
};
return NgModel;
}(NgControl);
NgModel.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[ngModel]:not([formControlName]):not([formControl])",
providers: [ formControlBinding ],
exportAs: "ngModel"
} ]
} ];
NgModel.ctorParameters = function() {
return [ {
type: ControlContainer,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Host
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_ASYNC_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALUE_ACCESSOR ]
} ]
} ];
};
NgModel.propDecorators = {
name: [ {
type: _angular_core.Input
} ],
isDisabled: [ {
type: _angular_core.Input,
args: [ "disabled" ]
} ],
model: [ {
type: _angular_core.Input,
args: [ "ngModel" ]
} ],
options: [ {
type: _angular_core.Input,
args: [ "ngModelOptions" ]
} ],
update: [ {
type: _angular_core.Output,
args: [ "ngModelChange" ]
} ]
};
var ReactiveErrors = function() {
function ReactiveErrors() {}
ReactiveErrors.controlParentException = function() {
throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + FormErrorExamples.formControlName);
};
ReactiveErrors.ngModelGroupException = function() {
throw new Error('formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a "form" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ' + FormErrorExamples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + FormErrorExamples.ngModelGroup);
};
ReactiveErrors.missingFormException = function() {
throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + FormErrorExamples.formControlName);
};
ReactiveErrors.groupParentException = function() {
throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + FormErrorExamples.formGroupName);
};
ReactiveErrors.arrayParentException = function() {
throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + FormErrorExamples.formArrayName);
};
ReactiveErrors.disabledAttrWarning = function() {
console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
};
return ReactiveErrors;
}();
var formControlBinding$1 = {
provide: NgControl,
useExisting: _angular_core.forwardRef(function() {
return FormControlDirective;
})
};
var FormControlDirective = function(_super) {
__extends(FormControlDirective, _super);
function FormControlDirective(validators, asyncValidators, valueAccessors) {
var _this = _super.call(this) || this;
_this.update = new _angular_core.EventEmitter();
_this._rawValidators = validators || [];
_this._rawAsyncValidators = asyncValidators || [];
_this.valueAccessor = selectValueAccessor(_this, valueAccessors);
return _this;
}
Object.defineProperty(FormControlDirective.prototype, "isDisabled", {
set: function(isDisabled) {
ReactiveErrors.disabledAttrWarning();
},
enumerable: true,
configurable: true
});
FormControlDirective.prototype.ngOnChanges = function(changes) {
if (this._isControlChanged(changes)) {
setUpControl(this.form, this);
if (this.control.disabled && this.valueAccessor.setDisabledState) {
this.valueAccessor.setDisabledState(true);
}
this.form.updateValueAndValidity({
emitEvent: false
});
}
if (isPropertyUpdated(changes, this.viewModel)) {
this.form.setValue(this.model);
this.viewModel = this.model;
}
};
Object.defineProperty(FormControlDirective.prototype, "path", {
get: function() {
return [];
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormControlDirective.prototype, "validator", {
get: function() {
return composeValidators(this._rawValidators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormControlDirective.prototype, "asyncValidator", {
get: function() {
return composeAsyncValidators(this._rawAsyncValidators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormControlDirective.prototype, "control", {
get: function() {
return this.form;
},
enumerable: true,
configurable: true
});
FormControlDirective.prototype.viewToModelUpdate = function(newValue) {
this.viewModel = newValue;
this.update.emit(newValue);
};
FormControlDirective.prototype._isControlChanged = function(changes) {
return changes.hasOwnProperty("form");
};
return FormControlDirective;
}(NgControl);
FormControlDirective.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[formControl]",
providers: [ formControlBinding$1 ],
exportAs: "ngForm"
} ]
} ];
FormControlDirective.ctorParameters = function() {
return [ {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_ASYNC_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALUE_ACCESSOR ]
} ]
} ];
};
FormControlDirective.propDecorators = {
form: [ {
type: _angular_core.Input,
args: [ "formControl" ]
} ],
model: [ {
type: _angular_core.Input,
args: [ "ngModel" ]
} ],
update: [ {
type: _angular_core.Output,
args: [ "ngModelChange" ]
} ],
isDisabled: [ {
type: _angular_core.Input,
args: [ "disabled" ]
} ]
};
var formDirectiveProvider$1 = {
provide: ControlContainer,
useExisting: _angular_core.forwardRef(function() {
return FormGroupDirective;
})
};
var FormGroupDirective = function(_super) {
__extends(FormGroupDirective, _super);
function FormGroupDirective(_validators, _asyncValidators) {
var _this = _super.call(this) || this;
_this._validators = _validators;
_this._asyncValidators = _asyncValidators;
_this._submitted = false;
_this.directives = [];
_this.form = null;
_this.ngSubmit = new _angular_core.EventEmitter();
return _this;
}
FormGroupDirective.prototype.ngOnChanges = function(changes) {
this._checkFormPresent();
if (changes.hasOwnProperty("form")) {
this._updateValidators();
this._updateDomValue();
this._updateRegistrations();
}
};
Object.defineProperty(FormGroupDirective.prototype, "submitted", {
get: function() {
return this._submitted;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormGroupDirective.prototype, "formDirective", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormGroupDirective.prototype, "control", {
get: function() {
return this.form;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormGroupDirective.prototype, "path", {
get: function() {
return [];
},
enumerable: true,
configurable: true
});
FormGroupDirective.prototype.addControl = function(dir) {
var ctrl = this.form.get(dir.path);
setUpControl(ctrl, dir);
ctrl.updateValueAndValidity({
emitEvent: false
});
this.directives.push(dir);
return ctrl;
};
FormGroupDirective.prototype.getControl = function(dir) {
return this.form.get(dir.path);
};
FormGroupDirective.prototype.removeControl = function(dir) {
remove(this.directives, dir);
};
FormGroupDirective.prototype.addFormGroup = function(dir) {
var ctrl = this.form.get(dir.path);
setUpFormContainer(ctrl, dir);
ctrl.updateValueAndValidity({
emitEvent: false
});
};
FormGroupDirective.prototype.removeFormGroup = function(dir) {};
FormGroupDirective.prototype.getFormGroup = function(dir) {
return this.form.get(dir.path);
};
FormGroupDirective.prototype.addFormArray = function(dir) {
var ctrl = this.form.get(dir.path);
setUpFormContainer(ctrl, dir);
ctrl.updateValueAndValidity({
emitEvent: false
});
};
FormGroupDirective.prototype.removeFormArray = function(dir) {};
FormGroupDirective.prototype.getFormArray = function(dir) {
return this.form.get(dir.path);
};
FormGroupDirective.prototype.updateModel = function(dir, value) {
var ctrl = this.form.get(dir.path);
ctrl.setValue(value);
};
FormGroupDirective.prototype.onSubmit = function($event) {
this._submitted = true;
this.ngSubmit.emit($event);
return false;
};
FormGroupDirective.prototype.onReset = function() {
this.resetForm();
};
FormGroupDirective.prototype.resetForm = function(value) {
if (value === void 0) {
value = undefined;
}
this.form.reset(value);
this._submitted = false;
};
FormGroupDirective.prototype._updateDomValue = function() {
var _this = this;
this.directives.forEach(function(dir) {
var newCtrl = _this.form.get(dir.path);
if (dir._control !== newCtrl) {
cleanUpControl(dir._control, dir);
if (newCtrl) setUpControl(newCtrl, dir);
dir._control = newCtrl;
}
});
this.form._updateTreeValidity({
emitEvent: false
});
};
FormGroupDirective.prototype._updateRegistrations = function() {
var _this = this;
this.form._registerOnCollectionChange(function() {
return _this._updateDomValue();
});
if (this._oldForm) this._oldForm._registerOnCollectionChange(function() {});
this._oldForm = this.form;
};
FormGroupDirective.prototype._updateValidators = function() {
var sync = composeValidators(this._validators);
this.form.validator = Validators.compose([ this.form.validator, sync ]);
var async = composeAsyncValidators(this._asyncValidators);
this.form.asyncValidator = Validators.composeAsync([ this.form.asyncValidator, async ]);
};
FormGroupDirective.prototype._checkFormPresent = function() {
if (!this.form) {
ReactiveErrors.missingFormException();
}
};
return FormGroupDirective;
}(ControlContainer);
FormGroupDirective.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[formGroup]",
providers: [ formDirectiveProvider$1 ],
host: {
"(submit)": "onSubmit($event)",
"(reset)": "onReset()"
},
exportAs: "ngForm"
} ]
} ];
FormGroupDirective.ctorParameters = function() {
return [ {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_ASYNC_VALIDATORS ]
} ]
} ];
};
FormGroupDirective.propDecorators = {
form: [ {
type: _angular_core.Input,
args: [ "formGroup" ]
} ],
ngSubmit: [ {
type: _angular_core.Output
} ]
};
function remove(list, el) {
var index = list.indexOf(el);
if (index > -1) {
list.splice(index, 1);
}
}
var formGroupNameProvider = {
provide: ControlContainer,
useExisting: _angular_core.forwardRef(function() {
return FormGroupName;
})
};
var FormGroupName = function(_super) {
__extends(FormGroupName, _super);
function FormGroupName(parent, validators, asyncValidators) {
var _this = _super.call(this) || this;
_this._parent = parent;
_this._validators = validators;
_this._asyncValidators = asyncValidators;
return _this;
}
FormGroupName.prototype._checkParentType = function() {
if (_hasInvalidParent(this._parent)) {
ReactiveErrors.groupParentException();
}
};
return FormGroupName;
}(AbstractFormGroupDirective);
FormGroupName.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[formGroupName]",
providers: [ formGroupNameProvider ]
} ]
} ];
FormGroupName.ctorParameters = function() {
return [ {
type: ControlContainer,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Host
}, {
type: _angular_core.SkipSelf
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_ASYNC_VALIDATORS ]
} ]
} ];
};
FormGroupName.propDecorators = {
name: [ {
type: _angular_core.Input,
args: [ "formGroupName" ]
} ]
};
var formArrayNameProvider = {
provide: ControlContainer,
useExisting: _angular_core.forwardRef(function() {
return FormArrayName;
})
};
var FormArrayName = function(_super) {
__extends(FormArrayName, _super);
function FormArrayName(parent, validators, asyncValidators) {
var _this = _super.call(this) || this;
_this._parent = parent;
_this._validators = validators;
_this._asyncValidators = asyncValidators;
return _this;
}
FormArrayName.prototype.ngOnInit = function() {
this._checkParentType();
this.formDirective.addFormArray(this);
};
FormArrayName.prototype.ngOnDestroy = function() {
if (this.formDirective) {
this.formDirective.removeFormArray(this);
}
};
Object.defineProperty(FormArrayName.prototype, "control", {
get: function() {
return this.formDirective.getFormArray(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormArrayName.prototype, "formDirective", {
get: function() {
return this._parent ? this._parent.formDirective : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormArrayName.prototype, "path", {
get: function() {
return controlPath(this.name, this._parent);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormArrayName.prototype, "validator", {
get: function() {
return composeValidators(this._validators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormArrayName.prototype, "asyncValidator", {
get: function() {
return composeAsyncValidators(this._asyncValidators);
},
enumerable: true,
configurable: true
});
FormArrayName.prototype._checkParentType = function() {
if (_hasInvalidParent(this._parent)) {
ReactiveErrors.arrayParentException();
}
};
return FormArrayName;
}(ControlContainer);
FormArrayName.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[formArrayName]",
providers: [ formArrayNameProvider ]
} ]
} ];
FormArrayName.ctorParameters = function() {
return [ {
type: ControlContainer,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Host
}, {
type: _angular_core.SkipSelf
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_ASYNC_VALIDATORS ]
} ]
} ];
};
FormArrayName.propDecorators = {
name: [ {
type: _angular_core.Input,
args: [ "formArrayName" ]
} ]
};
function _hasInvalidParent(parent) {
return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);
}
var controlNameBinding = {
provide: NgControl,
useExisting: _angular_core.forwardRef(function() {
return FormControlName;
})
};
var FormControlName = function(_super) {
__extends(FormControlName, _super);
function FormControlName(parent, validators, asyncValidators, valueAccessors) {
var _this = _super.call(this) || this;
_this._added = false;
_this.update = new _angular_core.EventEmitter();
_this._parent = parent;
_this._rawValidators = validators || [];
_this._rawAsyncValidators = asyncValidators || [];
_this.valueAccessor = selectValueAccessor(_this, valueAccessors);
return _this;
}
Object.defineProperty(FormControlName.prototype, "isDisabled", {
set: function(isDisabled) {
ReactiveErrors.disabledAttrWarning();
},
enumerable: true,
configurable: true
});
FormControlName.prototype.ngOnChanges = function(changes) {
if (!this._added) this._setUpControl();
if (isPropertyUpdated(changes, this.viewModel)) {
this.viewModel = this.model;
this.formDirective.updateModel(this, this.model);
}
};
FormControlName.prototype.ngOnDestroy = function() {
if (this.formDirective) {
this.formDirective.removeControl(this);
}
};
FormControlName.prototype.viewToModelUpdate = function(newValue) {
this.viewModel = newValue;
this.update.emit(newValue);
};
Object.defineProperty(FormControlName.prototype, "path", {
get: function() {
return controlPath(this.name, this._parent);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormControlName.prototype, "formDirective", {
get: function() {
return this._parent ? this._parent.formDirective : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormControlName.prototype, "validator", {
get: function() {
return composeValidators(this._rawValidators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormControlName.prototype, "asyncValidator", {
get: function() {
return composeAsyncValidators(this._rawAsyncValidators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormControlName.prototype, "control", {
get: function() {
return this._control;
},
enumerable: true,
configurable: true
});
FormControlName.prototype._checkParentType = function() {
if (!(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective) {
ReactiveErrors.ngModelGroupException();
} else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) && !(this._parent instanceof FormArrayName)) {
ReactiveErrors.controlParentException();
}
};
FormControlName.prototype._setUpControl = function() {
this._checkParentType();
this._control = this.formDirective.addControl(this);
if (this.control.disabled && this.valueAccessor.setDisabledState) {
this.valueAccessor.setDisabledState(true);
}
this._added = true;
};
return FormControlName;
}(NgControl);
FormControlName.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[formControlName]",
providers: [ controlNameBinding ]
} ]
} ];
FormControlName.ctorParameters = function() {
return [ {
type: ControlContainer,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Host
}, {
type: _angular_core.SkipSelf
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_ASYNC_VALIDATORS ]
} ]
}, {
type: Array,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Self
}, {
type: _angular_core.Inject,
args: [ NG_VALUE_ACCESSOR ]
} ]
} ];
};
FormControlName.propDecorators = {
name: [ {
type: _angular_core.Input,
args: [ "formControlName" ]
} ],
model: [ {
type: _angular_core.Input,
args: [ "ngModel" ]
} ],
update: [ {
type: _angular_core.Output,
args: [ "ngModelChange" ]
} ],
isDisabled: [ {
type: _angular_core.Input,
args: [ "disabled" ]
} ]
};
var REQUIRED_VALIDATOR = {
provide: NG_VALIDATORS,
useExisting: _angular_core.forwardRef(function() {
return RequiredValidator;
}),
multi: true
};
var CHECKBOX_REQUIRED_VALIDATOR = {
provide: NG_VALIDATORS,
useExisting: _angular_core.forwardRef(function() {
return CheckboxRequiredValidator;
}),
multi: true
};
var RequiredValidator = function() {
function RequiredValidator() {}
Object.defineProperty(RequiredValidator.prototype, "required", {
get: function() {
return this._required;
},
set: function(value) {
this._required = value != null && value !== false && "" + value !== "false";
if (this._onChange) this._onChange();
},
enumerable: true,
configurable: true
});
RequiredValidator.prototype.validate = function(c) {
return this.required ? Validators.required(c) : null;
};
RequiredValidator.prototype.registerOnValidatorChange = function(fn) {
this._onChange = fn;
};
return RequiredValidator;
}();
RequiredValidator.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",
providers: [ REQUIRED_VALIDATOR ],
host: {
"[attr.required]": 'required ? "" : null'
}
} ]
} ];
RequiredValidator.ctorParameters = function() {
return [];
};
RequiredValidator.propDecorators = {
required: [ {
type: _angular_core.Input
} ]
};
var CheckboxRequiredValidator = function(_super) {
__extends(CheckboxRequiredValidator, _super);
function CheckboxRequiredValidator() {
return _super !== null && _super.apply(this, arguments) || this;
}
CheckboxRequiredValidator.prototype.validate = function(c) {
return this.required ? Validators.requiredTrue(c) : null;
};
return CheckboxRequiredValidator;
}(RequiredValidator);
CheckboxRequiredValidator.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]",
providers: [ CHECKBOX_REQUIRED_VALIDATOR ],
host: {
"[attr.required]": 'required ? "" : null'
}
} ]
} ];
CheckboxRequiredValidator.ctorParameters = function() {
return [];
};
var EMAIL_VALIDATOR = {
provide: NG_VALIDATORS,
useExisting: _angular_core.forwardRef(function() {
return EmailValidator;
}),
multi: true
};
var EmailValidator = function() {
function EmailValidator() {}
Object.defineProperty(EmailValidator.prototype, "email", {
set: function(value) {
this._enabled = value === "" || value === true || value === "true";
if (this._onChange) this._onChange();
},
enumerable: true,
configurable: true
});
EmailValidator.prototype.validate = function(c) {
return this._enabled ? Validators.email(c) : null;
};
EmailValidator.prototype.registerOnValidatorChange = function(fn) {
this._onChange = fn;
};
return EmailValidator;
}();
EmailValidator.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[email][formControlName],[email][formControl],[email][ngModel]",
providers: [ EMAIL_VALIDATOR ]
} ]
} ];
EmailValidator.ctorParameters = function() {
return [];
};
EmailValidator.propDecorators = {
email: [ {
type: _angular_core.Input
} ]
};
var MIN_LENGTH_VALIDATOR = {
provide: NG_VALIDATORS,
useExisting: _angular_core.forwardRef(function() {
return MinLengthValidator;
}),
multi: true
};
var MinLengthValidator = function() {
function MinLengthValidator() {}
MinLengthValidator.prototype.ngOnChanges = function(changes) {
if ("minlength" in changes) {
this._createValidator();
if (this._onChange) this._onChange();
}
};
MinLengthValidator.prototype.validate = function(c) {
return this.minlength == null ? null : this._validator(c);
};
MinLengthValidator.prototype.registerOnValidatorChange = function(fn) {
this._onChange = fn;
};
MinLengthValidator.prototype._createValidator = function() {
this._validator = Validators.minLength(parseInt(this.minlength, 10));
};
return MinLengthValidator;
}();
MinLengthValidator.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]",
providers: [ MIN_LENGTH_VALIDATOR ],
host: {
"[attr.minlength]": "minlength ? minlength : null"
}
} ]
} ];
MinLengthValidator.ctorParameters = function() {
return [];
};
MinLengthValidator.propDecorators = {
minlength: [ {
type: _angular_core.Input
} ]
};
var MAX_LENGTH_VALIDATOR = {
provide: NG_VALIDATORS,
useExisting: _angular_core.forwardRef(function() {
return MaxLengthValidator;
}),
multi: true
};
var MaxLengthValidator = function() {
function MaxLengthValidator() {}
MaxLengthValidator.prototype.ngOnChanges = function(changes) {
if ("maxlength" in changes) {
this._createValidator();
if (this._onChange) this._onChange();
}
};
MaxLengthValidator.prototype.validate = function(c) {
return this.maxlength != null ? this._validator(c) : null;
};
MaxLengthValidator.prototype.registerOnValidatorChange = function(fn) {
this._onChange = fn;
};
MaxLengthValidator.prototype._createValidator = function() {
this._validator = Validators.maxLength(parseInt(this.maxlength, 10));
};
return MaxLengthValidator;
}();
MaxLengthValidator.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]",
providers: [ MAX_LENGTH_VALIDATOR ],
host: {
"[attr.maxlength]": "maxlength ? maxlength : null"
}
} ]
} ];
MaxLengthValidator.ctorParameters = function() {
return [];
};
MaxLengthValidator.propDecorators = {
maxlength: [ {
type: _angular_core.Input
} ]
};
var PATTERN_VALIDATOR = {
provide: NG_VALIDATORS,
useExisting: _angular_core.forwardRef(function() {
return PatternValidator;
}),
multi: true
};
var PatternValidator = function() {
function PatternValidator() {}
PatternValidator.prototype.ngOnChanges = function(changes) {
if ("pattern" in changes) {
this._createValidator();
if (this._onChange) this._onChange();
}
};
PatternValidator.prototype.validate = function(c) {
return this._validator(c);
};
PatternValidator.prototype.registerOnValidatorChange = function(fn) {
this._onChange = fn;
};
PatternValidator.prototype._createValidator = function() {
this._validator = Validators.pattern(this.pattern);
};
return PatternValidator;
}();
PatternValidator.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]",
providers: [ PATTERN_VALIDATOR ],
host: {
"[attr.pattern]": "pattern ? pattern : null"
}
} ]
} ];
PatternValidator.ctorParameters = function() {
return [];
};
PatternValidator.propDecorators = {
pattern: [ {
type: _angular_core.Input
} ]
};
var FormBuilder = function() {
function FormBuilder() {}
FormBuilder.prototype.group = function(controlsConfig, extra) {
if (extra === void 0) {
extra = null;
}
var controls = this._reduceControls(controlsConfig);
var validator = extra != null ? extra["validator"] : null;
var asyncValidator = extra != null ? extra["asyncValidator"] : null;
return new FormGroup(controls, validator, asyncValidator);
};
FormBuilder.prototype.control = function(formState, validator, asyncValidator) {
return new FormControl(formState, validator, asyncValidator);
};
FormBuilder.prototype.array = function(controlsConfig, validator, asyncValidator) {
var _this = this;
var controls = controlsConfig.map(function(c) {
return _this._createControl(c);
});
return new FormArray(controls, validator, asyncValidator);
};
FormBuilder.prototype._reduceControls = function(controlsConfig) {
var _this = this;
var controls = {};
Object.keys(controlsConfig).forEach(function(controlName) {
controls[controlName] = _this._createControl(controlsConfig[controlName]);
});
return controls;
};
FormBuilder.prototype._createControl = function(controlConfig) {
if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup || controlConfig instanceof FormArray) {
return controlConfig;
} else if (Array.isArray(controlConfig)) {
var value = controlConfig[0];
var validator = controlConfig.length > 1 ? controlConfig[1] : null;
var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
return this.control(value, validator, asyncValidator);
} else {
return this.control(controlConfig);
}
};
return FormBuilder;
}();
FormBuilder.decorators = [ {
type: _angular_core.Injectable
} ];
FormBuilder.ctorParameters = function() {
return [];
};
var VERSION = new _angular_core.Version("4.1.0");
var NgNoValidate = function() {
function NgNoValidate() {}
return NgNoValidate;
}();
NgNoValidate.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "form:not([ngNoForm]):not([ngNativeValidate])",
host: {
novalidate: ""
}
} ]
} ];
NgNoValidate.ctorParameters = function() {
return [];
};
var SHARED_FORM_DIRECTIVES = [ NgNoValidate, NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator ];
var TEMPLATE_DRIVEN_DIRECTIVES = [ NgModel, NgModelGroup, NgForm ];
var REACTIVE_DRIVEN_DIRECTIVES = [ FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName ];
var InternalFormsSharedModule = function() {
function InternalFormsSharedModule() {}
return InternalFormsSharedModule;
}();
InternalFormsSharedModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
declarations: SHARED_FORM_DIRECTIVES,
exports: SHARED_FORM_DIRECTIVES
} ]
} ];
InternalFormsSharedModule.ctorParameters = function() {
return [];
};
var FormsModule = function() {
function FormsModule() {}
return FormsModule;
}();
FormsModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
declarations: TEMPLATE_DRIVEN_DIRECTIVES,
providers: [ RadioControlRegistry ],
exports: [ InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES ]
} ]
} ];
FormsModule.ctorParameters = function() {
return [];
};
var ReactiveFormsModule = function() {
function ReactiveFormsModule() {}
return ReactiveFormsModule;
}();
ReactiveFormsModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
declarations: [ REACTIVE_DRIVEN_DIRECTIVES ],
providers: [ FormBuilder, RadioControlRegistry ],
exports: [ InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES ]
} ]
} ];
ReactiveFormsModule.ctorParameters = function() {
return [];
};
exports.AbstractControlDirective = AbstractControlDirective;
exports.AbstractFormGroupDirective = AbstractFormGroupDirective;
exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
exports.ControlContainer = ControlContainer;
exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;
exports.COMPOSITION_BUFFER_MODE = COMPOSITION_BUFFER_MODE;
exports.DefaultValueAccessor = DefaultValueAccessor;
exports.NgControl = NgControl;
exports.NgControlStatus = NgControlStatus;
exports.NgControlStatusGroup = NgControlStatusGroup;
exports.NgForm = NgForm;
exports.NgModel = NgModel;
exports.NgModelGroup = NgModelGroup;
exports.RadioControlValueAccessor = RadioControlValueAccessor;
exports.FormControlDirective = FormControlDirective;
exports.FormControlName = FormControlName;
exports.FormGroupDirective = FormGroupDirective;
exports.FormArrayName = FormArrayName;
exports.FormGroupName = FormGroupName;
exports.NgSelectOption = NgSelectOption;
exports.SelectControlValueAccessor = SelectControlValueAccessor;
exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;
exports.CheckboxRequiredValidator = CheckboxRequiredValidator;
exports.EmailValidator = EmailValidator;
exports.MaxLengthValidator = MaxLengthValidator;
exports.MinLengthValidator = MinLengthValidator;
exports.PatternValidator = PatternValidator;
exports.RequiredValidator = RequiredValidator;
exports.FormBuilder = FormBuilder;
exports.AbstractControl = AbstractControl;
exports.FormArray = FormArray;
exports.FormControl = FormControl;
exports.FormGroup = FormGroup;
exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;
exports.NG_VALIDATORS = NG_VALIDATORS;
exports.Validators = Validators;
exports.VERSION = VERSION;
exports.FormsModule = FormsModule;
exports.ReactiveFormsModule = ReactiveFormsModule;
exports.ɵba = InternalFormsSharedModule;
exports.ɵz = REACTIVE_DRIVEN_DIRECTIVES;
exports.ɵx = SHARED_FORM_DIRECTIVES;
exports.ɵy = TEMPLATE_DRIVEN_DIRECTIVES;
exports.ɵa = CHECKBOX_VALUE_ACCESSOR;
exports.ɵb = DEFAULT_VALUE_ACCESSOR;
exports.ɵc = AbstractControlStatus;
exports.ɵd = ngControlStatusHost;
exports.ɵe = formDirectiveProvider;
exports.ɵf = formControlBinding;
exports.ɵg = modelGroupProvider;
exports.ɵbf = NgNoValidate;
exports.ɵbb = NUMBER_VALUE_ACCESSOR;
exports.ɵbc = NumberValueAccessor;
exports.ɵh = RADIO_VALUE_ACCESSOR;
exports.ɵi = RadioControlRegistry;
exports.ɵbd = RANGE_VALUE_ACCESSOR;
exports.ɵbe = RangeValueAccessor;
exports.ɵj = formControlBinding$1;
exports.ɵk = controlNameBinding;
exports.ɵl = formDirectiveProvider$1;
exports.ɵn = formArrayNameProvider;
exports.ɵm = formGroupNameProvider;
exports.ɵo = SELECT_VALUE_ACCESSOR;
exports.ɵq = NgSelectMultipleOption;
exports.ɵp = SELECT_MULTIPLE_VALUE_ACCESSOR;
exports.ɵs = CHECKBOX_REQUIRED_VALIDATOR;
exports.ɵt = EMAIL_VALIDATOR;
exports.ɵv = MAX_LENGTH_VALIDATOR;
exports.ɵu = MIN_LENGTH_VALIDATOR;
exports.ɵw = PATTERN_VALIDATOR;
exports.ɵr = REQUIRED_VALIDATOR;
Object.defineProperty(exports, "__esModule", {
value: true
});
});
}, function(module, exports, __webpack_require__) {
"use strict";
var ForkJoinObservable_1 = __webpack_require__(162);
exports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var EmptyObservable_1 = __webpack_require__(111);
var isArray_1 = __webpack_require__(99);
var subscribeToResult_1 = __webpack_require__(115);
var OuterSubscriber_1 = __webpack_require__(114);
var ForkJoinObservable = function(_super) {
__extends(ForkJoinObservable, _super);
function ForkJoinObservable(sources, resultSelector) {
_super.call(this);
this.sources = sources;
this.resultSelector = resultSelector;
}
ForkJoinObservable.create = function() {
var sources = [];
for (var _i = 0; _i < arguments.length; _i++) {
sources[_i - 0] = arguments[_i];
}
if (sources === null || arguments.length === 0) {
return new EmptyObservable_1.EmptyObservable();
}
var resultSelector = null;
if (typeof sources[sources.length - 1] === "function") {
resultSelector = sources.pop();
}
if (sources.length === 1 && isArray_1.isArray(sources[0])) {
sources = sources[0];
}
if (sources.length === 0) {
return new EmptyObservable_1.EmptyObservable();
}
return new ForkJoinObservable(sources, resultSelector);
};
ForkJoinObservable.prototype._subscribe = function(subscriber) {
return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);
};
return ForkJoinObservable;
}(Observable_1.Observable);
exports.ForkJoinObservable = ForkJoinObservable;
var ForkJoinSubscriber = function(_super) {
__extends(ForkJoinSubscriber, _super);
function ForkJoinSubscriber(destination, sources, resultSelector) {
_super.call(this, destination);
this.sources = sources;
this.resultSelector = resultSelector;
this.completed = 0;
this.haveValues = 0;
var len = sources.length;
this.total = len;
this.values = new Array(len);
for (var i = 0; i < len; i++) {
var source = sources[i];
var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);
if (innerSubscription) {
innerSubscription.outerIndex = i;
this.add(innerSubscription);
}
}
}
ForkJoinSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.values[outerIndex] = innerValue;
if (!innerSub._hasValue) {
innerSub._hasValue = true;
this.haveValues++;
}
};
ForkJoinSubscriber.prototype.notifyComplete = function(innerSub) {
var destination = this.destination;
var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;
var len = values.length;
if (!innerSub._hasValue) {
destination.complete();
return;
}
this.completed++;
if (this.completed !== len) {
return;
}
if (haveValues === len) {
var value = resultSelector ? resultSelector.apply(this, values) : values;
destination.next(value);
}
destination.complete();
};
return ForkJoinSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var PromiseObservable_1 = __webpack_require__(164);
exports.fromPromise = PromiseObservable_1.PromiseObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(94);
var Observable_1 = __webpack_require__(93);
var PromiseObservable = function(_super) {
__extends(PromiseObservable, _super);
function PromiseObservable(promise, scheduler) {
_super.call(this);
this.promise = promise;
this.scheduler = scheduler;
}
PromiseObservable.create = function(promise, scheduler) {
return new PromiseObservable(promise, scheduler);
};
PromiseObservable.prototype._subscribe = function(subscriber) {
var _this = this;
var promise = this.promise;
var scheduler = this.scheduler;
if (scheduler == null) {
if (this._isScalar) {
if (!subscriber.closed) {
subscriber.next(this.value);
subscriber.complete();
}
} else {
promise.then(function(value) {
_this.value = value;
_this._isScalar = true;
if (!subscriber.closed) {
subscriber.next(value);
subscriber.complete();
}
}, function(err) {
if (!subscriber.closed) {
subscriber.error(err);
}
}).then(null, function(err) {
root_1.root.setTimeout(function() {
throw err;
});
});
}
} else {
if (this._isScalar) {
if (!subscriber.closed) {
return scheduler.schedule(dispatchNext, 0, {
value: this.value,
subscriber: subscriber
});
}
} else {
promise.then(function(value) {
_this.value = value;
_this._isScalar = true;
if (!subscriber.closed) {
subscriber.add(scheduler.schedule(dispatchNext, 0, {
value: value,
subscriber: subscriber
}));
}
}, function(err) {
if (!subscriber.closed) {
subscriber.add(scheduler.schedule(dispatchError, 0, {
err: err,
subscriber: subscriber
}));
}
}).then(null, function(err) {
root_1.root.setTimeout(function() {
throw err;
});
});
}
}
};
return PromiseObservable;
}(Observable_1.Observable);
exports.PromiseObservable = PromiseObservable;
function dispatchNext(arg) {
var value = arg.value, subscriber = arg.subscriber;
if (!subscriber.closed) {
subscriber.next(value);
subscriber.complete();
}
}
function dispatchError(arg) {
var err = arg.err, subscriber = arg.subscriber;
if (!subscriber.closed) {
subscriber.error(err);
}
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function map(project, thisArg) {
if (typeof project !== "function") {
throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");
}
return this.lift(new MapOperator(project, thisArg));
}
exports.map = map;
var MapOperator = function() {
function MapOperator(project, thisArg) {
this.project = project;
this.thisArg = thisArg;
}
MapOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
};
return MapOperator;
}();
exports.MapOperator = MapOperator;
var MapSubscriber = function(_super) {
__extends(MapSubscriber, _super);
function MapSubscriber(destination, project, thisArg) {
_super.call(this, destination);
this.project = project;
this.count = 0;
this.thisArg = thisArg || this;
}
MapSubscriber.prototype._next = function(value) {
var result;
try {
result = this.project.call(this.thisArg, value, this.count++);
} catch (err) {
this.destination.error(err);
return;
}
this.destination.next(result);
};
return MapSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(159), __webpack_require__(92)) : typeof define === "function" && define.amd ? define([ "exports", "@angular/common", "@angular/core" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.platformBrowser = global.ng.platformBrowser || {}), global.ng.common, global.ng.core);
})(this, function(exports, _angular_common, _angular_core) {
"use strict";
var __extends = undefined && undefined.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _DOM = null;
function getDOM() {
return _DOM;
}
function setRootDomAdapter(adapter) {
if (!_DOM) {
_DOM = adapter;
}
}
var DomAdapter = function() {
function DomAdapter() {
this.resourceLoaderType = null;
}
DomAdapter.prototype.hasProperty = function(element, name) {};
DomAdapter.prototype.setProperty = function(el, name, value) {};
DomAdapter.prototype.getProperty = function(el, name) {};
DomAdapter.prototype.invoke = function(el, methodName, args) {};
DomAdapter.prototype.logError = function(error) {};
DomAdapter.prototype.log = function(error) {};
DomAdapter.prototype.logGroup = function(error) {};
DomAdapter.prototype.logGroupEnd = function() {};
Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
get: function() {
return this._attrToPropMap;
},
set: function(value) {
this._attrToPropMap = value;
},
enumerable: true,
configurable: true
});
DomAdapter.prototype.contains = function(nodeA, nodeB) {};
DomAdapter.prototype.parse = function(templateHtml) {};
DomAdapter.prototype.querySelector = function(el, selector) {};
DomAdapter.prototype.querySelectorAll = function(el, selector) {};
DomAdapter.prototype.on = function(el, evt, listener) {};
DomAdapter.prototype.onAndCancel = function(el, evt, listener) {};
DomAdapter.prototype.dispatchEvent = function(el, evt) {};
DomAdapter.prototype.createMouseEvent = function(eventType) {};
DomAdapter.prototype.createEvent = function(eventType) {};
DomAdapter.prototype.preventDefault = function(evt) {};
DomAdapter.prototype.isPrevented = function(evt) {};
DomAdapter.prototype.getInnerHTML = function(el) {};
DomAdapter.prototype.getTemplateContent = function(el) {};
DomAdapter.prototype.getOuterHTML = function(el) {};
DomAdapter.prototype.nodeName = function(node) {};
DomAdapter.prototype.nodeValue = function(node) {};
DomAdapter.prototype.type = function(node) {};
DomAdapter.prototype.content = function(node) {};
DomAdapter.prototype.firstChild = function(el) {};
DomAdapter.prototype.nextSibling = function(el) {};
DomAdapter.prototype.parentElement = function(el) {};
DomAdapter.prototype.childNodes = function(el) {};
DomAdapter.prototype.childNodesAsList = function(el) {};
DomAdapter.prototype.clearNodes = function(el) {};
DomAdapter.prototype.appendChild = function(el, node) {};
DomAdapter.prototype.removeChild = function(el, node) {};
DomAdapter.prototype.replaceChild = function(el, newNode, oldNode) {};
DomAdapter.prototype.remove = function(el) {};
DomAdapter.prototype.insertBefore = function(parent, ref, node) {};
DomAdapter.prototype.insertAllBefore = function(parent, ref, nodes) {};
DomAdapter.prototype.insertAfter = function(parent, el, node) {};
DomAdapter.prototype.setInnerHTML = function(el, value) {};
DomAdapter.prototype.getText = function(el) {};
DomAdapter.prototype.setText = function(el, value) {};
DomAdapter.prototype.getValue = function(el) {};
DomAdapter.prototype.setValue = function(el, value) {};
DomAdapter.prototype.getChecked = function(el) {};
DomAdapter.prototype.setChecked = function(el, value) {};
DomAdapter.prototype.createComment = function(text) {};
DomAdapter.prototype.createTemplate = function(html) {};
DomAdapter.prototype.createElement = function(tagName, doc) {};
DomAdapter.prototype.createElementNS = function(ns, tagName, doc) {};
DomAdapter.prototype.createTextNode = function(text, doc) {};
DomAdapter.prototype.createScriptTag = function(attrName, attrValue, doc) {};
DomAdapter.prototype.createStyleElement = function(css, doc) {};
DomAdapter.prototype.createShadowRoot = function(el) {};
DomAdapter.prototype.getShadowRoot = function(el) {};
DomAdapter.prototype.getHost = function(el) {};
DomAdapter.prototype.getDistributedNodes = function(el) {};
DomAdapter.prototype.clone = function(node) {};
DomAdapter.prototype.getElementsByClassName = function(element, name) {};
DomAdapter.prototype.getElementsByTagName = function(element, name) {};
DomAdapter.prototype.classList = function(element) {};
DomAdapter.prototype.addClass = function(element, className) {};
DomAdapter.prototype.removeClass = function(element, className) {};
DomAdapter.prototype.hasClass = function(element, className) {};
DomAdapter.prototype.setStyle = function(element, styleName, styleValue) {};
DomAdapter.prototype.removeStyle = function(element, styleName) {};
DomAdapter.prototype.getStyle = function(element, styleName) {};
DomAdapter.prototype.hasStyle = function(element, styleName, styleValue) {};
DomAdapter.prototype.tagName = function(element) {};
DomAdapter.prototype.attributeMap = function(element) {};
DomAdapter.prototype.hasAttribute = function(element, attribute) {};
DomAdapter.prototype.hasAttributeNS = function(element, ns, attribute) {};
DomAdapter.prototype.getAttribute = function(element, attribute) {};
DomAdapter.prototype.getAttributeNS = function(element, ns, attribute) {};
DomAdapter.prototype.setAttribute = function(element, name, value) {};
DomAdapter.prototype.setAttributeNS = function(element, ns, name, value) {};
DomAdapter.prototype.removeAttribute = function(element, attribute) {};
DomAdapter.prototype.removeAttributeNS = function(element, ns, attribute) {};
DomAdapter.prototype.templateAwareRoot = function(el) {};
DomAdapter.prototype.createHtmlDocument = function() {};
DomAdapter.prototype.getBoundingClientRect = function(el) {};
DomAdapter.prototype.getTitle = function(doc) {};
DomAdapter.prototype.setTitle = function(doc, newTitle) {};
DomAdapter.prototype.elementMatches = function(n, selector) {};
DomAdapter.prototype.isTemplateElement = function(el) {};
DomAdapter.prototype.isTextNode = function(node) {};
DomAdapter.prototype.isCommentNode = function(node) {};
DomAdapter.prototype.isElementNode = function(node) {};
DomAdapter.prototype.hasShadowRoot = function(node) {};
DomAdapter.prototype.isShadowRoot = function(node) {};
DomAdapter.prototype.importIntoDoc = function(node) {};
DomAdapter.prototype.adoptNode = function(node) {};
DomAdapter.prototype.getHref = function(element) {};
DomAdapter.prototype.getEventKey = function(event) {};
DomAdapter.prototype.resolveAndSetHref = function(element, baseUrl, href) {};
DomAdapter.prototype.supportsDOMEvents = function() {};
DomAdapter.prototype.supportsNativeShadowDOM = function() {};
DomAdapter.prototype.getGlobalEventTarget = function(doc, target) {};
DomAdapter.prototype.getHistory = function() {};
DomAdapter.prototype.getLocation = function() {};
DomAdapter.prototype.getBaseHref = function(doc) {};
DomAdapter.prototype.resetBaseElement = function() {};
DomAdapter.prototype.getUserAgent = function() {};
DomAdapter.prototype.setData = function(element, name, value) {};
DomAdapter.prototype.getComputedStyle = function(element) {};
DomAdapter.prototype.getData = function(element, name) {};
DomAdapter.prototype.setGlobalVar = function(name, value) {};
DomAdapter.prototype.supportsWebAnimation = function() {};
DomAdapter.prototype.performanceNow = function() {};
DomAdapter.prototype.getAnimationPrefix = function() {};
DomAdapter.prototype.getTransitionEnd = function() {};
DomAdapter.prototype.supportsAnimation = function() {};
DomAdapter.prototype.supportsCookies = function() {};
DomAdapter.prototype.getCookie = function(name) {};
DomAdapter.prototype.setCookie = function(name, value) {};
return DomAdapter;
}();
var GenericBrowserDomAdapter = function(_super) {
__extends(GenericBrowserDomAdapter, _super);
function GenericBrowserDomAdapter() {
var _this = _super.call(this) || this;
_this._animationPrefix = null;
_this._transitionEnd = null;
try {
var element_1 = _this.createElement("div", document);
if (_this.getStyle(element_1, "animationName") != null) {
_this._animationPrefix = "";
} else {
var domPrefixes = [ "Webkit", "Moz", "O", "ms" ];
for (var i = 0; i < domPrefixes.length; i++) {
if (_this.getStyle(element_1, domPrefixes[i] + "AnimationName") != null) {
_this._animationPrefix = "-" + domPrefixes[i].toLowerCase() + "-";
break;
}
}
}
var transEndEventNames_1 = {
WebkitTransition: "webkitTransitionEnd",
MozTransition: "transitionend",
OTransition: "oTransitionEnd otransitionend",
transition: "transitionend"
};
Object.keys(transEndEventNames_1).forEach(function(key) {
if (_this.getStyle(element_1, key) != null) {
_this._transitionEnd = transEndEventNames_1[key];
}
});
} catch (e) {
_this._animationPrefix = null;
_this._transitionEnd = null;
}
return _this;
}
GenericBrowserDomAdapter.prototype.getDistributedNodes = function(el) {
return el.getDistributedNodes();
};
GenericBrowserDomAdapter.prototype.resolveAndSetHref = function(el, baseUrl, href) {
el.href = href == null ? baseUrl : baseUrl + "/../" + href;
};
GenericBrowserDomAdapter.prototype.supportsDOMEvents = function() {
return true;
};
GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function() {
return typeof document.body.createShadowRoot === "function";
};
GenericBrowserDomAdapter.prototype.getAnimationPrefix = function() {
return this._animationPrefix ? this._animationPrefix : "";
};
GenericBrowserDomAdapter.prototype.getTransitionEnd = function() {
return this._transitionEnd ? this._transitionEnd : "";
};
GenericBrowserDomAdapter.prototype.supportsAnimation = function() {
return this._animationPrefix != null && this._transitionEnd != null;
};
return GenericBrowserDomAdapter;
}(DomAdapter);
var _attrToPropMap = {
class: "className",
innerHtml: "innerHTML",
readonly: "readOnly",
tabindex: "tabIndex"
};
var DOM_KEY_LOCATION_NUMPAD = 3;
var _keyMap = {
"\b": "Backspace",
"\t": "Tab",
"": "Delete",
"": "Escape",
Del: "Delete",
Esc: "Escape",
Left: "ArrowLeft",
Right: "ArrowRight",
Up: "ArrowUp",
Down: "ArrowDown",
Menu: "ContextMenu",
Scroll: "ScrollLock",
Win: "OS"
};
var _chromeNumKeyPadMap = {
A: "1",
B: "2",
C: "3",
D: "4",
E: "5",
F: "6",
G: "7",
H: "8",
I: "9",
J: "*",
K: "+",
M: "-",
N: ".",
O: "/",
"`": "0",
"": "NumLock"
};
var nodeContains;
if (_angular_core.ɵglobal["Node"]) {
nodeContains = _angular_core.ɵglobal["Node"].prototype.contains || function(node) {
return !!(this.compareDocumentPosition(node) & 16);
};
}
var BrowserDomAdapter = function(_super) {
__extends(BrowserDomAdapter, _super);
function BrowserDomAdapter() {
return _super !== null && _super.apply(this, arguments) || this;
}
BrowserDomAdapter.prototype.parse = function(templateHtml) {
throw new Error("parse not implemented");
};
BrowserDomAdapter.makeCurrent = function() {
setRootDomAdapter(new BrowserDomAdapter());
};
BrowserDomAdapter.prototype.hasProperty = function(element, name) {
return name in element;
};
BrowserDomAdapter.prototype.setProperty = function(el, name, value) {
el[name] = value;
};
BrowserDomAdapter.prototype.getProperty = function(el, name) {
return el[name];
};
BrowserDomAdapter.prototype.invoke = function(el, methodName, args) {
el[methodName].apply(el, args);
};
BrowserDomAdapter.prototype.logError = function(error) {
if (window.console) {
if (console.error) {
console.error(error);
} else {
console.log(error);
}
}
};
BrowserDomAdapter.prototype.log = function(error) {
if (window.console) {
window.console.log && window.console.log(error);
}
};
BrowserDomAdapter.prototype.logGroup = function(error) {
if (window.console) {
window.console.group && window.console.group(error);
}
};
BrowserDomAdapter.prototype.logGroupEnd = function() {
if (window.console) {
window.console.groupEnd && window.console.groupEnd();
}
};
Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
get: function() {
return _attrToPropMap;
},
enumerable: true,
configurable: true
});
BrowserDomAdapter.prototype.contains = function(nodeA, nodeB) {
return nodeContains.call(nodeA, nodeB);
};
BrowserDomAdapter.prototype.querySelector = function(el, selector) {
return el.querySelector(selector);
};
BrowserDomAdapter.prototype.querySelectorAll = function(el, selector) {
return el.querySelectorAll(selector);
};
BrowserDomAdapter.prototype.on = function(el, evt, listener) {
el.addEventListener(evt, listener, false);
};
BrowserDomAdapter.prototype.onAndCancel = function(el, evt, listener) {
el.addEventListener(evt, listener, false);
return function() {
el.removeEventListener(evt, listener, false);
};
};
BrowserDomAdapter.prototype.dispatchEvent = function(el, evt) {
el.dispatchEvent(evt);
};
BrowserDomAdapter.prototype.createMouseEvent = function(eventType) {
var evt = document.createEvent("MouseEvent");
evt.initEvent(eventType, true, true);
return evt;
};
BrowserDomAdapter.prototype.createEvent = function(eventType) {
var evt = document.createEvent("Event");
evt.initEvent(eventType, true, true);
return evt;
};
BrowserDomAdapter.prototype.preventDefault = function(evt) {
evt.preventDefault();
evt.returnValue = false;
};
BrowserDomAdapter.prototype.isPrevented = function(evt) {
return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;
};
BrowserDomAdapter.prototype.getInnerHTML = function(el) {
return el.innerHTML;
};
BrowserDomAdapter.prototype.getTemplateContent = function(el) {
return "content" in el && el instanceof HTMLTemplateElement ? el.content : null;
};
BrowserDomAdapter.prototype.getOuterHTML = function(el) {
return el.outerHTML;
};
BrowserDomAdapter.prototype.nodeName = function(node) {
return node.nodeName;
};
BrowserDomAdapter.prototype.nodeValue = function(node) {
return node.nodeValue;
};
BrowserDomAdapter.prototype.type = function(node) {
return node.type;
};
BrowserDomAdapter.prototype.content = function(node) {
if (this.hasProperty(node, "content")) {
return node.content;
} else {
return node;
}
};
BrowserDomAdapter.prototype.firstChild = function(el) {
return el.firstChild;
};
BrowserDomAdapter.prototype.nextSibling = function(el) {
return el.nextSibling;
};
BrowserDomAdapter.prototype.parentElement = function(el) {
return el.parentNode;
};
BrowserDomAdapter.prototype.childNodes = function(el) {
return el.childNodes;
};
BrowserDomAdapter.prototype.childNodesAsList = function(el) {
var childNodes = el.childNodes;
var res = new Array(childNodes.length);
for (var i = 0; i < childNodes.length; i++) {
res[i] = childNodes[i];
}
return res;
};
BrowserDomAdapter.prototype.clearNodes = function(el) {
while (el.firstChild) {
el.removeChild(el.firstChild);
}
};
BrowserDomAdapter.prototype.appendChild = function(el, node) {
el.appendChild(node);
};
BrowserDomAdapter.prototype.removeChild = function(el, node) {
el.removeChild(node);
};
BrowserDomAdapter.prototype.replaceChild = function(el, newChild, oldChild) {
el.replaceChild(newChild, oldChild);
};
BrowserDomAdapter.prototype.remove = function(node) {
if (node.parentNode) {
node.parentNode.removeChild(node);
}
return node;
};
BrowserDomAdapter.prototype.insertBefore = function(parent, ref, node) {
parent.insertBefore(node, ref);
};
BrowserDomAdapter.prototype.insertAllBefore = function(parent, ref, nodes) {
nodes.forEach(function(n) {
return parent.insertBefore(n, ref);
});
};
BrowserDomAdapter.prototype.insertAfter = function(parent, ref, node) {
parent.insertBefore(node, ref.nextSibling);
};
BrowserDomAdapter.prototype.setInnerHTML = function(el, value) {
el.innerHTML = value;
};
BrowserDomAdapter.prototype.getText = function(el) {
return el.textContent;
};
BrowserDomAdapter.prototype.setText = function(el, value) {
el.textContent = value;
};
BrowserDomAdapter.prototype.getValue = function(el) {
return el.value;
};
BrowserDomAdapter.prototype.setValue = function(el, value) {
el.value = value;
};
BrowserDomAdapter.prototype.getChecked = function(el) {
return el.checked;
};
BrowserDomAdapter.prototype.setChecked = function(el, value) {
el.checked = value;
};
BrowserDomAdapter.prototype.createComment = function(text) {
return document.createComment(text);
};
BrowserDomAdapter.prototype.createTemplate = function(html) {
var t = document.createElement("template");
t.innerHTML = html;
return t;
};
BrowserDomAdapter.prototype.createElement = function(tagName, doc) {
if (doc === void 0) {
doc = document;
}
return doc.createElement(tagName);
};
BrowserDomAdapter.prototype.createElementNS = function(ns, tagName, doc) {
if (doc === void 0) {
doc = document;
}
return doc.createElementNS(ns, tagName);
};
BrowserDomAdapter.prototype.createTextNode = function(text, doc) {
if (doc === void 0) {
doc = document;
}
return doc.createTextNode(text);
};
BrowserDomAdapter.prototype.createScriptTag = function(attrName, attrValue, doc) {
if (doc === void 0) {
doc = document;
}
var el = doc.createElement("SCRIPT");
el.setAttribute(attrName, attrValue);
return el;
};
BrowserDomAdapter.prototype.createStyleElement = function(css, doc) {
if (doc === void 0) {
doc = document;
}
var style = doc.createElement("style");
this.appendChild(style, this.createTextNode(css));
return style;
};
BrowserDomAdapter.prototype.createShadowRoot = function(el) {
return el.createShadowRoot();
};
BrowserDomAdapter.prototype.getShadowRoot = function(el) {
return el.shadowRoot;
};
BrowserDomAdapter.prototype.getHost = function(el) {
return el.host;
};
BrowserDomAdapter.prototype.clone = function(node) {
return node.cloneNode(true);
};
BrowserDomAdapter.prototype.getElementsByClassName = function(element, name) {
return element.getElementsByClassName(name);
};
BrowserDomAdapter.prototype.getElementsByTagName = function(element, name) {
return element.getElementsByTagName(name);
};
BrowserDomAdapter.prototype.classList = function(element) {
return Array.prototype.slice.call(element.classList, 0);
};
BrowserDomAdapter.prototype.addClass = function(element, className) {
element.classList.add(className);
};
BrowserDomAdapter.prototype.removeClass = function(element, className) {
element.classList.remove(className);
};
BrowserDomAdapter.prototype.hasClass = function(element, className) {
return element.classList.contains(className);
};
BrowserDomAdapter.prototype.setStyle = function(element, styleName, styleValue) {
element.style[styleName] = styleValue;
};
BrowserDomAdapter.prototype.removeStyle = function(element, stylename) {
element.style[stylename] = "";
};
BrowserDomAdapter.prototype.getStyle = function(element, stylename) {
return element.style[stylename];
};
BrowserDomAdapter.prototype.hasStyle = function(element, styleName, styleValue) {
var value = this.getStyle(element, styleName) || "";
return styleValue ? value == styleValue : value.length > 0;
};
BrowserDomAdapter.prototype.tagName = function(element) {
return element.tagName;
};
BrowserDomAdapter.prototype.attributeMap = function(element) {
var res = new Map();
var elAttrs = element.attributes;
for (var i = 0; i < elAttrs.length; i++) {
var attrib = elAttrs[i];
res.set(attrib.name, attrib.value);
}
return res;
};
BrowserDomAdapter.prototype.hasAttribute = function(element, attribute) {
return element.hasAttribute(attribute);
};
BrowserDomAdapter.prototype.hasAttributeNS = function(element, ns, attribute) {
return element.hasAttributeNS(ns, attribute);
};
BrowserDomAdapter.prototype.getAttribute = function(element, attribute) {
return element.getAttribute(attribute);
};
BrowserDomAdapter.prototype.getAttributeNS = function(element, ns, name) {
return element.getAttributeNS(ns, name);
};
BrowserDomAdapter.prototype.setAttribute = function(element, name, value) {
element.setAttribute(name, value);
};
BrowserDomAdapter.prototype.setAttributeNS = function(element, ns, name, value) {
element.setAttributeNS(ns, name, value);
};
BrowserDomAdapter.prototype.removeAttribute = function(element, attribute) {
element.removeAttribute(attribute);
};
BrowserDomAdapter.prototype.removeAttributeNS = function(element, ns, name) {
element.removeAttributeNS(ns, name);
};
BrowserDomAdapter.prototype.templateAwareRoot = function(el) {
return this.isTemplateElement(el) ? this.content(el) : el;
};
BrowserDomAdapter.prototype.createHtmlDocument = function() {
return document.implementation.createHTMLDocument("fakeTitle");
};
BrowserDomAdapter.prototype.getBoundingClientRect = function(el) {
try {
return el.getBoundingClientRect();
} catch (e) {
return {
top: 0,
bottom: 0,
left: 0,
right: 0,
width: 0,
height: 0
};
}
};
BrowserDomAdapter.prototype.getTitle = function(doc) {
return document.title;
};
BrowserDomAdapter.prototype.setTitle = function(doc, newTitle) {
document.title = newTitle || "";
};
BrowserDomAdapter.prototype.elementMatches = function(n, selector) {
if (n instanceof HTMLElement) {
return n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
}
return false;
};
BrowserDomAdapter.prototype.isTemplateElement = function(el) {
return el instanceof HTMLElement && el.nodeName == "TEMPLATE";
};
BrowserDomAdapter.prototype.isTextNode = function(node) {
return node.nodeType === Node.TEXT_NODE;
};
BrowserDomAdapter.prototype.isCommentNode = function(node) {
return node.nodeType === Node.COMMENT_NODE;
};
BrowserDomAdapter.prototype.isElementNode = function(node) {
return node.nodeType === Node.ELEMENT_NODE;
};
BrowserDomAdapter.prototype.hasShadowRoot = function(node) {
return node.shadowRoot != null && node instanceof HTMLElement;
};
BrowserDomAdapter.prototype.isShadowRoot = function(node) {
return node instanceof DocumentFragment;
};
BrowserDomAdapter.prototype.importIntoDoc = function(node) {
return document.importNode(this.templateAwareRoot(node), true);
};
BrowserDomAdapter.prototype.adoptNode = function(node) {
return document.adoptNode(node);
};
BrowserDomAdapter.prototype.getHref = function(el) {
return el.href;
};
BrowserDomAdapter.prototype.getEventKey = function(event) {
var key = event.key;
if (key == null) {
key = event.keyIdentifier;
if (key == null) {
return "Unidentified";
}
if (key.startsWith("U+")) {
key = String.fromCharCode(parseInt(key.substring(2), 16));
if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
key = _chromeNumKeyPadMap[key];
}
}
}
return _keyMap[key] || key;
};
BrowserDomAdapter.prototype.getGlobalEventTarget = function(doc, target) {
if (target === "window") {
return window;
}
if (target === "document") {
return document;
}
if (target === "body") {
return document.body;
}
return null;
};
BrowserDomAdapter.prototype.getHistory = function() {
return window.history;
};
BrowserDomAdapter.prototype.getLocation = function() {
return window.location;
};
BrowserDomAdapter.prototype.getBaseHref = function(doc) {
var href = getBaseElementHref();
return href == null ? null : relativePath(href);
};
BrowserDomAdapter.prototype.resetBaseElement = function() {
baseElement = null;
};
BrowserDomAdapter.prototype.getUserAgent = function() {
return window.navigator.userAgent;
};
BrowserDomAdapter.prototype.setData = function(element, name, value) {
this.setAttribute(element, "data-" + name, value);
};
BrowserDomAdapter.prototype.getData = function(element, name) {
return this.getAttribute(element, "data-" + name);
};
BrowserDomAdapter.prototype.getComputedStyle = function(element) {
return getComputedStyle(element);
};
BrowserDomAdapter.prototype.setGlobalVar = function(path, value) {
setValueOnPath(_angular_core.ɵglobal, path, value);
};
BrowserDomAdapter.prototype.supportsWebAnimation = function() {
return typeof Element.prototype["animate"] === "function";
};
BrowserDomAdapter.prototype.performanceNow = function() {
return window.performance && window.performance.now ? window.performance.now() : new Date().getTime();
};
BrowserDomAdapter.prototype.supportsCookies = function() {
return true;
};
BrowserDomAdapter.prototype.getCookie = function(name) {
return parseCookieValue(document.cookie, name);
};
BrowserDomAdapter.prototype.setCookie = function(name, value) {
document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);
};
return BrowserDomAdapter;
}(GenericBrowserDomAdapter);
var baseElement = null;
function getBaseElementHref() {
if (!baseElement) {
baseElement = document.querySelector("base");
if (!baseElement) {
return null;
}
}
return baseElement.getAttribute("href");
}
var urlParsingNode;
function relativePath(url) {
if (!urlParsingNode) {
urlParsingNode = document.createElement("a");
}
urlParsingNode.setAttribute("href", url);
return urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname;
}
function parseCookieValue(cookieStr, name) {
name = encodeURIComponent(name);
for (var _i = 0, _a = cookieStr.split(";"); _i < _a.length; _i++) {
var cookie = _a[_i];
var eqIndex = cookie.indexOf("=");
var _b = eqIndex == -1 ? [ cookie, "" ] : [ cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1) ], cookieName = _b[0], cookieValue = _b[1];
if (cookieName.trim() === name) {
return decodeURIComponent(cookieValue);
}
}
return null;
}
function setValueOnPath(global, path, value) {
var parts = path.split(".");
var obj = global;
while (parts.length > 1) {
var name = parts.shift();
if (obj.hasOwnProperty(name) && obj[name] != null) {
obj = obj[name];
} else {
obj = obj[name] = {};
}
}
if (obj === undefined || obj === null) {
obj = {};
}
obj[parts.shift()] = value;
}
var DOCUMENT = new _angular_core.InjectionToken("DocumentToken");
function supportsState() {
return !!window.history.pushState;
}
var BrowserPlatformLocation = function(_super) {
__extends(BrowserPlatformLocation, _super);
function BrowserPlatformLocation(_doc) {
var _this = _super.call(this) || this;
_this._doc = _doc;
_this._init();
return _this;
}
BrowserPlatformLocation.prototype._init = function() {
this._location = getDOM().getLocation();
this._history = getDOM().getHistory();
};
Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
get: function() {
return this._location;
},
enumerable: true,
configurable: true
});
BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function() {
return getDOM().getBaseHref(this._doc);
};
BrowserPlatformLocation.prototype.onPopState = function(fn) {
getDOM().getGlobalEventTarget(this._doc, "window").addEventListener("popstate", fn, false);
};
BrowserPlatformLocation.prototype.onHashChange = function(fn) {
getDOM().getGlobalEventTarget(this._doc, "window").addEventListener("hashchange", fn, false);
};
Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
get: function() {
return this._location.pathname;
},
set: function(newPath) {
this._location.pathname = newPath;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
get: function() {
return this._location.search;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
get: function() {
return this._location.hash;
},
enumerable: true,
configurable: true
});
BrowserPlatformLocation.prototype.pushState = function(state, title, url) {
if (supportsState()) {
this._history.pushState(state, title, url);
} else {
this._location.hash = url;
}
};
BrowserPlatformLocation.prototype.replaceState = function(state, title, url) {
if (supportsState()) {
this._history.replaceState(state, title, url);
} else {
this._location.hash = url;
}
};
BrowserPlatformLocation.prototype.forward = function() {
this._history.forward();
};
BrowserPlatformLocation.prototype.back = function() {
this._history.back();
};
return BrowserPlatformLocation;
}(_angular_common.PlatformLocation);
BrowserPlatformLocation.decorators = [ {
type: _angular_core.Injectable
} ];
BrowserPlatformLocation.ctorParameters = function() {
return [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ DOCUMENT ]
} ]
} ];
};
var Meta = function() {
function Meta(_doc) {
this._doc = _doc;
this._dom = getDOM();
}
Meta.prototype.addTag = function(tag, forceCreation) {
if (forceCreation === void 0) {
forceCreation = false;
}
if (!tag) return null;
return this._getOrCreateElement(tag, forceCreation);
};
Meta.prototype.addTags = function(tags, forceCreation) {
var _this = this;
if (forceCreation === void 0) {
forceCreation = false;
}
if (!tags) return [];
return tags.reduce(function(result, tag) {
if (tag) {
result.push(_this._getOrCreateElement(tag, forceCreation));
}
return result;
}, []);
};
Meta.prototype.getTag = function(attrSelector) {
if (!attrSelector) return null;
return this._dom.querySelector(this._doc, "meta[" + attrSelector + "]");
};
Meta.prototype.getTags = function(attrSelector) {
if (!attrSelector) return [];
var list = this._dom.querySelectorAll(this._doc, "meta[" + attrSelector + "]");
return list ? [].slice.call(list) : [];
};
Meta.prototype.updateTag = function(tag, selector) {
if (!tag) return null;
selector = selector || this._parseSelector(tag);
var meta = this.getTag(selector);
if (meta) {
return this._setMetaElementAttributes(tag, meta);
}
return this._getOrCreateElement(tag, true);
};
Meta.prototype.removeTag = function(attrSelector) {
this.removeTagElement(this.getTag(attrSelector));
};
Meta.prototype.removeTagElement = function(meta) {
if (meta) {
this._dom.remove(meta);
}
};
Meta.prototype._getOrCreateElement = function(meta, forceCreation) {
if (forceCreation === void 0) {
forceCreation = false;
}
if (!forceCreation) {
var selector = this._parseSelector(meta);
var elem = this.getTag(selector);
if (elem && this._containsAttributes(meta, elem)) return elem;
}
var element = this._dom.createElement("meta");
this._setMetaElementAttributes(meta, element);
var head = this._dom.getElementsByTagName(this._doc, "head")[0];
this._dom.appendChild(head, element);
return element;
};
Meta.prototype._setMetaElementAttributes = function(tag, el) {
var _this = this;
Object.keys(tag).forEach(function(prop) {
return _this._dom.setAttribute(el, prop, tag[prop]);
});
return el;
};
Meta.prototype._parseSelector = function(tag) {
var attr = tag.name ? "name" : "property";
return attr + '="' + tag[attr] + '"';
};
Meta.prototype._containsAttributes = function(tag, elem) {
var _this = this;
return Object.keys(tag).every(function(key) {
return _this._dom.getAttribute(elem, key) === tag[key];
});
};
return Meta;
}();
Meta.decorators = [ {
type: _angular_core.Injectable
} ];
Meta.ctorParameters = function() {
return [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ DOCUMENT ]
} ]
} ];
};
var TRANSITION_ID = new _angular_core.InjectionToken("TRANSITION_ID");
function bootstrapListenerFactory(transitionId, document) {
var factory = function() {
var dom = getDOM();
var styles = Array.prototype.slice.apply(dom.querySelectorAll(document, "style[ng-transition]"));
styles.filter(function(el) {
return dom.getAttribute(el, "ng-transition") === transitionId;
}).forEach(function(el) {
return dom.remove(el);
});
};
return factory;
}
var SERVER_TRANSITION_PROVIDERS = [ {
provide: _angular_core.APP_INITIALIZER,
useFactory: bootstrapListenerFactory,
deps: [ TRANSITION_ID, DOCUMENT ],
multi: true
} ];
var BrowserGetTestability = function() {
function BrowserGetTestability() {}
BrowserGetTestability.init = function() {
_angular_core.setTestabilityGetter(new BrowserGetTestability());
};
BrowserGetTestability.prototype.addToWindow = function(registry) {
_angular_core.ɵglobal["getAngularTestability"] = function(elem, findInAncestors) {
if (findInAncestors === void 0) {
findInAncestors = true;
}
var testability = registry.findTestabilityInTree(elem, findInAncestors);
if (testability == null) {
throw new Error("Could not find testability for element.");
}
return testability;
};
_angular_core.ɵglobal["getAllAngularTestabilities"] = function() {
return registry.getAllTestabilities();
};
_angular_core.ɵglobal["getAllAngularRootElements"] = function() {
return registry.getAllRootElements();
};
var whenAllStable = function(callback) {
var testabilities = _angular_core.ɵglobal["getAllAngularTestabilities"]();
var count = testabilities.length;
var didWork = false;
var decrement = function(didWork_) {
didWork = didWork || didWork_;
count--;
if (count == 0) {
callback(didWork);
}
};
testabilities.forEach(function(testability) {
testability.whenStable(decrement);
});
};
if (!_angular_core.ɵglobal["frameworkStabilizers"]) {
_angular_core.ɵglobal["frameworkStabilizers"] = [];
}
_angular_core.ɵglobal["frameworkStabilizers"].push(whenAllStable);
};
BrowserGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
if (elem == null) {
return null;
}
var t = registry.getTestability(elem);
if (t != null) {
return t;
} else if (!findInAncestors) {
return null;
}
if (getDOM().isShadowRoot(elem)) {
return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
}
return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
};
return BrowserGetTestability;
}();
var Title = function() {
function Title(_doc) {
this._doc = _doc;
}
Title.prototype.getTitle = function() {
return getDOM().getTitle(this._doc);
};
Title.prototype.setTitle = function(newTitle) {
getDOM().setTitle(this._doc, newTitle);
};
return Title;
}();
Title.decorators = [ {
type: _angular_core.Injectable
} ];
Title.ctorParameters = function() {
return [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ DOCUMENT ]
} ]
} ];
};
var __assign = undefined && undefined.__assign || Object.assign || function(t) {
for (var s, i = 1, n = arguments.length; i < n; i++) {
s = arguments[i];
for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
}
return t;
};
var CORE_TOKENS = {
ApplicationRef: _angular_core.ApplicationRef,
NgZone: _angular_core.NgZone
};
var INSPECT_GLOBAL_NAME = "ng.probe";
var CORE_TOKENS_GLOBAL_NAME = "ng.coreTokens";
function inspectNativeElement(element) {
return _angular_core.getDebugNode(element);
}
var NgProbeToken$1 = function() {
function NgProbeToken$1(name, token) {
this.name = name;
this.token = token;
}
return NgProbeToken$1;
}();
function _createNgProbe(extraTokens, coreTokens) {
var tokens = (extraTokens || []).concat(coreTokens || []);
getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, __assign({}, CORE_TOKENS, _ngProbeTokensToMap(tokens || [])));
return function() {
return inspectNativeElement;
};
}
function _ngProbeTokensToMap(tokens) {
return tokens.reduce(function(prev, t) {
return prev[t.name] = t.token, prev;
}, {});
}
var ELEMENT_PROBE_PROVIDERS = [ {
provide: _angular_core.APP_INITIALIZER,
useFactory: _createNgProbe,
deps: [ [ NgProbeToken$1, new _angular_core.Optional() ], [ _angular_core.NgProbeToken, new _angular_core.Optional() ] ],
multi: true
} ];
var EVENT_MANAGER_PLUGINS = new _angular_core.InjectionToken("EventManagerPlugins");
var EventManager = function() {
function EventManager(plugins, _zone) {
var _this = this;
this._zone = _zone;
this._eventNameToPlugin = new Map();
plugins.forEach(function(p) {
return p.manager = _this;
});
this._plugins = plugins.slice().reverse();
}
EventManager.prototype.addEventListener = function(element, eventName, handler) {
var plugin = this._findPluginFor(eventName);
return plugin.addEventListener(element, eventName, handler);
};
EventManager.prototype.addGlobalEventListener = function(target, eventName, handler) {
var plugin = this._findPluginFor(eventName);
return plugin.addGlobalEventListener(target, eventName, handler);
};
EventManager.prototype.getZone = function() {
return this._zone;
};
EventManager.prototype._findPluginFor = function(eventName) {
var plugin = this._eventNameToPlugin.get(eventName);
if (plugin) {
return plugin;
}
var plugins = this._plugins;
for (var i = 0; i < plugins.length; i++) {
var plugin_1 = plugins[i];
if (plugin_1.supports(eventName)) {
this._eventNameToPlugin.set(eventName, plugin_1);
return plugin_1;
}
}
throw new Error("No event manager plugin found for event " + eventName);
};
return EventManager;
}();
EventManager.decorators = [ {
type: _angular_core.Injectable
} ];
EventManager.ctorParameters = function() {
return [ {
type: Array,
decorators: [ {
type: _angular_core.Inject,
args: [ EVENT_MANAGER_PLUGINS ]
} ]
}, {
type: _angular_core.NgZone
} ];
};
var EventManagerPlugin = function() {
function EventManagerPlugin(_doc) {
this._doc = _doc;
}
EventManagerPlugin.prototype.supports = function(eventName) {};
EventManagerPlugin.prototype.addEventListener = function(element, eventName, handler) {};
EventManagerPlugin.prototype.addGlobalEventListener = function(element, eventName, handler) {
var target = getDOM().getGlobalEventTarget(this._doc, element);
if (!target) {
throw new Error("Unsupported event target " + target + " for event " + eventName);
}
return this.addEventListener(target, eventName, handler);
};
return EventManagerPlugin;
}();
var SharedStylesHost = function() {
function SharedStylesHost() {
this._stylesSet = new Set();
}
SharedStylesHost.prototype.addStyles = function(styles) {
var _this = this;
var additions = new Set();
styles.forEach(function(style) {
if (!_this._stylesSet.has(style)) {
_this._stylesSet.add(style);
additions.add(style);
}
});
this.onStylesAdded(additions);
};
SharedStylesHost.prototype.onStylesAdded = function(additions) {};
SharedStylesHost.prototype.getAllStyles = function() {
return Array.from(this._stylesSet);
};
return SharedStylesHost;
}();
SharedStylesHost.decorators = [ {
type: _angular_core.Injectable
} ];
SharedStylesHost.ctorParameters = function() {
return [];
};
var DomSharedStylesHost = function(_super) {
__extends(DomSharedStylesHost, _super);
function DomSharedStylesHost(_doc) {
var _this = _super.call(this) || this;
_this._doc = _doc;
_this._hostNodes = new Set();
_this._styleNodes = new Set();
_this._hostNodes.add(_doc.head);
return _this;
}
DomSharedStylesHost.prototype._addStylesToHost = function(styles, host) {
var _this = this;
styles.forEach(function(style) {
var styleEl = _this._doc.createElement("style");
styleEl.textContent = style;
_this._styleNodes.add(host.appendChild(styleEl));
});
};
DomSharedStylesHost.prototype.addHost = function(hostNode) {
this._addStylesToHost(this._stylesSet, hostNode);
this._hostNodes.add(hostNode);
};
DomSharedStylesHost.prototype.removeHost = function(hostNode) {
this._hostNodes.delete(hostNode);
};
DomSharedStylesHost.prototype.onStylesAdded = function(additions) {
var _this = this;
this._hostNodes.forEach(function(hostNode) {
return _this._addStylesToHost(additions, hostNode);
});
};
DomSharedStylesHost.prototype.ngOnDestroy = function() {
this._styleNodes.forEach(function(styleNode) {
return getDOM().remove(styleNode);
});
};
return DomSharedStylesHost;
}(SharedStylesHost);
DomSharedStylesHost.decorators = [ {
type: _angular_core.Injectable
} ];
DomSharedStylesHost.ctorParameters = function() {
return [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ DOCUMENT ]
} ]
} ];
};
var NAMESPACE_URIS = {
svg: "http://www.w3.org/2000/svg",
xhtml: "http://www.w3.org/1999/xhtml",
xlink: "http://www.w3.org/1999/xlink",
xml: "http://www.w3.org/XML/1998/namespace",
xmlns: "http://www.w3.org/2000/xmlns/"
};
var COMPONENT_REGEX = /%COMP%/g;
var COMPONENT_VARIABLE = "%COMP%";
var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
function shimContentAttribute(componentShortId) {
return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
function shimHostAttribute(componentShortId) {
return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
function flattenStyles(compId, styles, target) {
for (var i = 0; i < styles.length; i++) {
var style = styles[i];
if (Array.isArray(style)) {
flattenStyles(compId, style, target);
} else {
style = style.replace(COMPONENT_REGEX, compId);
target.push(style);
}
}
return target;
}
function decoratePreventDefault(eventHandler) {
return function(event) {
var allowDefaultBehavior = eventHandler(event);
if (allowDefaultBehavior === false) {
event.preventDefault();
event.returnValue = false;
}
};
}
var DomRendererFactory2 = function() {
function DomRendererFactory2(eventManager, sharedStylesHost) {
this.eventManager = eventManager;
this.sharedStylesHost = sharedStylesHost;
this.rendererByCompId = new Map();
this.defaultRenderer = new DefaultDomRenderer2(eventManager);
}
DomRendererFactory2.prototype.createRenderer = function(element, type) {
if (!element || !type) {
return this.defaultRenderer;
}
switch (type.encapsulation) {
case _angular_core.ViewEncapsulation.Emulated:
{
var renderer = this.rendererByCompId.get(type.id);
if (!renderer) {
renderer = new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);
this.rendererByCompId.set(type.id, renderer);
}
renderer.applyToHost(element);
return renderer;
}

case _angular_core.ViewEncapsulation.Native:
return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);

default:
{
if (!this.rendererByCompId.has(type.id)) {
var styles = flattenStyles(type.id, type.styles, []);
this.sharedStylesHost.addStyles(styles);
this.rendererByCompId.set(type.id, this.defaultRenderer);
}
return this.defaultRenderer;
}
}
};
return DomRendererFactory2;
}();
DomRendererFactory2.decorators = [ {
type: _angular_core.Injectable
} ];
DomRendererFactory2.ctorParameters = function() {
return [ {
type: EventManager
}, {
type: DomSharedStylesHost
} ];
};
var DefaultDomRenderer2 = function() {
function DefaultDomRenderer2(eventManager) {
this.eventManager = eventManager;
this.data = Object.create(null);
}
DefaultDomRenderer2.prototype.destroy = function() {};
DefaultDomRenderer2.prototype.createElement = function(name, namespace) {
if (namespace) {
return document.createElementNS(NAMESPACE_URIS[namespace], name);
}
return document.createElement(name);
};
DefaultDomRenderer2.prototype.createComment = function(value) {
return document.createComment(value);
};
DefaultDomRenderer2.prototype.createText = function(value) {
return document.createTextNode(value);
};
DefaultDomRenderer2.prototype.appendChild = function(parent, newChild) {
parent.appendChild(newChild);
};
DefaultDomRenderer2.prototype.insertBefore = function(parent, newChild, refChild) {
if (parent) {
parent.insertBefore(newChild, refChild);
}
};
DefaultDomRenderer2.prototype.removeChild = function(parent, oldChild) {
if (parent) {
parent.removeChild(oldChild);
}
};
DefaultDomRenderer2.prototype.selectRootElement = function(selectorOrNode) {
var el = typeof selectorOrNode === "string" ? document.querySelector(selectorOrNode) : selectorOrNode;
if (!el) {
throw new Error('The selector "' + selectorOrNode + '" did not match any elements');
}
el.textContent = "";
return el;
};
DefaultDomRenderer2.prototype.parentNode = function(node) {
return node.parentNode;
};
DefaultDomRenderer2.prototype.nextSibling = function(node) {
return node.nextSibling;
};
DefaultDomRenderer2.prototype.setAttribute = function(el, name, value, namespace) {
if (namespace) {
name = namespace + ":" + name;
var namespaceUri = NAMESPACE_URIS[namespace];
if (namespaceUri) {
el.setAttributeNS(namespaceUri, name, value);
} else {
el.setAttribute(name, value);
}
} else {
el.setAttribute(name, value);
}
};
DefaultDomRenderer2.prototype.removeAttribute = function(el, name, namespace) {
if (namespace) {
var namespaceUri = NAMESPACE_URIS[namespace];
if (namespaceUri) {
el.removeAttributeNS(namespaceUri, name);
} else {
el.removeAttribute(namespace + ":" + name);
}
} else {
el.removeAttribute(name);
}
};
DefaultDomRenderer2.prototype.addClass = function(el, name) {
el.classList.add(name);
};
DefaultDomRenderer2.prototype.removeClass = function(el, name) {
el.classList.remove(name);
};
DefaultDomRenderer2.prototype.setStyle = function(el, style, value, flags) {
if (flags & _angular_core.RendererStyleFlags2.DashCase) {
el.style.setProperty(style, value, !!(flags & _angular_core.RendererStyleFlags2.Important) ? "important" : "");
} else {
el.style[style] = value;
}
};
DefaultDomRenderer2.prototype.removeStyle = function(el, style, flags) {
if (flags & _angular_core.RendererStyleFlags2.DashCase) {
el.style.removeProperty(style);
} else {
el.style[style] = "";
}
};
DefaultDomRenderer2.prototype.setProperty = function(el, name, value) {
checkNoSyntheticProp(name, "property");
el[name] = value;
};
DefaultDomRenderer2.prototype.setValue = function(node, value) {
node.nodeValue = value;
};
DefaultDomRenderer2.prototype.listen = function(target, event, callback) {
checkNoSyntheticProp(event, "listener");
if (typeof target === "string") {
return this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback));
}
return this.eventManager.addEventListener(target, event, decoratePreventDefault(callback));
};
return DefaultDomRenderer2;
}();
var AT_CHARCODE = "@".charCodeAt(0);
function checkNoSyntheticProp(name, nameKind) {
if (name.charCodeAt(0) === AT_CHARCODE) {
throw new Error("Found the synthetic " + nameKind + " " + name + '. Please include either "BrowserAnimationsModule" or "NoopAnimationsModule" in your application.');
}
}
var EmulatedEncapsulationDomRenderer2 = function(_super) {
__extends(EmulatedEncapsulationDomRenderer2, _super);
function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component) {
var _this = _super.call(this, eventManager) || this;
_this.component = component;
var styles = flattenStyles(component.id, component.styles, []);
sharedStylesHost.addStyles(styles);
_this.contentAttr = shimContentAttribute(component.id);
_this.hostAttr = shimHostAttribute(component.id);
return _this;
}
EmulatedEncapsulationDomRenderer2.prototype.applyToHost = function(element) {
_super.prototype.setAttribute.call(this, element, this.hostAttr, "");
};
EmulatedEncapsulationDomRenderer2.prototype.createElement = function(parent, name) {
var el = _super.prototype.createElement.call(this, parent, name);
_super.prototype.setAttribute.call(this, el, this.contentAttr, "");
return el;
};
return EmulatedEncapsulationDomRenderer2;
}(DefaultDomRenderer2);
var ShadowDomRenderer = function(_super) {
__extends(ShadowDomRenderer, _super);
function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {
var _this = _super.call(this, eventManager) || this;
_this.sharedStylesHost = sharedStylesHost;
_this.hostEl = hostEl;
_this.component = component;
_this.shadowRoot = hostEl.createShadowRoot();
_this.sharedStylesHost.addHost(_this.shadowRoot);
var styles = flattenStyles(component.id, component.styles, []);
for (var i = 0; i < styles.length; i++) {
var styleEl = document.createElement("style");
styleEl.textContent = styles[i];
_this.shadowRoot.appendChild(styleEl);
}
return _this;
}
ShadowDomRenderer.prototype.nodeOrShadowRoot = function(node) {
return node === this.hostEl ? this.shadowRoot : node;
};
ShadowDomRenderer.prototype.destroy = function() {
this.sharedStylesHost.removeHost(this.shadowRoot);
};
ShadowDomRenderer.prototype.appendChild = function(parent, newChild) {
return _super.prototype.appendChild.call(this, this.nodeOrShadowRoot(parent), newChild);
};
ShadowDomRenderer.prototype.insertBefore = function(parent, newChild, refChild) {
return _super.prototype.insertBefore.call(this, this.nodeOrShadowRoot(parent), newChild, refChild);
};
ShadowDomRenderer.prototype.removeChild = function(parent, oldChild) {
return _super.prototype.removeChild.call(this, this.nodeOrShadowRoot(parent), oldChild);
};
ShadowDomRenderer.prototype.parentNode = function(node) {
return this.nodeOrShadowRoot(_super.prototype.parentNode.call(this, this.nodeOrShadowRoot(node)));
};
return ShadowDomRenderer;
}(DefaultDomRenderer2);
var DomEventsPlugin = function(_super) {
__extends(DomEventsPlugin, _super);
function DomEventsPlugin(doc) {
return _super.call(this, doc) || this;
}
DomEventsPlugin.prototype.supports = function(eventName) {
return true;
};
DomEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
element.addEventListener(eventName, handler, false);
return function() {
return element.removeEventListener(eventName, handler, false);
};
};
return DomEventsPlugin;
}(EventManagerPlugin);
DomEventsPlugin.decorators = [ {
type: _angular_core.Injectable
} ];
DomEventsPlugin.ctorParameters = function() {
return [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ DOCUMENT ]
} ]
} ];
};
var EVENT_NAMES = {
pan: true,
panstart: true,
panmove: true,
panend: true,
pancancel: true,
panleft: true,
panright: true,
panup: true,
pandown: true,
pinch: true,
pinchstart: true,
pinchmove: true,
pinchend: true,
pinchcancel: true,
pinchin: true,
pinchout: true,
press: true,
pressup: true,
rotate: true,
rotatestart: true,
rotatemove: true,
rotateend: true,
rotatecancel: true,
swipe: true,
swipeleft: true,
swiperight: true,
swipeup: true,
swipedown: true,
tap: true
};
var HAMMER_GESTURE_CONFIG = new _angular_core.InjectionToken("HammerGestureConfig");
var HammerGestureConfig = function() {
function HammerGestureConfig() {
this.events = [];
this.overrides = {};
}
HammerGestureConfig.prototype.buildHammer = function(element) {
var mc = new Hammer(element);
mc.get("pinch").set({
enable: true
});
mc.get("rotate").set({
enable: true
});
for (var eventName in this.overrides) {
mc.get(eventName).set(this.overrides[eventName]);
}
return mc;
};
return HammerGestureConfig;
}();
HammerGestureConfig.decorators = [ {
type: _angular_core.Injectable
} ];
HammerGestureConfig.ctorParameters = function() {
return [];
};
var HammerGesturesPlugin = function(_super) {
__extends(HammerGesturesPlugin, _super);
function HammerGesturesPlugin(doc, _config) {
var _this = _super.call(this, doc) || this;
_this._config = _config;
return _this;
}
HammerGesturesPlugin.prototype.supports = function(eventName) {
if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
return false;
}
if (!window.Hammer) {
throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
}
return true;
};
HammerGesturesPlugin.prototype.addEventListener = function(element, eventName, handler) {
var _this = this;
var zone = this.manager.getZone();
eventName = eventName.toLowerCase();
return zone.runOutsideAngular(function() {
var mc = _this._config.buildHammer(element);
var callback = function(eventObj) {
zone.runGuarded(function() {
handler(eventObj);
});
};
mc.on(eventName, callback);
return function() {
return mc.off(eventName, callback);
};
});
};
HammerGesturesPlugin.prototype.isCustomEvent = function(eventName) {
return this._config.events.indexOf(eventName) > -1;
};
return HammerGesturesPlugin;
}(EventManagerPlugin);
HammerGesturesPlugin.decorators = [ {
type: _angular_core.Injectable
} ];
HammerGesturesPlugin.ctorParameters = function() {
return [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ DOCUMENT ]
} ]
}, {
type: HammerGestureConfig,
decorators: [ {
type: _angular_core.Inject,
args: [ HAMMER_GESTURE_CONFIG ]
} ]
} ];
};
var MODIFIER_KEYS = [ "alt", "control", "meta", "shift" ];
var MODIFIER_KEY_GETTERS = {
alt: function(event) {
return event.altKey;
},
control: function(event) {
return event.ctrlKey;
},
meta: function(event) {
return event.metaKey;
},
shift: function(event) {
return event.shiftKey;
}
};
var KeyEventsPlugin = function(_super) {
__extends(KeyEventsPlugin, _super);
function KeyEventsPlugin(doc) {
return _super.call(this, doc) || this;
}
KeyEventsPlugin.prototype.supports = function(eventName) {
return KeyEventsPlugin.parseEventName(eventName) != null;
};
KeyEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
var outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent["fullKey"], handler, this.manager.getZone());
return this.manager.getZone().runOutsideAngular(function() {
return getDOM().onAndCancel(element, parsedEvent["domEventName"], outsideHandler);
});
};
KeyEventsPlugin.parseEventName = function(eventName) {
var parts = eventName.toLowerCase().split(".");
var domEventName = parts.shift();
if (parts.length === 0 || !(domEventName === "keydown" || domEventName === "keyup")) {
return null;
}
var key = KeyEventsPlugin._normalizeKey(parts.pop());
var fullKey = "";
MODIFIER_KEYS.forEach(function(modifierName) {
var index = parts.indexOf(modifierName);
if (index > -1) {
parts.splice(index, 1);
fullKey += modifierName + ".";
}
});
fullKey += key;
if (parts.length != 0 || key.length === 0) {
return null;
}
var result = {};
result["domEventName"] = domEventName;
result["fullKey"] = fullKey;
return result;
};
KeyEventsPlugin.getEventFullKey = function(event) {
var fullKey = "";
var key = getDOM().getEventKey(event);
key = key.toLowerCase();
if (key === " ") {
key = "space";
} else if (key === ".") {
key = "dot";
}
MODIFIER_KEYS.forEach(function(modifierName) {
if (modifierName != key) {
var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
if (modifierGetter(event)) {
fullKey += modifierName + ".";
}
}
});
fullKey += key;
return fullKey;
};
KeyEventsPlugin.eventCallback = function(fullKey, handler, zone) {
return function(event) {
if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
zone.runGuarded(function() {
return handler(event);
});
}
};
};
KeyEventsPlugin._normalizeKey = function(keyName) {
switch (keyName) {
case "esc":
return "escape";

default:
return keyName;
}
};
return KeyEventsPlugin;
}(EventManagerPlugin);
KeyEventsPlugin.decorators = [ {
type: _angular_core.Injectable
} ];
KeyEventsPlugin.ctorParameters = function() {
return [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ DOCUMENT ]
} ]
} ];
};
var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:\/?#]*(?:[\/?#]|$))/gi;
var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
function sanitizeUrl(url) {
url = String(url);
if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;
if (_angular_core.isDevMode()) {
getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
}
return "unsafe:" + url;
}
function sanitizeSrcset(srcset) {
srcset = String(srcset);
return srcset.split(",").map(function(srcset) {
return sanitizeUrl(srcset.trim());
}).join(", ");
}
var inertElement = null;
var DOM = null;
function getInertElement() {
if (inertElement) return inertElement;
DOM = getDOM();
var templateEl = DOM.createElement("template");
if ("content" in templateEl) return templateEl;
var doc = DOM.createHtmlDocument();
inertElement = DOM.querySelector(doc, "body");
if (inertElement == null) {
var html = DOM.createElement("html", doc);
inertElement = DOM.createElement("body", doc);
DOM.appendChild(html, inertElement);
DOM.appendChild(doc, html);
}
return inertElement;
}
function tagSet(tags) {
var res = {};
for (var _i = 0, _a = tags.split(","); _i < _a.length; _i++) {
var t = _a[_i];
res[t] = true;
}
return res;
}
function merge() {
var sets = [];
for (var _i = 0; _i < arguments.length; _i++) {
sets[_i] = arguments[_i];
}
var res = {};
for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
var s = sets_1[_a];
for (var v in s) {
if (s.hasOwnProperty(v)) res[v] = true;
}
}
return res;
}
var VOID_ELEMENTS = tagSet("area,br,col,hr,img,wbr");
var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr");
var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet("rp,rt");
var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet("address,article," + "aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5," + "h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul"));
var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet("a,abbr,acronym,audio,b," + "bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s," + "samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video"));
var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
var URI_ATTRS = tagSet("background,cite,href,itemtype,longdesc,poster,src,xlink:href");
var SRCSET_ATTRS = tagSet("srcset");
var HTML_ATTRS = tagSet("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan," + "compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace," + "ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules," + "scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap," + "valign,value,vspace,width");
var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
var SanitizingHtmlSerializer = function() {
function SanitizingHtmlSerializer() {
this.sanitizedSomething = false;
this.buf = [];
}
SanitizingHtmlSerializer.prototype.sanitizeChildren = function(el) {
var current = el.firstChild;
while (current) {
if (DOM.isElementNode(current)) {
this.startElement(current);
} else if (DOM.isTextNode(current)) {
this.chars(DOM.nodeValue(current));
} else {
this.sanitizedSomething = true;
}
if (DOM.firstChild(current)) {
current = DOM.firstChild(current);
continue;
}
while (current) {
if (DOM.isElementNode(current)) {
this.endElement(current);
}
var next = checkClobberedElement(current, DOM.nextSibling(current));
if (next) {
current = next;
break;
}
current = checkClobberedElement(current, DOM.parentElement(current));
}
}
return this.buf.join("");
};
SanitizingHtmlSerializer.prototype.startElement = function(element) {
var _this = this;
var tagName = DOM.nodeName(element).toLowerCase();
if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
this.sanitizedSomething = true;
return;
}
this.buf.push("<");
this.buf.push(tagName);
DOM.attributeMap(element).forEach(function(value, attrName) {
var lower = attrName.toLowerCase();
if (!VALID_ATTRS.hasOwnProperty(lower)) {
_this.sanitizedSomething = true;
return;
}
if (URI_ATTRS[lower]) value = sanitizeUrl(value);
if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);
_this.buf.push(" ");
_this.buf.push(attrName);
_this.buf.push('="');
_this.buf.push(encodeEntities(value));
_this.buf.push('"');
});
this.buf.push(">");
};
SanitizingHtmlSerializer.prototype.endElement = function(current) {
var tagName = DOM.nodeName(current).toLowerCase();
if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
this.buf.push("</");
this.buf.push(tagName);
this.buf.push(">");
}
};
SanitizingHtmlSerializer.prototype.chars = function(chars) {
this.buf.push(encodeEntities(chars));
};
return SanitizingHtmlSerializer;
}();
function checkClobberedElement(node, nextNode) {
if (nextNode && DOM.contains(node, nextNode)) {
throw new Error("Failed to sanitize html because the element is clobbered: " + DOM.getOuterHTML(node));
}
return nextNode;
}
var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
function encodeEntities(value) {
return value.replace(/&/g, "&amp;").replace(SURROGATE_PAIR_REGEXP, function(match) {
var hi = match.charCodeAt(0);
var low = match.charCodeAt(1);
return "&#" + ((hi - 55296) * 1024 + (low - 56320) + 65536) + ";";
}).replace(NON_ALPHANUMERIC_REGEXP, function(match) {
return "&#" + match.charCodeAt(0) + ";";
}).replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
function stripCustomNsAttrs(el) {
DOM.attributeMap(el).forEach(function(_, attrName) {
if (attrName === "xmlns:ns1" || attrName.indexOf("ns1:") === 0) {
DOM.removeAttribute(el, attrName);
}
});
for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
var n = _a[_i];
if (DOM.isElementNode(n)) stripCustomNsAttrs(n);
}
}
function sanitizeHtml(defaultDoc, unsafeHtmlInput) {
try {
var containerEl = getInertElement();
var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : "";
var mXSSAttempts = 5;
var parsedHtml = unsafeHtml;
do {
if (mXSSAttempts === 0) {
throw new Error("Failed to sanitize html because the input is unstable");
}
mXSSAttempts--;
unsafeHtml = parsedHtml;
DOM.setInnerHTML(containerEl, unsafeHtml);
if (defaultDoc.documentMode) {
stripCustomNsAttrs(containerEl);
}
parsedHtml = DOM.getInnerHTML(containerEl);
} while (unsafeHtml !== parsedHtml);
var sanitizer = new SanitizingHtmlSerializer();
var safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
var parent = DOM.getTemplateContent(containerEl) || containerEl;
for (var _i = 0, _a = DOM.childNodesAsList(parent); _i < _a.length; _i++) {
var child = _a[_i];
DOM.removeChild(parent, child);
}
if (_angular_core.isDevMode() && sanitizer.sanitizedSomething) {
DOM.log("WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).");
}
return safeHtml;
} catch (e) {
inertElement = null;
throw e;
}
}
var VALUES = "[-,.\"'%_!# a-zA-Z0-9]+";
var TRANSFORMATION_FNS = "(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?";
var COLOR_FNS = "(?:rgb|hsl)a?";
var GRADIENTS = "(?:repeating-)?(?:linear|radial)-gradient";
var CSS3_FNS = "(?:calc|attr)";
var FN_ARGS = "\\([-0-9.%, #a-zA-Z]+\\)";
var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|" + ("(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + "|" + GRADIENTS + "|" + CSS3_FNS + ")") + (FN_ARGS + ")$"), "g");
var URL_RE = /^url\(([^)]+)\)$/;
function hasBalancedQuotes(value) {
var outsideSingle = true;
var outsideDouble = true;
for (var i = 0; i < value.length; i++) {
var c = value.charAt(i);
if (c === "'" && outsideDouble) {
outsideSingle = !outsideSingle;
} else if (c === '"' && outsideSingle) {
outsideDouble = !outsideDouble;
}
}
return outsideSingle && outsideDouble;
}
function sanitizeStyle(value) {
value = String(value).trim();
if (!value) return "";
var urlMatch = value.match(URL_RE);
if (urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1] || value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
return value;
}
if (_angular_core.isDevMode()) {
getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
}
return "unsafe";
}
var DomSanitizer = function() {
function DomSanitizer() {}
DomSanitizer.prototype.sanitize = function(context, value) {};
DomSanitizer.prototype.bypassSecurityTrustHtml = function(value) {};
DomSanitizer.prototype.bypassSecurityTrustStyle = function(value) {};
DomSanitizer.prototype.bypassSecurityTrustScript = function(value) {};
DomSanitizer.prototype.bypassSecurityTrustUrl = function(value) {};
DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function(value) {};
return DomSanitizer;
}();
var DomSanitizerImpl = function(_super) {
__extends(DomSanitizerImpl, _super);
function DomSanitizerImpl(_doc) {
var _this = _super.call(this) || this;
_this._doc = _doc;
return _this;
}
DomSanitizerImpl.prototype.sanitize = function(ctx, value) {
if (value == null) return null;
switch (ctx) {
case _angular_core.SecurityContext.NONE:
return value;

case _angular_core.SecurityContext.HTML:
if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;
this.checkNotSafeValue(value, "HTML");
return sanitizeHtml(this._doc, String(value));

case _angular_core.SecurityContext.STYLE:
if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;
this.checkNotSafeValue(value, "Style");
return sanitizeStyle(value);

case _angular_core.SecurityContext.SCRIPT:
if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;
this.checkNotSafeValue(value, "Script");
throw new Error("unsafe value used in a script context");

case _angular_core.SecurityContext.URL:
if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
return value.changingThisBreaksApplicationSecurity;
}
this.checkNotSafeValue(value, "URL");
return sanitizeUrl(String(value));

case _angular_core.SecurityContext.RESOURCE_URL:
if (value instanceof SafeResourceUrlImpl) {
return value.changingThisBreaksApplicationSecurity;
}
this.checkNotSafeValue(value, "ResourceURL");
throw new Error("unsafe value used in a resource URL context (see http://g.co/ng/security#xss)");

default:
throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
}
};
DomSanitizerImpl.prototype.checkNotSafeValue = function(value, expectedType) {
if (value instanceof SafeValueImpl) {
throw new Error("Required a safe " + expectedType + ", got a " + value.getTypeName() + " " + "(see http://g.co/ng/security#xss)");
}
};
DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function(value) {
return new SafeHtmlImpl(value);
};
DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function(value) {
return new SafeStyleImpl(value);
};
DomSanitizerImpl.prototype.bypassSecurityTrustScript = function(value) {
return new SafeScriptImpl(value);
};
DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function(value) {
return new SafeUrlImpl(value);
};
DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function(value) {
return new SafeResourceUrlImpl(value);
};
return DomSanitizerImpl;
}(DomSanitizer);
DomSanitizerImpl.decorators = [ {
type: _angular_core.Injectable
} ];
DomSanitizerImpl.ctorParameters = function() {
return [ {
type: undefined,
decorators: [ {
type: _angular_core.Inject,
args: [ DOCUMENT ]
} ]
} ];
};
var SafeValueImpl = function() {
function SafeValueImpl(changingThisBreaksApplicationSecurity) {
this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
}
SafeValueImpl.prototype.getTypeName = function() {};
SafeValueImpl.prototype.toString = function() {
return "SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity + " (see http://g.co/ng/security#xss)";
};
return SafeValueImpl;
}();
var SafeHtmlImpl = function(_super) {
__extends(SafeHtmlImpl, _super);
function SafeHtmlImpl() {
return _super !== null && _super.apply(this, arguments) || this;
}
SafeHtmlImpl.prototype.getTypeName = function() {
return "HTML";
};
return SafeHtmlImpl;
}(SafeValueImpl);
var SafeStyleImpl = function(_super) {
__extends(SafeStyleImpl, _super);
function SafeStyleImpl() {
return _super !== null && _super.apply(this, arguments) || this;
}
SafeStyleImpl.prototype.getTypeName = function() {
return "Style";
};
return SafeStyleImpl;
}(SafeValueImpl);
var SafeScriptImpl = function(_super) {
__extends(SafeScriptImpl, _super);
function SafeScriptImpl() {
return _super !== null && _super.apply(this, arguments) || this;
}
SafeScriptImpl.prototype.getTypeName = function() {
return "Script";
};
return SafeScriptImpl;
}(SafeValueImpl);
var SafeUrlImpl = function(_super) {
__extends(SafeUrlImpl, _super);
function SafeUrlImpl() {
return _super !== null && _super.apply(this, arguments) || this;
}
SafeUrlImpl.prototype.getTypeName = function() {
return "URL";
};
return SafeUrlImpl;
}(SafeValueImpl);
var SafeResourceUrlImpl = function(_super) {
__extends(SafeResourceUrlImpl, _super);
function SafeResourceUrlImpl() {
return _super !== null && _super.apply(this, arguments) || this;
}
SafeResourceUrlImpl.prototype.getTypeName = function() {
return "ResourceURL";
};
return SafeResourceUrlImpl;
}(SafeValueImpl);
var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [ {
provide: _angular_core.PLATFORM_ID,
useValue: _angular_common.ɵPLATFORM_BROWSER_ID
}, {
provide: _angular_core.PLATFORM_INITIALIZER,
useValue: initDomAdapter,
multi: true
}, {
provide: _angular_common.PlatformLocation,
useClass: BrowserPlatformLocation
}, {
provide: DOCUMENT,
useFactory: _document,
deps: []
} ];
var BROWSER_SANITIZATION_PROVIDERS = [ {
provide: _angular_core.Sanitizer,
useExisting: DomSanitizer
}, {
provide: DomSanitizer,
useClass: DomSanitizerImpl
} ];
var platformBrowser = _angular_core.createPlatformFactory(_angular_core.platformCore, "browser", INTERNAL_BROWSER_PLATFORM_PROVIDERS);
function initDomAdapter() {
BrowserDomAdapter.makeCurrent();
BrowserGetTestability.init();
}
function errorHandler() {
return new _angular_core.ErrorHandler();
}
function _document() {
return document;
}
var BrowserModule = function() {
function BrowserModule(parentModule) {
if (parentModule) {
throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
}
}
BrowserModule.withServerTransition = function(params) {
return {
ngModule: BrowserModule,
providers: [ {
provide: _angular_core.APP_ID,
useValue: params.appId
}, {
provide: TRANSITION_ID,
useExisting: _angular_core.APP_ID
}, SERVER_TRANSITION_PROVIDERS ]
};
};
return BrowserModule;
}();
BrowserModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
providers: [ BROWSER_SANITIZATION_PROVIDERS, {
provide: _angular_core.ErrorHandler,
useFactory: errorHandler,
deps: []
}, {
provide: EVENT_MANAGER_PLUGINS,
useClass: DomEventsPlugin,
multi: true
}, {
provide: EVENT_MANAGER_PLUGINS,
useClass: KeyEventsPlugin,
multi: true
}, {
provide: EVENT_MANAGER_PLUGINS,
useClass: HammerGesturesPlugin,
multi: true
}, {
provide: HAMMER_GESTURE_CONFIG,
useClass: HammerGestureConfig
}, DomRendererFactory2, {
provide: _angular_core.RendererFactory2,
useExisting: DomRendererFactory2
}, {
provide: SharedStylesHost,
useExisting: DomSharedStylesHost
}, DomSharedStylesHost, _angular_core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS, Meta, Title ],
exports: [ _angular_common.CommonModule, _angular_core.ApplicationModule ]
} ]
} ];
BrowserModule.ctorParameters = function() {
return [ {
type: BrowserModule,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.SkipSelf
} ]
} ];
};
var win = typeof window !== "undefined" && window || {};
var ChangeDetectionPerfRecord = function() {
function ChangeDetectionPerfRecord(msPerTick, numTicks) {
this.msPerTick = msPerTick;
this.numTicks = numTicks;
}
return ChangeDetectionPerfRecord;
}();
var AngularProfiler = function() {
function AngularProfiler(ref) {
this.appRef = ref.injector.get(_angular_core.ApplicationRef);
}
AngularProfiler.prototype.timeChangeDetection = function(config) {
var record = config && config["record"];
var profileName = "Change Detection";
var isProfilerAvailable = win.console.profile != null;
if (record && isProfilerAvailable) {
win.console.profile(profileName);
}
var start = getDOM().performanceNow();
var numTicks = 0;
while (numTicks < 5 || getDOM().performanceNow() - start < 500) {
this.appRef.tick();
numTicks++;
}
var end = getDOM().performanceNow();
if (record && isProfilerAvailable) {
win.console.profileEnd(profileName);
}
var msPerTick = (end - start) / numTicks;
win.console.log("ran " + numTicks + " change detection cycles");
win.console.log(msPerTick.toFixed(2) + " ms per check");
return new ChangeDetectionPerfRecord(msPerTick, numTicks);
};
return AngularProfiler;
}();
var PROFILER_GLOBAL_NAME = "ng.profiler";
function enableDebugTools(ref) {
getDOM().setGlobalVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));
return ref;
}
function disableDebugTools() {
getDOM().setGlobalVar(PROFILER_GLOBAL_NAME, null);
}
var By = function() {
function By() {}
By.all = function() {
return function(debugElement) {
return true;
};
};
By.css = function(selector) {
return function(debugElement) {
return debugElement.nativeElement != null ? getDOM().elementMatches(debugElement.nativeElement, selector) : false;
};
};
By.directive = function(type) {
return function(debugElement) {
return debugElement.providerTokens.indexOf(type) !== -1;
};
};
return By;
}();
var VERSION = new _angular_core.Version("4.1.0");
exports.BrowserModule = BrowserModule;
exports.platformBrowser = platformBrowser;
exports.Meta = Meta;
exports.Title = Title;
exports.disableDebugTools = disableDebugTools;
exports.enableDebugTools = enableDebugTools;
exports.By = By;
exports.NgProbeToken = NgProbeToken$1;
exports.DOCUMENT = DOCUMENT;
exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS;
exports.EventManager = EventManager;
exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG;
exports.HammerGestureConfig = HammerGestureConfig;
exports.DomSanitizer = DomSanitizer;
exports.VERSION = VERSION;
exports.ɵBROWSER_SANITIZATION_PROVIDERS = BROWSER_SANITIZATION_PROVIDERS;
exports.ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS = INTERNAL_BROWSER_PLATFORM_PROVIDERS;
exports.ɵinitDomAdapter = initDomAdapter;
exports.ɵBrowserDomAdapter = BrowserDomAdapter;
exports.ɵsetValueOnPath = setValueOnPath;
exports.ɵBrowserPlatformLocation = BrowserPlatformLocation;
exports.ɵTRANSITION_ID = TRANSITION_ID;
exports.ɵBrowserGetTestability = BrowserGetTestability;
exports.ɵELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS;
exports.ɵDomAdapter = DomAdapter;
exports.ɵgetDOM = getDOM;
exports.ɵsetRootDomAdapter = setRootDomAdapter;
exports.ɵDomRendererFactory2 = DomRendererFactory2;
exports.ɵNAMESPACE_URIS = NAMESPACE_URIS;
exports.ɵflattenStyles = flattenStyles;
exports.ɵshimContentAttribute = shimContentAttribute;
exports.ɵshimHostAttribute = shimHostAttribute;
exports.ɵDomEventsPlugin = DomEventsPlugin;
exports.ɵHammerGesturesPlugin = HammerGesturesPlugin;
exports.ɵKeyEventsPlugin = KeyEventsPlugin;
exports.ɵDomSharedStylesHost = DomSharedStylesHost;
exports.ɵSharedStylesHost = SharedStylesHost;
exports.ɵb = _document;
exports.ɵa = errorHandler;
exports.ɵh = GenericBrowserDomAdapter;
exports.ɵg = SERVER_TRANSITION_PROVIDERS;
exports.ɵf = bootstrapListenerFactory;
exports.ɵc = _createNgProbe;
exports.ɵd = EventManagerPlugin;
exports.ɵe = DomSanitizerImpl;
Object.defineProperty(exports, "__esModule", {
value: true
});
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(92), __webpack_require__(93), __webpack_require__(166)) : typeof define === "function" && define.amd ? define([ "exports", "@angular/core", "rxjs/Observable", "@angular/platform-browser" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.http = global.ng.http || {}), global.ng.core, global.Rx, global.ng.platformBrowser);
})(this, function(exports, _angular_core, rxjs_Observable, _angular_platformBrowser) {
"use strict";
var __extends = undefined && undefined.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BrowserXhr = function() {
function BrowserXhr() {}
BrowserXhr.prototype.build = function() {
return new XMLHttpRequest();
};
return BrowserXhr;
}();
BrowserXhr.decorators = [ {
type: _angular_core.Injectable
} ];
BrowserXhr.ctorParameters = function() {
return [];
};
var RequestMethod = {};
RequestMethod.Get = 0;
RequestMethod.Post = 1;
RequestMethod.Put = 2;
RequestMethod.Delete = 3;
RequestMethod.Options = 4;
RequestMethod.Head = 5;
RequestMethod.Patch = 6;
RequestMethod[RequestMethod.Get] = "Get";
RequestMethod[RequestMethod.Post] = "Post";
RequestMethod[RequestMethod.Put] = "Put";
RequestMethod[RequestMethod.Delete] = "Delete";
RequestMethod[RequestMethod.Options] = "Options";
RequestMethod[RequestMethod.Head] = "Head";
RequestMethod[RequestMethod.Patch] = "Patch";
var ReadyState = {};
ReadyState.Unsent = 0;
ReadyState.Open = 1;
ReadyState.HeadersReceived = 2;
ReadyState.Loading = 3;
ReadyState.Done = 4;
ReadyState.Cancelled = 5;
ReadyState[ReadyState.Unsent] = "Unsent";
ReadyState[ReadyState.Open] = "Open";
ReadyState[ReadyState.HeadersReceived] = "HeadersReceived";
ReadyState[ReadyState.Loading] = "Loading";
ReadyState[ReadyState.Done] = "Done";
ReadyState[ReadyState.Cancelled] = "Cancelled";
var ResponseType = {};
ResponseType.Basic = 0;
ResponseType.Cors = 1;
ResponseType.Default = 2;
ResponseType.Error = 3;
ResponseType.Opaque = 4;
ResponseType[ResponseType.Basic] = "Basic";
ResponseType[ResponseType.Cors] = "Cors";
ResponseType[ResponseType.Default] = "Default";
ResponseType[ResponseType.Error] = "Error";
ResponseType[ResponseType.Opaque] = "Opaque";
var ContentType = {};
ContentType.NONE = 0;
ContentType.JSON = 1;
ContentType.FORM = 2;
ContentType.FORM_DATA = 3;
ContentType.TEXT = 4;
ContentType.BLOB = 5;
ContentType.ARRAY_BUFFER = 6;
ContentType[ContentType.NONE] = "NONE";
ContentType[ContentType.JSON] = "JSON";
ContentType[ContentType.FORM] = "FORM";
ContentType[ContentType.FORM_DATA] = "FORM_DATA";
ContentType[ContentType.TEXT] = "TEXT";
ContentType[ContentType.BLOB] = "BLOB";
ContentType[ContentType.ARRAY_BUFFER] = "ARRAY_BUFFER";
var ResponseContentType = {};
ResponseContentType.Text = 0;
ResponseContentType.Json = 1;
ResponseContentType.ArrayBuffer = 2;
ResponseContentType.Blob = 3;
ResponseContentType[ResponseContentType.Text] = "Text";
ResponseContentType[ResponseContentType.Json] = "Json";
ResponseContentType[ResponseContentType.ArrayBuffer] = "ArrayBuffer";
ResponseContentType[ResponseContentType.Blob] = "Blob";
var Headers = function() {
function Headers(headers) {
var _this = this;
this._headers = new Map();
this._normalizedNames = new Map();
if (!headers) {
return;
}
if (headers instanceof Headers) {
headers.forEach(function(values, name) {
values.forEach(function(value) {
return _this.append(name, value);
});
});
return;
}
Object.keys(headers).forEach(function(name) {
var values = Array.isArray(headers[name]) ? headers[name] : [ headers[name] ];
_this.delete(name);
values.forEach(function(value) {
return _this.append(name, value);
});
});
}
Headers.fromResponseHeaderString = function(headersString) {
var headers = new Headers();
headersString.split("\n").forEach(function(line) {
var index = line.indexOf(":");
if (index > 0) {
var name = line.slice(0, index);
var value = line.slice(index + 1).trim();
headers.set(name, value);
}
});
return headers;
};
Headers.prototype.append = function(name, value) {
var values = this.getAll(name);
if (values === null) {
this.set(name, value);
} else {
values.push(value);
}
};
Headers.prototype.delete = function(name) {
var lcName = name.toLowerCase();
this._normalizedNames.delete(lcName);
this._headers.delete(lcName);
};
Headers.prototype.forEach = function(fn) {
var _this = this;
this._headers.forEach(function(values, lcName) {
return fn(values, _this._normalizedNames.get(lcName), _this._headers);
});
};
Headers.prototype.get = function(name) {
var values = this.getAll(name);
if (values === null) {
return null;
}
return values.length > 0 ? values[0] : null;
};
Headers.prototype.has = function(name) {
return this._headers.has(name.toLowerCase());
};
Headers.prototype.keys = function() {
return Array.from(this._normalizedNames.values());
};
Headers.prototype.set = function(name, value) {
if (Array.isArray(value)) {
if (value.length) {
this._headers.set(name.toLowerCase(), [ value.join(",") ]);
}
} else {
this._headers.set(name.toLowerCase(), [ value ]);
}
this.mayBeSetNormalizedName(name);
};
Headers.prototype.values = function() {
return Array.from(this._headers.values());
};
Headers.prototype.toJSON = function() {
var _this = this;
var serialized = {};
this._headers.forEach(function(values, name) {
var split = [];
values.forEach(function(v) {
return split.push.apply(split, v.split(","));
});
serialized[_this._normalizedNames.get(name)] = split;
});
return serialized;
};
Headers.prototype.getAll = function(name) {
return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;
};
Headers.prototype.entries = function() {
throw new Error('"entries" method is not implemented on Headers class');
};
Headers.prototype.mayBeSetNormalizedName = function(name) {
var lcName = name.toLowerCase();
if (!this._normalizedNames.has(lcName)) {
this._normalizedNames.set(lcName, name);
}
};
return Headers;
}();
var ResponseOptions = function() {
function ResponseOptions(_a) {
var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;
this.body = body != null ? body : null;
this.status = status != null ? status : null;
this.headers = headers != null ? headers : null;
this.statusText = statusText != null ? statusText : null;
this.type = type != null ? type : null;
this.url = url != null ? url : null;
}
ResponseOptions.prototype.merge = function(options) {
return new ResponseOptions({
body: options && options.body != null ? options.body : this.body,
status: options && options.status != null ? options.status : this.status,
headers: options && options.headers != null ? options.headers : this.headers,
statusText: options && options.statusText != null ? options.statusText : this.statusText,
type: options && options.type != null ? options.type : this.type,
url: options && options.url != null ? options.url : this.url
});
};
return ResponseOptions;
}();
var BaseResponseOptions = function(_super) {
__extends(BaseResponseOptions, _super);
function BaseResponseOptions() {
return _super.call(this, {
status: 200,
statusText: "Ok",
type: ResponseType.Default,
headers: new Headers()
}) || this;
}
return BaseResponseOptions;
}(ResponseOptions);
BaseResponseOptions.decorators = [ {
type: _angular_core.Injectable
} ];
BaseResponseOptions.ctorParameters = function() {
return [];
};
var ConnectionBackend = function() {
function ConnectionBackend() {}
ConnectionBackend.prototype.createConnection = function(request) {};
return ConnectionBackend;
}();
var Connection = function() {
function Connection() {}
return Connection;
}();
var XSRFStrategy = function() {
function XSRFStrategy() {}
XSRFStrategy.prototype.configureRequest = function(req) {};
return XSRFStrategy;
}();
function normalizeMethodName(method) {
if (typeof method !== "string") return method;
switch (method.toUpperCase()) {
case "GET":
return RequestMethod.Get;

case "POST":
return RequestMethod.Post;

case "PUT":
return RequestMethod.Put;

case "DELETE":
return RequestMethod.Delete;

case "OPTIONS":
return RequestMethod.Options;

case "HEAD":
return RequestMethod.Head;

case "PATCH":
return RequestMethod.Patch;
}
throw new Error('Invalid request method. The method "' + method + '" is not supported.');
}
var isSuccess = function(status) {
return status >= 200 && status < 300;
};
function getResponseURL(xhr) {
if ("responseURL" in xhr) {
return xhr.responseURL;
}
if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
return xhr.getResponseHeader("X-Request-URL");
}
return null;
}
function stringToArrayBuffer(input) {
var view = new Uint16Array(input.length);
for (var i = 0, strLen = input.length; i < strLen; i++) {
view[i] = input.charCodeAt(i);
}
return view.buffer;
}
function paramParser(rawParams) {
if (rawParams === void 0) {
rawParams = "";
}
var map = new Map();
if (rawParams.length > 0) {
var params = rawParams.split("&");
params.forEach(function(param) {
var eqIdx = param.indexOf("=");
var _a = eqIdx == -1 ? [ param, "" ] : [ param.slice(0, eqIdx), param.slice(eqIdx + 1) ], key = _a[0], val = _a[1];
var list = map.get(key) || [];
list.push(val);
map.set(key, list);
});
}
return map;
}
var QueryEncoder = function() {
function QueryEncoder() {}
QueryEncoder.prototype.encodeKey = function(k) {
return standardEncoding(k);
};
QueryEncoder.prototype.encodeValue = function(v) {
return standardEncoding(v);
};
return QueryEncoder;
}();
function standardEncoding(v) {
return encodeURIComponent(v).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/gi, "$").replace(/%2C/gi, ",").replace(/%3B/gi, ";").replace(/%2B/gi, "+").replace(/%3D/gi, "=").replace(/%3F/gi, "?").replace(/%2F/gi, "/");
}
var URLSearchParams = function() {
function URLSearchParams(rawParams, queryEncoder) {
if (rawParams === void 0) {
rawParams = "";
}
if (queryEncoder === void 0) {
queryEncoder = new QueryEncoder();
}
this.rawParams = rawParams;
this.queryEncoder = queryEncoder;
this.paramsMap = paramParser(rawParams);
}
URLSearchParams.prototype.clone = function() {
var clone = new URLSearchParams("", this.queryEncoder);
clone.appendAll(this);
return clone;
};
URLSearchParams.prototype.has = function(param) {
return this.paramsMap.has(param);
};
URLSearchParams.prototype.get = function(param) {
var storedParam = this.paramsMap.get(param);
return Array.isArray(storedParam) ? storedParam[0] : null;
};
URLSearchParams.prototype.getAll = function(param) {
return this.paramsMap.get(param) || [];
};
URLSearchParams.prototype.set = function(param, val) {
if (val === void 0 || val === null) {
this.delete(param);
return;
}
var list = this.paramsMap.get(param) || [];
list.length = 0;
list.push(val);
this.paramsMap.set(param, list);
};
URLSearchParams.prototype.setAll = function(searchParams) {
var _this = this;
searchParams.paramsMap.forEach(function(value, param) {
var list = _this.paramsMap.get(param) || [];
list.length = 0;
list.push(value[0]);
_this.paramsMap.set(param, list);
});
};
URLSearchParams.prototype.append = function(param, val) {
if (val === void 0 || val === null) return;
var list = this.paramsMap.get(param) || [];
list.push(val);
this.paramsMap.set(param, list);
};
URLSearchParams.prototype.appendAll = function(searchParams) {
var _this = this;
searchParams.paramsMap.forEach(function(value, param) {
var list = _this.paramsMap.get(param) || [];
for (var i = 0; i < value.length; ++i) {
list.push(value[i]);
}
_this.paramsMap.set(param, list);
});
};
URLSearchParams.prototype.replaceAll = function(searchParams) {
var _this = this;
searchParams.paramsMap.forEach(function(value, param) {
var list = _this.paramsMap.get(param) || [];
list.length = 0;
for (var i = 0; i < value.length; ++i) {
list.push(value[i]);
}
_this.paramsMap.set(param, list);
});
};
URLSearchParams.prototype.toString = function() {
var _this = this;
var paramsList = [];
this.paramsMap.forEach(function(values, k) {
values.forEach(function(v) {
return paramsList.push(_this.queryEncoder.encodeKey(k) + "=" + _this.queryEncoder.encodeValue(v));
});
});
return paramsList.join("&");
};
URLSearchParams.prototype.delete = function(param) {
this.paramsMap.delete(param);
};
return URLSearchParams;
}();
var Body = function() {
function Body() {}
Body.prototype.json = function() {
if (typeof this._body === "string") {
return JSON.parse(this._body);
}
if (this._body instanceof ArrayBuffer) {
return JSON.parse(this.text());
}
return this._body;
};
Body.prototype.text = function() {
if (this._body instanceof URLSearchParams) {
return this._body.toString();
}
if (this._body instanceof ArrayBuffer) {
return String.fromCharCode.apply(null, new Uint16Array(this._body));
}
if (this._body == null) {
return "";
}
if (typeof this._body === "object") {
return JSON.stringify(this._body, null, 2);
}
return this._body.toString();
};
Body.prototype.arrayBuffer = function() {
if (this._body instanceof ArrayBuffer) {
return this._body;
}
return stringToArrayBuffer(this.text());
};
Body.prototype.blob = function() {
if (this._body instanceof Blob) {
return this._body;
}
if (this._body instanceof ArrayBuffer) {
return new Blob([ this._body ]);
}
throw new Error("The request body isn't either a blob or an array buffer");
};
return Body;
}();
var Response = function(_super) {
__extends(Response, _super);
function Response(responseOptions) {
var _this = _super.call(this) || this;
_this._body = responseOptions.body;
_this.status = responseOptions.status;
_this.ok = _this.status >= 200 && _this.status <= 299;
_this.statusText = responseOptions.statusText;
_this.headers = responseOptions.headers;
_this.type = responseOptions.type;
_this.url = responseOptions.url;
return _this;
}
Response.prototype.toString = function() {
return "Response with status: " + this.status + " " + this.statusText + " for URL: " + this.url;
};
return Response;
}(Body);
var _nextRequestId = 0;
var JSONP_HOME = "__ng_jsonp__";
var _jsonpConnections = null;
function _getJsonpConnections() {
var w = typeof window == "object" ? window : {};
if (_jsonpConnections === null) {
_jsonpConnections = w[JSONP_HOME] = {};
}
return _jsonpConnections;
}
var BrowserJsonp = function() {
function BrowserJsonp() {}
BrowserJsonp.prototype.build = function(url) {
var node = document.createElement("script");
node.src = url;
return node;
};
BrowserJsonp.prototype.nextRequestID = function() {
return "__req" + _nextRequestId++;
};
BrowserJsonp.prototype.requestCallback = function(id) {
return JSONP_HOME + "." + id + ".finished";
};
BrowserJsonp.prototype.exposeConnection = function(id, connection) {
var connections = _getJsonpConnections();
connections[id] = connection;
};
BrowserJsonp.prototype.removeConnection = function(id) {
var connections = _getJsonpConnections();
connections[id] = null;
};
BrowserJsonp.prototype.send = function(node) {
document.body.appendChild(node);
};
BrowserJsonp.prototype.cleanup = function(node) {
if (node.parentNode) {
node.parentNode.removeChild(node);
}
};
return BrowserJsonp;
}();
BrowserJsonp.decorators = [ {
type: _angular_core.Injectable
} ];
BrowserJsonp.ctorParameters = function() {
return [];
};
var JSONP_ERR_NO_CALLBACK = "JSONP injected script did not invoke callback.";
var JSONP_ERR_WRONG_METHOD = "JSONP requests must use GET request method.";
var JSONPConnection = function() {
function JSONPConnection() {}
JSONPConnection.prototype.finished = function(data) {};
return JSONPConnection;
}();
var JSONPConnection_ = function(_super) {
__extends(JSONPConnection_, _super);
function JSONPConnection_(req, _dom, baseResponseOptions) {
var _this = _super.call(this) || this;
_this._dom = _dom;
_this.baseResponseOptions = baseResponseOptions;
_this._finished = false;
if (req.method !== RequestMethod.Get) {
throw new TypeError(JSONP_ERR_WRONG_METHOD);
}
_this.request = req;
_this.response = new rxjs_Observable.Observable(function(responseObserver) {
_this.readyState = ReadyState.Loading;
var id = _this._id = _dom.nextRequestID();
_dom.exposeConnection(id, _this);
var callback = _dom.requestCallback(_this._id);
var url = req.url;
if (url.indexOf("=JSONP_CALLBACK&") > -1) {
url = url.replace("=JSONP_CALLBACK&", "=" + callback + "&");
} else if (url.lastIndexOf("=JSONP_CALLBACK") === url.length - "=JSONP_CALLBACK".length) {
url = url.substring(0, url.length - "=JSONP_CALLBACK".length) + ("=" + callback);
}
var script = _this._script = _dom.build(url);
var onLoad = function(event) {
if (_this.readyState === ReadyState.Cancelled) return;
_this.readyState = ReadyState.Done;
_dom.cleanup(script);
if (!_this._finished) {
var responseOptions_1 = new ResponseOptions({
body: JSONP_ERR_NO_CALLBACK,
type: ResponseType.Error,
url: url
});
if (baseResponseOptions) {
responseOptions_1 = baseResponseOptions.merge(responseOptions_1);
}
responseObserver.error(new Response(responseOptions_1));
return;
}
var responseOptions = new ResponseOptions({
body: _this._responseData,
url: url
});
if (_this.baseResponseOptions) {
responseOptions = _this.baseResponseOptions.merge(responseOptions);
}
responseObserver.next(new Response(responseOptions));
responseObserver.complete();
};
var onError = function(error) {
if (_this.readyState === ReadyState.Cancelled) return;
_this.readyState = ReadyState.Done;
_dom.cleanup(script);
var responseOptions = new ResponseOptions({
body: error.message,
type: ResponseType.Error
});
if (baseResponseOptions) {
responseOptions = baseResponseOptions.merge(responseOptions);
}
responseObserver.error(new Response(responseOptions));
};
script.addEventListener("load", onLoad);
script.addEventListener("error", onError);
_dom.send(script);
return function() {
_this.readyState = ReadyState.Cancelled;
script.removeEventListener("load", onLoad);
script.removeEventListener("error", onError);
_this._dom.cleanup(script);
};
});
return _this;
}
JSONPConnection_.prototype.finished = function(data) {
this._finished = true;
this._dom.removeConnection(this._id);
if (this.readyState === ReadyState.Cancelled) return;
this._responseData = data;
};
return JSONPConnection_;
}(JSONPConnection);
var JSONPBackend = function(_super) {
__extends(JSONPBackend, _super);
function JSONPBackend() {
return _super !== null && _super.apply(this, arguments) || this;
}
return JSONPBackend;
}(ConnectionBackend);
var JSONPBackend_ = function(_super) {
__extends(JSONPBackend_, _super);
function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
var _this = _super.call(this) || this;
_this._browserJSONP = _browserJSONP;
_this._baseResponseOptions = _baseResponseOptions;
return _this;
}
JSONPBackend_.prototype.createConnection = function(request) {
return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
};
return JSONPBackend_;
}(JSONPBackend);
JSONPBackend_.decorators = [ {
type: _angular_core.Injectable
} ];
JSONPBackend_.ctorParameters = function() {
return [ {
type: BrowserJsonp
}, {
type: ResponseOptions
} ];
};
var XSSI_PREFIX = /^\)\]\}',?\n/;
var XHRConnection = function() {
function XHRConnection(req, browserXHR, baseResponseOptions) {
var _this = this;
this.request = req;
this.response = new rxjs_Observable.Observable(function(responseObserver) {
var _xhr = browserXHR.build();
_xhr.open(RequestMethod[req.method].toUpperCase(), req.url);
if (req.withCredentials != null) {
_xhr.withCredentials = req.withCredentials;
}
var onLoad = function() {
var status = _xhr.status === 1223 ? 204 : _xhr.status;
var body = null;
if (status !== 204) {
body = typeof _xhr.response === "undefined" ? _xhr.responseText : _xhr.response;
if (typeof body === "string") {
body = body.replace(XSSI_PREFIX, "");
}
}
if (status === 0) {
status = body ? 200 : 0;
}
var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());
var url = getResponseURL(_xhr) || req.url;
var statusText = _xhr.statusText || "OK";
var responseOptions = new ResponseOptions({
body: body,
status: status,
headers: headers,
statusText: statusText,
url: url
});
if (baseResponseOptions != null) {
responseOptions = baseResponseOptions.merge(responseOptions);
}
var response = new Response(responseOptions);
response.ok = isSuccess(status);
if (response.ok) {
responseObserver.next(response);
responseObserver.complete();
return;
}
responseObserver.error(response);
};
var onError = function(err) {
var responseOptions = new ResponseOptions({
body: err,
type: ResponseType.Error,
status: _xhr.status,
statusText: _xhr.statusText
});
if (baseResponseOptions != null) {
responseOptions = baseResponseOptions.merge(responseOptions);
}
responseObserver.error(new Response(responseOptions));
};
_this.setDetectedContentType(req, _xhr);
if (req.headers == null) {
req.headers = new Headers();
}
if (!req.headers.has("Accept")) {
req.headers.append("Accept", "application/json, text/plain, */*");
}
req.headers.forEach(function(values, name) {
return _xhr.setRequestHeader(name, values.join(","));
});
if (req.responseType != null && _xhr.responseType != null) {
switch (req.responseType) {
case ResponseContentType.ArrayBuffer:
_xhr.responseType = "arraybuffer";
break;

case ResponseContentType.Json:
_xhr.responseType = "json";
break;

case ResponseContentType.Text:
_xhr.responseType = "text";
break;

case ResponseContentType.Blob:
_xhr.responseType = "blob";
break;

default:
throw new Error("The selected responseType is not supported");
}
}
_xhr.addEventListener("load", onLoad);
_xhr.addEventListener("error", onError);
_xhr.send(_this.request.getBody());
return function() {
_xhr.removeEventListener("load", onLoad);
_xhr.removeEventListener("error", onError);
_xhr.abort();
};
});
}
XHRConnection.prototype.setDetectedContentType = function(req, _xhr) {
if (req.headers != null && req.headers.get("Content-Type") != null) {
return;
}
switch (req.contentType) {
case ContentType.NONE:
break;

case ContentType.JSON:
_xhr.setRequestHeader("content-type", "application/json");
break;

case ContentType.FORM:
_xhr.setRequestHeader("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
break;

case ContentType.TEXT:
_xhr.setRequestHeader("content-type", "text/plain");
break;

case ContentType.BLOB:
var blob = req.blob();
if (blob.type) {
_xhr.setRequestHeader("content-type", blob.type);
}
break;
}
};
return XHRConnection;
}();
var CookieXSRFStrategy = function() {
function CookieXSRFStrategy(_cookieName, _headerName) {
if (_cookieName === void 0) {
_cookieName = "XSRF-TOKEN";
}
if (_headerName === void 0) {
_headerName = "X-XSRF-TOKEN";
}
this._cookieName = _cookieName;
this._headerName = _headerName;
}
CookieXSRFStrategy.prototype.configureRequest = function(req) {
var xsrfToken = _angular_platformBrowser.ɵgetDOM().getCookie(this._cookieName);
if (xsrfToken) {
req.headers.set(this._headerName, xsrfToken);
}
};
return CookieXSRFStrategy;
}();
var XHRBackend = function() {
function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {
this._browserXHR = _browserXHR;
this._baseResponseOptions = _baseResponseOptions;
this._xsrfStrategy = _xsrfStrategy;
}
XHRBackend.prototype.createConnection = function(request) {
this._xsrfStrategy.configureRequest(request);
return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
};
return XHRBackend;
}();
XHRBackend.decorators = [ {
type: _angular_core.Injectable
} ];
XHRBackend.ctorParameters = function() {
return [ {
type: BrowserXhr
}, {
type: ResponseOptions
}, {
type: XSRFStrategy
} ];
};
var RequestOptions = function() {
function RequestOptions(_a) {
var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search, params = _b.params, withCredentials = _b.withCredentials, responseType = _b.responseType;
this.method = method != null ? normalizeMethodName(method) : null;
this.headers = headers != null ? headers : null;
this.body = body != null ? body : null;
this.url = url != null ? url : null;
this.params = this._mergeSearchParams(params || search);
this.withCredentials = withCredentials != null ? withCredentials : null;
this.responseType = responseType != null ? responseType : null;
}
Object.defineProperty(RequestOptions.prototype, "search", {
get: function() {
return this.params;
},
set: function(params) {
this.params = params;
},
enumerable: true,
configurable: true
});
RequestOptions.prototype.merge = function(options) {
return new RequestOptions({
method: options && options.method != null ? options.method : this.method,
headers: options && options.headers != null ? options.headers : new Headers(this.headers),
body: options && options.body != null ? options.body : this.body,
url: options && options.url != null ? options.url : this.url,
params: options && this._mergeSearchParams(options.params || options.search),
withCredentials: options && options.withCredentials != null ? options.withCredentials : this.withCredentials,
responseType: options && options.responseType != null ? options.responseType : this.responseType
});
};
RequestOptions.prototype._mergeSearchParams = function(params) {
if (!params) return this.params;
if (params instanceof URLSearchParams) {
return params.clone();
}
if (typeof params === "string") {
return new URLSearchParams(params);
}
return this._parseParams(params);
};
RequestOptions.prototype._parseParams = function(objParams) {
var _this = this;
if (objParams === void 0) {
objParams = {};
}
var params = new URLSearchParams();
Object.keys(objParams).forEach(function(key) {
var value = objParams[key];
if (Array.isArray(value)) {
value.forEach(function(item) {
return _this._appendParam(key, item, params);
});
} else {
_this._appendParam(key, value, params);
}
});
return params;
};
RequestOptions.prototype._appendParam = function(key, value, params) {
if (typeof value !== "string") {
value = JSON.stringify(value);
}
params.append(key, value);
};
return RequestOptions;
}();
var BaseRequestOptions = function(_super) {
__extends(BaseRequestOptions, _super);
function BaseRequestOptions() {
return _super.call(this, {
method: RequestMethod.Get,
headers: new Headers()
}) || this;
}
return BaseRequestOptions;
}(RequestOptions);
BaseRequestOptions.decorators = [ {
type: _angular_core.Injectable
} ];
BaseRequestOptions.ctorParameters = function() {
return [];
};
var Request = function(_super) {
__extends(Request, _super);
function Request(requestOptions) {
var _this = _super.call(this) || this;
var url = requestOptions.url;
_this.url = requestOptions.url;
if (requestOptions.params) {
var params = requestOptions.params.toString();
if (params.length > 0) {
var prefix = "?";
if (_this.url.indexOf("?") != -1) {
prefix = _this.url[_this.url.length - 1] == "&" ? "" : "&";
}
_this.url = url + prefix + params;
}
}
_this._body = requestOptions.body;
_this.method = normalizeMethodName(requestOptions.method);
_this.headers = new Headers(requestOptions.headers);
_this.contentType = _this.detectContentType();
_this.withCredentials = requestOptions.withCredentials;
_this.responseType = requestOptions.responseType;
return _this;
}
Request.prototype.detectContentType = function() {
switch (this.headers.get("content-type")) {
case "application/json":
return ContentType.JSON;

case "application/x-www-form-urlencoded":
return ContentType.FORM;

case "multipart/form-data":
return ContentType.FORM_DATA;

case "text/plain":
case "text/html":
return ContentType.TEXT;

case "application/octet-stream":
return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;

default:
return this.detectContentTypeFromBody();
}
};
Request.prototype.detectContentTypeFromBody = function() {
if (this._body == null) {
return ContentType.NONE;
} else if (this._body instanceof URLSearchParams) {
return ContentType.FORM;
} else if (this._body instanceof FormData) {
return ContentType.FORM_DATA;
} else if (this._body instanceof Blob$1) {
return ContentType.BLOB;
} else if (this._body instanceof ArrayBuffer$1) {
return ContentType.ARRAY_BUFFER;
} else if (this._body && typeof this._body === "object") {
return ContentType.JSON;
} else {
return ContentType.TEXT;
}
};
Request.prototype.getBody = function() {
switch (this.contentType) {
case ContentType.JSON:
return this.text();

case ContentType.FORM:
return this.text();

case ContentType.FORM_DATA:
return this._body;

case ContentType.TEXT:
return this.text();

case ContentType.BLOB:
return this.blob();

case ContentType.ARRAY_BUFFER:
return this.arrayBuffer();

default:
return null;
}
};
return Request;
}(Body);
var noop = function() {};
var w = typeof window == "object" ? window : noop;
var FormData = w["FormData"] || noop;
var Blob$1 = w["Blob"] || noop;
var ArrayBuffer$1 = w["ArrayBuffer"] || noop;
function httpRequest(backend, request) {
return backend.createConnection(request).response;
}
function mergeOptions(defaultOpts, providedOpts, method, url) {
var newOptions = defaultOpts;
if (providedOpts) {
return newOptions.merge(new RequestOptions({
method: providedOpts.method || method,
url: providedOpts.url || url,
search: providedOpts.search,
params: providedOpts.params,
headers: providedOpts.headers,
body: providedOpts.body,
withCredentials: providedOpts.withCredentials,
responseType: providedOpts.responseType
}));
}
return newOptions.merge(new RequestOptions({
method: method,
url: url
}));
}
var Http = function() {
function Http(_backend, _defaultOptions) {
this._backend = _backend;
this._defaultOptions = _defaultOptions;
}
Http.prototype.request = function(url, options) {
var responseObservable;
if (typeof url === "string") {
responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));
} else if (url instanceof Request) {
responseObservable = httpRequest(this._backend, url);
} else {
throw new Error("First argument must be a url string or Request instance.");
}
return responseObservable;
};
Http.prototype.get = function(url, options) {
return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));
};
Http.prototype.post = function(url, body, options) {
return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({
body: body
})), options, RequestMethod.Post, url)));
};
Http.prototype.put = function(url, body, options) {
return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({
body: body
})), options, RequestMethod.Put, url)));
};
Http.prototype.delete = function(url, options) {
return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));
};
Http.prototype.patch = function(url, body, options) {
return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({
body: body
})), options, RequestMethod.Patch, url)));
};
Http.prototype.head = function(url, options) {
return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));
};
Http.prototype.options = function(url, options) {
return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));
};
return Http;
}();
Http.decorators = [ {
type: _angular_core.Injectable
} ];
Http.ctorParameters = function() {
return [ {
type: ConnectionBackend
}, {
type: RequestOptions
} ];
};
var Jsonp = function(_super) {
__extends(Jsonp, _super);
function Jsonp(backend, defaultOptions) {
return _super.call(this, backend, defaultOptions) || this;
}
Jsonp.prototype.request = function(url, options) {
var responseObservable;
if (typeof url === "string") {
url = new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url));
}
if (url instanceof Request) {
if (url.method !== RequestMethod.Get) {
throw new Error("JSONP requests must use GET request method.");
}
responseObservable = httpRequest(this._backend, url);
} else {
throw new Error("First argument must be a url string or Request instance.");
}
return responseObservable;
};
return Jsonp;
}(Http);
Jsonp.decorators = [ {
type: _angular_core.Injectable
} ];
Jsonp.ctorParameters = function() {
return [ {
type: ConnectionBackend
}, {
type: RequestOptions
} ];
};
function _createDefaultCookieXSRFStrategy() {
return new CookieXSRFStrategy();
}
function httpFactory(xhrBackend, requestOptions) {
return new Http(xhrBackend, requestOptions);
}
function jsonpFactory(jsonpBackend, requestOptions) {
return new Jsonp(jsonpBackend, requestOptions);
}
var HttpModule = function() {
function HttpModule() {}
return HttpModule;
}();
HttpModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
providers: [ {
provide: Http,
useFactory: httpFactory,
deps: [ XHRBackend, RequestOptions ]
}, BrowserXhr, {
provide: RequestOptions,
useClass: BaseRequestOptions
}, {
provide: ResponseOptions,
useClass: BaseResponseOptions
}, XHRBackend, {
provide: XSRFStrategy,
useFactory: _createDefaultCookieXSRFStrategy
} ]
} ]
} ];
HttpModule.ctorParameters = function() {
return [];
};
var JsonpModule = function() {
function JsonpModule() {}
return JsonpModule;
}();
JsonpModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
providers: [ {
provide: Jsonp,
useFactory: jsonpFactory,
deps: [ JSONPBackend, RequestOptions ]
}, BrowserJsonp, {
provide: RequestOptions,
useClass: BaseRequestOptions
}, {
provide: ResponseOptions,
useClass: BaseResponseOptions
}, {
provide: JSONPBackend,
useClass: JSONPBackend_
} ]
} ]
} ];
JsonpModule.ctorParameters = function() {
return [];
};
var VERSION = new _angular_core.Version("4.1.0");
exports.BrowserXhr = BrowserXhr;
exports.JSONPBackend = JSONPBackend;
exports.JSONPConnection = JSONPConnection;
exports.CookieXSRFStrategy = CookieXSRFStrategy;
exports.XHRBackend = XHRBackend;
exports.XHRConnection = XHRConnection;
exports.BaseRequestOptions = BaseRequestOptions;
exports.RequestOptions = RequestOptions;
exports.BaseResponseOptions = BaseResponseOptions;
exports.ResponseOptions = ResponseOptions;
exports.ReadyState = ReadyState;
exports.RequestMethod = RequestMethod;
exports.ResponseContentType = ResponseContentType;
exports.ResponseType = ResponseType;
exports.Headers = Headers;
exports.Http = Http;
exports.Jsonp = Jsonp;
exports.HttpModule = HttpModule;
exports.JsonpModule = JsonpModule;
exports.Connection = Connection;
exports.ConnectionBackend = ConnectionBackend;
exports.XSRFStrategy = XSRFStrategy;
exports.Request = Request;
exports.Response = Response;
exports.QueryEncoder = QueryEncoder;
exports.URLSearchParams = URLSearchParams;
exports.VERSION = VERSION;
exports.ɵg = BrowserJsonp;
exports.ɵa = JSONPBackend_;
exports.ɵf = Body;
exports.ɵb = _createDefaultCookieXSRFStrategy;
exports.ɵc = httpFactory;
exports.ɵd = jsonpFactory;
Object.defineProperty(exports, "__esModule", {
value: true
});
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(159), __webpack_require__(92), __webpack_require__(169), __webpack_require__(123), __webpack_require__(170), __webpack_require__(176), __webpack_require__(177), __webpack_require__(179), __webpack_require__(180), __webpack_require__(165), __webpack_require__(178), __webpack_require__(182), __webpack_require__(93), __webpack_require__(183), __webpack_require__(184), __webpack_require__(181), __webpack_require__(163), __webpack_require__(185), __webpack_require__(113), __webpack_require__(166), __webpack_require__(186)) : typeof define === "function" && define.amd ? define([ "exports", "@angular/common", "@angular/core", "rxjs/BehaviorSubject", "rxjs/Subject", "rxjs/observable/from", "rxjs/observable/of", "rxjs/operator/concatMap", "rxjs/operator/every", "rxjs/operator/first", "rxjs/operator/map", "rxjs/operator/mergeMap", "rxjs/operator/reduce", "rxjs/Observable", "rxjs/operator/catch", "rxjs/operator/concatAll", "rxjs/util/EmptyError", "rxjs/observable/fromPromise", "rxjs/operator/last", "rxjs/operator/mergeAll", "@angular/platform-browser", "rxjs/operator/filter" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.router = global.ng.router || {}), global.ng.common, global.ng.core, global.Rx, global.Rx, global.Rx.Observable, global.Rx.Observable, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx, global.Rx.Observable, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.ng.platformBrowser, global.Rx.Observable.prototype);
})(this, function(exports, _angular_common, _angular_core, rxjs_BehaviorSubject, rxjs_Subject, rxjs_observable_from, rxjs_observable_of, rxjs_operator_concatMap, rxjs_operator_every, rxjs_operator_first, rxjs_operator_map, rxjs_operator_mergeMap, rxjs_operator_reduce, rxjs_Observable, rxjs_operator_catch, rxjs_operator_concatAll, rxjs_util_EmptyError, rxjs_observable_fromPromise, rxjs_operator_last, rxjs_operator_mergeAll, _angular_platformBrowser, rxjs_operator_filter) {
"use strict";
var __extends = undefined && undefined.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var NavigationStart = function() {
function NavigationStart(id, url) {
this.id = id;
this.url = url;
}
NavigationStart.prototype.toString = function() {
return "NavigationStart(id: " + this.id + ", url: '" + this.url + "')";
};
return NavigationStart;
}();
var NavigationEnd = function() {
function NavigationEnd(id, url, urlAfterRedirects) {
this.id = id;
this.url = url;
this.urlAfterRedirects = urlAfterRedirects;
}
NavigationEnd.prototype.toString = function() {
return "NavigationEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "')";
};
return NavigationEnd;
}();
var NavigationCancel = function() {
function NavigationCancel(id, url, reason) {
this.id = id;
this.url = url;
this.reason = reason;
}
NavigationCancel.prototype.toString = function() {
return "NavigationCancel(id: " + this.id + ", url: '" + this.url + "')";
};
return NavigationCancel;
}();
var NavigationError = function() {
function NavigationError(id, url, error) {
this.id = id;
this.url = url;
this.error = error;
}
NavigationError.prototype.toString = function() {
return "NavigationError(id: " + this.id + ", url: '" + this.url + "', error: " + this.error + ")";
};
return NavigationError;
}();
var RoutesRecognized = function() {
function RoutesRecognized(id, url, urlAfterRedirects, state) {
this.id = id;
this.url = url;
this.urlAfterRedirects = urlAfterRedirects;
this.state = state;
}
RoutesRecognized.prototype.toString = function() {
return "RoutesRecognized(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
};
return RoutesRecognized;
}();
var RouteConfigLoadStart = function() {
function RouteConfigLoadStart(route) {
this.route = route;
}
RouteConfigLoadStart.prototype.toString = function() {
return "RouteConfigLoadStart(path: " + this.route.path + ")";
};
return RouteConfigLoadStart;
}();
var RouteConfigLoadEnd = function() {
function RouteConfigLoadEnd(route) {
this.route = route;
}
RouteConfigLoadEnd.prototype.toString = function() {
return "RouteConfigLoadEnd(path: " + this.route.path + ")";
};
return RouteConfigLoadEnd;
}();
var PRIMARY_OUTLET = "primary";
var ParamsAsMap = function() {
function ParamsAsMap(params) {
this.params = params || {};
}
ParamsAsMap.prototype.has = function(name) {
return this.params.hasOwnProperty(name);
};
ParamsAsMap.prototype.get = function(name) {
if (this.has(name)) {
var v = this.params[name];
return Array.isArray(v) ? v[0] : v;
}
return null;
};
ParamsAsMap.prototype.getAll = function(name) {
if (this.has(name)) {
var v = this.params[name];
return Array.isArray(v) ? v : [ v ];
}
return [];
};
Object.defineProperty(ParamsAsMap.prototype, "keys", {
get: function() {
return Object.keys(this.params);
},
enumerable: true,
configurable: true
});
return ParamsAsMap;
}();
function convertToParamMap(params) {
return new ParamsAsMap(params);
}
var NAVIGATION_CANCELING_ERROR = "ngNavigationCancelingError";
function navigationCancelingError(message) {
var error = Error("NavigationCancelingError: " + message);
error[NAVIGATION_CANCELING_ERROR] = true;
return error;
}
function isNavigationCancelingError(error) {
return error[NAVIGATION_CANCELING_ERROR];
}
function defaultUrlMatcher(segments, segmentGroup, route) {
var parts = route.path.split("/");
if (parts.length > segments.length) {
return null;
}
if (route.pathMatch === "full" && (segmentGroup.hasChildren() || parts.length < segments.length)) {
return null;
}
var posParams = {};
for (var index = 0; index < parts.length; index++) {
var part = parts[index];
var segment = segments[index];
var isParameter = part.startsWith(":");
if (isParameter) {
posParams[part.substring(1)] = segment;
} else if (part !== segment.path) {
return null;
}
}
return {
consumed: segments.slice(0, parts.length),
posParams: posParams
};
}
var LoadedRouterConfig = function() {
function LoadedRouterConfig(routes, module) {
this.routes = routes;
this.module = module;
}
return LoadedRouterConfig;
}();
function validateConfig(config, parentPath) {
if (parentPath === void 0) {
parentPath = "";
}
for (var i = 0; i < config.length; i++) {
var route = config[i];
var fullPath = getFullPath(parentPath, route);
validateNode(route, fullPath);
}
}
function validateNode(route, fullPath) {
if (!route) {
throw new Error("\n      Invalid configuration of route '" + fullPath + "': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    ");
}
if (Array.isArray(route)) {
throw new Error("Invalid configuration of route '" + fullPath + "': Array cannot be specified");
}
if (!route.component && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {
throw new Error("Invalid configuration of route '" + fullPath + "': a componentless route cannot have a named outlet set");
}
if (route.redirectTo && route.children) {
throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and children cannot be used together");
}
if (route.redirectTo && route.loadChildren) {
throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and loadChildren cannot be used together");
}
if (route.children && route.loadChildren) {
throw new Error("Invalid configuration of route '" + fullPath + "': children and loadChildren cannot be used together");
}
if (route.redirectTo && route.component) {
throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and component cannot be used together");
}
if (route.path && route.matcher) {
throw new Error("Invalid configuration of route '" + fullPath + "': path and matcher cannot be used together");
}
if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {
throw new Error("Invalid configuration of route '" + fullPath + "'. One of the following must be provided: component, redirectTo, children or loadChildren");
}
if (route.path === void 0 && route.matcher === void 0) {
throw new Error("Invalid configuration of route '" + fullPath + "': routes must have either a path or a matcher specified");
}
if (typeof route.path === "string" && route.path.charAt(0) === "/") {
throw new Error("Invalid configuration of route '" + fullPath + "': path cannot start with a slash");
}
if (route.path === "" && route.redirectTo !== void 0 && route.pathMatch === void 0) {
var exp = "The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.";
throw new Error("Invalid configuration of route '{path: \"" + fullPath + '", redirectTo: "' + route.redirectTo + "\"}': please provide 'pathMatch'. " + exp);
}
if (route.pathMatch !== void 0 && route.pathMatch !== "full" && route.pathMatch !== "prefix") {
throw new Error("Invalid configuration of route '" + fullPath + "': pathMatch can only be set to 'prefix' or 'full'");
}
if (route.children) {
validateConfig(route.children, fullPath);
}
}
function getFullPath(parentPath, currentRoute) {
if (!currentRoute) {
return parentPath;
}
if (!parentPath && !currentRoute.path) {
return "";
} else if (parentPath && !currentRoute.path) {
return parentPath + "/";
} else if (!parentPath && currentRoute.path) {
return currentRoute.path;
} else {
return parentPath + "/" + currentRoute.path;
}
}
function shallowEqualArrays(a, b) {
if (a.length !== b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (!shallowEqual(a[i], b[i])) return false;
}
return true;
}
function shallowEqual(a, b) {
var k1 = Object.keys(a);
var k2 = Object.keys(b);
if (k1.length != k2.length) {
return false;
}
var key;
for (var i = 0; i < k1.length; i++) {
key = k1[i];
if (a[key] !== b[key]) {
return false;
}
}
return true;
}
function flatten(arr) {
return Array.prototype.concat.apply([], arr);
}
function last$1(a) {
return a.length > 0 ? a[a.length - 1] : null;
}
function forEach(map$$1, callback) {
for (var prop in map$$1) {
if (map$$1.hasOwnProperty(prop)) {
callback(map$$1[prop], prop);
}
}
}
function waitForMap(obj, fn) {
if (Object.keys(obj).length === 0) {
return rxjs_observable_of.of({});
}
var waitHead = [];
var waitTail = [];
var res = {};
forEach(obj, function(a, k) {
var mapped = rxjs_operator_map.map.call(fn(k, a), function(r) {
return res[k] = r;
});
if (k === PRIMARY_OUTLET) {
waitHead.push(mapped);
} else {
waitTail.push(mapped);
}
});
var concat$ = rxjs_operator_concatAll.concatAll.call(rxjs_observable_of.of.apply(void 0, waitHead.concat(waitTail)));
var last$ = rxjs_operator_last.last.call(concat$);
return rxjs_operator_map.map.call(last$, function() {
return res;
});
}
function andObservables(observables) {
var merged$ = rxjs_operator_mergeAll.mergeAll.call(observables);
return rxjs_operator_every.every.call(merged$, function(result) {
return result === true;
});
}
function wrapIntoObservable(value) {
if (_angular_core.ɵisObservable(value)) {
return value;
}
if (_angular_core.ɵisPromise(value)) {
return rxjs_observable_fromPromise.fromPromise(value);
}
return rxjs_observable_of.of(value);
}
function createEmptyUrlTree() {
return new UrlTree(new UrlSegmentGroup([], {}), {}, null);
}
function containsTree(container, containee, exact) {
if (exact) {
return equalQueryParams(container.queryParams, containee.queryParams) && equalSegmentGroups(container.root, containee.root);
}
return containsQueryParams(container.queryParams, containee.queryParams) && containsSegmentGroup(container.root, containee.root);
}
function equalQueryParams(container, containee) {
return shallowEqual(container, containee);
}
function equalSegmentGroups(container, containee) {
if (!equalPath(container.segments, containee.segments)) return false;
if (container.numberOfChildren !== containee.numberOfChildren) return false;
for (var c in containee.children) {
if (!container.children[c]) return false;
if (!equalSegmentGroups(container.children[c], containee.children[c])) return false;
}
return true;
}
function containsQueryParams(container, containee) {
return Object.keys(containee).length <= Object.keys(container).length && Object.keys(containee).every(function(key) {
return containee[key] === container[key];
});
}
function containsSegmentGroup(container, containee) {
return containsSegmentGroupHelper(container, containee, containee.segments);
}
function containsSegmentGroupHelper(container, containee, containeePaths) {
if (container.segments.length > containeePaths.length) {
var current = container.segments.slice(0, containeePaths.length);
if (!equalPath(current, containeePaths)) return false;
if (containee.hasChildren()) return false;
return true;
} else if (container.segments.length === containeePaths.length) {
if (!equalPath(container.segments, containeePaths)) return false;
for (var c in containee.children) {
if (!container.children[c]) return false;
if (!containsSegmentGroup(container.children[c], containee.children[c])) return false;
}
return true;
} else {
var current = containeePaths.slice(0, container.segments.length);
var next = containeePaths.slice(container.segments.length);
if (!equalPath(container.segments, current)) return false;
if (!container.children[PRIMARY_OUTLET]) return false;
return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);
}
}
var UrlTree = function() {
function UrlTree(root, queryParams, fragment) {
this.root = root;
this.queryParams = queryParams;
this.fragment = fragment;
}
Object.defineProperty(UrlTree.prototype, "queryParamMap", {
get: function() {
if (!this._queryParamMap) {
this._queryParamMap = convertToParamMap(this.queryParams);
}
return this._queryParamMap;
},
enumerable: true,
configurable: true
});
UrlTree.prototype.toString = function() {
return DEFAULT_SERIALIZER.serialize(this);
};
return UrlTree;
}();
var UrlSegmentGroup = function() {
function UrlSegmentGroup(segments, children) {
var _this = this;
this.segments = segments;
this.children = children;
this.parent = null;
forEach(children, function(v, k) {
return v.parent = _this;
});
}
UrlSegmentGroup.prototype.hasChildren = function() {
return this.numberOfChildren > 0;
};
Object.defineProperty(UrlSegmentGroup.prototype, "numberOfChildren", {
get: function() {
return Object.keys(this.children).length;
},
enumerable: true,
configurable: true
});
UrlSegmentGroup.prototype.toString = function() {
return serializePaths(this);
};
return UrlSegmentGroup;
}();
var UrlSegment = function() {
function UrlSegment(path, parameters) {
this.path = path;
this.parameters = parameters;
}
Object.defineProperty(UrlSegment.prototype, "parameterMap", {
get: function() {
if (!this._parameterMap) {
this._parameterMap = convertToParamMap(this.parameters);
}
return this._parameterMap;
},
enumerable: true,
configurable: true
});
UrlSegment.prototype.toString = function() {
return serializePath(this);
};
return UrlSegment;
}();
function equalSegments(as, bs) {
return equalPath(as, bs) && as.every(function(a, i) {
return shallowEqual(a.parameters, bs[i].parameters);
});
}
function equalPath(as, bs) {
if (as.length !== bs.length) return false;
return as.every(function(a, i) {
return a.path === bs[i].path;
});
}
function mapChildrenIntoArray(segment, fn) {
var res = [];
forEach(segment.children, function(child, childOutlet) {
if (childOutlet === PRIMARY_OUTLET) {
res = res.concat(fn(child, childOutlet));
}
});
forEach(segment.children, function(child, childOutlet) {
if (childOutlet !== PRIMARY_OUTLET) {
res = res.concat(fn(child, childOutlet));
}
});
return res;
}
var UrlSerializer = function() {
function UrlSerializer() {}
UrlSerializer.prototype.parse = function(url) {};
UrlSerializer.prototype.serialize = function(tree) {};
return UrlSerializer;
}();
var DefaultUrlSerializer = function() {
function DefaultUrlSerializer() {}
DefaultUrlSerializer.prototype.parse = function(url) {
var p = new UrlParser(url);
return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
};
DefaultUrlSerializer.prototype.serialize = function(tree) {
var segment = "/" + serializeSegment(tree.root, true);
var query = serializeQueryParams(tree.queryParams);
var fragment = typeof tree.fragment === "string" ? "#" + encodeURI(tree.fragment) : "";
return "" + segment + query + fragment;
};
return DefaultUrlSerializer;
}();
var DEFAULT_SERIALIZER = new DefaultUrlSerializer();
function serializePaths(segment) {
return segment.segments.map(function(p) {
return serializePath(p);
}).join("/");
}
function serializeSegment(segment, root) {
if (!segment.hasChildren()) {
return serializePaths(segment);
}
if (root) {
var primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], false) : "";
var children_1 = [];
forEach(segment.children, function(v, k) {
if (k !== PRIMARY_OUTLET) {
children_1.push(k + ":" + serializeSegment(v, false));
}
});
return children_1.length > 0 ? primary + "(" + children_1.join("//") + ")" : primary;
} else {
var children = mapChildrenIntoArray(segment, function(v, k) {
if (k === PRIMARY_OUTLET) {
return [ serializeSegment(segment.children[PRIMARY_OUTLET], false) ];
}
return [ k + ":" + serializeSegment(v, false) ];
});
return serializePaths(segment) + "/(" + children.join("//") + ")";
}
}
function encode(s) {
return encodeURIComponent(s);
}
function decode(s) {
return decodeURIComponent(s);
}
function serializePath(path) {
return "" + encode(path.path) + serializeParams(path.parameters);
}
function serializeParams(params) {
return Object.keys(params).map(function(key) {
return ";" + encode(key) + "=" + encode(params[key]);
}).join("");
}
function serializeQueryParams(params) {
var strParams = Object.keys(params).map(function(name) {
var value = params[name];
return Array.isArray(value) ? value.map(function(v) {
return encode(name) + "=" + encode(v);
}).join("&") : encode(name) + "=" + encode(value);
});
return strParams.length ? "?" + strParams.join("&") : "";
}
var SEGMENT_RE = /^[^\/()?;=&#]+/;
function matchSegments(str) {
var match = str.match(SEGMENT_RE);
return match ? match[0] : "";
}
var QUERY_PARAM_RE = /^[^=?&#]+/;
function matchQueryParams(str) {
var match = str.match(QUERY_PARAM_RE);
return match ? match[0] : "";
}
var QUERY_PARAM_VALUE_RE = /^[^?&#]+/;
function matchUrlQueryParamValue(str) {
var match = str.match(QUERY_PARAM_VALUE_RE);
return match ? match[0] : "";
}
var UrlParser = function() {
function UrlParser(url) {
this.url = url;
this.remaining = url;
}
UrlParser.prototype.parseRootSegment = function() {
this.consumeOptional("/");
if (this.remaining === "" || this.peekStartsWith("?") || this.peekStartsWith("#")) {
return new UrlSegmentGroup([], {});
}
return new UrlSegmentGroup([], this.parseChildren());
};
UrlParser.prototype.parseQueryParams = function() {
var params = {};
if (this.consumeOptional("?")) {
do {
this.parseQueryParam(params);
} while (this.consumeOptional("&"));
}
return params;
};
UrlParser.prototype.parseFragment = function() {
return this.consumeOptional("#") ? decodeURI(this.remaining) : null;
};
UrlParser.prototype.parseChildren = function() {
if (this.remaining === "") {
return {};
}
this.consumeOptional("/");
var segments = [];
if (!this.peekStartsWith("(")) {
segments.push(this.parseSegment());
}
while (this.peekStartsWith("/") && !this.peekStartsWith("//") && !this.peekStartsWith("/(")) {
this.capture("/");
segments.push(this.parseSegment());
}
var children = {};
if (this.peekStartsWith("/(")) {
this.capture("/");
children = this.parseParens(true);
}
var res = {};
if (this.peekStartsWith("(")) {
res = this.parseParens(false);
}
if (segments.length > 0 || Object.keys(children).length > 0) {
res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);
}
return res;
};
UrlParser.prototype.parseSegment = function() {
var path = matchSegments(this.remaining);
if (path === "" && this.peekStartsWith(";")) {
throw new Error("Empty path url segment cannot have parameters: '" + this.remaining + "'.");
}
this.capture(path);
return new UrlSegment(decode(path), this.parseMatrixParams());
};
UrlParser.prototype.parseMatrixParams = function() {
var params = {};
while (this.consumeOptional(";")) {
this.parseParam(params);
}
return params;
};
UrlParser.prototype.parseParam = function(params) {
var key = matchSegments(this.remaining);
if (!key) {
return;
}
this.capture(key);
var value = "";
if (this.consumeOptional("=")) {
var valueMatch = matchSegments(this.remaining);
if (valueMatch) {
value = valueMatch;
this.capture(value);
}
}
params[decode(key)] = decode(value);
};
UrlParser.prototype.parseQueryParam = function(params) {
var key = matchQueryParams(this.remaining);
if (!key) {
return;
}
this.capture(key);
var value = "";
if (this.consumeOptional("=")) {
var valueMatch = matchUrlQueryParamValue(this.remaining);
if (valueMatch) {
value = valueMatch;
this.capture(value);
}
}
var decodedKey = decode(key);
var decodedVal = decode(value);
if (params.hasOwnProperty(decodedKey)) {
var currentVal = params[decodedKey];
if (!Array.isArray(currentVal)) {
currentVal = [ currentVal ];
params[decodedKey] = currentVal;
}
currentVal.push(decodedVal);
} else {
params[decodedKey] = decodedVal;
}
};
UrlParser.prototype.parseParens = function(allowPrimary) {
var segments = {};
this.capture("(");
while (!this.consumeOptional(")") && this.remaining.length > 0) {
var path = matchSegments(this.remaining);
var next = this.remaining[path.length];
if (next !== "/" && next !== ")" && next !== ";") {
throw new Error("Cannot parse url '" + this.url + "'");
}
var outletName = undefined;
if (path.indexOf(":") > -1) {
outletName = path.substr(0, path.indexOf(":"));
this.capture(outletName);
this.capture(":");
} else if (allowPrimary) {
outletName = PRIMARY_OUTLET;
}
var children = this.parseChildren();
segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children);
this.consumeOptional("//");
}
return segments;
};
UrlParser.prototype.peekStartsWith = function(str) {
return this.remaining.startsWith(str);
};
UrlParser.prototype.consumeOptional = function(str) {
if (this.peekStartsWith(str)) {
this.remaining = this.remaining.substring(str.length);
return true;
}
return false;
};
UrlParser.prototype.capture = function(str) {
if (!this.consumeOptional(str)) {
throw new Error('Expected "' + str + '".');
}
};
return UrlParser;
}();
var __assign$1 = undefined && undefined.__assign || Object.assign || function(t) {
for (var s, i = 1, n = arguments.length; i < n; i++) {
s = arguments[i];
for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
}
return t;
};
var NoMatch = function() {
function NoMatch(segmentGroup) {
this.segmentGroup = segmentGroup || null;
}
return NoMatch;
}();
var AbsoluteRedirect = function() {
function AbsoluteRedirect(urlTree) {
this.urlTree = urlTree;
}
return AbsoluteRedirect;
}();
function noMatch(segmentGroup) {
return new rxjs_Observable.Observable(function(obs) {
return obs.error(new NoMatch(segmentGroup));
});
}
function absoluteRedirect(newTree) {
return new rxjs_Observable.Observable(function(obs) {
return obs.error(new AbsoluteRedirect(newTree));
});
}
function namedOutletsRedirect(redirectTo) {
return new rxjs_Observable.Observable(function(obs) {
return obs.error(new Error("Only absolute redirects can have named outlets. redirectTo: '" + redirectTo + "'"));
});
}
function canLoadFails(route) {
return new rxjs_Observable.Observable(function(obs) {
return obs.error(navigationCancelingError("Cannot load children because the guard of the route \"path: '" + route.path + "'\" returned false"));
});
}
function applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {
return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();
}
var ApplyRedirects = function() {
function ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {
this.configLoader = configLoader;
this.urlSerializer = urlSerializer;
this.urlTree = urlTree;
this.config = config;
this.allowRedirects = true;
this.ngModule = moduleInjector.get(_angular_core.NgModuleRef);
}
ApplyRedirects.prototype.apply = function() {
var _this = this;
var expanded$ = this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);
var urlTrees$ = rxjs_operator_map.map.call(expanded$, function(rootSegmentGroup) {
return _this.createUrlTree(rootSegmentGroup, _this.urlTree.queryParams, _this.urlTree.fragment);
});
return rxjs_operator_catch._catch.call(urlTrees$, function(e) {
if (e instanceof AbsoluteRedirect) {
_this.allowRedirects = false;
return _this.match(e.urlTree);
}
if (e instanceof NoMatch) {
throw _this.noMatchError(e);
}
throw e;
});
};
ApplyRedirects.prototype.match = function(tree) {
var _this = this;
var expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);
var mapped$ = rxjs_operator_map.map.call(expanded$, function(rootSegmentGroup) {
return _this.createUrlTree(rootSegmentGroup, tree.queryParams, tree.fragment);
});
return rxjs_operator_catch._catch.call(mapped$, function(e) {
if (e instanceof NoMatch) {
throw _this.noMatchError(e);
}
throw e;
});
};
ApplyRedirects.prototype.noMatchError = function(e) {
return new Error("Cannot match any routes. URL Segment: '" + e.segmentGroup + "'");
};
ApplyRedirects.prototype.createUrlTree = function(rootCandidate, queryParams, fragment) {
var root = rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], (_a = {}, 
_a[PRIMARY_OUTLET] = rootCandidate, _a)) : rootCandidate;
return new UrlTree(root, queryParams, fragment);
var _a;
};
ApplyRedirects.prototype.expandSegmentGroup = function(ngModule, routes, segmentGroup, outlet) {
if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
return rxjs_operator_map.map.call(this.expandChildren(ngModule, routes, segmentGroup), function(children) {
return new UrlSegmentGroup([], children);
});
}
return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);
};
ApplyRedirects.prototype.expandChildren = function(ngModule, routes, segmentGroup) {
var _this = this;
return waitForMap(segmentGroup.children, function(childOutlet, child) {
return _this.expandSegmentGroup(ngModule, routes, child, childOutlet);
});
};
ApplyRedirects.prototype.expandSegment = function(ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {
var _this = this;
var routes$ = rxjs_observable_of.of.apply(void 0, routes);
var processedRoutes$ = rxjs_operator_map.map.call(routes$, function(r) {
var expanded$ = _this.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);
return rxjs_operator_catch._catch.call(expanded$, function(e) {
if (e instanceof NoMatch) {
return rxjs_observable_of.of(null);
}
throw e;
});
});
var concattedProcessedRoutes$ = rxjs_operator_concatAll.concatAll.call(processedRoutes$);
var first$ = rxjs_operator_first.first.call(concattedProcessedRoutes$, function(s) {
return !!s;
});
return rxjs_operator_catch._catch.call(first$, function(e, _) {
if (e instanceof rxjs_util_EmptyError.EmptyError) {
if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
return rxjs_observable_of.of(new UrlSegmentGroup([], {}));
}
throw new NoMatch(segmentGroup);
}
throw e;
});
};
ApplyRedirects.prototype.noLeftoversInUrl = function(segmentGroup, segments, outlet) {
return segments.length === 0 && !segmentGroup.children[outlet];
};
ApplyRedirects.prototype.expandSegmentAgainstRoute = function(ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {
if (getOutlet$1(route) !== outlet) {
return noMatch(segmentGroup);
}
if (route.redirectTo === undefined) {
return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);
}
if (allowRedirects && this.allowRedirects) {
return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);
}
return noMatch(segmentGroup);
};
ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function(ngModule, segmentGroup, routes, route, segments, outlet) {
if (route.path === "**") {
return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);
}
return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);
};
ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function(ngModule, routes, route, outlet) {
var _this = this;
var newTree = this.applyRedirectCommands([], route.redirectTo, {});
if (route.redirectTo.startsWith("/")) {
return absoluteRedirect(newTree);
}
return rxjs_operator_mergeMap.mergeMap.call(this.lineralizeSegments(route, newTree), function(newSegments) {
var group = new UrlSegmentGroup(newSegments, {});
return _this.expandSegment(ngModule, group, routes, newSegments, outlet, false);
});
};
ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function(ngModule, segmentGroup, routes, route, segments, outlet) {
var _this = this;
var _a = match(segmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild, positionalParamSegments = _a.positionalParamSegments;
if (!matched) return noMatch(segmentGroup);
var newTree = this.applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments);
if (route.redirectTo.startsWith("/")) {
return absoluteRedirect(newTree);
}
return rxjs_operator_mergeMap.mergeMap.call(this.lineralizeSegments(route, newTree), function(newSegments) {
return _this.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);
});
};
ApplyRedirects.prototype.matchSegmentAgainstRoute = function(ngModule, rawSegmentGroup, route, segments) {
var _this = this;
if (route.path === "**") {
if (route.loadChildren) {
return rxjs_operator_map.map.call(this.configLoader.load(ngModule.injector, route), function(cfg) {
route._loadedConfig = cfg;
return new UrlSegmentGroup(segments, {});
});
}
return rxjs_observable_of.of(new UrlSegmentGroup(segments, {}));
}
var _a = match(rawSegmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild;
if (!matched) return noMatch(rawSegmentGroup);
var rawSlicedSegments = segments.slice(lastChild);
var childConfig$ = this.getChildConfig(ngModule, route);
return rxjs_operator_mergeMap.mergeMap.call(childConfig$, function(routerConfig) {
var childModule = routerConfig.module;
var childConfig = routerConfig.routes;
var _a = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;
if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
var expanded$_1 = _this.expandChildren(childModule, childConfig, segmentGroup);
return rxjs_operator_map.map.call(expanded$_1, function(children) {
return new UrlSegmentGroup(consumedSegments, children);
});
}
if (childConfig.length === 0 && slicedSegments.length === 0) {
return rxjs_observable_of.of(new UrlSegmentGroup(consumedSegments, {}));
}
var expanded$ = _this.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);
return rxjs_operator_map.map.call(expanded$, function(cs) {
return new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children);
});
});
};
ApplyRedirects.prototype.getChildConfig = function(ngModule, route) {
var _this = this;
if (route.children) {
return rxjs_observable_of.of(new LoadedRouterConfig(route.children, ngModule));
}
if (route.loadChildren) {
if (route._loadedConfig !== undefined) {
return rxjs_observable_of.of(route._loadedConfig);
}
return rxjs_operator_mergeMap.mergeMap.call(runCanLoadGuard(ngModule.injector, route), function(shouldLoad) {
if (shouldLoad) {
return rxjs_operator_map.map.call(_this.configLoader.load(ngModule.injector, route), function(cfg) {
route._loadedConfig = cfg;
return cfg;
});
}
return canLoadFails(route);
});
}
return rxjs_observable_of.of(new LoadedRouterConfig([], ngModule));
};
ApplyRedirects.prototype.lineralizeSegments = function(route, urlTree) {
var res = [];
var c = urlTree.root;
while (true) {
res = res.concat(c.segments);
if (c.numberOfChildren === 0) {
return rxjs_observable_of.of(res);
}
if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {
return namedOutletsRedirect(route.redirectTo);
}
c = c.children[PRIMARY_OUTLET];
}
};
ApplyRedirects.prototype.applyRedirectCommands = function(segments, redirectTo, posParams) {
return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);
};
ApplyRedirects.prototype.applyRedirectCreatreUrlTree = function(redirectTo, urlTree, segments, posParams) {
var newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);
return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);
};
ApplyRedirects.prototype.createQueryParams = function(redirectToParams, actualParams) {
var res = {};
forEach(redirectToParams, function(v, k) {
res[k] = v.startsWith(":") ? actualParams[v.substring(1)] : v;
});
return res;
};
ApplyRedirects.prototype.createSegmentGroup = function(redirectTo, group, segments, posParams) {
var _this = this;
var updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);
var children = {};
forEach(group.children, function(child, name) {
children[name] = _this.createSegmentGroup(redirectTo, child, segments, posParams);
});
return new UrlSegmentGroup(updatedSegments, children);
};
ApplyRedirects.prototype.createSegments = function(redirectTo, redirectToSegments, actualSegments, posParams) {
var _this = this;
return redirectToSegments.map(function(s) {
return s.path.startsWith(":") ? _this.findPosParam(redirectTo, s, posParams) : _this.findOrReturn(s, actualSegments);
});
};
ApplyRedirects.prototype.findPosParam = function(redirectTo, redirectToUrlSegment, posParams) {
var pos = posParams[redirectToUrlSegment.path.substring(1)];
if (!pos) throw new Error("Cannot redirect to '" + redirectTo + "'. Cannot find '" + redirectToUrlSegment.path + "'.");
return pos;
};
ApplyRedirects.prototype.findOrReturn = function(redirectToUrlSegment, actualSegments) {
var idx = 0;
for (var _i = 0, actualSegments_1 = actualSegments; _i < actualSegments_1.length; _i++) {
var s = actualSegments_1[_i];
if (s.path === redirectToUrlSegment.path) {
actualSegments.splice(idx);
return s;
}
idx++;
}
return redirectToUrlSegment;
};
return ApplyRedirects;
}();
function runCanLoadGuard(moduleInjector, route) {
var canLoad = route.canLoad;
if (!canLoad || canLoad.length === 0) return rxjs_observable_of.of(true);
var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canLoad), function(injectionToken) {
var guard = moduleInjector.get(injectionToken);
return wrapIntoObservable(guard.canLoad ? guard.canLoad(route) : guard(route));
});
return andObservables(obs);
}
function match(segmentGroup, route, segments) {
if (route.path === "") {
if (route.pathMatch === "full" && (segmentGroup.hasChildren() || segments.length > 0)) {
return {
matched: false,
consumedSegments: [],
lastChild: 0,
positionalParamSegments: {}
};
}
return {
matched: true,
consumedSegments: [],
lastChild: 0,
positionalParamSegments: {}
};
}
var matcher = route.matcher || defaultUrlMatcher;
var res = matcher(segments, segmentGroup, route);
if (!res) {
return {
matched: false,
consumedSegments: [],
lastChild: 0,
positionalParamSegments: {}
};
}
return {
matched: true,
consumedSegments: res.consumed,
lastChild: res.consumed.length,
positionalParamSegments: res.posParams
};
}
function split(segmentGroup, consumedSegments, slicedSegments, config) {
if (slicedSegments.length > 0 && containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {
var s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
return {
segmentGroup: mergeTrivialChildren(s),
slicedSegments: []
};
}
if (slicedSegments.length === 0 && containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {
var s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
return {
segmentGroup: mergeTrivialChildren(s),
slicedSegments: slicedSegments
};
}
return {
segmentGroup: segmentGroup,
slicedSegments: slicedSegments
};
}
function mergeTrivialChildren(s) {
if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
var c = s.children[PRIMARY_OUTLET];
return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
}
return s;
}
function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
var res = {};
for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
var r = routes_1[_i];
if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {
res[getOutlet$1(r)] = new UrlSegmentGroup([], {});
}
}
return __assign$1({}, children, res);
}
function createChildrenForEmptySegments(routes, primarySegmentGroup) {
var res = {};
res[PRIMARY_OUTLET] = primarySegmentGroup;
for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {
var r = routes_2[_i];
if (r.path === "" && getOutlet$1(r) !== PRIMARY_OUTLET) {
res[getOutlet$1(r)] = new UrlSegmentGroup([], {});
}
}
return res;
}
function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, segments, routes) {
return routes.some(function(r) {
return isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet$1(r) !== PRIMARY_OUTLET;
});
}
function containsEmptyPathRedirects(segmentGroup, segments, routes) {
return routes.some(function(r) {
return isEmptyPathRedirect(segmentGroup, segments, r);
});
}
function isEmptyPathRedirect(segmentGroup, segments, r) {
if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === "full") {
return false;
}
return r.path === "" && r.redirectTo !== undefined;
}
function getOutlet$1(route) {
return route.outlet || PRIMARY_OUTLET;
}
var Tree = function() {
function Tree(root) {
this._root = root;
}
Object.defineProperty(Tree.prototype, "root", {
get: function() {
return this._root.value;
},
enumerable: true,
configurable: true
});
Tree.prototype.parent = function(t) {
var p = this.pathFromRoot(t);
return p.length > 1 ? p[p.length - 2] : null;
};
Tree.prototype.children = function(t) {
var n = findNode(t, this._root);
return n ? n.children.map(function(t) {
return t.value;
}) : [];
};
Tree.prototype.firstChild = function(t) {
var n = findNode(t, this._root);
return n && n.children.length > 0 ? n.children[0].value : null;
};
Tree.prototype.siblings = function(t) {
var p = findPath(t, this._root, []);
if (p.length < 2) return [];
var c = p[p.length - 2].children.map(function(c) {
return c.value;
});
return c.filter(function(cc) {
return cc !== t;
});
};
Tree.prototype.pathFromRoot = function(t) {
return findPath(t, this._root, []).map(function(s) {
return s.value;
});
};
return Tree;
}();
function findNode(expected, c) {
if (expected === c.value) return c;
for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
var cc = _a[_i];
var r = findNode(expected, cc);
if (r) return r;
}
return null;
}
function findPath(expected, c, collected) {
collected.push(c);
if (expected === c.value) return collected;
for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
var cc = _a[_i];
var cloned = collected.slice(0);
var r = findPath(expected, cc, cloned);
if (r.length > 0) return r;
}
return [];
}
var TreeNode = function() {
function TreeNode(value, children) {
this.value = value;
this.children = children;
}
TreeNode.prototype.toString = function() {
return "TreeNode(" + this.value + ")";
};
return TreeNode;
}();
var __assign$2 = undefined && undefined.__assign || Object.assign || function(t) {
for (var s, i = 1, n = arguments.length; i < n; i++) {
s = arguments[i];
for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
}
return t;
};
var RouterState = function(_super) {
__extends(RouterState, _super);
function RouterState(root, snapshot) {
var _this = _super.call(this, root) || this;
_this.snapshot = snapshot;
setRouterStateSnapshot(_this, root);
return _this;
}
RouterState.prototype.toString = function() {
return this.snapshot.toString();
};
return RouterState;
}(Tree);
function createEmptyState(urlTree, rootComponent) {
var snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
var emptyUrl = new rxjs_BehaviorSubject.BehaviorSubject([ new UrlSegment("", {}) ]);
var emptyParams = new rxjs_BehaviorSubject.BehaviorSubject({});
var emptyData = new rxjs_BehaviorSubject.BehaviorSubject({});
var emptyQueryParams = new rxjs_BehaviorSubject.BehaviorSubject({});
var fragment = new rxjs_BehaviorSubject.BehaviorSubject("");
var activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
activated.snapshot = snapshot.root;
return new RouterState(new TreeNode(activated, []), snapshot);
}
function createEmptyStateSnapshot(urlTree, rootComponent) {
var emptyParams = {};
var emptyData = {};
var emptyQueryParams = {};
var fragment = "";
var activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});
return new RouterStateSnapshot("", new TreeNode(activated, []));
}
var ActivatedRoute = function() {
function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {
this.url = url;
this.params = params;
this.queryParams = queryParams;
this.fragment = fragment;
this.data = data;
this.outlet = outlet;
this.component = component;
this._futureSnapshot = futureSnapshot;
}
Object.defineProperty(ActivatedRoute.prototype, "routeConfig", {
get: function() {
return this._futureSnapshot.routeConfig;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRoute.prototype, "root", {
get: function() {
return this._routerState.root;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRoute.prototype, "parent", {
get: function() {
return this._routerState.parent(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRoute.prototype, "firstChild", {
get: function() {
return this._routerState.firstChild(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRoute.prototype, "children", {
get: function() {
return this._routerState.children(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRoute.prototype, "pathFromRoot", {
get: function() {
return this._routerState.pathFromRoot(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRoute.prototype, "paramMap", {
get: function() {
if (!this._paramMap) {
this._paramMap = rxjs_operator_map.map.call(this.params, function(p) {
return convertToParamMap(p);
});
}
return this._paramMap;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRoute.prototype, "queryParamMap", {
get: function() {
if (!this._queryParamMap) {
this._queryParamMap = rxjs_operator_map.map.call(this.queryParams, function(p) {
return convertToParamMap(p);
});
}
return this._queryParamMap;
},
enumerable: true,
configurable: true
});
ActivatedRoute.prototype.toString = function() {
return this.snapshot ? this.snapshot.toString() : "Future(" + this._futureSnapshot + ")";
};
return ActivatedRoute;
}();
function inheritedParamsDataResolve(route) {
var pathToRoot = route.pathFromRoot;
var inhertingStartingFrom = pathToRoot.length - 1;
while (inhertingStartingFrom >= 1) {
var current = pathToRoot[inhertingStartingFrom];
var parent = pathToRoot[inhertingStartingFrom - 1];
if (current.routeConfig && current.routeConfig.path === "") {
inhertingStartingFrom--;
} else if (!parent.component) {
inhertingStartingFrom--;
} else {
break;
}
}
return pathToRoot.slice(inhertingStartingFrom).reduce(function(res, curr) {
var params = __assign$2({}, res.params, curr.params);
var data = __assign$2({}, res.data, curr.data);
var resolve = __assign$2({}, res.resolve, curr._resolvedData);
return {
params: params,
data: data,
resolve: resolve
};
}, {
params: {},
data: {},
resolve: {}
});
}
var ActivatedRouteSnapshot = function() {
function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {
this.url = url;
this.params = params;
this.queryParams = queryParams;
this.fragment = fragment;
this.data = data;
this.outlet = outlet;
this.component = component;
this._routeConfig = routeConfig;
this._urlSegment = urlSegment;
this._lastPathIndex = lastPathIndex;
this._resolve = resolve;
}
Object.defineProperty(ActivatedRouteSnapshot.prototype, "routeConfig", {
get: function() {
return this._routeConfig;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRouteSnapshot.prototype, "root", {
get: function() {
return this._routerState.root;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRouteSnapshot.prototype, "parent", {
get: function() {
return this._routerState.parent(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRouteSnapshot.prototype, "firstChild", {
get: function() {
return this._routerState.firstChild(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRouteSnapshot.prototype, "children", {
get: function() {
return this._routerState.children(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRouteSnapshot.prototype, "pathFromRoot", {
get: function() {
return this._routerState.pathFromRoot(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRouteSnapshot.prototype, "paramMap", {
get: function() {
if (!this._paramMap) {
this._paramMap = convertToParamMap(this.params);
}
return this._paramMap;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActivatedRouteSnapshot.prototype, "queryParamMap", {
get: function() {
if (!this._queryParamMap) {
this._queryParamMap = convertToParamMap(this.queryParams);
}
return this._queryParamMap;
},
enumerable: true,
configurable: true
});
ActivatedRouteSnapshot.prototype.toString = function() {
var url = this.url.map(function(segment) {
return segment.toString();
}).join("/");
var matched = this._routeConfig ? this._routeConfig.path : "";
return "Route(url:'" + url + "', path:'" + matched + "')";
};
return ActivatedRouteSnapshot;
}();
var RouterStateSnapshot = function(_super) {
__extends(RouterStateSnapshot, _super);
function RouterStateSnapshot(url, root) {
var _this = _super.call(this, root) || this;
_this.url = url;
setRouterStateSnapshot(_this, root);
return _this;
}
RouterStateSnapshot.prototype.toString = function() {
return serializeNode(this._root);
};
return RouterStateSnapshot;
}(Tree);
function setRouterStateSnapshot(state, node) {
node.value._routerState = state;
node.children.forEach(function(c) {
return setRouterStateSnapshot(state, c);
});
}
function serializeNode(node) {
var c = node.children.length > 0 ? " { " + node.children.map(serializeNode).join(", ") + " } " : "";
return "" + node.value + c;
}
function advanceActivatedRoute(route) {
if (route.snapshot) {
var currentSnapshot = route.snapshot;
route.snapshot = route._futureSnapshot;
if (!shallowEqual(currentSnapshot.queryParams, route._futureSnapshot.queryParams)) {
route.queryParams.next(route._futureSnapshot.queryParams);
}
if (currentSnapshot.fragment !== route._futureSnapshot.fragment) {
route.fragment.next(route._futureSnapshot.fragment);
}
if (!shallowEqual(currentSnapshot.params, route._futureSnapshot.params)) {
route.params.next(route._futureSnapshot.params);
}
if (!shallowEqualArrays(currentSnapshot.url, route._futureSnapshot.url)) {
route.url.next(route._futureSnapshot.url);
}
if (!shallowEqual(currentSnapshot.data, route._futureSnapshot.data)) {
route.data.next(route._futureSnapshot.data);
}
} else {
route.snapshot = route._futureSnapshot;
route.data.next(route._futureSnapshot.data);
}
}
function equalParamsAndUrlSegments(a, b) {
var equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
var parentsMismatch = !a.parent !== !b.parent;
return equalUrlParams && !parentsMismatch && (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));
}
function createRouterState(routeReuseStrategy, curr, prevState) {
var root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);
return new RouterState(root, curr);
}
function createNode(routeReuseStrategy, curr, prevState) {
if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {
var value = prevState.value;
value._futureSnapshot = curr.value;
var children = createOrReuseChildren(routeReuseStrategy, curr, prevState);
return new TreeNode(value, children);
} else if (routeReuseStrategy.retrieve(curr.value)) {
var tree_1 = routeReuseStrategy.retrieve(curr.value).route;
setFutureSnapshotsOfActivatedRoutes(curr, tree_1);
return tree_1;
} else {
var value = createActivatedRoute(curr.value);
var children = curr.children.map(function(c) {
return createNode(routeReuseStrategy, c);
});
return new TreeNode(value, children);
}
}
function setFutureSnapshotsOfActivatedRoutes(curr, result) {
if (curr.value.routeConfig !== result.value.routeConfig) {
throw new Error("Cannot reattach ActivatedRouteSnapshot created from a different route");
}
if (curr.children.length !== result.children.length) {
throw new Error("Cannot reattach ActivatedRouteSnapshot with a different number of children");
}
result.value._futureSnapshot = curr.value;
for (var i = 0; i < curr.children.length; ++i) {
setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);
}
}
function createOrReuseChildren(routeReuseStrategy, curr, prevState) {
return curr.children.map(function(child) {
for (var _i = 0, _a = prevState.children; _i < _a.length; _i++) {
var p = _a[_i];
if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {
return createNode(routeReuseStrategy, child, p);
}
}
return createNode(routeReuseStrategy, child);
});
}
function createActivatedRoute(c) {
return new ActivatedRoute(new rxjs_BehaviorSubject.BehaviorSubject(c.url), new rxjs_BehaviorSubject.BehaviorSubject(c.params), new rxjs_BehaviorSubject.BehaviorSubject(c.queryParams), new rxjs_BehaviorSubject.BehaviorSubject(c.fragment), new rxjs_BehaviorSubject.BehaviorSubject(c.data), c.outlet, c.component, c);
}
function createUrlTree(route, urlTree, commands, queryParams, fragment) {
if (commands.length === 0) {
return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);
}
var nav = computeNavigation(commands);
if (nav.toRoot()) {
return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);
}
var startingPosition = findStartingPosition(nav, urlTree, route);
var segmentGroup = startingPosition.processChildren ? updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) : updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);
return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);
}
function isMatrixParams(command) {
return typeof command === "object" && command != null && !command.outlets && !command.segmentPath;
}
function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {
var qp = {};
if (queryParams) {
forEach(queryParams, function(value, name) {
qp[name] = Array.isArray(value) ? value.map(function(v) {
return "" + v;
}) : "" + value;
});
}
if (urlTree.root === oldSegmentGroup) {
return new UrlTree(newSegmentGroup, qp, fragment);
}
return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);
}
function replaceSegment(current, oldSegment, newSegment) {
var children = {};
forEach(current.children, function(c, outletName) {
if (c === oldSegment) {
children[outletName] = newSegment;
} else {
children[outletName] = replaceSegment(c, oldSegment, newSegment);
}
});
return new UrlSegmentGroup(current.segments, children);
}
var Navigation = function() {
function Navigation(isAbsolute, numberOfDoubleDots, commands) {
this.isAbsolute = isAbsolute;
this.numberOfDoubleDots = numberOfDoubleDots;
this.commands = commands;
if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {
throw new Error("Root segment cannot have matrix parameters");
}
var cmdWithOutlet = commands.find(function(c) {
return typeof c === "object" && c != null && c.outlets;
});
if (cmdWithOutlet && cmdWithOutlet !== last$1(commands)) {
throw new Error("{outlets:{}} has to be the last command");
}
}
Navigation.prototype.toRoot = function() {
return this.isAbsolute && this.commands.length === 1 && this.commands[0] == "/";
};
return Navigation;
}();
function computeNavigation(commands) {
if (typeof commands[0] === "string" && commands.length === 1 && commands[0] === "/") {
return new Navigation(true, 0, commands);
}
var numberOfDoubleDots = 0;
var isAbsolute = false;
var res = commands.reduce(function(res, cmd, cmdIdx) {
if (typeof cmd === "object" && cmd != null) {
if (cmd.outlets) {
var outlets_1 = {};
forEach(cmd.outlets, function(commands, name) {
outlets_1[name] = typeof commands === "string" ? commands.split("/") : commands;
});
return res.concat([ {
outlets: outlets_1
} ]);
}
if (cmd.segmentPath) {
return res.concat([ cmd.segmentPath ]);
}
}
if (!(typeof cmd === "string")) {
return res.concat([ cmd ]);
}
if (cmdIdx === 0) {
cmd.split("/").forEach(function(urlPart, partIndex) {
if (partIndex == 0 && urlPart === ".") {} else if (partIndex == 0 && urlPart === "") {
isAbsolute = true;
} else if (urlPart === "..") {
numberOfDoubleDots++;
} else if (urlPart != "") {
res.push(urlPart);
}
});
return res;
}
return res.concat([ cmd ]);
}, []);
return new Navigation(isAbsolute, numberOfDoubleDots, res);
}
var Position = function() {
function Position(segmentGroup, processChildren, index) {
this.segmentGroup = segmentGroup;
this.processChildren = processChildren;
this.index = index;
}
return Position;
}();
function findStartingPosition(nav, tree, route) {
if (nav.isAbsolute) {
return new Position(tree.root, true, 0);
}
if (route.snapshot._lastPathIndex === -1) {
return new Position(route.snapshot._urlSegment, true, 0);
}
var modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;
var index = route.snapshot._lastPathIndex + modifier;
return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);
}
function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
var g = group;
var ci = index;
var dd = numberOfDoubleDots;
while (dd > ci) {
dd -= ci;
g = g.parent;
if (!g) {
throw new Error("Invalid number of '../'");
}
ci = g.segments.length;
}
return new Position(g, false, ci - dd);
}
function getPath(command) {
if (typeof command === "object" && command != null && command.outlets) {
return command.outlets[PRIMARY_OUTLET];
}
return "" + command;
}
function getOutlets(commands) {
if (!(typeof commands[0] === "object")) return _a = {}, _a[PRIMARY_OUTLET] = commands, 
_a;
if (commands[0].outlets === undefined) return _b = {}, _b[PRIMARY_OUTLET] = commands, 
_b;
return commands[0].outlets;
var _a, _b;
}
function updateSegmentGroup(segmentGroup, startIndex, commands) {
if (!segmentGroup) {
segmentGroup = new UrlSegmentGroup([], {});
}
if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
}
var m = prefixedWith(segmentGroup, startIndex, commands);
var slicedCommands = commands.slice(m.commandIndex);
if (m.match && m.pathIndex < segmentGroup.segments.length) {
var g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
return updateSegmentGroupChildren(g, 0, slicedCommands);
} else if (m.match && slicedCommands.length === 0) {
return new UrlSegmentGroup(segmentGroup.segments, {});
} else if (m.match && !segmentGroup.hasChildren()) {
return createNewSegmentGroup(segmentGroup, startIndex, commands);
} else if (m.match) {
return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
} else {
return createNewSegmentGroup(segmentGroup, startIndex, commands);
}
}
function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
if (commands.length === 0) {
return new UrlSegmentGroup(segmentGroup.segments, {});
} else {
var outlets_2 = getOutlets(commands);
var children_2 = {};
forEach(outlets_2, function(commands, outlet) {
if (commands !== null) {
children_2[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);
}
});
forEach(segmentGroup.children, function(child, childOutlet) {
if (outlets_2[childOutlet] === undefined) {
children_2[childOutlet] = child;
}
});
return new UrlSegmentGroup(segmentGroup.segments, children_2);
}
}
function prefixedWith(segmentGroup, startIndex, commands) {
var currentCommandIndex = 0;
var currentPathIndex = startIndex;
var noMatch = {
match: false,
pathIndex: 0,
commandIndex: 0
};
while (currentPathIndex < segmentGroup.segments.length) {
if (currentCommandIndex >= commands.length) return noMatch;
var path = segmentGroup.segments[currentPathIndex];
var curr = getPath(commands[currentCommandIndex]);
var next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
if (currentPathIndex > 0 && curr === undefined) break;
if (curr && next && typeof next === "object" && next.outlets === undefined) {
if (!compare(curr, next, path)) return noMatch;
currentCommandIndex += 2;
} else {
if (!compare(curr, {}, path)) return noMatch;
currentCommandIndex++;
}
currentPathIndex++;
}
return {
match: true,
pathIndex: currentPathIndex,
commandIndex: currentCommandIndex
};
}
function createNewSegmentGroup(segmentGroup, startIndex, commands) {
var paths = segmentGroup.segments.slice(0, startIndex);
var i = 0;
while (i < commands.length) {
if (typeof commands[i] === "object" && commands[i].outlets !== undefined) {
var children = createNewSegmentChildren(commands[i].outlets);
return new UrlSegmentGroup(paths, children);
}
if (i === 0 && isMatrixParams(commands[0])) {
var p = segmentGroup.segments[startIndex];
paths.push(new UrlSegment(p.path, commands[0]));
i++;
continue;
}
var curr = getPath(commands[i]);
var next = i < commands.length - 1 ? commands[i + 1] : null;
if (curr && next && isMatrixParams(next)) {
paths.push(new UrlSegment(curr, stringify(next)));
i += 2;
} else {
paths.push(new UrlSegment(curr, {}));
i++;
}
}
return new UrlSegmentGroup(paths, {});
}
function createNewSegmentChildren(outlets) {
var children = {};
forEach(outlets, function(commands, outlet) {
if (commands !== null) {
children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
}
});
return children;
}
function stringify(params) {
var res = {};
forEach(params, function(v, k) {
return res[k] = "" + v;
});
return res;
}
function compare(path, params, segment) {
return path == segment.path && shallowEqual(params, segment.parameters);
}
var __assign$3 = undefined && undefined.__assign || Object.assign || function(t) {
for (var s, i = 1, n = arguments.length; i < n; i++) {
s = arguments[i];
for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
}
return t;
};
var NoMatch$1 = function() {
function NoMatch$1() {}
return NoMatch$1;
}();
function recognize(rootComponentType, config, urlTree, url) {
return new Recognizer(rootComponentType, config, urlTree, url).recognize();
}
var Recognizer = function() {
function Recognizer(rootComponentType, config, urlTree, url) {
this.rootComponentType = rootComponentType;
this.config = config;
this.urlTree = urlTree;
this.url = url;
}
Recognizer.prototype.recognize = function() {
try {
var rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config).segmentGroup;
var children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);
var root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});
var rootNode = new TreeNode(root, children);
var routeState = new RouterStateSnapshot(this.url, rootNode);
this.inheriteParamsAndData(routeState._root);
return rxjs_observable_of.of(routeState);
} catch (e) {
return new rxjs_Observable.Observable(function(obs) {
return obs.error(e);
});
}
};
Recognizer.prototype.inheriteParamsAndData = function(routeNode) {
var _this = this;
var route = routeNode.value;
var i = inheritedParamsDataResolve(route);
route.params = Object.freeze(i.params);
route.data = Object.freeze(i.data);
routeNode.children.forEach(function(n) {
return _this.inheriteParamsAndData(n);
});
};
Recognizer.prototype.processSegmentGroup = function(config, segmentGroup, outlet) {
if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
return this.processChildren(config, segmentGroup);
}
return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);
};
Recognizer.prototype.processChildren = function(config, segmentGroup) {
var _this = this;
var children = mapChildrenIntoArray(segmentGroup, function(child, childOutlet) {
return _this.processSegmentGroup(config, child, childOutlet);
});
checkOutletNameUniqueness(children);
sortActivatedRouteSnapshots(children);
return children;
};
Recognizer.prototype.processSegment = function(config, segmentGroup, segments, outlet) {
for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {
var r = config_1[_i];
try {
return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);
} catch (e) {
if (!(e instanceof NoMatch$1)) throw e;
}
}
if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
return [];
}
throw new NoMatch$1();
};
Recognizer.prototype.noLeftoversInUrl = function(segmentGroup, segments, outlet) {
return segments.length === 0 && !segmentGroup.children[outlet];
};
Recognizer.prototype.processSegmentAgainstRoute = function(route, rawSegment, segments, outlet) {
if (route.redirectTo) throw new NoMatch$1();
if ((route.outlet || PRIMARY_OUTLET) !== outlet) throw new NoMatch$1();
if (route.path === "**") {
var params = segments.length > 0 ? last$1(segments).parameters : {};
var snapshot_1 = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));
return [ new TreeNode(snapshot_1, []) ];
}
var _a = match$1(rawSegment, route, segments), consumedSegments = _a.consumedSegments, parameters = _a.parameters, lastChild = _a.lastChild;
var rawSlicedSegments = segments.slice(lastChild);
var childConfig = getChildConfig(route);
var _b = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _b.segmentGroup, slicedSegments = _b.slicedSegments;
var snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));
if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
var children_3 = this.processChildren(childConfig, segmentGroup);
return [ new TreeNode(snapshot, children_3) ];
}
if (childConfig.length === 0 && slicedSegments.length === 0) {
return [ new TreeNode(snapshot, []) ];
}
var children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);
return [ new TreeNode(snapshot, children) ];
};
return Recognizer;
}();
function sortActivatedRouteSnapshots(nodes) {
nodes.sort(function(a, b) {
if (a.value.outlet === PRIMARY_OUTLET) return -1;
if (b.value.outlet === PRIMARY_OUTLET) return 1;
return a.value.outlet.localeCompare(b.value.outlet);
});
}
function getChildConfig(route) {
if (route.children) {
return route.children;
}
if (route.loadChildren) {
return route._loadedConfig.routes;
}
return [];
}
function match$1(segmentGroup, route, segments) {
if (route.path === "") {
if (route.pathMatch === "full" && (segmentGroup.hasChildren() || segments.length > 0)) {
throw new NoMatch$1();
}
return {
consumedSegments: [],
lastChild: 0,
parameters: {}
};
}
var matcher = route.matcher || defaultUrlMatcher;
var res = matcher(segments, segmentGroup, route);
if (!res) throw new NoMatch$1();
var posParams = {};
forEach(res.posParams, function(v, k) {
posParams[k] = v.path;
});
var parameters = __assign$3({}, posParams, res.consumed[res.consumed.length - 1].parameters);
return {
consumedSegments: res.consumed,
lastChild: res.consumed.length,
parameters: parameters
};
}
function checkOutletNameUniqueness(nodes) {
var names = {};
nodes.forEach(function(n) {
var routeWithSameOutletName = names[n.value.outlet];
if (routeWithSameOutletName) {
var p = routeWithSameOutletName.url.map(function(s) {
return s.toString();
}).join("/");
var c = n.value.url.map(function(s) {
return s.toString();
}).join("/");
throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
}
names[n.value.outlet] = n.value;
});
}
function getSourceSegmentGroup(segmentGroup) {
var s = segmentGroup;
while (s._sourceSegment) {
s = s._sourceSegment;
}
return s;
}
function getPathIndexShift(segmentGroup) {
var s = segmentGroup;
var res = s._segmentIndexShift ? s._segmentIndexShift : 0;
while (s._sourceSegment) {
s = s._sourceSegment;
res += s._segmentIndexShift ? s._segmentIndexShift : 0;
}
return res - 1;
}
function split$1(segmentGroup, consumedSegments, slicedSegments, config) {
if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
var s_1 = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
s_1._sourceSegment = segmentGroup;
s_1._segmentIndexShift = consumedSegments.length;
return {
segmentGroup: s_1,
slicedSegments: []
};
}
if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
var s_2 = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
s_2._sourceSegment = segmentGroup;
s_2._segmentIndexShift = consumedSegments.length;
return {
segmentGroup: s_2,
slicedSegments: slicedSegments
};
}
var s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
s._sourceSegment = segmentGroup;
s._segmentIndexShift = consumedSegments.length;
return {
segmentGroup: s,
slicedSegments: slicedSegments
};
}
function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
var res = {};
for (var _i = 0, routes_3 = routes; _i < routes_3.length; _i++) {
var r = routes_3[_i];
if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$2(r)]) {
var s = new UrlSegmentGroup([], {});
s._sourceSegment = segmentGroup;
s._segmentIndexShift = segmentGroup.segments.length;
res[getOutlet$2(r)] = s;
}
}
return __assign$3({}, children, res);
}
function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {
var res = {};
res[PRIMARY_OUTLET] = primarySegment;
primarySegment._sourceSegment = segmentGroup;
primarySegment._segmentIndexShift = consumedSegments.length;
for (var _i = 0, routes_4 = routes; _i < routes_4.length; _i++) {
var r = routes_4[_i];
if (r.path === "" && getOutlet$2(r) !== PRIMARY_OUTLET) {
var s = new UrlSegmentGroup([], {});
s._sourceSegment = segmentGroup;
s._segmentIndexShift = consumedSegments.length;
res[getOutlet$2(r)] = s;
}
}
return res;
}
function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
return routes.some(function(r) {
return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$2(r) !== PRIMARY_OUTLET;
});
}
function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
return routes.some(function(r) {
return emptyPathMatch(segmentGroup, slicedSegments, r);
});
}
function emptyPathMatch(segmentGroup, slicedSegments, r) {
if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === "full") {
return false;
}
return r.path === "" && r.redirectTo === undefined;
}
function getOutlet$2(route) {
return route.outlet || PRIMARY_OUTLET;
}
function getData(route) {
return route.data || {};
}
function getResolve(route) {
return route.resolve || {};
}
var ROUTES = new _angular_core.InjectionToken("ROUTES");
var RouterConfigLoader = function() {
function RouterConfigLoader(loader, compiler, onLoadStartListener, onLoadEndListener) {
this.loader = loader;
this.compiler = compiler;
this.onLoadStartListener = onLoadStartListener;
this.onLoadEndListener = onLoadEndListener;
}
RouterConfigLoader.prototype.load = function(parentInjector, route) {
var _this = this;
if (this.onLoadStartListener) {
this.onLoadStartListener(route);
}
var moduleFactory$ = this.loadModuleFactory(route.loadChildren);
return rxjs_operator_map.map.call(moduleFactory$, function(factory) {
if (_this.onLoadEndListener) {
_this.onLoadEndListener(route);
}
var module = factory.create(parentInjector);
return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)), module);
});
};
RouterConfigLoader.prototype.loadModuleFactory = function(loadChildren) {
var _this = this;
if (typeof loadChildren === "string") {
return rxjs_observable_fromPromise.fromPromise(this.loader.load(loadChildren));
} else {
return rxjs_operator_mergeMap.mergeMap.call(wrapIntoObservable(loadChildren()), function(t) {
if (t instanceof _angular_core.NgModuleFactory) {
return rxjs_observable_of.of(t);
} else {
return rxjs_observable_fromPromise.fromPromise(_this.compiler.compileModuleAsync(t));
}
});
}
};
return RouterConfigLoader;
}();
var RouterOutletMap = function() {
function RouterOutletMap() {
this._outlets = {};
}
RouterOutletMap.prototype.registerOutlet = function(name, outlet) {
this._outlets[name] = outlet;
};
RouterOutletMap.prototype.removeOutlet = function(name) {
this._outlets[name] = undefined;
};
return RouterOutletMap;
}();
var UrlHandlingStrategy = function() {
function UrlHandlingStrategy() {}
UrlHandlingStrategy.prototype.shouldProcessUrl = function(url) {};
UrlHandlingStrategy.prototype.extract = function(url) {};
UrlHandlingStrategy.prototype.merge = function(newUrlPart, rawUrl) {};
return UrlHandlingStrategy;
}();
var DefaultUrlHandlingStrategy = function() {
function DefaultUrlHandlingStrategy() {}
DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = function(url) {
return true;
};
DefaultUrlHandlingStrategy.prototype.extract = function(url) {
return url;
};
DefaultUrlHandlingStrategy.prototype.merge = function(newUrlPart, wholeUrl) {
return newUrlPart;
};
return DefaultUrlHandlingStrategy;
}();
var __assign = undefined && undefined.__assign || Object.assign || function(t) {
for (var s, i = 1, n = arguments.length; i < n; i++) {
s = arguments[i];
for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
}
return t;
};
function defaultErrorHandler(error) {
throw error;
}
function defaultRouterHook(snapshot) {
return rxjs_observable_of.of(null);
}
var DefaultRouteReuseStrategy = function() {
function DefaultRouteReuseStrategy() {}
DefaultRouteReuseStrategy.prototype.shouldDetach = function(route) {
return false;
};
DefaultRouteReuseStrategy.prototype.store = function(route, detachedTree) {};
DefaultRouteReuseStrategy.prototype.shouldAttach = function(route) {
return false;
};
DefaultRouteReuseStrategy.prototype.retrieve = function(route) {
return null;
};
DefaultRouteReuseStrategy.prototype.shouldReuseRoute = function(future, curr) {
return future.routeConfig === curr.routeConfig;
};
return DefaultRouteReuseStrategy;
}();
var Router = function() {
function Router(rootComponentType, urlSerializer, outletMap, location, injector, loader, compiler, config) {
var _this = this;
this.rootComponentType = rootComponentType;
this.urlSerializer = urlSerializer;
this.outletMap = outletMap;
this.location = location;
this.config = config;
this.navigations = new rxjs_BehaviorSubject.BehaviorSubject(null);
this.routerEvents = new rxjs_Subject.Subject();
this.navigationId = 0;
this.errorHandler = defaultErrorHandler;
this.navigated = false;
this.hooks = {
beforePreactivation: defaultRouterHook,
afterPreactivation: defaultRouterHook
};
this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();
this.routeReuseStrategy = new DefaultRouteReuseStrategy();
var onLoadStart = function(r) {
return _this.triggerEvent(new RouteConfigLoadStart(r));
};
var onLoadEnd = function(r) {
return _this.triggerEvent(new RouteConfigLoadEnd(r));
};
this.ngModule = injector.get(_angular_core.NgModuleRef);
this.resetConfig(config);
this.currentUrlTree = createEmptyUrlTree();
this.rawUrlTree = this.currentUrlTree;
this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);
this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);
this.processNavigations();
}
Router.prototype.resetRootComponentType = function(rootComponentType) {
this.rootComponentType = rootComponentType;
this.currentRouterState.root.component = this.rootComponentType;
};
Router.prototype.initialNavigation = function() {
this.setUpLocationChangeListener();
if (this.navigationId === 0) {
this.navigateByUrl(this.location.path(true), {
replaceUrl: true
});
}
};
Router.prototype.setUpLocationChangeListener = function() {
var _this = this;
if (!this.locationSubscription) {
this.locationSubscription = this.location.subscribe(Zone.current.wrap(function(change) {
var rawUrlTree = _this.urlSerializer.parse(change["url"]);
var source = change["type"] === "popstate" ? "popstate" : "hashchange";
setTimeout(function() {
_this.scheduleNavigation(rawUrlTree, source, {
replaceUrl: true
});
}, 0);
}));
}
};
Object.defineProperty(Router.prototype, "routerState", {
get: function() {
return this.currentRouterState;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Router.prototype, "url", {
get: function() {
return this.serializeUrl(this.currentUrlTree);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Router.prototype, "events", {
get: function() {
return this.routerEvents;
},
enumerable: true,
configurable: true
});
Router.prototype.triggerEvent = function(e) {
this.routerEvents.next(e);
};
Router.prototype.resetConfig = function(config) {
validateConfig(config);
this.config = config;
};
Router.prototype.ngOnDestroy = function() {
this.dispose();
};
Router.prototype.dispose = function() {
if (this.locationSubscription) {
this.locationSubscription.unsubscribe();
this.locationSubscription = null;
}
};
Router.prototype.createUrlTree = function(commands, _a) {
var _b = _a === void 0 ? {} : _a, relativeTo = _b.relativeTo, queryParams = _b.queryParams, fragment = _b.fragment, preserveQueryParams = _b.preserveQueryParams, queryParamsHandling = _b.queryParamsHandling, preserveFragment = _b.preserveFragment;
if (_angular_core.isDevMode() && preserveQueryParams && console && console.warn) {
console.warn("preserveQueryParams is deprecated, use queryParamsHandling instead.");
}
var a = relativeTo || this.routerState.root;
var f = preserveFragment ? this.currentUrlTree.fragment : fragment;
var q = null;
if (queryParamsHandling) {
switch (queryParamsHandling) {
case "merge":
q = __assign({}, this.currentUrlTree.queryParams, queryParams);
break;

case "preserve":
q = this.currentUrlTree.queryParams;
break;

default:
q = queryParams || null;
}
} else {
q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;
}
return createUrlTree(a, this.currentUrlTree, commands, q, f);
};
Router.prototype.navigateByUrl = function(url, extras) {
if (extras === void 0) {
extras = {
skipLocationChange: false
};
}
var urlTree = url instanceof UrlTree ? url : this.parseUrl(url);
var mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);
return this.scheduleNavigation(mergedTree, "imperative", extras);
};
Router.prototype.navigate = function(commands, extras) {
if (extras === void 0) {
extras = {
skipLocationChange: false
};
}
validateCommands(commands);
if (typeof extras.queryParams === "object" && extras.queryParams !== null) {
extras.queryParams = this.removeEmptyProps(extras.queryParams);
}
return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
};
Router.prototype.serializeUrl = function(url) {
return this.urlSerializer.serialize(url);
};
Router.prototype.parseUrl = function(url) {
return this.urlSerializer.parse(url);
};
Router.prototype.isActive = function(url, exact) {
if (url instanceof UrlTree) {
return containsTree(this.currentUrlTree, url, exact);
} else {
var urlTree = this.urlSerializer.parse(url);
return containsTree(this.currentUrlTree, urlTree, exact);
}
};
Router.prototype.removeEmptyProps = function(params) {
return Object.keys(params).reduce(function(result, key) {
var value = params[key];
if (value !== null && value !== undefined) {
result[key] = value;
}
return result;
}, {});
};
Router.prototype.processNavigations = function() {
var _this = this;
rxjs_operator_concatMap.concatMap.call(this.navigations, function(nav) {
if (nav) {
_this.executeScheduledNavigation(nav);
return nav.promise.catch(function() {});
} else {
return rxjs_observable_of.of(null);
}
}).subscribe(function() {});
};
Router.prototype.scheduleNavigation = function(rawUrl, source, extras) {
var lastNavigation = this.navigations.value;
if (lastNavigation && source !== "imperative" && lastNavigation.source === "imperative" && lastNavigation.rawUrl.toString() === rawUrl.toString()) {
return Promise.resolve(true);
}
if (lastNavigation && source == "hashchange" && lastNavigation.source === "popstate" && lastNavigation.rawUrl.toString() === rawUrl.toString()) {
return Promise.resolve(true);
}
var resolve = null;
var reject = null;
var promise = new Promise(function(res, rej) {
resolve = res;
reject = rej;
});
var id = ++this.navigationId;
this.navigations.next({
id: id,
source: source,
rawUrl: rawUrl,
extras: extras,
resolve: resolve,
reject: reject,
promise: promise
});
return promise.catch(function(e) {
return Promise.reject(e);
});
};
Router.prototype.executeScheduledNavigation = function(_a) {
var _this = this;
var id = _a.id, rawUrl = _a.rawUrl, extras = _a.extras, resolve = _a.resolve, reject = _a.reject;
var url = this.urlHandlingStrategy.extract(rawUrl);
var urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();
if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {
this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
Promise.resolve().then(function(_) {
return _this.runNavigate(url, rawUrl, !!extras.skipLocationChange, !!extras.replaceUrl, id, null);
}).then(resolve, reject);
} else if (urlTransition && this.rawUrlTree && this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {
this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
Promise.resolve().then(function(_) {
return _this.runNavigate(url, rawUrl, false, false, id, createEmptyState(url, _this.rootComponentType).snapshot);
}).then(resolve, reject);
} else {
this.rawUrlTree = rawUrl;
resolve(null);
}
};
Router.prototype.runNavigate = function(url, rawUrl, shouldPreventPushState, shouldReplaceUrl, id, precreatedState) {
var _this = this;
if (id !== this.navigationId) {
this.location.go(this.urlSerializer.serialize(this.currentUrlTree));
this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), "Navigation ID " + id + " is not equal to the current navigation id " + this.navigationId));
return Promise.resolve(false);
}
return new Promise(function(resolvePromise, rejectPromise) {
var urlAndSnapshot$;
if (!precreatedState) {
var moduleInjector = _this.ngModule.injector;
var redirectsApplied$ = applyRedirects(moduleInjector, _this.configLoader, _this.urlSerializer, url, _this.config);
urlAndSnapshot$ = rxjs_operator_mergeMap.mergeMap.call(redirectsApplied$, function(appliedUrl) {
return rxjs_operator_map.map.call(recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl)), function(snapshot) {
_this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), snapshot));
return {
appliedUrl: appliedUrl,
snapshot: snapshot
};
});
});
} else {
urlAndSnapshot$ = rxjs_observable_of.of({
appliedUrl: url,
snapshot: precreatedState
});
}
var beforePreactivationDone$ = rxjs_operator_mergeMap.mergeMap.call(urlAndSnapshot$, function(p) {
return rxjs_operator_map.map.call(_this.hooks.beforePreactivation(p.snapshot), function() {
return p;
});
});
var preActivation;
var preactivationTraverse$ = rxjs_operator_map.map.call(beforePreactivationDone$, function(_a) {
var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;
var moduleInjector = _this.ngModule.injector;
preActivation = new PreActivation(snapshot, _this.currentRouterState.snapshot, moduleInjector);
preActivation.traverse(_this.outletMap);
return {
appliedUrl: appliedUrl,
snapshot: snapshot
};
});
var preactivationCheckGuards$ = rxjs_operator_mergeMap.mergeMap.call(preactivationTraverse$, function(_a) {
var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;
if (_this.navigationId !== id) return rxjs_observable_of.of(false);
return rxjs_operator_map.map.call(preActivation.checkGuards(), function(shouldActivate) {
return {
appliedUrl: appliedUrl,
snapshot: snapshot,
shouldActivate: shouldActivate
};
});
});
var preactivationResolveData$ = rxjs_operator_mergeMap.mergeMap.call(preactivationCheckGuards$, function(p) {
if (_this.navigationId !== id) return rxjs_observable_of.of(false);
if (p.shouldActivate) {
return rxjs_operator_map.map.call(preActivation.resolveData(), function() {
return p;
});
} else {
return rxjs_observable_of.of(p);
}
});
var preactivationDone$ = rxjs_operator_mergeMap.mergeMap.call(preactivationResolveData$, function(p) {
return rxjs_operator_map.map.call(_this.hooks.afterPreactivation(p.snapshot), function() {
return p;
});
});
var routerState$ = rxjs_operator_map.map.call(preactivationDone$, function(_a) {
var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot, shouldActivate = _a.shouldActivate;
if (shouldActivate) {
var state = createRouterState(_this.routeReuseStrategy, snapshot, _this.currentRouterState);
return {
appliedUrl: appliedUrl,
state: state,
shouldActivate: shouldActivate
};
} else {
return {
appliedUrl: appliedUrl,
state: null,
shouldActivate: shouldActivate
};
}
});
var navigationIsSuccessful;
var storedState = _this.currentRouterState;
var storedUrl = _this.currentUrlTree;
routerState$.forEach(function(_a) {
var appliedUrl = _a.appliedUrl, state = _a.state, shouldActivate = _a.shouldActivate;
if (!shouldActivate || id !== _this.navigationId) {
navigationIsSuccessful = false;
return;
}
_this.currentUrlTree = appliedUrl;
_this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
_this.currentRouterState = state;
if (!shouldPreventPushState) {
var path = _this.urlSerializer.serialize(_this.rawUrlTree);
if (_this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {
_this.location.replaceState(path);
} else {
_this.location.go(path);
}
}
new ActivateRoutes(_this.routeReuseStrategy, state, storedState).activate(_this.outletMap);
navigationIsSuccessful = true;
}).then(function() {
if (navigationIsSuccessful) {
_this.navigated = true;
_this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(_this.currentUrlTree)));
resolvePromise(true);
} else {
_this.resetUrlToCurrentUrlTree();
_this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), ""));
resolvePromise(false);
}
}, function(e) {
if (isNavigationCancelingError(e)) {
_this.resetUrlToCurrentUrlTree();
_this.navigated = true;
_this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), e.message));
resolvePromise(false);
} else {
_this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));
try {
resolvePromise(_this.errorHandler(e));
} catch (ee) {
rejectPromise(ee);
}
}
_this.currentRouterState = storedState;
_this.currentUrlTree = storedUrl;
_this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
_this.location.replaceState(_this.serializeUrl(_this.rawUrlTree));
});
});
};
Router.prototype.resetUrlToCurrentUrlTree = function() {
var path = this.urlSerializer.serialize(this.rawUrlTree);
this.location.replaceState(path);
};
return Router;
}();
var CanActivate = function() {
function CanActivate(path) {
this.path = path;
}
Object.defineProperty(CanActivate.prototype, "route", {
get: function() {
return this.path[this.path.length - 1];
},
enumerable: true,
configurable: true
});
return CanActivate;
}();
var CanDeactivate = function() {
function CanDeactivate(component, route) {
this.component = component;
this.route = route;
}
return CanDeactivate;
}();
var PreActivation = function() {
function PreActivation(future, curr, moduleInjector) {
this.future = future;
this.curr = curr;
this.moduleInjector = moduleInjector;
this.canActivateChecks = [];
this.canDeactivateChecks = [];
}
PreActivation.prototype.traverse = function(parentOutletMap) {
var futureRoot = this.future._root;
var currRoot = this.curr ? this.curr._root : null;
this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap, [ futureRoot.value ]);
};
PreActivation.prototype.checkGuards = function() {
var _this = this;
if (this.canDeactivateChecks.length === 0 && this.canActivateChecks.length === 0) {
return rxjs_observable_of.of(true);
}
var canDeactivate$ = this.runCanDeactivateChecks();
return rxjs_operator_mergeMap.mergeMap.call(canDeactivate$, function(canDeactivate) {
return canDeactivate ? _this.runCanActivateChecks() : rxjs_observable_of.of(false);
});
};
PreActivation.prototype.resolveData = function() {
var _this = this;
if (this.canActivateChecks.length === 0) return rxjs_observable_of.of(null);
var checks$ = rxjs_observable_from.from(this.canActivateChecks);
var runningChecks$ = rxjs_operator_concatMap.concatMap.call(checks$, function(check) {
return _this.runResolve(check.route);
});
return rxjs_operator_reduce.reduce.call(runningChecks$, function(_, __) {
return _;
});
};
PreActivation.prototype.traverseChildRoutes = function(futureNode, currNode, outletMap, futurePath) {
var _this = this;
var prevChildren = nodeChildrenAsMap(currNode);
futureNode.children.forEach(function(c) {
_this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap, futurePath.concat([ c.value ]));
delete prevChildren[c.value.outlet];
});
forEach(prevChildren, function(v, k) {
return _this.deactiveRouteAndItsChildren(v, outletMap._outlets[k]);
});
};
PreActivation.prototype.traverseRoutes = function(futureNode, currNode, parentOutletMap, futurePath) {
var future = futureNode.value;
var curr = currNode ? currNode.value : null;
var outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;
if (curr && future._routeConfig === curr._routeConfig) {
if (this.shouldRunGuardsAndResolvers(curr, future, future._routeConfig.runGuardsAndResolvers)) {
this.canActivateChecks.push(new CanActivate(futurePath));
this.canDeactivateChecks.push(new CanDeactivate(outlet.component, curr));
} else {
future.data = curr.data;
future._resolvedData = curr._resolvedData;
}
if (future.component) {
this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null, futurePath);
} else {
this.traverseChildRoutes(futureNode, currNode, parentOutletMap, futurePath);
}
} else {
if (curr) {
this.deactiveRouteAndItsChildren(currNode, outlet);
}
this.canActivateChecks.push(new CanActivate(futurePath));
if (future.component) {
this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null, futurePath);
} else {
this.traverseChildRoutes(futureNode, null, parentOutletMap, futurePath);
}
}
};
PreActivation.prototype.shouldRunGuardsAndResolvers = function(curr, future, mode) {
switch (mode) {
case "always":
return true;

case "paramsOrQueryParamsChange":
return !equalParamsAndUrlSegments(curr, future) || !shallowEqual(curr.queryParams, future.queryParams);

case "paramsChange":
default:
return !equalParamsAndUrlSegments(curr, future);
}
};
PreActivation.prototype.deactiveRouteAndItsChildren = function(route, outlet) {
var _this = this;
var prevChildren = nodeChildrenAsMap(route);
var r = route.value;
forEach(prevChildren, function(v, k) {
if (!r.component) {
_this.deactiveRouteAndItsChildren(v, outlet);
} else if (!!outlet) {
_this.deactiveRouteAndItsChildren(v, outlet.outletMap._outlets[k]);
} else {
_this.deactiveRouteAndItsChildren(v, null);
}
});
if (!r.component) {
this.canDeactivateChecks.push(new CanDeactivate(null, r));
} else if (outlet && outlet.isActivated) {
this.canDeactivateChecks.push(new CanDeactivate(outlet.component, r));
} else {
this.canDeactivateChecks.push(new CanDeactivate(null, r));
}
};
PreActivation.prototype.runCanDeactivateChecks = function() {
var _this = this;
var checks$ = rxjs_observable_from.from(this.canDeactivateChecks);
var runningChecks$ = rxjs_operator_mergeMap.mergeMap.call(checks$, function(check) {
return _this.runCanDeactivate(check.component, check.route);
});
return rxjs_operator_every.every.call(runningChecks$, function(result) {
return result === true;
});
};
PreActivation.prototype.runCanActivateChecks = function() {
var _this = this;
var checks$ = rxjs_observable_from.from(this.canActivateChecks);
var runningChecks$ = rxjs_operator_mergeMap.mergeMap.call(checks$, function(check) {
return andObservables(rxjs_observable_from.from([ _this.runCanActivateChild(check.path), _this.runCanActivate(check.route) ]));
});
return rxjs_operator_every.every.call(runningChecks$, function(result) {
return result === true;
});
};
PreActivation.prototype.runCanActivate = function(future) {
var _this = this;
var canActivate = future._routeConfig ? future._routeConfig.canActivate : null;
if (!canActivate || canActivate.length === 0) return rxjs_observable_of.of(true);
var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canActivate), function(c) {
var guard = _this.getToken(c, future);
var observable;
if (guard.canActivate) {
observable = wrapIntoObservable(guard.canActivate(future, _this.future));
} else {
observable = wrapIntoObservable(guard(future, _this.future));
}
return rxjs_operator_first.first.call(observable);
});
return andObservables(obs);
};
PreActivation.prototype.runCanActivateChild = function(path) {
var _this = this;
var future = path[path.length - 1];
var canActivateChildGuards = path.slice(0, path.length - 1).reverse().map(function(p) {
return _this.extractCanActivateChild(p);
}).filter(function(_) {
return _ !== null;
});
return andObservables(rxjs_operator_map.map.call(rxjs_observable_from.from(canActivateChildGuards), function(d) {
var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(d.guards), function(c) {
var guard = _this.getToken(c, d.node);
var observable;
if (guard.canActivateChild) {
observable = wrapIntoObservable(guard.canActivateChild(future, _this.future));
} else {
observable = wrapIntoObservable(guard(future, _this.future));
}
return rxjs_operator_first.first.call(observable);
});
return andObservables(obs);
}));
};
PreActivation.prototype.extractCanActivateChild = function(p) {
var canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;
if (!canActivateChild || canActivateChild.length === 0) return null;
return {
node: p,
guards: canActivateChild
};
};
PreActivation.prototype.runCanDeactivate = function(component, curr) {
var _this = this;
var canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;
if (!canDeactivate || canDeactivate.length === 0) return rxjs_observable_of.of(true);
var canDeactivate$ = rxjs_operator_mergeMap.mergeMap.call(rxjs_observable_from.from(canDeactivate), function(c) {
var guard = _this.getToken(c, curr);
var observable;
if (guard.canDeactivate) {
observable = wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr, _this.future));
} else {
observable = wrapIntoObservable(guard(component, curr, _this.curr, _this.future));
}
return rxjs_operator_first.first.call(observable);
});
return rxjs_operator_every.every.call(canDeactivate$, function(result) {
return result === true;
});
};
PreActivation.prototype.runResolve = function(future) {
var resolve = future._resolve;
return rxjs_operator_map.map.call(this.resolveNode(resolve, future), function(resolvedData) {
future._resolvedData = resolvedData;
future.data = __assign({}, future.data, inheritedParamsDataResolve(future).resolve);
return null;
});
};
PreActivation.prototype.resolveNode = function(resolve, future) {
var _this = this;
return waitForMap(resolve, function(k, v) {
var resolver = _this.getToken(v, future);
return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, _this.future)) : wrapIntoObservable(resolver(future, _this.future));
});
};
PreActivation.prototype.getToken = function(token, snapshot) {
var config = closestLoadedConfig(snapshot);
var injector = config ? config.module.injector : this.moduleInjector;
return injector.get(token);
};
return PreActivation;
}();
var ActivateRoutes = function() {
function ActivateRoutes(routeReuseStrategy, futureState, currState) {
this.routeReuseStrategy = routeReuseStrategy;
this.futureState = futureState;
this.currState = currState;
}
ActivateRoutes.prototype.activate = function(parentOutletMap) {
var futureRoot = this.futureState._root;
var currRoot = this.currState ? this.currState._root : null;
this.deactivateChildRoutes(futureRoot, currRoot, parentOutletMap);
advanceActivatedRoute(this.futureState.root);
this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);
};
ActivateRoutes.prototype.deactivateChildRoutes = function(futureNode, currNode, outletMap) {
var _this = this;
var prevChildren = nodeChildrenAsMap(currNode);
futureNode.children.forEach(function(c) {
_this.deactivateRoutes(c, prevChildren[c.value.outlet], outletMap);
delete prevChildren[c.value.outlet];
});
forEach(prevChildren, function(v, k) {
return _this.deactiveRouteAndItsChildren(v, outletMap);
});
};
ActivateRoutes.prototype.activateChildRoutes = function(futureNode, currNode, outletMap) {
var _this = this;
var prevChildren = nodeChildrenAsMap(currNode);
futureNode.children.forEach(function(c) {
_this.activateRoutes(c, prevChildren[c.value.outlet], outletMap);
});
};
ActivateRoutes.prototype.deactivateRoutes = function(futureNode, currNode, parentOutletMap) {
var future = futureNode.value;
var curr = currNode ? currNode.value : null;
if (future === curr) {
if (future.component) {
var outlet = getOutlet(parentOutletMap, future);
this.deactivateChildRoutes(futureNode, currNode, outlet.outletMap);
} else {
this.deactivateChildRoutes(futureNode, currNode, parentOutletMap);
}
} else {
if (curr) {
this.deactiveRouteAndItsChildren(currNode, parentOutletMap);
}
}
};
ActivateRoutes.prototype.activateRoutes = function(futureNode, currNode, parentOutletMap) {
var future = futureNode.value;
var curr = currNode ? currNode.value : null;
if (future === curr) {
advanceActivatedRoute(future);
if (future.component) {
var outlet = getOutlet(parentOutletMap, future);
this.activateChildRoutes(futureNode, currNode, outlet.outletMap);
} else {
this.activateChildRoutes(futureNode, currNode, parentOutletMap);
}
} else {
if (future.component) {
advanceActivatedRoute(future);
var outlet = getOutlet(parentOutletMap, futureNode.value);
if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {
var stored = this.routeReuseStrategy.retrieve(future.snapshot);
this.routeReuseStrategy.store(future.snapshot, null);
outlet.attach(stored.componentRef, stored.route.value);
advanceActivatedRouteNodeAndItsChildren(stored.route);
} else {
var outletMap = new RouterOutletMap();
this.placeComponentIntoOutlet(outletMap, future, outlet);
this.activateChildRoutes(futureNode, null, outletMap);
}
} else {
advanceActivatedRoute(future);
this.activateChildRoutes(futureNode, null, parentOutletMap);
}
}
};
ActivateRoutes.prototype.placeComponentIntoOutlet = function(outletMap, future, outlet) {
var config = parentLoadedConfig(future.snapshot);
var cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;
outlet.activateWith(future, cmpFactoryResolver, outletMap);
};
ActivateRoutes.prototype.deactiveRouteAndItsChildren = function(route, parentOutletMap) {
if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {
this.detachAndStoreRouteSubtree(route, parentOutletMap);
} else {
this.deactiveRouteAndOutlet(route, parentOutletMap);
}
};
ActivateRoutes.prototype.detachAndStoreRouteSubtree = function(route, parentOutletMap) {
var outlet = getOutlet(parentOutletMap, route.value);
var componentRef = outlet.detach();
this.routeReuseStrategy.store(route.value.snapshot, {
componentRef: componentRef,
route: route
});
};
ActivateRoutes.prototype.deactiveRouteAndOutlet = function(route, parentOutletMap) {
var _this = this;
var prevChildren = nodeChildrenAsMap(route);
var outlet = null;
try {
outlet = getOutlet(parentOutletMap, route.value);
} catch (e) {
return;
}
var childOutletMap = outlet.outletMap;
forEach(prevChildren, function(v, k) {
if (route.value.component) {
_this.deactiveRouteAndItsChildren(v, childOutletMap);
} else {
_this.deactiveRouteAndItsChildren(v, parentOutletMap);
}
});
if (outlet && outlet.isActivated) {
outlet.deactivate();
}
};
return ActivateRoutes;
}();
function advanceActivatedRouteNodeAndItsChildren(node) {
advanceActivatedRoute(node.value);
node.children.forEach(advanceActivatedRouteNodeAndItsChildren);
}
function parentLoadedConfig(snapshot) {
for (var s = snapshot.parent; s; s = s.parent) {
var route = s._routeConfig;
if (route && route._loadedConfig) return route._loadedConfig;
if (route && route.component) return null;
}
return null;
}
function closestLoadedConfig(snapshot) {
if (!snapshot) return null;
for (var s = snapshot.parent; s; s = s.parent) {
var route = s._routeConfig;
if (route && route._loadedConfig) return route._loadedConfig;
}
return null;
}
function nodeChildrenAsMap(node) {
var map$$1 = {};
if (node) {
node.children.forEach(function(child) {
return map$$1[child.value.outlet] = child;
});
}
return map$$1;
}
function getOutlet(outletMap, route) {
var outlet = outletMap._outlets[route.outlet];
if (!outlet) {
var componentName = route.component.name;
if (route.outlet === PRIMARY_OUTLET) {
throw new Error("Cannot find primary outlet to load '" + componentName + "'");
} else {
throw new Error("Cannot find the outlet " + route.outlet + " to load '" + componentName + "'");
}
}
return outlet;
}
function validateCommands(commands) {
for (var i = 0; i < commands.length; i++) {
var cmd = commands[i];
if (cmd == null) {
throw new Error("The requested path contains " + cmd + " segment at index " + i);
}
}
}
var RouterLink = function() {
function RouterLink(router, route, tabIndex, renderer, el) {
this.router = router;
this.route = route;
this.commands = [];
if (tabIndex == null) {
renderer.setElementAttribute(el.nativeElement, "tabindex", "0");
}
}
Object.defineProperty(RouterLink.prototype, "routerLink", {
set: function(commands) {
if (commands != null) {
this.commands = Array.isArray(commands) ? commands : [ commands ];
} else {
this.commands = [];
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(RouterLink.prototype, "preserveQueryParams", {
set: function(value) {
if (_angular_core.isDevMode() && console && console.warn) {
console.warn("preserveQueryParams is deprecated!, use queryParamsHandling instead.");
}
this.preserve = value;
},
enumerable: true,
configurable: true
});
RouterLink.prototype.onClick = function() {
var extras = {
skipLocationChange: attrBoolValue(this.skipLocationChange),
replaceUrl: attrBoolValue(this.replaceUrl)
};
this.router.navigateByUrl(this.urlTree, extras);
return true;
};
Object.defineProperty(RouterLink.prototype, "urlTree", {
get: function() {
return this.router.createUrlTree(this.commands, {
relativeTo: this.route,
queryParams: this.queryParams,
fragment: this.fragment,
preserveQueryParams: attrBoolValue(this.preserve),
queryParamsHandling: this.queryParamsHandling,
preserveFragment: attrBoolValue(this.preserveFragment)
});
},
enumerable: true,
configurable: true
});
return RouterLink;
}();
RouterLink.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: ":not(a)[routerLink]"
} ]
} ];
RouterLink.ctorParameters = function() {
return [ {
type: Router
}, {
type: ActivatedRoute
}, {
type: undefined,
decorators: [ {
type: _angular_core.Attribute,
args: [ "tabindex" ]
} ]
}, {
type: _angular_core.Renderer
}, {
type: _angular_core.ElementRef
} ];
};
RouterLink.propDecorators = {
queryParams: [ {
type: _angular_core.Input
} ],
fragment: [ {
type: _angular_core.Input
} ],
queryParamsHandling: [ {
type: _angular_core.Input
} ],
preserveFragment: [ {
type: _angular_core.Input
} ],
skipLocationChange: [ {
type: _angular_core.Input
} ],
replaceUrl: [ {
type: _angular_core.Input
} ],
routerLink: [ {
type: _angular_core.Input
} ],
preserveQueryParams: [ {
type: _angular_core.Input
} ],
onClick: [ {
type: _angular_core.HostListener,
args: [ "click" ]
} ]
};
var RouterLinkWithHref = function() {
function RouterLinkWithHref(router, route, locationStrategy) {
var _this = this;
this.router = router;
this.route = route;
this.locationStrategy = locationStrategy;
this.commands = [];
this.subscription = router.events.subscribe(function(s) {
if (s instanceof NavigationEnd) {
_this.updateTargetUrlAndHref();
}
});
}
Object.defineProperty(RouterLinkWithHref.prototype, "routerLink", {
set: function(commands) {
if (commands != null) {
this.commands = Array.isArray(commands) ? commands : [ commands ];
} else {
this.commands = [];
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(RouterLinkWithHref.prototype, "preserveQueryParams", {
set: function(value) {
if (_angular_core.isDevMode() && console && console.warn) {
console.warn("preserveQueryParams is deprecated, use queryParamsHandling instead.");
}
this.preserve = value;
},
enumerable: true,
configurable: true
});
RouterLinkWithHref.prototype.ngOnChanges = function(changes) {
this.updateTargetUrlAndHref();
};
RouterLinkWithHref.prototype.ngOnDestroy = function() {
this.subscription.unsubscribe();
};
RouterLinkWithHref.prototype.onClick = function(button, ctrlKey, metaKey) {
if (button !== 0 || ctrlKey || metaKey) {
return true;
}
if (typeof this.target === "string" && this.target != "_self") {
return true;
}
var extras = {
skipLocationChange: attrBoolValue(this.skipLocationChange),
replaceUrl: attrBoolValue(this.replaceUrl)
};
this.router.navigateByUrl(this.urlTree, extras);
return false;
};
RouterLinkWithHref.prototype.updateTargetUrlAndHref = function() {
this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
};
Object.defineProperty(RouterLinkWithHref.prototype, "urlTree", {
get: function() {
return this.router.createUrlTree(this.commands, {
relativeTo: this.route,
queryParams: this.queryParams,
fragment: this.fragment,
preserveQueryParams: attrBoolValue(this.preserve),
queryParamsHandling: this.queryParamsHandling,
preserveFragment: attrBoolValue(this.preserveFragment)
});
},
enumerable: true,
configurable: true
});
return RouterLinkWithHref;
}();
RouterLinkWithHref.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "a[routerLink]"
} ]
} ];
RouterLinkWithHref.ctorParameters = function() {
return [ {
type: Router
}, {
type: ActivatedRoute
}, {
type: _angular_common.LocationStrategy
} ];
};
RouterLinkWithHref.propDecorators = {
target: [ {
type: _angular_core.HostBinding,
args: [ "attr.target" ]
}, {
type: _angular_core.Input
} ],
queryParams: [ {
type: _angular_core.Input
} ],
fragment: [ {
type: _angular_core.Input
} ],
queryParamsHandling: [ {
type: _angular_core.Input
} ],
preserveFragment: [ {
type: _angular_core.Input
} ],
skipLocationChange: [ {
type: _angular_core.Input
} ],
replaceUrl: [ {
type: _angular_core.Input
} ],
href: [ {
type: _angular_core.HostBinding
} ],
routerLink: [ {
type: _angular_core.Input
} ],
preserveQueryParams: [ {
type: _angular_core.Input
} ],
onClick: [ {
type: _angular_core.HostListener,
args: [ "click", [ "$event.button", "$event.ctrlKey", "$event.metaKey" ] ]
} ]
};
function attrBoolValue(s) {
return s === "" || !!s;
}
var RouterLinkActive = function() {
function RouterLinkActive(router, element, renderer, cdr) {
var _this = this;
this.router = router;
this.element = element;
this.renderer = renderer;
this.cdr = cdr;
this.classes = [];
this.active = false;
this.routerLinkActiveOptions = {
exact: false
};
this.subscription = router.events.subscribe(function(s) {
if (s instanceof NavigationEnd) {
_this.update();
}
});
}
Object.defineProperty(RouterLinkActive.prototype, "isActive", {
get: function() {
return this.active;
},
enumerable: true,
configurable: true
});
RouterLinkActive.prototype.ngAfterContentInit = function() {
var _this = this;
this.links.changes.subscribe(function(_) {
return _this.update();
});
this.linksWithHrefs.changes.subscribe(function(_) {
return _this.update();
});
this.update();
};
Object.defineProperty(RouterLinkActive.prototype, "routerLinkActive", {
set: function(data) {
var classes = Array.isArray(data) ? data : data.split(" ");
this.classes = classes.filter(function(c) {
return !!c;
});
},
enumerable: true,
configurable: true
});
RouterLinkActive.prototype.ngOnChanges = function(changes) {
this.update();
};
RouterLinkActive.prototype.ngOnDestroy = function() {
this.subscription.unsubscribe();
};
RouterLinkActive.prototype.update = function() {
var _this = this;
if (!this.links || !this.linksWithHrefs || !this.router.navigated) return;
var hasActiveLinks = this.hasActiveLinks();
if (this.active !== hasActiveLinks) {
this.classes.forEach(function(c) {
return _this.renderer.setElementClass(_this.element.nativeElement, c, hasActiveLinks);
});
Promise.resolve(hasActiveLinks).then(function(active) {
return _this.active = active;
});
}
};
RouterLinkActive.prototype.isLinkActive = function(router) {
var _this = this;
return function(link) {
return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact);
};
};
RouterLinkActive.prototype.hasActiveLinks = function() {
return this.links.some(this.isLinkActive(this.router)) || this.linksWithHrefs.some(this.isLinkActive(this.router));
};
return RouterLinkActive;
}();
RouterLinkActive.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "[routerLinkActive]",
exportAs: "routerLinkActive"
} ]
} ];
RouterLinkActive.ctorParameters = function() {
return [ {
type: Router
}, {
type: _angular_core.ElementRef
}, {
type: _angular_core.Renderer
}, {
type: _angular_core.ChangeDetectorRef
} ];
};
RouterLinkActive.propDecorators = {
links: [ {
type: _angular_core.ContentChildren,
args: [ RouterLink, {
descendants: true
} ]
} ],
linksWithHrefs: [ {
type: _angular_core.ContentChildren,
args: [ RouterLinkWithHref, {
descendants: true
} ]
} ],
routerLinkActiveOptions: [ {
type: _angular_core.Input
} ],
routerLinkActive: [ {
type: _angular_core.Input
} ]
};
var RouterOutlet = function() {
function RouterOutlet(parentOutletMap, location, resolver, name) {
this.parentOutletMap = parentOutletMap;
this.location = location;
this.resolver = resolver;
this.name = name;
this.activateEvents = new _angular_core.EventEmitter();
this.deactivateEvents = new _angular_core.EventEmitter();
parentOutletMap.registerOutlet(name ? name : PRIMARY_OUTLET, this);
}
RouterOutlet.prototype.ngOnDestroy = function() {
this.parentOutletMap.removeOutlet(this.name ? this.name : PRIMARY_OUTLET);
};
Object.defineProperty(RouterOutlet.prototype, "locationInjector", {
get: function() {
return this.location.injector;
},
enumerable: true,
configurable: true
});
Object.defineProperty(RouterOutlet.prototype, "locationFactoryResolver", {
get: function() {
return this.resolver;
},
enumerable: true,
configurable: true
});
Object.defineProperty(RouterOutlet.prototype, "isActivated", {
get: function() {
return !!this.activated;
},
enumerable: true,
configurable: true
});
Object.defineProperty(RouterOutlet.prototype, "component", {
get: function() {
if (!this.activated) throw new Error("Outlet is not activated");
return this.activated.instance;
},
enumerable: true,
configurable: true
});
Object.defineProperty(RouterOutlet.prototype, "activatedRoute", {
get: function() {
if (!this.activated) throw new Error("Outlet is not activated");
return this._activatedRoute;
},
enumerable: true,
configurable: true
});
RouterOutlet.prototype.detach = function() {
if (!this.activated) throw new Error("Outlet is not activated");
this.location.detach();
var r = this.activated;
this.activated = null;
this._activatedRoute = null;
return r;
};
RouterOutlet.prototype.attach = function(ref, activatedRoute) {
this.activated = ref;
this._activatedRoute = activatedRoute;
this.location.insert(ref.hostView);
};
RouterOutlet.prototype.deactivate = function() {
if (this.activated) {
var c = this.component;
this.activated.destroy();
this.activated = null;
this._activatedRoute = null;
this.deactivateEvents.emit(c);
}
};
RouterOutlet.prototype.activate = function(activatedRoute, resolver, injector, providers, outletMap) {
if (this.isActivated) {
throw new Error("Cannot activate an already activated outlet");
}
this.outletMap = outletMap;
this._activatedRoute = activatedRoute;
var snapshot = activatedRoute._futureSnapshot;
var component = snapshot._routeConfig.component;
var factory = resolver.resolveComponentFactory(component);
var inj = _angular_core.ReflectiveInjector.fromResolvedProviders(providers, injector);
this.activated = this.location.createComponent(factory, this.location.length, inj, []);
this.activated.changeDetectorRef.detectChanges();
this.activateEvents.emit(this.activated.instance);
};
RouterOutlet.prototype.activateWith = function(activatedRoute, resolver, outletMap) {
if (this.isActivated) {
throw new Error("Cannot activate an already activated outlet");
}
this.outletMap = outletMap;
this._activatedRoute = activatedRoute;
var snapshot = activatedRoute._futureSnapshot;
var component = snapshot._routeConfig.component;
resolver = resolver || this.resolver;
var factory = resolver.resolveComponentFactory(component);
var injector = new OutletInjector(activatedRoute, outletMap, this.location.injector);
this.activated = this.location.createComponent(factory, this.location.length, injector, []);
this.activated.changeDetectorRef.detectChanges();
this.activateEvents.emit(this.activated.instance);
};
return RouterOutlet;
}();
RouterOutlet.decorators = [ {
type: _angular_core.Directive,
args: [ {
selector: "router-outlet"
} ]
} ];
RouterOutlet.ctorParameters = function() {
return [ {
type: RouterOutletMap
}, {
type: _angular_core.ViewContainerRef
}, {
type: _angular_core.ComponentFactoryResolver
}, {
type: undefined,
decorators: [ {
type: _angular_core.Attribute,
args: [ "name" ]
} ]
} ];
};
RouterOutlet.propDecorators = {
activateEvents: [ {
type: _angular_core.Output,
args: [ "activate" ]
} ],
deactivateEvents: [ {
type: _angular_core.Output,
args: [ "deactivate" ]
} ]
};
var OutletInjector = function() {
function OutletInjector(route, map$$1, parent) {
this.route = route;
this.map = map$$1;
this.parent = parent;
}
OutletInjector.prototype.get = function(token, notFoundValue) {
if (token === ActivatedRoute) {
return this.route;
}
if (token === RouterOutletMap) {
return this.map;
}
return this.parent.get(token, notFoundValue);
};
return OutletInjector;
}();
var RouteReuseStrategy = function() {
function RouteReuseStrategy() {}
RouteReuseStrategy.prototype.shouldDetach = function(route) {};
RouteReuseStrategy.prototype.store = function(route, handle) {};
RouteReuseStrategy.prototype.shouldAttach = function(route) {};
RouteReuseStrategy.prototype.retrieve = function(route) {};
RouteReuseStrategy.prototype.shouldReuseRoute = function(future, curr) {};
return RouteReuseStrategy;
}();
var PreloadingStrategy = function() {
function PreloadingStrategy() {}
PreloadingStrategy.prototype.preload = function(route, fn) {};
return PreloadingStrategy;
}();
var PreloadAllModules = function() {
function PreloadAllModules() {}
PreloadAllModules.prototype.preload = function(route, fn) {
return rxjs_operator_catch._catch.call(fn(), function() {
return rxjs_observable_of.of(null);
});
};
return PreloadAllModules;
}();
var NoPreloading = function() {
function NoPreloading() {}
NoPreloading.prototype.preload = function(route, fn) {
return rxjs_observable_of.of(null);
};
return NoPreloading;
}();
var RouterPreloader = function() {
function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {
this.router = router;
this.injector = injector;
this.preloadingStrategy = preloadingStrategy;
var onStartLoad = function(r) {
return router.triggerEvent(new RouteConfigLoadStart(r));
};
var onEndLoad = function(r) {
return router.triggerEvent(new RouteConfigLoadEnd(r));
};
this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);
}
RouterPreloader.prototype.setUpPreloading = function() {
var _this = this;
var navigations$ = rxjs_operator_filter.filter.call(this.router.events, function(e) {
return e instanceof NavigationEnd;
});
this.subscription = rxjs_operator_concatMap.concatMap.call(navigations$, function() {
return _this.preload();
}).subscribe(function() {});
};
RouterPreloader.prototype.preload = function() {
var ngModule = this.injector.get(_angular_core.NgModuleRef);
return this.processRoutes(ngModule, this.router.config);
};
RouterPreloader.prototype.ngOnDestroy = function() {
this.subscription.unsubscribe();
};
RouterPreloader.prototype.processRoutes = function(ngModule, routes) {
var res = [];
for (var _i = 0, routes_5 = routes; _i < routes_5.length; _i++) {
var route = routes_5[_i];
if (route.loadChildren && !route.canLoad && route._loadedConfig) {
var childConfig = route._loadedConfig;
res.push(this.processRoutes(childConfig.module, childConfig.routes));
} else if (route.loadChildren && !route.canLoad) {
res.push(this.preloadConfig(ngModule, route));
} else if (route.children) {
res.push(this.processRoutes(ngModule, route.children));
}
}
return rxjs_operator_mergeAll.mergeAll.call(rxjs_observable_from.from(res));
};
RouterPreloader.prototype.preloadConfig = function(ngModule, route) {
var _this = this;
return this.preloadingStrategy.preload(route, function() {
var loaded$ = _this.loader.load(ngModule.injector, route);
return rxjs_operator_mergeMap.mergeMap.call(loaded$, function(config) {
route._loadedConfig = config;
return _this.processRoutes(config.module, config.routes);
});
});
};
return RouterPreloader;
}();
RouterPreloader.decorators = [ {
type: _angular_core.Injectable
} ];
RouterPreloader.ctorParameters = function() {
return [ {
type: Router
}, {
type: _angular_core.NgModuleFactoryLoader
}, {
type: _angular_core.Compiler
}, {
type: _angular_core.Injector
}, {
type: PreloadingStrategy
} ];
};
var ROUTER_DIRECTIVES = [ RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive ];
var ROUTER_CONFIGURATION = new _angular_core.InjectionToken("ROUTER_CONFIGURATION");
var ROUTER_FORROOT_GUARD = new _angular_core.InjectionToken("ROUTER_FORROOT_GUARD");
var ROUTER_PROVIDERS = [ _angular_common.Location, {
provide: UrlSerializer,
useClass: DefaultUrlSerializer
}, {
provide: Router,
useFactory: setupRouter,
deps: [ _angular_core.ApplicationRef, UrlSerializer, RouterOutletMap, _angular_common.Location, _angular_core.Injector, _angular_core.NgModuleFactoryLoader, _angular_core.Compiler, ROUTES, ROUTER_CONFIGURATION, [ UrlHandlingStrategy, new _angular_core.Optional() ], [ RouteReuseStrategy, new _angular_core.Optional() ] ]
}, RouterOutletMap, {
provide: ActivatedRoute,
useFactory: rootRoute,
deps: [ Router ]
}, {
provide: _angular_core.NgModuleFactoryLoader,
useClass: _angular_core.SystemJsNgModuleLoader
}, RouterPreloader, NoPreloading, PreloadAllModules, {
provide: ROUTER_CONFIGURATION,
useValue: {
enableTracing: false
}
} ];
function routerNgProbeToken() {
return new _angular_core.NgProbeToken("Router", Router);
}
var RouterModule = function() {
function RouterModule(guard, router) {}
RouterModule.forRoot = function(routes, config) {
return {
ngModule: RouterModule,
providers: [ ROUTER_PROVIDERS, provideRoutes(routes), {
provide: ROUTER_FORROOT_GUARD,
useFactory: provideForRootGuard,
deps: [ [ Router, new _angular_core.Optional(), new _angular_core.SkipSelf() ] ]
}, {
provide: ROUTER_CONFIGURATION,
useValue: config ? config : {}
}, {
provide: _angular_common.LocationStrategy,
useFactory: provideLocationStrategy,
deps: [ _angular_common.PlatformLocation, [ new _angular_core.Inject(_angular_common.APP_BASE_HREF), new _angular_core.Optional() ], ROUTER_CONFIGURATION ]
}, {
provide: PreloadingStrategy,
useExisting: config && config.preloadingStrategy ? config.preloadingStrategy : NoPreloading
}, {
provide: _angular_core.NgProbeToken,
multi: true,
useFactory: routerNgProbeToken
}, provideRouterInitializer() ]
};
};
RouterModule.forChild = function(routes) {
return {
ngModule: RouterModule,
providers: [ provideRoutes(routes) ]
};
};
return RouterModule;
}();
RouterModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
declarations: ROUTER_DIRECTIVES,
exports: ROUTER_DIRECTIVES
} ]
} ];
RouterModule.ctorParameters = function() {
return [ {
type: undefined,
decorators: [ {
type: _angular_core.Optional
}, {
type: _angular_core.Inject,
args: [ ROUTER_FORROOT_GUARD ]
} ]
}, {
type: Router,
decorators: [ {
type: _angular_core.Optional
} ]
} ];
};
function provideLocationStrategy(platformLocationStrategy, baseHref, options) {
if (options === void 0) {
options = {};
}
return options.useHash ? new _angular_common.HashLocationStrategy(platformLocationStrategy, baseHref) : new _angular_common.PathLocationStrategy(platformLocationStrategy, baseHref);
}
function provideForRootGuard(router) {
if (router) {
throw new Error("RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.");
}
return "guarded";
}
function provideRoutes(routes) {
return [ {
provide: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS,
multi: true,
useValue: routes
}, {
provide: ROUTES,
multi: true,
useValue: routes
} ];
}
function setupRouter(ref, urlSerializer, outletMap, location, injector, loader, compiler, config, opts, urlHandlingStrategy, routeReuseStrategy) {
if (opts === void 0) {
opts = {};
}
var router = new Router(null, urlSerializer, outletMap, location, injector, loader, compiler, flatten(config));
if (urlHandlingStrategy) {
router.urlHandlingStrategy = urlHandlingStrategy;
}
if (routeReuseStrategy) {
router.routeReuseStrategy = routeReuseStrategy;
}
if (opts.errorHandler) {
router.errorHandler = opts.errorHandler;
}
if (opts.enableTracing) {
var dom_1 = _angular_platformBrowser.ɵgetDOM();
router.events.subscribe(function(e) {
dom_1.logGroup("Router Event: " + e.constructor.name);
dom_1.log(e.toString());
dom_1.log(e);
dom_1.logGroupEnd();
});
}
return router;
}
function rootRoute(router) {
return router.routerState.root;
}
var RouterInitializer = function() {
function RouterInitializer(injector) {
this.injector = injector;
this.initNavigation = false;
this.resultOfPreactivationDone = new rxjs_Subject.Subject();
}
RouterInitializer.prototype.appInitializer = function() {
var _this = this;
var p = this.injector.get(_angular_common.LOCATION_INITIALIZED, Promise.resolve(null));
return p.then(function() {
var resolve = null;
var res = new Promise(function(r) {
return resolve = r;
});
var router = _this.injector.get(Router);
var opts = _this.injector.get(ROUTER_CONFIGURATION);
if (_this.isLegacyDisabled(opts) || _this.isLegacyEnabled(opts)) {
resolve(true);
} else if (opts.initialNavigation === "disabled") {
router.setUpLocationChangeListener();
resolve(true);
} else if (opts.initialNavigation === "enabled") {
router.hooks.afterPreactivation = function() {
if (!_this.initNavigation) {
_this.initNavigation = true;
resolve(true);
return _this.resultOfPreactivationDone;
} else {
return rxjs_observable_of.of(null);
}
};
router.initialNavigation();
} else {
throw new Error("Invalid initialNavigation options: '" + opts.initialNavigation + "'");
}
return res;
});
};
RouterInitializer.prototype.bootstrapListener = function(bootstrappedComponentRef) {
var opts = this.injector.get(ROUTER_CONFIGURATION);
var preloader = this.injector.get(RouterPreloader);
var router = this.injector.get(Router);
var ref = this.injector.get(_angular_core.ApplicationRef);
if (bootstrappedComponentRef !== ref.components[0]) {
return;
}
if (this.isLegacyEnabled(opts)) {
router.initialNavigation();
} else if (this.isLegacyDisabled(opts)) {
router.setUpLocationChangeListener();
}
preloader.setUpPreloading();
router.resetRootComponentType(ref.componentTypes[0]);
this.resultOfPreactivationDone.next(null);
this.resultOfPreactivationDone.complete();
};
RouterInitializer.prototype.isLegacyEnabled = function(opts) {
return opts.initialNavigation === "legacy_enabled" || opts.initialNavigation === true || opts.initialNavigation === undefined;
};
RouterInitializer.prototype.isLegacyDisabled = function(opts) {
return opts.initialNavigation === "legacy_disabled" || opts.initialNavigation === false;
};
return RouterInitializer;
}();
RouterInitializer.decorators = [ {
type: _angular_core.Injectable
} ];
RouterInitializer.ctorParameters = function() {
return [ {
type: _angular_core.Injector
} ];
};
function getAppInitializer(r) {
return r.appInitializer.bind(r);
}
function getBootstrapListener(r) {
return r.bootstrapListener.bind(r);
}
var ROUTER_INITIALIZER = new _angular_core.InjectionToken("Router Initializer");
function provideRouterInitializer() {
return [ RouterInitializer, {
provide: _angular_core.APP_INITIALIZER,
multi: true,
useFactory: getAppInitializer,
deps: [ RouterInitializer ]
}, {
provide: ROUTER_INITIALIZER,
useFactory: getBootstrapListener,
deps: [ RouterInitializer ]
}, {
provide: _angular_core.APP_BOOTSTRAP_LISTENER,
multi: true,
useExisting: ROUTER_INITIALIZER
} ];
}
var VERSION = new _angular_core.Version("4.1.0");
exports.RouterLink = RouterLink;
exports.RouterLinkWithHref = RouterLinkWithHref;
exports.RouterLinkActive = RouterLinkActive;
exports.RouterOutlet = RouterOutlet;
exports.NavigationCancel = NavigationCancel;
exports.NavigationEnd = NavigationEnd;
exports.NavigationError = NavigationError;
exports.NavigationStart = NavigationStart;
exports.RouteConfigLoadEnd = RouteConfigLoadEnd;
exports.RouteConfigLoadStart = RouteConfigLoadStart;
exports.RoutesRecognized = RoutesRecognized;
exports.RouteReuseStrategy = RouteReuseStrategy;
exports.Router = Router;
exports.ROUTES = ROUTES;
exports.ROUTER_CONFIGURATION = ROUTER_CONFIGURATION;
exports.ROUTER_INITIALIZER = ROUTER_INITIALIZER;
exports.RouterModule = RouterModule;
exports.provideRoutes = provideRoutes;
exports.RouterOutletMap = RouterOutletMap;
exports.NoPreloading = NoPreloading;
exports.PreloadAllModules = PreloadAllModules;
exports.PreloadingStrategy = PreloadingStrategy;
exports.RouterPreloader = RouterPreloader;
exports.ActivatedRoute = ActivatedRoute;
exports.ActivatedRouteSnapshot = ActivatedRouteSnapshot;
exports.RouterState = RouterState;
exports.RouterStateSnapshot = RouterStateSnapshot;
exports.PRIMARY_OUTLET = PRIMARY_OUTLET;
exports.convertToParamMap = convertToParamMap;
exports.UrlHandlingStrategy = UrlHandlingStrategy;
exports.DefaultUrlSerializer = DefaultUrlSerializer;
exports.UrlSegment = UrlSegment;
exports.UrlSegmentGroup = UrlSegmentGroup;
exports.UrlSerializer = UrlSerializer;
exports.UrlTree = UrlTree;
exports.VERSION = VERSION;
exports.ɵROUTER_PROVIDERS = ROUTER_PROVIDERS;
exports.ɵflatten = flatten;
exports.ɵa = ROUTER_FORROOT_GUARD;
exports.ɵg = RouterInitializer;
exports.ɵh = getAppInitializer;
exports.ɵi = getBootstrapListener;
exports.ɵd = provideForRootGuard;
exports.ɵc = provideLocationStrategy;
exports.ɵj = provideRouterInitializer;
exports.ɵf = rootRoute;
exports.ɵb = routerNgProbeToken;
exports.ɵe = setupRouter;
exports.ɵk = Tree;
exports.ɵl = TreeNode;
Object.defineProperty(exports, "__esModule", {
value: true
});
});
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(123);
var ObjectUnsubscribedError_1 = __webpack_require__(124);
var BehaviorSubject = function(_super) {
__extends(BehaviorSubject, _super);
function BehaviorSubject(_value) {
_super.call(this);
this._value = _value;
}
Object.defineProperty(BehaviorSubject.prototype, "value", {
get: function() {
return this.getValue();
},
enumerable: true,
configurable: true
});
BehaviorSubject.prototype._subscribe = function(subscriber) {
var subscription = _super.prototype._subscribe.call(this, subscriber);
if (subscription && !subscription.closed) {
subscriber.next(this._value);
}
return subscription;
};
BehaviorSubject.prototype.getValue = function() {
if (this.hasError) {
throw this.thrownError;
} else if (this.closed) {
throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
} else {
return this._value;
}
};
BehaviorSubject.prototype.next = function(value) {
_super.prototype.next.call(this, this._value = value);
};
return BehaviorSubject;
}(Subject_1.Subject);
exports.BehaviorSubject = BehaviorSubject;
}, function(module, exports, __webpack_require__) {
"use strict";
var FromObservable_1 = __webpack_require__(171);
exports.from = FromObservable_1.FromObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isArray_1 = __webpack_require__(99);
var isArrayLike_1 = __webpack_require__(116);
var isPromise_1 = __webpack_require__(117);
var PromiseObservable_1 = __webpack_require__(164);
var IteratorObservable_1 = __webpack_require__(172);
var ArrayObservable_1 = __webpack_require__(109);
var ArrayLikeObservable_1 = __webpack_require__(173);
var iterator_1 = __webpack_require__(118);
var Observable_1 = __webpack_require__(93);
var observeOn_1 = __webpack_require__(174);
var observable_1 = __webpack_require__(106);
var FromObservable = function(_super) {
__extends(FromObservable, _super);
function FromObservable(ish, scheduler) {
_super.call(this, null);
this.ish = ish;
this.scheduler = scheduler;
}
FromObservable.create = function(ish, scheduler) {
if (ish != null) {
if (typeof ish[observable_1.observable] === "function") {
if (ish instanceof Observable_1.Observable && !scheduler) {
return ish;
}
return new FromObservable(ish, scheduler);
} else if (isArray_1.isArray(ish)) {
return new ArrayObservable_1.ArrayObservable(ish, scheduler);
} else if (isPromise_1.isPromise(ish)) {
return new PromiseObservable_1.PromiseObservable(ish, scheduler);
} else if (typeof ish[iterator_1.iterator] === "function" || typeof ish === "string") {
return new IteratorObservable_1.IteratorObservable(ish, scheduler);
} else if (isArrayLike_1.isArrayLike(ish)) {
return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
}
}
throw new TypeError((ish !== null && typeof ish || ish) + " is not observable");
};
FromObservable.prototype._subscribe = function(subscriber) {
var ish = this.ish;
var scheduler = this.scheduler;
if (scheduler == null) {
return ish[observable_1.observable]().subscribe(subscriber);
} else {
return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
}
};
return FromObservable;
}(Observable_1.Observable);
exports.FromObservable = FromObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(94);
var Observable_1 = __webpack_require__(93);
var iterator_1 = __webpack_require__(118);
var IteratorObservable = function(_super) {
__extends(IteratorObservable, _super);
function IteratorObservable(iterator, scheduler) {
_super.call(this);
this.scheduler = scheduler;
if (iterator == null) {
throw new Error("iterator cannot be null.");
}
this.iterator = getIterator(iterator);
}
IteratorObservable.create = function(iterator, scheduler) {
return new IteratorObservable(iterator, scheduler);
};
IteratorObservable.dispatch = function(state) {
var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;
if (hasError) {
subscriber.error(state.error);
return;
}
var result = iterator.next();
if (result.done) {
subscriber.complete();
return;
}
subscriber.next(result.value);
state.index = index + 1;
if (subscriber.closed) {
if (typeof iterator.return === "function") {
iterator.return();
}
return;
}
this.schedule(state);
};
IteratorObservable.prototype._subscribe = function(subscriber) {
var index = 0;
var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;
if (scheduler) {
return scheduler.schedule(IteratorObservable.dispatch, 0, {
index: index,
iterator: iterator,
subscriber: subscriber
});
} else {
do {
var result = iterator.next();
if (result.done) {
subscriber.complete();
break;
} else {
subscriber.next(result.value);
}
if (subscriber.closed) {
if (typeof iterator.return === "function") {
iterator.return();
}
break;
}
} while (true);
}
};
return IteratorObservable;
}(Observable_1.Observable);
exports.IteratorObservable = IteratorObservable;
var StringIterator = function() {
function StringIterator(str, idx, len) {
if (idx === void 0) {
idx = 0;
}
if (len === void 0) {
len = str.length;
}
this.str = str;
this.idx = idx;
this.len = len;
}
StringIterator.prototype[iterator_1.iterator] = function() {
return this;
};
StringIterator.prototype.next = function() {
return this.idx < this.len ? {
done: false,
value: this.str.charAt(this.idx++)
} : {
done: true,
value: undefined
};
};
return StringIterator;
}();
var ArrayIterator = function() {
function ArrayIterator(arr, idx, len) {
if (idx === void 0) {
idx = 0;
}
if (len === void 0) {
len = toLength(arr);
}
this.arr = arr;
this.idx = idx;
this.len = len;
}
ArrayIterator.prototype[iterator_1.iterator] = function() {
return this;
};
ArrayIterator.prototype.next = function() {
return this.idx < this.len ? {
done: false,
value: this.arr[this.idx++]
} : {
done: true,
value: undefined
};
};
return ArrayIterator;
}();
function getIterator(obj) {
var i = obj[iterator_1.iterator];
if (!i && typeof obj === "string") {
return new StringIterator(obj);
}
if (!i && obj.length !== undefined) {
return new ArrayIterator(obj);
}
if (!i) {
throw new TypeError("object is not iterable");
}
return obj[iterator_1.iterator]();
}
var maxSafeInteger = Math.pow(2, 53) - 1;
function toLength(o) {
var len = +o.length;
if (isNaN(len)) {
return 0;
}
if (len === 0 || !numberIsFinite(len)) {
return len;
}
len = sign(len) * Math.floor(Math.abs(len));
if (len <= 0) {
return 0;
}
if (len > maxSafeInteger) {
return maxSafeInteger;
}
return len;
}
function numberIsFinite(value) {
return typeof value === "number" && root_1.root.isFinite(value);
}
function sign(value) {
var valueAsNumber = +value;
if (valueAsNumber === 0) {
return valueAsNumber;
}
if (isNaN(valueAsNumber)) {
return valueAsNumber;
}
return valueAsNumber < 0 ? -1 : 1;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var ScalarObservable_1 = __webpack_require__(110);
var EmptyObservable_1 = __webpack_require__(111);
var ArrayLikeObservable = function(_super) {
__extends(ArrayLikeObservable, _super);
function ArrayLikeObservable(arrayLike, scheduler) {
_super.call(this);
this.arrayLike = arrayLike;
this.scheduler = scheduler;
if (!scheduler && arrayLike.length === 1) {
this._isScalar = true;
this.value = arrayLike[0];
}
}
ArrayLikeObservable.create = function(arrayLike, scheduler) {
var length = arrayLike.length;
if (length === 0) {
return new EmptyObservable_1.EmptyObservable();
} else if (length === 1) {
return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
} else {
return new ArrayLikeObservable(arrayLike, scheduler);
}
};
ArrayLikeObservable.dispatch = function(state) {
var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;
if (subscriber.closed) {
return;
}
if (index >= length) {
subscriber.complete();
return;
}
subscriber.next(arrayLike[index]);
state.index = index + 1;
this.schedule(state);
};
ArrayLikeObservable.prototype._subscribe = function(subscriber) {
var index = 0;
var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;
var length = arrayLike.length;
if (scheduler) {
return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
arrayLike: arrayLike,
index: index,
length: length,
subscriber: subscriber
});
} else {
for (var i = 0; i < length && !subscriber.closed; i++) {
subscriber.next(arrayLike[i]);
}
subscriber.complete();
}
};
return ArrayLikeObservable;
}(Observable_1.Observable);
exports.ArrayLikeObservable = ArrayLikeObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var Notification_1 = __webpack_require__(175);
function observeOn(scheduler, delay) {
if (delay === void 0) {
delay = 0;
}
return this.lift(new ObserveOnOperator(scheduler, delay));
}
exports.observeOn = observeOn;
var ObserveOnOperator = function() {
function ObserveOnOperator(scheduler, delay) {
if (delay === void 0) {
delay = 0;
}
this.scheduler = scheduler;
this.delay = delay;
}
ObserveOnOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
};
return ObserveOnOperator;
}();
exports.ObserveOnOperator = ObserveOnOperator;
var ObserveOnSubscriber = function(_super) {
__extends(ObserveOnSubscriber, _super);
function ObserveOnSubscriber(destination, scheduler, delay) {
if (delay === void 0) {
delay = 0;
}
_super.call(this, destination);
this.scheduler = scheduler;
this.delay = delay;
}
ObserveOnSubscriber.dispatch = function(arg) {
var notification = arg.notification, destination = arg.destination;
notification.observe(destination);
this.unsubscribe();
};
ObserveOnSubscriber.prototype.scheduleMessage = function(notification) {
this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
};
ObserveOnSubscriber.prototype._next = function(value) {
this.scheduleMessage(Notification_1.Notification.createNext(value));
};
ObserveOnSubscriber.prototype._error = function(err) {
this.scheduleMessage(Notification_1.Notification.createError(err));
};
ObserveOnSubscriber.prototype._complete = function() {
this.scheduleMessage(Notification_1.Notification.createComplete());
};
return ObserveOnSubscriber;
}(Subscriber_1.Subscriber);
exports.ObserveOnSubscriber = ObserveOnSubscriber;
var ObserveOnMessage = function() {
function ObserveOnMessage(notification, destination) {
this.notification = notification;
this.destination = destination;
}
return ObserveOnMessage;
}();
exports.ObserveOnMessage = ObserveOnMessage;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var Notification = function() {
function Notification(kind, value, error) {
this.kind = kind;
this.value = value;
this.error = error;
this.hasValue = kind === "N";
}
Notification.prototype.observe = function(observer) {
switch (this.kind) {
case "N":
return observer.next && observer.next(this.value);

case "E":
return observer.error && observer.error(this.error);

case "C":
return observer.complete && observer.complete();
}
};
Notification.prototype.do = function(next, error, complete) {
var kind = this.kind;
switch (kind) {
case "N":
return next && next(this.value);

case "E":
return error && error(this.error);

case "C":
return complete && complete();
}
};
Notification.prototype.accept = function(nextOrObserver, error, complete) {
if (nextOrObserver && typeof nextOrObserver.next === "function") {
return this.observe(nextOrObserver);
} else {
return this.do(nextOrObserver, error, complete);
}
};
Notification.prototype.toObservable = function() {
var kind = this.kind;
switch (kind) {
case "N":
return Observable_1.Observable.of(this.value);

case "E":
return Observable_1.Observable.throw(this.error);

case "C":
return Observable_1.Observable.empty();
}
throw new Error("unexpected notification kind value");
};
Notification.createNext = function(value) {
if (typeof value !== "undefined") {
return new Notification("N", value);
}
return this.undefinedValueNotification;
};
Notification.createError = function(err) {
return new Notification("E", undefined, err);
};
Notification.createComplete = function() {
return this.completeNotification;
};
Notification.completeNotification = new Notification("C");
Notification.undefinedValueNotification = new Notification("N", undefined);
return Notification;
}();
exports.Notification = Notification;
}, function(module, exports, __webpack_require__) {
"use strict";
var ArrayObservable_1 = __webpack_require__(109);
exports.of = ArrayObservable_1.ArrayObservable.of;
}, function(module, exports, __webpack_require__) {
"use strict";
var mergeMap_1 = __webpack_require__(178);
function concatMap(project, resultSelector) {
return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));
}
exports.concatMap = concatMap;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var subscribeToResult_1 = __webpack_require__(115);
var OuterSubscriber_1 = __webpack_require__(114);
function mergeMap(project, resultSelector, concurrent) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
if (typeof resultSelector === "number") {
concurrent = resultSelector;
resultSelector = null;
}
return this.lift(new MergeMapOperator(project, resultSelector, concurrent));
}
exports.mergeMap = mergeMap;
var MergeMapOperator = function() {
function MergeMapOperator(project, resultSelector, concurrent) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
this.project = project;
this.resultSelector = resultSelector;
this.concurrent = concurrent;
}
MergeMapOperator.prototype.call = function(observer, source) {
return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
};
return MergeMapOperator;
}();
exports.MergeMapOperator = MergeMapOperator;
var MergeMapSubscriber = function(_super) {
__extends(MergeMapSubscriber, _super);
function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
_super.call(this, destination);
this.project = project;
this.resultSelector = resultSelector;
this.concurrent = concurrent;
this.hasCompleted = false;
this.buffer = [];
this.active = 0;
this.index = 0;
}
MergeMapSubscriber.prototype._next = function(value) {
if (this.active < this.concurrent) {
this._tryNext(value);
} else {
this.buffer.push(value);
}
};
MergeMapSubscriber.prototype._tryNext = function(value) {
var result;
var index = this.index++;
try {
result = this.project(value, index);
} catch (err) {
this.destination.error(err);
return;
}
this.active++;
this._innerSub(result, value, index);
};
MergeMapSubscriber.prototype._innerSub = function(ish, value, index) {
this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
};
MergeMapSubscriber.prototype._complete = function() {
this.hasCompleted = true;
if (this.active === 0 && this.buffer.length === 0) {
this.destination.complete();
}
};
MergeMapSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
if (this.resultSelector) {
this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
} else {
this.destination.next(innerValue);
}
};
MergeMapSubscriber.prototype._notifyResultSelector = function(outerValue, innerValue, outerIndex, innerIndex) {
var result;
try {
result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
} catch (err) {
this.destination.error(err);
return;
}
this.destination.next(result);
};
MergeMapSubscriber.prototype.notifyComplete = function(innerSub) {
var buffer = this.buffer;
this.remove(innerSub);
this.active--;
if (buffer.length > 0) {
this._next(buffer.shift());
} else if (this.active === 0 && this.hasCompleted) {
this.destination.complete();
}
};
return MergeMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.MergeMapSubscriber = MergeMapSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function every(predicate, thisArg) {
return this.lift(new EveryOperator(predicate, thisArg, this));
}
exports.every = every;
var EveryOperator = function() {
function EveryOperator(predicate, thisArg, source) {
this.predicate = predicate;
this.thisArg = thisArg;
this.source = source;
}
EveryOperator.prototype.call = function(observer, source) {
return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
};
return EveryOperator;
}();
var EverySubscriber = function(_super) {
__extends(EverySubscriber, _super);
function EverySubscriber(destination, predicate, thisArg, source) {
_super.call(this, destination);
this.predicate = predicate;
this.thisArg = thisArg;
this.source = source;
this.index = 0;
this.thisArg = thisArg || this;
}
EverySubscriber.prototype.notifyComplete = function(everyValueMatch) {
this.destination.next(everyValueMatch);
this.destination.complete();
};
EverySubscriber.prototype._next = function(value) {
var result = false;
try {
result = this.predicate.call(this.thisArg, value, this.index++, this.source);
} catch (err) {
this.destination.error(err);
return;
}
if (!result) {
this.notifyComplete(false);
}
};
EverySubscriber.prototype._complete = function() {
this.notifyComplete(true);
};
return EverySubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var EmptyError_1 = __webpack_require__(181);
function first(predicate, resultSelector, defaultValue) {
return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
}
exports.first = first;
var FirstOperator = function() {
function FirstOperator(predicate, resultSelector, defaultValue, source) {
this.predicate = predicate;
this.resultSelector = resultSelector;
this.defaultValue = defaultValue;
this.source = source;
}
FirstOperator.prototype.call = function(observer, source) {
return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
};
return FirstOperator;
}();
var FirstSubscriber = function(_super) {
__extends(FirstSubscriber, _super);
function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
_super.call(this, destination);
this.predicate = predicate;
this.resultSelector = resultSelector;
this.defaultValue = defaultValue;
this.source = source;
this.index = 0;
this.hasCompleted = false;
this._emitted = false;
}
FirstSubscriber.prototype._next = function(value) {
var index = this.index++;
if (this.predicate) {
this._tryPredicate(value, index);
} else {
this._emit(value, index);
}
};
FirstSubscriber.prototype._tryPredicate = function(value, index) {
var result;
try {
result = this.predicate(value, index, this.source);
} catch (err) {
this.destination.error(err);
return;
}
if (result) {
this._emit(value, index);
}
};
FirstSubscriber.prototype._emit = function(value, index) {
if (this.resultSelector) {
this._tryResultSelector(value, index);
return;
}
this._emitFinal(value);
};
FirstSubscriber.prototype._tryResultSelector = function(value, index) {
var result;
try {
result = this.resultSelector(value, index);
} catch (err) {
this.destination.error(err);
return;
}
this._emitFinal(result);
};
FirstSubscriber.prototype._emitFinal = function(value) {
var destination = this.destination;
if (!this._emitted) {
this._emitted = true;
destination.next(value);
destination.complete();
this.hasCompleted = true;
}
};
FirstSubscriber.prototype._complete = function() {
var destination = this.destination;
if (!this.hasCompleted && typeof this.defaultValue !== "undefined") {
destination.next(this.defaultValue);
destination.complete();
} else if (!this.hasCompleted) {
destination.error(new EmptyError_1.EmptyError());
}
};
return FirstSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var EmptyError = function(_super) {
__extends(EmptyError, _super);
function EmptyError() {
var err = _super.call(this, "no elements in sequence");
this.name = err.name = "EmptyError";
this.stack = err.stack;
this.message = err.message;
}
return EmptyError;
}(Error);
exports.EmptyError = EmptyError;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function reduce(accumulator, seed) {
var hasSeed = false;
if (arguments.length >= 2) {
hasSeed = true;
}
return this.lift(new ReduceOperator(accumulator, seed, hasSeed));
}
exports.reduce = reduce;
var ReduceOperator = function() {
function ReduceOperator(accumulator, seed, hasSeed) {
if (hasSeed === void 0) {
hasSeed = false;
}
this.accumulator = accumulator;
this.seed = seed;
this.hasSeed = hasSeed;
}
ReduceOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
};
return ReduceOperator;
}();
exports.ReduceOperator = ReduceOperator;
var ReduceSubscriber = function(_super) {
__extends(ReduceSubscriber, _super);
function ReduceSubscriber(destination, accumulator, seed, hasSeed) {
_super.call(this, destination);
this.accumulator = accumulator;
this.hasSeed = hasSeed;
this.index = 0;
this.hasValue = false;
this.acc = seed;
if (!this.hasSeed) {
this.index++;
}
}
ReduceSubscriber.prototype._next = function(value) {
if (this.hasValue || (this.hasValue = this.hasSeed)) {
this._tryReduce(value);
} else {
this.acc = value;
this.hasValue = true;
}
};
ReduceSubscriber.prototype._tryReduce = function(value) {
var result;
try {
result = this.accumulator(this.acc, value, this.index++);
} catch (err) {
this.destination.error(err);
return;
}
this.acc = result;
};
ReduceSubscriber.prototype._complete = function() {
if (this.hasValue || this.hasSeed) {
this.destination.next(this.acc);
}
this.destination.complete();
};
return ReduceSubscriber;
}(Subscriber_1.Subscriber);
exports.ReduceSubscriber = ReduceSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function _catch(selector) {
var operator = new CatchOperator(selector);
var caught = this.lift(operator);
return operator.caught = caught;
}
exports._catch = _catch;
var CatchOperator = function() {
function CatchOperator(selector) {
this.selector = selector;
}
CatchOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
};
return CatchOperator;
}();
var CatchSubscriber = function(_super) {
__extends(CatchSubscriber, _super);
function CatchSubscriber(destination, selector, caught) {
_super.call(this, destination);
this.selector = selector;
this.caught = caught;
}
CatchSubscriber.prototype.error = function(err) {
if (!this.isStopped) {
var result = void 0;
try {
result = this.selector(err, this.caught);
} catch (err2) {
_super.prototype.error.call(this, err2);
return;
}
this._unsubscribeAndRecycle();
this.add(subscribeToResult_1.subscribeToResult(this, result));
}
};
return CatchSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var mergeAll_1 = __webpack_require__(113);
function concatAll() {
return this.lift(new mergeAll_1.MergeAllOperator(1));
}
exports.concatAll = concatAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var EmptyError_1 = __webpack_require__(181);
function last(predicate, resultSelector, defaultValue) {
return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
}
exports.last = last;
var LastOperator = function() {
function LastOperator(predicate, resultSelector, defaultValue, source) {
this.predicate = predicate;
this.resultSelector = resultSelector;
this.defaultValue = defaultValue;
this.source = source;
}
LastOperator.prototype.call = function(observer, source) {
return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
};
return LastOperator;
}();
var LastSubscriber = function(_super) {
__extends(LastSubscriber, _super);
function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
_super.call(this, destination);
this.predicate = predicate;
this.resultSelector = resultSelector;
this.defaultValue = defaultValue;
this.source = source;
this.hasValue = false;
this.index = 0;
if (typeof defaultValue !== "undefined") {
this.lastValue = defaultValue;
this.hasValue = true;
}
}
LastSubscriber.prototype._next = function(value) {
var index = this.index++;
if (this.predicate) {
this._tryPredicate(value, index);
} else {
if (this.resultSelector) {
this._tryResultSelector(value, index);
return;
}
this.lastValue = value;
this.hasValue = true;
}
};
LastSubscriber.prototype._tryPredicate = function(value, index) {
var result;
try {
result = this.predicate(value, index, this.source);
} catch (err) {
this.destination.error(err);
return;
}
if (result) {
if (this.resultSelector) {
this._tryResultSelector(value, index);
return;
}
this.lastValue = value;
this.hasValue = true;
}
};
LastSubscriber.prototype._tryResultSelector = function(value, index) {
var result;
try {
result = this.resultSelector(value, index);
} catch (err) {
this.destination.error(err);
return;
}
this.lastValue = result;
this.hasValue = true;
};
LastSubscriber.prototype._complete = function() {
var destination = this.destination;
if (this.hasValue) {
destination.next(this.lastValue);
destination.complete();
} else {
destination.error(new EmptyError_1.EmptyError());
}
};
return LastSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function filter(predicate, thisArg) {
return this.lift(new FilterOperator(predicate, thisArg));
}
exports.filter = filter;
var FilterOperator = function() {
function FilterOperator(predicate, thisArg) {
this.predicate = predicate;
this.thisArg = thisArg;
}
FilterOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
};
return FilterOperator;
}();
var FilterSubscriber = function(_super) {
__extends(FilterSubscriber, _super);
function FilterSubscriber(destination, predicate, thisArg) {
_super.call(this, destination);
this.predicate = predicate;
this.thisArg = thisArg;
this.count = 0;
this.predicate = predicate;
}
FilterSubscriber.prototype._next = function(value) {
var result;
try {
result = this.predicate.call(this.thisArg, value, this.count++);
} catch (err) {
this.destination.error(err);
return;
}
if (result) {
this.destination.next(value);
}
};
return FilterSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var common = __webpack_require__(188);
var application_1 = __webpack_require__(18);
var sharedPreferences;
function ensureSharedPreferences() {
if (!sharedPreferences) {
sharedPreferences = application_1.getNativeApplication().getApplicationContext().getSharedPreferences("prefs.db", 0);
}
}
function verify(key) {
common.checkKey(key);
ensureSharedPreferences();
}
function hasKey(key) {
verify(key);
return sharedPreferences.contains(key);
}
exports.hasKey = hasKey;
function getBoolean(key, defaultValue) {
verify(key);
if (hasKey(key)) {
return sharedPreferences.getBoolean(key, false);
}
return defaultValue;
}
exports.getBoolean = getBoolean;
function getString(key, defaultValue) {
verify(key);
if (hasKey(key)) {
return sharedPreferences.getString(key, "");
}
return defaultValue;
}
exports.getString = getString;
function getNumber(key, defaultValue) {
verify(key);
if (hasKey(key)) {
return sharedPreferences.getFloat(key, float(0));
}
return defaultValue;
}
exports.getNumber = getNumber;
function setBoolean(key, value) {
verify(key);
common.ensureValidValue(value, "boolean");
var editor = sharedPreferences.edit();
editor.putBoolean(key, value);
editor.commit();
}
exports.setBoolean = setBoolean;
function setString(key, value) {
verify(key);
common.ensureValidValue(value, "string");
var editor = sharedPreferences.edit();
editor.putString(key, value);
editor.commit();
}
exports.setString = setString;
function setNumber(key, value) {
verify(key);
common.ensureValidValue(value, "number");
var editor = sharedPreferences.edit();
editor.putFloat(key, float(value));
editor.commit();
}
exports.setNumber = setNumber;
function remove(key) {
verify(key);
var editor = sharedPreferences.edit();
editor.remove(key);
editor.commit();
}
exports.remove = remove;
function clear() {
ensureSharedPreferences();
sharedPreferences.edit().clear().commit();
}
exports.clear = clear;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
exports.checkKey = function(key) {
if (typeof key !== "string") {
throw new Error("key: '" + key + "' must be a string");
}
};
exports.ensureValidValue = function(value, valueType) {
if (typeof value !== valueType) {
throw new Error("value: '" + value + "' must be a " + valueType);
}
};
}, function(module, exports, __webpack_require__) {
if (global.TNS_WEBPACK) {
__webpack_require__(5);
global.registerModule("text/formatted-string", function() {
return __webpack_require__(73);
});
global.registerModule("text/span", function() {
return __webpack_require__(74);
});
global.registerModule("ui/action-bar", function() {
return __webpack_require__(131);
});
global.registerModule("ui/activity-indicator", function() {
return __webpack_require__(190);
});
global.registerModule("ui/border", function() {
return __webpack_require__(192);
});
global.registerModule("ui/button", function() {
return __webpack_require__(69);
});
global.registerModule("ui/content-view", function() {
return __webpack_require__(130);
});
global.registerModule("ui/date-picker", function() {
return __webpack_require__(193);
});
global.registerModule("ui/html-view", function() {
return __webpack_require__(195);
});
global.registerModule("ui/image", function() {
return __webpack_require__(197);
});
global.registerModule("ui/label", function() {
return __webpack_require__(80);
});
global.registerModule("ui/layouts/absolute-layout", function() {
return __webpack_require__(201);
});
global.registerModule("ui/layouts/dock-layout", function() {
return __webpack_require__(203);
});
global.registerModule("ui/layouts/grid-layout", function() {
return __webpack_require__(133);
});
global.registerModule("ui/layouts/stack-layout", function() {
return __webpack_require__(205);
});
global.registerModule("ui/layouts/flexbox-layout", function() {
return __webpack_require__(207);
});
global.registerModule("ui/list-picker", function() {
return __webpack_require__(209);
});
global.registerModule("ui/page", function() {
return __webpack_require__(128);
});
global.registerModule("ui/placeholder", function() {
return __webpack_require__(211);
});
global.registerModule("ui/progress", function() {
return __webpack_require__(212);
});
global.registerModule("ui/proxy-view-container", function() {
return __webpack_require__(214);
});
global.registerModule("ui/repeater", function() {
return __webpack_require__(215);
});
global.registerModule("ui/scroll-view", function() {
return __webpack_require__(216);
});
global.registerModule("ui/search-bar", function() {
return __webpack_require__(218);
});
global.registerModule("ui/segmented-bar", function() {
return __webpack_require__(220);
});
global.registerModule("ui/slider", function() {
return __webpack_require__(222);
});
global.registerModule("ui/switch", function() {
return __webpack_require__(224);
});
global.registerModule("ui/tab-view", function() {
return __webpack_require__(226);
});
global.registerModule("ui/web-view", function() {
return __webpack_require__(228);
});
global.registerModule("ui/text-field", function() {
return __webpack_require__(76);
});
global.registerModule("ui/text-view", function() {
return __webpack_require__(137);
});
global.registerModule("ui/time-picker", function() {
return __webpack_require__(230);
});
global.registerModule("ui/list-view", function() {
return __webpack_require__(232);
});
}
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var activity_indicator_common_1 = __webpack_require__(191);
__export(__webpack_require__(191));
var ActivityIndicator = function(_super) {
__extends(ActivityIndicator, _super);
function ActivityIndicator() {
return _super !== null && _super.apply(this, arguments) || this;
}
ActivityIndicator.prototype.createNativeView = function() {
var progressBar = new android.widget.ProgressBar(this._context);
progressBar.setVisibility(android.view.View.INVISIBLE);
progressBar.setIndeterminate(true);
return progressBar;
};
ActivityIndicator.prototype[activity_indicator_common_1.busyProperty.getDefault] = function() {
return false;
};
ActivityIndicator.prototype[activity_indicator_common_1.busyProperty.setNative] = function(value) {
if (this.visibility === activity_indicator_common_1.Visibility.VISIBLE) {
this.nativeView.setVisibility(value ? android.view.View.VISIBLE : android.view.View.INVISIBLE);
}
};
ActivityIndicator.prototype[activity_indicator_common_1.visibilityProperty.getDefault] = function() {
return activity_indicator_common_1.Visibility.HIDDEN;
};
ActivityIndicator.prototype[activity_indicator_common_1.visibilityProperty.setNative] = function(value) {
switch (value) {
case activity_indicator_common_1.Visibility.VISIBLE:
this.nativeView.setVisibility(this.busy ? android.view.View.VISIBLE : android.view.View.INVISIBLE);
break;

case activity_indicator_common_1.Visibility.HIDDEN:
this.nativeView.setVisibility(android.view.View.INVISIBLE);
break;

case activity_indicator_common_1.Visibility.COLLAPSE:
this.nativeView.setVisibility(android.view.View.GONE);
break;

default:
throw new Error("Invalid visibility value: " + value + '. Valid values are: "' + activity_indicator_common_1.Visibility.VISIBLE + '", "' + activity_indicator_common_1.Visibility.HIDDEN + '", "' + activity_indicator_common_1.Visibility.COLLAPSE + '".');
}
};
ActivityIndicator.prototype[activity_indicator_common_1.colorProperty.getDefault] = function() {
return -1;
};
ActivityIndicator.prototype[activity_indicator_common_1.colorProperty.setNative] = function(value) {
if (value instanceof activity_indicator_common_1.Color) {
this.nativeView.getIndeterminateDrawable().setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
} else {
this.nativeView.getIndeterminateDrawable().clearColorFilter();
}
};
return ActivityIndicator;
}(activity_indicator_common_1.ActivityIndicatorBase);
exports.ActivityIndicator = ActivityIndicator;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var ActivityIndicatorBase = function(_super) {
__extends(ActivityIndicatorBase, _super);
function ActivityIndicatorBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return ActivityIndicatorBase;
}(view_1.View);
exports.ActivityIndicatorBase = ActivityIndicatorBase;
exports.busyProperty = new view_1.Property({
name: "busy",
defaultValue: false,
valueConverter: view_1.booleanConverter
});
exports.busyProperty.register(ActivityIndicatorBase);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var content_view_1 = __webpack_require__(130);
var Border = function(_super) {
__extends(Border, _super);
function Border() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(Border.prototype, "cornerRadius", {
get: function() {
if (typeof this.borderRadius === "number") {
return this.borderRadius;
}
return 0;
},
set: function(value) {
this.borderRadius = value;
},
enumerable: true,
configurable: true
});
Border.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var width = content_view_1.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = content_view_1.layout.getMeasureSpecMode(widthMeasureSpec);
var height = content_view_1.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = content_view_1.layout.getMeasureSpecMode(heightMeasureSpec);
var horizontalBorderLength = this.effectiveBorderLeftWidth + this.effectiveBorderRightWidth;
var verticalBorderLength = this.effectiveBorderTopWidth + this.effectiveBorderBottomWidth;
var result = content_view_1.View.measureChild(this, this.layoutView, content_view_1.layout.makeMeasureSpec(width - horizontalBorderLength, widthMode), content_view_1.layout.makeMeasureSpec(height - verticalBorderLength, heightMode));
var widthAndState = content_view_1.View.resolveSizeAndState(result.measuredWidth + horizontalBorderLength, width, widthMode, 0);
var heightAndState = content_view_1.View.resolveSizeAndState(result.measuredHeight + verticalBorderLength, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
Border.prototype.onLayout = function(left, top, right, bottom) {
var horizontalBorderLength = this.effectiveBorderLeftWidth + this.effectiveBorderRightWidth;
var verticalBorderLength = this.effectiveBorderTopWidth + this.effectiveBorderBottomWidth;
content_view_1.View.layoutChild(this, this.layoutView, this.effectiveBorderLeftWidth, this.effectiveBorderTopWidth, right - left - horizontalBorderLength, bottom - top - verticalBorderLength);
};
return Border;
}(content_view_1.ContentView);
Border = __decorate([ Deprecated ], Border);
exports.Border = Border;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var date_picker_common_1 = __webpack_require__(194);
__export(__webpack_require__(194));
var DateChangedListener;
function initializeDateChangedListener() {
if (DateChangedListener) {
return;
}
var DateChangedListenerImpl = function(_super) {
__extends(DateChangedListenerImpl, _super);
function DateChangedListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
DateChangedListenerImpl.prototype.onDateChanged = function(picker, year, month, day) {
var owner = this.owner;
var dateChanged = false;
if (year !== owner.year) {
date_picker_common_1.yearProperty.nativeValueChange(owner, year);
dateChanged = true;
}
if (month + 1 !== owner.month) {
date_picker_common_1.monthProperty.nativeValueChange(owner, month + 1);
dateChanged = true;
}
if (day !== owner.day) {
date_picker_common_1.dayProperty.nativeValueChange(owner, day);
dateChanged = true;
}
if (dateChanged) {
date_picker_common_1.dateProperty.nativeValueChange(owner, new Date(year, month, day));
}
};
return DateChangedListenerImpl;
}(java.lang.Object);
DateChangedListenerImpl = __decorate([ Interfaces([ android.widget.DatePicker.OnDateChangedListener ]) ], DateChangedListenerImpl);
DateChangedListener = DateChangedListenerImpl;
}
var DatePicker = function(_super) {
__extends(DatePicker, _super);
function DatePicker() {
return _super !== null && _super.apply(this, arguments) || this;
}
DatePicker.prototype.createNativeView = function() {
initializeDateChangedListener();
var picker = new android.widget.DatePicker(this._context);
picker.setCalendarViewShown(false);
var listener = new DateChangedListener(this);
picker.init(0, 0, 0, listener);
picker.listener = listener;
return picker;
};
DatePicker.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
this.nativeView.listener.owner = this;
};
DatePicker.prototype.disposeNativeView = function() {
this.nativeView.listener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
DatePicker.prototype.updateNativeDate = function() {
var nativeView = this.nativeView;
var year = typeof this.year === "number" ? this.year : nativeView.getYear();
var month = typeof this.month === "number" ? this.month - 1 : nativeView.getMonth();
var day = typeof this.day === "number" ? this.day : nativeView.getDayOfMonth();
this.date = new Date(year, month, day);
};
DatePicker.prototype[date_picker_common_1.yearProperty.getDefault] = function() {
return this.nativeView.getYear();
};
DatePicker.prototype[date_picker_common_1.yearProperty.setNative] = function(value) {
if (this.nativeView.getYear() !== value) {
this.updateNativeDate();
}
};
DatePicker.prototype[date_picker_common_1.monthProperty.getDefault] = function() {
return this.nativeView.getMonth();
};
DatePicker.prototype[date_picker_common_1.monthProperty.setNative] = function(value) {
if (this.nativeView.getMonth() !== value - 1) {
this.updateNativeDate();
}
};
DatePicker.prototype[date_picker_common_1.dayProperty.getDefault] = function() {
return this.nativeView.getDayOfMonth();
};
DatePicker.prototype[date_picker_common_1.dayProperty.setNative] = function(value) {
if (this.nativeView.getDayOfMonth() !== value) {
this.updateNativeDate();
}
};
DatePicker.prototype[date_picker_common_1.dateProperty.getDefault] = function() {
var nativeView = this.nativeView;
return new Date(nativeView.getYear(), nativeView.getMonth(), nativeView.getDayOfMonth());
};
DatePicker.prototype[date_picker_common_1.dateProperty.setNative] = function(value) {
var nativeView = this.nativeView;
if (nativeView.getDayOfMonth() !== value.getDay() || nativeView.getMonth() !== value.getMonth() || nativeView.getYear() !== value.getFullYear()) {
nativeView.updateDate(value.getFullYear(), value.getMonth(), value.getDate());
}
};
DatePicker.prototype[date_picker_common_1.maxDateProperty.getDefault] = function() {
return this.nativeView.getMaxDate();
};
DatePicker.prototype[date_picker_common_1.maxDateProperty.setNative] = function(value) {
var newValue = value instanceof Date ? value.getTime() : value;
this.nativeView.setMaxDate(newValue);
};
DatePicker.prototype[date_picker_common_1.minDateProperty.getDefault] = function() {
return this.nativeView.getMinDate();
};
DatePicker.prototype[date_picker_common_1.minDateProperty.setNative] = function(value) {
var newValue = value instanceof Date ? value.getTime() : value;
this.nativeView.setMinDate(newValue);
};
return DatePicker;
}(date_picker_common_1.DatePickerBase);
exports.DatePicker = DatePicker;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var DatePickerBase = function(_super) {
__extends(DatePickerBase, _super);
function DatePickerBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return DatePickerBase;
}(view_1.View);
exports.DatePickerBase = DatePickerBase;
exports.yearProperty = new view_1.Property({
name: "year",
valueConverter: function(v) {
return parseInt(v);
}
});
exports.yearProperty.register(DatePickerBase);
exports.monthProperty = new view_1.Property({
name: "month",
valueConverter: function(v) {
return parseInt(v);
}
});
exports.monthProperty.register(DatePickerBase);
exports.dayProperty = new view_1.Property({
name: "day",
valueConverter: function(v) {
return parseInt(v);
}
});
exports.dayProperty.register(DatePickerBase);
function dateComparer(x, y) {
return x <= y && x >= y ? true : false;
}
exports.maxDateProperty = new view_1.Property({
name: "maxDate",
equalityComparer: dateComparer,
valueConverter: function(v) {
return new Date(v);
}
});
exports.maxDateProperty.register(DatePickerBase);
exports.minDateProperty = new view_1.Property({
name: "minDate",
equalityComparer: dateComparer,
valueConverter: function(v) {
return new Date(v);
}
});
exports.minDateProperty.register(DatePickerBase);
exports.dateProperty = new view_1.Property({
name: "date",
equalityComparer: dateComparer,
valueConverter: function(v) {
return new Date(v);
}
});
exports.dateProperty.register(DatePickerBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var html_view_common_1 = __webpack_require__(196);
__export(__webpack_require__(196));
var HtmlView = function(_super) {
__extends(HtmlView, _super);
function HtmlView() {
return _super !== null && _super.apply(this, arguments) || this;
}
HtmlView.prototype.createNativeView = function() {
var textView = new android.widget.TextView(this._context);
textView.setLinksClickable(true);
textView.setMovementMethod(android.text.method.LinkMovementMethod.getInstance());
return textView;
};
HtmlView.prototype[html_view_common_1.htmlProperty.getDefault] = function() {
return "";
};
HtmlView.prototype[html_view_common_1.htmlProperty.setNative] = function(value) {
var mask = 15;
if (value.search(/<a\s/i) >= 0) {
mask = 0;
}
this.nativeView.setAutoLinkMask(mask);
this.nativeView.setText(android.text.Html.fromHtml(value));
};
return HtmlView;
}(html_view_common_1.HtmlViewBase);
exports.HtmlView = HtmlView;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var HtmlViewBase = function(_super) {
__extends(HtmlViewBase, _super);
function HtmlViewBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return HtmlViewBase;
}(view_1.View);
exports.HtmlViewBase = HtmlViewBase;
exports.htmlProperty = new view_1.Property({
name: "html",
defaultValue: "",
affectsLayout: true
});
exports.htmlProperty.register(HtmlViewBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var image_common_1 = __webpack_require__(198);
var file_system_1 = __webpack_require__(22);
__export(__webpack_require__(198));
var FILE_PREFIX = "file:///";
var ASYNC = "async";
var ImageLoadedListener;
function initializeImageLoadedListener() {
if (ImageLoadedListener) {
return;
}
var ImageLoadedListenerImpl = function(_super) {
__extends(ImageLoadedListenerImpl, _super);
function ImageLoadedListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
ImageLoadedListenerImpl.prototype.onImageLoaded = function(success) {
var owner = this.owner;
if (owner) {
owner.isLoading = false;
}
};
return ImageLoadedListenerImpl;
}(java.lang.Object);
ImageLoadedListenerImpl = __decorate([ Interfaces([ org.nativescript.widgets.image.Worker.OnImageLoadedListener ]) ], ImageLoadedListenerImpl);
ImageLoadedListener = ImageLoadedListenerImpl;
}
var Image = function(_super) {
__extends(Image, _super);
function Image() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this.decodeWidth = 0;
_this.decodeHeight = 0;
_this.useCache = true;
return _this;
}
Image.prototype.createNativeView = function() {
initializeImageLoadedListener();
var imageView = new org.nativescript.widgets.ImageView(this._context);
var listener = new ImageLoadedListener(this);
imageView.setImageLoadedListener(listener);
imageView.listener = listener;
return imageView;
};
Image.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
this.nativeView.listener.owner = this;
};
Image.prototype.disposeNativeView = function() {
this.nativeView.listener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
Image.prototype._createImageSourceFromSrc = function() {
var imageView = this.nativeView;
if (imageView) {
imageView.setUri(null, 0, 0, false, true);
}
if (!imageView || !this.src) {
return;
}
var value = this.src;
var async = this.loadMode === ASYNC;
if (typeof value === "string" || value instanceof String) {
value = value.trim();
this.isLoading = true;
if (image_common_1.isDataURI(value)) {
_super.prototype._createImageSourceFromSrc.call(this);
} else if (image_common_1.isFileOrResourcePath(value)) {
if (value.indexOf(image_common_1.RESOURCE_PREFIX) === 0) {
imageView.setUri(value, this.decodeWidth, this.decodeHeight, this.useCache, async);
} else {
var fileName = value;
if (fileName.indexOf("~/") === 0) {
fileName = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, fileName.replace("~/", ""));
}
imageView.setUri(FILE_PREFIX + fileName, this.decodeWidth, this.decodeHeight, this.useCache, async);
}
} else {
imageView.setUri(value, this.decodeWidth, this.decodeHeight, this.useCache, true);
}
} else {
_super.prototype._createImageSourceFromSrc.call(this);
}
};
Image.prototype[image_common_1.stretchProperty.getDefault] = function() {
return "aspectFit";
};
Image.prototype[image_common_1.stretchProperty.setNative] = function(value) {
switch (value) {
case "aspectFit":
this.nativeView.setScaleType(android.widget.ImageView.ScaleType.FIT_CENTER);
break;

case "aspectFill":
this.nativeView.setScaleType(android.widget.ImageView.ScaleType.CENTER_CROP);
break;

case "fill":
this.nativeView.setScaleType(android.widget.ImageView.ScaleType.FIT_XY);
break;

case "none":
default:
this.nativeView.setScaleType(android.widget.ImageView.ScaleType.MATRIX);
break;
}
};
Image.prototype[image_common_1.tintColorProperty.getDefault] = function() {
return undefined;
};
Image.prototype[image_common_1.tintColorProperty.setNative] = function(value) {
if (value === undefined) {
this.nativeView.clearColorFilter();
} else {
this.nativeView.setColorFilter(value.android);
}
};
Image.prototype[image_common_1.imageSourceProperty.getDefault] = function() {
return undefined;
};
Image.prototype[image_common_1.imageSourceProperty.setNative] = function(value) {
var nativeView = this.nativeView;
if (value && value.android) {
var rotation = value.rotationAngle ? value.rotationAngle : 0;
nativeView.setRotationAngle(rotation);
nativeView.setImageBitmap(value.android);
} else {
nativeView.setRotationAngle(0);
nativeView.setImageBitmap(null);
}
};
Image.prototype[image_common_1.srcProperty.getDefault] = function() {
return undefined;
};
Image.prototype[image_common_1.srcProperty.setNative] = function(value) {
this._createImageSourceFromSrc();
};
return Image;
}(image_common_1.ImageBase);
exports.Image = Image;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
var image_asset_1 = __webpack_require__(199);
var image_source_1 = __webpack_require__(85);
exports.ImageSource = image_source_1.ImageSource;
exports.fromAsset = image_source_1.fromAsset;
exports.fromNativeSource = image_source_1.fromNativeSource;
exports.fromUrl = image_source_1.fromUrl;
var utils_1 = __webpack_require__(14);
exports.isDataURI = utils_1.isDataURI;
exports.isFileOrResourcePath = utils_1.isFileOrResourcePath;
exports.RESOURCE_PREFIX = utils_1.RESOURCE_PREFIX;
__export(__webpack_require__(12));
var ImageBase = function(_super) {
__extends(ImageBase, _super);
function ImageBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(ImageBase.prototype, "tintColor", {
get: function() {
return this.style.tintColor;
},
set: function(value) {
this.style.tintColor = value;
},
enumerable: true,
configurable: true
});
ImageBase.prototype._createImageSourceFromSrc = function() {
var _this = this;
var value = this.src;
var originalValue = value;
var sync = this.loadMode === "sync";
if (typeof value === "string" || value instanceof String) {
value = value.trim();
this.imageSource = null;
this["_url"] = value;
this.isLoading = true;
var source_1 = new image_source_1.ImageSource();
var imageLoaded = function() {
var currentValue = _this.src;
if (currentValue !== originalValue) {
return;
}
_this.imageSource = source_1;
_this.isLoading = false;
};
if (utils_1.isDataURI(value)) {
var base64Data = value.split(",")[1];
if (base64Data !== undefined) {
if (sync) {
source_1.loadFromBase64(base64Data);
imageLoaded();
} else {
source_1.fromBase64(base64Data).then(imageLoaded);
}
}
} else if (utils_1.isFileOrResourcePath(value)) {
if (value.indexOf(utils_1.RESOURCE_PREFIX) === 0) {
var resPath = value.substr(utils_1.RESOURCE_PREFIX.length);
if (sync) {
source_1.loadFromResource(resPath);
imageLoaded();
} else {
this.imageSource = null;
source_1.fromResource(resPath).then(imageLoaded);
}
} else {
if (sync) {
source_1.loadFromFile(value);
imageLoaded();
} else {
this.imageSource = null;
source_1.fromFile(value).then(imageLoaded);
}
}
} else {
this.imageSource = null;
image_source_1.fromUrl(value).then(function(r) {
if (_this["_url"] === value) {
_this.imageSource = r;
_this.isLoading = false;
}
});
}
} else if (value instanceof image_source_1.ImageSource) {
this.imageSource = value;
this.isLoading = false;
} else if (value instanceof image_asset_1.ImageAsset) {
image_source_1.fromAsset(value).then(function(result) {
_this.imageSource = result;
_this.isLoading = false;
});
} else {
this.imageSource = image_source_1.fromNativeSource(value);
this.isLoading = false;
}
};
return ImageBase;
}(view_1.View);
exports.ImageBase = ImageBase;
exports.imageSourceProperty = new view_1.Property({
name: "imageSource"
});
exports.imageSourceProperty.register(ImageBase);
exports.srcProperty = new view_1.Property({
name: "src"
});
exports.srcProperty.register(ImageBase);
exports.loadModeProperty = new view_1.Property({
name: "loadMode",
defaultValue: "sync"
});
exports.loadModeProperty.register(ImageBase);
exports.isLoadingProperty = new view_1.Property({
name: "isLoading",
defaultValue: false,
valueConverter: view_1.booleanConverter
});
exports.isLoadingProperty.register(ImageBase);
exports.stretchProperty = new view_1.Property({
name: "stretch",
defaultValue: "aspectFit",
affectsLayout: view_1.isIOS
});
exports.stretchProperty.register(ImageBase);
exports.tintColorProperty = new view_1.InheritedCssProperty({
name: "tintColor",
cssName: "tint-color",
equalityComparer: view_1.Color.equals,
valueConverter: function(value) {
return new view_1.Color(value);
}
});
exports.tintColorProperty.register(view_1.Style);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var platform = __webpack_require__(25);
var common = __webpack_require__(200);
global.moduleMerge(common, exports);
var ImageAsset = function(_super) {
__extends(ImageAsset, _super);
function ImageAsset(asset) {
var _this = _super.call(this) || this;
_this.android = asset;
return _this;
}
ImageAsset.prototype.getImageAsync = function(callback) {
var bitmapOptions = new android.graphics.BitmapFactory.Options();
bitmapOptions.inJustDecodeBounds = true;
var bitmap = android.graphics.BitmapFactory.decodeFile(this.android, bitmapOptions);
var sourceSize = {
width: bitmapOptions.outWidth,
height: bitmapOptions.outHeight
};
var requestedSize = common.getRequestedImageSize(sourceSize, this.options);
var sampleSize = calculateInSampleSize(bitmapOptions.outWidth, bitmapOptions.outHeight, requestedSize.width, requestedSize.height);
var finalBitmapOptions = new android.graphics.BitmapFactory.Options();
finalBitmapOptions.inSampleSize = sampleSize;
try {
bitmap = android.graphics.BitmapFactory.decodeFile(this.android, finalBitmapOptions);
callback(bitmap, null);
} catch (ex) {
callback(null, ex);
}
};
return ImageAsset;
}(common.ImageAsset);
exports.ImageAsset = ImageAsset;
var calculateInSampleSize = function(imageWidth, imageHeight, reqWidth, reqHeight) {
var sampleSize = 1;
var displayWidth = platform.screen.mainScreen.widthDIPs;
var displayHeigth = platform.screen.mainScreen.heightDIPs;
reqWidth = reqWidth > 0 && reqWidth < displayWidth ? reqWidth : displayWidth;
reqHeight = reqHeight > 0 && reqHeight < displayHeigth ? reqHeight : displayHeigth;
if (imageWidth > reqWidth && imageHeight > reqHeight) {
var halfWidth = imageWidth / 2;
var halfHeight = imageHeight / 2;
while (halfWidth / sampleSize > reqWidth && halfHeight / sampleSize > reqHeight) {
sampleSize *= 2;
}
}
return sampleSize;
};
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var observable = __webpack_require__(20);
var platform = __webpack_require__(25);
var ImageAsset = function(_super) {
__extends(ImageAsset, _super);
function ImageAsset() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(ImageAsset.prototype, "options", {
get: function() {
return this._options;
},
set: function(value) {
this._options = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageAsset.prototype, "ios", {
get: function() {
return this._ios;
},
set: function(value) {
this._ios = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageAsset.prototype, "android", {
get: function() {
return this._android;
},
set: function(value) {
this._android = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageAsset.prototype, "nativeImage", {
get: function() {
return this._nativeImage;
},
set: function(value) {
this._nativeImage = value;
},
enumerable: true,
configurable: true
});
ImageAsset.prototype.getImageAsync = function(callback) {};
return ImageAsset;
}(observable.Observable);
exports.ImageAsset = ImageAsset;
function getAspectSafeDimensions(sourceWidth, sourceHeight, reqWidth, reqHeight) {
var widthCoef = sourceWidth / reqWidth;
var heightCoef = sourceHeight / reqHeight;
var aspectCoef = widthCoef > heightCoef ? widthCoef : heightCoef;
return {
width: Math.floor(sourceWidth / aspectCoef),
height: Math.floor(sourceHeight / aspectCoef)
};
}
exports.getAspectSafeDimensions = getAspectSafeDimensions;
function getRequestedImageSize(src, options) {
var reqWidth = platform.screen.mainScreen.widthDIPs;
var reqHeight = platform.screen.mainScreen.heightDIPs;
if (options && options.width) {
reqWidth = options.width > 0 && options.width < reqWidth ? options.width : reqWidth;
}
if (options && options.height) {
reqHeight = options.height > 0 && options.height < reqHeight ? options.height : reqHeight;
}
if (options && options.keepAspectRatio) {
var safeAspectSize = getAspectSafeDimensions(src.width, src.height, reqWidth, reqHeight);
reqWidth = safeAspectSize.width;
reqHeight = safeAspectSize.height;
}
return {
width: reqWidth,
height: reqHeight
};
}
exports.getRequestedImageSize = getRequestedImageSize;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var absolute_layout_common_1 = __webpack_require__(202);
__export(__webpack_require__(202));
function makeNativeSetter(setter) {
return function(value) {
var nativeView = this.nativeView;
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();
if (lp instanceof org.nativescript.widgets.CommonLayoutParams) {
setter.call(this, lp, value);
nativeView.setLayoutParams(lp);
}
};
}
absolute_layout_common_1.View.prototype[absolute_layout_common_1.topProperty.setNative] = makeNativeSetter(function(lp, value) {
lp.top = absolute_layout_common_1.Length.toDevicePixels(value, 0);
});
absolute_layout_common_1.View.prototype[absolute_layout_common_1.leftProperty.setNative] = makeNativeSetter(function(lp, value) {
lp.left = absolute_layout_common_1.Length.toDevicePixels(value, 0);
});
var AbsoluteLayout = function(_super) {
__extends(AbsoluteLayout, _super);
function AbsoluteLayout() {
return _super !== null && _super.apply(this, arguments) || this;
}
AbsoluteLayout.prototype.createNativeView = function() {
return new org.nativescript.widgets.AbsoluteLayout(this._context);
};
return AbsoluteLayout;
}(absolute_layout_common_1.AbsoluteLayoutBase);
exports.AbsoluteLayout = AbsoluteLayout;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_1 = __webpack_require__(135);
__export(__webpack_require__(135));
layout_base_1.View.prototype.effectiveLeft = 0;
layout_base_1.View.prototype.effectiveTop = 0;
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
var AbsoluteLayoutBase = function(_super) {
__extends(AbsoluteLayoutBase, _super);
function AbsoluteLayoutBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
AbsoluteLayoutBase.getLeft = function(element) {
return validateArgs(element).left;
};
AbsoluteLayoutBase.setLeft = function(element, value) {
validateArgs(element).left = value;
};
AbsoluteLayoutBase.getTop = function(element) {
return validateArgs(element).top;
};
AbsoluteLayoutBase.setTop = function(element, value) {
validateArgs(element).top = value;
};
AbsoluteLayoutBase.prototype.onLeftChanged = function(view, oldValue, newValue) {};
AbsoluteLayoutBase.prototype.onTopChanged = function(view, oldValue, newValue) {};
return AbsoluteLayoutBase;
}(layout_base_1.LayoutBase);
exports.AbsoluteLayoutBase = AbsoluteLayoutBase;
exports.leftProperty = new layout_base_1.Property({
name: "left",
defaultValue: layout_base_1.zeroLength,
valueChanged: function(target, oldValue, newValue) {
target.effectiveLeft = layout_base_1.Length.toDevicePixels(newValue, 0);
var layout = target.parent;
if (layout instanceof AbsoluteLayoutBase) {
layout.onLeftChanged(target, oldValue, newValue);
}
},
valueConverter: function(v) {
return layout_base_1.Length.parse(v);
}
});
exports.leftProperty.register(layout_base_1.View);
exports.topProperty = new layout_base_1.Property({
name: "top",
defaultValue: layout_base_1.zeroLength,
valueChanged: function(target, oldValue, newValue) {
target.effectiveTop = layout_base_1.Length.toDevicePixels(newValue, 0);
var layout = target.parent;
if (layout instanceof AbsoluteLayoutBase) {
layout.onTopChanged(target, oldValue, newValue);
}
},
valueConverter: function(v) {
return layout_base_1.Length.parse(v);
}
});
exports.topProperty.register(layout_base_1.View);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var dock_layout_common_1 = __webpack_require__(204);
__export(__webpack_require__(204));
dock_layout_common_1.View.prototype[dock_layout_common_1.dockProperty.setNative] = function(value) {
var nativeView = this.nativeView;
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();
if (lp instanceof org.nativescript.widgets.CommonLayoutParams) {
switch (value) {
case "left":
lp.dock = org.nativescript.widgets.Dock.left;
break;

case "top":
lp.dock = org.nativescript.widgets.Dock.top;
break;

case "right":
lp.dock = org.nativescript.widgets.Dock.right;
break;

case "bottom":
lp.dock = org.nativescript.widgets.Dock.bottom;
break;

default:
throw new Error("Invalid value for dock property: " + value);
}
nativeView.setLayoutParams(lp);
}
};
var DockLayout = function(_super) {
__extends(DockLayout, _super);
function DockLayout() {
return _super !== null && _super.apply(this, arguments) || this;
}
DockLayout.prototype.createNativeView = function() {
return new org.nativescript.widgets.DockLayout(this._context);
};
DockLayout.prototype[dock_layout_common_1.stretchLastChildProperty.getDefault] = function() {
return true;
};
DockLayout.prototype[dock_layout_common_1.stretchLastChildProperty.setNative] = function(value) {
this.nativeView.setStretchLastChild(value);
};
return DockLayout;
}(dock_layout_common_1.DockLayoutBase);
exports.DockLayout = DockLayout;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_1 = __webpack_require__(135);
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
__export(__webpack_require__(135));
var DockLayoutBase = function(_super) {
__extends(DockLayoutBase, _super);
function DockLayoutBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
DockLayoutBase.getDock = function(element) {
return validateArgs(element).dock;
};
DockLayoutBase.setDock = function(element, value) {
validateArgs(element).dock = value;
};
DockLayoutBase.prototype.onDockChanged = function(view, oldValue, newValue) {};
return DockLayoutBase;
}(layout_base_1.LayoutBase);
exports.DockLayoutBase = DockLayoutBase;
var dockConverter = layout_base_1.makeParser(layout_base_1.makeValidator("left", "top", "right", "bottom"));
exports.dockProperty = new layout_base_1.Property({
name: "dock",
defaultValue: "left",
valueChanged: function(target, oldValue, newValue) {
if (target instanceof layout_base_1.View) {
var layout = target.parent;
if (layout instanceof DockLayoutBase) {
layout.onDockChanged(target, oldValue, newValue);
}
}
},
valueConverter: dockConverter
});
exports.dockProperty.register(layout_base_1.View);
exports.stretchLastChildProperty = new layout_base_1.Property({
name: "stretchLastChild",
defaultValue: true,
affectsLayout: layout_base_1.isIOS,
valueConverter: layout_base_1.booleanConverter
});
exports.stretchLastChildProperty.register(DockLayoutBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var stack_layout_common_1 = __webpack_require__(206);
__export(__webpack_require__(206));
var StackLayout = function(_super) {
__extends(StackLayout, _super);
function StackLayout() {
return _super !== null && _super.apply(this, arguments) || this;
}
StackLayout.prototype.createNativeView = function() {
return new org.nativescript.widgets.StackLayout(this._context);
};
StackLayout.prototype[stack_layout_common_1.orientationProperty.setNative] = function(value) {
this.nativeView.setOrientation(value === "vertical" ? org.nativescript.widgets.Orientation.vertical : org.nativescript.widgets.Orientation.horizontal);
};
return StackLayout;
}(stack_layout_common_1.StackLayoutBase);
exports.StackLayout = StackLayout;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_1 = __webpack_require__(135);
__export(__webpack_require__(135));
var StackLayoutBase = function(_super) {
__extends(StackLayoutBase, _super);
function StackLayoutBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return StackLayoutBase;
}(layout_base_1.LayoutBase);
exports.StackLayoutBase = StackLayoutBase;
var converter = layout_base_1.makeParser(layout_base_1.makeValidator("horizontal", "vertical"));
exports.orientationProperty = new layout_base_1.Property({
name: "orientation",
defaultValue: "vertical",
affectsLayout: layout_base_1.isIOS,
valueConverter: converter
});
exports.orientationProperty.register(StackLayoutBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var flexbox_layout_common_1 = __webpack_require__(208);
__export(__webpack_require__(208));
function makeNativeSetter(setter) {
return function(value) {
var nativeView = this.nativeView;
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.FlexboxLayout.LayoutParams();
if (lp instanceof org.nativescript.widgets.FlexboxLayout.LayoutParams) {
setter(lp, value);
nativeView.setLayoutParams(lp);
}
};
}
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.orderProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.order = value;
});
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.flexGrowProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.flexGrow = value;
});
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.flexShrinkProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.flexShrink = value;
});
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.flexWrapBeforeProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.wrapBefore = value;
});
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.alignSelfProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.alignSelf = alignSelfMap[value];
});
var flexDirectionMap = (_a = {}, _a[flexbox_layout_common_1.FlexDirection.ROW] = 0, 
_a[flexbox_layout_common_1.FlexDirection.ROW_REVERSE] = 1, _a[flexbox_layout_common_1.FlexDirection.COLUMN] = 2, 
_a[flexbox_layout_common_1.FlexDirection.COLUMN_REVERSE] = 3, _a);
var flexWrapMap = (_b = {}, _b[flexbox_layout_common_1.FlexWrap.NOWRAP] = 0, _b[flexbox_layout_common_1.FlexWrap.WRAP] = 1, 
_b[flexbox_layout_common_1.FlexWrap.WRAP_REVERSE] = 2, _b);
var justifyContentMap = (_c = {}, _c[flexbox_layout_common_1.JustifyContent.FLEX_START] = 0, 
_c[flexbox_layout_common_1.JustifyContent.FLEX_END] = 1, _c[flexbox_layout_common_1.JustifyContent.CENTER] = 2, 
_c[flexbox_layout_common_1.JustifyContent.SPACE_BETWEEN] = 3, _c[flexbox_layout_common_1.JustifyContent.SPACE_AROUND] = 4, 
_c);
var alignItemsMap = (_d = {}, _d[flexbox_layout_common_1.AlignItems.FLEX_START] = 0, 
_d[flexbox_layout_common_1.AlignItems.FLEX_END] = 1, _d[flexbox_layout_common_1.AlignItems.CENTER] = 2, 
_d[flexbox_layout_common_1.AlignItems.BASELINE] = 3, _d[flexbox_layout_common_1.AlignItems.STRETCH] = 4, 
_d);
var alignContentMap = (_e = {}, _e[flexbox_layout_common_1.AlignContent.FLEX_START] = 0, 
_e[flexbox_layout_common_1.AlignContent.FLEX_END] = 1, _e[flexbox_layout_common_1.AlignContent.CENTER] = 2, 
_e[flexbox_layout_common_1.AlignContent.SPACE_BETWEEN] = 3, _e[flexbox_layout_common_1.AlignContent.SPACE_AROUND] = 4, 
_e[flexbox_layout_common_1.AlignContent.STRETCH] = 5, _e);
var alignSelfMap = (_f = {}, _f[flexbox_layout_common_1.AlignSelf.AUTO] = -1, _f[flexbox_layout_common_1.AlignSelf.FLEX_START] = 0, 
_f[flexbox_layout_common_1.AlignSelf.FLEX_END] = 1, _f[flexbox_layout_common_1.AlignSelf.CENTER] = 2, 
_f[flexbox_layout_common_1.AlignSelf.BASELINE] = 3, _f[flexbox_layout_common_1.AlignSelf.STRETCH] = 4, 
_f);
var FlexboxLayout = function(_super) {
__extends(FlexboxLayout, _super);
function FlexboxLayout() {
return _super !== null && _super.apply(this, arguments) || this;
}
FlexboxLayout.prototype.createNativeView = function() {
return new org.nativescript.widgets.FlexboxLayout(this._context);
};
FlexboxLayout.prototype.disposeNativeView = function() {
this.nativeView.invalidateOrdersCache();
_super.prototype.disposeNativeView.call(this);
};
FlexboxLayout.prototype[flexbox_layout_common_1.flexDirectionProperty.getDefault] = function() {
return flexbox_layout_common_1.flexDirectionProperty.defaultValue;
};
FlexboxLayout.prototype[flexbox_layout_common_1.flexDirectionProperty.setNative] = function(flexDirection) {
this.nativeView.setFlexDirection(flexDirectionMap[flexDirection]);
};
FlexboxLayout.prototype[flexbox_layout_common_1.flexWrapProperty.getDefault] = function() {
return flexbox_layout_common_1.flexWrapProperty.defaultValue;
};
FlexboxLayout.prototype[flexbox_layout_common_1.flexWrapProperty.setNative] = function(flexWrap) {
this.nativeView.setFlexWrap(flexWrapMap[flexWrap]);
};
FlexboxLayout.prototype[flexbox_layout_common_1.justifyContentProperty.getDefault] = function() {
return flexbox_layout_common_1.justifyContentProperty.defaultValue;
};
FlexboxLayout.prototype[flexbox_layout_common_1.justifyContentProperty.setNative] = function(justifyContent) {
this.nativeView.setJustifyContent(justifyContentMap[justifyContent]);
};
FlexboxLayout.prototype[flexbox_layout_common_1.alignItemsProperty.getDefault] = function() {
return flexbox_layout_common_1.alignItemsProperty.defaultValue;
};
FlexboxLayout.prototype[flexbox_layout_common_1.alignItemsProperty.setNative] = function(alignItems) {
this.nativeView.setAlignItems(alignItemsMap[alignItems]);
};
FlexboxLayout.prototype[flexbox_layout_common_1.alignContentProperty.getDefault] = function() {
return flexbox_layout_common_1.alignContentProperty.defaultValue;
};
FlexboxLayout.prototype[flexbox_layout_common_1.alignContentProperty.setNative] = function(alignContent) {
this.nativeView.setAlignContent(alignContentMap[alignContent]);
};
FlexboxLayout.prototype._updateNativeLayoutParams = function(child) {
_super.prototype._updateNativeLayoutParams.call(this, child);
var lp = child.nativeView.getLayoutParams();
lp.order = child.order;
lp.flexGrow = child.flexGrow;
lp.flexShrink = child.flexShrink;
lp.wrapBefore = child.flexWrapBefore;
lp.alignSelf = alignSelfMap[child.alignSelf];
child.nativeView.setLayoutParams(lp);
};
FlexboxLayout.prototype._setChildMinWidthNative = function(child) {
child._setMinWidthNative(0);
var lp = child.nativeView.getLayoutParams();
if (lp instanceof org.nativescript.widgets.FlexboxLayout.LayoutParams) {
lp.minWidth = flexbox_layout_common_1.Length.toDevicePixels(child.minWidth, 0);
child.nativeView.setLayoutParams(lp);
}
};
FlexboxLayout.prototype._setChildMinHeightNative = function(child) {
child._setMinHeightNative(0);
var lp = child.nativeView.getLayoutParams();
if (lp instanceof org.nativescript.widgets.FlexboxLayout.LayoutParams) {
lp.minHeight = flexbox_layout_common_1.Length.toDevicePixels(child.minHeight, 0);
child.nativeView.setLayoutParams(lp);
}
};
return FlexboxLayout;
}(flexbox_layout_common_1.FlexboxLayoutBase);
exports.FlexboxLayout = FlexboxLayout;
var _a, _b, _c, _d, _e, _f;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_1 = __webpack_require__(135);
__export(__webpack_require__(135));
exports.ORDER_DEFAULT = 1;
exports.FLEX_GROW_DEFAULT = 0;
exports.FLEX_SHRINK_DEFAULT = 1;
var FlexDirection;
(function(FlexDirection) {
FlexDirection.ROW = "row";
FlexDirection.ROW_REVERSE = "row-reverse";
FlexDirection.COLUMN = "column";
FlexDirection.COLUMN_REVERSE = "column-reverse";
FlexDirection.isValid = layout_base_1.makeValidator(FlexDirection.ROW, FlexDirection.ROW_REVERSE, FlexDirection.COLUMN, FlexDirection.COLUMN_REVERSE);
FlexDirection.parse = layout_base_1.makeParser(FlexDirection.isValid);
})(FlexDirection = exports.FlexDirection || (exports.FlexDirection = {}));
var FlexWrap;
(function(FlexWrap) {
FlexWrap.NOWRAP = "nowrap";
FlexWrap.WRAP = "wrap";
FlexWrap.WRAP_REVERSE = "wrap-reverse";
FlexWrap.isValid = layout_base_1.makeValidator(FlexWrap.NOWRAP, FlexWrap.WRAP, FlexWrap.WRAP_REVERSE);
FlexWrap.parse = layout_base_1.makeParser(FlexWrap.isValid);
})(FlexWrap = exports.FlexWrap || (exports.FlexWrap = {}));
var JustifyContent;
(function(JustifyContent) {
JustifyContent.FLEX_START = "flex-start";
JustifyContent.FLEX_END = "flex-end";
JustifyContent.CENTER = "center";
JustifyContent.SPACE_BETWEEN = "space-between";
JustifyContent.SPACE_AROUND = "space-around";
JustifyContent.isValid = layout_base_1.makeValidator(JustifyContent.FLEX_START, JustifyContent.FLEX_END, JustifyContent.CENTER, JustifyContent.SPACE_BETWEEN, JustifyContent.SPACE_AROUND);
JustifyContent.parse = layout_base_1.makeParser(JustifyContent.isValid);
})(JustifyContent = exports.JustifyContent || (exports.JustifyContent = {}));
var FlexBasisPercent;
(function(FlexBasisPercent) {
FlexBasisPercent.DEFAULT = -1;
})(FlexBasisPercent = exports.FlexBasisPercent || (exports.FlexBasisPercent = {}));
var AlignItems;
(function(AlignItems) {
AlignItems.FLEX_START = "flex-start";
AlignItems.FLEX_END = "flex-end";
AlignItems.CENTER = "center";
AlignItems.BASELINE = "baseline";
AlignItems.STRETCH = "stretch";
AlignItems.isValid = layout_base_1.makeValidator(AlignItems.FLEX_START, AlignItems.FLEX_END, AlignItems.CENTER, AlignItems.BASELINE, AlignItems.STRETCH);
AlignItems.parse = layout_base_1.makeParser(AlignItems.isValid);
})(AlignItems = exports.AlignItems || (exports.AlignItems = {}));
var AlignContent;
(function(AlignContent) {
AlignContent.FLEX_START = "flex-start";
AlignContent.FLEX_END = "flex-end";
AlignContent.CENTER = "center";
AlignContent.SPACE_BETWEEN = "space-between";
AlignContent.SPACE_AROUND = "space-around";
AlignContent.STRETCH = "stretch";
AlignContent.isValid = layout_base_1.makeValidator(AlignContent.FLEX_START, AlignContent.FLEX_END, AlignContent.CENTER, AlignContent.SPACE_BETWEEN, AlignContent.SPACE_AROUND, AlignContent.STRETCH);
AlignContent.parse = layout_base_1.makeParser(AlignContent.isValid);
})(AlignContent = exports.AlignContent || (exports.AlignContent = {}));
var Order;
(function(Order) {
function isValid(value) {
return isFinite(parseInt(value));
}
Order.isValid = isValid;
Order.parse = parseInt;
})(Order = exports.Order || (exports.Order = {}));
var FlexGrow;
(function(FlexGrow) {
function isValid(value) {
var parsed = parseInt(value);
return isFinite(parsed) && value >= 0;
}
FlexGrow.isValid = isValid;
FlexGrow.parse = parseFloat;
})(FlexGrow = exports.FlexGrow || (exports.FlexGrow = {}));
var FlexShrink;
(function(FlexShrink) {
function isValid(value) {
var parsed = parseInt(value);
return isFinite(parsed) && value >= 0;
}
FlexShrink.isValid = isValid;
FlexShrink.parse = parseFloat;
})(FlexShrink = exports.FlexShrink || (exports.FlexShrink = {}));
var FlexWrapBefore;
(function(FlexWrapBefore) {
function isValid(value) {
if (typeof value === "boolean") {
return true;
}
if (typeof value === "string") {
var str = value.trim().toLowerCase();
return str === "true" || str === "false";
}
return false;
}
FlexWrapBefore.isValid = isValid;
function parse(value) {
return value && value.toString().trim().toLowerCase() === "true";
}
FlexWrapBefore.parse = parse;
})(FlexWrapBefore = exports.FlexWrapBefore || (exports.FlexWrapBefore = {}));
var AlignSelf;
(function(AlignSelf) {
AlignSelf.AUTO = "auto";
AlignSelf.FLEX_START = "flex-start";
AlignSelf.FLEX_END = "flex-end";
AlignSelf.CENTER = "center";
AlignSelf.BASELINE = "baseline";
AlignSelf.STRETCH = "stretch";
AlignSelf.isValid = layout_base_1.makeValidator(AlignSelf.AUTO, AlignSelf.FLEX_START, AlignSelf.FLEX_END, AlignSelf.CENTER, AlignSelf.BASELINE, AlignSelf.STRETCH);
AlignSelf.parse = layout_base_1.makeParser(AlignSelf.isValid);
})(AlignSelf = exports.AlignSelf || (exports.AlignSelf = {}));
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
var FlexboxLayoutBase = function(_super) {
__extends(FlexboxLayoutBase, _super);
function FlexboxLayoutBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(FlexboxLayoutBase.prototype, "flexDirection", {
get: function() {
return this.style.flexDirection;
},
set: function(value) {
this.style.flexDirection = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayoutBase.prototype, "flexWrap", {
get: function() {
return this.style.flexWrap;
},
set: function(value) {
this.style.flexWrap = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayoutBase.prototype, "justifyContent", {
get: function() {
return this.style.justifyContent;
},
set: function(value) {
this.style.justifyContent = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayoutBase.prototype, "alignItems", {
get: function() {
return this.style.alignItems;
},
set: function(value) {
this.style.alignItems = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayoutBase.prototype, "alignContent", {
get: function() {
return this.style.alignContent;
},
set: function(value) {
this.style.alignContent = value;
},
enumerable: true,
configurable: true
});
FlexboxLayoutBase.setOrder = function(view, order) {
validateArgs(view).style.order = order;
};
FlexboxLayoutBase.getOrder = function(view) {
return validateArgs(view).style.order;
};
FlexboxLayoutBase.setFlexGrow = function(view, grow) {
validateArgs(view).style.flexGrow = grow;
};
FlexboxLayoutBase.getFlexGrow = function(view) {
return validateArgs(view).style.flexGrow;
};
FlexboxLayoutBase.setFlexShrink = function(view, shrink) {
validateArgs(view).style.flexShrink = shrink;
};
FlexboxLayoutBase.getFlexShrink = function(view) {
return validateArgs(view).style.flexShrink;
};
FlexboxLayoutBase.setAlignSelf = function(view, align) {
validateArgs(view).style.alignSelf = align;
};
FlexboxLayoutBase.getAlignSelf = function(view) {
return validateArgs(view).style.alignSelf;
};
FlexboxLayoutBase.setFlexWrapBefore = function(view, wrap) {
validateArgs(view).style.flexWrapBefore = wrap;
};
FlexboxLayoutBase.getFlexWrapBefore = function(view) {
return validateArgs(view).style.flexWrapBefore;
};
return FlexboxLayoutBase;
}(layout_base_1.LayoutBase);
exports.FlexboxLayoutBase = FlexboxLayoutBase;
exports.flexDirectionProperty = new layout_base_1.CssProperty({
name: "flexDirection",
cssName: "flex-direction",
defaultValue: FlexDirection.ROW,
affectsLayout: layout_base_1.isIOS,
valueConverter: FlexDirection.parse
});
exports.flexDirectionProperty.register(layout_base_1.Style);
exports.flexWrapProperty = new layout_base_1.CssProperty({
name: "flexWrap",
cssName: "flex-wrap",
defaultValue: "nowrap",
affectsLayout: layout_base_1.isIOS,
valueConverter: FlexWrap.parse
});
exports.flexWrapProperty.register(layout_base_1.Style);
exports.justifyContentProperty = new layout_base_1.CssProperty({
name: "justifyContent",
cssName: "justify-content",
defaultValue: JustifyContent.FLEX_START,
affectsLayout: layout_base_1.isIOS,
valueConverter: JustifyContent.parse
});
exports.justifyContentProperty.register(layout_base_1.Style);
exports.alignItemsProperty = new layout_base_1.CssProperty({
name: "alignItems",
cssName: "align-items",
defaultValue: AlignItems.STRETCH,
affectsLayout: layout_base_1.isIOS,
valueConverter: AlignItems.parse
});
exports.alignItemsProperty.register(layout_base_1.Style);
exports.alignContentProperty = new layout_base_1.CssProperty({
name: "alignContent",
cssName: "align-content",
defaultValue: AlignContent.STRETCH,
affectsLayout: layout_base_1.isIOS,
valueConverter: AlignContent.parse
});
exports.alignContentProperty.register(layout_base_1.Style);
exports.orderProperty = new layout_base_1.CssProperty({
name: "order",
cssName: "order",
defaultValue: exports.ORDER_DEFAULT,
valueConverter: Order.parse
});
exports.orderProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "order", {
get: function() {
return this.style.order;
},
set: function(value) {
this.style.order = value;
},
enumerable: true,
configurable: true
});
exports.flexGrowProperty = new layout_base_1.CssProperty({
name: "flexGrow",
cssName: "flex-grow",
defaultValue: exports.FLEX_GROW_DEFAULT,
valueConverter: FlexGrow.parse
});
exports.flexGrowProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "flexGrow", {
get: function() {
return this.style.flexGrow;
},
set: function(value) {
this.style.flexGrow = value;
},
enumerable: true,
configurable: true
});
exports.flexShrinkProperty = new layout_base_1.CssProperty({
name: "flexShrink",
cssName: "flex-shrink",
defaultValue: exports.FLEX_SHRINK_DEFAULT,
valueConverter: FlexShrink.parse
});
exports.flexShrinkProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "flexShrink", {
get: function() {
return this.style.flexShrink;
},
set: function(value) {
this.style.flexShrink = value;
},
enumerable: true,
configurable: true
});
exports.flexWrapBeforeProperty = new layout_base_1.CssProperty({
name: "flexWrapBefore",
cssName: "flex-wrap-before",
defaultValue: false,
valueConverter: FlexWrapBefore.parse
});
exports.flexWrapBeforeProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "flexWrapBefore", {
get: function() {
return this.style.flexWrapBefore;
},
set: function(value) {
this.style.flexWrapBefore = value;
},
enumerable: true,
configurable: true
});
exports.alignSelfProperty = new layout_base_1.CssProperty({
name: "alignSelf",
cssName: "align-self",
defaultValue: AlignSelf.AUTO,
valueConverter: AlignSelf.parse
});
exports.alignSelfProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "alignSelf", {
get: function() {
return this.style.alignSelf;
},
set: function(value) {
this.style.alignSelf = value;
},
enumerable: true,
configurable: true
});
var flexFlowProperty = new layout_base_1.ShorthandProperty({
name: "flex-flow",
cssName: "flex-flow",
getter: function() {
return this.flexDirection + " " + this.flexWrap;
},
converter: function(value) {
var properties = [];
if (value === layout_base_1.unsetValue) {
properties.push([ exports.flexDirectionProperty, value ]);
properties.push([ exports.flexWrapProperty, value ]);
} else {
var trimmed = value && value.trim();
if (trimmed) {
var values = trimmed.split(/\s+/);
if (values.length >= 1 && FlexDirection.isValid(values[0])) {
properties.push([ exports.flexDirectionProperty, FlexDirection.parse(values[0]) ]);
}
if (value.length >= 2 && FlexWrap.isValid(values[1])) {
properties.push([ exports.flexWrapProperty, FlexWrap.parse(values[1]) ]);
}
}
}
return properties;
}
});
flexFlowProperty.register(layout_base_1.Style);
var flexProperty = new layout_base_1.ShorthandProperty({
name: "flex",
cssName: "flex",
getter: function() {
return this.flexGrow + " " + this.flexShrink;
},
converter: function(value) {
var properties = [];
if (value === layout_base_1.unsetValue) {
properties.push([ exports.flexGrowProperty, value ]);
properties.push([ exports.flexShrinkProperty, value ]);
} else {
var trimmed = value && value.trim();
if (trimmed) {
var values = trimmed.split(/\s+/);
if (values.length === 1) {
switch (values[0]) {
case "inital":
properties.push([ exports.flexGrowProperty, 0 ]);
properties.push([ exports.flexShrinkProperty, 1 ]);
break;

case "auto":
properties.push([ exports.flexGrowProperty, 1 ]);
properties.push([ exports.flexShrinkProperty, 1 ]);
break;

case "none":
properties.push([ exports.flexGrowProperty, 0 ]);
properties.push([ exports.flexShrinkProperty, 0 ]);
break;

default:
if (FlexGrow.isValid(values[0])) {
properties.push([ exports.flexGrowProperty, FlexGrow.parse(values[0]) ]);
properties.push([ exports.flexShrinkProperty, 1 ]);
}
}
}
if (values.length >= 2) {
if (FlexGrow.isValid(values[0]) && FlexShrink.isValid(values[1])) {
properties.push([ exports.flexGrowProperty, FlexGrow.parse(values[0]) ]);
properties.push([ exports.flexShrinkProperty, FlexShrink.parse(values[1]) ]);
}
}
}
}
return properties;
}
});
flexProperty.register(layout_base_1.Style);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var list_picker_common_1 = __webpack_require__(210);
__export(__webpack_require__(210));
var Formatter;
var ValueChangeListener;
function initializeNativeClasses() {
if (Formatter) {
return;
}
var FormatterImpl = function(_super) {
__extends(FormatterImpl, _super);
function FormatterImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
FormatterImpl.prototype.format = function(index) {
return this.owner._getItemAsString(index);
};
return FormatterImpl;
}(java.lang.Object);
FormatterImpl = __decorate([ Interfaces([ android.widget.NumberPicker.Formatter ]) ], FormatterImpl);
var ValueChangeListenerImpl = function(_super) {
__extends(ValueChangeListenerImpl, _super);
function ValueChangeListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
ValueChangeListenerImpl.prototype.onValueChange = function(picker, oldValue, newValue) {
list_picker_common_1.selectedIndexProperty.nativeValueChange(this.owner, newValue);
};
return ValueChangeListenerImpl;
}(java.lang.Object);
ValueChangeListenerImpl = __decorate([ Interfaces([ android.widget.NumberPicker.OnValueChangeListener ]) ], ValueChangeListenerImpl);
Formatter = FormatterImpl;
ValueChangeListener = ValueChangeListenerImpl;
}
function getEditText(picker) {
for (var i = 0, count = picker.getChildCount(); i < count; i++) {
var child = picker.getChildAt(i);
if (child instanceof android.widget.EditText) {
return child;
}
}
return null;
}
var selectorWheelPaintField;
function getSelectorWheelPaint(picker) {
if (!selectorWheelPaintField) {
selectorWheelPaintField = picker.getClass().getDeclaredField("mSelectorWheelPaint");
selectorWheelPaintField.setAccessible(true);
}
return selectorWheelPaintField.get(picker);
}
var ListPicker = function(_super) {
__extends(ListPicker, _super);
function ListPicker() {
return _super !== null && _super.apply(this, arguments) || this;
}
ListPicker.prototype.createNativeView = function() {
initializeNativeClasses();
var picker = new android.widget.NumberPicker(this._context);
picker.setDescendantFocusability(android.widget.NumberPicker.FOCUS_BLOCK_DESCENDANTS);
picker.setMinValue(0);
picker.setMaxValue(0);
picker.setValue(0);
var formatter = new Formatter(this);
picker.setFormatter(formatter);
picker.formatter = formatter;
var valueChangedListener = new ValueChangeListener(this);
picker.setOnValueChangedListener(valueChangedListener);
picker.valueChangedListener = valueChangedListener;
var editText = getEditText(picker);
if (editText) {
picker.editText = editText;
}
picker.setWrapSelectorWheel(false);
return picker;
};
ListPicker.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var nativeView = this.nativeView;
this._selectorWheelPaint = getSelectorWheelPaint(nativeView);
nativeView.formatter.owner = this;
nativeView.valueChangedListener.owner = this;
var editText = nativeView.editText;
if (editText) {
editText.setFilters([]);
editText.setText(" ", android.widget.TextView.BufferType.NORMAL);
}
};
ListPicker.prototype.disposeNativeView = function() {
var nativeView = this.nativeView;
nativeView.formatter.owner = null;
nativeView.valueChangedListener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
ListPicker.prototype._fixNumberPickerRendering = function() {
var nativeView = this.nativeView;
nativeView.setFormatter(null);
nativeView.setFormatter(nativeView.formatter);
var editText = nativeView.editText;
if (editText) {
editText.setFilters([]);
editText.invalidate();
}
nativeView.invalidate();
};
ListPicker.prototype[list_picker_common_1.selectedIndexProperty.getDefault] = function() {
return -1;
};
ListPicker.prototype[list_picker_common_1.selectedIndexProperty.setNative] = function(value) {
if (value >= 0) {
this.nativeView.setValue(value);
}
};
ListPicker.prototype[list_picker_common_1.itemsProperty.getDefault] = function() {
return null;
};
ListPicker.prototype[list_picker_common_1.itemsProperty.setNative] = function(value) {
var maxValue = value && value.length > 0 ? value.length - 1 : 0;
this.nativeView.setMaxValue(maxValue);
this._fixNumberPickerRendering();
list_picker_common_1.selectedIndexProperty.coerce(this);
};
ListPicker.prototype[list_picker_common_1.colorProperty.getDefault] = function() {
var editText = this.nativeView.editText;
return {
wheelColor: this._selectorWheelPaint.getColor(),
textColor: editText ? editText.getTextColors().getDefaultColor() : -1
};
};
ListPicker.prototype[list_picker_common_1.colorProperty.setNative] = function(value) {
var color;
var wheelColor;
if (value instanceof list_picker_common_1.Color) {
color = wheelColor = value.android;
} else {
color = value.textColor;
wheelColor = value.wheelColor;
}
this._selectorWheelPaint.setColor(wheelColor);
var editText = this.nativeView.editText;
if (editText) {
editText.setTextColor(color);
}
};
return ListPicker;
}(list_picker_common_1.ListPickerBase);
exports.ListPicker = ListPicker;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var ListPickerBase = function(_super) {
__extends(ListPickerBase, _super);
function ListPickerBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
ListPickerBase.prototype._getItemAsString = function(index) {
var items = this.items;
if (!items) {
return " ";
}
var item = this.isItemsSource ? this.items.getItem(index) : this.items[index];
return item === undefined || item === null ? index + "" : item + "";
};
return ListPickerBase;
}(view_1.View);
exports.ListPickerBase = ListPickerBase;
exports.selectedIndexProperty = new view_1.CoercibleProperty({
name: "selectedIndex",
defaultValue: -1,
valueConverter: function(v) {
return parseInt(v);
},
coerceValue: function(target, value) {
var items = target.items;
if (items) {
var max = items.length - 1;
if (value < 0) {
value = 0;
}
if (value > max) {
value = max;
}
} else {
value = -1;
}
return value;
}
});
exports.selectedIndexProperty.register(ListPickerBase);
exports.itemsProperty = new view_1.Property({
name: "items",
valueChanged: function(target, oldValue, newValue) {
var getItem = newValue && newValue.getItem;
target.isItemsSource = typeof getItem === "function";
}
});
exports.itemsProperty.register(ListPickerBase);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
var Placeholder = function(_super) {
__extends(Placeholder, _super);
function Placeholder() {
return _super !== null && _super.apply(this, arguments) || this;
}
Placeholder.prototype.createNativeView = function() {
var args = {
eventName: Placeholder.creatingViewEvent,
object: this,
view: undefined,
context: this._context
};
this.notify(args);
return args.view;
};
return Placeholder;
}(view_1.View);
Placeholder.creatingViewEvent = "creatingView";
exports.Placeholder = Placeholder;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var progress_common_1 = __webpack_require__(213);
__export(__webpack_require__(213));
var R_ATTR_PROGRESS_BAR_STYLE_HORIZONTAL = 16842872;
var Progress = function(_super) {
__extends(Progress, _super);
function Progress() {
return _super !== null && _super.apply(this, arguments) || this;
}
Progress.prototype.createNativeView = function() {
return new android.widget.ProgressBar(this._context, null, R_ATTR_PROGRESS_BAR_STYLE_HORIZONTAL);
};
Progress.prototype[progress_common_1.valueProperty.getDefault] = function() {
return 0;
};
Progress.prototype[progress_common_1.valueProperty.setNative] = function(value) {
this.nativeView.setProgress(value);
};
Progress.prototype[progress_common_1.maxValueProperty.getDefault] = function() {
return 100;
};
Progress.prototype[progress_common_1.maxValueProperty.setNative] = function(value) {
this.nativeView.setMax(value);
};
Progress.prototype[progress_common_1.colorProperty.getDefault] = function() {
return null;
};
Progress.prototype[progress_common_1.colorProperty.setNative] = function(value) {
var progressDrawable = this.nativeView.getProgressDrawable();
if (!progressDrawable) {
return;
}
if (value instanceof progress_common_1.Color) {
progressDrawable.setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
} else {
progressDrawable.clearColorFilter();
}
};
Progress.prototype[progress_common_1.backgroundColorProperty.getDefault] = function() {
return null;
};
Progress.prototype[progress_common_1.backgroundColorProperty.setNative] = function(value) {
var progressDrawable = this.nativeView.getProgressDrawable();
if (!progressDrawable) {
return;
}
if (progressDrawable instanceof android.graphics.drawable.LayerDrawable && progressDrawable.getNumberOfLayers() > 0) {
var backgroundDrawable = progressDrawable.getDrawable(0);
if (backgroundDrawable) {
if (value instanceof progress_common_1.Color) {
backgroundDrawable.setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
} else {
backgroundDrawable.clearColorFilter();
}
}
}
};
Progress.prototype[progress_common_1.backgroundInternalProperty.getDefault] = function() {
return null;
};
Progress.prototype[progress_common_1.backgroundInternalProperty.setNative] = function(value) {};
return Progress;
}(progress_common_1.ProgressBase);
exports.Progress = Progress;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var ProgressBase = function(_super) {
__extends(ProgressBase, _super);
function ProgressBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return ProgressBase;
}(view_1.View);
exports.ProgressBase = ProgressBase;
exports.valueProperty = new view_1.CoercibleProperty({
name: "value",
defaultValue: 0,
coerceValue: function(t, v) {
return v < 0 ? 0 : Math.min(v, t.maxValue);
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.valueProperty.register(ProgressBase);
exports.maxValueProperty = new view_1.Property({
name: "maxValue",
defaultValue: 100,
valueChanged: function(target, oldValue, newValue) {
exports.valueProperty.coerce(target);
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.maxValueProperty.register(ProgressBase);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_1 = __webpack_require__(135);
var ProxyViewContainer = function(_super) {
__extends(ProxyViewContainer, _super);
function ProxyViewContainer() {
var _this = _super.call(this) || this;
_this.nativeView = undefined;
return _this;
}
Object.defineProperty(ProxyViewContainer.prototype, "ios", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyViewContainer.prototype, "android", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyViewContainer.prototype, "isLayoutRequested", {
get: function() {
return false;
},
enumerable: true,
configurable: true
});
ProxyViewContainer.prototype.createNativeView = function() {
return undefined;
};
ProxyViewContainer.prototype._getNativeViewsCount = function() {
var result = 0;
this.eachChildView(function(cv) {
result += cv._getNativeViewsCount();
return true;
});
return result;
};
ProxyViewContainer.prototype._eachLayoutView = function(callback) {
this.eachChildView(function(cv) {
if (!cv.isCollapsed) {
cv._eachLayoutView(callback);
}
return true;
});
};
ProxyViewContainer.prototype._addViewToNativeVisualTree = function(child, atIndex) {
if (layout_base_1.traceEnabled()) {
layout_base_1.traceWrite("ViewContainer._addViewToNativeVisualTree for a child " + child + " ViewContainer.parent: " + this.parent, layout_base_1.traceCategories.ViewHierarchy);
}
_super.prototype._addViewToNativeVisualTree.call(this, child);
var parent = this.parent;
if (parent instanceof layout_base_1.View) {
var baseIndex = 0;
var insideIndex = 0;
if (parent instanceof layout_base_1.LayoutBase) {
baseIndex = parent._childIndexToNativeChildIndex(parent.getChildIndex(this));
}
if (atIndex !== undefined) {
insideIndex = this._childIndexToNativeChildIndex(atIndex);
} else {
insideIndex = this._getNativeViewsCount();
}
if (layout_base_1.traceEnabled()) {
layout_base_1.traceWrite("ProxyViewContainer._addViewToNativeVisualTree at: " + atIndex + " base: " + baseIndex + " additional: " + insideIndex, layout_base_1.traceCategories.ViewHierarchy);
}
return parent._addViewToNativeVisualTree(child, baseIndex + insideIndex);
}
return false;
};
ProxyViewContainer.prototype._removeViewFromNativeVisualTree = function(child) {
if (layout_base_1.traceEnabled()) {
layout_base_1.traceWrite("ProxyViewContainer._removeViewFromNativeVisualTree for a child " + child + " ViewContainer.parent: " + this.parent, layout_base_1.traceCategories.ViewHierarchy);
}
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
var parent = this.parent;
if (parent instanceof layout_base_1.View) {
return parent._removeViewFromNativeVisualTree(child);
}
};
ProxyViewContainer.prototype._registerLayoutChild = function(child) {
var parent = this.parent;
if (parent instanceof layout_base_1.LayoutBase) {
parent._registerLayoutChild(child);
}
};
ProxyViewContainer.prototype._unregisterLayoutChild = function(child) {
var parent = this.parent;
if (parent instanceof layout_base_1.LayoutBase) {
parent._unregisterLayoutChild(child);
}
};
ProxyViewContainer.prototype._parentChanged = function(oldParent) {
_super.prototype._parentChanged.call(this, oldParent);
var addingToParent = this.parent && !oldParent;
var newLayout = this.parent;
var oldLayout = oldParent;
if (addingToParent && newLayout instanceof layout_base_1.LayoutBase) {
this.eachChildView(function(child) {
newLayout._registerLayoutChild(child);
return true;
});
} else if (oldLayout instanceof layout_base_1.LayoutBase) {
this.eachChildView(function(child) {
oldLayout._unregisterLayoutChild(child);
return true;
});
}
};
return ProxyViewContainer;
}(layout_base_1.LayoutBase);
exports.ProxyViewContainer = ProxyViewContainer;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var label_1 = __webpack_require__(80);
var layout_base_1 = __webpack_require__(135);
var stack_layout_1 = __webpack_require__(205);
var observable_array_1 = __webpack_require__(75);
var weak_event_listener_1 = __webpack_require__(40);
var builder_1 = __webpack_require__(59);
__export(__webpack_require__(135));
var knownTemplates;
(function(knownTemplates) {
knownTemplates.itemTemplate = "itemTemplate";
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));
var Repeater = function(_super) {
__extends(Repeater, _super);
function Repeater() {
var _this = _super.call(this) || this;
_this._isDirty = false;
_this.itemsLayout = new stack_layout_1.StackLayout();
return _this;
}
Repeater.prototype.onLoaded = function() {
if (this._isDirty) {
this.refresh();
}
_super.prototype.onLoaded.call(this);
};
Repeater.prototype._requestRefresh = function() {
this._isDirty = true;
if (this.isLoaded) {
this.refresh();
}
};
Repeater.prototype.refresh = function() {
if (this.itemsLayout) {
this.itemsLayout.removeChildren();
}
if (!this.items) {
return;
}
var length = this.items.length;
for (var i = 0; i < length; i++) {
var viewToAdd = this.itemTemplate ? builder_1.parse(this.itemTemplate, this) : this._getDefaultItemContent(i);
var dataItem = this._getDataItem(i);
viewToAdd.bindingContext = dataItem;
this.itemsLayout.addChild(viewToAdd);
}
this._isDirty = false;
};
Repeater.prototype._onItemsChanged = function(data) {
this._requestRefresh();
};
Repeater.prototype._getDefaultItemContent = function(index) {
var lbl = new label_1.Label();
lbl.bind({
targetProperty: "text",
sourceProperty: "$value"
});
return lbl;
};
Repeater.prototype._getDataItem = function(index) {
var items = this.items;
return items.getItem ? items.getItem(index) : this.items[index];
};
Object.defineProperty(Repeater.prototype, "_childrenCount", {
get: function() {
var count = 0;
if (this.itemsLayout) {
count++;
}
return count;
},
enumerable: true,
configurable: true
});
Repeater.prototype.eachChildView = function(callback) {
if (this.itemsLayout) {
callback(this.itemsLayout);
}
};
Repeater.prototype.onLayout = function(left, top, right, bottom) {
layout_base_1.View.layoutChild(this, this.itemsLayout, 0, 0, right - left, bottom - top);
};
Repeater.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var result = layout_base_1.View.measureChild(this, this.itemsLayout, widthMeasureSpec, heightMeasureSpec);
var width = layout_base_1.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = layout_base_1.layout.getMeasureSpecMode(widthMeasureSpec);
var height = layout_base_1.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = layout_base_1.layout.getMeasureSpecMode(heightMeasureSpec);
var widthAndState = layout_base_1.View.resolveSizeAndState(result.measuredWidth, width, widthMode, 0);
var heightAndState = layout_base_1.View.resolveSizeAndState(result.measuredHeight, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
return Repeater;
}(layout_base_1.CustomLayoutView);
exports.Repeater = Repeater;
exports.itemTemplateProperty = new layout_base_1.Property({
name: "itemTemplate",
affectsLayout: true,
valueChanged: function(target) {
target._requestRefresh();
}
});
exports.itemTemplateProperty.register(Repeater);
exports.itemsProperty = new layout_base_1.Property({
name: "items",
affectsLayout: true,
valueChanged: function(target, oldValue, newValue) {
if (oldValue instanceof observable_array_1.ObservableArray) {
weak_event_listener_1.removeWeakEventListener(oldValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
}
if (newValue instanceof observable_array_1.ObservableArray) {
weak_event_listener_1.addWeakEventListener(newValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
}
target._requestRefresh();
}
});
exports.itemsProperty.register(Repeater);
exports.itemsLayoutProperty = new layout_base_1.Property({
name: "itemsLayout",
affectsLayout: true,
valueChanged: function(target, oldValue, newValue) {
if (oldValue) {
target._removeView(oldValue);
oldValue.removeChildren();
}
if (newValue) {
target._addView(newValue);
}
target._requestRefresh();
}
});
exports.itemsLayoutProperty.register(Repeater);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var scroll_view_common_1 = __webpack_require__(217);
__export(__webpack_require__(217));
var ScrollView = function(_super) {
__extends(ScrollView, _super);
function ScrollView() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._androidViewId = -1;
_this._lastScrollX = -1;
_this._lastScrollY = -1;
return _this;
}
Object.defineProperty(ScrollView.prototype, "horizontalOffset", {
get: function() {
var nativeView = this.nativeView;
if (!nativeView) {
return 0;
}
return nativeView.getScrollX() / scroll_view_common_1.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "verticalOffset", {
get: function() {
var nativeView = this.nativeView;
if (!nativeView) {
return 0;
}
return nativeView.getScrollY() / scroll_view_common_1.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableWidth", {
get: function() {
var nativeView = this.nativeView;
if (!nativeView || this.orientation !== "horizontal") {
return 0;
}
return nativeView.getScrollableLength() / scroll_view_common_1.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableHeight", {
get: function() {
var nativeView = this.nativeView;
if (!nativeView || this.orientation !== "vertical") {
return 0;
}
return nativeView.getScrollableLength() / scroll_view_common_1.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
ScrollView.prototype.scrollToVerticalOffset = function(value, animated) {
var nativeView = this.nativeView;
if (nativeView && this.orientation === "vertical") {
value *= scroll_view_common_1.layout.getDisplayDensity();
if (animated) {
nativeView.smoothScrollTo(0, value);
} else {
nativeView.scrollTo(0, value);
}
}
};
ScrollView.prototype.scrollToHorizontalOffset = function(value, animated) {
var nativeView = this.nativeView;
if (nativeView && this.orientation === "horizontal") {
value *= scroll_view_common_1.layout.getDisplayDensity();
if (animated) {
nativeView.smoothScrollTo(value, 0);
} else {
nativeView.scrollTo(value, 0);
}
}
};
ScrollView.prototype.createNativeView = function() {
var nativeView = this.orientation === "horizontal" ? new org.nativescript.widgets.HorizontalScrollView(this._context) : new org.nativescript.widgets.VerticalScrollView(this._context);
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
nativeView.setId(this._androidViewId);
return nativeView;
};
ScrollView.prototype._onOrientationChanged = function() {
if (this.nativeView) {
var parent_1 = this.parent;
if (parent_1) {
parent_1._removeView(this);
parent_1._addView(this);
}
}
};
ScrollView.prototype.attachNative = function() {
var that = new WeakRef(this);
this.handler = new android.view.ViewTreeObserver.OnScrollChangedListener({
onScrollChanged: function() {
var owner = that.get();
if (owner) {
owner._onScrollChanged();
}
}
});
this.nativeView.getViewTreeObserver().addOnScrollChangedListener(this.handler);
};
ScrollView.prototype._onScrollChanged = function() {
var nativeView = this.nativeView;
if (nativeView) {
var newScrollX = nativeView.getScrollX();
var newScrollY = nativeView.getScrollY();
if (newScrollX !== this._lastScrollX || newScrollY !== this._lastScrollY) {
this.notify({
object: this,
eventName: ScrollView.scrollEvent,
scrollX: newScrollX / scroll_view_common_1.layout.getDisplayDensity(),
scrollY: newScrollY / scroll_view_common_1.layout.getDisplayDensity()
});
this._lastScrollX = newScrollX;
this._lastScrollY = newScrollY;
}
}
};
ScrollView.prototype.dettachNative = function() {
this.nativeView.getViewTreeObserver().removeOnScrollChangedListener(this.handler);
this.handler = null;
};
return ScrollView;
}(scroll_view_common_1.ScrollViewBase);
exports.ScrollView = ScrollView;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var content_view_1 = __webpack_require__(130);
__export(__webpack_require__(130));
var ScrollViewBase = function(_super) {
__extends(ScrollViewBase, _super);
function ScrollViewBase() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._scrollChangeCount = 0;
return _this;
}
ScrollViewBase.prototype.addEventListener = function(arg, callback, thisArg) {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
if (arg === ScrollViewBase.scrollEvent) {
this._scrollChangeCount++;
this.attach();
}
};
ScrollViewBase.prototype.removeEventListener = function(arg, callback, thisArg) {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
if (arg === ScrollViewBase.scrollEvent) {
this._scrollChangeCount--;
this.dettach();
}
};
ScrollViewBase.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.attach();
};
ScrollViewBase.prototype.onUnloaded = function() {
_super.prototype.onUnloaded.call(this);
this.dettach();
};
ScrollViewBase.prototype.attach = function() {
if (this._scrollChangeCount > 0 && this.isLoaded) {
this.attachNative();
}
};
ScrollViewBase.prototype.dettach = function() {
if (this._scrollChangeCount === 0 && this.isLoaded) {
this.dettachNative();
}
};
ScrollViewBase.prototype.attachNative = function() {};
ScrollViewBase.prototype.dettachNative = function() {};
Object.defineProperty(ScrollViewBase.prototype, "horizontalOffset", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollViewBase.prototype, "verticalOffset", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollViewBase.prototype, "scrollableWidth", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollViewBase.prototype, "scrollableHeight", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
return ScrollViewBase;
}(content_view_1.ContentView);
ScrollViewBase.scrollEvent = "scroll";
exports.ScrollViewBase = ScrollViewBase;
var converter = content_view_1.makeParser(content_view_1.makeValidator("horizontal", "vertical"));
exports.orientationProperty = new content_view_1.Property({
name: "orientation",
defaultValue: "vertical",
affectsLayout: true,
valueChanged: function(target, oldValue, newValue) {
target._onOrientationChanged();
},
valueConverter: converter
});
exports.orientationProperty.register(ScrollViewBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var font_1 = __webpack_require__(32);
var search_bar_common_1 = __webpack_require__(219);
var utils_1 = __webpack_require__(14);
__export(__webpack_require__(219));
var SEARCHTEXT = Symbol("searchText");
var QUERY = Symbol("query");
var QueryTextListener;
var CloseListener;
function initializeNativeClasses() {
if (QueryTextListener) {
return;
}
var QueryTextListenerImpl = function(_super) {
__extends(QueryTextListenerImpl, _super);
function QueryTextListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
QueryTextListenerImpl.prototype.onQueryTextChange = function(newText) {
var owner = this.owner;
search_bar_common_1.textProperty.nativeValueChange(owner, newText);
if (newText === "" && this[SEARCHTEXT] !== newText) {
owner._emit(search_bar_common_1.SearchBarBase.clearEvent);
}
this[SEARCHTEXT] = newText;
return true;
};
QueryTextListenerImpl.prototype.onQueryTextSubmit = function(query) {
var owner = this.owner;
if (query !== "" && this[QUERY] !== query) {
owner._emit(search_bar_common_1.SearchBarBase.submitEvent);
}
this[QUERY] = query;
return true;
};
return QueryTextListenerImpl;
}(java.lang.Object);
QueryTextListenerImpl = __decorate([ Interfaces([ android.widget.SearchView.OnQueryTextListener ]) ], QueryTextListenerImpl);
var CloseListenerImpl = function(_super) {
__extends(CloseListenerImpl, _super);
function CloseListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
CloseListenerImpl.prototype.onClose = function() {
this.owner._emit(search_bar_common_1.SearchBarBase.clearEvent);
return true;
};
return CloseListenerImpl;
}(java.lang.Object);
CloseListenerImpl = __decorate([ Interfaces([ android.widget.SearchView.OnCloseListener ]) ], CloseListenerImpl);
QueryTextListener = QueryTextListenerImpl;
CloseListener = CloseListenerImpl;
}
var SearchBar = function(_super) {
__extends(SearchBar, _super);
function SearchBar() {
return _super !== null && _super.apply(this, arguments) || this;
}
SearchBar.prototype.dismissSoftInput = function() {
utils_1.ad.dismissSoftInput(this.nativeView);
};
SearchBar.prototype.focus = function() {
var result = _super.prototype.focus.call(this);
if (result) {
utils_1.ad.showSoftInput(this.nativeView);
}
return result;
};
SearchBar.prototype.createNativeView = function() {
initializeNativeClasses();
var nativeView = new android.widget.SearchView(this._context);
nativeView.setIconified(false);
var queryTextListener = new QueryTextListener(this);
nativeView.setOnQueryTextListener(queryTextListener);
nativeView.queryTextListener = queryTextListener;
var closeListener = new CloseListener(this);
nativeView.setOnCloseListener(closeListener);
nativeView.closeListener = closeListener;
return nativeView;
};
SearchBar.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var nativeView = this.nativeView;
nativeView.closeListener.owner = this;
nativeView.queryTextListener.owner = this;
};
SearchBar.prototype.disposeNativeView = function() {
var nativeView = this.nativeView;
nativeView.closeListener.owner = null;
nativeView.queryTextListener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
SearchBar.prototype[search_bar_common_1.backgroundColorProperty.getDefault] = function() {
var result = this.nativeView.getDrawingCacheBackgroundColor();
return result;
};
SearchBar.prototype[search_bar_common_1.backgroundColorProperty.setNative] = function(value) {
var color;
if (typeof value === "number") {
color = value;
} else {
color = value.android;
}
this.nativeView.setBackgroundColor(color);
var searchPlate = this._getSearchPlate();
searchPlate.setBackgroundColor(color);
};
SearchBar.prototype[search_bar_common_1.colorProperty.getDefault] = function() {
var textView = this._getTextView();
return textView.getCurrentTextColor();
};
SearchBar.prototype[search_bar_common_1.colorProperty.setNative] = function(value) {
var color = typeof value === "number" ? value : value.android;
var textView = this._getTextView();
textView.setTextColor(color);
};
SearchBar.prototype[search_bar_common_1.fontSizeProperty.getDefault] = function() {
return {
nativeSize: this._getTextView().getTextSize()
};
};
SearchBar.prototype[search_bar_common_1.fontSizeProperty.setNative] = function(value) {
if (typeof value === "number") {
this._getTextView().setTextSize(value);
} else {
this._getTextView().setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, value.nativeSize);
}
};
SearchBar.prototype[search_bar_common_1.fontInternalProperty.getDefault] = function() {
return this._getTextView().getTypeface();
};
SearchBar.prototype[search_bar_common_1.fontInternalProperty.setNative] = function(value) {
this._getTextView().setTypeface(value instanceof font_1.Font ? value.getAndroidTypeface() : value);
};
SearchBar.prototype[search_bar_common_1.backgroundInternalProperty.getDefault] = function() {
return null;
};
SearchBar.prototype[search_bar_common_1.backgroundInternalProperty.setNative] = function(value) {};
SearchBar.prototype[search_bar_common_1.textProperty.getDefault] = function() {
return "";
};
SearchBar.prototype[search_bar_common_1.textProperty.setNative] = function(value) {
var text = value === null || value === undefined ? "" : value.toString();
this.nativeView.setQuery(text, false);
};
SearchBar.prototype[search_bar_common_1.hintProperty.getDefault] = function() {
return "";
};
SearchBar.prototype[search_bar_common_1.hintProperty.setNative] = function(value) {
var text = value === null || value === undefined ? "" : value.toString();
this.nativeView.setQueryHint(text);
};
SearchBar.prototype[search_bar_common_1.textFieldBackgroundColorProperty.getDefault] = function() {
var textView = this._getTextView();
return textView.getCurrentTextColor();
};
SearchBar.prototype[search_bar_common_1.textFieldBackgroundColorProperty.setNative] = function(value) {
var textView = this._getTextView();
var color = value instanceof search_bar_common_1.Color ? value.android : value;
textView.setBackgroundColor(color);
};
SearchBar.prototype[search_bar_common_1.textFieldHintColorProperty.getDefault] = function() {
var textView = this._getTextView();
return textView.getCurrentTextColor();
};
SearchBar.prototype[search_bar_common_1.textFieldHintColorProperty.setNative] = function(value) {
var textView = this._getTextView();
var color = value instanceof search_bar_common_1.Color ? value.android : value;
textView.setHintTextColor(color);
};
SearchBar.prototype._getTextView = function() {
var id = this.nativeView.getContext().getResources().getIdentifier("android:id/search_src_text", null, null);
return this.nativeView.findViewById(id);
};
SearchBar.prototype._getSearchPlate = function() {
var id = this.nativeView.getContext().getResources().getIdentifier("android:id/search_plate", null, null);
return this.nativeView.findViewById(id);
};
return SearchBar;
}(search_bar_common_1.SearchBarBase);
exports.SearchBar = SearchBar;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var SearchBarBase = function(_super) {
__extends(SearchBarBase, _super);
function SearchBarBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return SearchBarBase;
}(view_1.View);
SearchBarBase.submitEvent = "submit";
SearchBarBase.clearEvent = "clear";
exports.SearchBarBase = SearchBarBase;
exports.textProperty = new view_1.Property({
name: "text",
defaultValue: "",
affectsLayout: view_1.isIOS
});
exports.textProperty.register(SearchBarBase);
exports.hintProperty = new view_1.Property({
name: "hint",
defaultValue: ""
});
exports.hintProperty.register(SearchBarBase);
exports.textFieldHintColorProperty = new view_1.Property({
name: "textFieldHintColor",
equalityComparer: view_1.Color.equals,
valueConverter: function(v) {
return new view_1.Color(v);
}
});
exports.textFieldHintColorProperty.register(SearchBarBase);
exports.textFieldBackgroundColorProperty = new view_1.Property({
name: "textFieldBackgroundColor",
equalityComparer: view_1.Color.equals,
valueConverter: function(v) {
return new view_1.Color(v);
}
});
exports.textFieldBackgroundColorProperty.register(SearchBarBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var font_1 = __webpack_require__(32);
var segmented_bar_common_1 = __webpack_require__(221);
__export(__webpack_require__(221));
var R_ID_TABS = 16908307;
var R_ID_TABCONTENT = 16908305;
var R_ATTR_STATE_SELECTED = 16842913;
var TITLE_TEXT_VIEW_ID = 16908310;
var apiLevel;
var selectedIndicatorThickness;
var TabHost;
var TabChangeListener;
var TabContentFactory;
function initializeNativeClasses() {
if (TabChangeListener) {
return;
}
apiLevel = android.os.Build.VERSION.SDK_INT;
selectedIndicatorThickness = segmented_bar_common_1.layout.toDevicePixels(apiLevel >= 21 ? 2 : 5);
var TabChangeListenerImpl = function(_super) {
__extends(TabChangeListenerImpl, _super);
function TabChangeListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
TabChangeListenerImpl.prototype.onTabChanged = function(id) {
var owner = this.owner;
if (owner.shouldChangeSelectedIndex()) {
owner.selectedIndex = parseInt(id);
}
};
return TabChangeListenerImpl;
}(java.lang.Object);
TabChangeListenerImpl = __decorate([ Interfaces([ android.widget.TabHost.OnTabChangeListener ]) ], TabChangeListenerImpl);
var TabContentFactoryImpl = function(_super) {
__extends(TabContentFactoryImpl, _super);
function TabContentFactoryImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
TabContentFactoryImpl.prototype.createTabContent = function(tag) {
var tv = new android.widget.TextView(this.owner._context);
tv.setVisibility(android.view.View.GONE);
tv.setMaxLines(1);
tv.setEllipsize(android.text.TextUtils.TruncateAt.END);
return tv;
};
return TabContentFactoryImpl;
}(java.lang.Object);
TabContentFactoryImpl = __decorate([ Interfaces([ android.widget.TabHost.TabContentFactory ]) ], TabContentFactoryImpl);
var TabHostImpl = function(_super) {
__extends(TabHostImpl, _super);
function TabHostImpl(context, attrs) {
var _this = _super.call(this, context, attrs) || this;
return global.__native(_this);
}
TabHostImpl.prototype.onAttachedToWindow = function() {};
return TabHostImpl;
}(android.widget.TabHost);
TabHost = TabHostImpl;
TabChangeListener = TabChangeListenerImpl;
TabContentFactory = TabContentFactoryImpl;
}
var SegmentedBarItem = function(_super) {
__extends(SegmentedBarItem, _super);
function SegmentedBarItem() {
return _super !== null && _super.apply(this, arguments) || this;
}
SegmentedBarItem.prototype.createNativeView = function() {
return this.nativeView;
};
SegmentedBarItem.prototype.setupNativeView = function(tabIndex) {
var titleTextView = this.parent.nativeView.getTabWidget().getChildAt(tabIndex).findViewById(TITLE_TEXT_VIEW_ID);
this.nativeView = titleTextView;
if (titleTextView) {
segmented_bar_common_1.initNativeView(this);
if (this.titleDirty) {
this._update();
}
}
};
SegmentedBarItem.prototype._update = function() {
var tv = this.nativeView;
if (tv) {
var title = this.title;
title = title === null || title === undefined ? "" : title;
tv.setText(title);
this.titleDirty = false;
} else {
this.titleDirty = true;
}
};
SegmentedBarItem.prototype[segmented_bar_common_1.colorProperty.getDefault] = function() {
return this.nativeView.getCurrentTextColor();
};
SegmentedBarItem.prototype[segmented_bar_common_1.colorProperty.setNative] = function(value) {
var color = value instanceof segmented_bar_common_1.Color ? value.android : value;
this.nativeView.setTextColor(color);
};
SegmentedBarItem.prototype[segmented_bar_common_1.fontSizeProperty.getDefault] = function() {
return {
nativeSize: this.nativeView.getTextSize()
};
};
SegmentedBarItem.prototype[segmented_bar_common_1.fontSizeProperty.setNative] = function(value) {
if (typeof value === "number") {
this.nativeView.setTextSize(value);
} else {
this.nativeView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, value.nativeSize);
}
};
SegmentedBarItem.prototype[segmented_bar_common_1.fontInternalProperty.getDefault] = function() {
return this.nativeView.getTypeface();
};
SegmentedBarItem.prototype[segmented_bar_common_1.fontInternalProperty.setNative] = function(value) {
this.nativeView.setTypeface(value instanceof font_1.Font ? value.getAndroidTypeface() : value);
};
SegmentedBarItem.prototype[segmented_bar_common_1.selectedBackgroundColorProperty.getDefault] = function() {
var viewGroup = this.nativeView.getParent();
return viewGroup.getBackground().getConstantState();
};
SegmentedBarItem.prototype[segmented_bar_common_1.selectedBackgroundColorProperty.setNative] = function(value) {
var viewGroup = this.nativeView.getParent();
if (value instanceof segmented_bar_common_1.Color) {
var color = value.android;
var backgroundDrawable = viewGroup.getBackground();
if (apiLevel > 21 && backgroundDrawable && typeof backgroundDrawable.setColorFilter === "function") {
var newDrawable = backgroundDrawable.getConstantState().newDrawable();
newDrawable.setColorFilter(color, android.graphics.PorterDuff.Mode.SRC_IN);
org.nativescript.widgets.ViewHelper.setBackground(viewGroup, newDrawable);
} else {
var stateDrawable = new android.graphics.drawable.StateListDrawable();
var colorDrawable = new org.nativescript.widgets.SegmentedBarColorDrawable(color, selectedIndicatorThickness);
var arr = Array.create("int", 1);
arr[0] = R_ATTR_STATE_SELECTED;
stateDrawable.addState(arr, colorDrawable);
stateDrawable.setBounds(0, 15, viewGroup.getRight(), viewGroup.getBottom());
org.nativescript.widgets.ViewHelper.setBackground(viewGroup, stateDrawable);
}
} else {
org.nativescript.widgets.ViewHelper.setBackground(viewGroup, value.newDrawable());
}
};
return SegmentedBarItem;
}(segmented_bar_common_1.SegmentedBarItemBase);
exports.SegmentedBarItem = SegmentedBarItem;
var SegmentedBar = function(_super) {
__extends(SegmentedBar, _super);
function SegmentedBar() {
return _super !== null && _super.apply(this, arguments) || this;
}
SegmentedBar.prototype.shouldChangeSelectedIndex = function() {
return !this._addingTab;
};
SegmentedBar.prototype.createNativeView = function() {
initializeNativeClasses();
var context = this._context;
var nativeView = new TabHost(context, null);
var tabHostLayout = new android.widget.LinearLayout(context);
tabHostLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
var tabWidget = new android.widget.TabWidget(context);
tabWidget.setId(R_ID_TABS);
tabHostLayout.addView(tabWidget);
var frame = new android.widget.FrameLayout(context);
frame.setId(R_ID_TABCONTENT);
frame.setVisibility(android.view.View.GONE);
tabHostLayout.addView(frame);
nativeView.addView(tabHostLayout);
var listener = new TabChangeListener(this);
nativeView.setOnTabChangedListener(listener);
nativeView.listener = listener;
nativeView.setup();
return nativeView;
};
SegmentedBar.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var nativeView = this.nativeView;
nativeView.listener.owner = this;
this._tabContentFactory = this._tabContentFactory || new TabContentFactory(this);
};
SegmentedBar.prototype.disposeNativeView = function() {
var nativeView = this.nativeView;
nativeView.listener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
SegmentedBar.prototype.insertTab = function(tabItem, index) {
var tabHost = this.nativeView;
var tab = tabHost.newTabSpec(index + "");
tab.setIndicator(tabItem.title + "");
tab.setContent(this._tabContentFactory);
this._addingTab = true;
tabHost.addTab(tab);
tabItem.setupNativeView(index);
this._addingTab = false;
};
SegmentedBar.prototype[segmented_bar_common_1.selectedIndexProperty.getDefault] = function() {
return -1;
};
SegmentedBar.prototype[segmented_bar_common_1.selectedIndexProperty.setNative] = function(value) {
this.nativeView.setCurrentTab(value);
};
SegmentedBar.prototype[segmented_bar_common_1.itemsProperty.getDefault] = function() {
return null;
};
SegmentedBar.prototype[segmented_bar_common_1.itemsProperty.setNative] = function(value) {
var _this = this;
this.nativeView.clearAllTabs();
var newItems = value;
if (newItems) {
newItems.forEach(function(item, i, arr) {
return _this.insertTab(item, i);
});
}
segmented_bar_common_1.selectedIndexProperty.coerce(this);
};
return SegmentedBar;
}(segmented_bar_common_1.SegmentedBarBase);
exports.SegmentedBar = SegmentedBar;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var knownCollections;
(function(knownCollections) {
knownCollections.items = "items";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var SegmentedBarItemBase = function(_super) {
__extends(SegmentedBarItemBase, _super);
function SegmentedBarItemBase() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._title = "";
return _this;
}
Object.defineProperty(SegmentedBarItemBase.prototype, "title", {
get: function() {
return this._title;
},
set: function(value) {
var strValue = value !== null && value !== undefined ? value.toString() : "";
if (this._title !== strValue) {
this._title = strValue;
this._update();
}
},
enumerable: true,
configurable: true
});
return SegmentedBarItemBase;
}(view_1.ViewBase);
exports.SegmentedBarItemBase = SegmentedBarItemBase;
var SegmentedBarBase = function(_super) {
__extends(SegmentedBarBase, _super);
function SegmentedBarBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(SegmentedBarBase.prototype, "selectedBackgroundColor", {
get: function() {
return this.style.selectedBackgroundColor;
},
set: function(value) {
this.style.selectedBackgroundColor = value;
},
enumerable: true,
configurable: true
});
SegmentedBarBase.prototype._addArrayFromBuilder = function(name, value) {
if (name === "items") {
this.items = value;
}
};
SegmentedBarBase.prototype._addChildFromBuilder = function(name, value) {
if (name === "SegmentedBarItem") {
var item = value;
var items = this.items;
if (!items) {
items = new Array();
items.push(item);
this.items = items;
} else {
items.push(item);
this._addView(item);
}
if (this.nativeView) {
this[exports.itemsProperty.setNative](items);
}
}
};
SegmentedBarBase.prototype.onItemsChanged = function(oldItems, newItems) {
if (oldItems) {
for (var i = 0, count = oldItems.length; i < count; i++) {
this._removeView(oldItems[i]);
}
}
if (newItems) {
for (var i = 0, count = newItems.length; i < count; i++) {
this._addView(newItems[i]);
}
}
};
SegmentedBarBase.prototype.eachChild = function(callback) {
var items = this.items;
if (items) {
items.forEach(function(item, i) {
callback(item);
});
}
};
return SegmentedBarBase;
}(view_1.View);
SegmentedBarBase.selectedIndexChangedEvent = "selectedIndexChanged";
exports.SegmentedBarBase = SegmentedBarBase;
exports.selectedIndexProperty = new view_1.CoercibleProperty({
name: "selectedIndex",
defaultValue: -1,
valueChanged: function(target, oldValue, newValue) {
target.notify({
eventName: SegmentedBarBase.selectedIndexChangedEvent,
object: target,
oldIndex: oldValue,
newIndex: newValue
});
},
coerceValue: function(target, value) {
var items = target.items;
if (items) {
var max = items.length - 1;
if (value < 0) {
value = 0;
}
if (value > max) {
value = max;
}
} else {
value = -1;
}
return value;
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.selectedIndexProperty.register(SegmentedBarBase);
exports.itemsProperty = new view_1.Property({
name: "items",
valueChanged: function(target, oldValue, newValue) {
target.onItemsChanged(oldValue, newValue);
}
});
exports.itemsProperty.register(SegmentedBarBase);
exports.selectedBackgroundColorProperty = new view_1.InheritedCssProperty({
name: "selectedBackgroundColor",
cssName: "selected-background-color",
equalityComparer: view_1.Color.equals,
valueConverter: function(v) {
return new view_1.Color(v);
}
});
exports.selectedBackgroundColorProperty.register(view_1.Style);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var slider_common_1 = __webpack_require__(223);
__export(__webpack_require__(223));
var SeekBarChangeListener;
function initializeSeekBarChangeListener() {
if (SeekBarChangeListener) {
return;
}
var SeekBarChangeListenerImpl = function(_super) {
__extends(SeekBarChangeListenerImpl, _super);
function SeekBarChangeListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
SeekBarChangeListenerImpl.prototype.onProgressChanged = function(seekBar, progress, fromUser) {
var owner = this.owner;
if (!owner._supressNativeValue) {
var newValue = seekBar.getProgress() + owner.minValue;
slider_common_1.valueProperty.nativeValueChange(owner, newValue);
}
};
SeekBarChangeListenerImpl.prototype.onStartTrackingTouch = function(seekBar) {};
SeekBarChangeListenerImpl.prototype.onStopTrackingTouch = function(seekBar) {};
return SeekBarChangeListenerImpl;
}(java.lang.Object);
SeekBarChangeListenerImpl = __decorate([ Interfaces([ android.widget.SeekBar.OnSeekBarChangeListener ]) ], SeekBarChangeListenerImpl);
SeekBarChangeListener = SeekBarChangeListenerImpl;
}
var Slider = function(_super) {
__extends(Slider, _super);
function Slider() {
return _super !== null && _super.apply(this, arguments) || this;
}
Slider.prototype.createNativeView = function() {
initializeSeekBarChangeListener();
var listener = new SeekBarChangeListener(this);
var nativeView = new android.widget.SeekBar(this._context);
nativeView.setOnSeekBarChangeListener(listener);
nativeView.listener = listener;
return nativeView;
};
Slider.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var nativeView = this.nativeView;
nativeView.listener.owner = this;
};
Slider.prototype.disposeNativeView = function() {
var nativeView = this.nativeView;
nativeView.listener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
Slider.prototype.setNativeValuesSilently = function(newValue, newMaxValue) {
this._supressNativeValue = true;
var nativeView = this.nativeView;
try {
nativeView.setMax(newMaxValue);
nativeView.setProgress(newValue);
} finally {
this._supressNativeValue = false;
}
};
Slider.prototype[slider_common_1.valueProperty.getDefault] = function() {
return 0;
};
Slider.prototype[slider_common_1.valueProperty.setNative] = function(value) {
this.setNativeValuesSilently(value - this.minValue, this.maxValue - this.minValue);
};
Slider.prototype[slider_common_1.minValueProperty.getDefault] = function() {
return 0;
};
Slider.prototype[slider_common_1.minValueProperty.setNative] = function(value) {
this.setNativeValuesSilently(this.value - value, this.maxValue - value);
};
Slider.prototype[slider_common_1.maxValueProperty.getDefault] = function() {
return 100;
};
Slider.prototype[slider_common_1.maxValueProperty.setNative] = function(value) {
this.nativeView.setMax(value - this.minValue);
};
Slider.prototype[slider_common_1.colorProperty.getDefault] = function() {
return -1;
};
Slider.prototype[slider_common_1.colorProperty.setNative] = function(value) {
if (value instanceof slider_common_1.Color) {
this.nativeView.getThumb().setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
} else {
this.nativeView.getThumb().clearColorFilter();
}
};
Slider.prototype[slider_common_1.backgroundColorProperty.getDefault] = function() {
return -1;
};
Slider.prototype[slider_common_1.backgroundColorProperty.setNative] = function(value) {
if (value instanceof slider_common_1.Color) {
this.nativeView.getProgressDrawable().setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
} else {
this.nativeView.getProgressDrawable().clearColorFilter();
}
};
Slider.prototype[slider_common_1.backgroundInternalProperty.getDefault] = function() {
return null;
};
Slider.prototype[slider_common_1.backgroundInternalProperty.setNative] = function(value) {};
return Slider;
}(slider_common_1.SliderBase);
exports.Slider = Slider;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var SliderBase = function(_super) {
__extends(SliderBase, _super);
function SliderBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return SliderBase;
}(view_1.View);
exports.SliderBase = SliderBase;
exports.valueProperty = new view_1.CoercibleProperty({
name: "value",
defaultValue: 0,
coerceValue: function(target, value) {
value = Math.max(value, target.minValue);
value = Math.min(value, target.maxValue);
return value;
},
valueConverter: function(v) {
return view_1.isIOS ? parseFloat(v) : parseInt(v);
}
});
exports.valueProperty.register(SliderBase);
exports.minValueProperty = new view_1.Property({
name: "minValue",
defaultValue: 0,
valueChanged: function(target, oldValue, newValue) {
exports.maxValueProperty.coerce(target);
exports.valueProperty.coerce(target);
},
valueConverter: function(v) {
return view_1.isIOS ? parseFloat(v) : parseInt(v);
}
});
exports.minValueProperty.register(SliderBase);
exports.maxValueProperty = new view_1.CoercibleProperty({
name: "maxValue",
defaultValue: 100,
coerceValue: function(target, value) {
var minValue = target.minValue;
if (value < minValue) {
value = minValue;
}
return value;
},
valueChanged: function(target, oldValue, newValue) {
return exports.valueProperty.coerce(target);
},
valueConverter: function(v) {
return view_1.isIOS ? parseFloat(v) : parseInt(v);
}
});
exports.maxValueProperty.register(SliderBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var switch_common_1 = __webpack_require__(225);
__export(__webpack_require__(225));
var CheckedChangeListener;
function initializeCheckedChangeListener() {
if (CheckedChangeListener) {
return;
}
var CheckedChangeListenerImpl = function(_super) {
__extends(CheckedChangeListenerImpl, _super);
function CheckedChangeListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
CheckedChangeListenerImpl.prototype.onCheckedChanged = function(buttonView, isChecked) {
var owner = this.owner;
switch_common_1.checkedProperty.nativeValueChange(owner, isChecked);
};
return CheckedChangeListenerImpl;
}(java.lang.Object);
CheckedChangeListenerImpl = __decorate([ Interfaces([ android.widget.CompoundButton.OnCheckedChangeListener ]) ], CheckedChangeListenerImpl);
CheckedChangeListener = CheckedChangeListenerImpl;
}
var Switch = function(_super) {
__extends(Switch, _super);
function Switch() {
return _super !== null && _super.apply(this, arguments) || this;
}
Switch.prototype.createNativeView = function() {
initializeCheckedChangeListener();
var nativeView = new android.widget.Switch(this._context);
var listener = new CheckedChangeListener(this);
nativeView.setOnCheckedChangeListener(listener);
nativeView.listener = listener;
return nativeView;
};
Switch.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var nativeView = this.nativeView;
nativeView.listener.owner = this;
};
Switch.prototype.disposeNativeView = function() {
var nativeView = this.nativeView;
nativeView.listener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
Switch.prototype[switch_common_1.checkedProperty.getDefault] = function() {
return false;
};
Switch.prototype[switch_common_1.checkedProperty.setNative] = function(value) {
this.nativeView.setChecked(value);
};
Switch.prototype[switch_common_1.colorProperty.getDefault] = function() {
return -1;
};
Switch.prototype[switch_common_1.colorProperty.setNative] = function(value) {
if (value instanceof switch_common_1.Color) {
this.nativeView.getThumbDrawable().setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
} else {
this.nativeView.getThumbDrawable().clearColorFilter();
}
};
Switch.prototype[switch_common_1.backgroundColorProperty.getDefault] = function() {
return -1;
};
Switch.prototype[switch_common_1.backgroundColorProperty.setNative] = function(value) {
if (value instanceof switch_common_1.Color) {
this.nativeView.getTrackDrawable().setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
} else {
this.nativeView.getTrackDrawable().clearColorFilter();
}
};
Switch.prototype[switch_common_1.backgroundInternalProperty.getDefault] = function() {
return null;
};
Switch.prototype[switch_common_1.backgroundInternalProperty.setNative] = function(value) {};
return Switch;
}(switch_common_1.SwitchBase);
exports.Switch = Switch;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var SwitchBase = function(_super) {
__extends(SwitchBase, _super);
function SwitchBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return SwitchBase;
}(view_1.View);
exports.SwitchBase = SwitchBase;
exports.checkedProperty = new view_1.Property({
name: "checked",
defaultValue: false,
valueConverter: view_1.booleanConverter
});
exports.checkedProperty.register(SwitchBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var font_1 = __webpack_require__(32);
var tab_view_common_1 = __webpack_require__(227);
var text_base_1 = __webpack_require__(71);
var image_source_1 = __webpack_require__(85);
var utils_1 = __webpack_require__(14);
__export(__webpack_require__(227));
var VIEWS_STATES = "_viewStates";
var ACCENT_COLOR = "colorAccent";
var PRIMARY_COLOR = "colorPrimary";
var DEFAULT_ELEVATION = 4;
var PagerAdapter;
var PageChangedListener;
function initializeNativeClasses() {
if (PagerAdapter) {
return;
}
var PagerAdapterImpl = function(_super) {
__extends(PagerAdapterImpl, _super);
function PagerAdapterImpl(owner, items) {
var _this = _super.call(this) || this;
_this.owner = owner;
_this.items = items;
return global.__native(_this);
}
PagerAdapterImpl.prototype.getCount = function() {
return this.items ? this.items.length : 0;
};
PagerAdapterImpl.prototype.getPageTitle = function(index) {
if (index < 0 || index >= this.items.length) {
return "";
}
return this.items[index].title;
};
PagerAdapterImpl.prototype.instantiateItem = function(container, index) {
if (tab_view_common_1.traceEnabled()) {
tab_view_common_1.traceWrite("TabView.PagerAdapter.instantiateItem; container: " + container + "; index: " + index, tab_view_common_1.traceCategory);
}
var item = this.items[index];
if (this[VIEWS_STATES]) {
if (tab_view_common_1.traceEnabled()) {
tab_view_common_1.traceWrite("TabView.PagerAdapter.instantiateItem; restoreHierarchyState: " + item.view, tab_view_common_1.traceCategory);
}
item.view.nativeView.restoreHierarchyState(this[VIEWS_STATES]);
}
if (item.view.nativeView) {
container.addView(item.view.nativeView);
}
return item.view.nativeView;
};
PagerAdapterImpl.prototype.destroyItem = function(container, index, _object) {
if (tab_view_common_1.traceEnabled()) {
tab_view_common_1.traceWrite("TabView.PagerAdapter.destroyItem; container: " + container + "; index: " + index + "; _object: " + _object, tab_view_common_1.traceCategory);
}
var item = this.items[index];
var nativeView = item.view.nativeView;
if (!nativeView || !_object) {
return;
}
if (nativeView.toString() !== _object.toString()) {
throw new Error("Expected " + nativeView.toString() + " to equal " + _object.toString());
}
container.removeView(nativeView);
};
PagerAdapterImpl.prototype.isViewFromObject = function(view, _object) {
return view === _object;
};
PagerAdapterImpl.prototype.saveState = function() {
if (tab_view_common_1.traceEnabled()) {
tab_view_common_1.traceWrite("TabView.PagerAdapter.saveState", tab_view_common_1.traceCategory);
}
var owner = this.owner;
if (owner._childrenCount === 0) {
return null;
}
if (!this[VIEWS_STATES]) {
this[VIEWS_STATES] = new android.util.SparseArray();
}
var viewStates = this[VIEWS_STATES];
var childCallback = function(view) {
var nativeView = view.nativeView;
if (nativeView && nativeView.isSaveFromParentEnabled && nativeView.isSaveFromParentEnabled()) {
nativeView.saveHierarchyState(viewStates);
}
return true;
};
owner.eachChildView(childCallback);
var bundle = new android.os.Bundle();
bundle.putSparseParcelableArray(VIEWS_STATES, viewStates);
return bundle;
};
PagerAdapterImpl.prototype.restoreState = function(state, loader) {
if (tab_view_common_1.traceEnabled()) {
tab_view_common_1.traceWrite("TabView.PagerAdapter.restoreState", tab_view_common_1.traceCategory);
}
var bundle = state;
bundle.setClassLoader(loader);
this[VIEWS_STATES] = bundle.getSparseParcelableArray(VIEWS_STATES);
};
return PagerAdapterImpl;
}(android.support.v4.view.PagerAdapter);
var PageChangedListenerImpl = function(_super) {
__extends(PageChangedListenerImpl, _super);
function PageChangedListenerImpl(owner) {
var _this = _super.call(this) || this;
_this._owner = owner;
return global.__native(_this);
}
PageChangedListenerImpl.prototype.onPageSelected = function(position) {
this._owner.selectedIndex = position;
};
return PageChangedListenerImpl;
}(android.support.v4.view.ViewPager.SimpleOnPageChangeListener);
PagerAdapter = PagerAdapterImpl;
PageChangedListener = PageChangedListenerImpl;
}
function createTabItemSpec(item) {
var result = new org.nativescript.widgets.TabItemSpec();
result.title = item.title;
if (item.iconSource) {
if (item.iconSource.indexOf(utils_1.RESOURCE_PREFIX) === 0) {
result.iconId = utils_1.ad.resources.getDrawableId(item.iconSource.substr(utils_1.RESOURCE_PREFIX.length));
} else {
var is = image_source_1.fromFileOrResource(item.iconSource);
if (is) {
result.iconDrawable = new android.graphics.drawable.BitmapDrawable(is.android);
}
}
}
return result;
}
var defaultAccentColor = undefined;
function getDefaultAccentColor(context) {
if (defaultAccentColor === undefined) {
defaultAccentColor = utils_1.ad.resources.getPalleteColor(ACCENT_COLOR, context) || 4281578981;
}
return defaultAccentColor;
}
var TabViewItem = function(_super) {
__extends(TabViewItem, _super);
function TabViewItem() {
return _super !== null && _super.apply(this, arguments) || this;
}
TabViewItem.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
if (this.nativeView) {
this._defaultTransformationMethod = this.nativeView.getTransformationMethod();
}
};
TabViewItem.prototype.resetNativeView = function() {
_super.prototype.resetNativeView.call(this);
if (this.nativeView) {
this.nativeView.setTransformationMethod(this._defaultTransformationMethod);
}
};
TabViewItem.prototype.createNativeView = function() {
return this.nativeView;
};
TabViewItem.prototype.setNativeView = function(textView) {
this.nativeView = textView;
if (textView) {
tab_view_common_1.initNativeView(this);
}
};
TabViewItem.prototype._update = function() {
var tv = this.nativeView;
if (tv) {
var tabLayout = tv.getParent();
tabLayout.updateItemAt(this.index, this.tabItemSpec);
}
};
TabViewItem.prototype[tab_view_common_1.fontSizeProperty.getDefault] = function() {
return {
nativeSize: this.nativeView.getTextSize()
};
};
TabViewItem.prototype[tab_view_common_1.fontSizeProperty.setNative] = function(value) {
if (typeof value === "number") {
this.nativeView.setTextSize(value);
} else {
this.nativeView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, value.nativeSize);
}
};
TabViewItem.prototype[tab_view_common_1.fontInternalProperty.getDefault] = function() {
return this.nativeView.getTypeface();
};
TabViewItem.prototype[tab_view_common_1.fontInternalProperty.setNative] = function(value) {
this.nativeView.setTypeface(value instanceof font_1.Font ? value.getAndroidTypeface() : value);
};
TabViewItem.prototype[text_base_1.textTransformProperty.getDefault] = function() {
return "default";
};
TabViewItem.prototype[text_base_1.textTransformProperty.setNative] = function(value) {
var tv = this.nativeView;
if (value === "default") {
tv.setTransformationMethod(this._defaultTransformationMethod);
tv.setText(this.title);
} else {
var result = text_base_1.getTransformedText(this.title, value);
tv.setText(result);
tv.setTransformationMethod(null);
}
};
return TabViewItem;
}(tab_view_common_1.TabViewItemBase);
exports.TabViewItem = TabViewItem;
function setElevation(grid, tabLayout) {
var compat = android.support.v4.view.ViewCompat;
if (compat.setElevation) {
var val = DEFAULT_ELEVATION * tab_view_common_1.layout.getDisplayDensity();
compat.setElevation(grid, val);
compat.setElevation(tabLayout, val);
}
}
var TabView = function(_super) {
__extends(TabView, _super);
function TabView() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._androidViewId = -1;
return _this;
}
TabView.prototype.onItemsChanged = function(oldItems, newItems) {
_super.prototype.onItemsChanged.call(this, oldItems, newItems);
if (oldItems) {
oldItems.forEach(function(item, i, arr) {
item.index = 0;
item.tabItemSpec = null;
item.setNativeView(null);
});
}
};
TabView.prototype.createNativeView = function() {
initializeNativeClasses();
if (tab_view_common_1.traceEnabled()) {
tab_view_common_1.traceWrite("TabView._createUI(" + this + ");", tab_view_common_1.traceCategory);
}
var context = this._context;
var nativeView = new org.nativescript.widgets.GridLayout(context);
nativeView.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.auto));
nativeView.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.star));
var tabLayout = new org.nativescript.widgets.TabLayout(context);
nativeView.addView(tabLayout);
nativeView.tabLayout = tabLayout;
setElevation(nativeView, tabLayout);
var accentColor = getDefaultAccentColor(context);
if (accentColor) {
tabLayout.setSelectedIndicatorColors([ accentColor ]);
}
var primaryColor = utils_1.ad.resources.getPalleteColor(PRIMARY_COLOR, context);
if (primaryColor) {
tabLayout.setBackgroundColor(primaryColor);
}
var viewPager = new android.support.v4.view.ViewPager(context);
var lp = new org.nativescript.widgets.CommonLayoutParams();
lp.row = 1;
viewPager.setLayoutParams(lp);
nativeView.addView(viewPager);
nativeView.viewPager = viewPager;
var listener = new PageChangedListener(this);
viewPager.addOnPageChangeListener(listener);
viewPager.listener = listener;
var adapter = new PagerAdapter(this, null);
viewPager.setAdapter(adapter);
viewPager.adapter = adapter;
return nativeView;
};
TabView.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
var nativeView = this.nativeView;
this._tabLayout = nativeView.tabLayout;
var viewPager = nativeView.viewPager;
viewPager.setId(this._androidViewId);
this._viewPager = viewPager;
viewPager.listener.owner = this;
this._pagerAdapter = viewPager.adapter;
this._pagerAdapter.owner = this;
};
TabView.prototype.disposeNativeView = function() {
this._pagerAdapter.notifyDataSetChanged();
this._pagerAdapter.owner = null;
this._pagerAdapter = null;
this._tabLayout = null;
this._viewPager.listener.owner = null;
this._viewPager = null;
_super.prototype.disposeNativeView.call(this);
};
TabView.prototype.setAdapterItems = function(items) {
this._pagerAdapter.items = items;
var length = items ? items.length : 0;
if (length === 0) {
this._tabLayout.setItems(null, null);
return;
}
var tabItems = new Array();
items.forEach(function(item, i, arr) {
var tabItemSpec = createTabItemSpec(item);
item.index = i;
item.tabItemSpec = tabItemSpec;
tabItems.push(tabItemSpec);
});
var tabLayout = this._tabLayout;
tabLayout.setItems(tabItems, this._viewPager);
items.forEach(function(item, i, arr) {
var tv = tabLayout.getTextViewForItemAt(i);
item.setNativeView(tv);
});
this._pagerAdapter.notifyDataSetChanged();
};
TabView.prototype[tab_view_common_1.androidOffscreenTabLimitProperty.getDefault] = function() {
return this._viewPager.getOffscreenPageLimit();
};
TabView.prototype[tab_view_common_1.androidOffscreenTabLimitProperty.setNative] = function(value) {
this._viewPager.setOffscreenPageLimit(value);
};
TabView.prototype[tab_view_common_1.selectedIndexProperty.getDefault] = function() {
return -1;
};
TabView.prototype[tab_view_common_1.selectedIndexProperty.setNative] = function(value) {
if (tab_view_common_1.traceEnabled()) {
tab_view_common_1.traceWrite("TabView this._viewPager.setCurrentItem(" + value + ", true);", tab_view_common_1.traceCategory);
}
this._viewPager.setCurrentItem(value, true);
};
TabView.prototype[tab_view_common_1.itemsProperty.getDefault] = function() {
return null;
};
TabView.prototype[tab_view_common_1.itemsProperty.setNative] = function(value) {
this.setAdapterItems(value);
tab_view_common_1.selectedIndexProperty.coerce(this);
};
TabView.prototype[tab_view_common_1.tabBackgroundColorProperty.getDefault] = function() {
return this._tabLayout.getBackground().getConstantState();
};
TabView.prototype[tab_view_common_1.tabBackgroundColorProperty.setNative] = function(value) {
if (value instanceof tab_view_common_1.Color) {
this._tabLayout.setBackgroundColor(value.android);
} else {
this._tabLayout.setBackground(value ? value.newDrawable() : null);
}
};
TabView.prototype[tab_view_common_1.tabTextColorProperty.getDefault] = function() {
return this._tabLayout.getTabTextColor();
};
TabView.prototype[tab_view_common_1.tabTextColorProperty.setNative] = function(value) {
var color = value instanceof tab_view_common_1.Color ? value.android : value;
this._tabLayout.setTabTextColor(color);
};
TabView.prototype[tab_view_common_1.selectedTabTextColorProperty.getDefault] = function() {
return this._tabLayout.getSelectedTabTextColor();
};
TabView.prototype[tab_view_common_1.selectedTabTextColorProperty.setNative] = function(value) {
var color = value instanceof tab_view_common_1.Color ? value.android : value;
this._tabLayout.setSelectedTabTextColor(color);
};
TabView.prototype[tab_view_common_1.androidSelectedTabHighlightColorProperty.getDefault] = function() {
return getDefaultAccentColor(this._context);
};
TabView.prototype[tab_view_common_1.androidSelectedTabHighlightColorProperty.setNative] = function(value) {
var tabLayout = this._tabLayout;
var color = value instanceof tab_view_common_1.Color ? value.android : value;
tabLayout.setSelectedIndicatorColors([ color ]);
};
return TabView;
}(tab_view_common_1.TabViewBase);
exports.TabView = TabView;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
exports.traceCategory = "TabView";
var TabViewItemBase = function(_super) {
__extends(TabViewItemBase, _super);
function TabViewItemBase() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._title = "";
return _this;
}
Object.defineProperty(TabViewItemBase.prototype, "textTransform", {
get: function() {
return this.style.textTransform;
},
set: function(value) {
this.style.textTransform = value;
},
enumerable: true,
configurable: true
});
TabViewItemBase.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof view_1.View) {
this.view = value;
}
};
Object.defineProperty(TabViewItemBase.prototype, "title", {
get: function() {
return this._title;
},
set: function(value) {
if (this._title !== value) {
this._title = value;
this._update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewItemBase.prototype, "view", {
get: function() {
return this._view;
},
set: function(value) {
if (this._view !== value) {
if (this._view) {
throw new Error("Changing the view of an already loaded TabViewItem is not currently supported.");
}
this._view = value;
this._addView(value);
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewItemBase.prototype, "iconSource", {
get: function() {
return this._iconSource;
},
set: function(value) {
if (this._iconSource !== value) {
this._iconSource = value;
this._update();
}
},
enumerable: true,
configurable: true
});
TabViewItemBase.prototype.eachChild = function(callback) {
var view = this._view;
if (view) {
callback(view);
}
};
return TabViewItemBase;
}(view_1.ViewBase);
exports.TabViewItemBase = TabViewItemBase;
var knownCollections;
(function(knownCollections) {
knownCollections.items = "items";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var TabViewBase = function(_super) {
__extends(TabViewBase, _super);
function TabViewBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(TabViewBase.prototype, "androidSelectedTabHighlightColor", {
get: function() {
return this.style.androidSelectedTabHighlightColor;
},
set: function(value) {
this.style.androidSelectedTabHighlightColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewBase.prototype, "tabTextColor", {
get: function() {
return this.style.tabTextColor;
},
set: function(value) {
this.style.tabTextColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewBase.prototype, "tabBackgroundColor", {
get: function() {
return this.style.tabBackgroundColor;
},
set: function(value) {
this.style.tabBackgroundColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewBase.prototype, "selectedTabTextColor", {
get: function() {
return this.style.selectedTabTextColor;
},
set: function(value) {
this.style.selectedTabTextColor = value;
},
enumerable: true,
configurable: true
});
TabViewBase.prototype._addArrayFromBuilder = function(name, value) {
if (name === "items") {
this.items = value;
}
};
TabViewBase.prototype._addChildFromBuilder = function(name, value) {
if (name === "TabViewItem") {
if (!this.items) {
this.items = new Array();
}
this.items.push(value);
this._addView(value);
exports.selectedIndexProperty.coerce(this);
}
};
Object.defineProperty(TabViewBase.prototype, "_selectedView", {
get: function() {
var selectedIndex = this.selectedIndex;
return selectedIndex > -1 ? this.items[selectedIndex].view : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewBase.prototype, "_childrenCount", {
get: function() {
if (this.items) {
return this.items.length;
}
return 0;
},
enumerable: true,
configurable: true
});
TabViewBase.prototype.eachChild = function(callback) {
var items = this.items;
if (items) {
items.forEach(function(item, i) {
callback(item);
});
}
};
TabViewBase.prototype.eachChildView = function(callback) {
var items = this.items;
if (items) {
items.forEach(function(item, i) {
callback(item.view);
});
}
};
TabViewBase.prototype.onItemsChanged = function(oldItems, newItems) {
if (oldItems) {
for (var i = 0, count = oldItems.length; i < count; i++) {
this._removeView(oldItems[i]);
}
}
if (newItems) {
for (var i = 0, count = newItems.length; i < count; i++) {
var item = newItems[i];
if (!item) {
throw new Error("TabViewItem at index " + i + " is undefined.");
}
if (!item.view) {
throw new Error("TabViewItem at index " + i + " does not have a view.");
}
this._addView(item);
}
}
};
return TabViewBase;
}(view_1.View);
TabViewBase.selectedIndexChangedEvent = "selectedIndexChanged";
exports.TabViewBase = TabViewBase;
exports.selectedIndexProperty = new view_1.CoercibleProperty({
name: "selectedIndex",
defaultValue: -1,
affectsLayout: view_1.isIOS,
valueChanged: function(target, oldValue, newValue) {
target.notify({
eventName: TabViewBase.selectedIndexChangedEvent,
object: target,
oldIndex: oldValue,
newIndex: newValue
});
},
coerceValue: function(target, value) {
var items = target.items;
if (items) {
var max = items.length - 1;
if (value < 0) {
value = 0;
}
if (value > max) {
value = max;
}
} else {
value = -1;
}
return value;
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.selectedIndexProperty.register(TabViewBase);
exports.itemsProperty = new view_1.Property({
name: "items",
valueChanged: function(target, oldValue, newValue) {
target.onItemsChanged(oldValue, newValue);
}
});
exports.itemsProperty.register(TabViewBase);
exports.iosIconRenderingModeProperty = new view_1.Property({
name: "iosIconRenderingMode",
defaultValue: "automatic"
});
exports.iosIconRenderingModeProperty.register(TabViewBase);
exports.androidOffscreenTabLimitProperty = new view_1.Property({
name: "androidOffscreenTabLimit",
defaultValue: 1,
affectsLayout: view_1.isIOS,
valueConverter: function(v) {
return parseInt(v);
}
});
exports.androidOffscreenTabLimitProperty.register(TabViewBase);
exports.tabTextColorProperty = new view_1.CssProperty({
name: "tabTextColor",
cssName: "tab-text-color",
equalityComparer: view_1.Color.equals,
valueConverter: function(v) {
return new view_1.Color(v);
}
});
exports.tabTextColorProperty.register(view_1.Style);
exports.tabBackgroundColorProperty = new view_1.CssProperty({
name: "tabBackgroundColor",
cssName: "tab-background-color",
equalityComparer: view_1.Color.equals,
valueConverter: function(v) {
return new view_1.Color(v);
}
});
exports.tabBackgroundColorProperty.register(view_1.Style);
exports.selectedTabTextColorProperty = new view_1.CssProperty({
name: "selectedTabTextColor",
cssName: "selected-tab-text-color",
equalityComparer: view_1.Color.equals,
valueConverter: function(v) {
return new view_1.Color(v);
}
});
exports.selectedTabTextColorProperty.register(view_1.Style);
exports.androidSelectedTabHighlightColorProperty = new view_1.CssProperty({
name: "androidSelectedTabHighlightColor",
cssName: "android-selected-tab-highlight-color",
equalityComparer: view_1.Color.equals,
valueConverter: function(v) {
return new view_1.Color(v);
}
});
exports.androidSelectedTabHighlightColorProperty.register(view_1.Style);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var web_view_common_1 = __webpack_require__(229);
__export(__webpack_require__(229));
var WebViewClient;
function initializeWebViewClient() {
if (WebViewClient) {
return;
}
var WebViewClientImpl = function(_super) {
__extends(WebViewClientImpl, _super);
function WebViewClientImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
WebViewClientImpl.prototype.shouldOverrideUrlLoading = function(view, url) {
if (web_view_common_1.traceEnabled()) {
web_view_common_1.traceWrite("WebViewClientClass.shouldOverrideUrlLoading(" + url + ")", web_view_common_1.traceCategories.Debug);
}
return false;
};
WebViewClientImpl.prototype.onPageStarted = function(view, url, favicon) {
_super.prototype.onPageStarted.call(this, view, url, favicon);
var owner = this.owner;
if (owner) {
if (web_view_common_1.traceEnabled()) {
web_view_common_1.traceWrite("WebViewClientClass.onPageStarted(" + url + ", " + favicon + ")", web_view_common_1.traceCategories.Debug);
}
owner._onLoadStarted(url, undefined);
}
};
WebViewClientImpl.prototype.onPageFinished = function(view, url) {
_super.prototype.onPageFinished.call(this, view, url);
var owner = this.owner;
if (owner) {
if (web_view_common_1.traceEnabled()) {
web_view_common_1.traceWrite("WebViewClientClass.onPageFinished(" + url + ")", web_view_common_1.traceCategories.Debug);
}
owner._onLoadFinished(url, undefined);
}
};
WebViewClientImpl.prototype.onReceivedError = function() {
var view = arguments[0];
if (arguments.length === 4) {
var errorCode = arguments[1];
var description = arguments[2];
var failingUrl = arguments[3];
_super.prototype.onReceivedError.call(this, view, errorCode, description, failingUrl);
var owner = this.owner;
if (owner) {
if (web_view_common_1.traceEnabled()) {
web_view_common_1.traceWrite("WebViewClientClass.onReceivedError(" + errorCode + ", " + description + ", " + failingUrl + ")", web_view_common_1.traceCategories.Debug);
}
owner._onLoadFinished(failingUrl, description + "(" + errorCode + ")");
}
} else {
var request = arguments[1];
var error = arguments[2];
_super.prototype.onReceivedError.call(this, view, request, error);
var owner = this.owner;
if (owner) {
if (web_view_common_1.traceEnabled()) {
web_view_common_1.traceWrite("WebViewClientClass.onReceivedError(" + error.getErrorCode() + ", " + error.getDescription() + ", " + (error.getUrl && error.getUrl()) + ")", web_view_common_1.traceCategories.Debug);
}
owner._onLoadFinished(error.getUrl && error.getUrl(), error.getDescription() + "(" + error.getErrorCode() + ")");
}
}
};
return WebViewClientImpl;
}(android.webkit.WebViewClient);
WebViewClient = WebViewClientImpl;
}
var WebView = function(_super) {
__extends(WebView, _super);
function WebView() {
return _super !== null && _super.apply(this, arguments) || this;
}
WebView.prototype.createNativeView = function() {
initializeWebViewClient();
var nativeView = new android.webkit.WebView(this._context);
nativeView.getSettings().setJavaScriptEnabled(true);
nativeView.getSettings().setBuiltInZoomControls(true);
var client = new WebViewClient(this);
nativeView.setWebViewClient(client);
nativeView.client = client;
return nativeView;
};
WebView.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
this.nativeView.client.owner = this;
};
WebView.prototype.resetNativeView = function() {
var nativeView = this.nativeView;
if (nativeView) {
nativeView.destroy();
}
nativeView.client.owner = null;
_super.prototype.resetNativeView.call(this);
};
WebView.prototype._loadUrl = function(src) {
var nativeView = this.nativeView;
if (!nativeView) {
return;
}
nativeView.loadUrl(src);
};
WebView.prototype._loadData = function(src) {
var nativeView = this.nativeView;
if (!nativeView) {
return;
}
var baseUrl = "file:///" + web_view_common_1.knownFolders.currentApp().path + "/";
nativeView.loadDataWithBaseURL(baseUrl, src, "text/html", "utf-8", null);
};
Object.defineProperty(WebView.prototype, "canGoBack", {
get: function() {
return this.nativeView.canGoBack();
},
enumerable: true,
configurable: true
});
WebView.prototype.stopLoading = function() {
var nativeView = this.nativeView;
if (nativeView) {
nativeView.stopLoading();
}
};
Object.defineProperty(WebView.prototype, "canGoForward", {
get: function() {
var nativeView = this.nativeView;
if (nativeView) {
return nativeView.canGoForward();
}
return false;
},
enumerable: true,
configurable: true
});
WebView.prototype.goBack = function() {
var nativeView = this.nativeView;
if (nativeView) {
return nativeView.goBack();
}
};
WebView.prototype.goForward = function() {
var nativeView = this.nativeView;
if (nativeView) {
return nativeView.goForward();
}
};
WebView.prototype.reload = function() {
var nativeView = this.nativeView;
if (nativeView) {
return nativeView.reload();
}
};
return WebView;
}(web_view_common_1.WebViewBase);
exports.WebView = WebView;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
var file_system_1 = __webpack_require__(22);
exports.File = file_system_1.File;
exports.knownFolders = file_system_1.knownFolders;
exports.path = file_system_1.path;
__export(__webpack_require__(12));
exports.srcProperty = new view_1.Property({
name: "src"
});
var WebViewBase = function(_super) {
__extends(WebViewBase, _super);
function WebViewBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
WebViewBase.prototype._onLoadFinished = function(url, error) {
var args = {
eventName: WebViewBase.loadFinishedEvent,
object: this,
url: url,
navigationType: undefined,
error: error
};
this.notify(args);
};
WebViewBase.prototype._onLoadStarted = function(url, navigationType) {
var args = {
eventName: WebViewBase.loadStartedEvent,
object: this,
url: url,
navigationType: navigationType,
error: undefined
};
this.notify(args);
};
Object.defineProperty(WebViewBase.prototype, "canGoBack", {
get: function() {
throw new Error("This member is abstract.");
},
enumerable: true,
configurable: true
});
Object.defineProperty(WebViewBase.prototype, "canGoForward", {
get: function() {
throw new Error("This member is abstract.");
},
enumerable: true,
configurable: true
});
WebViewBase.prototype[exports.srcProperty.getDefault] = function() {
return "";
};
WebViewBase.prototype[exports.srcProperty.setNative] = function(src) {
this.stopLoading();
if (src.indexOf("~/") === 0) {
src = "file:///" + file_system_1.knownFolders.currentApp().path + "/" + src.substr(2);
} else if (src.indexOf("/") === 0) {
src = "file://" + src;
}
if (src.toLowerCase().indexOf("http://") === 0 || src.toLowerCase().indexOf("https://") === 0 || src.toLowerCase().indexOf("file:///") === 0) {
this._loadUrl(src);
} else {
this._loadData(src);
}
};
Object.defineProperty(WebViewBase.prototype, "url", {
get: function() {
throw new Error("Property url of WebView is deprecated. Use src instead");
},
set: function(value) {
throw new Error("Property url of WebView is deprecated. Use src instead");
},
enumerable: true,
configurable: true
});
return WebViewBase;
}(view_1.View);
WebViewBase.loadStartedEvent = "loadStarted";
WebViewBase.loadFinishedEvent = "loadFinished";
exports.WebViewBase = WebViewBase;
exports.srcProperty.register(WebViewBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var time_picker_common_1 = __webpack_require__(231);
__export(__webpack_require__(231));
var TimeChangedListener;
function initializeTimeChangedListener() {
if (TimeChangedListener) {
return;
}
apiLevel = android.os.Build.VERSION.SDK_INT;
var TimeChangedListenerImpl = function(_super) {
__extends(TimeChangedListenerImpl, _super);
function TimeChangedListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
TimeChangedListenerImpl.prototype.onTimeChanged = function(picker, hour, minute) {
var timePicker = this.owner;
if (timePicker.updatingNativeValue) {
return;
}
var validTime = time_picker_common_1.getValidTime(timePicker, hour, minute);
time_picker_common_1.timeProperty.nativeValueChange(timePicker, new Date(0, 0, 0, validTime.hour, validTime.minute));
};
return TimeChangedListenerImpl;
}(java.lang.Object);
TimeChangedListenerImpl = __decorate([ Interfaces([ android.widget.TimePicker.OnTimeChangedListener ]) ], TimeChangedListenerImpl);
TimeChangedListener = TimeChangedListenerImpl;
}
var apiLevel;
var TimePicker = function(_super) {
__extends(TimePicker, _super);
function TimePicker() {
return _super !== null && _super.apply(this, arguments) || this;
}
TimePicker.prototype.createNativeView = function() {
initializeTimeChangedListener();
var nativeView = new android.widget.TimePicker(this._context);
var listener = new TimeChangedListener(this);
nativeView.setOnTimeChangedListener(listener);
nativeView.listener = listener;
nativeView.calendar = java.util.Calendar.getInstance();
return nativeView;
};
TimePicker.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var nativeView = this.nativeView;
nativeView.listener.owner = this;
var calendar = nativeView.calendar;
var hour = time_picker_common_1.hourProperty.isSet(this) ? this.hour : calendar.get(java.util.Calendar.HOUR_OF_DAY);
var minute = time_picker_common_1.minuteProperty.isSet(this) ? this.minute : calendar.get(java.util.Calendar.MINUTE);
var validTime = time_picker_common_1.getValidTime(this, hour, minute);
if (!time_picker_common_1.timeProperty.isSet(this)) {
this.time = new Date(0, 0, 0, validTime.hour, validTime.minute);
}
};
TimePicker.prototype[time_picker_common_1.minuteProperty.setNative] = function(value) {
this.updatingNativeValue = true;
try {
if (apiLevel >= 23) {
this.nativeView.setMinute(value);
} else {
this.nativeView.setCurrentMinute(new java.lang.Integer(value));
}
} finally {
this.updatingNativeValue = false;
}
};
TimePicker.prototype[time_picker_common_1.hourProperty.setNative] = function(value) {
this.updatingNativeValue = true;
try {
if (apiLevel >= 23) {
this.nativeView.setHour(value);
} else {
this.nativeView.setCurrentHour(new java.lang.Integer(value));
}
} finally {
this.updatingNativeValue = false;
}
};
return TimePicker;
}(time_picker_common_1.TimePickerBase);
exports.TimePicker = TimePicker;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
function getValidTime(picker, hour, minute) {
if (picker.minuteInterval > 1) {
var minuteFloor = minute - minute % picker.minuteInterval;
minute = minuteFloor + (minute === minuteFloor + 1 ? picker.minuteInterval : 0);
if (minute === 60) {
hour++;
minute = 0;
}
}
var time = {
hour: hour,
minute: minute
};
if (!isLessThanMaxTime(picker, hour, minute)) {
time = {
hour: picker.maxHour,
minute: picker.maxMinute
};
}
if (!isGreaterThanMinTime(picker, hour, minute)) {
time = {
hour: picker.minHour,
minute: picker.minMinute
};
}
return time;
}
exports.getValidTime = getValidTime;
function isValidTime(picker) {
return isGreaterThanMinTime(picker) && isLessThanMaxTime(picker);
}
function isHourValid(value) {
return typeof value === "number" && value >= 0 && value <= 23;
}
function isMinuteValid(value) {
return typeof value === "number" && value >= 0 && value <= 59;
}
function isMinuteIntervalValid(value) {
return typeof value === "number" && value >= 1 && value <= 30 && 60 % value === 0;
}
function getMinutes(hour) {
return hour * 60;
}
function isDefined(value) {
return value !== undefined;
}
exports.isDefined = isDefined;
function isGreaterThanMinTime(picker, hour, minute) {
if (picker.minHour === undefined || picker.minMinute === undefined) {
return true;
}
return getMinutes(hour !== undefined ? hour : picker.hour) + (minute !== undefined ? minute : picker.minute) >= getMinutes(picker.minHour) + picker.minMinute;
}
function isLessThanMaxTime(picker, hour, minute) {
if (!isDefined(picker.maxHour) || !isDefined(picker.maxMinute)) {
return true;
}
return getMinutes(isDefined(hour) ? hour : picker.hour) + (isDefined(minute) ? minute : picker.minute) <= getMinutes(picker.maxHour) + picker.maxMinute;
}
function toString(value) {
if (value instanceof Date) {
return value + "";
}
return value < 10 ? "0" + value : "" + value;
}
function getMinMaxTimeErrorMessage(picker) {
return "Min time: (" + toString(picker.minHour) + ":" + toString(picker.minMinute) + "), max time: (" + toString(picker.maxHour) + ":" + toString(picker.maxMinute) + ")";
}
function getErrorMessage(picker, propertyName, newValue) {
return propertyName + " property value (" + toString(newValue) + ":" + toString(picker.minute) + ") is not valid. " + getMinMaxTimeErrorMessage(picker) + ".";
}
var TimePickerBase = function(_super) {
__extends(TimePickerBase, _super);
function TimePickerBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return TimePickerBase;
}(view_1.View);
exports.TimePickerBase = TimePickerBase;
exports.minHourProperty = new view_1.Property({
name: "minHour",
defaultValue: 0,
valueChanged: function(picker, oldValue, newValue) {
if (!isHourValid(newValue) || !isValidTime(picker)) {
throw new Error(getErrorMessage(picker, "minHour", newValue));
}
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.minHourProperty.register(TimePickerBase);
exports.maxHourProperty = new view_1.Property({
name: "maxHour",
defaultValue: 23,
valueChanged: function(picker, oldValue, newValue) {
if (!isHourValid(newValue) || !isValidTime(picker)) {
throw new Error(getErrorMessage(picker, "maxHour", newValue));
}
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.maxHourProperty.register(TimePickerBase);
exports.minMinuteProperty = new view_1.Property({
name: "minMinute",
defaultValue: 0,
valueChanged: function(picker, oldValue, newValue) {
if (!isMinuteValid(newValue) || !isValidTime(picker)) {
throw new Error(getErrorMessage(picker, "minMinute", newValue));
}
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.minMinuteProperty.register(TimePickerBase);
exports.maxMinuteProperty = new view_1.Property({
name: "maxMinute",
defaultValue: 59,
valueChanged: function(picker, oldValue, newValue) {
if (!isMinuteValid(newValue) || !isValidTime(picker)) {
throw new Error(getErrorMessage(picker, "maxMinute", newValue));
}
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.maxMinuteProperty.register(TimePickerBase);
exports.minuteIntervalProperty = new view_1.Property({
name: "minuteInterval",
defaultValue: 1,
valueChanged: function(picker, oldValue, newValue) {
if (!isMinuteIntervalValid(newValue)) {
throw new Error(getErrorMessage(picker, "minuteInterval", newValue));
}
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.minuteIntervalProperty.register(TimePickerBase);
function dateComparer(x, y) {
return x <= y && x >= y ? true : false;
}
exports.minuteProperty = new view_1.Property({
name: "minute",
defaultValue: 0,
valueChanged: function(picker, oldValue, newValue) {
if (!isMinuteValid(newValue) || !isValidTime(picker)) {
throw new Error(getErrorMessage(picker, "minute", newValue));
}
picker.time = new Date(0, 0, 0, picker.hour, picker.minute);
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.minuteProperty.register(TimePickerBase);
exports.hourProperty = new view_1.Property({
name: "hour",
defaultValue: 0,
valueChanged: function(picker, oldValue, newValue) {
if (!isHourValid(newValue) || !isValidTime(picker)) {
throw new Error(getErrorMessage(picker, "Hour", newValue));
}
picker.time = new Date(0, 0, 0, picker.hour, picker.minute);
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.hourProperty.register(TimePickerBase);
exports.timeProperty = new view_1.Property({
name: "time",
equalityComparer: dateComparer,
valueChanged: function(picker, oldValue, newValue) {
if (!isValidTime(picker)) {
throw new Error(getErrorMessage(picker, "time", newValue));
}
picker.hour = newValue.getHours();
picker.minute = newValue.getMinutes();
}
});
exports.timeProperty.register(TimePickerBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var list_view_common_1 = __webpack_require__(233);
var stack_layout_1 = __webpack_require__(205);
var proxy_view_container_1 = __webpack_require__(214);
var layout_base_1 = __webpack_require__(135);
__export(__webpack_require__(233));
var ITEMLOADING = list_view_common_1.ListViewBase.itemLoadingEvent;
var LOADMOREITEMS = list_view_common_1.ListViewBase.loadMoreItemsEvent;
var ITEMTAP = list_view_common_1.ListViewBase.itemTapEvent;
var ItemClickListener;
function initializeItemClickListener() {
if (ItemClickListener) {
return;
}
var ItemClickListenerImpl = function(_super) {
__extends(ItemClickListenerImpl, _super);
function ItemClickListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
ItemClickListenerImpl.prototype.onItemClick = function(parent, convertView, index, id) {
var owner = this.owner;
var view = owner._realizedTemplates.get(owner._getItemTemplate(index).key).get(convertView);
owner.notify({
eventName: ITEMTAP,
object: owner,
index: index,
view: view
});
};
return ItemClickListenerImpl;
}(java.lang.Object);
ItemClickListenerImpl = __decorate([ Interfaces([ android.widget.AdapterView.OnItemClickListener ]) ], ItemClickListenerImpl);
ItemClickListener = ItemClickListenerImpl;
}
var ListView = function(_super) {
__extends(ListView, _super);
function ListView() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._androidViewId = -1;
_this._realizedItems = new Map();
_this._realizedTemplates = new Map();
return _this;
}
ListView.prototype.createNativeView = function() {
initializeItemClickListener();
var listView = new android.widget.ListView(this._context);
listView.setDescendantFocusability(android.view.ViewGroup.FOCUS_AFTER_DESCENDANTS);
this.updateEffectiveRowHeight();
listView.setCacheColorHint(android.graphics.Color.TRANSPARENT);
ensureListViewAdapterClass();
var adapter = new ListViewAdapterClass(this);
listView.setAdapter(adapter);
listView.adapter = adapter;
var itemClickListener = new ItemClickListener(this);
listView.setOnItemClickListener(itemClickListener);
listView.itemClickListener = itemClickListener;
return listView;
};
ListView.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var nativeView = this.nativeView;
nativeView.itemClickListener.owner = this;
var adapter = nativeView.adapter;
adapter.owner = this;
nativeView.setAdapter(adapter);
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
nativeView.setId(this._androidViewId);
};
ListView.prototype.disposeNativeView = function() {
var nativeView = this.nativeView;
nativeView.setAdapter(null);
nativeView.itemClickListener.owner = null;
nativeView.adapter.owner = null;
this.clearRealizedCells();
_super.prototype.disposeNativeView.call(this);
};
ListView.prototype.refresh = function() {
var nativeView = this.nativeView;
if (!nativeView || !nativeView.getAdapter()) {
return;
}
this._realizedItems.forEach(function(view, nativeView) {
if (!(view.bindingContext instanceof list_view_common_1.Observable)) {
view.bindingContext = null;
}
});
nativeView.getAdapter().notifyDataSetChanged();
};
ListView.prototype.scrollToIndex = function(index) {
var nativeView = this.nativeView;
if (nativeView) {
nativeView.setSelection(index);
}
};
Object.defineProperty(ListView.prototype, "_childrenCount", {
get: function() {
return this._realizedItems.size;
},
enumerable: true,
configurable: true
});
ListView.prototype.eachChildView = function(callback) {
this._realizedItems.forEach(function(view, nativeView) {
if (view.parent instanceof ListView) {
callback(view);
} else {
if (view.parent) {
callback(view.parent);
}
}
});
};
ListView.prototype._dumpRealizedTemplates = function() {
console.log("Realized Templates:");
this._realizedTemplates.forEach(function(value, index) {
console.log("\t" + index + ":");
value.forEach(function(value, index) {
console.log("\t\t" + index.hashCode() + ": " + value);
});
});
console.log("Realized Items Size: " + this._realizedItems.size);
};
ListView.prototype.clearRealizedCells = function() {
var _this = this;
this._realizedItems.forEach(function(view, nativeView) {
if (view.parent) {
if (!(view.parent instanceof ListView)) {
_this._removeView(view.parent);
}
view.parent._removeView(view);
}
});
this._realizedItems.clear();
this._realizedTemplates.clear();
};
ListView.prototype[list_view_common_1.separatorColorProperty.getDefault] = function() {
var nativeView = this.nativeView;
return {
dividerHeight: nativeView.getDividerHeight(),
divider: nativeView.getDivider()
};
};
ListView.prototype[list_view_common_1.separatorColorProperty.setNative] = function(value) {
var nativeView = this.nativeView;
if (value instanceof list_view_common_1.Color) {
nativeView.setDivider(new android.graphics.drawable.ColorDrawable(value.android));
nativeView.setDividerHeight(1);
} else {
nativeView.setDivider(value.divider);
nativeView.setDividerHeight(value.dividerHeight);
}
};
ListView.prototype[list_view_common_1.itemTemplatesProperty.getDefault] = function() {
return null;
};
ListView.prototype[list_view_common_1.itemTemplatesProperty.setNative] = function(value) {
this._itemTemplatesInternal = new Array(this._defaultTemplate);
if (value) {
this._itemTemplatesInternal = this._itemTemplatesInternal.concat(value);
}
this.nativeView.setAdapter(new ListViewAdapterClass(this));
this.refresh();
};
return ListView;
}(list_view_common_1.ListViewBase);
exports.ListView = ListView;
var ListViewAdapterClass;
function ensureListViewAdapterClass() {
if (ListViewAdapterClass) {
return;
}
var ListViewAdapter = function(_super) {
__extends(ListViewAdapter, _super);
function ListViewAdapter(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
ListViewAdapter.prototype.getCount = function() {
return this.owner && this.owner.items && this.owner.items.length ? this.owner.items.length : 0;
};
ListViewAdapter.prototype.getItem = function(i) {
if (this.owner && this.owner.items && i < this.owner.items.length) {
var getItem = this.owner.items.getItem;
return getItem ? getItem(i) : this.owner.items[i];
}
return null;
};
ListViewAdapter.prototype.getItemId = function(i) {
return long(i);
};
ListViewAdapter.prototype.hasStableIds = function() {
return true;
};
ListViewAdapter.prototype.getViewTypeCount = function() {
return this.owner._itemTemplatesInternal.length;
};
ListViewAdapter.prototype.getItemViewType = function(index) {
var template = this.owner._getItemTemplate(index);
var itemViewType = this.owner._itemTemplatesInternal.indexOf(template);
return itemViewType;
};
ListViewAdapter.prototype.getView = function(index, convertView, parent) {
if (!this.owner) {
return null;
}
var totalItemCount = this.owner.items ? this.owner.items.length : 0;
if (index === totalItemCount - 1) {
this.owner.notify({
eventName: LOADMOREITEMS,
object: this.owner
});
}
var template = this.owner._getItemTemplate(index);
var view;
if (convertView) {
view = this.owner._realizedTemplates.get(template.key).get(convertView);
if (!view) {
throw new Error("There is no entry with key '" + convertView + "' in the realized views cache for template with key'" + template.key + "'.");
}
} else {
view = template.createView();
}
var args = {
eventName: ITEMLOADING,
object: this.owner,
index: index,
view: view,
android: parent,
ios: undefined
};
this.owner.notify(args);
if (!args.view) {
args.view = this.owner._getDefaultItemContent(index);
}
if (args.view) {
if (this.owner._effectiveRowHeight > -1) {
args.view.height = this.owner.rowHeight;
} else {
args.view.height = list_view_common_1.unsetValue;
}
this.owner._prepareItem(args.view, index);
if (!args.view.parent) {
if (args.view instanceof layout_base_1.LayoutBase && !(args.view instanceof proxy_view_container_1.ProxyViewContainer)) {
this.owner._addView(args.view);
convertView = args.view.nativeView;
} else {
var sp = new stack_layout_1.StackLayout();
sp.addChild(args.view);
this.owner._addView(sp);
convertView = sp.nativeView;
}
}
var realizedItemsForTemplateKey = this.owner._realizedTemplates.get(template.key);
if (!realizedItemsForTemplateKey) {
realizedItemsForTemplateKey = new Map();
this.owner._realizedTemplates.set(template.key, realizedItemsForTemplateKey);
}
realizedItemsForTemplateKey.set(convertView, args.view);
this.owner._realizedItems.set(convertView, args.view);
}
return convertView;
};
return ListViewAdapter;
}(android.widget.BaseAdapter);
ListViewAdapterClass = ListViewAdapter;
}
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
var builder_1 = __webpack_require__(59);
var label_1 = __webpack_require__(80);
var observable_array_1 = __webpack_require__(75);
var weak_event_listener_1 = __webpack_require__(40);
__export(__webpack_require__(12));
var knownTemplates;
(function(knownTemplates) {
knownTemplates.itemTemplate = "itemTemplate";
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));
var knownMultiTemplates;
(function(knownMultiTemplates) {
knownMultiTemplates.itemTemplates = "itemTemplates";
})(knownMultiTemplates = exports.knownMultiTemplates || (exports.knownMultiTemplates = {}));
var autoEffectiveRowHeight = -1;
var ListViewBase = function(_super) {
__extends(ListViewBase, _super);
function ListViewBase() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._itemTemplateSelectorBindable = new label_1.Label();
_this._defaultTemplate = {
key: "default",
createView: function() {
if (_this.itemTemplate) {
return builder_1.parse(_this.itemTemplate, _this);
}
return undefined;
}
};
_this._itemTemplatesInternal = new Array(_this._defaultTemplate);
_this._effectiveRowHeight = autoEffectiveRowHeight;
return _this;
}
Object.defineProperty(ListViewBase.prototype, "separatorColor", {
get: function() {
return this.style.separatorColor;
},
set: function(value) {
this.style.separatorColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListViewBase.prototype, "itemTemplateSelector", {
get: function() {
return this._itemTemplateSelector;
},
set: function(value) {
var _this = this;
if (typeof value === "string") {
this._itemTemplateSelectorBindable.bind({
sourceProperty: null,
targetProperty: "templateKey",
expression: value
});
this._itemTemplateSelector = function(item, index, items) {
item["$index"] = index;
_this._itemTemplateSelectorBindable.bindingContext = item;
return _this._itemTemplateSelectorBindable.get("templateKey");
};
} else if (typeof value === "function") {
this._itemTemplateSelector = value;
}
},
enumerable: true,
configurable: true
});
ListViewBase.prototype.refresh = function() {};
ListViewBase.prototype.scrollToIndex = function(index) {};
ListViewBase.prototype._getItemTemplate = function(index) {
var templateKey = "default";
if (this.itemTemplateSelector) {
var dataItem = this._getDataItem(index);
templateKey = this._itemTemplateSelector(dataItem, index, this.items);
}
for (var i = 0, length_1 = this._itemTemplatesInternal.length; i < length_1; i++) {
if (this._itemTemplatesInternal[i].key === templateKey) {
return this._itemTemplatesInternal[i];
}
}
return this._itemTemplatesInternal[0];
};
ListViewBase.prototype._prepareItem = function(item, index) {
if (item) {
item.bindingContext = this._getDataItem(index);
}
};
ListViewBase.prototype._getDataItem = function(index) {
var thisItems = this.items;
return thisItems.getItem ? thisItems.getItem(index) : thisItems[index];
};
ListViewBase.prototype._getDefaultItemContent = function(index) {
var lbl = new label_1.Label();
lbl.bind({
targetProperty: "text",
sourceProperty: "$value"
});
return lbl;
};
ListViewBase.prototype._onItemsChanged = function(args) {
this.refresh();
};
ListViewBase.prototype._onRowHeightPropertyChanged = function(oldValue, newValue) {
this.refresh();
};
ListViewBase.prototype.updateEffectiveRowHeight = function() {
exports.rowHeightProperty.coerce(this);
};
return ListViewBase;
}(view_1.View);
ListViewBase.itemLoadingEvent = "itemLoading";
ListViewBase.itemTapEvent = "itemTap";
ListViewBase.loadMoreItemsEvent = "loadMoreItems";
ListViewBase.knownFunctions = [ "itemTemplateSelector" ];
exports.ListViewBase = ListViewBase;
exports.itemsProperty = new view_1.Property({
name: "items",
valueChanged: function(target, oldValue, newValue) {
if (oldValue instanceof view_1.Observable) {
weak_event_listener_1.removeWeakEventListener(oldValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
}
if (newValue instanceof view_1.Observable) {
weak_event_listener_1.addWeakEventListener(newValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
}
target.refresh();
}
});
exports.itemsProperty.register(ListViewBase);
exports.itemTemplateProperty = new view_1.Property({
name: "itemTemplate",
valueChanged: function(target) {
target.refresh();
}
});
exports.itemTemplateProperty.register(ListViewBase);
exports.itemTemplatesProperty = new view_1.Property({
name: "itemTemplates",
valueConverter: function(value) {
if (typeof value === "string") {
return builder_1.parseMultipleTemplates(value);
}
return value;
}
});
exports.itemTemplatesProperty.register(ListViewBase);
var defaultRowHeight = "auto";
exports.rowHeightProperty = new view_1.CoercibleProperty({
name: "rowHeight",
defaultValue: defaultRowHeight,
equalityComparer: view_1.Length.equals,
coerceValue: function(target, value) {
return target.nativeView ? value : defaultRowHeight;
},
valueChanged: function(target, oldValue, newValue) {
target._effectiveRowHeight = view_1.Length.toDevicePixels(newValue, autoEffectiveRowHeight);
target._onRowHeightPropertyChanged(oldValue, newValue);
},
valueConverter: view_1.Length.parse
});
exports.rowHeightProperty.register(ListViewBase);
exports.separatorColorProperty = new view_1.CssProperty({
name: "separatorColor",
cssName: "separator-color",
equalityComparer: view_1.Color.equals,
valueConverter: function(v) {
return new view_1.Color(v);
}
});
exports.separatorColorProperty.register(view_1.Style);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var application_1 = __webpack_require__(18);
var connectionType;
(function(connectionType) {
connectionType[connectionType["none"] = 0] = "none";
connectionType[connectionType["wifi"] = 1] = "wifi";
connectionType[connectionType["mobile"] = 2] = "mobile";
})(connectionType = exports.connectionType || (exports.connectionType = {}));
var wifi = "wifi";
var mobile = "mobile";
function getConnectivityManager() {
return application_1.getNativeApplication().getApplicationContext().getSystemService(android.content.Context.CONNECTIVITY_SERVICE);
}
function getActiveNetworkInfo() {
var connectivityManager = getConnectivityManager();
if (!connectivityManager) {
return null;
}
return connectivityManager.getActiveNetworkInfo();
}
function getConnectionType() {
var activeNetworkInfo = getActiveNetworkInfo();
if (!activeNetworkInfo || !activeNetworkInfo.isConnected()) {
return connectionType.none;
}
var type = activeNetworkInfo.getTypeName().toLowerCase();
if (type.indexOf(wifi) !== -1) {
return connectionType.wifi;
}
if (type.indexOf(mobile) !== -1) {
return connectionType.mobile;
}
return connectionType.none;
}
exports.getConnectionType = getConnectionType;
function startMonitoring(connectionTypeChangedCallback) {
var onReceiveCallback = function onReceiveCallback(context, intent) {
var newConnectionType = getConnectionType();
connectionTypeChangedCallback(newConnectionType);
};
application_1.android.registerBroadcastReceiver(android.net.ConnectivityManager.CONNECTIVITY_ACTION, onReceiveCallback);
}
exports.startMonitoring = startMonitoring;
function stopMonitoring() {
application_1.android.unregisterBroadcastReceiver(android.net.ConnectivityManager.CONNECTIVITY_ACTION);
}
exports.stopMonitoring = stopMonitoring;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var observable_1 = __webpack_require__(20);
var CHANGE = "change";
var UPDATE = "update";
var DELETE = "delete";
var ADD = "add";
var ChangeType = function() {
function ChangeType() {}
return ChangeType;
}();
ChangeType.Add = ADD;
ChangeType.Delete = DELETE;
ChangeType.Update = UPDATE;
ChangeType.Splice = CHANGE;
exports.ChangeType = ChangeType;
var VirtualArray = function(_super) {
__extends(VirtualArray, _super);
function VirtualArray(length) {
if (length === void 0) {
length = 0;
}
var _this = _super.call(this) || this;
_this._length = length;
_this._cache = {};
_this._requestedIndexes = [];
_this._loadedIndexes = [];
return _this;
}
Object.defineProperty(VirtualArray.prototype, "length", {
get: function() {
return this._length;
},
set: function(value) {
if (this._length !== value) {
var index_1 = this._length;
var count = value - this._length;
this._length = value;
this.notify({
eventName: CHANGE,
object: this,
action: count > 0 ? ADD : DELETE,
index: index_1,
removed: new Array(count < 0 ? Math.abs(count) : 0),
addedCount: count > 0 ? count : 0
});
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(VirtualArray.prototype, "loadSize", {
get: function() {
return this._loadSize;
},
set: function(value) {
this._loadSize = value;
},
enumerable: true,
configurable: true
});
VirtualArray.prototype.getItem = function(index) {
var item = this._cache[index];
if (item === undefined) {
if (index >= 0 && index < this.length && this._requestedIndexes.indexOf(index) < 0 && this._loadedIndexes.indexOf(index) < 0) {
this.requestItems(index);
}
}
return item;
};
VirtualArray.prototype.setItem = function(index, value) {
if (this._cache[index] !== value) {
this.load(index, [ value ]);
}
};
VirtualArray.prototype.load = function(index, items) {
for (var i = 0; i < items.length; i++) {
var itemIndex = index + i;
this._cache[itemIndex] = items[i];
this._requestedIndexes.splice(this._requestedIndexes.indexOf(itemIndex), 1);
if (this._loadedIndexes.indexOf(itemIndex) < 0) {
this._loadedIndexes.push(itemIndex);
}
}
if (this._requestedIndexes.length > 0) {
for (var i = 0; i < this.loadSize - items.length; i++) {
this._requestedIndexes.splice(this._requestedIndexes.indexOf(index + i), 1);
}
}
this.notify({
eventName: CHANGE,
object: this,
action: UPDATE,
index: index,
removed: new Array(items.length),
addedCount: items.length
});
};
VirtualArray.prototype.requestItems = function(index) {
var indexesToLoad = [];
var pageIndex = this._loadSize > 0 ? this._loadSize * Math.floor(index / this._loadSize) : index;
var count = 0;
var start = -1;
for (var i = 0; i < this.loadSize; i++) {
var itemIndex = pageIndex + i;
if (itemIndex >= this._length) {
break;
}
if (this._loadedIndexes.indexOf(itemIndex) < 0) {
if (start < 0) {
start = itemIndex;
}
indexesToLoad.push(itemIndex);
if (this._requestedIndexes.indexOf(itemIndex) < 0) {
this._requestedIndexes.push(itemIndex);
}
count++;
} else {
if (count > 0) {
this.notify({
eventName: VirtualArray.itemsLoadingEvent,
object: this,
index: start,
count: count
});
}
start = -1;
count = 0;
}
}
if (start >= 0 && count > 0) {
this.notify({
eventName: VirtualArray.itemsLoadingEvent,
object: this,
index: start,
count: count
});
}
};
return VirtualArray;
}(observable_1.Observable);
VirtualArray.changeEvent = CHANGE;
VirtualArray.itemsLoadingEvent = "itemsLoading";
exports.VirtualArray = VirtualArray;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var fpsNative = __webpack_require__(237);
var callbacks = {};
var idCounter = 0;
var _minFps = 1e3;
var framesRendered = 0;
var frameStartTime = 0;
function doFrame(currentTimeMillis) {
var fps = 0;
if (frameStartTime > 0) {
var timeSpan = currentTimeMillis - frameStartTime;
framesRendered++;
if (timeSpan > 1e3) {
fps = framesRendered * 1e3 / timeSpan;
if (fps < _minFps) {
_minFps = fps;
}
notify(fps);
frameStartTime = currentTimeMillis;
framesRendered = 0;
}
} else {
frameStartTime = currentTimeMillis;
}
}
var native;
function ensureNative() {
if (!native) {
native = new fpsNative.FPSCallback(doFrame);
}
}
function reset() {
_minFps = 1e3;
frameStartTime = 0;
framesRendered = 0;
}
exports.reset = reset;
function running() {
if (!native) {
return false;
}
return native.running;
}
exports.running = running;
function minFps() {
return _minFps;
}
exports.minFps = minFps;
function start() {
ensureNative();
native.start();
}
exports.start = start;
function stop() {
if (!native) {
return;
}
native.stop();
reset();
}
exports.stop = stop;
function addCallback(callback) {
var id = idCounter;
callbacks[id] = zonedCallback(callback);
idCounter++;
return id;
}
exports.addCallback = addCallback;
function removeCallback(id) {
if (id in callbacks) {
delete callbacks[id];
}
}
exports.removeCallback = removeCallback;
function notify(fps) {
var callback;
for (var id in callbacks) {
callback = callbacks[id];
callback(fps, _minFps);
}
}
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var FPSCallback = function() {
function FPSCallback(onFrame) {
var _this = this;
this.running = false;
this.onFrame = onFrame;
this.impl = new android.view.Choreographer.FrameCallback({
doFrame: function(nanos) {
_this.handleFrame(nanos);
}
});
}
FPSCallback.prototype.start = function() {
if (this.running) {
return;
}
android.view.Choreographer.getInstance().postFrameCallback(this.impl);
this.running = true;
};
FPSCallback.prototype.stop = function() {
if (!this.running) {
return;
}
android.view.Choreographer.getInstance().removeFrameCallback(this.impl);
this.running = false;
};
FPSCallback.prototype.handleFrame = function(nanos) {
if (!this.running) {
return;
}
this.onFrame(nanos / 1e6);
android.view.Choreographer.getInstance().postFrameCallback(this.impl);
};
return FPSCallback;
}();
exports.FPSCallback = FPSCallback;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var browser_1 = __webpack_require__(154);
var animations_1 = __webpack_require__(239);
var animation_engine_1 = __webpack_require__(240);
var animation_driver_1 = __webpack_require__(242);
var nativescript_module_1 = __webpack_require__(246);
var renderer_1 = __webpack_require__(247);
var InjectableAnimationEngine = function(_super) {
__extends(InjectableAnimationEngine, _super);
function InjectableAnimationEngine(driver, normalizer) {
return _super.call(this, driver, normalizer) || this;
}
return InjectableAnimationEngine;
}(animation_engine_1.NativeScriptAnimationEngine);
InjectableAnimationEngine = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", [ browser_1.AnimationDriver, browser_1.ɵAnimationStyleNormalizer ]) ], InjectableAnimationEngine);
exports.InjectableAnimationEngine = InjectableAnimationEngine;
function instantiateSupportedAnimationDriver() {
return new animation_driver_1.NativeScriptAnimationDriver();
}
exports.instantiateSupportedAnimationDriver = instantiateSupportedAnimationDriver;
function instantiateRendererFactory(renderer, engine, zone) {
return new animations_1.ɵAnimationRendererFactory(renderer, engine, zone);
}
exports.instantiateRendererFactory = instantiateRendererFactory;
function instanciateDefaultStyleNormalizer() {
return new browser_1.ɵWebAnimationsStyleNormalizer();
}
exports.instanciateDefaultStyleNormalizer = instanciateDefaultStyleNormalizer;
exports.NATIVESCRIPT_ANIMATIONS_PROVIDERS = [ {
provide: browser_1.AnimationDriver,
useFactory: instantiateSupportedAnimationDriver
}, {
provide: browser_1.ɵAnimationStyleNormalizer,
useFactory: instanciateDefaultStyleNormalizer
}, {
provide: browser_1.ɵAnimationEngine,
useClass: InjectableAnimationEngine
}, {
provide: core_1.RendererFactory2,
useFactory: instantiateRendererFactory,
deps: [ renderer_1.NativeScriptRendererFactory, browser_1.ɵAnimationEngine, core_1.NgZone ]
} ];
var NativeScriptAnimationsModule = function() {
function NativeScriptAnimationsModule() {}
return NativeScriptAnimationsModule;
}();
NativeScriptAnimationsModule = __decorate([ core_1.NgModule({
imports: [ nativescript_module_1.NativeScriptModule ],
providers: exports.NATIVESCRIPT_ANIMATIONS_PROVIDERS
}) ], NativeScriptAnimationsModule);
exports.NativeScriptAnimationsModule = NativeScriptAnimationsModule;
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory(exports, __webpack_require__(92), __webpack_require__(166), __webpack_require__(154)) : typeof define === "function" && define.amd ? define([ "exports", "@angular/core", "@angular/platform-browser", "@angular/animations/browser" ], factory) : factory((global.ng = global.ng || {}, 
global.ng.platformBrowser = global.ng.platformBrowser || {}, global.ng.platformBrowser.animations = global.ng.platformBrowser.animations || {}), global.ng.core, global.ng.platformBrowser, global.ng.animations.browser);
})(this, function(exports, _angular_core, _angular_platformBrowser, _angular_animations_browser) {
"use strict";
var __extends = undefined && undefined.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AnimationRendererFactory = function() {
function AnimationRendererFactory(delegate, _engine, _zone) {
this.delegate = delegate;
this._engine = _engine;
this._zone = _zone;
}
AnimationRendererFactory.prototype.createRenderer = function(hostElement, type) {
var _this = this;
var delegate = this.delegate.createRenderer(hostElement, type);
if (!hostElement || !type || !type.data || !type.data["animation"]) return delegate;
var namespaceId = type.id;
var animationTriggers = type.data["animation"];
animationTriggers.forEach(function(trigger) {
return _this._engine.registerTrigger(trigger, namespaceify(namespaceId, trigger.name));
});
return new AnimationRenderer(delegate, this._engine, this._zone, namespaceId);
};
return AnimationRendererFactory;
}();
AnimationRendererFactory.decorators = [ {
type: _angular_core.Injectable
} ];
AnimationRendererFactory.ctorParameters = function() {
return [ {
type: _angular_core.RendererFactory2
}, {
type: _angular_animations_browser.ɵAnimationEngine
}, {
type: _angular_core.NgZone
} ];
};
var AnimationRenderer = function() {
function AnimationRenderer(delegate, _engine, _zone, _namespaceId) {
this.delegate = delegate;
this._engine = _engine;
this._zone = _zone;
this._namespaceId = _namespaceId;
this.destroyNode = null;
this._flushPromise = null;
this.destroyNode = this.delegate.destroyNode ? function(n) {
return delegate.destroyNode(n);
} : null;
}
Object.defineProperty(AnimationRenderer.prototype, "data", {
get: function() {
return this.delegate.data;
},
enumerable: true,
configurable: true
});
AnimationRenderer.prototype.destroy = function() {
this.delegate.destroy();
};
AnimationRenderer.prototype.createElement = function(name, namespace) {
return this.delegate.createElement(name, namespace);
};
AnimationRenderer.prototype.createComment = function(value) {
return this.delegate.createComment(value);
};
AnimationRenderer.prototype.createText = function(value) {
return this.delegate.createText(value);
};
AnimationRenderer.prototype.selectRootElement = function(selectorOrNode) {
return this.delegate.selectRootElement(selectorOrNode);
};
AnimationRenderer.prototype.parentNode = function(node) {
return this.delegate.parentNode(node);
};
AnimationRenderer.prototype.nextSibling = function(node) {
return this.delegate.nextSibling(node);
};
AnimationRenderer.prototype.setAttribute = function(el, name, value, namespace) {
this.delegate.setAttribute(el, name, value, namespace);
};
AnimationRenderer.prototype.removeAttribute = function(el, name, namespace) {
this.delegate.removeAttribute(el, name, namespace);
};
AnimationRenderer.prototype.addClass = function(el, name) {
this.delegate.addClass(el, name);
};
AnimationRenderer.prototype.removeClass = function(el, name) {
this.delegate.removeClass(el, name);
};
AnimationRenderer.prototype.setStyle = function(el, style, value, flags) {
this.delegate.setStyle(el, style, value, flags);
};
AnimationRenderer.prototype.removeStyle = function(el, style, flags) {
this.delegate.removeStyle(el, style, flags);
};
AnimationRenderer.prototype.setValue = function(node, value) {
this.delegate.setValue(node, value);
};
AnimationRenderer.prototype.appendChild = function(parent, newChild) {
var _this = this;
this._engine.onInsert(newChild, function() {
return _this.delegate.appendChild(parent, newChild);
});
this._queueFlush();
};
AnimationRenderer.prototype.insertBefore = function(parent, newChild, refChild) {
var _this = this;
this._engine.onInsert(newChild, function() {
return _this.delegate.insertBefore(parent, newChild, refChild);
});
this._queueFlush();
};
AnimationRenderer.prototype.removeChild = function(parent, oldChild) {
var _this = this;
this._engine.onRemove(oldChild, function() {
if (_this.delegate.parentNode(oldChild)) {
_this.delegate.removeChild(parent, oldChild);
}
});
this._queueFlush();
};
AnimationRenderer.prototype.setProperty = function(el, name, value) {
if (name.charAt(0) == "@") {
this._engine.setProperty(el, namespaceify(this._namespaceId, name.substr(1)), value);
this._queueFlush();
} else {
this.delegate.setProperty(el, name, value);
}
};
AnimationRenderer.prototype.listen = function(target, eventName, callback) {
var _this = this;
if (eventName.charAt(0) == "@") {
var element = resolveElementFromTarget(target);
var _a = parseTriggerCallbackName(eventName.substr(1)), name = _a[0], phase = _a[1];
return this._engine.listen(element, namespaceify(this._namespaceId, name), phase, function(event) {
var e = event;
if (e.triggerName) {
e.triggerName = deNamespaceify(_this._namespaceId, e.triggerName);
}
_this._zone.run(function() {
return callback(event);
});
});
}
return this.delegate.listen(target, eventName, callback);
};
AnimationRenderer.prototype._queueFlush = function() {
var _this = this;
if (!this._flushPromise) {
this._zone.runOutsideAngular(function() {
_this._flushPromise = Promise.resolve(null).then(function() {
_this._flushPromise = null;
_this._engine.flush();
});
});
}
};
return AnimationRenderer;
}();
function resolveElementFromTarget(target) {
switch (target) {
case "body":
return document.body;

case "document":
return document;

case "window":
return window;

default:
return target;
}
}
function parseTriggerCallbackName(triggerName) {
var dotIndex = triggerName.indexOf(".");
var trigger = triggerName.substring(0, dotIndex);
var phase = triggerName.substr(dotIndex + 1);
return [ trigger, phase ];
}
function namespaceify(namespaceId, value) {
return namespaceId + "#" + value;
}
function deNamespaceify(namespaceId, value) {
return value.replace(namespaceId + "#", "");
}
var InjectableAnimationEngine = function(_super) {
__extends(InjectableAnimationEngine, _super);
function InjectableAnimationEngine(driver, normalizer) {
return _super.call(this, driver, normalizer) || this;
}
return InjectableAnimationEngine;
}(_angular_animations_browser.ɵDomAnimationEngine);
InjectableAnimationEngine.decorators = [ {
type: _angular_core.Injectable
} ];
InjectableAnimationEngine.ctorParameters = function() {
return [ {
type: _angular_animations_browser.AnimationDriver
}, {
type: _angular_animations_browser.ɵAnimationStyleNormalizer
} ];
};
function instantiateSupportedAnimationDriver() {
if (_angular_animations_browser.ɵsupportsWebAnimations()) {
return new _angular_animations_browser.ɵWebAnimationsDriver();
}
return new _angular_animations_browser.ɵNoopAnimationDriver();
}
function instantiateDefaultStyleNormalizer() {
return new _angular_animations_browser.ɵWebAnimationsStyleNormalizer();
}
function instantiateRendererFactory(renderer, engine, zone) {
return new AnimationRendererFactory(renderer, engine, zone);
}
var BROWSER_ANIMATIONS_PROVIDERS = [ {
provide: _angular_animations_browser.AnimationDriver,
useFactory: instantiateSupportedAnimationDriver
}, {
provide: _angular_animations_browser.ɵAnimationStyleNormalizer,
useFactory: instantiateDefaultStyleNormalizer
}, {
provide: _angular_animations_browser.ɵAnimationEngine,
useClass: InjectableAnimationEngine
}, {
provide: _angular_core.RendererFactory2,
useFactory: instantiateRendererFactory,
deps: [ _angular_platformBrowser.ɵDomRendererFactory2, _angular_animations_browser.ɵAnimationEngine, _angular_core.NgZone ]
} ];
var BROWSER_NOOP_ANIMATIONS_PROVIDERS = [ {
provide: _angular_animations_browser.ɵAnimationEngine,
useClass: _angular_animations_browser.ɵNoopAnimationEngine
}, {
provide: _angular_core.RendererFactory2,
useFactory: instantiateRendererFactory,
deps: [ _angular_platformBrowser.ɵDomRendererFactory2, _angular_animations_browser.ɵAnimationEngine, _angular_core.NgZone ]
} ];
var BrowserAnimationsModule = function() {
function BrowserAnimationsModule() {}
return BrowserAnimationsModule;
}();
BrowserAnimationsModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
imports: [ _angular_platformBrowser.BrowserModule ],
providers: BROWSER_ANIMATIONS_PROVIDERS
} ]
} ];
BrowserAnimationsModule.ctorParameters = function() {
return [];
};
var NoopAnimationsModule = function() {
function NoopAnimationsModule() {}
return NoopAnimationsModule;
}();
NoopAnimationsModule.decorators = [ {
type: _angular_core.NgModule,
args: [ {
imports: [ _angular_platformBrowser.BrowserModule ],
providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS
} ]
} ];
NoopAnimationsModule.ctorParameters = function() {
return [];
};
exports.BrowserAnimationsModule = BrowserAnimationsModule;
exports.NoopAnimationsModule = NoopAnimationsModule;
exports.ɵAnimationRenderer = AnimationRenderer;
exports.ɵAnimationRendererFactory = AnimationRendererFactory;
exports.ɵe = BROWSER_ANIMATIONS_PROVIDERS;
exports.ɵf = BROWSER_NOOP_ANIMATIONS_PROVIDERS;
exports.ɵa = InjectableAnimationEngine;
exports.ɵc = instantiateDefaultStyleNormalizer;
exports.ɵd = instantiateRendererFactory;
exports.ɵb = instantiateSupportedAnimationDriver;
Object.defineProperty(exports, "__esModule", {
value: true
});
});
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var browser_1 = __webpack_require__(154);
var dom_utils_1 = __webpack_require__(241);
var MARKED_FOR_ANIMATION_CLASSNAME = "ng-animating";
var MARKED_FOR_ANIMATION_SELECTOR = ".ng-animating";
var NativeScriptAnimationEngine = function(_super) {
__extends(NativeScriptAnimationEngine, _super);
function NativeScriptAnimationEngine() {
return _super !== null && _super.apply(this, arguments) || this;
}
NativeScriptAnimationEngine.prototype.animateTransition = function(element, instruction) {
var _this = this;
var triggerName = instruction.triggerName;
var previousPlayers;
if (instruction.isRemovalTransition) {
previousPlayers = this._onRemovalTransitionOverride(element);
} else {
previousPlayers = [];
var existingTransitions = this._getTransitionAnimation(element);
var existingPlayer = existingTransitions ? existingTransitions[triggerName] : null;
if (existingPlayer) {
previousPlayers.push(existingPlayer);
}
}
dom_utils_1.eraseStylesOverride(element, instruction.fromStyles);
var totalTime = 0;
var players = instruction.timelines.map(function(timelineInstruction, i) {
totalTime = Math.max(totalTime, timelineInstruction.totalTime);
return _this._buildPlayer(element, timelineInstruction, previousPlayers, i);
});
previousPlayers.forEach(function(previousPlayer) {
return previousPlayer.destroy();
});
var player = dom_utils_1.optimizeGroupPlayer(players);
player.onDone(function() {
player.destroy();
var elmTransitionMap = _this._getTransitionAnimation(element);
if (elmTransitionMap) {
delete elmTransitionMap[triggerName];
if (Object.keys(elmTransitionMap).length === 0) {
_this._activeTransitionAnimations.delete(element);
}
}
dom_utils_1.deleteFromArrayMap(_this._activeElementAnimations, element, player);
dom_utils_1.setStyles(element, instruction.toStyles);
});
var elmTransitionMap = dom_utils_1.getOrSetAsInMap(this._activeTransitionAnimations, element, {});
elmTransitionMap[triggerName] = player;
this._queuePlayerOverride(element, triggerName, player, dom_utils_1.makeAnimationEvent(element, triggerName, instruction.fromState, instruction.toState, null, totalTime));
return player;
};
NativeScriptAnimationEngine.prototype._onRemovalTransitionOverride = function(element) {
var elms = [];
element.eachChild(function(child) {
if (dom_utils_1.cssClasses(child).get(MARKED_FOR_ANIMATION_SELECTOR)) {
elms.push(child);
}
return true;
});
var _loop_1 = function(i) {
var elm = elms[i];
var activePlayers = this_1._getElementAnimation(elm);
if (activePlayers) {
activePlayers.forEach(function(player) {
return player.destroy();
});
}
var activeTransitions = this_1._getTransitionAnimation(elm);
if (activeTransitions) {
Object.keys(activeTransitions).forEach(function(triggerName) {
var player = activeTransitions[triggerName];
if (player) {
player.destroy();
}
});
}
};
var this_1 = this;
for (var i = 0; i < elms.length; i++) {
_loop_1(i);
}
return dom_utils_1.copyArray(this._getElementAnimation(element));
};
NativeScriptAnimationEngine.prototype._queuePlayerOverride = function(element, triggerName, player, event) {
var tuple = {
element: element,
player: player,
triggerName: triggerName,
event: event
};
this._queuedTransitionAnimations.push(tuple);
player.init();
dom_utils_1.cssClasses(element).set(MARKED_FOR_ANIMATION_CLASSNAME, true);
player.onDone(function() {
return dom_utils_1.cssClasses(element).set(MARKED_FOR_ANIMATION_CLASSNAME, false);
});
};
NativeScriptAnimationEngine.prototype._getElementAnimation = function(element) {
return this._activeElementAnimations.get(element);
};
NativeScriptAnimationEngine.prototype._getTransitionAnimation = function(element) {
return this._activeTransitionAnimations.get(element);
};
return NativeScriptAnimationEngine;
}(browser_1.ɵDomAnimationEngine);
exports.NativeScriptAnimationEngine = NativeScriptAnimationEngine;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var animations_1 = __webpack_require__(147);
var view_1 = __webpack_require__(12);
function eraseStylesOverride(element, styles) {
if (element["style"]) {
Object.keys(styles).forEach(function(prop) {
element.style[prop] = view_1.unsetValue;
});
}
}
exports.eraseStylesOverride = eraseStylesOverride;
function cssClasses(element) {
if (!element.ngCssClasses) {
element.ngCssClasses = new Map();
}
return element.ngCssClasses;
}
exports.cssClasses = cssClasses;
function getOrSetAsInMap(map, key, defaultValue) {
var value = map.get(key);
if (!value) {
map.set(key, value = defaultValue);
}
return value;
}
exports.getOrSetAsInMap = getOrSetAsInMap;
function deleteFromArrayMap(map, key, value) {
var arr = map.get(key);
if (arr) {
var index = arr.indexOf(value);
if (index >= 0) {
arr.splice(index, 1);
if (arr.length === 0) {
map.delete(key);
}
}
}
}
exports.deleteFromArrayMap = deleteFromArrayMap;
function optimizeGroupPlayer(players) {
switch (players.length) {
case 0:
return new animations_1.NoopAnimationPlayer();

case 1:
return players[0];

default:
return new animations_1.ɵAnimationGroupPlayer(players);
}
}
exports.optimizeGroupPlayer = optimizeGroupPlayer;
function copyArray(source) {
return source ? source.splice(0) : [];
}
exports.copyArray = copyArray;
function makeAnimationEvent(element, triggerName, fromState, toState, phaseName, totalTime) {
return {
element: element,
triggerName: triggerName,
fromState: fromState,
toState: toState,
phaseName: phaseName,
totalTime: totalTime
};
}
exports.makeAnimationEvent = makeAnimationEvent;
function setStyles(element, styles) {
if (element["style"]) {
Object.keys(styles).forEach(function(prop) {
return element.style[prop] = styles[prop];
});
}
}
exports.setStyles = setStyles;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var animation_player_1 = __webpack_require__(243);
var AnimationDriver = function() {
function AnimationDriver() {}
return AnimationDriver;
}();
exports.AnimationDriver = AnimationDriver;
var NativeScriptAnimationDriver = function() {
function NativeScriptAnimationDriver() {}
NativeScriptAnimationDriver.prototype.computeStyle = function(element, prop) {
return element.style["css-" + prop];
};
NativeScriptAnimationDriver.prototype.animate = function(element, keyframes, duration, delay, easing) {
return new animation_player_1.NativeScriptAnimationPlayer(element, keyframes, duration, delay, easing);
};
return NativeScriptAnimationDriver;
}();
exports.NativeScriptAnimationDriver = NativeScriptAnimationDriver;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var keyframe_animation_1 = __webpack_require__(50);
var utils_1 = __webpack_require__(244);
var NativeScriptAnimationPlayer = function() {
function NativeScriptAnimationPlayer(target, keyframes, duration, delay, easing) {
this.target = target;
this.parentPlayer = null;
this._startSubscriptions = [];
this._doneSubscriptions = [];
this._finished = false;
this._started = false;
this.initKeyframeAnimation(keyframes, duration, delay, easing);
}
NativeScriptAnimationPlayer.prototype.init = function() {};
NativeScriptAnimationPlayer.prototype.hasStarted = function() {
return this._started;
};
NativeScriptAnimationPlayer.prototype.onStart = function(fn) {
this._startSubscriptions.push(fn);
};
NativeScriptAnimationPlayer.prototype.onDone = function(fn) {
this._doneSubscriptions.push(fn);
};
NativeScriptAnimationPlayer.prototype.onDestroy = function(fn) {
this._doneSubscriptions.push(fn);
};
NativeScriptAnimationPlayer.prototype.play = function() {
var _this = this;
if (!this.animation) {
return;
}
if (!this._started) {
this._started = true;
this._startSubscriptions.forEach(function(fn) {
return fn();
});
this._startSubscriptions = [];
}
this.animation.play(this.target).then(function() {
return _this.onFinish();
}).catch(function(_e) {});
};
NativeScriptAnimationPlayer.prototype.pause = function() {
throw new Error("AnimationPlayer.pause method is not supported!");
};
NativeScriptAnimationPlayer.prototype.finish = function() {
throw new Error("AnimationPlayer.finish method is not supported!");
};
NativeScriptAnimationPlayer.prototype.reset = function() {
if (this.animation && this.animation.isPlaying) {
this.animation.cancel();
}
};
NativeScriptAnimationPlayer.prototype.restart = function() {
this.reset();
this.play();
};
NativeScriptAnimationPlayer.prototype.destroy = function() {
this.reset();
this.onFinish();
};
NativeScriptAnimationPlayer.prototype.setPosition = function(_p) {
throw new Error("AnimationPlayer.setPosition method is not supported!");
};
NativeScriptAnimationPlayer.prototype.getPosition = function() {
return 0;
};
NativeScriptAnimationPlayer.prototype.initKeyframeAnimation = function(keyframes, duration, delay, easing) {
var info = new keyframe_animation_1.KeyframeAnimationInfo();
info.isForwards = true;
info.iterations = 1;
info.duration = duration === 0 ? .01 : duration;
info.delay = delay;
info.curve = utils_1.getAnimationCurve(easing);
info.keyframes = keyframes.map(utils_1.parseAnimationKeyframe);
this.animation = keyframe_animation_1.KeyframeAnimation.keyframeAnimationFromInfo(info);
};
NativeScriptAnimationPlayer.prototype.onFinish = function() {
if (!this._finished) {
this._finished = true;
this._started = false;
this._doneSubscriptions.forEach(function(fn) {
return fn();
});
this._doneSubscriptions = [];
}
};
return NativeScriptAnimationPlayer;
}();
exports.NativeScriptAnimationPlayer = NativeScriptAnimationPlayer;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var properties_1 = __webpack_require__(34);
var enums_1 = __webpack_require__(245);
var TRANSFORM_MATCHER = new RegExp(/(.+)\((.+)\)/);
var TRANSFORM_SPLITTER = new RegExp(/[\s,]+/);
var STYLE_TRANSFORMATION_MAP = Object.freeze({
scale: function(value) {
return {
property: "scale",
value: value
};
},
scale3d: function(value) {
return {
property: "scale",
value: value
};
},
scaleX: function(value) {
return {
property: "scale",
value: {
x: value,
y: 1
}
};
},
scaleY: function(value) {
return {
property: "scale",
value: {
x: 1,
y: value
}
};
},
translate: function(value) {
return {
property: "translate",
value: value
};
},
translate3d: function(value) {
return {
property: "translate",
value: value
};
},
translateX: function(value) {
return {
property: "translate",
value: {
x: value,
y: 0
}
};
},
translateY: function(value) {
return {
property: "translate",
value: {
x: 0,
y: value
}
};
},
rotate: function(value) {
return {
property: "rotate",
value: value
};
},
none: function(_value) {
return [ {
property: "scale",
value: {
x: 1,
y: 1
}
}, {
property: "translate",
value: {
x: 0,
y: 0
}
}, {
property: "rotate",
value: 0
} ];
}
});
var STYLE_CURVE_MAP = Object.freeze({
ease: enums_1.AnimationCurve.ease,
linear: enums_1.AnimationCurve.linear,
"ease-in": enums_1.AnimationCurve.easeIn,
"ease-out": enums_1.AnimationCurve.easeOut,
"ease-in-out": enums_1.AnimationCurve.easeInOut,
spring: enums_1.AnimationCurve.spring
});
function getAnimationCurve(value) {
if (!value) {
return enums_1.AnimationCurve.ease;
}
var curve = STYLE_CURVE_MAP[value];
if (curve) {
return curve;
}
var _a = TRANSFORM_MATCHER.exec(value) || [], _b = _a[1], property = _b === void 0 ? "" : _b, _c = _a[2], pointsString = _c === void 0 ? "" : _c;
var coords = pointsString.split(TRANSFORM_SPLITTER).map(stringToBezieCoords);
if (property !== "cubic-bezier" || coords.length !== 4) {
throw new Error("Invalid value for animation: " + value);
} else {
return (_d = enums_1.AnimationCurve).cubicBezier.apply(_d, coords);
}
var _d;
}
exports.getAnimationCurve = getAnimationCurve;
function parseAnimationKeyframe(styles) {
var keyframeInfo = {};
keyframeInfo.duration = styles.offset;
keyframeInfo.declarations = Object.keys(styles).reduce(function(declarations, prop) {
var value = styles[prop];
var property = properties_1.CssAnimationProperty._getByCssName(prop);
if (property) {
if (typeof value === "string" && property._valueConverter) {
value = property._valueConverter(value);
}
declarations.push({
property: property.name,
value: value
});
} else if (typeof value === "string" && prop === "transform") {
declarations.push.apply(declarations, parseTransformation(value));
}
return declarations;
}, new Array());
return keyframeInfo;
}
exports.parseAnimationKeyframe = parseAnimationKeyframe;
function stringToBezieCoords(value) {
var result = parseFloat(value);
if (result < 0) {
return 0;
} else if (result > 1) {
return 1;
}
return result;
}
function parseTransformation(styleString) {
return parseStyle(styleString).reduce(function(transformations, style) {
var transform = STYLE_TRANSFORMATION_MAP[style.property](style.value);
if (Array.isArray(transform)) {
transformations.push.apply(transformations, transform);
} else if (typeof transform !== "undefined") {
transformations.push(transform);
}
return transformations;
}, new Array());
}
function parseStyle(text) {
return text.split(TRANSFORM_SPLITTER).map(stringToTransformation).filter(function(t) {
return !!t;
});
}
function stringToTransformation(text) {
var _a = TRANSFORM_MATCHER.exec(text) || [], _b = _a[1], property = _b === void 0 ? "" : _b, _c = _a[2], stringValue = _c === void 0 ? "" : _c;
if (!property) {
return;
}
var _d = stringValue.split(",").map(parseFloat), x = _d[0], y = _d[1];
if (x && y) {
return {
property: property,
value: {
x: x,
y: y
}
};
} else {
var value = x;
if (stringValue.slice(-3) === "rad") {
value *= 180 / Math.PI;
}
return {
property: property,
value: value
};
}
}
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var KeyboardType;
(function(KeyboardType) {
KeyboardType.datetime = "datetime";
KeyboardType.phone = "phone";
KeyboardType.number = "number";
KeyboardType.url = "url";
KeyboardType.email = "email";
})(KeyboardType = exports.KeyboardType || (exports.KeyboardType = {}));
var ReturnKeyType;
(function(ReturnKeyType) {
ReturnKeyType.done = "done";
ReturnKeyType.next = "next";
ReturnKeyType.go = "go";
ReturnKeyType.search = "search";
ReturnKeyType.send = "send";
})(ReturnKeyType = exports.ReturnKeyType || (exports.ReturnKeyType = {}));
var TextAlignment;
(function(TextAlignment) {
TextAlignment.left = "left";
TextAlignment.center = "center";
TextAlignment.right = "right";
})(TextAlignment = exports.TextAlignment || (exports.TextAlignment = {}));
var TextDecoration;
(function(TextDecoration) {
TextDecoration.none = "none";
TextDecoration.underline = "underline";
TextDecoration.lineThrough = "line-through";
})(TextDecoration = exports.TextDecoration || (exports.TextDecoration = {}));
var TextTransform;
(function(TextTransform) {
TextTransform.none = "none";
TextTransform.capitalize = "capitalize";
TextTransform.uppercase = "uppercase";
TextTransform.lowercase = "lowercase";
})(TextTransform = exports.TextTransform || (exports.TextTransform = {}));
var WhiteSpace;
(function(WhiteSpace) {
WhiteSpace.normal = "normal";
WhiteSpace.nowrap = "nowrap";
})(WhiteSpace = exports.WhiteSpace || (exports.WhiteSpace = {}));
var Orientation;
(function(Orientation) {
Orientation.horizontal = "horizontal";
Orientation.vertical = "vertical";
})(Orientation = exports.Orientation || (exports.Orientation = {}));
var DeviceOrientation;
(function(DeviceOrientation) {
DeviceOrientation.portrait = "portrait";
DeviceOrientation.landscape = "landscape";
DeviceOrientation.unknown = "unknown";
})(DeviceOrientation = exports.DeviceOrientation || (exports.DeviceOrientation = {}));
var HorizontalAlignment;
(function(HorizontalAlignment) {
HorizontalAlignment.left = "left";
HorizontalAlignment.center = "center";
HorizontalAlignment.right = "right";
HorizontalAlignment.stretch = "stretch";
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));
var VerticalAlignment;
(function(VerticalAlignment) {
VerticalAlignment.top = "top";
VerticalAlignment.middle = "middle";
VerticalAlignment.bottom = "bottom";
VerticalAlignment.stretch = "stretch";
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));
var Stretch;
(function(Stretch) {
Stretch.none = "none";
Stretch.aspectFill = "aspectFill";
Stretch.aspectFit = "aspectFit";
Stretch.fill = "fill";
})(Stretch = exports.Stretch || (exports.Stretch = {}));
var Visibility;
(function(Visibility) {
Visibility.visible = "visible";
Visibility.collapse = "collapse";
Visibility.collapsed = "collapsed";
})(Visibility = exports.Visibility || (exports.Visibility = {}));
var FontAttributes;
(function(FontAttributes) {
FontAttributes.Normal = 0;
FontAttributes.Bold = 1;
FontAttributes.Italic = 1 << 1;
})(FontAttributes = exports.FontAttributes || (exports.FontAttributes = {}));
var DeviceType;
(function(DeviceType) {
DeviceType.Phone = "Phone";
DeviceType.Tablet = "Tablet";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));
var UpdateTextTrigger;
(function(UpdateTextTrigger) {
UpdateTextTrigger.focusLost = "focusLost";
UpdateTextTrigger.textChanged = "textChanged";
})(UpdateTextTrigger = exports.UpdateTextTrigger || (exports.UpdateTextTrigger = {}));
var Accuracy;
(function(Accuracy) {
Accuracy.any = 300;
Accuracy.high = 3;
})(Accuracy = exports.Accuracy || (exports.Accuracy = {}));
var Dock;
(function(Dock) {
Dock.left = "left";
Dock.top = "top";
Dock.right = "right";
Dock.bottom = "bottom";
})(Dock = exports.Dock || (exports.Dock = {}));
var AutocapitalizationType;
(function(AutocapitalizationType) {
AutocapitalizationType.none = "none";
AutocapitalizationType.words = "words";
AutocapitalizationType.sentences = "sentences";
AutocapitalizationType.allCharacters = "allcharacters";
})(AutocapitalizationType = exports.AutocapitalizationType || (exports.AutocapitalizationType = {}));
var NavigationBarVisibility;
(function(NavigationBarVisibility) {
NavigationBarVisibility.auto = "auto";
NavigationBarVisibility.never = "never";
NavigationBarVisibility.always = "always";
})(NavigationBarVisibility = exports.NavigationBarVisibility || (exports.NavigationBarVisibility = {}));
var AndroidActionBarIconVisibility;
(function(AndroidActionBarIconVisibility) {
AndroidActionBarIconVisibility.auto = "auto";
AndroidActionBarIconVisibility.never = "never";
AndroidActionBarIconVisibility.always = "always";
})(AndroidActionBarIconVisibility = exports.AndroidActionBarIconVisibility || (exports.AndroidActionBarIconVisibility = {}));
var AndroidActionItemPosition;
(function(AndroidActionItemPosition) {
AndroidActionItemPosition.actionBar = "actionBar";
AndroidActionItemPosition.actionBarIfRoom = "actionBarIfRoom";
AndroidActionItemPosition.popup = "popup";
})(AndroidActionItemPosition = exports.AndroidActionItemPosition || (exports.AndroidActionItemPosition = {}));
var IOSActionItemPosition;
(function(IOSActionItemPosition) {
IOSActionItemPosition.left = "left";
IOSActionItemPosition.right = "right";
})(IOSActionItemPosition = exports.IOSActionItemPosition || (exports.IOSActionItemPosition = {}));
var ImageFormat;
(function(ImageFormat) {
ImageFormat.png = "png";
ImageFormat.jpeg = "jpeg";
ImageFormat.jpg = "jpg";
})(ImageFormat = exports.ImageFormat || (exports.ImageFormat = {}));
var FontStyle;
(function(FontStyle) {
FontStyle.normal = "normal";
FontStyle.italic = "italic";
})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));
var FontWeight;
(function(FontWeight) {
FontWeight.thin = "100";
FontWeight.extraLight = "200";
FontWeight.light = "300";
FontWeight.normal = "normal";
FontWeight.medium = "500";
FontWeight.semiBold = "600";
FontWeight.bold = "bold";
FontWeight.extraBold = "800";
FontWeight.black = "900";
})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));
var BackgroundRepeat;
(function(BackgroundRepeat) {
BackgroundRepeat.repeat = "repeat";
BackgroundRepeat.repeatX = "repeat-x";
BackgroundRepeat.repeatY = "repeat-y";
BackgroundRepeat.noRepeat = "no-repeat";
})(BackgroundRepeat = exports.BackgroundRepeat || (exports.BackgroundRepeat = {}));
var animationModule;
var AnimationCurve;
(function(AnimationCurve) {
AnimationCurve.ease = "ease";
AnimationCurve.easeIn = "easeIn";
AnimationCurve.easeOut = "easeOut";
AnimationCurve.easeInOut = "easeInOut";
AnimationCurve.linear = "linear";
AnimationCurve.spring = "spring";
function cubicBezier(x1, y1, x2, y2) {
animationModule = animationModule || __webpack_require__(51);
return new animationModule.CubicBezierAnimationCurve(x1, y1, x2, y2);
}
AnimationCurve.cubicBezier = cubicBezier;
})(AnimationCurve = exports.AnimationCurve || (exports.AnimationCurve = {}));
var StatusBarStyle;
(function(StatusBarStyle) {
StatusBarStyle.light = "light";
StatusBarStyle.dark = "dark";
})(StatusBarStyle = exports.StatusBarStyle || (exports.StatusBarStyle = {}));
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
__webpack_require__(5);
__webpack_require__(18);
__webpack_require__(88);
__webpack_require__(89);
__webpack_require__(90);
__webpack_require__(91);
var common_1 = __webpack_require__(159);
var renderer_1 = __webpack_require__(247);
var detached_loader_1 = __webpack_require__(252);
var dialogs_1 = __webpack_require__(253);
var core_1 = __webpack_require__(92);
var platform_providers_1 = __webpack_require__(127);
var directives_1 = __webpack_require__(254);
function errorHandlerFactory() {
return new core_1.ErrorHandler(true);
}
exports.errorHandlerFactory = errorHandlerFactory;
var NativeScriptModule = function() {
function NativeScriptModule() {}
return NativeScriptModule;
}();
NativeScriptModule = __decorate([ core_1.NgModule({
declarations: [ detached_loader_1.DetachedLoader, dialogs_1.ModalDialogHost ].concat(directives_1.NS_DIRECTIVES),
providers: [ {
provide: core_1.ErrorHandler,
useFactory: errorHandlerFactory
}, platform_providers_1.defaultFrameProvider, platform_providers_1.defaultPageProvider, platform_providers_1.defaultDeviceProvider, renderer_1.NativeScriptRendererFactory, {
provide: core_1.RendererFactory2,
useClass: renderer_1.NativeScriptRendererFactory
}, dialogs_1.ModalDialogService ],
entryComponents: [ detached_loader_1.DetachedLoader ],
imports: [ common_1.CommonModule, core_1.ApplicationModule ],
exports: [ common_1.CommonModule, core_1.ApplicationModule, detached_loader_1.DetachedLoader, dialogs_1.ModalDialogHost ].concat(directives_1.NS_DIRECTIVES),
schemas: [ core_1.NO_ERRORS_SCHEMA ]
}) ], NativeScriptModule);
exports.NativeScriptModule = NativeScriptModule;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var view_1 = __webpack_require__(12);
var application_1 = __webpack_require__(18);
var frame_1 = __webpack_require__(10);
var platform_providers_1 = __webpack_require__(127);
var lang_facade_1 = __webpack_require__(143);
var view_util_1 = __webpack_require__(248);
var trace_1 = __webpack_require__(126);
var COMPONENT_REGEX = /%COMP%/g;
exports.COMPONENT_VARIABLE = "%COMP%";
exports.HOST_ATTR = "_nghost-" + exports.COMPONENT_VARIABLE;
exports.CONTENT_ATTR = "_ngcontent-" + exports.COMPONENT_VARIABLE;
var ATTR_SANITIZER = /-/g;
var NativeScriptRendererFactory = function() {
function NativeScriptRendererFactory(rootView, device, zone) {
this.zone = zone;
this.componentRenderers = new Map();
this.viewUtil = new view_util_1.ViewUtil(device);
this.setRootNgView(rootView);
this.defaultRenderer = new NativeScriptRenderer(this.rootNgView, zone, this.viewUtil);
}
NativeScriptRendererFactory.prototype.setRootNgView = function(rootView) {
if (!rootView) {
rootView = platform_providers_1.getRootPage() || frame_1.topmost().currentPage;
}
rootView.nodeName = "NONE";
this.rootNgView = rootView;
};
NativeScriptRendererFactory.prototype.createRenderer = function(element, type) {
if (!element || !type) {
return this.defaultRenderer;
}
var renderer = this.componentRenderers.get(type.id);
if (!lang_facade_1.isBlank(renderer)) {
return renderer;
}
if (type.encapsulation === core_1.ViewEncapsulation.Emulated) {
renderer = new EmulatedRenderer(type, this.rootNgView, this.zone, this.viewUtil);
renderer.applyToHost(element);
} else {
renderer = this.defaultRenderer;
}
this.componentRenderers.set(type.id, renderer);
return renderer;
};
return NativeScriptRendererFactory;
}();
NativeScriptRendererFactory = __decorate([ core_1.Injectable(), __param(0, core_1.Optional()), __param(0, core_1.Inject(platform_providers_1.APP_ROOT_VIEW)), __param(1, core_1.Inject(platform_providers_1.DEVICE)), __metadata("design:paramtypes", [ view_1.View, Object, core_1.NgZone ]) ], NativeScriptRendererFactory);
exports.NativeScriptRendererFactory = NativeScriptRendererFactory;
var NativeScriptRenderer = function(_super) {
__extends(NativeScriptRenderer, _super);
function NativeScriptRenderer(rootView, zone, viewUtil) {
var _this = _super.call(this) || this;
_this.rootView = rootView;
_this.zone = zone;
_this.viewUtil = viewUtil;
_this.data = Object.create(null);
trace_1.rendererLog("NativeScriptRenderer created");
return _this;
}
NativeScriptRenderer.prototype.appendChild = function(parent, newChild) {
trace_1.rendererLog("NativeScriptRenderer.appendChild child: " + newChild + " parent: " + parent);
if (parent) {
this.viewUtil.insertChild(parent, newChild);
}
};
NativeScriptRenderer.prototype.insertBefore = function(parent, newChild, refChildIndex) {
trace_1.rendererLog("NativeScriptRenderer.insertBefore child: " + newChild + " parent: " + parent);
if (parent) {
this.viewUtil.insertChild(parent, newChild, refChildIndex);
}
};
NativeScriptRenderer.prototype.removeChild = function(parent, oldChild) {
trace_1.rendererLog("NativeScriptRenderer.removeChild child: " + oldChild + " parent: " + parent);
if (parent) {
this.viewUtil.removeChild(parent, oldChild);
}
};
NativeScriptRenderer.prototype.selectRootElement = function(selector) {
trace_1.rendererLog("selectRootElement: " + selector);
return this.rootView;
};
NativeScriptRenderer.prototype.parentNode = function(node) {
return node.parent;
};
NativeScriptRenderer.prototype.nextSibling = function(node) {
trace_1.rendererLog("NativeScriptRenderer.nextSibling " + node);
return this.viewUtil.nextSiblingIndex(node);
};
NativeScriptRenderer.prototype.createComment = function(_value) {
trace_1.rendererLog("NativeScriptRenderer.createComment " + _value);
return this.viewUtil.createComment();
};
NativeScriptRenderer.prototype.createElement = function(name, _namespace) {
trace_1.rendererLog("NativeScriptRenderer.createElement: " + name);
return this.viewUtil.createView(name);
};
NativeScriptRenderer.prototype.createText = function(_value) {
trace_1.rendererLog("NativeScriptRenderer.createText " + _value);
return this.viewUtil.createText();
};
NativeScriptRenderer.prototype.createViewRoot = function(hostElement) {
trace_1.rendererLog("NativeScriptRenderer.createViewRoot " + hostElement.nodeName);
return hostElement;
};
NativeScriptRenderer.prototype.projectNodes = function(parentElement, nodes) {
var _this = this;
trace_1.rendererLog("NativeScriptRenderer.projectNodes");
nodes.forEach(function(node) {
return _this.viewUtil.insertChild(parentElement, node);
});
};
NativeScriptRenderer.prototype.destroy = function() {
trace_1.rendererLog("NativeScriptRenderer.destroy");
};
NativeScriptRenderer.prototype.setAttribute = function(view, name, value, namespace) {
trace_1.rendererLog("NativeScriptRenderer.setAttribute " + view + " : " + name + " = " + value + ", namespace: " + namespace);
return this.viewUtil.setProperty(view, name, value, namespace);
};
NativeScriptRenderer.prototype.removeAttribute = function(_el, _name) {
trace_1.rendererLog("NativeScriptRenderer.removeAttribute " + _el + ": " + _name);
};
NativeScriptRenderer.prototype.setProperty = function(view, name, value) {
trace_1.rendererLog("NativeScriptRenderer.setProperty " + view + " : " + name + " = " + value);
return this.viewUtil.setProperty(view, name, value);
};
NativeScriptRenderer.prototype.addClass = function(view, name) {
trace_1.rendererLog("NativeScriptRenderer.addClass " + name);
this.viewUtil.addClass(view, name);
};
NativeScriptRenderer.prototype.removeClass = function(view, name) {
trace_1.rendererLog("NativeScriptRenderer.removeClass " + name);
this.viewUtil.removeClass(view, name);
};
NativeScriptRenderer.prototype.setStyle = function(view, styleName, value, _flags) {
trace_1.rendererLog("NativeScriptRenderer.setStyle: " + styleName + " = " + value);
this.viewUtil.setStyle(view, styleName, value);
};
NativeScriptRenderer.prototype.removeStyle = function(view, styleName, _flags) {
trace_1.rendererLog("NativeScriptRenderer.removeStyle: ${styleName}");
this.viewUtil.removeStyle(view, styleName);
};
NativeScriptRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
trace_1.rendererLog("NativeScriptRenderer.setBindingDebugInfo: " + renderElement + ", " + propertyName + " = " + propertyValue);
};
NativeScriptRenderer.prototype.setElementDebugInfo = function(renderElement, _info) {
trace_1.rendererLog("NativeScriptRenderer.setElementDebugInfo: " + renderElement);
};
NativeScriptRenderer.prototype.invokeElementMethod = function(_renderElement, methodName, args) {
trace_1.rendererLog("NativeScriptRenderer.invokeElementMethod " + methodName + " " + args);
};
NativeScriptRenderer.prototype.setValue = function(_renderNode, _value) {
trace_1.rendererLog("NativeScriptRenderer.setValue");
};
NativeScriptRenderer.prototype.listen = function(renderElement, eventName, callback) {
var _this = this;
trace_1.rendererLog("NativeScriptRenderer.listen: " + eventName);
var zonedCallback = function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i] = arguments[_i];
}
_this.zone.run(function() {
callback.apply(undefined, args);
});
};
renderElement.on(eventName, zonedCallback);
if (eventName === view_1.View.loadedEvent && renderElement.isLoaded) {
var notifyData = {
eventName: view_1.View.loadedEvent,
object: renderElement
};
zonedCallback(notifyData);
}
return function() {
return renderElement.off(eventName, zonedCallback);
};
};
return NativeScriptRenderer;
}(core_1.Renderer2);
exports.NativeScriptRenderer = NativeScriptRenderer;
var EmulatedRenderer = function(_super) {
__extends(EmulatedRenderer, _super);
function EmulatedRenderer(component, rootView, zone, viewUtil) {
var _this = _super.call(this, rootView, zone, viewUtil) || this;
var componentId = component.id.replace(ATTR_SANITIZER, "_");
_this.contentAttr = replaceNgAttribute(exports.CONTENT_ATTR, componentId);
_this.hostAttr = replaceNgAttribute(exports.HOST_ATTR, componentId);
_this.addStyles(component.styles, componentId);
return _this;
}
EmulatedRenderer.prototype.applyToHost = function(view) {
_super.prototype.setAttribute.call(this, view, this.hostAttr, "");
};
EmulatedRenderer.prototype.appendChild = function(parent, newChild) {
_super.prototype.appendChild.call(this, parent, newChild);
};
EmulatedRenderer.prototype.createElement = function(parent, name) {
var view = _super.prototype.createElement.call(this, parent, name);
_super.prototype.setAttribute.call(this, view, this.contentAttr, "");
return view;
};
EmulatedRenderer.prototype.addStyles = function(styles, componentId) {
styles.map(function(s) {
return s.toString();
}).map(function(s) {
return replaceNgAttribute(s, componentId);
}).forEach(application_1.addCss);
};
return EmulatedRenderer;
}(NativeScriptRenderer);
function replaceNgAttribute(input, componentId) {
return input.replace(COMPONENT_REGEX, componentId);
}
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var types_1 = __webpack_require__(17);
var view_1 = __webpack_require__(12);
var content_view_1 = __webpack_require__(130);
var layout_base_1 = __webpack_require__(135);
var element_registry_1 = __webpack_require__(249);
var platform_1 = __webpack_require__(25);
var trace_1 = __webpack_require__(126);
var XML_ATTRIBUTES = Object.freeze([ "style", "rows", "columns", "fontAttributes" ]);
var ELEMENT_NODE_TYPE = 1;
var whiteSpaceSplitter = /\s+/;
function isView(view) {
return view instanceof view_1.View;
}
exports.isView = isView;
function isLayout(view) {
return view instanceof layout_base_1.LayoutBase;
}
exports.isLayout = isLayout;
function isContentView(view) {
return view instanceof content_view_1.ContentView;
}
exports.isContentView = isContentView;
var propertyMaps = new Map();
var ViewUtil = function() {
function ViewUtil(device) {
this.isIos = device.os === platform_1.platformNames.ios;
this.isAndroid = device.os === platform_1.platformNames.android;
}
ViewUtil.prototype.insertChild = function(parent, child, atIndex) {
if (atIndex === void 0) {
atIndex = -1;
}
if (!parent || child.meta.skipAddToDom) {
return;
}
if (parent.meta && parent.meta.insertChild) {
parent.meta.insertChild(parent, child, atIndex);
} else if (isLayout(parent)) {
if (child.parent === parent) {
var index = parent.getChildIndex(child);
if (index !== -1) {
parent.removeChild(child);
}
}
if (atIndex !== -1) {
parent.insertChild(child, atIndex);
} else {
parent.addChild(child);
}
} else if (isContentView(parent)) {
if (child.nodeName === "#comment") {
parent._addView(child, atIndex);
} else {
parent.content = child;
}
} else if (parent && parent._addChildFromBuilder) {
parent._addChildFromBuilder(child.nodeName, child);
} else {}
};
ViewUtil.prototype.removeChild = function(parent, child) {
if (!parent || child.meta.skipAddToDom) {
return;
}
if (parent.meta && parent.meta.removeChild) {
parent.meta.removeChild(parent, child);
} else if (isLayout(parent)) {
parent.removeChild(child);
} else if (isContentView(parent)) {
if (parent.content === child) {
parent.content = null;
}
if (child.nodeName === "#comment") {
parent._removeView(child);
}
} else if (isView(parent)) {
parent._removeView(child);
} else {}
};
ViewUtil.prototype.getChildIndex = function(parent, child) {
if (isLayout(parent)) {
return parent.getChildIndex(child);
} else if (isContentView(parent)) {
return child === parent.content ? 0 : -1;
} else {}
};
ViewUtil.prototype.createComment = function() {
var commentView = this.createView("Comment");
commentView.nodeName = "#comment";
commentView.visibility = "collapse";
return commentView;
};
ViewUtil.prototype.createText = function() {
var detachedText = this.createView("DetachedText");
detachedText.nodeName = "#text";
detachedText.visibility = "collapse";
return detachedText;
};
ViewUtil.prototype.createView = function(name) {
trace_1.rendererLog("Creating view: " + name);
if (!element_registry_1.isKnownView(name)) {
name = "ProxyViewContainer";
}
var viewClass = element_registry_1.getViewClass(name);
var view = new viewClass();
view.nodeName = name;
view.meta = element_registry_1.getViewMeta(name);
view.nodeType = ELEMENT_NODE_TYPE;
return view;
};
ViewUtil.prototype.setProperty = function(view, attributeName, value, namespace) {
if (namespace && !this.runsIn(namespace)) {
return;
}
if (attributeName.indexOf(".") !== -1) {
var properties = attributeName.split(".");
attributeName = properties[properties.length - 1];
var propMap = this.getProperties(view);
var i = 0;
while (i < properties.length - 1 && types_1.isDefined(view)) {
var prop = properties[i];
if (propMap.has(prop)) {
prop = propMap.get(prop);
}
view = view[prop];
propMap = this.getProperties(view);
i++;
}
}
if (types_1.isDefined(view)) {
this.setPropertyInternal(view, attributeName, value);
}
};
ViewUtil.prototype.nextSiblingIndex = function(node) {
var parent = node.parent;
if (!parent) {
return -1;
}
var index = 0;
var found = false;
parent.eachChild(function(child) {
if (child === node) {
found = true;
}
index += 1;
return !found;
});
return found ? index : -1;
};
ViewUtil.prototype.runsIn = function(platform) {
return platform === "ios" && this.isIos || platform === "android" && this.isAndroid;
};
ViewUtil.prototype.setPropertyInternal = function(view, attributeName, value) {
trace_1.rendererLog("Setting attribute: " + attributeName);
var propMap = this.getProperties(view);
if (attributeName === "class") {
this.setClasses(view, value);
} else if (XML_ATTRIBUTES.indexOf(attributeName) !== -1) {
view._applyXmlAttribute(attributeName, value);
} else if (propMap.has(attributeName)) {
var propertyName = propMap.get(attributeName);
view[propertyName] = this.convertValue(value);
} else {
view[attributeName] = this.convertValue(value);
}
};
ViewUtil.prototype.convertValue = function(value) {
if (typeof value !== "string" || value === "") {
return value;
}
var valueAsNumber = +value;
if (!isNaN(valueAsNumber)) {
return valueAsNumber;
} else if (value && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
return value.toLowerCase() === "true" ? true : false;
} else {
return value;
}
};
ViewUtil.prototype.getProperties = function(instance) {
var type = instance && instance.constructor;
if (!type) {
return new Map();
}
if (!propertyMaps.has(type)) {
var propMap = new Map();
for (var propName in instance) {
propMap.set(propName.toLowerCase(), propName);
}
propertyMaps.set(type, propMap);
}
return propertyMaps.get(type);
};
ViewUtil.prototype.cssClasses = function(view) {
if (!view.ngCssClasses) {
view.ngCssClasses = new Map();
}
return view.ngCssClasses;
};
ViewUtil.prototype.addClass = function(view, className) {
this.cssClasses(view).set(className, true);
this.syncClasses(view);
};
ViewUtil.prototype.removeClass = function(view, className) {
this.cssClasses(view).delete(className);
this.syncClasses(view);
};
ViewUtil.prototype.setClasses = function(view, classesValue) {
var _this = this;
var classes = classesValue.split(whiteSpaceSplitter);
this.cssClasses(view).clear();
classes.forEach(function(className) {
return _this.cssClasses(view).set(className, true);
});
this.syncClasses(view);
};
ViewUtil.prototype.syncClasses = function(view) {
var classValue = Array.from(this.cssClasses(view).keys()).join(" ");
view.className = classValue;
};
ViewUtil.prototype.setStyle = function(view, styleName, value) {
view.style[styleName] = value;
};
ViewUtil.prototype.removeStyle = function(view, styleName) {
view.style[styleName] = view_1.unsetValue;
};
return ViewUtil;
}();
exports.ViewUtil = ViewUtil;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var defaultViewMeta = {
skipAddToDom: false
};
var elementMap = new Map();
var camelCaseSplit = /([a-z0-9])([A-Z])/g;
function registerElement(elementName, resolver, meta) {
if (elementMap.has(elementName)) {
throw new Error("Element for " + elementName + " already registered.");
} else {
var entry = {
resolver: resolver,
meta: meta
};
elementMap.set(elementName, entry);
elementMap.set(elementName.toLowerCase(), entry);
elementMap.set(elementName.replace(camelCaseSplit, "$1-$2").toLowerCase(), entry);
}
}
exports.registerElement = registerElement;
function getViewClass(elementName) {
var entry = elementMap.get(elementName) || elementMap.get(elementName.toLowerCase());
if (!entry) {
throw new TypeError("No known component for element " + elementName + ".");
}
try {
return entry.resolver();
} catch (e) {
throw new TypeError("Could not load view for: " + elementName + "." + e);
}
}
exports.getViewClass = getViewClass;
function getViewMeta(nodeName) {
var meta = defaultViewMeta;
var entry = elementMap.get(nodeName) || elementMap.get(nodeName.toLowerCase());
if (entry && entry.meta) {
meta = entry.meta;
}
return meta;
}
exports.getViewMeta = getViewMeta;
function isKnownView(elementName) {
return elementMap.has(elementName) || elementMap.has(elementName.toLowerCase());
}
exports.isKnownView = isKnownView;
registerElement("AbsoluteLayout", function() {
return __webpack_require__(201).AbsoluteLayout;
});
registerElement("ActivityIndicator", function() {
return __webpack_require__(190).ActivityIndicator;
});
registerElement("Border", function() {
return __webpack_require__(192).Border;
});
registerElement("Button", function() {
return __webpack_require__(69).Button;
});
registerElement("ContentView", function() {
return __webpack_require__(130).ContentView;
});
registerElement("DatePicker", function() {
return __webpack_require__(193).DatePicker;
});
registerElement("DockLayout", function() {
return __webpack_require__(203).DockLayout;
});
registerElement("GridLayout", function() {
return __webpack_require__(133).GridLayout;
});
registerElement("HtmlView", function() {
return __webpack_require__(195).HtmlView;
});
registerElement("Image", function() {
return __webpack_require__(197).Image;
});
registerElement("img", function() {
return __webpack_require__(197).Image;
});
registerElement("Label", function() {
return __webpack_require__(80).Label;
});
registerElement("ListPicker", function() {
return __webpack_require__(209).ListPicker;
});
registerElement("ListView", function() {
return __webpack_require__(232).ListView;
});
registerElement("Page", function() {
return __webpack_require__(128).Page;
});
registerElement("Placeholder", function() {
return __webpack_require__(211).Placeholder;
});
registerElement("Progress", function() {
return __webpack_require__(212).Progress;
});
registerElement("ProxyViewContainer", function() {
return __webpack_require__(214).ProxyViewContainer;
});
registerElement("Repeater", function() {
return __webpack_require__(215).Repeater;
});
registerElement("ScrollView", function() {
return __webpack_require__(216).ScrollView;
});
registerElement("SearchBar", function() {
return __webpack_require__(218).SearchBar;
});
registerElement("SegmentedBar", function() {
return __webpack_require__(220).SegmentedBar;
});
registerElement("SegmentedBarItem", function() {
return __webpack_require__(220).SegmentedBarItem;
});
registerElement("Slider", function() {
return __webpack_require__(222).Slider;
});
registerElement("StackLayout", function() {
return __webpack_require__(205).StackLayout;
});
registerElement("FlexboxLayout", function() {
return __webpack_require__(207).FlexboxLayout;
});
registerElement("Switch", function() {
return __webpack_require__(224).Switch;
});
registerElement("TabView", function() {
return __webpack_require__(226).TabView;
});
registerElement("TextField", function() {
return __webpack_require__(76).TextField;
});
registerElement("TextView", function() {
return __webpack_require__(137).TextView;
});
registerElement("TimePicker", function() {
return __webpack_require__(230).TimePicker;
});
registerElement("WebView", function() {
return __webpack_require__(228).WebView;
});
registerElement("WrapLayout", function() {
return __webpack_require__(250).WrapLayout;
});
registerElement("FormattedString", function() {
return __webpack_require__(73).FormattedString;
});
registerElement("Span", function() {
return __webpack_require__(74).Span;
});
registerElement("DetachedContainer", function() {
return __webpack_require__(214).ProxyViewContainer;
}, {
skipAddToDom: true
});
registerElement("DetachedText", function() {
return __webpack_require__(211).Placeholder;
}, {
skipAddToDom: true
});
registerElement("Comment", function() {
return __webpack_require__(211).Placeholder;
}, {
skipAddToDom: false
});
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var wrap_layout_common_1 = __webpack_require__(251);
__export(__webpack_require__(251));
var WrapLayout = function(_super) {
__extends(WrapLayout, _super);
function WrapLayout() {
return _super !== null && _super.apply(this, arguments) || this;
}
WrapLayout.prototype.createNativeView = function() {
return new org.nativescript.widgets.WrapLayout(this._context);
};
WrapLayout.prototype[wrap_layout_common_1.orientationProperty.setNative] = function(value) {
this.nativeView.setOrientation(value === "vertical" ? org.nativescript.widgets.Orientation.vertical : org.nativescript.widgets.Orientation.horizontal);
};
WrapLayout.prototype[wrap_layout_common_1.itemWidthProperty.setNative] = function(value) {
this.nativeView.setItemWidth(wrap_layout_common_1.Length.toDevicePixels(value, -1));
};
WrapLayout.prototype[wrap_layout_common_1.itemHeightProperty.setNative] = function(value) {
this.nativeView.setItemHeight(wrap_layout_common_1.Length.toDevicePixels(value, -1));
};
return WrapLayout;
}(wrap_layout_common_1.WrapLayoutBase);
exports.WrapLayout = WrapLayout;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_1 = __webpack_require__(135);
__export(__webpack_require__(135));
var WrapLayoutBase = function(_super) {
__extends(WrapLayoutBase, _super);
function WrapLayoutBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return WrapLayoutBase;
}(layout_base_1.LayoutBase);
exports.WrapLayoutBase = WrapLayoutBase;
exports.itemWidthProperty = new layout_base_1.Property({
name: "itemWidth",
defaultValue: "auto",
affectsLayout: layout_base_1.isIOS,
valueConverter: function(v) {
return layout_base_1.Length.parse(v);
},
valueChanged: function(target, oldValue, newValue) {
return target.effectiveItemWidth = layout_base_1.Length.toDevicePixels(newValue, -1);
}
});
exports.itemWidthProperty.register(WrapLayoutBase);
exports.itemHeightProperty = new layout_base_1.Property({
name: "itemHeight",
defaultValue: "auto",
affectsLayout: layout_base_1.isIOS,
valueConverter: function(v) {
return layout_base_1.Length.parse(v);
},
valueChanged: function(target, oldValue, newValue) {
return target.effectiveItemHeight = layout_base_1.Length.toDevicePixels(newValue, -1);
}
});
exports.itemHeightProperty.register(WrapLayoutBase);
var converter = layout_base_1.makeParser(layout_base_1.makeValidator("horizontal", "vertical"));
exports.orientationProperty = new layout_base_1.Property({
name: "orientation",
defaultValue: "horizontal",
affectsLayout: layout_base_1.isIOS,
valueConverter: converter
});
exports.orientationProperty.register(WrapLayoutBase);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var trace_1 = __webpack_require__(15);
exports.CATEGORY = "detached-loader";
function log(message) {
trace_1.write(message, exports.CATEGORY);
}
var DetachedLoader = function() {
function DetachedLoader(resolver, changeDetector, containerRef) {
this.resolver = resolver;
this.changeDetector = changeDetector;
this.containerRef = containerRef;
}
DetachedLoader.prototype.loadInLocation = function(componentType) {
var factory = this.resolver.resolveComponentFactory(componentType);
var componentRef = this.containerRef.createComponent(factory, this.containerRef.length, this.containerRef.parentInjector);
log("DetachedLoader.loadInLocation component loaded -> markForCheck");
return Promise.resolve(componentRef);
};
DetachedLoader.prototype.detectChanges = function() {
this.changeDetector.markForCheck();
};
DetachedLoader.prototype.loadComponent = function(componentType) {
log("DetachedLoader.loadComponent");
return this.loadInLocation(componentType);
};
DetachedLoader.prototype.loadWithFactory = function(factory) {
return this.containerRef.createComponent(factory, this.containerRef.length, this.containerRef.parentInjector, null);
};
return DetachedLoader;
}();
DetachedLoader = __decorate([ core_1.Component({
selector: "DetachedContainer",
template: "<Placeholder #loader></Placeholder>"
}), __metadata("design:paramtypes", [ core_1.ComponentFactoryResolver, core_1.ChangeDetectorRef, core_1.ViewContainerRef ]) ], DetachedLoader);
exports.DetachedLoader = DetachedLoader;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var page_1 = __webpack_require__(128);
var detached_loader_1 = __webpack_require__(252);
var platform_providers_1 = __webpack_require__(127);
var ModalDialogParams = function() {
function ModalDialogParams(context, closeCallback) {
if (context === void 0) {
context = {};
}
this.context = context;
this.closeCallback = closeCallback;
}
return ModalDialogParams;
}();
exports.ModalDialogParams = ModalDialogParams;
var ModalDialogService = ModalDialogService_1 = function() {
function ModalDialogService() {}
ModalDialogService.prototype.showModal = function(type, options) {
if (!options.viewContainerRef) {
throw new Error("No viewContainerRef: Make sure you pass viewContainerRef in ModalDialogOptions.");
}
var viewContainerRef = options.viewContainerRef;
var parentPage = viewContainerRef.injector.get(page_1.Page);
var resolver = viewContainerRef.injector.get(core_1.ComponentFactoryResolver);
var pageFactory = viewContainerRef.injector.get(platform_providers_1.PAGE_FACTORY);
return new Promise(function(resolve) {
setTimeout(function() {
return ModalDialogService_1.showDialog(type, options, resolve, viewContainerRef, resolver, parentPage, pageFactory);
}, 10);
});
};
ModalDialogService.showDialog = function(type, options, doneCallback, containerRef, resolver, parentPage, pageFactory) {
var page = pageFactory({
isModal: true,
componentType: type
});
var detachedLoaderRef;
var closeCallback = function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i] = arguments[_i];
}
doneCallback.apply(undefined, args);
page.closeModal();
detachedLoaderRef.instance.detectChanges();
detachedLoaderRef.destroy();
};
var modalParams = new ModalDialogParams(options.context, closeCallback);
var providers = core_1.ReflectiveInjector.resolve([ {
provide: page_1.Page,
useValue: page
}, {
provide: ModalDialogParams,
useValue: modalParams
} ]);
var childInjector = core_1.ReflectiveInjector.fromResolvedProviders(providers, containerRef.parentInjector);
var detachedFactory = resolver.resolveComponentFactory(detached_loader_1.DetachedLoader);
detachedLoaderRef = containerRef.createComponent(detachedFactory, -1, childInjector, null);
detachedLoaderRef.instance.loadComponent(type).then(function(compRef) {
var componentView = compRef.location.nativeElement;
if (componentView.parent) {
componentView.parent.removeChild(componentView);
}
page.content = componentView;
parentPage.showModal(page, options.context, closeCallback, options.fullscreen);
});
};
return ModalDialogService;
}();
ModalDialogService = ModalDialogService_1 = __decorate([ core_1.Injectable() ], ModalDialogService);
exports.ModalDialogService = ModalDialogService;
var ModalDialogHost = function() {
function ModalDialogHost() {
throw new Error("ModalDialogHost is deprecated. Call ModalDialogService.showModal() " + "by passing ViewContainerRef in the options instead.");
}
return ModalDialogHost;
}();
ModalDialogHost = __decorate([ core_1.Directive({
selector: "[modal-dialog-host]"
}), __metadata("design:paramtypes", []) ], ModalDialogHost);
exports.ModalDialogHost = ModalDialogHost;
var ModalDialogService_1;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var list_view_comp_1 = __webpack_require__(255);
var tab_view_1 = __webpack_require__(257);
var action_bar_1 = __webpack_require__(259);
var platform_filters_1 = __webpack_require__(260);
exports.NS_DIRECTIVES = [ list_view_comp_1.ListViewComponent, list_view_comp_1.TemplateKeyDirective, tab_view_1.TabViewDirective, tab_view_1.TabViewItemDirective, action_bar_1.ActionBarComponent, action_bar_1.ActionBarScope, action_bar_1.ActionItemDirective, action_bar_1.NavigationButtonDirective, platform_filters_1.AndroidFilterComponent, platform_filters_1.IosFilterComponent ];
var list_view_comp_2 = __webpack_require__(255);
exports.ListViewComponent = list_view_comp_2.ListViewComponent;
exports.TemplateKeyDirective = list_view_comp_2.TemplateKeyDirective;
var text_value_accessor_1 = __webpack_require__(261);
exports.TextValueAccessor = text_value_accessor_1.TextValueAccessor;
var checked_value_accessor_1 = __webpack_require__(263);
exports.CheckedValueAccessor = checked_value_accessor_1.CheckedValueAccessor;
var date_value_accessor_1 = __webpack_require__(264);
exports.DateValueAccessor = date_value_accessor_1.DateValueAccessor;
var time_value_accessor_1 = __webpack_require__(265);
exports.TimeValueAccessor = time_value_accessor_1.TimeValueAccessor;
var number_value_accessor_1 = __webpack_require__(266);
exports.NumberValueAccessor = number_value_accessor_1.NumberValueAccessor;
var selectedIndex_value_accessor_1 = __webpack_require__(267);
exports.SelectedIndexValueAccessor = selectedIndex_value_accessor_1.SelectedIndexValueAccessor;
var tab_view_2 = __webpack_require__(257);
exports.TabViewDirective = tab_view_2.TabViewDirective;
exports.TabViewItemDirective = tab_view_2.TabViewItemDirective;
var action_bar_2 = __webpack_require__(259);
exports.ActionBarComponent = action_bar_2.ActionBarComponent;
exports.ActionBarScope = action_bar_2.ActionBarScope;
exports.ActionItemDirective = action_bar_2.ActionItemDirective;
exports.NavigationButtonDirective = action_bar_2.NavigationButtonDirective;
var platform_filters_2 = __webpack_require__(260);
exports.AndroidFilterComponent = platform_filters_2.AndroidFilterComponent;
exports.IosFilterComponent = platform_filters_2.IosFilterComponent;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var collection_facade_1 = __webpack_require__(256);
var observable_array_1 = __webpack_require__(75);
var layout_base_1 = __webpack_require__(135);
var trace_1 = __webpack_require__(126);
var NG_VIEW = "_ngViewRef";
var ListItemContext = function() {
function ListItemContext($implicit, item, index, even, odd) {
this.$implicit = $implicit;
this.item = item;
this.index = index;
this.even = even;
this.odd = odd;
}
return ListItemContext;
}();
exports.ListItemContext = ListItemContext;
var ListViewComponent = function() {
function ListViewComponent(_elementRef, _iterableDiffers, _cdr) {
this._iterableDiffers = _iterableDiffers;
this._cdr = _cdr;
this.setupItemView = new core_1.EventEmitter();
this.listView = _elementRef.nativeElement;
this.listView.on("itemLoading", this.onItemLoading, this);
}
Object.defineProperty(ListViewComponent.prototype, "nativeElement", {
get: function() {
return this.listView;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListViewComponent.prototype, "items", {
get: function() {
return this._items;
},
set: function(value) {
this._items = value;
var needDiffer = true;
if (value instanceof observable_array_1.ObservableArray) {
needDiffer = false;
}
if (needDiffer && !this._differ && collection_facade_1.isListLikeIterable(value)) {
this._differ = this._iterableDiffers.find(this._items).create(this._cdr, function(_index, item) {
return item;
});
}
this.listView.items = this._items;
},
enumerable: true,
configurable: true
});
ListViewComponent.prototype.ngAfterContentInit = function() {
trace_1.listViewLog("ListView.ngAfterContentInit()");
this.setItemTemplates();
};
ListViewComponent.prototype.ngOnDestroy = function() {
this.listView.off("itemLoading", this.onItemLoading, this);
};
ListViewComponent.prototype.setItemTemplates = function() {
this.itemTemplate = this.itemTemplateQuery;
if (this._templateMap) {
trace_1.listViewLog("Setting templates");
var templates_1 = [];
this._templateMap.forEach(function(value) {
templates_1.push(value);
});
this.listView.itemTemplates = templates_1;
}
};
ListViewComponent.prototype.registerTemplate = function(key, template) {
var _this = this;
trace_1.listViewLog("registerTemplate for key: " + key);
if (!this._templateMap) {
this._templateMap = new Map();
}
var keyedTemplate = {
key: key,
createView: function() {
trace_1.listViewLog("registerTemplate for key: " + key);
var viewRef = _this.loader.createEmbeddedView(template, new ListItemContext(), 0);
var resultView = getItemViewRoot(viewRef);
resultView[NG_VIEW] = viewRef;
return resultView;
}
};
this._templateMap.set(key, keyedTemplate);
};
ListViewComponent.prototype.onItemLoading = function(args) {
if (!args.view && !this.itemTemplate) {
return;
}
var index = args.index;
var items = args.object.items;
var currentItem = typeof items.getItem === "function" ? items.getItem(index) : items[index];
var viewRef;
if (args.view) {
trace_1.listViewLog("onItemLoading: " + index + " - Reusing existing view");
viewRef = args.view[NG_VIEW];
if (!viewRef && args.view instanceof layout_base_1.LayoutBase && args.view.getChildrenCount() > 0) {
viewRef = args.view.getChildAt(0)[NG_VIEW];
}
if (!viewRef) {
trace_1.listViewError("ViewReference not found for item " + index + ". View recycling is not working");
}
}
if (!viewRef) {
trace_1.listViewLog("onItemLoading: " + index + " - Creating view from template");
viewRef = this.loader.createEmbeddedView(this.itemTemplate, new ListItemContext(), 0);
args.view = getItemViewRoot(viewRef);
args.view[NG_VIEW] = viewRef;
}
this.setupViewRef(viewRef, currentItem, index);
this.detectChangesOnChild(viewRef, index);
};
ListViewComponent.prototype.setupViewRef = function(viewRef, data, index) {
var context = viewRef.context;
context.$implicit = data;
context.item = data;
context.index = index;
context.even = index % 2 === 0;
context.odd = !context.even;
this.setupItemView.next({
view: viewRef,
data: data,
index: index,
context: context
});
};
ListViewComponent.prototype.detectChangesOnChild = function(viewRef, index) {
trace_1.listViewLog("Manually detect changes in child: " + index);
viewRef.markForCheck();
viewRef.detectChanges();
};
ListViewComponent.prototype.ngDoCheck = function() {
if (this._differ) {
trace_1.listViewLog("ngDoCheck() - execute differ");
var changes = this._differ.diff(this._items);
if (changes) {
trace_1.listViewLog("ngDoCheck() - refresh");
this.listView.refresh();
}
}
};
return ListViewComponent;
}();
__decorate([ core_1.ViewChild("loader", {
read: core_1.ViewContainerRef
}), __metadata("design:type", core_1.ViewContainerRef) ], ListViewComponent.prototype, "loader", void 0);
__decorate([ core_1.Output(), __metadata("design:type", Object) ], ListViewComponent.prototype, "setupItemView", void 0);
__decorate([ core_1.ContentChild(core_1.TemplateRef), __metadata("design:type", core_1.TemplateRef) ], ListViewComponent.prototype, "itemTemplateQuery", void 0);
__decorate([ core_1.Input(), __metadata("design:type", Object), __metadata("design:paramtypes", [ Object ]) ], ListViewComponent.prototype, "items", null);
ListViewComponent = __decorate([ core_1.Component({
selector: "ListView",
template: "\n        <DetachedContainer>\n            <Placeholder #loader></Placeholder>\n        </DetachedContainer>",
changeDetection: core_1.ChangeDetectionStrategy.OnPush
}), __metadata("design:paramtypes", [ core_1.ElementRef, core_1.IterableDiffers, core_1.ChangeDetectorRef ]) ], ListViewComponent);
exports.ListViewComponent = ListViewComponent;
function getSingleViewRecursive(nodes, nestLevel) {
var actualNodes = nodes.filter(function(n) {
return !!n && n.nodeName !== "#text";
});
if (actualNodes.length === 0) {
throw new Error("No suitable views found in list template! Nesting level: " + nestLevel);
} else if (actualNodes.length > 1) {
throw new Error("More than one view found in list template! Nesting level: " + nestLevel);
} else {
if (actualNodes[0]) {
var parentLayout = actualNodes[0].parent;
if (parentLayout instanceof layout_base_1.LayoutBase) {
parentLayout.removeChild(actualNodes[0]);
}
return actualNodes[0];
} else {
return getSingleViewRecursive(actualNodes[0].children, nestLevel + 1);
}
}
}
function getItemViewRoot(viewRef, rootLocator) {
if (rootLocator === void 0) {
rootLocator = getSingleViewRecursive;
}
var rootView = rootLocator(viewRef.rootNodes, 0);
return rootView;
}
exports.getItemViewRoot = getItemViewRoot;
var TemplateKeyDirective = function() {
function TemplateKeyDirective(templateRef, list) {
this.templateRef = templateRef;
this.list = list;
}
Object.defineProperty(TemplateKeyDirective.prototype, "nsTemplateKey", {
set: function(value) {
if (this.list && this.templateRef) {
this.list.registerTemplate(value, this.templateRef);
}
},
enumerable: true,
configurable: true
});
return TemplateKeyDirective;
}();
__decorate([ core_1.Input(), __metadata("design:type", Object), __metadata("design:paramtypes", [ Object ]) ], TemplateKeyDirective.prototype, "nsTemplateKey", null);
TemplateKeyDirective = __decorate([ core_1.Directive({
selector: "[nsTemplateKey]"
}), __param(1, core_1.Host()), __metadata("design:paramtypes", [ core_1.TemplateRef, ListViewComponent ]) ], TemplateKeyDirective);
exports.TemplateKeyDirective = TemplateKeyDirective;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var lang_facade_1 = __webpack_require__(143);
function isListLikeIterable(obj) {
if (!lang_facade_1.isJsObject(obj)) return false;
return lang_facade_1.isArray(obj) || !(obj instanceof Map) && lang_facade_1.getSymbolIterator() in obj;
}
exports.isListLikeIterable = isListLikeIterable;
var ListWrapper = function() {
function ListWrapper() {}
ListWrapper.createFixedSize = function(size) {
return new Array(size);
};
ListWrapper.createGrowableSize = function(size) {
return new Array(size);
};
ListWrapper.clone = function(array) {
return array.slice(0);
};
ListWrapper.forEachWithIndex = function(array, fn) {
for (var i = 0; i < array.length; i++) {
fn(array[i], i);
}
};
ListWrapper.first = function(array) {
if (!array) return null;
return array[0];
};
ListWrapper.last = function(array) {
if (!array || array.length == 0) return null;
return array[array.length - 1];
};
ListWrapper.indexOf = function(array, value, startIndex) {
if (startIndex === void 0) {
startIndex = 0;
}
return array.indexOf(value, startIndex);
};
ListWrapper.contains = function(list, el) {
return list.indexOf(el) !== -1;
};
ListWrapper.reversed = function(array) {
var a = ListWrapper.clone(array);
return a.reverse();
};
ListWrapper.concat = function(a, b) {
return a.concat(b);
};
ListWrapper.insert = function(list, index, value) {
list.splice(index, 0, value);
};
ListWrapper.removeAt = function(list, index) {
var res = list[index];
list.splice(index, 1);
return res;
};
ListWrapper.removeAll = function(list, items) {
for (var i = 0; i < items.length; ++i) {
var index = list.indexOf(items[i]);
list.splice(index, 1);
}
};
ListWrapper.remove = function(list, el) {
var index = list.indexOf(el);
if (index > -1) {
list.splice(index, 1);
return true;
}
return false;
};
ListWrapper.clear = function(list) {
list.length = 0;
};
ListWrapper.isEmpty = function(list) {
return list.length == 0;
};
ListWrapper.fill = function(list, value, start, end) {
if (start === void 0) {
start = 0;
}
if (end === void 0) {
end = null;
}
list.fill(value, start, end === null ? list.length : end);
};
ListWrapper.equals = function(a, b) {
if (a.length != b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (a[i] !== b[i]) return false;
}
return true;
};
ListWrapper.slice = function(l, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return l.slice(from, to === null ? undefined : to);
};
ListWrapper.splice = function(l, from, length) {
return l.splice(from, length);
};
ListWrapper.sort = function(l, compareFn) {
if (lang_facade_1.isPresent(compareFn)) {
l.sort(compareFn);
} else {
l.sort();
}
};
ListWrapper.toString = function(l) {
return l.toString();
};
ListWrapper.toJSON = function(l) {
return JSON.stringify(l);
};
ListWrapper.maximum = function(list, predicate) {
if (list.length == 0) {
return null;
}
var solution = null;
var maxValue = -Infinity;
for (var index = 0; index < list.length; index++) {
var candidate = list[index];
if (lang_facade_1.isBlank(candidate)) {
continue;
}
var candidateValue = predicate(candidate);
if (candidateValue > maxValue) {
solution = candidate;
maxValue = candidateValue;
}
}
return solution;
};
ListWrapper.flatten = function(list) {
var target = [];
_flattenArray(list, target);
return target;
};
ListWrapper.addAll = function(list, source) {
for (var i = 0; i < source.length; i++) {
list.push(source[i]);
}
};
return ListWrapper;
}();
exports.ListWrapper = ListWrapper;
function _flattenArray(source, target) {
if (lang_facade_1.isPresent(source)) {
for (var i = 0; i < source.length; i++) {
var item = source[i];
if (lang_facade_1.isArray(item)) {
_flattenArray(item, target);
} else {
target.push(item);
}
}
}
return target;
}
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var tab_view_1 = __webpack_require__(226);
var utils_1 = __webpack_require__(258);
var trace_1 = __webpack_require__(126);
var lang_facade_1 = __webpack_require__(143);
var TabViewDirective = function() {
function TabViewDirective(element) {
this.tabView = element.nativeElement;
}
Object.defineProperty(TabViewDirective.prototype, "selectedIndex", {
get: function() {
return this._selectedIndex;
},
set: function(value) {
this._selectedIndex = utils_1.convertToInt(value);
if (this.viewInitialized) {
this.tabView.selectedIndex = this._selectedIndex;
}
},
enumerable: true,
configurable: true
});
TabViewDirective.prototype.ngAfterViewInit = function() {
this.viewInitialized = true;
trace_1.rendererLog("this._selectedIndex: " + this._selectedIndex);
if (!lang_facade_1.isBlank(this._selectedIndex)) {
this.tabView.selectedIndex = this._selectedIndex;
}
};
return TabViewDirective;
}();
__decorate([ core_1.Input(), __metadata("design:type", Number), __metadata("design:paramtypes", [ Object ]) ], TabViewDirective.prototype, "selectedIndex", null);
TabViewDirective = __decorate([ core_1.Directive({
selector: "TabView"
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], TabViewDirective);
exports.TabViewDirective = TabViewDirective;
var TabViewItemDirective = function() {
function TabViewItemDirective(owner, templateRef, viewContainer) {
this.owner = owner;
this.templateRef = templateRef;
this.viewContainer = viewContainer;
}
Object.defineProperty(TabViewItemDirective.prototype, "title", {
get: function() {
return this._title;
},
set: function(value) {
if (this._title !== value) {
this._title = value;
this.ensureItem();
this.item.title = this._title;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewItemDirective.prototype, "iconSource", {
get: function() {
return this._iconSource;
},
set: function(value) {
if (this._iconSource !== value) {
this._iconSource = value;
this.ensureItem();
this.item.iconSource = this._iconSource;
}
},
enumerable: true,
configurable: true
});
TabViewItemDirective.prototype.ensureItem = function() {
if (!this.item) {
this.item = new tab_view_1.TabViewItem();
}
};
TabViewItemDirective.prototype.ngOnInit = function() {
this.ensureItem();
if (this.config) {
this.item.title = this._title || this.config.title;
this.item.iconSource = this._iconSource || this.config.iconSource;
}
var viewRef = this.viewContainer.createEmbeddedView(this.templateRef);
var realViews = viewRef.rootNodes.filter(function(node) {
return node.nodeName && node.nodeName !== "#text";
});
if (realViews.length > 0) {
this.item.view = realViews[0];
var newItems = (this.owner.tabView.items || []).concat([ this.item ]);
this.owner.tabView.items = newItems;
}
};
return TabViewItemDirective;
}();
__decorate([ core_1.Input("tabItem"), __metadata("design:type", Object) ], TabViewItemDirective.prototype, "config", void 0);
__decorate([ core_1.Input(), __metadata("design:type", Object), __metadata("design:paramtypes", [ String ]) ], TabViewItemDirective.prototype, "title", null);
__decorate([ core_1.Input(), __metadata("design:type", Object), __metadata("design:paramtypes", [ String ]) ], TabViewItemDirective.prototype, "iconSource", null);
TabViewItemDirective = __decorate([ core_1.Directive({
selector: "[tabItem]"
}), __metadata("design:paramtypes", [ TabViewDirective, core_1.TemplateRef, core_1.ViewContainerRef ]) ], TabViewItemDirective);
exports.TabViewItemDirective = TabViewItemDirective;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var lang_facade_1 = __webpack_require__(143);
function convertToInt(value) {
var normalizedValue;
if (lang_facade_1.isBlank(value)) {
normalizedValue = 0;
} else {
if (lang_facade_1.isNumber(value)) {
normalizedValue = value;
} else {
var parsedValue = parseInt(value.toString(), 10);
normalizedValue = isNaN(parsedValue) ? 0 : parsedValue;
}
}
return Math.round(normalizedValue);
}
exports.convertToInt = convertToInt;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var action_bar_1 = __webpack_require__(131);
var lang_facade_1 = __webpack_require__(143);
var page_1 = __webpack_require__(128);
var view_1 = __webpack_require__(12);
var element_registry_1 = __webpack_require__(249);
var actionBarMeta = {
skipAddToDom: true,
insertChild: function(parent, child, atIndex) {
var bar = parent;
var childView = child;
if (child instanceof action_bar_1.NavigationButton) {
bar.navigationButton = childView;
childView.parent = bar;
} else if (child instanceof action_bar_1.ActionItem) {
bar.actionItems.addItem(childView);
childView.parent = bar;
} else if (child.nodeName === "#comment") {
bar._addView(childView, atIndex);
} else if (child instanceof view_1.View) {
bar.titleView = childView;
}
},
removeChild: function(parent, child) {
var bar = parent;
var childView = child;
if (child instanceof action_bar_1.NavigationButton) {
if (bar.navigationButton === childView) {
bar.navigationButton = null;
}
childView.parent = null;
} else if (child instanceof action_bar_1.ActionItem) {
bar.actionItems.removeItem(childView);
childView.parent = null;
} else if (child instanceof view_1.View && bar.titleView && bar.titleView === childView) {
bar.titleView = null;
}
}
};
element_registry_1.registerElement("ActionBar", function() {
return __webpack_require__(131).ActionBar;
}, actionBarMeta);
element_registry_1.registerElement("ActionItem", function() {
return __webpack_require__(131).ActionItem;
});
element_registry_1.registerElement("NavigationButton", function() {
return __webpack_require__(131).NavigationButton;
});
var ActionBarComponent = function() {
function ActionBarComponent(element, page) {
this.element = element;
this.page = page;
if (lang_facade_1.isBlank(this.page.actionBarHidden)) {
this.page.actionBarHidden = false;
}
this.page.actionBar = this.element.nativeElement;
this.page.actionBar.update();
}
return ActionBarComponent;
}();
ActionBarComponent = __decorate([ core_1.Component({
selector: "ActionBar",
template: "<ng-content></ng-content>"
}), __metadata("design:paramtypes", [ core_1.ElementRef, page_1.Page ]) ], ActionBarComponent);
exports.ActionBarComponent = ActionBarComponent;
var ActionBarScope = function() {
function ActionBarScope(page) {
this.page = page;
}
ActionBarScope.prototype.onNavButtonInit = function(navBtn) {
this.page.actionBar.navigationButton = navBtn.element.nativeElement;
};
ActionBarScope.prototype.onNavButtonDestroy = function(navBtn) {
var nav = navBtn.element.nativeElement;
if (nav && this.page.actionBar.navigationButton === nav) {
this.page.actionBar.navigationButton = null;
}
};
ActionBarScope.prototype.onActionInit = function(item) {
this.page.actionBar.actionItems.addItem(item.element.nativeElement);
};
ActionBarScope.prototype.onActionDestroy = function(item) {
if (item.element.nativeElement.actionBar) {
this.page.actionBar.actionItems.removeItem(item.element.nativeElement);
}
};
return ActionBarScope;
}();
ActionBarScope = __decorate([ core_1.Component({
selector: "ActionBarExtension",
template: ""
}), __metadata("design:paramtypes", [ page_1.Page ]) ], ActionBarScope);
exports.ActionBarScope = ActionBarScope;
var ActionItemDirective = function() {
function ActionItemDirective(element, ownerScope) {
this.element = element;
this.ownerScope = ownerScope;
if (this.ownerScope) {
this.ownerScope.onActionInit(this);
}
}
ActionItemDirective.prototype.ngOnDestroy = function() {
if (this.ownerScope) {
this.ownerScope.onActionDestroy(this);
}
};
return ActionItemDirective;
}();
ActionItemDirective = __decorate([ core_1.Directive({
selector: "ActionItem"
}), __param(1, core_1.Optional()), __metadata("design:paramtypes", [ core_1.ElementRef, ActionBarScope ]) ], ActionItemDirective);
exports.ActionItemDirective = ActionItemDirective;
var NavigationButtonDirective = function() {
function NavigationButtonDirective(element, ownerScope) {
this.element = element;
this.ownerScope = ownerScope;
if (this.ownerScope) {
this.ownerScope.onNavButtonInit(this);
}
}
NavigationButtonDirective.prototype.ngOnDestroy = function() {
if (this.ownerScope) {
this.ownerScope.onNavButtonDestroy(this);
}
};
return NavigationButtonDirective;
}();
NavigationButtonDirective = __decorate([ core_1.Directive({
selector: "NavigationButton"
}), __param(1, core_1.Optional()), __metadata("design:paramtypes", [ core_1.ElementRef, ActionBarScope ]) ], NavigationButtonDirective);
exports.NavigationButtonDirective = NavigationButtonDirective;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var platform_1 = __webpack_require__(25);
var platform_providers_1 = __webpack_require__(127);
var AndroidFilterComponent = function() {
function AndroidFilterComponent(device) {
this.show = device.os === platform_1.platformNames.android;
}
return AndroidFilterComponent;
}();
AndroidFilterComponent = __decorate([ core_1.Component({
selector: "android",
template: '<ng-content *ngIf="show"></ng-content>'
}), __param(0, core_1.Inject(platform_providers_1.DEVICE)), __metadata("design:paramtypes", [ Object ]) ], AndroidFilterComponent);
exports.AndroidFilterComponent = AndroidFilterComponent;
var IosFilterComponent = function() {
function IosFilterComponent(device) {
this.show = device.os === platform_1.platformNames.ios;
}
return IosFilterComponent;
}();
IosFilterComponent = __decorate([ core_1.Component({
selector: "ios",
template: '<ng-content *ngIf="show"></ng-content>'
}), __param(0, core_1.Inject(platform_providers_1.DEVICE)), __metadata("design:paramtypes", [ Object ]) ], IosFilterComponent);
exports.IosFilterComponent = IosFilterComponent;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var forms_1 = __webpack_require__(160);
var lang_facade_1 = __webpack_require__(143);
var base_value_accessor_1 = __webpack_require__(262);
var TEXT_VALUE_ACCESSOR = {
provide: forms_1.NG_VALUE_ACCESSOR,
useExisting: core_1.forwardRef(function() {
return TextValueAccessor;
}),
multi: true
};
var TextValueAccessor = function(_super) {
__extends(TextValueAccessor, _super);
function TextValueAccessor(elementRef) {
var _this = _super.call(this, elementRef.nativeElement) || this;
_this.onTouched = function() {};
return _this;
}
TextValueAccessor.prototype.textChangeListener = function(event) {
this.onChange(event.value);
};
TextValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = lang_facade_1.isBlank(value) ? "" : value.toString();
this.view.text = normalizedValue;
};
TextValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
return TextValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
__decorate([ core_1.HostListener("textChange", [ "$event" ]), __metadata("design:type", Function), __metadata("design:paramtypes", [ Object ]), __metadata("design:returntype", void 0) ], TextValueAccessor.prototype, "textChangeListener", null);
TextValueAccessor = __decorate([ core_1.Directive({
selector: "TextField[ngModel], TextField[formControlName], textField[ngModel], textField[formControlName], text-field[ngModel], text-field[formControlName], TextView[ngModel], TextView[formControlName], textView[ngModel], textView[formControlName], text-view[ngModel], text-view[formControlName], SearchBar[ngModel], SearchBar[formControlName], searchBar[ngModel], searchBar[formControlName], search-bar[ngModel], search-bar[formControlName]",
providers: [ TEXT_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], TextValueAccessor);
exports.TextValueAccessor = TextValueAccessor;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var BaseValueAccessor = function() {
function BaseValueAccessor(view) {
this.view = view;
this.onChange = function(_) {};
this.pendingChangeNotification = 0;
}
BaseValueAccessor.prototype.registerOnChange = function(fn) {
var _this = this;
this.onChange = function(arg) {
if (_this.pendingChangeNotification) {
clearTimeout(_this.pendingChangeNotification);
}
_this.pendingChangeNotification = setTimeout(function() {
_this.pendingChangeNotification = 0;
fn(arg);
}, 20);
};
};
BaseValueAccessor.prototype.writeValue = function(_) {};
BaseValueAccessor.prototype.registerOnTouched = function(_) {};
return BaseValueAccessor;
}();
exports.BaseValueAccessor = BaseValueAccessor;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var forms_1 = __webpack_require__(160);
var lang_facade_1 = __webpack_require__(143);
var base_value_accessor_1 = __webpack_require__(262);
var CHECKED_VALUE_ACCESSOR = {
provide: forms_1.NG_VALUE_ACCESSOR,
useExisting: core_1.forwardRef(function() {
return CheckedValueAccessor;
}),
multi: true
};
var CheckedValueAccessor = function(_super) {
__extends(CheckedValueAccessor, _super);
function CheckedValueAccessor(elementRef) {
var _this = _super.call(this, elementRef.nativeElement) || this;
_this.onTouched = function() {};
return _this;
}
CheckedValueAccessor.prototype.checkedChangeListener = function(event) {
this.onChange(event.value);
};
CheckedValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = false;
if (!lang_facade_1.isBlank(value)) {
if (typeof value === "string") {
normalizedValue = value.toLowerCase() === "true" ? true : false;
} else {
normalizedValue = !!value;
}
}
this.view.checked = normalizedValue;
};
CheckedValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
return CheckedValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
__decorate([ core_1.HostListener("checkedChange", [ "$event" ]), __metadata("design:type", Function), __metadata("design:paramtypes", [ Object ]), __metadata("design:returntype", void 0) ], CheckedValueAccessor.prototype, "checkedChangeListener", null);
CheckedValueAccessor = __decorate([ core_1.Directive({
selector: "Switch[ngModel], Switch[formControlName], switch[ngModel], switch[formControlName], switch[ngModel], switch[formControlName]",
providers: [ CHECKED_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], CheckedValueAccessor);
exports.CheckedValueAccessor = CheckedValueAccessor;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var forms_1 = __webpack_require__(160);
var lang_facade_1 = __webpack_require__(143);
var base_value_accessor_1 = __webpack_require__(262);
var DATE_VALUE_ACCESSOR = {
provide: forms_1.NG_VALUE_ACCESSOR,
useExisting: core_1.forwardRef(function() {
return DateValueAccessor;
}),
multi: true
};
var DateValueAccessor = function(_super) {
__extends(DateValueAccessor, _super);
function DateValueAccessor(elementRef) {
var _this = _super.call(this, elementRef.nativeElement) || this;
_this.onTouched = function() {};
return _this;
}
DateValueAccessor.prototype.dateChangeListener = function(event) {
this.onChange(event.value);
};
DateValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = lang_facade_1.isBlank(value) ? new Date() : value;
if (!lang_facade_1.isDate(normalizedValue)) {
if (typeof normalizedValue === "string") {
normalizedValue = new Date(normalizedValue);
} else if (typeof normalizedValue === "number") {
normalizedValue = new Date(normalizedValue);
}
if (!lang_facade_1.isDate(normalizedValue)) {
normalizedValue = new Date();
}
}
this.view.date = normalizedValue;
};
DateValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
return DateValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
__decorate([ core_1.HostListener("dateChange", [ "$event" ]), __metadata("design:type", Function), __metadata("design:paramtypes", [ Object ]), __metadata("design:returntype", void 0) ], DateValueAccessor.prototype, "dateChangeListener", null);
DateValueAccessor = __decorate([ core_1.Directive({
selector: "DatePicker[ngModel], DatePicker[formControlName], datePicker[ngModel], datePicker[formControlName], date-picker[ngModel], date-picker[formControlName]",
providers: [ DATE_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], DateValueAccessor);
exports.DateValueAccessor = DateValueAccessor;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var forms_1 = __webpack_require__(160);
var lang_facade_1 = __webpack_require__(143);
var base_value_accessor_1 = __webpack_require__(262);
var TIME_VALUE_ACCESSOR = {
provide: forms_1.NG_VALUE_ACCESSOR,
useExisting: core_1.forwardRef(function() {
return TimeValueAccessor;
}),
multi: true
};
var TimeValueAccessor = function(_super) {
__extends(TimeValueAccessor, _super);
function TimeValueAccessor(elementRef) {
var _this = _super.call(this, elementRef.nativeElement) || this;
_this.onTouched = function() {};
return _this;
}
TimeValueAccessor.prototype.timeChangeListener = function(event) {
this.onChange(event.value);
};
TimeValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = lang_facade_1.isBlank(value) ? new Date() : value;
if (!lang_facade_1.isDate(normalizedValue)) {
if (typeof normalizedValue === "string") {
normalizedValue = new Date(normalizedValue);
} else if (typeof normalizedValue === "number") {
normalizedValue = new Date(normalizedValue);
}
if (!lang_facade_1.isDate(normalizedValue)) {
normalizedValue = new Date();
}
}
this.view.time = normalizedValue;
};
TimeValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
return TimeValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
__decorate([ core_1.HostListener("timeChange", [ "$event" ]), __metadata("design:type", Function), __metadata("design:paramtypes", [ Object ]), __metadata("design:returntype", void 0) ], TimeValueAccessor.prototype, "timeChangeListener", null);
TimeValueAccessor = __decorate([ core_1.Directive({
selector: "TimePicker[ngModel], TimePicker[formControlName], timePicker[ngModel], timePicker[formControlName], time-picker[ngModel], time-picker[formControlName]",
providers: [ TIME_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], TimeValueAccessor);
exports.TimeValueAccessor = TimeValueAccessor;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var forms_1 = __webpack_require__(160);
var lang_facade_1 = __webpack_require__(143);
var base_value_accessor_1 = __webpack_require__(262);
var NUMBER_VALUE_ACCESSOR = {
provide: forms_1.NG_VALUE_ACCESSOR,
useExisting: core_1.forwardRef(function() {
return NumberValueAccessor;
}),
multi: true
};
var NumberValueAccessor = function(_super) {
__extends(NumberValueAccessor, _super);
function NumberValueAccessor(elementRef) {
var _this = _super.call(this, elementRef.nativeElement) || this;
_this.onTouched = function() {};
return _this;
}
NumberValueAccessor.prototype.valueChangeListener = function(event) {
this.onChange(event.value);
};
NumberValueAccessor.prototype.writeValue = function(value) {
var normalizedValue;
if (lang_facade_1.isBlank(value)) {
normalizedValue = 0;
} else {
if (lang_facade_1.isNumber(value)) {
normalizedValue = value;
} else {
var parsedValue = Number(value);
normalizedValue = isNaN(parsedValue) ? 0 : parsedValue;
}
}
this.view.value = normalizedValue;
};
NumberValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
return NumberValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
__decorate([ core_1.HostListener("valueChange", [ "$event" ]), __metadata("design:type", Function), __metadata("design:paramtypes", [ Object ]), __metadata("design:returntype", void 0) ], NumberValueAccessor.prototype, "valueChangeListener", null);
NumberValueAccessor = __decorate([ core_1.Directive({
selector: "Slider[ngModel], Slider[formControlName], slider[ngModel], slider[formControlName], slider[ngModel], slider[formControlName]",
providers: [ NUMBER_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], NumberValueAccessor);
exports.NumberValueAccessor = NumberValueAccessor;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var forms_1 = __webpack_require__(160);
var base_value_accessor_1 = __webpack_require__(262);
var utils_1 = __webpack_require__(258);
var SELECTED_INDEX_VALUE_ACCESSOR = {
provide: forms_1.NG_VALUE_ACCESSOR,
useExisting: core_1.forwardRef(function() {
return SelectedIndexValueAccessor;
}),
multi: true
};
var SelectedIndexValueAccessor = function(_super) {
__extends(SelectedIndexValueAccessor, _super);
function SelectedIndexValueAccessor(elementRef) {
var _this = _super.call(this, elementRef.nativeElement) || this;
_this.onTouched = function() {};
return _this;
}
SelectedIndexValueAccessor.prototype.selectedIndexChangeListener = function(event) {
this.onChange(event.value);
};
SelectedIndexValueAccessor.prototype.writeValue = function(value) {
this._normalizedValue = utils_1.convertToInt(value);
if (this.viewInitialized) {
this.view.selectedIndex = this._normalizedValue;
}
};
SelectedIndexValueAccessor.prototype.ngAfterViewInit = function() {
this.viewInitialized = true;
this.view.selectedIndex = this._normalizedValue;
};
SelectedIndexValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
return SelectedIndexValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
__decorate([ core_1.HostListener("selectedIndexChange", [ "$event" ]), __metadata("design:type", Function), __metadata("design:paramtypes", [ Object ]), __metadata("design:returntype", void 0) ], SelectedIndexValueAccessor.prototype, "selectedIndexChangeListener", null);
SelectedIndexValueAccessor = __decorate([ core_1.Directive({
selector: "SegmentedBar[ngModel], SegmentedBar[formControlName], segmentedBar[ngModel], segmentedBar[formControlName], segmented-bar[ngModel], segmented-bar[formControlName], ListPicker[ngModel], ListPicker[formControlName], listPicker[ngModel], listPicker[formControlName], list-picker[ngModel], list-picker[formControlName], TabView[ngModel], TabView[formControlName], tabView[ngModel], tabView[formControlName], tab-view[ngModel], tab-view[formControlName]",
providers: [ SELECTED_INDEX_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], SelectedIndexValueAccessor);
exports.SelectedIndexValueAccessor = SelectedIndexValueAccessor;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var file_system_1 = __webpack_require__(22);
var NSFileSystem = function() {
function NSFileSystem() {}
NSFileSystem.prototype.currentApp = function() {
return file_system_1.knownFolders.currentApp();
};
return NSFileSystem;
}();
NSFileSystem = __decorate([ core_1.Injectable() ], NSFileSystem);
exports.NSFileSystem = NSFileSystem;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var forms_1 = __webpack_require__(160);
var text_value_accessor_1 = __webpack_require__(261);
var checked_value_accessor_1 = __webpack_require__(263);
var date_value_accessor_1 = __webpack_require__(264);
var time_value_accessor_1 = __webpack_require__(265);
var number_value_accessor_1 = __webpack_require__(266);
var selectedIndex_value_accessor_1 = __webpack_require__(267);
exports.FORMS_DIRECTIVES = [ text_value_accessor_1.TextValueAccessor, checked_value_accessor_1.CheckedValueAccessor, date_value_accessor_1.DateValueAccessor, time_value_accessor_1.TimeValueAccessor, selectedIndex_value_accessor_1.SelectedIndexValueAccessor, number_value_accessor_1.NumberValueAccessor ];
var NativeScriptFormsModule = function() {
function NativeScriptFormsModule() {}
return NativeScriptFormsModule;
}();
NativeScriptFormsModule = __decorate([ core_1.NgModule({
declarations: exports.FORMS_DIRECTIVES,
providers: [],
imports: [ forms_1.FormsModule ],
exports: [ forms_1.FormsModule, exports.FORMS_DIRECTIVES ]
}) ], NativeScriptFormsModule);
exports.NativeScriptFormsModule = NativeScriptFormsModule;
}, function(module, exports) {
module.exports = function($usbLiveSyncService) {
$usbLiveSyncService.forceExecuteFullSync = false;
};
}, function(module, exports, __webpack_require__) {
"use strict";
var fs = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "fs"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
var path = __webpack_require__(272);
exports.findProjectDir = function findProjectDir() {
var candidateDir = path.join(__dirname, "..");
while (true) {
var oldCandidateDir = candidateDir;
candidateDir = path.dirname(candidateDir);
if (path.basename(candidateDir) === "node_modules") {
continue;
}
var packageJsonFile = path.join(candidateDir, "package.json");
if (fs.existsSync(packageJsonFile)) {
return candidateDir;
}
if (oldCandidateDir === candidateDir) {
return;
}
}
};
exports.getHooksDir = function getHooksDir() {
return path.join(exports.findProjectDir(), "hooks");
};
exports.getBeforeLivesyncHookDir = function getBeforeLivesyncHookDir() {
return path.join(exports.getHooksDir(), "before-livesync");
};
exports.getHookFilePath = function getHookFilePath() {
return path.join(exports.getBeforeLivesyncHookDir(), "nativescript-angular-sync.js");
};
}, function(module, exports) {
function normalizeArray(parts, allowAboveRoot) {
var up = 0;
for (var i = parts.length - 1; i >= 0; i--) {
var last = parts[i];
if (last === ".") {
parts.splice(i, 1);
} else if (last === "..") {
parts.splice(i, 1);
up++;
} else if (up) {
parts.splice(i, 1);
up--;
}
}
if (allowAboveRoot) {
for (;up--; up) {
parts.unshift("..");
}
}
return parts;
}
var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
return splitPathRe.exec(filename).slice(1);
};
exports.resolve = function() {
var resolvedPath = "", resolvedAbsolute = false;
for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
var path = i >= 0 ? arguments[i] : process.cwd();
if (typeof path !== "string") {
throw new TypeError("Arguments to path.resolve must be strings");
} else if (!path) {
continue;
}
resolvedPath = path + "/" + resolvedPath;
resolvedAbsolute = path.charAt(0) === "/";
}
resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p) {
return !!p;
}), !resolvedAbsolute).join("/");
return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
};
exports.normalize = function(path) {
var isAbsolute = exports.isAbsolute(path), trailingSlash = substr(path, -1) === "/";
path = normalizeArray(filter(path.split("/"), function(p) {
return !!p;
}), !isAbsolute).join("/");
if (!path && !isAbsolute) {
path = ".";
}
if (path && trailingSlash) {
path += "/";
}
return (isAbsolute ? "/" : "") + path;
};
exports.isAbsolute = function(path) {
return path.charAt(0) === "/";
};
exports.join = function() {
var paths = Array.prototype.slice.call(arguments, 0);
return exports.normalize(filter(paths, function(p, index) {
if (typeof p !== "string") {
throw new TypeError("Arguments to path.join must be strings");
}
return p;
}).join("/"));
};
exports.relative = function(from, to) {
from = exports.resolve(from).substr(1);
to = exports.resolve(to).substr(1);
function trim(arr) {
var start = 0;
for (;start < arr.length; start++) {
if (arr[start] !== "") break;
}
var end = arr.length - 1;
for (;end >= 0; end--) {
if (arr[end] !== "") break;
}
if (start > end) return [];
return arr.slice(start, end - start + 1);
}
var fromParts = trim(from.split("/"));
var toParts = trim(to.split("/"));
var length = Math.min(fromParts.length, toParts.length);
var samePartsLength = length;
for (var i = 0; i < length; i++) {
if (fromParts[i] !== toParts[i]) {
samePartsLength = i;
break;
}
}
var outputParts = [];
for (var i = samePartsLength; i < fromParts.length; i++) {
outputParts.push("..");
}
outputParts = outputParts.concat(toParts.slice(samePartsLength));
return outputParts.join("/");
};
exports.sep = "/";
exports.delimiter = ":";
exports.dirname = function(path) {
var result = splitPath(path), root = result[0], dir = result[1];
if (!root && !dir) {
return ".";
}
if (dir) {
dir = dir.substr(0, dir.length - 1);
}
return root + dir;
};
exports.basename = function(path, ext) {
var f = splitPath(path)[2];
if (ext && f.substr(-1 * ext.length) === ext) {
f = f.substr(0, f.length - ext.length);
}
return f;
};
exports.extname = function(path) {
return splitPath(path)[3];
};
function filter(xs, f) {
if (xs.filter) return xs.filter(f);
var res = [];
for (var i = 0; i < xs.length; i++) {
if (f(xs[i], i, xs)) res.push(xs[i]);
}
return res;
}
var substr = "ab".substr(-1) === "b" ? function(str, start, len) {
return str.substr(start, len);
} : function(str, start, len) {
if (start < 0) start = str.length + start;
return str.substr(start, len);
};
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var http_1 = __webpack_require__(167);
var ns_http_1 = __webpack_require__(274);
var ns_file_system_1 = __webpack_require__(268);
var core_1 = __webpack_require__(92);
var http_2 = __webpack_require__(167);
var ns_http_2 = __webpack_require__(274);
exports.NSHttp = ns_http_2.NSHttp;
function nsHttpFactory(backend, options, nsFileSystem) {
return new ns_http_1.NSHttp(backend, options, nsFileSystem);
}
exports.nsHttpFactory = nsHttpFactory;
function nsXSRFStrategyFactory() {
return new ns_http_1.NSXSRFStrategy();
}
exports.nsXSRFStrategyFactory = nsXSRFStrategyFactory;
var NativeScriptHttpModule = function() {
function NativeScriptHttpModule() {}
return NativeScriptHttpModule;
}();
NativeScriptHttpModule = __decorate([ core_1.NgModule({
providers: [ {
provide: http_2.XSRFStrategy,
useFactory: nsXSRFStrategyFactory
}, ns_file_system_1.NSFileSystem, {
provide: http_1.Http,
useFactory: nsHttpFactory,
deps: [ http_1.XHRBackend, http_1.RequestOptions, ns_file_system_1.NSFileSystem ]
} ],
imports: [ http_2.HttpModule ],
exports: [ http_2.HttpModule ]
}) ], NativeScriptHttpModule);
exports.NativeScriptHttpModule = NativeScriptHttpModule;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var http_1 = __webpack_require__(167);
var Observable_1 = __webpack_require__(93);
__webpack_require__(275);
var ns_file_system_1 = __webpack_require__(268);
var NSXSRFStrategy = function() {
function NSXSRFStrategy() {}
NSXSRFStrategy.prototype.configureRequest = function(_req) {};
return NSXSRFStrategy;
}();
exports.NSXSRFStrategy = NSXSRFStrategy;
var NSHttp = function(_super) {
__extends(NSHttp, _super);
function NSHttp(backend, defaultOptions, nsFileSystem) {
var _this = _super.call(this, backend, defaultOptions) || this;
_this.nsFileSystem = nsFileSystem;
return _this;
}
NSHttp.prototype.get = function(url, options) {
var _this = this;
if (url.indexOf("~") === 0 || url.indexOf("/") === 0) {
url = url.replace("~", "").replace("/", "");
return Observable_1.Observable.fromPromise(new Promise(function(resolve, reject) {
var app = _this.nsFileSystem.currentApp();
var localFile = app.getFile(url);
if (localFile) {
localFile.readText().then(function(data) {
resolve(responseOptions(data, 200, url));
}, function(err) {
reject(responseOptions(err, 400, url));
});
} else {
reject(responseOptions("Not Found", 404, url));
}
}));
} else {
return _super.prototype.get.call(this, url, options);
}
};
return NSHttp;
}(http_1.Http);
NSHttp = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", [ http_1.ConnectionBackend, http_1.RequestOptions, ns_file_system_1.NSFileSystem ]) ], NSHttp);
exports.NSHttp = NSHttp;
function responseOptions(body, status, url) {
return new http_1.Response(new http_1.ResponseOptions({
body: body,
status: status,
statusText: "OK",
type: status === 200 ? http_1.ResponseType.Default : http_1.ResponseType.Error,
url: url
}));
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var fromPromise_1 = __webpack_require__(163);
Observable_1.Observable.fromPromise = fromPromise_1.fromPromise;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
__webpack_require__(18);
__export(__webpack_require__(4));
__export(__webpack_require__(3));
__export(__webpack_require__(277));
__export(__webpack_require__(278));
__export(__webpack_require__(269));
__export(__webpack_require__(273));
__export(__webpack_require__(254));
__export(__webpack_require__(252));
__export(__webpack_require__(126));
__export(__webpack_require__(127));
__export(__webpack_require__(268));
__export(__webpack_require__(287));
__export(__webpack_require__(247));
__export(__webpack_require__(248));
__export(__webpack_require__(145));
var element_registry_1 = __webpack_require__(249);
exports.registerElement = element_registry_1.registerElement;
exports.getViewClass = element_registry_1.getViewClass;
exports.getViewMeta = element_registry_1.getViewMeta;
exports.isKnownView = element_registry_1.isKnownView;
__export(__webpack_require__(262));
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var platform_common_1 = __webpack_require__(4);
var core_1 = __webpack_require__(92);
var _platformNativeScript = core_1.createPlatformFactory(core_1.platformCore, "nativeScript", platform_common_1.COMMON_PROVIDERS.slice());
function platformNativeScript(options, extraProviders) {
if (options && options.bootInExistingPage === true) {
return _platformNativeScript(extraProviders);
} else {
return new platform_common_1.NativeScriptPlatformRef(_platformNativeScript(extraProviders), options);
}
}
exports.platformNativeScript = platformNativeScript;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var router_1 = __webpack_require__(168);
var common_1 = __webpack_require__(159);
var frame_1 = __webpack_require__(10);
var ns_router_link_1 = __webpack_require__(279);
var ns_router_link_active_1 = __webpack_require__(283);
var page_router_outlet_1 = __webpack_require__(280);
var ns_location_strategy_1 = __webpack_require__(281);
var ns_platform_location_1 = __webpack_require__(285);
var router_extensions_1 = __webpack_require__(282);
var nativescript_module_1 = __webpack_require__(246);
var page_router_outlet_2 = __webpack_require__(280);
exports.PageRoute = page_router_outlet_2.PageRoute;
var router_extensions_2 = __webpack_require__(282);
exports.RouterExtensions = router_extensions_2.RouterExtensions;
var ns_module_factory_loader_1 = __webpack_require__(286);
exports.NSModuleFactoryLoader = ns_module_factory_loader_1.NSModuleFactoryLoader;
var NativeScriptRouterModule = function() {
function NativeScriptRouterModule() {}
NativeScriptRouterModule.forRoot = function(routes, config) {
return router_1.RouterModule.forRoot(routes, config);
};
NativeScriptRouterModule.forChild = function(routes) {
return router_1.RouterModule.forChild(routes);
};
return NativeScriptRouterModule;
}();
NativeScriptRouterModule = __decorate([ core_1.NgModule({
declarations: [ ns_router_link_1.NSRouterLink, ns_router_link_active_1.NSRouterLinkActive, page_router_outlet_1.PageRouterOutlet ],
providers: [ {
provide: ns_location_strategy_1.NSLocationStrategy,
useFactory: provideLocationStrategy,
deps: [ [ ns_location_strategy_1.NSLocationStrategy, new core_1.Optional(), new core_1.SkipSelf() ], frame_1.Frame ]
}, {
provide: common_1.LocationStrategy,
useExisting: ns_location_strategy_1.NSLocationStrategy
}, ns_platform_location_1.NativescriptPlatformLocation, {
provide: common_1.PlatformLocation,
useClass: ns_platform_location_1.NativescriptPlatformLocation
}, router_extensions_1.RouterExtensions, core_1.SystemJsNgModuleLoader ],
imports: [ router_1.RouterModule, nativescript_module_1.NativeScriptModule ],
exports: [ router_1.RouterModule, ns_router_link_1.NSRouterLink, ns_router_link_active_1.NSRouterLinkActive, page_router_outlet_1.PageRouterOutlet ],
schemas: [ core_1.NO_ERRORS_SCHEMA ]
}) ], NativeScriptRouterModule);
exports.NativeScriptRouterModule = NativeScriptRouterModule;
function provideLocationStrategy(locationStrategy, frame) {
return locationStrategy ? locationStrategy : new ns_location_strategy_1.NSLocationStrategy(frame);
}
exports.provideLocationStrategy = provideLocationStrategy;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var router_1 = __webpack_require__(168);
var trace_1 = __webpack_require__(126);
var page_router_outlet_1 = __webpack_require__(280);
var router_extensions_1 = __webpack_require__(282);
var types_1 = __webpack_require__(17);
var NSRouterLink = function() {
function NSRouterLink(router, navigator, route, pageRoute) {
this.router = router;
this.navigator = navigator;
this.route = route;
this.pageRoute = pageRoute;
this.commands = [];
this.pageTransition = true;
this.usePageRoute = this.pageRoute && this.route === this.pageRoute.activatedRoute.getValue();
}
Object.defineProperty(NSRouterLink.prototype, "currentRoute", {
get: function() {
return this.usePageRoute ? this.pageRoute.activatedRoute.getValue() : this.route;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NSRouterLink.prototype, "params", {
set: function(data) {
if (Array.isArray(data)) {
this.commands = data;
} else {
this.commands = [ data ];
}
},
enumerable: true,
configurable: true
});
NSRouterLink.prototype.onTap = function() {
trace_1.routerLog("nsRouterLink.tapped: " + this.commands + " usePageRoute: " + this.usePageRoute + " clearHistory: " + this.clearHistory + " transition: " + JSON.stringify(this.pageTransition));
var extras = this.getExtras();
this.navigator.navigateByUrl(this.urlTree, extras);
};
NSRouterLink.prototype.getExtras = function() {
var transition = this.getTransition();
return {
queryParams: this.queryParams,
fragment: this.fragment,
clearHistory: this.clearHistory,
animated: transition.animated,
transition: transition.transition,
relativeTo: this.currentRoute
};
};
NSRouterLink.prototype.getTransition = function() {
if (typeof this.pageTransition === "boolean") {
return {
animated: this.pageTransition
};
} else if (types_1.isString(this.pageTransition)) {
if (this.pageTransition === "none" || this.pageTransition === "false") {
return {
animated: false
};
} else {
return {
animated: true,
transition: {
name: this.pageTransition
}
};
}
} else {
return {
animated: true,
transition: this.pageTransition
};
}
};
NSRouterLink.prototype.ngOnChanges = function(_) {
this.updateUrlTree();
};
NSRouterLink.prototype.updateUrlTree = function() {
this.urlTree = this.router.createUrlTree(this.commands, {
relativeTo: this.currentRoute,
queryParams: this.queryParams,
fragment: this.fragment
});
};
return NSRouterLink;
}();
__decorate([ core_1.Input(), __metadata("design:type", String) ], NSRouterLink.prototype, "target", void 0);
__decorate([ core_1.Input(), __metadata("design:type", Object) ], NSRouterLink.prototype, "queryParams", void 0);
__decorate([ core_1.Input(), __metadata("design:type", String) ], NSRouterLink.prototype, "fragment", void 0);
__decorate([ core_1.Input(), __metadata("design:type", Boolean) ], NSRouterLink.prototype, "clearHistory", void 0);
__decorate([ core_1.Input(), __metadata("design:type", Object) ], NSRouterLink.prototype, "pageTransition", void 0);
__decorate([ core_1.Input("nsRouterLink"), __metadata("design:type", Object), __metadata("design:paramtypes", [ Object ]) ], NSRouterLink.prototype, "params", null);
__decorate([ core_1.HostListener("tap"), __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0) ], NSRouterLink.prototype, "onTap", null);
NSRouterLink = __decorate([ core_1.Directive({
selector: "[nsRouterLink]"
}), __param(3, core_1.Optional()), __metadata("design:paramtypes", [ router_1.Router, router_extensions_1.RouterExtensions, router_1.ActivatedRoute, page_router_outlet_1.PageRoute ]) ], NSRouterLink);
exports.NSRouterLink = NSRouterLink;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var router_1 = __webpack_require__(168);
var frame_1 = __webpack_require__(10);
var page_1 = __webpack_require__(128);
var BehaviorSubject_1 = __webpack_require__(169);
var lang_facade_1 = __webpack_require__(143);
var platform_providers_1 = __webpack_require__(127);
var trace_1 = __webpack_require__(126);
var detached_loader_1 = __webpack_require__(252);
var view_util_1 = __webpack_require__(248);
var ns_location_strategy_1 = __webpack_require__(281);
var PageRoute = function() {
function PageRoute(startRoute) {
this.activatedRoute = new BehaviorSubject_1.BehaviorSubject(startRoute);
}
return PageRoute;
}();
exports.PageRoute = PageRoute;
var RefCache = function() {
function RefCache() {
this.cache = new Array();
}
RefCache.prototype.push = function(componentRef, reusedRoute, outletMap, loaderRef) {
this.cache.push({
componentRef: componentRef,
reusedRoute: reusedRoute,
outletMap: outletMap,
loaderRef: loaderRef
});
};
RefCache.prototype.pop = function() {
return this.cache.pop();
};
RefCache.prototype.peek = function() {
return this.cache[this.cache.length - 1];
};
Object.defineProperty(RefCache.prototype, "length", {
get: function() {
return this.cache.length;
},
enumerable: true,
configurable: true
});
return RefCache;
}();
var PageRouterOutlet = function() {
function PageRouterOutlet(parentOutletMap, location, name, locationStrategy, componentFactoryResolver, resolver, frame, device, pageFactory) {
this.location = location;
this.locationStrategy = locationStrategy;
this.componentFactoryResolver = componentFactoryResolver;
this.resolver = resolver;
this.frame = frame;
this.pageFactory = pageFactory;
this.refCache = new RefCache();
this.isInitialPage = true;
parentOutletMap.registerOutlet(name ? name : router_1.PRIMARY_OUTLET, this);
this.viewUtil = new view_util_1.ViewUtil(device);
this.detachedLoaderFactory = resolver.resolveComponentFactory(detached_loader_1.DetachedLoader);
log("DetachedLoaderFactory loaded");
}
Object.defineProperty(PageRouterOutlet.prototype, "locationInjector", {
get: function() {
return this.location.injector;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageRouterOutlet.prototype, "locationFactoryResolver", {
get: function() {
return this.resolver;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageRouterOutlet.prototype, "isActivated", {
get: function() {
return !!this.currentActivatedComp;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageRouterOutlet.prototype, "component", {
get: function() {
if (!this.currentActivatedComp) {
throw new Error("Outlet is not activated");
}
return this.currentActivatedComp.instance;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageRouterOutlet.prototype, "activatedRoute", {
get: function() {
if (!this.currentActivatedComp) {
throw new Error("Outlet is not activated");
}
return this.currentActivatedRoute;
},
enumerable: true,
configurable: true
});
PageRouterOutlet.prototype.deactivate = function() {
if (this.locationStrategy._isPageNavigatingBack()) {
log("PageRouterOutlet.deactivate() while going back - should destroy");
var poppedItem = this.refCache.pop();
var poppedRef = poppedItem.componentRef;
if (this.currentActivatedComp !== poppedRef) {
throw new Error("Current componentRef is different for cached componentRef");
}
this.destroyCacheItem(poppedItem);
this.currentActivatedComp = null;
} else {
log("PageRouterOutlet.deactivate() while going forward - do nothing");
}
};
PageRouterOutlet.prototype.clearRefCache = function() {
while (this.refCache.length > 0) {
this.destroyCacheItem(this.refCache.pop());
}
};
PageRouterOutlet.prototype.destroyCacheItem = function(poppedItem) {
if (lang_facade_1.isPresent(poppedItem.componentRef)) {
poppedItem.componentRef.destroy();
}
if (lang_facade_1.isPresent(poppedItem.loaderRef)) {
poppedItem.loaderRef.destroy();
}
};
PageRouterOutlet.prototype.activateWith = function(activatedRoute, resolver, outletMap) {
this.outletMap = outletMap;
this.currentActivatedRoute = activatedRoute;
resolver = resolver || this.resolver;
if (this.locationStrategy._isPageNavigatingBack()) {
this.activateOnGoBack(activatedRoute, outletMap);
} else {
this.activateOnGoForward(activatedRoute, outletMap, resolver);
}
};
PageRouterOutlet.prototype.activateOnGoForward = function(activatedRoute, outletMap, loadedResolver) {
var pageRoute = new PageRoute(activatedRoute);
var providers = new Map();
providers.set(PageRoute, pageRoute);
providers.set(router_1.ActivatedRoute, activatedRoute);
providers.set(router_1.RouterOutletMap, outletMap);
var childInjector = new ChildInjector(providers, this.location.injector);
var factory = this.getComponentFactory(activatedRoute, loadedResolver);
if (this.isInitialPage) {
log("PageRouterOutlet.activate() initial page - just load component");
this.isInitialPage = false;
this.currentActivatedComp = this.location.createComponent(factory, this.location.length, childInjector, []);
this.currentActivatedComp.changeDetectorRef.detectChanges();
this.refCache.push(this.currentActivatedComp, pageRoute, outletMap, null);
} else {
log("PageRouterOutlet.activate() forward navigation - " + "create detached loader in the loader container");
var page = this.pageFactory({
isNavigation: true,
componentType: factory.componentType
});
providers.set(page_1.Page, page);
var loaderRef = this.location.createComponent(this.detachedLoaderFactory, this.location.length, childInjector, []);
loaderRef.changeDetectorRef.detectChanges();
this.currentActivatedComp = loaderRef.instance.loadWithFactory(factory);
this.loadComponentInPage(page, this.currentActivatedComp);
this.currentActivatedComp.changeDetectorRef.detectChanges();
this.refCache.push(this.currentActivatedComp, pageRoute, outletMap, loaderRef);
}
};
PageRouterOutlet.prototype.activateOnGoBack = function(activatedRoute, outletMap) {
log("PageRouterOutlet.activate() - Back navigation, so load from cache");
this.locationStrategy._finishBackPageNavigation();
var cacheItem = this.refCache.peek();
cacheItem.reusedRoute.activatedRoute.next(activatedRoute);
this.outletMap = cacheItem.outletMap;
Object.assign(outletMap, cacheItem.outletMap);
this.currentActivatedComp = cacheItem.componentRef;
};
PageRouterOutlet.prototype.loadComponentInPage = function(page, componentRef) {
var _this = this;
var componentView = componentRef.location.nativeElement;
this.viewUtil.removeChild(componentView.parent, componentView);
page.content = componentView;
page.on("navigatedFrom", global.Zone.current.wrap(function(args) {
if (args.isBackNavigation) {
_this.locationStrategy._beginBackPageNavigation();
_this.locationStrategy.back();
}
}));
var navOptions = this.locationStrategy._beginPageNavigation();
this.frame.navigate({
create: function() {
return page;
},
clearHistory: navOptions.clearHistory,
animated: navOptions.animated,
transition: navOptions.transition
});
if (navOptions.clearHistory) {
this.clearRefCache();
}
};
PageRouterOutlet.prototype.getComponentFactory = function(activatedRoute, loadedResolver) {
var snapshot = activatedRoute._futureSnapshot;
var component = snapshot._routeConfig.component;
if (loadedResolver) {
return loadedResolver.resolveComponentFactory(component);
} else {
return this.componentFactoryResolver.resolveComponentFactory(component);
}
};
return PageRouterOutlet;
}();
PageRouterOutlet = __decorate([ core_1.Directive({
selector: "page-router-outlet"
}), __param(2, core_1.Attribute("name")), __param(7, core_1.Inject(platform_providers_1.DEVICE)), __param(8, core_1.Inject(platform_providers_1.PAGE_FACTORY)), __metadata("design:paramtypes", [ router_1.RouterOutletMap, core_1.ViewContainerRef, String, ns_location_strategy_1.NSLocationStrategy, core_1.ComponentFactoryResolver, core_1.ComponentFactoryResolver, frame_1.Frame, Object, Function ]) ], PageRouterOutlet);
exports.PageRouterOutlet = PageRouterOutlet;
var ChildInjector = function() {
function ChildInjector(providers, parent) {
this.providers = providers;
this.parent = parent;
}
ChildInjector.prototype.get = function(token, notFoundValue) {
return this.providers.get(token) || this.parent.get(token, notFoundValue);
};
return ChildInjector;
}();
function log(msg) {
trace_1.routerLog(msg);
}
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var common_1 = __webpack_require__(159);
var trace_1 = __webpack_require__(126);
var frame_1 = __webpack_require__(10);
var lang_facade_1 = __webpack_require__(143);
var defaultNavOptions = {
clearHistory: false,
animated: true
};
var NSLocationStrategy = function(_super) {
__extends(NSLocationStrategy, _super);
function NSLocationStrategy(frame) {
var _this = _super.call(this) || this;
_this.frame = frame;
_this.states = new Array();
_this.popStateCallbacks = new Array();
_this._isPageNavigationBack = false;
trace_1.routerLog("NSLocationStrategy.constructor()");
return _this;
}
NSLocationStrategy.prototype.path = function() {
var state = this.peekState();
var result = state ? state.url : "/";
trace_1.routerLog("NSLocationStrategy.path(): " + result);
return result;
};
NSLocationStrategy.prototype.prepareExternalUrl = function(internal) {
trace_1.routerLog("NSLocationStrategy.prepareExternalUrl() internal: " + internal);
return internal;
};
NSLocationStrategy.prototype.pushState = function(state, title, url, queryParams) {
trace_1.routerLog("NSLocationStrategy.pushState state: " + (state + ", title: " + title + ", url: " + url + ", queryParams: " + queryParams));
this.pushStateInternal(state, title, url, queryParams);
};
NSLocationStrategy.prototype.pushStateInternal = function(state, title, url, queryParams) {
var isNewPage = this.states.length === 0;
this.states.push({
state: state,
title: title,
url: url,
queryParams: queryParams,
isPageNavigation: isNewPage
});
};
NSLocationStrategy.prototype.replaceState = function(state, title, url, queryParams) {
if (this.states.length > 0) {
trace_1.routerLog("NSLocationStrategy.replaceState changing exisitng state: " + (state + ", title: " + title + ", url: " + url + ", queryParams: " + queryParams));
var topState = this.peekState();
topState.state = state;
topState.title = title;
topState.url = url;
topState.queryParams = queryParams;
} else {
trace_1.routerLog("NSLocationStrategy.replaceState pushing new state: " + (state + ", title: " + title + ", url: " + url + ", queryParams: " + queryParams));
this.pushStateInternal(state, title, url, queryParams);
}
};
NSLocationStrategy.prototype.forward = function() {
throw new Error("NSLocationStrategy.forward() - not implemented");
};
NSLocationStrategy.prototype.back = function() {
if (this._isPageNavigationBack) {
var state = this.states.pop();
var count = 1;
while (!state.isPageNavigation) {
state = this.states.pop();
count++;
}
trace_1.routerLog("NSLocationStrategy.back() while navigating back. States popped: " + count);
this.callPopState(state, true);
} else {
var state = this.peekState();
if (state.isPageNavigation) {
trace_1.routerLog("NSLocationStrategy.back() while not navigating back but top" + " state is page - will call frame.goback()");
this.frame.goBack();
} else {
trace_1.routerLog("NSLocationStrategy.back() while not navigating back but top" + " state is not page - just pop");
this.callPopState(this.states.pop(), true);
}
}
};
NSLocationStrategy.prototype.canGoBack = function() {
return this.states.length > 1;
};
NSLocationStrategy.prototype.onPopState = function(fn) {
trace_1.routerLog("NSLocationStrategy.onPopState");
this.popStateCallbacks.push(fn);
};
NSLocationStrategy.prototype.getBaseHref = function() {
trace_1.routerLog("NSLocationStrategy.getBaseHref()");
return "";
};
NSLocationStrategy.prototype.callPopState = function(state, pop) {
if (pop === void 0) {
pop = true;
}
var change = {
url: state.url,
pop: pop
};
for (var _i = 0, _a = this.popStateCallbacks; _i < _a.length; _i++) {
var fn = _a[_i];
fn(change);
}
};
NSLocationStrategy.prototype.peekState = function() {
if (this.states.length > 0) {
return this.states[this.states.length - 1];
}
return null;
};
NSLocationStrategy.prototype.toString = function() {
return this.states.map(function(v, i) {
return i + ".[" + (v.isPageNavigation ? "PAGE" : "INTERNAL") + '] "' + v.url + '"';
}).reverse().join("\n");
};
NSLocationStrategy.prototype._beginBackPageNavigation = function() {
trace_1.routerLog("NSLocationStrategy.startGoBack()");
if (this._isPageNavigationBack) {
throw new Error("Calling startGoBack while going back.");
}
this._isPageNavigationBack = true;
};
NSLocationStrategy.prototype._finishBackPageNavigation = function() {
trace_1.routerLog("NSLocationStrategy.finishBackPageNavigation()");
if (!this._isPageNavigationBack) {
throw new Error("Calling endGoBack while not going back.");
}
this._isPageNavigationBack = false;
};
NSLocationStrategy.prototype._isPageNavigatingBack = function() {
return this._isPageNavigationBack;
};
NSLocationStrategy.prototype._beginPageNavigation = function() {
trace_1.routerLog("NSLocationStrategy._beginPageNavigation()");
var lastState = this.peekState();
if (lastState) {
lastState.isPageNavigation = true;
}
var navOptions = this._currentNavigationOptions || defaultNavOptions;
if (navOptions.clearHistory) {
trace_1.routerLog("NSLocationStrategy._beginPageNavigation clearing states history");
this.states = [ lastState ];
}
this._currentNavigationOptions = undefined;
return navOptions;
};
NSLocationStrategy.prototype._setNavigationOptions = function(options) {
this._currentNavigationOptions = {
clearHistory: lang_facade_1.isPresent(options.clearHistory) ? options.clearHistory : false,
animated: lang_facade_1.isPresent(options.animated) ? options.animated : true,
transition: options.transition
};
trace_1.routerLog("NSLocationStrategy._setNavigationOptions(" + (JSON.stringify(this._currentNavigationOptions) + ")"));
};
NSLocationStrategy.prototype._getStates = function() {
return this.states.slice();
};
return NSLocationStrategy;
}(common_1.LocationStrategy);
NSLocationStrategy = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", [ frame_1.Frame ]) ], NSLocationStrategy);
exports.NSLocationStrategy = NSLocationStrategy;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var router_1 = __webpack_require__(168);
var ns_location_strategy_1 = __webpack_require__(281);
var frame_1 = __webpack_require__(10);
var RouterExtensions = function() {
function RouterExtensions(router, locationStrategy, frame) {
this.router = router;
this.locationStrategy = locationStrategy;
this.frame = frame;
}
RouterExtensions.prototype.navigate = function(commands, extras) {
if (extras) {
this.locationStrategy._setNavigationOptions(extras);
}
return this.router.navigate(commands, extras);
};
RouterExtensions.prototype.navigateByUrl = function(url, options) {
if (options) {
this.locationStrategy._setNavigationOptions(options);
}
return this.router.navigateByUrl(url);
};
RouterExtensions.prototype.back = function() {
this.locationStrategy.back();
};
RouterExtensions.prototype.canGoBack = function() {
return this.locationStrategy.canGoBack();
};
RouterExtensions.prototype.backToPreviousPage = function() {
this.frame.goBack();
};
RouterExtensions.prototype.canGoBackToPreviousPage = function() {
return this.frame.canGoBack();
};
return RouterExtensions;
}();
RouterExtensions = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", [ router_1.Router, ns_location_strategy_1.NSLocationStrategy, frame_1.Frame ]) ], RouterExtensions);
exports.RouterExtensions = RouterExtensions;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var router_1 = __webpack_require__(168);
var router_url_tree_1 = __webpack_require__(284);
var ns_router_link_1 = __webpack_require__(279);
var NSRouterLinkActive = function() {
function NSRouterLinkActive(router, element, renderer) {
var _this = this;
this.router = router;
this.element = element;
this.renderer = renderer;
this.classes = [];
this.nsRouterLinkActiveOptions = {
exact: false
};
this.subscription = router.events.subscribe(function(s) {
if (s instanceof router_1.NavigationEnd) {
_this.update();
}
});
}
NSRouterLinkActive.prototype.ngAfterContentInit = function() {
var _this = this;
this.links.changes.subscribe(function() {
return _this.update();
});
this.update();
};
Object.defineProperty(NSRouterLinkActive.prototype, "nsRouterLinkActive", {
set: function(data) {
if (Array.isArray(data)) {
this.classes = data;
} else {
this.classes = data.split(" ");
}
},
enumerable: true,
configurable: true
});
NSRouterLinkActive.prototype.ngOnChanges = function(_) {
this.update();
};
NSRouterLinkActive.prototype.ngOnDestroy = function() {
this.subscription.unsubscribe();
};
NSRouterLinkActive.prototype.update = function() {
var _this = this;
if (!this.links) {
return;
}
var currentUrlTree = this.router.parseUrl(this.router.url);
var isActiveLinks = this.reduceList(currentUrlTree, this.links);
this.classes.forEach(function(c) {
return _this.renderer.setElementClass(_this.element.nativeElement, c, isActiveLinks);
});
};
NSRouterLinkActive.prototype.reduceList = function(currentUrlTree, q) {
var _this = this;
return q.reduce(function(res, link) {
return res || router_url_tree_1.containsTree(currentUrlTree, link.urlTree, _this.nsRouterLinkActiveOptions.exact);
}, false);
};
return NSRouterLinkActive;
}();
__decorate([ core_1.ContentChildren(ns_router_link_1.NSRouterLink), __metadata("design:type", core_1.QueryList) ], NSRouterLinkActive.prototype, "links", void 0);
__decorate([ core_1.Input(), __metadata("design:type", Object) ], NSRouterLinkActive.prototype, "nsRouterLinkActiveOptions", void 0);
__decorate([ core_1.Input("nsRouterLinkActive"), __metadata("design:type", Object), __metadata("design:paramtypes", [ Object ]) ], NSRouterLinkActive.prototype, "nsRouterLinkActive", null);
NSRouterLinkActive = __decorate([ core_1.Directive({
selector: "[nsRouterLinkActive]"
}), __metadata("design:paramtypes", [ router_1.Router, core_1.ElementRef, core_1.Renderer ]) ], NSRouterLinkActive);
exports.NSRouterLinkActive = NSRouterLinkActive;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var router_1 = __webpack_require__(168);
function containsTree(container, containee, exact) {
if (exact) {
return equalSegmentGroups(container.root, containee.root);
} else {
return containsSegmentGroup(container.root, containee.root);
}
}
exports.containsTree = containsTree;
function equalSegmentGroups(container, containee) {
if (!equalPath(container.segments, containee.segments)) {
return false;
}
if (container.numberOfChildren !== containee.numberOfChildren) {
return false;
}
for (var c in containee.children) {
if (!container.children[c]) {
return false;
}
if (!equalSegmentGroups(container.children[c], containee.children[c])) {
return false;
}
}
return true;
}
function containsSegmentGroup(container, containee) {
return containsSegmentGroupHelper(container, containee, containee.segments);
}
function containsSegmentGroupHelper(container, containee, containeePaths) {
if (container.segments.length > containeePaths.length) {
var current = container.segments.slice(0, containeePaths.length);
if (!equalPath(current, containeePaths)) {
return false;
}
if (containee.hasChildren()) {
return false;
}
return true;
} else if (container.segments.length === containeePaths.length) {
if (!equalPath(container.segments, containeePaths)) {
return false;
}
for (var c in containee.children) {
if (!container.children[c]) {
return false;
}
if (!containsSegmentGroup(container.children[c], containee.children[c])) {
return false;
}
}
return true;
} else {
var current = containeePaths.slice(0, container.segments.length);
var next = containeePaths.slice(container.segments.length);
if (!equalPath(container.segments, current)) {
return false;
}
if (!container.children[router_1.PRIMARY_OUTLET]) {
return false;
}
return containsSegmentGroupHelper(container.children[router_1.PRIMARY_OUTLET], containee, next);
}
}
function equalPath(a, b) {
if (a.length !== b.length) {
return false;
}
for (var i = 0; i < a.length; ++i) {
if (a[i].path !== b[i].path) {
return false;
}
}
return true;
}
exports.equalPath = equalPath;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var ns_location_strategy_1 = __webpack_require__(281);
var common_1 = __webpack_require__(159);
var core_1 = __webpack_require__(92);
var trace_1 = __webpack_require__(126);
var NativescriptPlatformLocation = function(_super) {
__extends(NativescriptPlatformLocation, _super);
function NativescriptPlatformLocation(locationStartegy) {
var _this = _super.call(this) || this;
_this.locationStartegy = locationStartegy;
trace_1.routerLog("NativescriptPlatformLocation.constructor()");
return _this;
}
NativescriptPlatformLocation.prototype.getBaseHrefFromDOM = function() {
return "/";
};
NativescriptPlatformLocation.prototype.onPopState = function(fn) {
this.locationStartegy.onPopState(fn);
};
NativescriptPlatformLocation.prototype.onHashChange = function(_fn) {};
Object.defineProperty(NativescriptPlatformLocation.prototype, "search", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(NativescriptPlatformLocation.prototype, "hash", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(NativescriptPlatformLocation.prototype, "pathname", {
get: function() {
return this.locationStartegy.path();
},
set: function(_newPath) {
throw new Error("NativescriptPlatformLocation set pathname - not implemented");
},
enumerable: true,
configurable: true
});
NativescriptPlatformLocation.prototype.pushState = function(state, title, url) {
this.locationStartegy.pushState(state, title, url, null);
};
NativescriptPlatformLocation.prototype.replaceState = function(state, title, url) {
this.locationStartegy.replaceState(state, title, url, null);
};
NativescriptPlatformLocation.prototype.forward = function() {
throw new Error("NativescriptPlatformLocation.forward() - not implemented");
};
NativescriptPlatformLocation.prototype.back = function() {
this.locationStartegy.back();
};
return NativescriptPlatformLocation;
}(common_1.PlatformLocation);
NativescriptPlatformLocation = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", [ ns_location_strategy_1.NSLocationStrategy ]) ], NativescriptPlatformLocation);
exports.NativescriptPlatformLocation = NativescriptPlatformLocation;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var core_1 = __webpack_require__(92);
var file_system_1 = __webpack_require__(22);
var SEPARATOR = "#";
var NSModuleFactoryLoader = function() {
function NSModuleFactoryLoader(compiler, ngModuleLoader) {
this.compiler = compiler;
this.ngModuleLoader = ngModuleLoader;
this.offlineMode = compiler instanceof core_1.Compiler;
}
NSModuleFactoryLoader.prototype.load = function(path) {
if (this.offlineMode) {
return this.ngModuleLoader.load(path);
} else {
return this.loadAndCompile(path);
}
};
NSModuleFactoryLoader.prototype.loadAndCompile = function(path) {
var _a = splitPath(path), modulePath = _a.modulePath, exportName = _a.exportName;
var loadedModule = global.require(modulePath)[exportName];
checkNotEmpty(loadedModule, modulePath, exportName);
return Promise.resolve(this.compiler.compileModuleAsync(loadedModule));
};
return NSModuleFactoryLoader;
}();
NSModuleFactoryLoader = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", [ core_1.Compiler, core_1.SystemJsNgModuleLoader ]) ], NSModuleFactoryLoader);
exports.NSModuleFactoryLoader = NSModuleFactoryLoader;
function splitPath(path) {
var _a = path.split(SEPARATOR), modulePath = _a[0], exportName = _a[1];
modulePath = getAbsolutePath(modulePath);
if (typeof exportName === "undefined") {
exportName = "default";
}
return {
modulePath: modulePath,
exportName: exportName
};
}
function getAbsolutePath(relativePath) {
return file_system_1.path.normalize(file_system_1.path.join(file_system_1.knownFolders.currentApp().path, relativePath));
}
function checkNotEmpty(value, modulePath, exportName) {
if (!value) {
throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
}
return value;
}
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var dialogs_1 = __webpack_require__(253);
exports.ModalDialogHost = dialogs_1.ModalDialogHost;
exports.ModalDialogParams = dialogs_1.ModalDialogParams;
exports.ModalDialogService = dialogs_1.ModalDialogService;
}, function(module, exports, __webpack_require__) {
var fs = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "fs"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
var os = __webpack_require__(289);
var hookHelper = __webpack_require__(271);
var projectDir = hookHelper.findProjectDir();
if (projectDir) {
var hooksDir = hookHelper.getHooksDir(), beforeLivesyncHookDir = hookHelper.getBeforeLivesyncHookDir(), content = 'module.exports = require("nativescript-angular/hooks/before-livesync");';
if (!fs.existsSync(hooksDir)) {
fs.mkdirSync(hooksDir);
}
if (!fs.existsSync(beforeLivesyncHookDir)) {
fs.mkdirSync(beforeLivesyncHookDir);
}
fs.writeFileSync(hookHelper.getHookFilePath(), content + os.EOL);
}
}, function(module, exports) {
exports.endianness = function() {
return "LE";
};
exports.hostname = function() {
if (typeof location !== "undefined") {
return location.hostname;
} else return "";
};
exports.loadavg = function() {
return [];
};
exports.uptime = function() {
return 0;
};
exports.freemem = function() {
return Number.MAX_VALUE;
};
exports.totalmem = function() {
return Number.MAX_VALUE;
};
exports.cpus = function() {
return [];
};
exports.type = function() {
return "Browser";
};
exports.release = function() {
if (typeof navigator !== "undefined") {
return navigator.appVersion;
}
return "";
};
exports.networkInterfaces = exports.getNetworkInterfaces = function() {
return {};
};
exports.arch = function() {
return "javascript";
};
exports.platform = function() {
return "browser";
};
exports.tmpdir = exports.tmpDir = function() {
return "/tmp";
};
exports.EOL = "\n";
}, function(module, exports) {
"use strict";
function Search(menu) {
this.menu = menu;
this.$search = document.getElementById("menu-search");
this.$searchBox = document.getElementById("menu-search-box");
this.$searchResults = document.getElementById("menu-search-results");
this.loadBiblio();
document.addEventListener("keydown", this.documentKeydown.bind(this));
this.$searchBox.addEventListener("keydown", debounce(this.searchBoxKeydown.bind(this), {
stopPropagation: true
}));
this.$searchBox.addEventListener("keyup", debounce(this.searchBoxKeyup.bind(this), {
stopPropagation: true
}));
}
Search.prototype.loadBiblio = function() {
var $biblio = document.getElementById("menu-search-biblio");
if (!$biblio) {
this.biblio = {};
} else {
this.biblio = JSON.parse($biblio.textContent);
this.biblio.clauses = this.biblio.filter(function(e) {
return e.type === "clause";
});
this.biblio.clausesById = this.biblio.clauses.reduce(function(map, entry) {
map[entry.id] = entry;
return map;
}, {});
}
};
Search.prototype.documentKeydown = function(e) {
if (e.keyCode === 191) {
e.preventDefault();
e.stopPropagation();
this.triggerSearch();
}
};
Search.prototype.searchBoxKeydown = function(e) {
e.stopPropagation();
e.preventDefault();
if (e.keyCode === 191 && e.target.value.length === 0) {
e.preventDefault();
} else if (e.keyCode === 13) {
e.preventDefault();
this.selectResult();
}
};
Search.prototype.searchBoxKeyup = function(e) {
if (e.keyCode === 13 || e.keyCode === 9) {
return;
}
this.search(e.target.value);
};
Search.prototype.triggerSearch = function(e) {
if (this.menu.isVisible()) {
this._closeAfterSearch = false;
} else {
this._closeAfterSearch = true;
this.menu.show();
}
this.$searchBox.focus();
this.$searchBox.select();
};
function relevance(result, searchString) {
var relevance = 0;
relevance = Math.max(0, 8 - result.match.chunks) << 7;
if (result.match.caseMatch) {
relevance *= 2;
}
if (result.match.prefix) {
relevance += 2048;
}
relevance += Math.max(0, 255 - result.entry.key.length);
return relevance;
}
Search.prototype.search = function(searchString) {
var s = Date.now();
if (searchString === "") {
this.displayResults([]);
this.hideSearch();
return;
} else {
this.showSearch();
}
if (searchString.length === 1) {
this.displayResults([]);
return;
}
var results;
if (/^[\d\.]*$/.test(searchString)) {
results = this.biblio.clauses.filter(function(clause) {
return clause.number.substring(0, searchString.length) === searchString;
}).map(function(clause) {
return {
entry: clause
};
});
} else {
results = [];
for (var i = 0; i < this.biblio.length; i++) {
var entry = this.biblio[i];
var match = fuzzysearch(searchString, entry.key);
if (match) {
results.push({
entry: entry,
match: match
});
}
}
results.forEach(function(result) {
result.relevance = relevance(result, searchString);
});
results = results.sort(function(a, b) {
return b.relevance - a.relevance;
});
}
if (results.length > 50) {
results = results.slice(0, 50);
}
this.displayResults(results);
};
Search.prototype.hideSearch = function() {
this.$search.classList.remove("active");
};
Search.prototype.showSearch = function() {
this.$search.classList.add("active");
};
Search.prototype.selectResult = function() {
var $first = this.$searchResults.querySelector("li:first-child a");
if ($first) {
document.location = $first.getAttribute("href");
}
this.$searchBox.value = "";
this.$searchBox.blur();
this.displayResults([]);
this.hideSearch();
if (this._closeAfterSearch) {
this.menu.hide();
}
};
Search.prototype.displayResults = function(results) {
if (results.length > 0) {
this.$searchResults.classList.remove("no-results");
var html = "<ul>";
results.forEach(function(result) {
var entry = result.entry;
var id = entry.id;
var cssClass = "";
var text = "";
if (entry.type === "clause") {
var number = entry.number ? entry.number + " " : "";
text = number + entry.key;
cssClass = "clause";
id = entry.id;
} else if (entry.type === "production") {
text = entry.key;
cssClass = "prod";
id = entry.id;
} else if (entry.type === "op") {
text = entry.key;
cssClass = "op";
id = entry.refId;
} else if (entry.type === "term") {
text = entry.key;
cssClass = "term";
id = entry.id || entry.refId;
}
if (text) {
html += "<li class=menu-search-result-" + cssClass + '><a href="#' + id + '">' + text + "</a></li>";
}
});
html += "</ul>";
this.$searchResults.innerHTML = html;
} else {
this.$searchResults.innerHTML = "";
this.$searchResults.classList.add("no-results");
}
};
function Menu() {
this.$toggle = document.getElementById("menu-toggle");
this.$menu = document.getElementById("menu");
this.$toc = document.querySelector("menu-toc > ol");
this.$pins = document.querySelector("#menu-pins");
this.$pinList = document.getElementById("menu-pins-list");
this.$toc = document.querySelector("#menu-toc > ol");
this.$specContainer = document.getElementById("spec-container");
this.search = new Search(this);
this._pinnedIds = {};
this.loadPinEntries();
this.$toggle.addEventListener("click", this.toggle.bind(this));
document.addEventListener("keydown", this.documentKeydown.bind(this));
var tocItems = this.$menu.querySelectorAll("#menu-toc li");
for (var i = 0; i < tocItems.length; i++) {
var $item = tocItems[i];
$item.addEventListener("click", function($item, event) {
$item.classList.toggle("active");
event.stopPropagation();
}.bind(null, $item));
}
var tocLinks = this.$menu.querySelectorAll("#menu-toc li > a");
for (var i = 0; i < tocLinks.length; i++) {
var $link = tocLinks[i];
$link.addEventListener("click", function(event) {
this.toggle();
event.stopPropagation();
}.bind(this));
}
window.addEventListener("scroll", debounce(this.updateActiveClause.bind(this)));
this.updateActiveClause();
this.$toc.addEventListener("wheel", function(e) {
var target = e.currentTarget;
var offTop = e.deltaY < 0 && target.scrollTop === 0;
if (offTop) {
e.preventDefault();
}
var offBottom = e.deltaY > 0 && target.offsetHeight + target.scrollTop >= target.scrollHeight;
if (offBottom) {
event.preventDefault();
}
});
document.addEventListener("click", function(e) {
if (e.target.classList.contains("utils-pin")) {
var id = e.target.parentNode.parentNode.parentNode.parentNode.id;
this.togglePinEntry(id);
}
}.bind(this));
}
Menu.prototype.documentKeydown = function(e) {
e.stopPropagation();
if (e.keyCode === 80) {
this.togglePinEntry();
} else if (e.keyCode > 48 && e.keyCode < 58) {
this.selectPin(e.keyCode - 49);
}
};
Menu.prototype.updateActiveClause = function() {
this.setActiveClause(findActiveClause(this.$specContainer));
};
Menu.prototype.setActiveClause = function(clause) {
this.$activeClause = clause;
this.revealInToc(this.$activeClause);
};
Menu.prototype.revealInToc = function(path) {
var current = this.$toc.querySelectorAll("li.revealed");
for (var i = 0; i < current.length; i++) {
current[i].classList.remove("revealed");
current[i].classList.remove("revealed-leaf");
}
var current = this.$toc;
var index = 0;
while (index < path.length) {
var children = current.children;
for (var i = 0; i < children.length; i++) {
if ("#" + path[index].id === children[i].children[1].getAttribute("href")) {
children[i].classList.add("revealed");
if (index === path.length - 1) {
children[i].classList.add("revealed-leaf");
var rect = children[i].getBoundingClientRect();
this.$toc.getBoundingClientRect().top;
var tocRect = this.$toc.getBoundingClientRect();
if (rect.top + 10 > tocRect.bottom) {
this.$toc.scrollTop = this.$toc.scrollTop + (rect.top - tocRect.bottom) + (rect.bottom - rect.top);
} else if (rect.top < tocRect.top) {
this.$toc.scrollTop = this.$toc.scrollTop - (tocRect.top - rect.top);
}
}
current = children[i].querySelector("ol");
index++;
break;
}
}
}
};
function findActiveClause(root, path) {
var clauses = new ClauseWalker(root);
var $clause;
var found = false;
var path = path || [];
while ($clause = clauses.nextNode()) {
var rect = $clause.getBoundingClientRect();
var $header = $clause.children[0];
var marginTop = parseInt(getComputedStyle($header)["margin-top"]);
if (rect.top - marginTop <= 0 && rect.bottom > 0) {
found = true;
return findActiveClause($clause, path.concat($clause)) || path;
}
}
return path;
}
function ClauseWalker(root) {
var previous;
var treeWalker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
acceptNode: function(node) {
if (previous === node.parentNode) {
return NodeFilter.FILTER_REJECT;
} else {
previous = node;
}
if (node.nodeName === "EMU-CLAUSE" || node.nodeName === "EMU-INTRO" || node.nodeName === "EMU-ANNEX") {
return NodeFilter.FILTER_ACCEPT;
} else {
return NodeFilter.FILTER_SKIP;
}
}
}, false);
return treeWalker;
}
Menu.prototype.toggle = function() {
this.$menu.classList.toggle("active");
};
Menu.prototype.show = function() {
this.$menu.classList.add("active");
};
Menu.prototype.hide = function() {
this.$menu.classList.remove("active");
};
Menu.prototype.isVisible = function() {
return this.$menu.classList.contains("active");
};
Menu.prototype.showPins = function() {
this.$pins.classList.add("active");
};
Menu.prototype.hidePins = function() {
this.$pins.classList.remove("active");
};
Menu.prototype.addPinEntry = function(id) {
var entry = this.search.biblio.clausesById[id];
var prefix;
if (entry.number) {
prefix = entry.number + " ";
} else {
prefix = "";
}
this.$pinList.innerHTML += '<li><a href="#' + entry.id + '">' + prefix + entry.titleHTML + "</a></li>";
if (Object.keys(this._pinnedIds).length === 0) {
this.showPins();
}
this._pinnedIds[id] = true;
this.persistPinEntries();
};
Menu.prototype.removePinEntry = function(id) {
var item = this.$pinList.querySelector('a[href="#' + id + '"]').parentNode;
this.$pinList.removeChild(item);
delete this._pinnedIds[id];
if (Object.keys(this._pinnedIds).length === 0) {
this.hidePins();
}
this.persistPinEntries();
};
Menu.prototype.persistPinEntries = function() {
try {
if (!window.localStorage) return;
} catch (e) {
return;
}
localStorage.pinEntries = JSON.stringify(Object.keys(this._pinnedIds));
};
Menu.prototype.loadPinEntries = function() {
try {
if (!window.localStorage) return;
} catch (e) {
return;
}
var pinsString = window.localStorage.pinEntries;
if (!pinsString) return;
var pins = JSON.parse(pinsString);
for (var i = 0; i < pins.length; i++) {
this.addPinEntry(pins[i]);
}
};
Menu.prototype.togglePinEntry = function(id) {
if (!id) {
id = this.$activeClause[this.$activeClause.length - 1].id;
}
if (this._pinnedIds[id]) {
this.removePinEntry(id);
} else {
this.addPinEntry(id);
}
};
Menu.prototype.selectPin = function(num) {
document.location = this.$pinList.children[num].children[0].href;
};
function init() {
var menu = new Menu();
}
document.addEventListener("DOMContentLoaded", init);
function debounce(fn, opts) {
opts = opts || {};
var timeout;
return function(e) {
if (opts.stopPropagation) {
e.stopPropagation();
}
var args = arguments;
if (timeout) {
clearTimeout(timeout);
}
timeout = setTimeout(function() {
timeout = null;
fn.apply(this, args);
}.bind(this), 150);
};
}
var CLAUSE_NODES = [ "EMU-CLAUSE", "EMU-INTRO", "EMU-ANNEX" ];
function findLocalReferences($elem) {
var name = $elem.innerHTML;
var references = [];
var parentClause = $elem.parentNode;
while (parentClause && CLAUSE_NODES.indexOf(parentClause.nodeName) === -1) {
parentClause = parentClause.parentNode;
}
if (!parentClause) return;
var vars = parentClause.querySelectorAll("var");
for (var i = 0; i < vars.length; i++) {
var $var = vars[i];
if ($var.innerHTML === name) {
references.push($var);
}
}
return references;
}
function toggleFindLocalReferences($elem) {
var references = findLocalReferences($elem);
if ($elem.classList.contains("referenced")) {
references.forEach(function($reference) {
$reference.classList.remove("referenced");
});
} else {
references.forEach(function($reference) {
$reference.classList.add("referenced");
});
}
}
function installFindLocalReferences() {
document.addEventListener("click", function(e) {
if (e.target.nodeName === "VAR") {
toggleFindLocalReferences(e.target);
}
});
}
document.addEventListener("DOMContentLoaded", installFindLocalReferences);
function fuzzysearch(searchString, haystack, caseInsensitive) {
var tlen = haystack.length;
var qlen = searchString.length;
var chunks = 1;
var finding = false;
var prefix = true;
if (qlen > tlen) {
return false;
}
if (qlen === tlen) {
if (searchString === haystack) {
return {
caseMatch: true,
chunks: 1,
prefix: true
};
} else if (searchString.toLowerCase() === haystack.toLowerCase()) {
return {
caseMatch: false,
chunks: 1,
prefix: true
};
} else {
return false;
}
}
outer: for (var i = 0, j = 0; i < qlen; i++) {
var nch = searchString[i];
while (j < tlen) {
var targetChar = haystack[j++];
if (targetChar === nch) {
finding = true;
continue outer;
}
if (finding) {
chunks++;
finding = false;
}
}
if (caseInsensitive) {
return false;
}
return fuzzysearch(searchString.toLowerCase(), haystack.toLowerCase(), true);
}
return {
caseMatch: !caseInsensitive,
chunks: chunks,
prefix: j <= qlen
};
}
var CLAUSE_NODES = [ "EMU-CLAUSE", "EMU-INTRO", "EMU-ANNEX" ];
function findLocalReferences($elem) {
var name = $elem.innerHTML;
var references = [];
var parentClause = $elem.parentNode;
while (parentClause && CLAUSE_NODES.indexOf(parentClause.nodeName) === -1) {
parentClause = parentClause.parentNode;
}
if (!parentClause) return;
var vars = parentClause.querySelectorAll("var");
for (var i = 0; i < vars.length; i++) {
var $var = vars[i];
if ($var.innerHTML === name) {
references.push($var);
}
}
return references;
}
function toggleFindLocalReferences($elem) {
var references = findLocalReferences($elem);
if ($elem.classList.contains("referenced")) {
references.forEach(function($reference) {
$reference.classList.remove("referenced");
});
} else {
references.forEach(function($reference) {
$reference.classList.add("referenced");
});
}
}
function installFindLocalReferences() {
document.addEventListener("click", function(e) {
if (e.target.nodeName === "VAR") {
toggleFindLocalReferences(e.target);
}
});
}
document.addEventListener("DOMContentLoaded", installFindLocalReferences);
}, function(module, exports, __webpack_require__) {
const gulp = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "gulp"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
const sequence = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "gulp-sequence"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
const del = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "del"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
const tsb = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "gulp-tsb"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
const mocha = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "gulp-mocha"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
const emu = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "gulp-emu"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
const rename = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "gulp-rename"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
const gls = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "gulp-live-server"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
const spawn = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "child_process"');
e.code = "MODULE_NOT_FOUND";
throw e;
}()).spawn;
const project = tsb.create("tsconfig.json");
const tests = tsb.create("test/tsconfig.json");
gulp.task("clean", () => del([ "test/**/*.js", "test/**/*.js.map" ]));
gulp.task("build:reflect", () => gulp.src([ "Reflect.ts" ]).pipe(project()).pipe(gulp.dest(".")));
gulp.task("build:tests", [ "build:reflect" ], () => gulp.src([ "test/**/*.ts" ]).pipe(tests()).pipe(gulp.dest("test")));
gulp.task("build:spec", () => gulp.src([ "spec.html" ]).pipe(emu({
js: "ecmarkup.js",
css: "ecmarkup.css",
biblio: true
})).pipe(rename(path => {
if (path.basename === "spec" && path.extname === ".html") {
path.basename = "index";
}
})).pipe(gulp.dest("docs")));
gulp.task("build", [ "build:tests", "build:spec" ]);
gulp.task("use-polyfill", () => {
process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] = "true";
});
gulp.task("test", [ "build:tests" ], () => gulp.src([ "test/**/*.js" ], {
read: false
}).pipe(mocha({
reporter: "dot"
})));
gulp.task("test:use-polyfill", [ "build:tests", "use-polyfill" ], () => gulp.src([ "test/**/*.js" ], {
read: false
}).pipe(mocha({
reporter: "dot"
})));
gulp.task("watch:reflect", () => gulp.watch([ "Reflect.ts", "tsconfig.json", "test/**/*.ts", "test/**/tsconfig.json" ], [ "test" ]));
gulp.task("watch:spec", () => gulp.watch([ "spec.html" ], [ "build:spec" ]));
gulp.task("watch", [ "watch:reflect", "watch:spec" ], () => {
const server = gls.static("docs", 8080);
const promise = server.start();
gulp.watch([ "docs/**/*" ], file => server.notify(file));
return promise;
});
gulp.task("prepublish", sequence("clean", "test", "test:use-polyfill"));
gulp.task("reflect", [ "build:reflect" ]);
gulp.task("tests", [ "build:tests" ]);
gulp.task("spec", [ "build:spec" ]);
gulp.task("start", [ "watch" ]);
gulp.task("default", [ "build", "test" ]);
}, function(module, exports, __webpack_require__) {
"use strict";
var Subject_1 = __webpack_require__(123);
exports.Subject = Subject_1.Subject;
exports.AnonymousSubject = Subject_1.AnonymousSubject;
var Observable_1 = __webpack_require__(93);
exports.Observable = Observable_1.Observable;
__webpack_require__(293);
__webpack_require__(297);
__webpack_require__(300);
__webpack_require__(303);
__webpack_require__(306);
__webpack_require__(309);
__webpack_require__(311);
__webpack_require__(312);
__webpack_require__(313);
__webpack_require__(316);
__webpack_require__(275);
__webpack_require__(319);
__webpack_require__(321);
__webpack_require__(324);
__webpack_require__(333);
__webpack_require__(334);
__webpack_require__(336);
__webpack_require__(340);
__webpack_require__(341);
__webpack_require__(343);
__webpack_require__(346);
__webpack_require__(349);
__webpack_require__(352);
__webpack_require__(355);
__webpack_require__(359);
__webpack_require__(362);
__webpack_require__(365);
__webpack_require__(373);
__webpack_require__(375);
__webpack_require__(377);
__webpack_require__(379);
__webpack_require__(381);
__webpack_require__(383);
__webpack_require__(384);
__webpack_require__(386);
__webpack_require__(387);
__webpack_require__(388);
__webpack_require__(389);
__webpack_require__(390);
__webpack_require__(393);
__webpack_require__(395);
__webpack_require__(397);
__webpack_require__(399);
__webpack_require__(401);
__webpack_require__(403);
__webpack_require__(405);
__webpack_require__(407);
__webpack_require__(410);
__webpack_require__(412);
__webpack_require__(414);
__webpack_require__(416);
__webpack_require__(418);
__webpack_require__(420);
__webpack_require__(422);
__webpack_require__(425);
__webpack_require__(426);
__webpack_require__(428);
__webpack_require__(430);
__webpack_require__(432);
__webpack_require__(433);
__webpack_require__(438);
__webpack_require__(440);
__webpack_require__(442);
__webpack_require__(444);
__webpack_require__(446);
__webpack_require__(447);
__webpack_require__(449);
__webpack_require__(450);
__webpack_require__(451);
__webpack_require__(453);
__webpack_require__(455);
__webpack_require__(457);
__webpack_require__(458);
__webpack_require__(459);
__webpack_require__(460);
__webpack_require__(461);
__webpack_require__(463);
__webpack_require__(465);
__webpack_require__(466);
__webpack_require__(467);
__webpack_require__(468);
__webpack_require__(470);
__webpack_require__(473);
__webpack_require__(475);
__webpack_require__(477);
__webpack_require__(479);
__webpack_require__(481);
__webpack_require__(483);
__webpack_require__(484);
__webpack_require__(485);
__webpack_require__(487);
__webpack_require__(489);
__webpack_require__(491);
__webpack_require__(493);
__webpack_require__(495);
__webpack_require__(497);
__webpack_require__(499);
__webpack_require__(501);
__webpack_require__(502);
__webpack_require__(504);
__webpack_require__(506);
__webpack_require__(508);
__webpack_require__(510);
__webpack_require__(512);
__webpack_require__(519);
__webpack_require__(521);
__webpack_require__(523);
__webpack_require__(525);
__webpack_require__(527);
__webpack_require__(529);
__webpack_require__(531);
__webpack_require__(533);
__webpack_require__(535);
__webpack_require__(537);
__webpack_require__(539);
__webpack_require__(542);
__webpack_require__(544);
__webpack_require__(546);
__webpack_require__(548);
__webpack_require__(550);
__webpack_require__(552);
__webpack_require__(554);
__webpack_require__(556);
__webpack_require__(558);
__webpack_require__(560);
__webpack_require__(562);
__webpack_require__(563);
var Subscription_1 = __webpack_require__(98);
exports.Subscription = Subscription_1.Subscription;
var Subscriber_1 = __webpack_require__(96);
exports.Subscriber = Subscriber_1.Subscriber;
var AsyncSubject_1 = __webpack_require__(296);
exports.AsyncSubject = AsyncSubject_1.AsyncSubject;
var ReplaySubject_1 = __webpack_require__(368);
exports.ReplaySubject = ReplaySubject_1.ReplaySubject;
var BehaviorSubject_1 = __webpack_require__(169);
exports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;
var ConnectableObservable_1 = __webpack_require__(122);
exports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;
var Notification_1 = __webpack_require__(175);
exports.Notification = Notification_1.Notification;
var EmptyError_1 = __webpack_require__(181);
exports.EmptyError = EmptyError_1.EmptyError;
var ArgumentOutOfRangeError_1 = __webpack_require__(424);
exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
var ObjectUnsubscribedError_1 = __webpack_require__(124);
exports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;
var TimeoutError_1 = __webpack_require__(541);
exports.TimeoutError = TimeoutError_1.TimeoutError;
var UnsubscriptionError_1 = __webpack_require__(103);
exports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;
var timeInterval_1 = __webpack_require__(538);
exports.TimeInterval = timeInterval_1.TimeInterval;
var timestamp_1 = __webpack_require__(545);
exports.Timestamp = timestamp_1.Timestamp;
var TestScheduler_1 = __webpack_require__(565);
exports.TestScheduler = TestScheduler_1.TestScheduler;
var VirtualTimeScheduler_1 = __webpack_require__(571);
exports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;
var AjaxObservable_1 = __webpack_require__(364);
exports.AjaxResponse = AjaxObservable_1.AjaxResponse;
exports.AjaxError = AjaxObservable_1.AjaxError;
exports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;
var asap_1 = __webpack_require__(515);
var async_1 = __webpack_require__(328);
var queue_1 = __webpack_require__(369);
var animationFrame_1 = __webpack_require__(572);
var rxSubscriber_1 = __webpack_require__(105);
var iterator_1 = __webpack_require__(118);
var observable_1 = __webpack_require__(106);
var Scheduler = {
asap: asap_1.asap,
queue: queue_1.queue,
animationFrame: animationFrame_1.animationFrame,
async: async_1.async
};
exports.Scheduler = Scheduler;
var Symbol = {
rxSubscriber: rxSubscriber_1.rxSubscriber,
observable: observable_1.observable,
iterator: iterator_1.iterator
};
exports.Symbol = Symbol;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var bindCallback_1 = __webpack_require__(294);
Observable_1.Observable.bindCallback = bindCallback_1.bindCallback;
}, function(module, exports, __webpack_require__) {
"use strict";
var BoundCallbackObservable_1 = __webpack_require__(295);
exports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var tryCatch_1 = __webpack_require__(101);
var errorObject_1 = __webpack_require__(102);
var AsyncSubject_1 = __webpack_require__(296);
var BoundCallbackObservable = function(_super) {
__extends(BoundCallbackObservable, _super);
function BoundCallbackObservable(callbackFunc, selector, args, context, scheduler) {
_super.call(this);
this.callbackFunc = callbackFunc;
this.selector = selector;
this.args = args;
this.context = context;
this.scheduler = scheduler;
}
BoundCallbackObservable.create = function(func, selector, scheduler) {
if (selector === void 0) {
selector = undefined;
}
return function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
return new BoundCallbackObservable(func, selector, args, this, scheduler);
};
};
BoundCallbackObservable.prototype._subscribe = function(subscriber) {
var callbackFunc = this.callbackFunc;
var args = this.args;
var scheduler = this.scheduler;
var subject = this.subject;
if (!scheduler) {
if (!subject) {
subject = this.subject = new AsyncSubject_1.AsyncSubject();
var handler = function handlerFn() {
var innerArgs = [];
for (var _i = 0; _i < arguments.length; _i++) {
innerArgs[_i - 0] = arguments[_i];
}
var source = handlerFn.source;
var selector = source.selector, subject = source.subject;
if (selector) {
var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
if (result_1 === errorObject_1.errorObject) {
subject.error(errorObject_1.errorObject.e);
} else {
subject.next(result_1);
subject.complete();
}
} else {
subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
subject.complete();
}
};
handler.source = this;
var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));
if (result === errorObject_1.errorObject) {
subject.error(errorObject_1.errorObject.e);
}
}
return subject.subscribe(subscriber);
} else {
return scheduler.schedule(BoundCallbackObservable.dispatch, 0, {
source: this,
subscriber: subscriber,
context: this.context
});
}
};
BoundCallbackObservable.dispatch = function(state) {
var self = this;
var source = state.source, subscriber = state.subscriber, context = state.context;
var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;
var subject = source.subject;
if (!subject) {
subject = source.subject = new AsyncSubject_1.AsyncSubject();
var handler = function handlerFn() {
var innerArgs = [];
for (var _i = 0; _i < arguments.length; _i++) {
innerArgs[_i - 0] = arguments[_i];
}
var source = handlerFn.source;
var selector = source.selector, subject = source.subject;
if (selector) {
var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
if (result_2 === errorObject_1.errorObject) {
self.add(scheduler.schedule(dispatchError, 0, {
err: errorObject_1.errorObject.e,
subject: subject
}));
} else {
self.add(scheduler.schedule(dispatchNext, 0, {
value: result_2,
subject: subject
}));
}
} else {
var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
self.add(scheduler.schedule(dispatchNext, 0, {
value: value,
subject: subject
}));
}
};
handler.source = source;
var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));
if (result === errorObject_1.errorObject) {
subject.error(errorObject_1.errorObject.e);
}
}
self.add(subject.subscribe(subscriber));
};
return BoundCallbackObservable;
}(Observable_1.Observable);
exports.BoundCallbackObservable = BoundCallbackObservable;
function dispatchNext(arg) {
var value = arg.value, subject = arg.subject;
subject.next(value);
subject.complete();
}
function dispatchError(arg) {
var err = arg.err, subject = arg.subject;
subject.error(err);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(123);
var Subscription_1 = __webpack_require__(98);
var AsyncSubject = function(_super) {
__extends(AsyncSubject, _super);
function AsyncSubject() {
_super.apply(this, arguments);
this.value = null;
this.hasNext = false;
this.hasCompleted = false;
}
AsyncSubject.prototype._subscribe = function(subscriber) {
if (this.hasError) {
subscriber.error(this.thrownError);
return Subscription_1.Subscription.EMPTY;
} else if (this.hasCompleted && this.hasNext) {
subscriber.next(this.value);
subscriber.complete();
return Subscription_1.Subscription.EMPTY;
}
return _super.prototype._subscribe.call(this, subscriber);
};
AsyncSubject.prototype.next = function(value) {
if (!this.hasCompleted) {
this.value = value;
this.hasNext = true;
}
};
AsyncSubject.prototype.error = function(error) {
if (!this.hasCompleted) {
_super.prototype.error.call(this, error);
}
};
AsyncSubject.prototype.complete = function() {
this.hasCompleted = true;
if (this.hasNext) {
_super.prototype.next.call(this, this.value);
}
_super.prototype.complete.call(this);
};
return AsyncSubject;
}(Subject_1.Subject);
exports.AsyncSubject = AsyncSubject;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var bindNodeCallback_1 = __webpack_require__(298);
Observable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;
}, function(module, exports, __webpack_require__) {
"use strict";
var BoundNodeCallbackObservable_1 = __webpack_require__(299);
exports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var tryCatch_1 = __webpack_require__(101);
var errorObject_1 = __webpack_require__(102);
var AsyncSubject_1 = __webpack_require__(296);
var BoundNodeCallbackObservable = function(_super) {
__extends(BoundNodeCallbackObservable, _super);
function BoundNodeCallbackObservable(callbackFunc, selector, args, context, scheduler) {
_super.call(this);
this.callbackFunc = callbackFunc;
this.selector = selector;
this.args = args;
this.context = context;
this.scheduler = scheduler;
}
BoundNodeCallbackObservable.create = function(func, selector, scheduler) {
if (selector === void 0) {
selector = undefined;
}
return function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
return new BoundNodeCallbackObservable(func, selector, args, this, scheduler);
};
};
BoundNodeCallbackObservable.prototype._subscribe = function(subscriber) {
var callbackFunc = this.callbackFunc;
var args = this.args;
var scheduler = this.scheduler;
var subject = this.subject;
if (!scheduler) {
if (!subject) {
subject = this.subject = new AsyncSubject_1.AsyncSubject();
var handler = function handlerFn() {
var innerArgs = [];
for (var _i = 0; _i < arguments.length; _i++) {
innerArgs[_i - 0] = arguments[_i];
}
var source = handlerFn.source;
var selector = source.selector, subject = source.subject;
var err = innerArgs.shift();
if (err) {
subject.error(err);
} else if (selector) {
var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
if (result_1 === errorObject_1.errorObject) {
subject.error(errorObject_1.errorObject.e);
} else {
subject.next(result_1);
subject.complete();
}
} else {
subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
subject.complete();
}
};
handler.source = this;
var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));
if (result === errorObject_1.errorObject) {
subject.error(errorObject_1.errorObject.e);
}
}
return subject.subscribe(subscriber);
} else {
return scheduler.schedule(dispatch, 0, {
source: this,
subscriber: subscriber,
context: this.context
});
}
};
return BoundNodeCallbackObservable;
}(Observable_1.Observable);
exports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;
function dispatch(state) {
var self = this;
var source = state.source, subscriber = state.subscriber, context = state.context;
var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;
var subject = source.subject;
if (!subject) {
subject = source.subject = new AsyncSubject_1.AsyncSubject();
var handler = function handlerFn() {
var innerArgs = [];
for (var _i = 0; _i < arguments.length; _i++) {
innerArgs[_i - 0] = arguments[_i];
}
var source = handlerFn.source;
var selector = source.selector, subject = source.subject;
var err = innerArgs.shift();
if (err) {
self.add(scheduler.schedule(dispatchError, 0, {
err: err,
subject: subject
}));
} else if (selector) {
var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
if (result_2 === errorObject_1.errorObject) {
self.add(scheduler.schedule(dispatchError, 0, {
err: errorObject_1.errorObject.e,
subject: subject
}));
} else {
self.add(scheduler.schedule(dispatchNext, 0, {
value: result_2,
subject: subject
}));
}
} else {
var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
self.add(scheduler.schedule(dispatchNext, 0, {
value: value,
subject: subject
}));
}
};
handler.source = source;
var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));
if (result === errorObject_1.errorObject) {
self.add(scheduler.schedule(dispatchError, 0, {
err: errorObject_1.errorObject.e,
subject: subject
}));
}
}
self.add(subject.subscribe(subscriber));
}
function dispatchNext(arg) {
var value = arg.value, subject = arg.subject;
subject.next(value);
subject.complete();
}
function dispatchError(arg) {
var err = arg.err, subject = arg.subject;
subject.error(err);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var combineLatest_1 = __webpack_require__(301);
Observable_1.Observable.combineLatest = combineLatest_1.combineLatest;
}, function(module, exports, __webpack_require__) {
"use strict";
var isScheduler_1 = __webpack_require__(112);
var isArray_1 = __webpack_require__(99);
var ArrayObservable_1 = __webpack_require__(109);
var combineLatest_1 = __webpack_require__(302);
function combineLatest() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
var project = null;
var scheduler = null;
if (isScheduler_1.isScheduler(observables[observables.length - 1])) {
scheduler = observables.pop();
}
if (typeof observables[observables.length - 1] === "function") {
project = observables.pop();
}
if (observables.length === 1 && isArray_1.isArray(observables[0])) {
observables = observables[0];
}
return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));
}
exports.combineLatest = combineLatest;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ArrayObservable_1 = __webpack_require__(109);
var isArray_1 = __webpack_require__(99);
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
var none = {};
function combineLatest() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
var project = null;
if (typeof observables[observables.length - 1] === "function") {
project = observables.pop();
}
if (observables.length === 1 && isArray_1.isArray(observables[0])) {
observables = observables[0].slice();
}
observables.unshift(this);
return this.lift.call(new ArrayObservable_1.ArrayObservable(observables), new CombineLatestOperator(project));
}
exports.combineLatest = combineLatest;
var CombineLatestOperator = function() {
function CombineLatestOperator(project) {
this.project = project;
}
CombineLatestOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));
};
return CombineLatestOperator;
}();
exports.CombineLatestOperator = CombineLatestOperator;
var CombineLatestSubscriber = function(_super) {
__extends(CombineLatestSubscriber, _super);
function CombineLatestSubscriber(destination, project) {
_super.call(this, destination);
this.project = project;
this.active = 0;
this.values = [];
this.observables = [];
}
CombineLatestSubscriber.prototype._next = function(observable) {
this.values.push(none);
this.observables.push(observable);
};
CombineLatestSubscriber.prototype._complete = function() {
var observables = this.observables;
var len = observables.length;
if (len === 0) {
this.destination.complete();
} else {
this.active = len;
this.toRespond = len;
for (var i = 0; i < len; i++) {
var observable = observables[i];
this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
}
}
};
CombineLatestSubscriber.prototype.notifyComplete = function(unused) {
if ((this.active -= 1) === 0) {
this.destination.complete();
}
};
CombineLatestSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
var values = this.values;
var oldVal = values[outerIndex];
var toRespond = !this.toRespond ? 0 : oldVal === none ? --this.toRespond : this.toRespond;
values[outerIndex] = innerValue;
if (toRespond === 0) {
if (this.project) {
this._tryProject(values);
} else {
this.destination.next(values.slice());
}
}
};
CombineLatestSubscriber.prototype._tryProject = function(values) {
var result;
try {
result = this.project.apply(this, values);
} catch (err) {
this.destination.error(err);
return;
}
this.destination.next(result);
};
return CombineLatestSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.CombineLatestSubscriber = CombineLatestSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var concat_1 = __webpack_require__(304);
Observable_1.Observable.concat = concat_1.concat;
}, function(module, exports, __webpack_require__) {
"use strict";
var concat_1 = __webpack_require__(305);
exports.concat = concat_1.concatStatic;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var isScheduler_1 = __webpack_require__(112);
var ArrayObservable_1 = __webpack_require__(109);
var mergeAll_1 = __webpack_require__(113);
function concat() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
return this.lift.call(concatStatic.apply(void 0, [ this ].concat(observables)));
}
exports.concat = concat;
function concatStatic() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
var scheduler = null;
var args = observables;
if (isScheduler_1.isScheduler(args[observables.length - 1])) {
scheduler = args.pop();
}
if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
return observables[0];
}
return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(1));
}
exports.concatStatic = concatStatic;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var defer_1 = __webpack_require__(307);
Observable_1.Observable.defer = defer_1.defer;
}, function(module, exports, __webpack_require__) {
"use strict";
var DeferObservable_1 = __webpack_require__(308);
exports.defer = DeferObservable_1.DeferObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var subscribeToResult_1 = __webpack_require__(115);
var OuterSubscriber_1 = __webpack_require__(114);
var DeferObservable = function(_super) {
__extends(DeferObservable, _super);
function DeferObservable(observableFactory) {
_super.call(this);
this.observableFactory = observableFactory;
}
DeferObservable.create = function(observableFactory) {
return new DeferObservable(observableFactory);
};
DeferObservable.prototype._subscribe = function(subscriber) {
return new DeferSubscriber(subscriber, this.observableFactory);
};
return DeferObservable;
}(Observable_1.Observable);
exports.DeferObservable = DeferObservable;
var DeferSubscriber = function(_super) {
__extends(DeferSubscriber, _super);
function DeferSubscriber(destination, factory) {
_super.call(this, destination);
this.factory = factory;
this.tryDefer();
}
DeferSubscriber.prototype.tryDefer = function() {
try {
this._callFactory();
} catch (err) {
this._error(err);
}
};
DeferSubscriber.prototype._callFactory = function() {
var result = this.factory();
if (result) {
this.add(subscribeToResult_1.subscribeToResult(this, result));
}
};
return DeferSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var empty_1 = __webpack_require__(310);
Observable_1.Observable.empty = empty_1.empty;
}, function(module, exports, __webpack_require__) {
"use strict";
var EmptyObservable_1 = __webpack_require__(111);
exports.empty = EmptyObservable_1.EmptyObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var forkJoin_1 = __webpack_require__(161);
Observable_1.Observable.forkJoin = forkJoin_1.forkJoin;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var from_1 = __webpack_require__(170);
Observable_1.Observable.from = from_1.from;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var fromEvent_1 = __webpack_require__(314);
Observable_1.Observable.fromEvent = fromEvent_1.fromEvent;
}, function(module, exports, __webpack_require__) {
"use strict";
var FromEventObservable_1 = __webpack_require__(315);
exports.fromEvent = FromEventObservable_1.FromEventObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var tryCatch_1 = __webpack_require__(101);
var isFunction_1 = __webpack_require__(97);
var errorObject_1 = __webpack_require__(102);
var Subscription_1 = __webpack_require__(98);
var toString = Object.prototype.toString;
function isNodeStyleEventEmitter(sourceObj) {
return !!sourceObj && typeof sourceObj.addListener === "function" && typeof sourceObj.removeListener === "function";
}
function isJQueryStyleEventEmitter(sourceObj) {
return !!sourceObj && typeof sourceObj.on === "function" && typeof sourceObj.off === "function";
}
function isNodeList(sourceObj) {
return !!sourceObj && toString.call(sourceObj) === "[object NodeList]";
}
function isHTMLCollection(sourceObj) {
return !!sourceObj && toString.call(sourceObj) === "[object HTMLCollection]";
}
function isEventTarget(sourceObj) {
return !!sourceObj && typeof sourceObj.addEventListener === "function" && typeof sourceObj.removeEventListener === "function";
}
var FromEventObservable = function(_super) {
__extends(FromEventObservable, _super);
function FromEventObservable(sourceObj, eventName, selector, options) {
_super.call(this);
this.sourceObj = sourceObj;
this.eventName = eventName;
this.selector = selector;
this.options = options;
}
FromEventObservable.create = function(target, eventName, options, selector) {
if (isFunction_1.isFunction(options)) {
selector = options;
options = undefined;
}
return new FromEventObservable(target, eventName, selector, options);
};
FromEventObservable.setupSubscription = function(sourceObj, eventName, handler, subscriber, options) {
var unsubscribe;
if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {
for (var i = 0, len = sourceObj.length; i < len; i++) {
FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
}
} else if (isEventTarget(sourceObj)) {
var source_1 = sourceObj;
sourceObj.addEventListener(eventName, handler, options);
unsubscribe = function() {
return source_1.removeEventListener(eventName, handler);
};
} else if (isJQueryStyleEventEmitter(sourceObj)) {
var source_2 = sourceObj;
sourceObj.on(eventName, handler);
unsubscribe = function() {
return source_2.off(eventName, handler);
};
} else if (isNodeStyleEventEmitter(sourceObj)) {
var source_3 = sourceObj;
sourceObj.addListener(eventName, handler);
unsubscribe = function() {
return source_3.removeListener(eventName, handler);
};
} else {
throw new TypeError("Invalid event target");
}
subscriber.add(new Subscription_1.Subscription(unsubscribe));
};
FromEventObservable.prototype._subscribe = function(subscriber) {
var sourceObj = this.sourceObj;
var eventName = this.eventName;
var options = this.options;
var selector = this.selector;
var handler = selector ? function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
var result = tryCatch_1.tryCatch(selector).apply(void 0, args);
if (result === errorObject_1.errorObject) {
subscriber.error(errorObject_1.errorObject.e);
} else {
subscriber.next(result);
}
} : function(e) {
return subscriber.next(e);
};
FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);
};
return FromEventObservable;
}(Observable_1.Observable);
exports.FromEventObservable = FromEventObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var fromEventPattern_1 = __webpack_require__(317);
Observable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;
}, function(module, exports, __webpack_require__) {
"use strict";
var FromEventPatternObservable_1 = __webpack_require__(318);
exports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isFunction_1 = __webpack_require__(97);
var Observable_1 = __webpack_require__(93);
var Subscription_1 = __webpack_require__(98);
var FromEventPatternObservable = function(_super) {
__extends(FromEventPatternObservable, _super);
function FromEventPatternObservable(addHandler, removeHandler, selector) {
_super.call(this);
this.addHandler = addHandler;
this.removeHandler = removeHandler;
this.selector = selector;
}
FromEventPatternObservable.create = function(addHandler, removeHandler, selector) {
return new FromEventPatternObservable(addHandler, removeHandler, selector);
};
FromEventPatternObservable.prototype._subscribe = function(subscriber) {
var _this = this;
var removeHandler = this.removeHandler;
var handler = !!this.selector ? function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
_this._callSelector(subscriber, args);
} : function(e) {
subscriber.next(e);
};
var retValue = this._callAddHandler(handler, subscriber);
if (!isFunction_1.isFunction(removeHandler)) {
return;
}
subscriber.add(new Subscription_1.Subscription(function() {
removeHandler(handler, retValue);
}));
};
FromEventPatternObservable.prototype._callSelector = function(subscriber, args) {
try {
var result = this.selector.apply(this, args);
subscriber.next(result);
} catch (e) {
subscriber.error(e);
}
};
FromEventPatternObservable.prototype._callAddHandler = function(handler, errorSubscriber) {
try {
return this.addHandler(handler) || null;
} catch (e) {
errorSubscriber.error(e);
}
};
return FromEventPatternObservable;
}(Observable_1.Observable);
exports.FromEventPatternObservable = FromEventPatternObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var GenerateObservable_1 = __webpack_require__(320);
Observable_1.Observable.generate = GenerateObservable_1.GenerateObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var isScheduler_1 = __webpack_require__(112);
var selfSelector = function(value) {
return value;
};
var GenerateObservable = function(_super) {
__extends(GenerateObservable, _super);
function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {
_super.call(this);
this.initialState = initialState;
this.condition = condition;
this.iterate = iterate;
this.resultSelector = resultSelector;
this.scheduler = scheduler;
}
GenerateObservable.create = function(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
if (arguments.length == 1) {
return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);
}
if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {
return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);
}
return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);
};
GenerateObservable.prototype._subscribe = function(subscriber) {
var state = this.initialState;
if (this.scheduler) {
return this.scheduler.schedule(GenerateObservable.dispatch, 0, {
subscriber: subscriber,
iterate: this.iterate,
condition: this.condition,
resultSelector: this.resultSelector,
state: state
});
}
var _a = this, condition = _a.condition, resultSelector = _a.resultSelector, iterate = _a.iterate;
do {
if (condition) {
var conditionResult = void 0;
try {
conditionResult = condition(state);
} catch (err) {
subscriber.error(err);
return;
}
if (!conditionResult) {
subscriber.complete();
break;
}
}
var value = void 0;
try {
value = resultSelector(state);
} catch (err) {
subscriber.error(err);
return;
}
subscriber.next(value);
if (subscriber.closed) {
break;
}
try {
state = iterate(state);
} catch (err) {
subscriber.error(err);
return;
}
} while (true);
};
GenerateObservable.dispatch = function(state) {
var subscriber = state.subscriber, condition = state.condition;
if (subscriber.closed) {
return;
}
if (state.needIterate) {
try {
state.state = state.iterate(state.state);
} catch (err) {
subscriber.error(err);
return;
}
} else {
state.needIterate = true;
}
if (condition) {
var conditionResult = void 0;
try {
conditionResult = condition(state.state);
} catch (err) {
subscriber.error(err);
return;
}
if (!conditionResult) {
subscriber.complete();
return;
}
if (subscriber.closed) {
return;
}
}
var value;
try {
value = state.resultSelector(state.state);
} catch (err) {
subscriber.error(err);
return;
}
if (subscriber.closed) {
return;
}
subscriber.next(value);
if (subscriber.closed) {
return;
}
return this.schedule(state);
};
return GenerateObservable;
}(Observable_1.Observable);
exports.GenerateObservable = GenerateObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var if_1 = __webpack_require__(322);
Observable_1.Observable.if = if_1._if;
}, function(module, exports, __webpack_require__) {
"use strict";
var IfObservable_1 = __webpack_require__(323);
exports._if = IfObservable_1.IfObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var subscribeToResult_1 = __webpack_require__(115);
var OuterSubscriber_1 = __webpack_require__(114);
var IfObservable = function(_super) {
__extends(IfObservable, _super);
function IfObservable(condition, thenSource, elseSource) {
_super.call(this);
this.condition = condition;
this.thenSource = thenSource;
this.elseSource = elseSource;
}
IfObservable.create = function(condition, thenSource, elseSource) {
return new IfObservable(condition, thenSource, elseSource);
};
IfObservable.prototype._subscribe = function(subscriber) {
var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;
return new IfSubscriber(subscriber, condition, thenSource, elseSource);
};
return IfObservable;
}(Observable_1.Observable);
exports.IfObservable = IfObservable;
var IfSubscriber = function(_super) {
__extends(IfSubscriber, _super);
function IfSubscriber(destination, condition, thenSource, elseSource) {
_super.call(this, destination);
this.condition = condition;
this.thenSource = thenSource;
this.elseSource = elseSource;
this.tryIf();
}
IfSubscriber.prototype.tryIf = function() {
var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;
var result;
try {
result = condition();
var source = result ? thenSource : elseSource;
if (source) {
this.add(subscribeToResult_1.subscribeToResult(this, source));
} else {
this._complete();
}
} catch (err) {
this._error(err);
}
};
return IfSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var interval_1 = __webpack_require__(325);
Observable_1.Observable.interval = interval_1.interval;
}, function(module, exports, __webpack_require__) {
"use strict";
var IntervalObservable_1 = __webpack_require__(326);
exports.interval = IntervalObservable_1.IntervalObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isNumeric_1 = __webpack_require__(327);
var Observable_1 = __webpack_require__(93);
var async_1 = __webpack_require__(328);
var IntervalObservable = function(_super) {
__extends(IntervalObservable, _super);
function IntervalObservable(period, scheduler) {
if (period === void 0) {
period = 0;
}
if (scheduler === void 0) {
scheduler = async_1.async;
}
_super.call(this);
this.period = period;
this.scheduler = scheduler;
if (!isNumeric_1.isNumeric(period) || period < 0) {
this.period = 0;
}
if (!scheduler || typeof scheduler.schedule !== "function") {
this.scheduler = async_1.async;
}
}
IntervalObservable.create = function(period, scheduler) {
if (period === void 0) {
period = 0;
}
if (scheduler === void 0) {
scheduler = async_1.async;
}
return new IntervalObservable(period, scheduler);
};
IntervalObservable.dispatch = function(state) {
var index = state.index, subscriber = state.subscriber, period = state.period;
subscriber.next(index);
if (subscriber.closed) {
return;
}
state.index += 1;
this.schedule(state, period);
};
IntervalObservable.prototype._subscribe = function(subscriber) {
var index = 0;
var period = this.period;
var scheduler = this.scheduler;
subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {
index: index,
subscriber: subscriber,
period: period
}));
};
return IntervalObservable;
}(Observable_1.Observable);
exports.IntervalObservable = IntervalObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var isArray_1 = __webpack_require__(99);
function isNumeric(val) {
return !isArray_1.isArray(val) && val - parseFloat(val) + 1 >= 0;
}
exports.isNumeric = isNumeric;
}, function(module, exports, __webpack_require__) {
"use strict";
var AsyncAction_1 = __webpack_require__(329);
var AsyncScheduler_1 = __webpack_require__(331);
exports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(94);
var Action_1 = __webpack_require__(330);
var AsyncAction = function(_super) {
__extends(AsyncAction, _super);
function AsyncAction(scheduler, work) {
_super.call(this, scheduler, work);
this.scheduler = scheduler;
this.work = work;
this.pending = false;
}
AsyncAction.prototype.schedule = function(state, delay) {
if (delay === void 0) {
delay = 0;
}
if (this.closed) {
return this;
}
this.state = state;
this.pending = true;
var id = this.id;
var scheduler = this.scheduler;
if (id != null) {
this.id = this.recycleAsyncId(scheduler, id, delay);
}
this.delay = delay;
this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
return this;
};
AsyncAction.prototype.requestAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);
};
AsyncAction.prototype.recycleAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
if (delay !== null && this.delay === delay && this.pending === false) {
return id;
}
return root_1.root.clearInterval(id) && undefined || undefined;
};
AsyncAction.prototype.execute = function(state, delay) {
if (this.closed) {
return new Error("executing a cancelled action");
}
this.pending = false;
var error = this._execute(state, delay);
if (error) {
return error;
} else if (this.pending === false && this.id != null) {
this.id = this.recycleAsyncId(this.scheduler, this.id, null);
}
};
AsyncAction.prototype._execute = function(state, delay) {
var errored = false;
var errorValue = undefined;
try {
this.work(state);
} catch (e) {
errored = true;
errorValue = !!e && e || new Error(e);
}
if (errored) {
this.unsubscribe();
return errorValue;
}
};
AsyncAction.prototype._unsubscribe = function() {
var id = this.id;
var scheduler = this.scheduler;
var actions = scheduler.actions;
var index = actions.indexOf(this);
this.work = null;
this.delay = null;
this.state = null;
this.pending = false;
this.scheduler = null;
if (index !== -1) {
actions.splice(index, 1);
}
if (id != null) {
this.id = this.recycleAsyncId(scheduler, id, null);
}
};
return AsyncAction;
}(Action_1.Action);
exports.AsyncAction = AsyncAction;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(98);
var Action = function(_super) {
__extends(Action, _super);
function Action(scheduler, work) {
_super.call(this);
}
Action.prototype.schedule = function(state, delay) {
if (delay === void 0) {
delay = 0;
}
return this;
};
return Action;
}(Subscription_1.Subscription);
exports.Action = Action;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Scheduler_1 = __webpack_require__(332);
var AsyncScheduler = function(_super) {
__extends(AsyncScheduler, _super);
function AsyncScheduler() {
_super.apply(this, arguments);
this.actions = [];
this.active = false;
this.scheduled = undefined;
}
AsyncScheduler.prototype.flush = function(action) {
var actions = this.actions;
if (this.active) {
actions.push(action);
return;
}
var error;
this.active = true;
do {
if (error = action.execute(action.state, action.delay)) {
break;
}
} while (action = actions.shift());
this.active = false;
if (error) {
while (action = actions.shift()) {
action.unsubscribe();
}
throw error;
}
};
return AsyncScheduler;
}(Scheduler_1.Scheduler);
exports.AsyncScheduler = AsyncScheduler;
}, function(module, exports) {
"use strict";
var Scheduler = function() {
function Scheduler(SchedulerAction, now) {
if (now === void 0) {
now = Scheduler.now;
}
this.SchedulerAction = SchedulerAction;
this.now = now;
}
Scheduler.prototype.schedule = function(work, delay, state) {
if (delay === void 0) {
delay = 0;
}
return new this.SchedulerAction(this, work).schedule(state, delay);
};
Scheduler.now = Date.now ? Date.now : function() {
return +new Date();
};
return Scheduler;
}();
exports.Scheduler = Scheduler;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var merge_1 = __webpack_require__(107);
Observable_1.Observable.merge = merge_1.merge;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var race_1 = __webpack_require__(335);
Observable_1.Observable.race = race_1.raceStatic;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isArray_1 = __webpack_require__(99);
var ArrayObservable_1 = __webpack_require__(109);
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function race() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
if (observables.length === 1 && isArray_1.isArray(observables[0])) {
observables = observables[0];
}
return this.lift.call(raceStatic.apply(void 0, [ this ].concat(observables)));
}
exports.race = race;
function raceStatic() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
if (observables.length === 1) {
if (isArray_1.isArray(observables[0])) {
observables = observables[0];
} else {
return observables[0];
}
}
return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());
}
exports.raceStatic = raceStatic;
var RaceOperator = function() {
function RaceOperator() {}
RaceOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new RaceSubscriber(subscriber));
};
return RaceOperator;
}();
exports.RaceOperator = RaceOperator;
var RaceSubscriber = function(_super) {
__extends(RaceSubscriber, _super);
function RaceSubscriber(destination) {
_super.call(this, destination);
this.hasFirst = false;
this.observables = [];
this.subscriptions = [];
}
RaceSubscriber.prototype._next = function(observable) {
this.observables.push(observable);
};
RaceSubscriber.prototype._complete = function() {
var observables = this.observables;
var len = observables.length;
if (len === 0) {
this.destination.complete();
} else {
for (var i = 0; i < len && !this.hasFirst; i++) {
var observable = observables[i];
var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);
if (this.subscriptions) {
this.subscriptions.push(subscription);
}
this.add(subscription);
}
this.observables = null;
}
};
RaceSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
if (!this.hasFirst) {
this.hasFirst = true;
for (var i = 0; i < this.subscriptions.length; i++) {
if (i !== outerIndex) {
var subscription = this.subscriptions[i];
subscription.unsubscribe();
this.remove(subscription);
}
}
this.subscriptions = null;
}
this.destination.next(innerValue);
};
return RaceSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.RaceSubscriber = RaceSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var never_1 = __webpack_require__(337);
Observable_1.Observable.never = never_1.never;
}, function(module, exports, __webpack_require__) {
"use strict";
var NeverObservable_1 = __webpack_require__(338);
exports.never = NeverObservable_1.NeverObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var noop_1 = __webpack_require__(339);
var NeverObservable = function(_super) {
__extends(NeverObservable, _super);
function NeverObservable() {
_super.call(this);
}
NeverObservable.create = function() {
return new NeverObservable();
};
NeverObservable.prototype._subscribe = function(subscriber) {
noop_1.noop();
};
return NeverObservable;
}(Observable_1.Observable);
exports.NeverObservable = NeverObservable;
}, function(module, exports) {
"use strict";
function noop() {}
exports.noop = noop;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var of_1 = __webpack_require__(176);
Observable_1.Observable.of = of_1.of;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var onErrorResumeNext_1 = __webpack_require__(342);
Observable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var FromObservable_1 = __webpack_require__(171);
var isArray_1 = __webpack_require__(99);
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function onErrorResumeNext() {
var nextSources = [];
for (var _i = 0; _i < arguments.length; _i++) {
nextSources[_i - 0] = arguments[_i];
}
if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
nextSources = nextSources[0];
}
return this.lift(new OnErrorResumeNextOperator(nextSources));
}
exports.onErrorResumeNext = onErrorResumeNext;
function onErrorResumeNextStatic() {
var nextSources = [];
for (var _i = 0; _i < arguments.length; _i++) {
nextSources[_i - 0] = arguments[_i];
}
var source = null;
if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
nextSources = nextSources[0];
}
source = nextSources.shift();
return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));
}
exports.onErrorResumeNextStatic = onErrorResumeNextStatic;
var OnErrorResumeNextOperator = function() {
function OnErrorResumeNextOperator(nextSources) {
this.nextSources = nextSources;
}
OnErrorResumeNextOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
};
return OnErrorResumeNextOperator;
}();
var OnErrorResumeNextSubscriber = function(_super) {
__extends(OnErrorResumeNextSubscriber, _super);
function OnErrorResumeNextSubscriber(destination, nextSources) {
_super.call(this, destination);
this.destination = destination;
this.nextSources = nextSources;
}
OnErrorResumeNextSubscriber.prototype.notifyError = function(error, innerSub) {
this.subscribeToNextSource();
};
OnErrorResumeNextSubscriber.prototype.notifyComplete = function(innerSub) {
this.subscribeToNextSource();
};
OnErrorResumeNextSubscriber.prototype._error = function(err) {
this.subscribeToNextSource();
};
OnErrorResumeNextSubscriber.prototype._complete = function() {
this.subscribeToNextSource();
};
OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function() {
var next = this.nextSources.shift();
if (next) {
this.add(subscribeToResult_1.subscribeToResult(this, next));
} else {
this.destination.complete();
}
};
return OnErrorResumeNextSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var pairs_1 = __webpack_require__(344);
Observable_1.Observable.pairs = pairs_1.pairs;
}, function(module, exports, __webpack_require__) {
"use strict";
var PairsObservable_1 = __webpack_require__(345);
exports.pairs = PairsObservable_1.PairsObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
function dispatch(state) {
var obj = state.obj, keys = state.keys, length = state.length, index = state.index, subscriber = state.subscriber;
if (index === length) {
subscriber.complete();
return;
}
var key = keys[index];
subscriber.next([ key, obj[key] ]);
state.index = index + 1;
this.schedule(state);
}
var PairsObservable = function(_super) {
__extends(PairsObservable, _super);
function PairsObservable(obj, scheduler) {
_super.call(this);
this.obj = obj;
this.scheduler = scheduler;
this.keys = Object.keys(obj);
}
PairsObservable.create = function(obj, scheduler) {
return new PairsObservable(obj, scheduler);
};
PairsObservable.prototype._subscribe = function(subscriber) {
var _a = this, keys = _a.keys, scheduler = _a.scheduler;
var length = keys.length;
if (scheduler) {
return scheduler.schedule(dispatch, 0, {
obj: this.obj,
keys: keys,
length: length,
index: 0,
subscriber: subscriber
});
} else {
for (var idx = 0; idx < length; idx++) {
var key = keys[idx];
subscriber.next([ key, this.obj[key] ]);
}
subscriber.complete();
}
};
return PairsObservable;
}(Observable_1.Observable);
exports.PairsObservable = PairsObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var range_1 = __webpack_require__(347);
Observable_1.Observable.range = range_1.range;
}, function(module, exports, __webpack_require__) {
"use strict";
var RangeObservable_1 = __webpack_require__(348);
exports.range = RangeObservable_1.RangeObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var RangeObservable = function(_super) {
__extends(RangeObservable, _super);
function RangeObservable(start, count, scheduler) {
_super.call(this);
this.start = start;
this._count = count;
this.scheduler = scheduler;
}
RangeObservable.create = function(start, count, scheduler) {
if (start === void 0) {
start = 0;
}
if (count === void 0) {
count = 0;
}
return new RangeObservable(start, count, scheduler);
};
RangeObservable.dispatch = function(state) {
var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
if (index >= count) {
subscriber.complete();
return;
}
subscriber.next(start);
if (subscriber.closed) {
return;
}
state.index = index + 1;
state.start = start + 1;
this.schedule(state);
};
RangeObservable.prototype._subscribe = function(subscriber) {
var index = 0;
var start = this.start;
var count = this._count;
var scheduler = this.scheduler;
if (scheduler) {
return scheduler.schedule(RangeObservable.dispatch, 0, {
index: index,
count: count,
start: start,
subscriber: subscriber
});
} else {
do {
if (index++ >= count) {
subscriber.complete();
break;
}
subscriber.next(start++);
if (subscriber.closed) {
break;
}
} while (true);
}
};
return RangeObservable;
}(Observable_1.Observable);
exports.RangeObservable = RangeObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var using_1 = __webpack_require__(350);
Observable_1.Observable.using = using_1.using;
}, function(module, exports, __webpack_require__) {
"use strict";
var UsingObservable_1 = __webpack_require__(351);
exports.using = UsingObservable_1.UsingObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var subscribeToResult_1 = __webpack_require__(115);
var OuterSubscriber_1 = __webpack_require__(114);
var UsingObservable = function(_super) {
__extends(UsingObservable, _super);
function UsingObservable(resourceFactory, observableFactory) {
_super.call(this);
this.resourceFactory = resourceFactory;
this.observableFactory = observableFactory;
}
UsingObservable.create = function(resourceFactory, observableFactory) {
return new UsingObservable(resourceFactory, observableFactory);
};
UsingObservable.prototype._subscribe = function(subscriber) {
var _a = this, resourceFactory = _a.resourceFactory, observableFactory = _a.observableFactory;
var resource;
try {
resource = resourceFactory();
return new UsingSubscriber(subscriber, resource, observableFactory);
} catch (err) {
subscriber.error(err);
}
};
return UsingObservable;
}(Observable_1.Observable);
exports.UsingObservable = UsingObservable;
var UsingSubscriber = function(_super) {
__extends(UsingSubscriber, _super);
function UsingSubscriber(destination, resource, observableFactory) {
_super.call(this, destination);
this.resource = resource;
this.observableFactory = observableFactory;
destination.add(resource);
this.tryUse();
}
UsingSubscriber.prototype.tryUse = function() {
try {
var source = this.observableFactory.call(this, this.resource);
if (source) {
this.add(subscribeToResult_1.subscribeToResult(this, source));
}
} catch (err) {
this._error(err);
}
};
return UsingSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var throw_1 = __webpack_require__(353);
Observable_1.Observable.throw = throw_1._throw;
}, function(module, exports, __webpack_require__) {
"use strict";
var ErrorObservable_1 = __webpack_require__(354);
exports._throw = ErrorObservable_1.ErrorObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var ErrorObservable = function(_super) {
__extends(ErrorObservable, _super);
function ErrorObservable(error, scheduler) {
_super.call(this);
this.error = error;
this.scheduler = scheduler;
}
ErrorObservable.create = function(error, scheduler) {
return new ErrorObservable(error, scheduler);
};
ErrorObservable.dispatch = function(arg) {
var error = arg.error, subscriber = arg.subscriber;
subscriber.error(error);
};
ErrorObservable.prototype._subscribe = function(subscriber) {
var error = this.error;
var scheduler = this.scheduler;
if (scheduler) {
return scheduler.schedule(ErrorObservable.dispatch, 0, {
error: error,
subscriber: subscriber
});
} else {
subscriber.error(error);
}
};
return ErrorObservable;
}(Observable_1.Observable);
exports.ErrorObservable = ErrorObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var timer_1 = __webpack_require__(356);
Observable_1.Observable.timer = timer_1.timer;
}, function(module, exports, __webpack_require__) {
"use strict";
var TimerObservable_1 = __webpack_require__(357);
exports.timer = TimerObservable_1.TimerObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isNumeric_1 = __webpack_require__(327);
var Observable_1 = __webpack_require__(93);
var async_1 = __webpack_require__(328);
var isScheduler_1 = __webpack_require__(112);
var isDate_1 = __webpack_require__(358);
var TimerObservable = function(_super) {
__extends(TimerObservable, _super);
function TimerObservable(dueTime, period, scheduler) {
if (dueTime === void 0) {
dueTime = 0;
}
_super.call(this);
this.period = -1;
this.dueTime = 0;
if (isNumeric_1.isNumeric(period)) {
this.period = Number(period) < 1 && 1 || Number(period);
} else if (isScheduler_1.isScheduler(period)) {
scheduler = period;
}
if (!isScheduler_1.isScheduler(scheduler)) {
scheduler = async_1.async;
}
this.scheduler = scheduler;
this.dueTime = isDate_1.isDate(dueTime) ? +dueTime - this.scheduler.now() : dueTime;
}
TimerObservable.create = function(initialDelay, period, scheduler) {
if (initialDelay === void 0) {
initialDelay = 0;
}
return new TimerObservable(initialDelay, period, scheduler);
};
TimerObservable.dispatch = function(state) {
var index = state.index, period = state.period, subscriber = state.subscriber;
var action = this;
subscriber.next(index);
if (subscriber.closed) {
return;
} else if (period === -1) {
return subscriber.complete();
}
state.index = index + 1;
action.schedule(state, period);
};
TimerObservable.prototype._subscribe = function(subscriber) {
var index = 0;
var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;
return scheduler.schedule(TimerObservable.dispatch, dueTime, {
index: index,
period: period,
subscriber: subscriber
});
};
return TimerObservable;
}(Observable_1.Observable);
exports.TimerObservable = TimerObservable;
}, function(module, exports) {
"use strict";
function isDate(value) {
return value instanceof Date && !isNaN(+value);
}
exports.isDate = isDate;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var zip_1 = __webpack_require__(360);
Observable_1.Observable.zip = zip_1.zip;
}, function(module, exports, __webpack_require__) {
"use strict";
var zip_1 = __webpack_require__(361);
exports.zip = zip_1.zipStatic;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ArrayObservable_1 = __webpack_require__(109);
var isArray_1 = __webpack_require__(99);
var Subscriber_1 = __webpack_require__(96);
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
var iterator_1 = __webpack_require__(118);
function zipProto() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
return this.lift.call(zipStatic.apply(void 0, [ this ].concat(observables)));
}
exports.zipProto = zipProto;
function zipStatic() {
var observables = [];
for (var _i = 0; _i < arguments.length; _i++) {
observables[_i - 0] = arguments[_i];
}
var project = observables[observables.length - 1];
if (typeof project === "function") {
observables.pop();
}
return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));
}
exports.zipStatic = zipStatic;
var ZipOperator = function() {
function ZipOperator(project) {
this.project = project;
}
ZipOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new ZipSubscriber(subscriber, this.project));
};
return ZipOperator;
}();
exports.ZipOperator = ZipOperator;
var ZipSubscriber = function(_super) {
__extends(ZipSubscriber, _super);
function ZipSubscriber(destination, project, values) {
if (values === void 0) {
values = Object.create(null);
}
_super.call(this, destination);
this.iterators = [];
this.active = 0;
this.project = typeof project === "function" ? project : null;
this.values = values;
}
ZipSubscriber.prototype._next = function(value) {
var iterators = this.iterators;
if (isArray_1.isArray(value)) {
iterators.push(new StaticArrayIterator(value));
} else if (typeof value[iterator_1.iterator] === "function") {
iterators.push(new StaticIterator(value[iterator_1.iterator]()));
} else {
iterators.push(new ZipBufferIterator(this.destination, this, value));
}
};
ZipSubscriber.prototype._complete = function() {
var iterators = this.iterators;
var len = iterators.length;
if (len === 0) {
this.destination.complete();
return;
}
this.active = len;
for (var i = 0; i < len; i++) {
var iterator = iterators[i];
if (iterator.stillUnsubscribed) {
this.add(iterator.subscribe(iterator, i));
} else {
this.active--;
}
}
};
ZipSubscriber.prototype.notifyInactive = function() {
this.active--;
if (this.active === 0) {
this.destination.complete();
}
};
ZipSubscriber.prototype.checkIterators = function() {
var iterators = this.iterators;
var len = iterators.length;
var destination = this.destination;
for (var i = 0; i < len; i++) {
var iterator = iterators[i];
if (typeof iterator.hasValue === "function" && !iterator.hasValue()) {
return;
}
}
var shouldComplete = false;
var args = [];
for (var i = 0; i < len; i++) {
var iterator = iterators[i];
var result = iterator.next();
if (iterator.hasCompleted()) {
shouldComplete = true;
}
if (result.done) {
destination.complete();
return;
}
args.push(result.value);
}
if (this.project) {
this._tryProject(args);
} else {
destination.next(args);
}
if (shouldComplete) {
destination.complete();
}
};
ZipSubscriber.prototype._tryProject = function(args) {
var result;
try {
result = this.project.apply(this, args);
} catch (err) {
this.destination.error(err);
return;
}
this.destination.next(result);
};
return ZipSubscriber;
}(Subscriber_1.Subscriber);
exports.ZipSubscriber = ZipSubscriber;
var StaticIterator = function() {
function StaticIterator(iterator) {
this.iterator = iterator;
this.nextResult = iterator.next();
}
StaticIterator.prototype.hasValue = function() {
return true;
};
StaticIterator.prototype.next = function() {
var result = this.nextResult;
this.nextResult = this.iterator.next();
return result;
};
StaticIterator.prototype.hasCompleted = function() {
var nextResult = this.nextResult;
return nextResult && nextResult.done;
};
return StaticIterator;
}();
var StaticArrayIterator = function() {
function StaticArrayIterator(array) {
this.array = array;
this.index = 0;
this.length = 0;
this.length = array.length;
}
StaticArrayIterator.prototype[iterator_1.iterator] = function() {
return this;
};
StaticArrayIterator.prototype.next = function(value) {
var i = this.index++;
var array = this.array;
return i < this.length ? {
value: array[i],
done: false
} : {
value: null,
done: true
};
};
StaticArrayIterator.prototype.hasValue = function() {
return this.array.length > this.index;
};
StaticArrayIterator.prototype.hasCompleted = function() {
return this.array.length === this.index;
};
return StaticArrayIterator;
}();
var ZipBufferIterator = function(_super) {
__extends(ZipBufferIterator, _super);
function ZipBufferIterator(destination, parent, observable) {
_super.call(this, destination);
this.parent = parent;
this.observable = observable;
this.stillUnsubscribed = true;
this.buffer = [];
this.isComplete = false;
}
ZipBufferIterator.prototype[iterator_1.iterator] = function() {
return this;
};
ZipBufferIterator.prototype.next = function() {
var buffer = this.buffer;
if (buffer.length === 0 && this.isComplete) {
return {
value: null,
done: true
};
} else {
return {
value: buffer.shift(),
done: false
};
}
};
ZipBufferIterator.prototype.hasValue = function() {
return this.buffer.length > 0;
};
ZipBufferIterator.prototype.hasCompleted = function() {
return this.buffer.length === 0 && this.isComplete;
};
ZipBufferIterator.prototype.notifyComplete = function() {
if (this.buffer.length > 0) {
this.isComplete = true;
this.parent.notifyInactive();
} else {
this.destination.complete();
}
};
ZipBufferIterator.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.buffer.push(innerValue);
this.parent.checkIterators();
};
ZipBufferIterator.prototype.subscribe = function(value, index) {
return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);
};
return ZipBufferIterator;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var ajax_1 = __webpack_require__(363);
Observable_1.Observable.ajax = ajax_1.ajax;
}, function(module, exports, __webpack_require__) {
"use strict";
var AjaxObservable_1 = __webpack_require__(364);
exports.ajax = AjaxObservable_1.AjaxObservable.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(94);
var tryCatch_1 = __webpack_require__(101);
var errorObject_1 = __webpack_require__(102);
var Observable_1 = __webpack_require__(93);
var Subscriber_1 = __webpack_require__(96);
var map_1 = __webpack_require__(165);
function getCORSRequest() {
if (root_1.root.XMLHttpRequest) {
return new root_1.root.XMLHttpRequest();
} else if (!!root_1.root.XDomainRequest) {
return new root_1.root.XDomainRequest();
} else {
throw new Error("CORS is not supported by your browser");
}
}
function getXMLHttpRequest() {
if (root_1.root.XMLHttpRequest) {
return new root_1.root.XMLHttpRequest();
} else {
var progId = void 0;
try {
var progIds = [ "Msxml2.XMLHTTP", "Microsoft.XMLHTTP", "Msxml2.XMLHTTP.4.0" ];
for (var i = 0; i < 3; i++) {
try {
progId = progIds[i];
if (new root_1.root.ActiveXObject(progId)) {
break;
}
} catch (e) {}
}
return new root_1.root.ActiveXObject(progId);
} catch (e) {
throw new Error("XMLHttpRequest is not supported by your browser");
}
}
}
function ajaxGet(url, headers) {
if (headers === void 0) {
headers = null;
}
return new AjaxObservable({
method: "GET",
url: url,
headers: headers
});
}
exports.ajaxGet = ajaxGet;
function ajaxPost(url, body, headers) {
return new AjaxObservable({
method: "POST",
url: url,
body: body,
headers: headers
});
}
exports.ajaxPost = ajaxPost;
function ajaxDelete(url, headers) {
return new AjaxObservable({
method: "DELETE",
url: url,
headers: headers
});
}
exports.ajaxDelete = ajaxDelete;
function ajaxPut(url, body, headers) {
return new AjaxObservable({
method: "PUT",
url: url,
body: body,
headers: headers
});
}
exports.ajaxPut = ajaxPut;
function ajaxPatch(url, body, headers) {
return new AjaxObservable({
method: "PATCH",
url: url,
body: body,
headers: headers
});
}
exports.ajaxPatch = ajaxPatch;
function ajaxGetJSON(url, headers) {
return new AjaxObservable({
method: "GET",
url: url,
responseType: "json",
headers: headers
}).lift(new map_1.MapOperator(function(x, index) {
return x.response;
}, null));
}
exports.ajaxGetJSON = ajaxGetJSON;
var AjaxObservable = function(_super) {
__extends(AjaxObservable, _super);
function AjaxObservable(urlOrRequest) {
_super.call(this);
var request = {
async: true,
createXHR: function() {
return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();
},
crossDomain: false,
withCredentials: false,
headers: {},
method: "GET",
responseType: "json",
timeout: 0
};
if (typeof urlOrRequest === "string") {
request.url = urlOrRequest;
} else {
for (var prop in urlOrRequest) {
if (urlOrRequest.hasOwnProperty(prop)) {
request[prop] = urlOrRequest[prop];
}
}
}
this.request = request;
}
AjaxObservable.prototype._subscribe = function(subscriber) {
return new AjaxSubscriber(subscriber, this.request);
};
AjaxObservable.create = function() {
var create = function(urlOrRequest) {
return new AjaxObservable(urlOrRequest);
};
create.get = ajaxGet;
create.post = ajaxPost;
create.delete = ajaxDelete;
create.put = ajaxPut;
create.patch = ajaxPatch;
create.getJSON = ajaxGetJSON;
return create;
}();
return AjaxObservable;
}(Observable_1.Observable);
exports.AjaxObservable = AjaxObservable;
var AjaxSubscriber = function(_super) {
__extends(AjaxSubscriber, _super);
function AjaxSubscriber(destination, request) {
_super.call(this, destination);
this.request = request;
this.done = false;
var headers = request.headers = request.headers || {};
if (!request.crossDomain && !headers["X-Requested-With"]) {
headers["X-Requested-With"] = "XMLHttpRequest";
}
if (!("Content-Type" in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== "undefined") {
headers["Content-Type"] = "application/x-www-form-urlencoded; charset=UTF-8";
}
request.body = this.serializeBody(request.body, request.headers["Content-Type"]);
this.send();
}
AjaxSubscriber.prototype.next = function(e) {
this.done = true;
var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;
var response = new AjaxResponse(e, xhr, request);
destination.next(response);
};
AjaxSubscriber.prototype.send = function() {
var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;
var createXHR = request.createXHR;
var xhr = tryCatch_1.tryCatch(createXHR).call(request);
if (xhr === errorObject_1.errorObject) {
this.error(errorObject_1.errorObject.e);
} else {
this.xhr = xhr;
this.setupEvents(xhr, request);
var result = void 0;
if (user) {
result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);
} else {
result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);
}
if (result === errorObject_1.errorObject) {
this.error(errorObject_1.errorObject.e);
return null;
}
xhr.timeout = request.timeout;
xhr.responseType = request.responseType;
if ("withCredentials" in xhr) {
xhr.withCredentials = !!request.withCredentials;
}
this.setHeaders(xhr, headers);
result = body ? tryCatch_1.tryCatch(xhr.send).call(xhr, body) : tryCatch_1.tryCatch(xhr.send).call(xhr);
if (result === errorObject_1.errorObject) {
this.error(errorObject_1.errorObject.e);
return null;
}
}
return xhr;
};
AjaxSubscriber.prototype.serializeBody = function(body, contentType) {
if (!body || typeof body === "string") {
return body;
} else if (root_1.root.FormData && body instanceof root_1.root.FormData) {
return body;
}
if (contentType) {
var splitIndex = contentType.indexOf(";");
if (splitIndex !== -1) {
contentType = contentType.substring(0, splitIndex);
}
}
switch (contentType) {
case "application/x-www-form-urlencoded":
return Object.keys(body).map(function(key) {
return encodeURI(key) + "=" + encodeURI(body[key]);
}).join("&");

case "application/json":
return JSON.stringify(body);

default:
return body;
}
};
AjaxSubscriber.prototype.setHeaders = function(xhr, headers) {
for (var key in headers) {
if (headers.hasOwnProperty(key)) {
xhr.setRequestHeader(key, headers[key]);
}
}
};
AjaxSubscriber.prototype.setupEvents = function(xhr, request) {
var progressSubscriber = request.progressSubscriber;
function xhrTimeout(e) {
var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;
if (progressSubscriber) {
progressSubscriber.error(e);
}
subscriber.error(new AjaxTimeoutError(this, request));
}
xhr.ontimeout = xhrTimeout;
xhrTimeout.request = request;
xhrTimeout.subscriber = this;
xhrTimeout.progressSubscriber = progressSubscriber;
if (xhr.upload && "withCredentials" in xhr) {
if (progressSubscriber) {
var xhrProgress_1;
xhrProgress_1 = function(e) {
var progressSubscriber = xhrProgress_1.progressSubscriber;
progressSubscriber.next(e);
};
if (root_1.root.XDomainRequest) {
xhr.onprogress = xhrProgress_1;
} else {
xhr.upload.onprogress = xhrProgress_1;
}
xhrProgress_1.progressSubscriber = progressSubscriber;
}
var xhrError_1;
xhrError_1 = function(e) {
var _a = xhrError_1, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;
if (progressSubscriber) {
progressSubscriber.error(e);
}
subscriber.error(new AjaxError("ajax error", this, request));
};
xhr.onerror = xhrError_1;
xhrError_1.request = request;
xhrError_1.subscriber = this;
xhrError_1.progressSubscriber = progressSubscriber;
}
function xhrReadyStateChange(e) {
var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;
if (this.readyState === 4) {
var status_1 = this.status === 1223 ? 204 : this.status;
var response = this.responseType === "text" ? this.response || this.responseText : this.response;
if (status_1 === 0) {
status_1 = response ? 200 : 0;
}
if (200 <= status_1 && status_1 < 300) {
if (progressSubscriber) {
progressSubscriber.complete();
}
subscriber.next(e);
subscriber.complete();
} else {
if (progressSubscriber) {
progressSubscriber.error(e);
}
subscriber.error(new AjaxError("ajax error " + status_1, this, request));
}
}
}
xhr.onreadystatechange = xhrReadyStateChange;
xhrReadyStateChange.subscriber = this;
xhrReadyStateChange.progressSubscriber = progressSubscriber;
xhrReadyStateChange.request = request;
};
AjaxSubscriber.prototype.unsubscribe = function() {
var _a = this, done = _a.done, xhr = _a.xhr;
if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === "function") {
xhr.abort();
}
_super.prototype.unsubscribe.call(this);
};
return AjaxSubscriber;
}(Subscriber_1.Subscriber);
exports.AjaxSubscriber = AjaxSubscriber;
var AjaxResponse = function() {
function AjaxResponse(originalEvent, xhr, request) {
this.originalEvent = originalEvent;
this.xhr = xhr;
this.request = request;
this.status = xhr.status;
this.responseType = xhr.responseType || request.responseType;
switch (this.responseType) {
case "json":
if ("response" in xhr) {
this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || "null");
} else {
this.response = JSON.parse(xhr.responseText || "null");
}
break;

case "xml":
this.response = xhr.responseXML;
break;

case "text":
default:
this.response = "response" in xhr ? xhr.response : xhr.responseText;
break;
}
}
return AjaxResponse;
}();
exports.AjaxResponse = AjaxResponse;
var AjaxError = function(_super) {
__extends(AjaxError, _super);
function AjaxError(message, xhr, request) {
_super.call(this, message);
this.message = message;
this.xhr = xhr;
this.request = request;
this.status = xhr.status;
}
return AjaxError;
}(Error);
exports.AjaxError = AjaxError;
var AjaxTimeoutError = function(_super) {
__extends(AjaxTimeoutError, _super);
function AjaxTimeoutError(xhr, request) {
_super.call(this, "ajax timeout", xhr, request);
}
return AjaxTimeoutError;
}(AjaxError);
exports.AjaxTimeoutError = AjaxTimeoutError;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var webSocket_1 = __webpack_require__(366);
Observable_1.Observable.webSocket = webSocket_1.webSocket;
}, function(module, exports, __webpack_require__) {
"use strict";
var WebSocketSubject_1 = __webpack_require__(367);
exports.webSocket = WebSocketSubject_1.WebSocketSubject.create;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(123);
var Subscriber_1 = __webpack_require__(96);
var Observable_1 = __webpack_require__(93);
var Subscription_1 = __webpack_require__(98);
var root_1 = __webpack_require__(94);
var ReplaySubject_1 = __webpack_require__(368);
var tryCatch_1 = __webpack_require__(101);
var errorObject_1 = __webpack_require__(102);
var assign_1 = __webpack_require__(372);
var WebSocketSubject = function(_super) {
__extends(WebSocketSubject, _super);
function WebSocketSubject(urlConfigOrSource, destination) {
if (urlConfigOrSource instanceof Observable_1.Observable) {
_super.call(this, destination, urlConfigOrSource);
} else {
_super.call(this);
this.WebSocketCtor = root_1.root.WebSocket;
this._output = new Subject_1.Subject();
if (typeof urlConfigOrSource === "string") {
this.url = urlConfigOrSource;
} else {
assign_1.assign(this, urlConfigOrSource);
}
if (!this.WebSocketCtor) {
throw new Error("no WebSocket constructor can be found");
}
this.destination = new ReplaySubject_1.ReplaySubject();
}
}
WebSocketSubject.prototype.resultSelector = function(e) {
return JSON.parse(e.data);
};
WebSocketSubject.create = function(urlConfigOrSource) {
return new WebSocketSubject(urlConfigOrSource);
};
WebSocketSubject.prototype.lift = function(operator) {
var sock = new WebSocketSubject(this, this.destination);
sock.operator = operator;
return sock;
};
WebSocketSubject.prototype._resetState = function() {
this.socket = null;
if (!this.source) {
this.destination = new ReplaySubject_1.ReplaySubject();
}
this._output = new Subject_1.Subject();
};
WebSocketSubject.prototype.multiplex = function(subMsg, unsubMsg, messageFilter) {
var self = this;
return new Observable_1.Observable(function(observer) {
var result = tryCatch_1.tryCatch(subMsg)();
if (result === errorObject_1.errorObject) {
observer.error(errorObject_1.errorObject.e);
} else {
self.next(result);
}
var subscription = self.subscribe(function(x) {
var result = tryCatch_1.tryCatch(messageFilter)(x);
if (result === errorObject_1.errorObject) {
observer.error(errorObject_1.errorObject.e);
} else if (result) {
observer.next(x);
}
}, function(err) {
return observer.error(err);
}, function() {
return observer.complete();
});
return function() {
var result = tryCatch_1.tryCatch(unsubMsg)();
if (result === errorObject_1.errorObject) {
observer.error(errorObject_1.errorObject.e);
} else {
self.next(result);
}
subscription.unsubscribe();
};
});
};
WebSocketSubject.prototype._connectSocket = function() {
var _this = this;
var WebSocketCtor = this.WebSocketCtor;
var observer = this._output;
var socket = null;
try {
socket = this.protocol ? new WebSocketCtor(this.url, this.protocol) : new WebSocketCtor(this.url);
this.socket = socket;
if (this.binaryType) {
this.socket.binaryType = this.binaryType;
}
} catch (e) {
observer.error(e);
return;
}
var subscription = new Subscription_1.Subscription(function() {
_this.socket = null;
if (socket && socket.readyState === 1) {
socket.close();
}
});
socket.onopen = function(e) {
var openObserver = _this.openObserver;
if (openObserver) {
openObserver.next(e);
}
var queue = _this.destination;
_this.destination = Subscriber_1.Subscriber.create(function(x) {
return socket.readyState === 1 && socket.send(x);
}, function(e) {
var closingObserver = _this.closingObserver;
if (closingObserver) {
closingObserver.next(undefined);
}
if (e && e.code) {
socket.close(e.code, e.reason);
} else {
observer.error(new TypeError("WebSocketSubject.error must be called with an object with an error code, " + "and an optional reason: { code: number, reason: string }"));
}
_this._resetState();
}, function() {
var closingObserver = _this.closingObserver;
if (closingObserver) {
closingObserver.next(undefined);
}
socket.close();
_this._resetState();
});
if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {
subscription.add(queue.subscribe(_this.destination));
}
};
socket.onerror = function(e) {
_this._resetState();
observer.error(e);
};
socket.onclose = function(e) {
_this._resetState();
var closeObserver = _this.closeObserver;
if (closeObserver) {
closeObserver.next(e);
}
if (e.wasClean) {
observer.complete();
} else {
observer.error(e);
}
};
socket.onmessage = function(e) {
var result = tryCatch_1.tryCatch(_this.resultSelector)(e);
if (result === errorObject_1.errorObject) {
observer.error(errorObject_1.errorObject.e);
} else {
observer.next(result);
}
};
};
WebSocketSubject.prototype._subscribe = function(subscriber) {
var _this = this;
var source = this.source;
if (source) {
return source.subscribe(subscriber);
}
if (!this.socket) {
this._connectSocket();
}
var subscription = new Subscription_1.Subscription();
subscription.add(this._output.subscribe(subscriber));
subscription.add(function() {
var socket = _this.socket;
if (_this._output.observers.length === 0) {
if (socket && socket.readyState === 1) {
socket.close();
}
_this._resetState();
}
});
return subscription;
};
WebSocketSubject.prototype.unsubscribe = function() {
var _a = this, source = _a.source, socket = _a.socket;
if (socket && socket.readyState === 1) {
socket.close();
this._resetState();
}
_super.prototype.unsubscribe.call(this);
if (!source) {
this.destination = new ReplaySubject_1.ReplaySubject();
}
};
return WebSocketSubject;
}(Subject_1.AnonymousSubject);
exports.WebSocketSubject = WebSocketSubject;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(123);
var queue_1 = __webpack_require__(369);
var Subscription_1 = __webpack_require__(98);
var observeOn_1 = __webpack_require__(174);
var ObjectUnsubscribedError_1 = __webpack_require__(124);
var SubjectSubscription_1 = __webpack_require__(125);
var ReplaySubject = function(_super) {
__extends(ReplaySubject, _super);
function ReplaySubject(bufferSize, windowTime, scheduler) {
if (bufferSize === void 0) {
bufferSize = Number.POSITIVE_INFINITY;
}
if (windowTime === void 0) {
windowTime = Number.POSITIVE_INFINITY;
}
_super.call(this);
this.scheduler = scheduler;
this._events = [];
this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
this._windowTime = windowTime < 1 ? 1 : windowTime;
}
ReplaySubject.prototype.next = function(value) {
var now = this._getNow();
this._events.push(new ReplayEvent(now, value));
this._trimBufferThenGetEvents();
_super.prototype.next.call(this, value);
};
ReplaySubject.prototype._subscribe = function(subscriber) {
var _events = this._trimBufferThenGetEvents();
var scheduler = this.scheduler;
var subscription;
if (this.closed) {
throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
} else if (this.hasError) {
subscription = Subscription_1.Subscription.EMPTY;
} else if (this.isStopped) {
subscription = Subscription_1.Subscription.EMPTY;
} else {
this.observers.push(subscriber);
subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
}
if (scheduler) {
subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
}
var len = _events.length;
for (var i = 0; i < len && !subscriber.closed; i++) {
subscriber.next(_events[i].value);
}
if (this.hasError) {
subscriber.error(this.thrownError);
} else if (this.isStopped) {
subscriber.complete();
}
return subscription;
};
ReplaySubject.prototype._getNow = function() {
return (this.scheduler || queue_1.queue).now();
};
ReplaySubject.prototype._trimBufferThenGetEvents = function() {
var now = this._getNow();
var _bufferSize = this._bufferSize;
var _windowTime = this._windowTime;
var _events = this._events;
var eventsCount = _events.length;
var spliceCount = 0;
while (spliceCount < eventsCount) {
if (now - _events[spliceCount].time < _windowTime) {
break;
}
spliceCount++;
}
if (eventsCount > _bufferSize) {
spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
}
if (spliceCount > 0) {
_events.splice(0, spliceCount);
}
return _events;
};
return ReplaySubject;
}(Subject_1.Subject);
exports.ReplaySubject = ReplaySubject;
var ReplayEvent = function() {
function ReplayEvent(time, value) {
this.time = time;
this.value = value;
}
return ReplayEvent;
}();
}, function(module, exports, __webpack_require__) {
"use strict";
var QueueAction_1 = __webpack_require__(370);
var QueueScheduler_1 = __webpack_require__(371);
exports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncAction_1 = __webpack_require__(329);
var QueueAction = function(_super) {
__extends(QueueAction, _super);
function QueueAction(scheduler, work) {
_super.call(this, scheduler, work);
this.scheduler = scheduler;
this.work = work;
}
QueueAction.prototype.schedule = function(state, delay) {
if (delay === void 0) {
delay = 0;
}
if (delay > 0) {
return _super.prototype.schedule.call(this, state, delay);
}
this.delay = delay;
this.state = state;
this.scheduler.flush(this);
return this;
};
QueueAction.prototype.execute = function(state, delay) {
return delay > 0 || this.closed ? _super.prototype.execute.call(this, state, delay) : this._execute(state, delay);
};
QueueAction.prototype.requestAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
}
return scheduler.flush(this);
};
return QueueAction;
}(AsyncAction_1.AsyncAction);
exports.QueueAction = QueueAction;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncScheduler_1 = __webpack_require__(331);
var QueueScheduler = function(_super) {
__extends(QueueScheduler, _super);
function QueueScheduler() {
_super.apply(this, arguments);
}
return QueueScheduler;
}(AsyncScheduler_1.AsyncScheduler);
exports.QueueScheduler = QueueScheduler;
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(94);
function assignImpl(target) {
var sources = [];
for (var _i = 1; _i < arguments.length; _i++) {
sources[_i - 1] = arguments[_i];
}
var len = sources.length;
for (var i = 0; i < len; i++) {
var source = sources[i];
for (var k in source) {
if (source.hasOwnProperty(k)) {
target[k] = source[k];
}
}
}
return target;
}
exports.assignImpl = assignImpl;
function getAssign(root) {
return root.Object.assign || assignImpl;
}
exports.getAssign = getAssign;
exports.assign = getAssign(root_1.root);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var buffer_1 = __webpack_require__(374);
Observable_1.Observable.prototype.buffer = buffer_1.buffer;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function buffer(closingNotifier) {
return this.lift(new BufferOperator(closingNotifier));
}
exports.buffer = buffer;
var BufferOperator = function() {
function BufferOperator(closingNotifier) {
this.closingNotifier = closingNotifier;
}
BufferOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
};
return BufferOperator;
}();
var BufferSubscriber = function(_super) {
__extends(BufferSubscriber, _super);
function BufferSubscriber(destination, closingNotifier) {
_super.call(this, destination);
this.buffer = [];
this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
}
BufferSubscriber.prototype._next = function(value) {
this.buffer.push(value);
};
BufferSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
var buffer = this.buffer;
this.buffer = [];
this.destination.next(buffer);
};
return BufferSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var bufferCount_1 = __webpack_require__(376);
Observable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function bufferCount(bufferSize, startBufferEvery) {
if (startBufferEvery === void 0) {
startBufferEvery = null;
}
return this.lift(new BufferCountOperator(bufferSize, startBufferEvery));
}
exports.bufferCount = bufferCount;
var BufferCountOperator = function() {
function BufferCountOperator(bufferSize, startBufferEvery) {
this.bufferSize = bufferSize;
this.startBufferEvery = startBufferEvery;
if (!startBufferEvery || bufferSize === startBufferEvery) {
this.subscriberClass = BufferCountSubscriber;
} else {
this.subscriberClass = BufferSkipCountSubscriber;
}
}
BufferCountOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
};
return BufferCountOperator;
}();
var BufferCountSubscriber = function(_super) {
__extends(BufferCountSubscriber, _super);
function BufferCountSubscriber(destination, bufferSize) {
_super.call(this, destination);
this.bufferSize = bufferSize;
this.buffer = [];
}
BufferCountSubscriber.prototype._next = function(value) {
var buffer = this.buffer;
buffer.push(value);
if (buffer.length == this.bufferSize) {
this.destination.next(buffer);
this.buffer = [];
}
};
BufferCountSubscriber.prototype._complete = function() {
var buffer = this.buffer;
if (buffer.length > 0) {
this.destination.next(buffer);
}
_super.prototype._complete.call(this);
};
return BufferCountSubscriber;
}(Subscriber_1.Subscriber);
var BufferSkipCountSubscriber = function(_super) {
__extends(BufferSkipCountSubscriber, _super);
function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
_super.call(this, destination);
this.bufferSize = bufferSize;
this.startBufferEvery = startBufferEvery;
this.buffers = [];
this.count = 0;
}
BufferSkipCountSubscriber.prototype._next = function(value) {
var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;
this.count++;
if (count % startBufferEvery === 0) {
buffers.push([]);
}
for (var i = buffers.length; i--; ) {
var buffer = buffers[i];
buffer.push(value);
if (buffer.length === bufferSize) {
buffers.splice(i, 1);
this.destination.next(buffer);
}
}
};
BufferSkipCountSubscriber.prototype._complete = function() {
var _a = this, buffers = _a.buffers, destination = _a.destination;
while (buffers.length > 0) {
var buffer = buffers.shift();
if (buffer.length > 0) {
destination.next(buffer);
}
}
_super.prototype._complete.call(this);
};
return BufferSkipCountSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var bufferTime_1 = __webpack_require__(378);
Observable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__(328);
var Subscriber_1 = __webpack_require__(96);
var isScheduler_1 = __webpack_require__(112);
function bufferTime(bufferTimeSpan) {
var length = arguments.length;
var scheduler = async_1.async;
if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {
scheduler = arguments[arguments.length - 1];
length--;
}
var bufferCreationInterval = null;
if (length >= 2) {
bufferCreationInterval = arguments[1];
}
var maxBufferSize = Number.POSITIVE_INFINITY;
if (length >= 3) {
maxBufferSize = arguments[2];
}
return this.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
}
exports.bufferTime = bufferTime;
var BufferTimeOperator = function() {
function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
this.bufferTimeSpan = bufferTimeSpan;
this.bufferCreationInterval = bufferCreationInterval;
this.maxBufferSize = maxBufferSize;
this.scheduler = scheduler;
}
BufferTimeOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
};
return BufferTimeOperator;
}();
var Context = function() {
function Context() {
this.buffer = [];
}
return Context;
}();
var BufferTimeSubscriber = function(_super) {
__extends(BufferTimeSubscriber, _super);
function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
_super.call(this, destination);
this.bufferTimeSpan = bufferTimeSpan;
this.bufferCreationInterval = bufferCreationInterval;
this.maxBufferSize = maxBufferSize;
this.scheduler = scheduler;
this.contexts = [];
var context = this.openContext();
this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
if (this.timespanOnly) {
var timeSpanOnlyState = {
subscriber: this,
context: context,
bufferTimeSpan: bufferTimeSpan
};
this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
} else {
var closeState = {
subscriber: this,
context: context
};
var creationState = {
bufferTimeSpan: bufferTimeSpan,
bufferCreationInterval: bufferCreationInterval,
subscriber: this,
scheduler: scheduler
};
this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
}
}
BufferTimeSubscriber.prototype._next = function(value) {
var contexts = this.contexts;
var len = contexts.length;
var filledBufferContext;
for (var i = 0; i < len; i++) {
var context = contexts[i];
var buffer = context.buffer;
buffer.push(value);
if (buffer.length == this.maxBufferSize) {
filledBufferContext = context;
}
}
if (filledBufferContext) {
this.onBufferFull(filledBufferContext);
}
};
BufferTimeSubscriber.prototype._error = function(err) {
this.contexts.length = 0;
_super.prototype._error.call(this, err);
};
BufferTimeSubscriber.prototype._complete = function() {
var _a = this, contexts = _a.contexts, destination = _a.destination;
while (contexts.length > 0) {
var context = contexts.shift();
destination.next(context.buffer);
}
_super.prototype._complete.call(this);
};
BufferTimeSubscriber.prototype._unsubscribe = function() {
this.contexts = null;
};
BufferTimeSubscriber.prototype.onBufferFull = function(context) {
this.closeContext(context);
var closeAction = context.closeAction;
closeAction.unsubscribe();
this.remove(closeAction);
if (!this.closed && this.timespanOnly) {
context = this.openContext();
var bufferTimeSpan = this.bufferTimeSpan;
var timeSpanOnlyState = {
subscriber: this,
context: context,
bufferTimeSpan: bufferTimeSpan
};
this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
}
};
BufferTimeSubscriber.prototype.openContext = function() {
var context = new Context();
this.contexts.push(context);
return context;
};
BufferTimeSubscriber.prototype.closeContext = function(context) {
this.destination.next(context.buffer);
var contexts = this.contexts;
var spliceIndex = contexts ? contexts.indexOf(context) : -1;
if (spliceIndex >= 0) {
contexts.splice(contexts.indexOf(context), 1);
}
};
return BufferTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchBufferTimeSpanOnly(state) {
var subscriber = state.subscriber;
var prevContext = state.context;
if (prevContext) {
subscriber.closeContext(prevContext);
}
if (!subscriber.closed) {
state.context = subscriber.openContext();
state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
}
}
function dispatchBufferCreation(state) {
var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
var context = subscriber.openContext();
var action = this;
if (!subscriber.closed) {
subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, {
subscriber: subscriber,
context: context
}));
action.schedule(state, bufferCreationInterval);
}
}
function dispatchBufferClose(arg) {
var subscriber = arg.subscriber, context = arg.context;
subscriber.closeContext(context);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var bufferToggle_1 = __webpack_require__(380);
Observable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(98);
var subscribeToResult_1 = __webpack_require__(115);
var OuterSubscriber_1 = __webpack_require__(114);
function bufferToggle(openings, closingSelector) {
return this.lift(new BufferToggleOperator(openings, closingSelector));
}
exports.bufferToggle = bufferToggle;
var BufferToggleOperator = function() {
function BufferToggleOperator(openings, closingSelector) {
this.openings = openings;
this.closingSelector = closingSelector;
}
BufferToggleOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
};
return BufferToggleOperator;
}();
var BufferToggleSubscriber = function(_super) {
__extends(BufferToggleSubscriber, _super);
function BufferToggleSubscriber(destination, openings, closingSelector) {
_super.call(this, destination);
this.openings = openings;
this.closingSelector = closingSelector;
this.contexts = [];
this.add(subscribeToResult_1.subscribeToResult(this, openings));
}
BufferToggleSubscriber.prototype._next = function(value) {
var contexts = this.contexts;
var len = contexts.length;
for (var i = 0; i < len; i++) {
contexts[i].buffer.push(value);
}
};
BufferToggleSubscriber.prototype._error = function(err) {
var contexts = this.contexts;
while (contexts.length > 0) {
var context = contexts.shift();
context.subscription.unsubscribe();
context.buffer = null;
context.subscription = null;
}
this.contexts = null;
_super.prototype._error.call(this, err);
};
BufferToggleSubscriber.prototype._complete = function() {
var contexts = this.contexts;
while (contexts.length > 0) {
var context = contexts.shift();
this.destination.next(context.buffer);
context.subscription.unsubscribe();
context.buffer = null;
context.subscription = null;
}
this.contexts = null;
_super.prototype._complete.call(this);
};
BufferToggleSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
};
BufferToggleSubscriber.prototype.notifyComplete = function(innerSub) {
this.closeBuffer(innerSub.context);
};
BufferToggleSubscriber.prototype.openBuffer = function(value) {
try {
var closingSelector = this.closingSelector;
var closingNotifier = closingSelector.call(this, value);
if (closingNotifier) {
this.trySubscribe(closingNotifier);
}
} catch (err) {
this._error(err);
}
};
BufferToggleSubscriber.prototype.closeBuffer = function(context) {
var contexts = this.contexts;
if (contexts && context) {
var buffer = context.buffer, subscription = context.subscription;
this.destination.next(buffer);
contexts.splice(contexts.indexOf(context), 1);
this.remove(subscription);
subscription.unsubscribe();
}
};
BufferToggleSubscriber.prototype.trySubscribe = function(closingNotifier) {
var contexts = this.contexts;
var buffer = [];
var subscription = new Subscription_1.Subscription();
var context = {
buffer: buffer,
subscription: subscription
};
contexts.push(context);
var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
if (!innerSubscription || innerSubscription.closed) {
this.closeBuffer(context);
} else {
innerSubscription.context = context;
this.add(innerSubscription);
subscription.add(innerSubscription);
}
};
return BufferToggleSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var bufferWhen_1 = __webpack_require__(382);
Observable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(98);
var tryCatch_1 = __webpack_require__(101);
var errorObject_1 = __webpack_require__(102);
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function bufferWhen(closingSelector) {
return this.lift(new BufferWhenOperator(closingSelector));
}
exports.bufferWhen = bufferWhen;
var BufferWhenOperator = function() {
function BufferWhenOperator(closingSelector) {
this.closingSelector = closingSelector;
}
BufferWhenOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
};
return BufferWhenOperator;
}();
var BufferWhenSubscriber = function(_super) {
__extends(BufferWhenSubscriber, _super);
function BufferWhenSubscriber(destination, closingSelector) {
_super.call(this, destination);
this.closingSelector = closingSelector;
this.subscribing = false;
this.openBuffer();
}
BufferWhenSubscriber.prototype._next = function(value) {
this.buffer.push(value);
};
BufferWhenSubscriber.prototype._complete = function() {
var buffer = this.buffer;
if (buffer) {
this.destination.next(buffer);
}
_super.prototype._complete.call(this);
};
BufferWhenSubscriber.prototype._unsubscribe = function() {
this.buffer = null;
this.subscribing = false;
};
BufferWhenSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.openBuffer();
};
BufferWhenSubscriber.prototype.notifyComplete = function() {
if (this.subscribing) {
this.complete();
} else {
this.openBuffer();
}
};
BufferWhenSubscriber.prototype.openBuffer = function() {
var closingSubscription = this.closingSubscription;
if (closingSubscription) {
this.remove(closingSubscription);
closingSubscription.unsubscribe();
}
var buffer = this.buffer;
if (this.buffer) {
this.destination.next(buffer);
}
this.buffer = [];
var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
if (closingNotifier === errorObject_1.errorObject) {
this.error(errorObject_1.errorObject.e);
} else {
closingSubscription = new Subscription_1.Subscription();
this.closingSubscription = closingSubscription;
this.add(closingSubscription);
this.subscribing = true;
closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
this.subscribing = false;
}
};
return BufferWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var catch_1 = __webpack_require__(183);
Observable_1.Observable.prototype.catch = catch_1._catch;
Observable_1.Observable.prototype._catch = catch_1._catch;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var combineAll_1 = __webpack_require__(385);
Observable_1.Observable.prototype.combineAll = combineAll_1.combineAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var combineLatest_1 = __webpack_require__(302);
function combineAll(project) {
return this.lift(new combineLatest_1.CombineLatestOperator(project));
}
exports.combineAll = combineAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var combineLatest_1 = __webpack_require__(302);
Observable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var concat_1 = __webpack_require__(305);
Observable_1.Observable.prototype.concat = concat_1.concat;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var concatAll_1 = __webpack_require__(184);
Observable_1.Observable.prototype.concatAll = concatAll_1.concatAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var concatMap_1 = __webpack_require__(177);
Observable_1.Observable.prototype.concatMap = concatMap_1.concatMap;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var concatMapTo_1 = __webpack_require__(391);
Observable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;
}, function(module, exports, __webpack_require__) {
"use strict";
var mergeMapTo_1 = __webpack_require__(392);
function concatMapTo(innerObservable, resultSelector) {
return this.lift(new mergeMapTo_1.MergeMapToOperator(innerObservable, resultSelector, 1));
}
exports.concatMapTo = concatMapTo;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function mergeMapTo(innerObservable, resultSelector, concurrent) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
if (typeof resultSelector === "number") {
concurrent = resultSelector;
resultSelector = null;
}
return this.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent));
}
exports.mergeMapTo = mergeMapTo;
var MergeMapToOperator = function() {
function MergeMapToOperator(ish, resultSelector, concurrent) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
this.ish = ish;
this.resultSelector = resultSelector;
this.concurrent = concurrent;
}
MergeMapToOperator.prototype.call = function(observer, source) {
return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));
};
return MergeMapToOperator;
}();
exports.MergeMapToOperator = MergeMapToOperator;
var MergeMapToSubscriber = function(_super) {
__extends(MergeMapToSubscriber, _super);
function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
_super.call(this, destination);
this.ish = ish;
this.resultSelector = resultSelector;
this.concurrent = concurrent;
this.hasCompleted = false;
this.buffer = [];
this.active = 0;
this.index = 0;
}
MergeMapToSubscriber.prototype._next = function(value) {
if (this.active < this.concurrent) {
var resultSelector = this.resultSelector;
var index = this.index++;
var ish = this.ish;
var destination = this.destination;
this.active++;
this._innerSub(ish, destination, resultSelector, value, index);
} else {
this.buffer.push(value);
}
};
MergeMapToSubscriber.prototype._innerSub = function(ish, destination, resultSelector, value, index) {
this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
};
MergeMapToSubscriber.prototype._complete = function() {
this.hasCompleted = true;
if (this.active === 0 && this.buffer.length === 0) {
this.destination.complete();
}
};
MergeMapToSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
if (resultSelector) {
this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
} else {
destination.next(innerValue);
}
};
MergeMapToSubscriber.prototype.trySelectResult = function(outerValue, innerValue, outerIndex, innerIndex) {
var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
var result;
try {
result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
} catch (err) {
destination.error(err);
return;
}
destination.next(result);
};
MergeMapToSubscriber.prototype.notifyError = function(err) {
this.destination.error(err);
};
MergeMapToSubscriber.prototype.notifyComplete = function(innerSub) {
var buffer = this.buffer;
this.remove(innerSub);
this.active--;
if (buffer.length > 0) {
this._next(buffer.shift());
} else if (this.active === 0 && this.hasCompleted) {
this.destination.complete();
}
};
return MergeMapToSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.MergeMapToSubscriber = MergeMapToSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var count_1 = __webpack_require__(394);
Observable_1.Observable.prototype.count = count_1.count;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function count(predicate) {
return this.lift(new CountOperator(predicate, this));
}
exports.count = count;
var CountOperator = function() {
function CountOperator(predicate, source) {
this.predicate = predicate;
this.source = source;
}
CountOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
};
return CountOperator;
}();
var CountSubscriber = function(_super) {
__extends(CountSubscriber, _super);
function CountSubscriber(destination, predicate, source) {
_super.call(this, destination);
this.predicate = predicate;
this.source = source;
this.count = 0;
this.index = 0;
}
CountSubscriber.prototype._next = function(value) {
if (this.predicate) {
this._tryPredicate(value);
} else {
this.count++;
}
};
CountSubscriber.prototype._tryPredicate = function(value) {
var result;
try {
result = this.predicate(value, this.index++, this.source);
} catch (err) {
this.destination.error(err);
return;
}
if (result) {
this.count++;
}
};
CountSubscriber.prototype._complete = function() {
this.destination.next(this.count);
this.destination.complete();
};
return CountSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var dematerialize_1 = __webpack_require__(396);
Observable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function dematerialize() {
return this.lift(new DeMaterializeOperator());
}
exports.dematerialize = dematerialize;
var DeMaterializeOperator = function() {
function DeMaterializeOperator() {}
DeMaterializeOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new DeMaterializeSubscriber(subscriber));
};
return DeMaterializeOperator;
}();
var DeMaterializeSubscriber = function(_super) {
__extends(DeMaterializeSubscriber, _super);
function DeMaterializeSubscriber(destination) {
_super.call(this, destination);
}
DeMaterializeSubscriber.prototype._next = function(value) {
value.observe(this.destination);
};
return DeMaterializeSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var debounce_1 = __webpack_require__(398);
Observable_1.Observable.prototype.debounce = debounce_1.debounce;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function debounce(durationSelector) {
return this.lift(new DebounceOperator(durationSelector));
}
exports.debounce = debounce;
var DebounceOperator = function() {
function DebounceOperator(durationSelector) {
this.durationSelector = durationSelector;
}
DebounceOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
};
return DebounceOperator;
}();
var DebounceSubscriber = function(_super) {
__extends(DebounceSubscriber, _super);
function DebounceSubscriber(destination, durationSelector) {
_super.call(this, destination);
this.durationSelector = durationSelector;
this.hasValue = false;
this.durationSubscription = null;
}
DebounceSubscriber.prototype._next = function(value) {
try {
var result = this.durationSelector.call(this, value);
if (result) {
this._tryNext(value, result);
}
} catch (err) {
this.destination.error(err);
}
};
DebounceSubscriber.prototype._complete = function() {
this.emitValue();
this.destination.complete();
};
DebounceSubscriber.prototype._tryNext = function(value, duration) {
var subscription = this.durationSubscription;
this.value = value;
this.hasValue = true;
if (subscription) {
subscription.unsubscribe();
this.remove(subscription);
}
subscription = subscribeToResult_1.subscribeToResult(this, duration);
if (!subscription.closed) {
this.add(this.durationSubscription = subscription);
}
};
DebounceSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.emitValue();
};
DebounceSubscriber.prototype.notifyComplete = function() {
this.emitValue();
};
DebounceSubscriber.prototype.emitValue = function() {
if (this.hasValue) {
var value = this.value;
var subscription = this.durationSubscription;
if (subscription) {
this.durationSubscription = null;
subscription.unsubscribe();
this.remove(subscription);
}
this.value = null;
this.hasValue = false;
_super.prototype._next.call(this, value);
}
};
return DebounceSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var debounceTime_1 = __webpack_require__(400);
Observable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var async_1 = __webpack_require__(328);
function debounceTime(dueTime, scheduler) {
if (scheduler === void 0) {
scheduler = async_1.async;
}
return this.lift(new DebounceTimeOperator(dueTime, scheduler));
}
exports.debounceTime = debounceTime;
var DebounceTimeOperator = function() {
function DebounceTimeOperator(dueTime, scheduler) {
this.dueTime = dueTime;
this.scheduler = scheduler;
}
DebounceTimeOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
};
return DebounceTimeOperator;
}();
var DebounceTimeSubscriber = function(_super) {
__extends(DebounceTimeSubscriber, _super);
function DebounceTimeSubscriber(destination, dueTime, scheduler) {
_super.call(this, destination);
this.dueTime = dueTime;
this.scheduler = scheduler;
this.debouncedSubscription = null;
this.lastValue = null;
this.hasValue = false;
}
DebounceTimeSubscriber.prototype._next = function(value) {
this.clearDebounce();
this.lastValue = value;
this.hasValue = true;
this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
};
DebounceTimeSubscriber.prototype._complete = function() {
this.debouncedNext();
this.destination.complete();
};
DebounceTimeSubscriber.prototype.debouncedNext = function() {
this.clearDebounce();
if (this.hasValue) {
this.destination.next(this.lastValue);
this.lastValue = null;
this.hasValue = false;
}
};
DebounceTimeSubscriber.prototype.clearDebounce = function() {
var debouncedSubscription = this.debouncedSubscription;
if (debouncedSubscription !== null) {
this.remove(debouncedSubscription);
debouncedSubscription.unsubscribe();
this.debouncedSubscription = null;
}
};
return DebounceTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchNext(subscriber) {
subscriber.debouncedNext();
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var defaultIfEmpty_1 = __webpack_require__(402);
Observable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function defaultIfEmpty(defaultValue) {
if (defaultValue === void 0) {
defaultValue = null;
}
return this.lift(new DefaultIfEmptyOperator(defaultValue));
}
exports.defaultIfEmpty = defaultIfEmpty;
var DefaultIfEmptyOperator = function() {
function DefaultIfEmptyOperator(defaultValue) {
this.defaultValue = defaultValue;
}
DefaultIfEmptyOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
};
return DefaultIfEmptyOperator;
}();
var DefaultIfEmptySubscriber = function(_super) {
__extends(DefaultIfEmptySubscriber, _super);
function DefaultIfEmptySubscriber(destination, defaultValue) {
_super.call(this, destination);
this.defaultValue = defaultValue;
this.isEmpty = true;
}
DefaultIfEmptySubscriber.prototype._next = function(value) {
this.isEmpty = false;
this.destination.next(value);
};
DefaultIfEmptySubscriber.prototype._complete = function() {
if (this.isEmpty) {
this.destination.next(this.defaultValue);
}
this.destination.complete();
};
return DefaultIfEmptySubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var delay_1 = __webpack_require__(404);
Observable_1.Observable.prototype.delay = delay_1.delay;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__(328);
var isDate_1 = __webpack_require__(358);
var Subscriber_1 = __webpack_require__(96);
var Notification_1 = __webpack_require__(175);
function delay(delay, scheduler) {
if (scheduler === void 0) {
scheduler = async_1.async;
}
var absoluteDelay = isDate_1.isDate(delay);
var delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);
return this.lift(new DelayOperator(delayFor, scheduler));
}
exports.delay = delay;
var DelayOperator = function() {
function DelayOperator(delay, scheduler) {
this.delay = delay;
this.scheduler = scheduler;
}
DelayOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
};
return DelayOperator;
}();
var DelaySubscriber = function(_super) {
__extends(DelaySubscriber, _super);
function DelaySubscriber(destination, delay, scheduler) {
_super.call(this, destination);
this.delay = delay;
this.scheduler = scheduler;
this.queue = [];
this.active = false;
this.errored = false;
}
DelaySubscriber.dispatch = function(state) {
var source = state.source;
var queue = source.queue;
var scheduler = state.scheduler;
var destination = state.destination;
while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {
queue.shift().notification.observe(destination);
}
if (queue.length > 0) {
var delay_1 = Math.max(0, queue[0].time - scheduler.now());
this.schedule(state, delay_1);
} else {
source.active = false;
}
};
DelaySubscriber.prototype._schedule = function(scheduler) {
this.active = true;
this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
source: this,
destination: this.destination,
scheduler: scheduler
}));
};
DelaySubscriber.prototype.scheduleNotification = function(notification) {
if (this.errored === true) {
return;
}
var scheduler = this.scheduler;
var message = new DelayMessage(scheduler.now() + this.delay, notification);
this.queue.push(message);
if (this.active === false) {
this._schedule(scheduler);
}
};
DelaySubscriber.prototype._next = function(value) {
this.scheduleNotification(Notification_1.Notification.createNext(value));
};
DelaySubscriber.prototype._error = function(err) {
this.errored = true;
this.queue = [];
this.destination.error(err);
};
DelaySubscriber.prototype._complete = function() {
this.scheduleNotification(Notification_1.Notification.createComplete());
};
return DelaySubscriber;
}(Subscriber_1.Subscriber);
var DelayMessage = function() {
function DelayMessage(time, notification) {
this.time = time;
this.notification = notification;
}
return DelayMessage;
}();
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var delayWhen_1 = __webpack_require__(406);
Observable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var Observable_1 = __webpack_require__(93);
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function delayWhen(delayDurationSelector, subscriptionDelay) {
if (subscriptionDelay) {
return new SubscriptionDelayObservable(this, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));
}
return this.lift(new DelayWhenOperator(delayDurationSelector));
}
exports.delayWhen = delayWhen;
var DelayWhenOperator = function() {
function DelayWhenOperator(delayDurationSelector) {
this.delayDurationSelector = delayDurationSelector;
}
DelayWhenOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
};
return DelayWhenOperator;
}();
var DelayWhenSubscriber = function(_super) {
__extends(DelayWhenSubscriber, _super);
function DelayWhenSubscriber(destination, delayDurationSelector) {
_super.call(this, destination);
this.delayDurationSelector = delayDurationSelector;
this.completed = false;
this.delayNotifierSubscriptions = [];
this.values = [];
}
DelayWhenSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.destination.next(outerValue);
this.removeSubscription(innerSub);
this.tryComplete();
};
DelayWhenSubscriber.prototype.notifyError = function(error, innerSub) {
this._error(error);
};
DelayWhenSubscriber.prototype.notifyComplete = function(innerSub) {
var value = this.removeSubscription(innerSub);
if (value) {
this.destination.next(value);
}
this.tryComplete();
};
DelayWhenSubscriber.prototype._next = function(value) {
try {
var delayNotifier = this.delayDurationSelector(value);
if (delayNotifier) {
this.tryDelay(delayNotifier, value);
}
} catch (err) {
this.destination.error(err);
}
};
DelayWhenSubscriber.prototype._complete = function() {
this.completed = true;
this.tryComplete();
};
DelayWhenSubscriber.prototype.removeSubscription = function(subscription) {
subscription.unsubscribe();
var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
var value = null;
if (subscriptionIdx !== -1) {
value = this.values[subscriptionIdx];
this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
this.values.splice(subscriptionIdx, 1);
}
return value;
};
DelayWhenSubscriber.prototype.tryDelay = function(delayNotifier, value) {
var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);
this.add(notifierSubscription);
this.delayNotifierSubscriptions.push(notifierSubscription);
this.values.push(value);
};
DelayWhenSubscriber.prototype.tryComplete = function() {
if (this.completed && this.delayNotifierSubscriptions.length === 0) {
this.destination.complete();
}
};
return DelayWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
var SubscriptionDelayObservable = function(_super) {
__extends(SubscriptionDelayObservable, _super);
function SubscriptionDelayObservable(source, subscriptionDelay) {
_super.call(this);
this.source = source;
this.subscriptionDelay = subscriptionDelay;
}
SubscriptionDelayObservable.prototype._subscribe = function(subscriber) {
this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
};
return SubscriptionDelayObservable;
}(Observable_1.Observable);
var SubscriptionDelaySubscriber = function(_super) {
__extends(SubscriptionDelaySubscriber, _super);
function SubscriptionDelaySubscriber(parent, source) {
_super.call(this);
this.parent = parent;
this.source = source;
this.sourceSubscribed = false;
}
SubscriptionDelaySubscriber.prototype._next = function(unused) {
this.subscribeToSource();
};
SubscriptionDelaySubscriber.prototype._error = function(err) {
this.unsubscribe();
this.parent.error(err);
};
SubscriptionDelaySubscriber.prototype._complete = function() {
this.subscribeToSource();
};
SubscriptionDelaySubscriber.prototype.subscribeToSource = function() {
if (!this.sourceSubscribed) {
this.sourceSubscribed = true;
this.unsubscribe();
this.source.subscribe(this.parent);
}
};
return SubscriptionDelaySubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var distinct_1 = __webpack_require__(408);
Observable_1.Observable.prototype.distinct = distinct_1.distinct;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
var Set_1 = __webpack_require__(409);
function distinct(keySelector, flushes) {
return this.lift(new DistinctOperator(keySelector, flushes));
}
exports.distinct = distinct;
var DistinctOperator = function() {
function DistinctOperator(keySelector, flushes) {
this.keySelector = keySelector;
this.flushes = flushes;
}
DistinctOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
};
return DistinctOperator;
}();
var DistinctSubscriber = function(_super) {
__extends(DistinctSubscriber, _super);
function DistinctSubscriber(destination, keySelector, flushes) {
_super.call(this, destination);
this.keySelector = keySelector;
this.values = new Set_1.Set();
if (flushes) {
this.add(subscribeToResult_1.subscribeToResult(this, flushes));
}
}
DistinctSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.values.clear();
};
DistinctSubscriber.prototype.notifyError = function(error, innerSub) {
this._error(error);
};
DistinctSubscriber.prototype._next = function(value) {
if (this.keySelector) {
this._useKeySelector(value);
} else {
this._finalizeNext(value, value);
}
};
DistinctSubscriber.prototype._useKeySelector = function(value) {
var key;
var destination = this.destination;
try {
key = this.keySelector(value);
} catch (err) {
destination.error(err);
return;
}
this._finalizeNext(key, value);
};
DistinctSubscriber.prototype._finalizeNext = function(key, value) {
var values = this.values;
if (!values.has(key)) {
values.add(key);
this.destination.next(value);
}
};
return DistinctSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.DistinctSubscriber = DistinctSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(94);
function minimalSetImpl() {
return function() {
function MinimalSet() {
this._values = [];
}
MinimalSet.prototype.add = function(value) {
if (!this.has(value)) {
this._values.push(value);
}
};
MinimalSet.prototype.has = function(value) {
return this._values.indexOf(value) !== -1;
};
Object.defineProperty(MinimalSet.prototype, "size", {
get: function() {
return this._values.length;
},
enumerable: true,
configurable: true
});
MinimalSet.prototype.clear = function() {
this._values.length = 0;
};
return MinimalSet;
}();
}
exports.minimalSetImpl = minimalSetImpl;
exports.Set = root_1.root.Set || minimalSetImpl();
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var distinctUntilChanged_1 = __webpack_require__(411);
Observable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var tryCatch_1 = __webpack_require__(101);
var errorObject_1 = __webpack_require__(102);
function distinctUntilChanged(compare, keySelector) {
return this.lift(new DistinctUntilChangedOperator(compare, keySelector));
}
exports.distinctUntilChanged = distinctUntilChanged;
var DistinctUntilChangedOperator = function() {
function DistinctUntilChangedOperator(compare, keySelector) {
this.compare = compare;
this.keySelector = keySelector;
}
DistinctUntilChangedOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
};
return DistinctUntilChangedOperator;
}();
var DistinctUntilChangedSubscriber = function(_super) {
__extends(DistinctUntilChangedSubscriber, _super);
function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
_super.call(this, destination);
this.keySelector = keySelector;
this.hasKey = false;
if (typeof compare === "function") {
this.compare = compare;
}
}
DistinctUntilChangedSubscriber.prototype.compare = function(x, y) {
return x === y;
};
DistinctUntilChangedSubscriber.prototype._next = function(value) {
var keySelector = this.keySelector;
var key = value;
if (keySelector) {
key = tryCatch_1.tryCatch(this.keySelector)(value);
if (key === errorObject_1.errorObject) {
return this.destination.error(errorObject_1.errorObject.e);
}
}
var result = false;
if (this.hasKey) {
result = tryCatch_1.tryCatch(this.compare)(this.key, key);
if (result === errorObject_1.errorObject) {
return this.destination.error(errorObject_1.errorObject.e);
}
} else {
this.hasKey = true;
}
if (Boolean(result) === false) {
this.key = key;
this.destination.next(value);
}
};
return DistinctUntilChangedSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var distinctUntilKeyChanged_1 = __webpack_require__(413);
Observable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;
}, function(module, exports, __webpack_require__) {
"use strict";
var distinctUntilChanged_1 = __webpack_require__(411);
function distinctUntilKeyChanged(key, compare) {
return distinctUntilChanged_1.distinctUntilChanged.call(this, function(x, y) {
if (compare) {
return compare(x[key], y[key]);
}
return x[key] === y[key];
});
}
exports.distinctUntilKeyChanged = distinctUntilKeyChanged;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var do_1 = __webpack_require__(415);
Observable_1.Observable.prototype.do = do_1._do;
Observable_1.Observable.prototype._do = do_1._do;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function _do(nextOrObserver, error, complete) {
return this.lift(new DoOperator(nextOrObserver, error, complete));
}
exports._do = _do;
var DoOperator = function() {
function DoOperator(nextOrObserver, error, complete) {
this.nextOrObserver = nextOrObserver;
this.error = error;
this.complete = complete;
}
DoOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
};
return DoOperator;
}();
var DoSubscriber = function(_super) {
__extends(DoSubscriber, _super);
function DoSubscriber(destination, nextOrObserver, error, complete) {
_super.call(this, destination);
var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);
safeSubscriber.syncErrorThrowable = true;
this.add(safeSubscriber);
this.safeSubscriber = safeSubscriber;
}
DoSubscriber.prototype._next = function(value) {
var safeSubscriber = this.safeSubscriber;
safeSubscriber.next(value);
if (safeSubscriber.syncErrorThrown) {
this.destination.error(safeSubscriber.syncErrorValue);
} else {
this.destination.next(value);
}
};
DoSubscriber.prototype._error = function(err) {
var safeSubscriber = this.safeSubscriber;
safeSubscriber.error(err);
if (safeSubscriber.syncErrorThrown) {
this.destination.error(safeSubscriber.syncErrorValue);
} else {
this.destination.error(err);
}
};
DoSubscriber.prototype._complete = function() {
var safeSubscriber = this.safeSubscriber;
safeSubscriber.complete();
if (safeSubscriber.syncErrorThrown) {
this.destination.error(safeSubscriber.syncErrorValue);
} else {
this.destination.complete();
}
};
return DoSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var exhaust_1 = __webpack_require__(417);
Observable_1.Observable.prototype.exhaust = exhaust_1.exhaust;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function exhaust() {
return this.lift(new SwitchFirstOperator());
}
exports.exhaust = exhaust;
var SwitchFirstOperator = function() {
function SwitchFirstOperator() {}
SwitchFirstOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new SwitchFirstSubscriber(subscriber));
};
return SwitchFirstOperator;
}();
var SwitchFirstSubscriber = function(_super) {
__extends(SwitchFirstSubscriber, _super);
function SwitchFirstSubscriber(destination) {
_super.call(this, destination);
this.hasCompleted = false;
this.hasSubscription = false;
}
SwitchFirstSubscriber.prototype._next = function(value) {
if (!this.hasSubscription) {
this.hasSubscription = true;
this.add(subscribeToResult_1.subscribeToResult(this, value));
}
};
SwitchFirstSubscriber.prototype._complete = function() {
this.hasCompleted = true;
if (!this.hasSubscription) {
this.destination.complete();
}
};
SwitchFirstSubscriber.prototype.notifyComplete = function(innerSub) {
this.remove(innerSub);
this.hasSubscription = false;
if (this.hasCompleted) {
this.destination.complete();
}
};
return SwitchFirstSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var exhaustMap_1 = __webpack_require__(419);
Observable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function exhaustMap(project, resultSelector) {
return this.lift(new SwitchFirstMapOperator(project, resultSelector));
}
exports.exhaustMap = exhaustMap;
var SwitchFirstMapOperator = function() {
function SwitchFirstMapOperator(project, resultSelector) {
this.project = project;
this.resultSelector = resultSelector;
}
SwitchFirstMapOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));
};
return SwitchFirstMapOperator;
}();
var SwitchFirstMapSubscriber = function(_super) {
__extends(SwitchFirstMapSubscriber, _super);
function SwitchFirstMapSubscriber(destination, project, resultSelector) {
_super.call(this, destination);
this.project = project;
this.resultSelector = resultSelector;
this.hasSubscription = false;
this.hasCompleted = false;
this.index = 0;
}
SwitchFirstMapSubscriber.prototype._next = function(value) {
if (!this.hasSubscription) {
this.tryNext(value);
}
};
SwitchFirstMapSubscriber.prototype.tryNext = function(value) {
var index = this.index++;
var destination = this.destination;
try {
var result = this.project(value, index);
this.hasSubscription = true;
this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
} catch (err) {
destination.error(err);
}
};
SwitchFirstMapSubscriber.prototype._complete = function() {
this.hasCompleted = true;
if (!this.hasSubscription) {
this.destination.complete();
}
};
SwitchFirstMapSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
if (resultSelector) {
this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
} else {
destination.next(innerValue);
}
};
SwitchFirstMapSubscriber.prototype.trySelectResult = function(outerValue, innerValue, outerIndex, innerIndex) {
var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
try {
var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
destination.next(result);
} catch (err) {
destination.error(err);
}
};
SwitchFirstMapSubscriber.prototype.notifyError = function(err) {
this.destination.error(err);
};
SwitchFirstMapSubscriber.prototype.notifyComplete = function(innerSub) {
this.remove(innerSub);
this.hasSubscription = false;
if (this.hasCompleted) {
this.destination.complete();
}
};
return SwitchFirstMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var expand_1 = __webpack_require__(421);
Observable_1.Observable.prototype.expand = expand_1.expand;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var tryCatch_1 = __webpack_require__(101);
var errorObject_1 = __webpack_require__(102);
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function expand(project, concurrent, scheduler) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
if (scheduler === void 0) {
scheduler = undefined;
}
concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
return this.lift(new ExpandOperator(project, concurrent, scheduler));
}
exports.expand = expand;
var ExpandOperator = function() {
function ExpandOperator(project, concurrent, scheduler) {
this.project = project;
this.concurrent = concurrent;
this.scheduler = scheduler;
}
ExpandOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
};
return ExpandOperator;
}();
exports.ExpandOperator = ExpandOperator;
var ExpandSubscriber = function(_super) {
__extends(ExpandSubscriber, _super);
function ExpandSubscriber(destination, project, concurrent, scheduler) {
_super.call(this, destination);
this.project = project;
this.concurrent = concurrent;
this.scheduler = scheduler;
this.index = 0;
this.active = 0;
this.hasCompleted = false;
if (concurrent < Number.POSITIVE_INFINITY) {
this.buffer = [];
}
}
ExpandSubscriber.dispatch = function(arg) {
var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
subscriber.subscribeToProjection(result, value, index);
};
ExpandSubscriber.prototype._next = function(value) {
var destination = this.destination;
if (destination.closed) {
this._complete();
return;
}
var index = this.index++;
if (this.active < this.concurrent) {
destination.next(value);
var result = tryCatch_1.tryCatch(this.project)(value, index);
if (result === errorObject_1.errorObject) {
destination.error(errorObject_1.errorObject.e);
} else if (!this.scheduler) {
this.subscribeToProjection(result, value, index);
} else {
var state = {
subscriber: this,
result: result,
value: value,
index: index
};
this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
}
} else {
this.buffer.push(value);
}
};
ExpandSubscriber.prototype.subscribeToProjection = function(result, value, index) {
this.active++;
this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
};
ExpandSubscriber.prototype._complete = function() {
this.hasCompleted = true;
if (this.hasCompleted && this.active === 0) {
this.destination.complete();
}
};
ExpandSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this._next(innerValue);
};
ExpandSubscriber.prototype.notifyComplete = function(innerSub) {
var buffer = this.buffer;
this.remove(innerSub);
this.active--;
if (buffer && buffer.length > 0) {
this._next(buffer.shift());
}
if (this.hasCompleted && this.active === 0) {
this.destination.complete();
}
};
return ExpandSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.ExpandSubscriber = ExpandSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var elementAt_1 = __webpack_require__(423);
Observable_1.Observable.prototype.elementAt = elementAt_1.elementAt;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var ArgumentOutOfRangeError_1 = __webpack_require__(424);
function elementAt(index, defaultValue) {
return this.lift(new ElementAtOperator(index, defaultValue));
}
exports.elementAt = elementAt;
var ElementAtOperator = function() {
function ElementAtOperator(index, defaultValue) {
this.index = index;
this.defaultValue = defaultValue;
if (index < 0) {
throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
}
}
ElementAtOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));
};
return ElementAtOperator;
}();
var ElementAtSubscriber = function(_super) {
__extends(ElementAtSubscriber, _super);
function ElementAtSubscriber(destination, index, defaultValue) {
_super.call(this, destination);
this.index = index;
this.defaultValue = defaultValue;
}
ElementAtSubscriber.prototype._next = function(x) {
if (this.index-- === 0) {
this.destination.next(x);
this.destination.complete();
}
};
ElementAtSubscriber.prototype._complete = function() {
var destination = this.destination;
if (this.index >= 0) {
if (typeof this.defaultValue !== "undefined") {
destination.next(this.defaultValue);
} else {
destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError());
}
}
destination.complete();
};
return ElementAtSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ArgumentOutOfRangeError = function(_super) {
__extends(ArgumentOutOfRangeError, _super);
function ArgumentOutOfRangeError() {
var err = _super.call(this, "argument out of range");
this.name = err.name = "ArgumentOutOfRangeError";
this.stack = err.stack;
this.message = err.message;
}
return ArgumentOutOfRangeError;
}(Error);
exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var filter_1 = __webpack_require__(186);
Observable_1.Observable.prototype.filter = filter_1.filter;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var finally_1 = __webpack_require__(427);
Observable_1.Observable.prototype.finally = finally_1._finally;
Observable_1.Observable.prototype._finally = finally_1._finally;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var Subscription_1 = __webpack_require__(98);
function _finally(callback) {
return this.lift(new FinallyOperator(callback));
}
exports._finally = _finally;
var FinallyOperator = function() {
function FinallyOperator(callback) {
this.callback = callback;
}
FinallyOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new FinallySubscriber(subscriber, this.callback));
};
return FinallyOperator;
}();
var FinallySubscriber = function(_super) {
__extends(FinallySubscriber, _super);
function FinallySubscriber(destination, callback) {
_super.call(this, destination);
this.add(new Subscription_1.Subscription(callback));
}
return FinallySubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var find_1 = __webpack_require__(429);
Observable_1.Observable.prototype.find = find_1.find;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function find(predicate, thisArg) {
if (typeof predicate !== "function") {
throw new TypeError("predicate is not a function");
}
return this.lift(new FindValueOperator(predicate, this, false, thisArg));
}
exports.find = find;
var FindValueOperator = function() {
function FindValueOperator(predicate, source, yieldIndex, thisArg) {
this.predicate = predicate;
this.source = source;
this.yieldIndex = yieldIndex;
this.thisArg = thisArg;
}
FindValueOperator.prototype.call = function(observer, source) {
return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
};
return FindValueOperator;
}();
exports.FindValueOperator = FindValueOperator;
var FindValueSubscriber = function(_super) {
__extends(FindValueSubscriber, _super);
function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
_super.call(this, destination);
this.predicate = predicate;
this.source = source;
this.yieldIndex = yieldIndex;
this.thisArg = thisArg;
this.index = 0;
}
FindValueSubscriber.prototype.notifyComplete = function(value) {
var destination = this.destination;
destination.next(value);
destination.complete();
};
FindValueSubscriber.prototype._next = function(value) {
var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
var index = this.index++;
try {
var result = predicate.call(thisArg || this, value, index, this.source);
if (result) {
this.notifyComplete(this.yieldIndex ? index : value);
}
} catch (err) {
this.destination.error(err);
}
};
FindValueSubscriber.prototype._complete = function() {
this.notifyComplete(this.yieldIndex ? -1 : undefined);
};
return FindValueSubscriber;
}(Subscriber_1.Subscriber);
exports.FindValueSubscriber = FindValueSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var findIndex_1 = __webpack_require__(431);
Observable_1.Observable.prototype.findIndex = findIndex_1.findIndex;
}, function(module, exports, __webpack_require__) {
"use strict";
var find_1 = __webpack_require__(429);
function findIndex(predicate, thisArg) {
return this.lift(new find_1.FindValueOperator(predicate, this, true, thisArg));
}
exports.findIndex = findIndex;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var first_1 = __webpack_require__(180);
Observable_1.Observable.prototype.first = first_1.first;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var groupBy_1 = __webpack_require__(434);
Observable_1.Observable.prototype.groupBy = groupBy_1.groupBy;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var Subscription_1 = __webpack_require__(98);
var Observable_1 = __webpack_require__(93);
var Subject_1 = __webpack_require__(123);
var Map_1 = __webpack_require__(435);
var FastMap_1 = __webpack_require__(437);
function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
return this.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
}
exports.groupBy = groupBy;
var GroupByOperator = function() {
function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
this.keySelector = keySelector;
this.elementSelector = elementSelector;
this.durationSelector = durationSelector;
this.subjectSelector = subjectSelector;
}
GroupByOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
};
return GroupByOperator;
}();
var GroupBySubscriber = function(_super) {
__extends(GroupBySubscriber, _super);
function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
_super.call(this, destination);
this.keySelector = keySelector;
this.elementSelector = elementSelector;
this.durationSelector = durationSelector;
this.subjectSelector = subjectSelector;
this.groups = null;
this.attemptedToUnsubscribe = false;
this.count = 0;
}
GroupBySubscriber.prototype._next = function(value) {
var key;
try {
key = this.keySelector(value);
} catch (err) {
this.error(err);
return;
}
this._group(value, key);
};
GroupBySubscriber.prototype._group = function(value, key) {
var groups = this.groups;
if (!groups) {
groups = this.groups = typeof key === "string" ? new FastMap_1.FastMap() : new Map_1.Map();
}
var group = groups.get(key);
var element;
if (this.elementSelector) {
try {
element = this.elementSelector(value);
} catch (err) {
this.error(err);
}
} else {
element = value;
}
if (!group) {
group = this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject();
groups.set(key, group);
var groupedObservable = new GroupedObservable(key, group, this);
this.destination.next(groupedObservable);
if (this.durationSelector) {
var duration = void 0;
try {
duration = this.durationSelector(new GroupedObservable(key, group));
} catch (err) {
this.error(err);
return;
}
this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
}
}
if (!group.closed) {
group.next(element);
}
};
GroupBySubscriber.prototype._error = function(err) {
var groups = this.groups;
if (groups) {
groups.forEach(function(group, key) {
group.error(err);
});
groups.clear();
}
this.destination.error(err);
};
GroupBySubscriber.prototype._complete = function() {
var groups = this.groups;
if (groups) {
groups.forEach(function(group, key) {
group.complete();
});
groups.clear();
}
this.destination.complete();
};
GroupBySubscriber.prototype.removeGroup = function(key) {
this.groups.delete(key);
};
GroupBySubscriber.prototype.unsubscribe = function() {
if (!this.closed) {
this.attemptedToUnsubscribe = true;
if (this.count === 0) {
_super.prototype.unsubscribe.call(this);
}
}
};
return GroupBySubscriber;
}(Subscriber_1.Subscriber);
var GroupDurationSubscriber = function(_super) {
__extends(GroupDurationSubscriber, _super);
function GroupDurationSubscriber(key, group, parent) {
_super.call(this);
this.key = key;
this.group = group;
this.parent = parent;
}
GroupDurationSubscriber.prototype._next = function(value) {
this._complete();
};
GroupDurationSubscriber.prototype._error = function(err) {
var group = this.group;
if (!group.closed) {
group.error(err);
}
this.parent.removeGroup(this.key);
};
GroupDurationSubscriber.prototype._complete = function() {
var group = this.group;
if (!group.closed) {
group.complete();
}
this.parent.removeGroup(this.key);
};
return GroupDurationSubscriber;
}(Subscriber_1.Subscriber);
var GroupedObservable = function(_super) {
__extends(GroupedObservable, _super);
function GroupedObservable(key, groupSubject, refCountSubscription) {
_super.call(this);
this.key = key;
this.groupSubject = groupSubject;
this.refCountSubscription = refCountSubscription;
}
GroupedObservable.prototype._subscribe = function(subscriber) {
var subscription = new Subscription_1.Subscription();
var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
if (refCountSubscription && !refCountSubscription.closed) {
subscription.add(new InnerRefCountSubscription(refCountSubscription));
}
subscription.add(groupSubject.subscribe(subscriber));
return subscription;
};
return GroupedObservable;
}(Observable_1.Observable);
exports.GroupedObservable = GroupedObservable;
var InnerRefCountSubscription = function(_super) {
__extends(InnerRefCountSubscription, _super);
function InnerRefCountSubscription(parent) {
_super.call(this);
this.parent = parent;
parent.count++;
}
InnerRefCountSubscription.prototype.unsubscribe = function() {
var parent = this.parent;
if (!parent.closed && !this.closed) {
_super.prototype.unsubscribe.call(this);
parent.count -= 1;
if (parent.count === 0 && parent.attemptedToUnsubscribe) {
parent.unsubscribe();
}
}
};
return InnerRefCountSubscription;
}(Subscription_1.Subscription);
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(94);
var MapPolyfill_1 = __webpack_require__(436);
exports.Map = root_1.root.Map || function() {
return MapPolyfill_1.MapPolyfill;
}();
}, function(module, exports) {
"use strict";
var MapPolyfill = function() {
function MapPolyfill() {
this.size = 0;
this._values = [];
this._keys = [];
}
MapPolyfill.prototype.get = function(key) {
var i = this._keys.indexOf(key);
return i === -1 ? undefined : this._values[i];
};
MapPolyfill.prototype.set = function(key, value) {
var i = this._keys.indexOf(key);
if (i === -1) {
this._keys.push(key);
this._values.push(value);
this.size++;
} else {
this._values[i] = value;
}
return this;
};
MapPolyfill.prototype.delete = function(key) {
var i = this._keys.indexOf(key);
if (i === -1) {
return false;
}
this._values.splice(i, 1);
this._keys.splice(i, 1);
this.size--;
return true;
};
MapPolyfill.prototype.clear = function() {
this._keys.length = 0;
this._values.length = 0;
this.size = 0;
};
MapPolyfill.prototype.forEach = function(cb, thisArg) {
for (var i = 0; i < this.size; i++) {
cb.call(thisArg, this._values[i], this._keys[i]);
}
};
return MapPolyfill;
}();
exports.MapPolyfill = MapPolyfill;
}, function(module, exports) {
"use strict";
var FastMap = function() {
function FastMap() {
this.values = {};
}
FastMap.prototype.delete = function(key) {
this.values[key] = null;
return true;
};
FastMap.prototype.set = function(key, value) {
this.values[key] = value;
return this;
};
FastMap.prototype.get = function(key) {
return this.values[key];
};
FastMap.prototype.forEach = function(cb, thisArg) {
var values = this.values;
for (var key in values) {
if (values.hasOwnProperty(key) && values[key] !== null) {
cb.call(thisArg, values[key], key);
}
}
};
FastMap.prototype.clear = function() {
this.values = {};
};
return FastMap;
}();
exports.FastMap = FastMap;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var ignoreElements_1 = __webpack_require__(439);
Observable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var noop_1 = __webpack_require__(339);
function ignoreElements() {
return this.lift(new IgnoreElementsOperator());
}
exports.ignoreElements = ignoreElements;
var IgnoreElementsOperator = function() {
function IgnoreElementsOperator() {}
IgnoreElementsOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new IgnoreElementsSubscriber(subscriber));
};
return IgnoreElementsOperator;
}();
var IgnoreElementsSubscriber = function(_super) {
__extends(IgnoreElementsSubscriber, _super);
function IgnoreElementsSubscriber() {
_super.apply(this, arguments);
}
IgnoreElementsSubscriber.prototype._next = function(unused) {
noop_1.noop();
};
return IgnoreElementsSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var isEmpty_1 = __webpack_require__(441);
Observable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function isEmpty() {
return this.lift(new IsEmptyOperator());
}
exports.isEmpty = isEmpty;
var IsEmptyOperator = function() {
function IsEmptyOperator() {}
IsEmptyOperator.prototype.call = function(observer, source) {
return source.subscribe(new IsEmptySubscriber(observer));
};
return IsEmptyOperator;
}();
var IsEmptySubscriber = function(_super) {
__extends(IsEmptySubscriber, _super);
function IsEmptySubscriber(destination) {
_super.call(this, destination);
}
IsEmptySubscriber.prototype.notifyComplete = function(isEmpty) {
var destination = this.destination;
destination.next(isEmpty);
destination.complete();
};
IsEmptySubscriber.prototype._next = function(value) {
this.notifyComplete(false);
};
IsEmptySubscriber.prototype._complete = function() {
this.notifyComplete(true);
};
return IsEmptySubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var audit_1 = __webpack_require__(443);
Observable_1.Observable.prototype.audit = audit_1.audit;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var tryCatch_1 = __webpack_require__(101);
var errorObject_1 = __webpack_require__(102);
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function audit(durationSelector) {
return this.lift(new AuditOperator(durationSelector));
}
exports.audit = audit;
var AuditOperator = function() {
function AuditOperator(durationSelector) {
this.durationSelector = durationSelector;
}
AuditOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
};
return AuditOperator;
}();
var AuditSubscriber = function(_super) {
__extends(AuditSubscriber, _super);
function AuditSubscriber(destination, durationSelector) {
_super.call(this, destination);
this.durationSelector = durationSelector;
this.hasValue = false;
}
AuditSubscriber.prototype._next = function(value) {
this.value = value;
this.hasValue = true;
if (!this.throttled) {
var duration = tryCatch_1.tryCatch(this.durationSelector)(value);
if (duration === errorObject_1.errorObject) {
this.destination.error(errorObject_1.errorObject.e);
} else {
this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));
}
}
};
AuditSubscriber.prototype.clearThrottle = function() {
var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
if (throttled) {
this.remove(throttled);
this.throttled = null;
throttled.unsubscribe();
}
if (hasValue) {
this.value = null;
this.hasValue = false;
this.destination.next(value);
}
};
AuditSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex) {
this.clearThrottle();
};
AuditSubscriber.prototype.notifyComplete = function() {
this.clearThrottle();
};
return AuditSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var auditTime_1 = __webpack_require__(445);
Observable_1.Observable.prototype.auditTime = auditTime_1.auditTime;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__(328);
var Subscriber_1 = __webpack_require__(96);
function auditTime(duration, scheduler) {
if (scheduler === void 0) {
scheduler = async_1.async;
}
return this.lift(new AuditTimeOperator(duration, scheduler));
}
exports.auditTime = auditTime;
var AuditTimeOperator = function() {
function AuditTimeOperator(duration, scheduler) {
this.duration = duration;
this.scheduler = scheduler;
}
AuditTimeOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));
};
return AuditTimeOperator;
}();
var AuditTimeSubscriber = function(_super) {
__extends(AuditTimeSubscriber, _super);
function AuditTimeSubscriber(destination, duration, scheduler) {
_super.call(this, destination);
this.duration = duration;
this.scheduler = scheduler;
this.hasValue = false;
}
AuditTimeSubscriber.prototype._next = function(value) {
this.value = value;
this.hasValue = true;
if (!this.throttled) {
this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));
}
};
AuditTimeSubscriber.prototype.clearThrottle = function() {
var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
if (throttled) {
this.remove(throttled);
this.throttled = null;
throttled.unsubscribe();
}
if (hasValue) {
this.value = null;
this.hasValue = false;
this.destination.next(value);
}
};
return AuditTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchNext(subscriber) {
subscriber.clearThrottle();
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var last_1 = __webpack_require__(185);
Observable_1.Observable.prototype.last = last_1.last;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var let_1 = __webpack_require__(448);
Observable_1.Observable.prototype.let = let_1.letProto;
Observable_1.Observable.prototype.letBind = let_1.letProto;
}, function(module, exports) {
"use strict";
function letProto(func) {
return func(this);
}
exports.letProto = letProto;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var every_1 = __webpack_require__(179);
Observable_1.Observable.prototype.every = every_1.every;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var map_1 = __webpack_require__(165);
Observable_1.Observable.prototype.map = map_1.map;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var mapTo_1 = __webpack_require__(452);
Observable_1.Observable.prototype.mapTo = mapTo_1.mapTo;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function mapTo(value) {
return this.lift(new MapToOperator(value));
}
exports.mapTo = mapTo;
var MapToOperator = function() {
function MapToOperator(value) {
this.value = value;
}
MapToOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new MapToSubscriber(subscriber, this.value));
};
return MapToOperator;
}();
var MapToSubscriber = function(_super) {
__extends(MapToSubscriber, _super);
function MapToSubscriber(destination, value) {
_super.call(this, destination);
this.value = value;
}
MapToSubscriber.prototype._next = function(x) {
this.destination.next(this.value);
};
return MapToSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var materialize_1 = __webpack_require__(454);
Observable_1.Observable.prototype.materialize = materialize_1.materialize;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var Notification_1 = __webpack_require__(175);
function materialize() {
return this.lift(new MaterializeOperator());
}
exports.materialize = materialize;
var MaterializeOperator = function() {
function MaterializeOperator() {}
MaterializeOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new MaterializeSubscriber(subscriber));
};
return MaterializeOperator;
}();
var MaterializeSubscriber = function(_super) {
__extends(MaterializeSubscriber, _super);
function MaterializeSubscriber(destination) {
_super.call(this, destination);
}
MaterializeSubscriber.prototype._next = function(value) {
this.destination.next(Notification_1.Notification.createNext(value));
};
MaterializeSubscriber.prototype._error = function(err) {
var destination = this.destination;
destination.next(Notification_1.Notification.createError(err));
destination.complete();
};
MaterializeSubscriber.prototype._complete = function() {
var destination = this.destination;
destination.next(Notification_1.Notification.createComplete());
destination.complete();
};
return MaterializeSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var max_1 = __webpack_require__(456);
Observable_1.Observable.prototype.max = max_1.max;
}, function(module, exports, __webpack_require__) {
"use strict";
var reduce_1 = __webpack_require__(182);
function max(comparer) {
var max = typeof comparer === "function" ? function(x, y) {
return comparer(x, y) > 0 ? x : y;
} : function(x, y) {
return x > y ? x : y;
};
return this.lift(new reduce_1.ReduceOperator(max));
}
exports.max = max;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var merge_1 = __webpack_require__(108);
Observable_1.Observable.prototype.merge = merge_1.merge;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var mergeAll_1 = __webpack_require__(113);
Observable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var mergeMap_1 = __webpack_require__(178);
Observable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;
Observable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var mergeMapTo_1 = __webpack_require__(392);
Observable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;
Observable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var mergeScan_1 = __webpack_require__(462);
Observable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var tryCatch_1 = __webpack_require__(101);
var errorObject_1 = __webpack_require__(102);
var subscribeToResult_1 = __webpack_require__(115);
var OuterSubscriber_1 = __webpack_require__(114);
function mergeScan(accumulator, seed, concurrent) {
if (concurrent === void 0) {
concurrent = Number.POSITIVE_INFINITY;
}
return this.lift(new MergeScanOperator(accumulator, seed, concurrent));
}
exports.mergeScan = mergeScan;
var MergeScanOperator = function() {
function MergeScanOperator(accumulator, seed, concurrent) {
this.accumulator = accumulator;
this.seed = seed;
this.concurrent = concurrent;
}
MergeScanOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
};
return MergeScanOperator;
}();
exports.MergeScanOperator = MergeScanOperator;
var MergeScanSubscriber = function(_super) {
__extends(MergeScanSubscriber, _super);
function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
_super.call(this, destination);
this.accumulator = accumulator;
this.acc = acc;
this.concurrent = concurrent;
this.hasValue = false;
this.hasCompleted = false;
this.buffer = [];
this.active = 0;
this.index = 0;
}
MergeScanSubscriber.prototype._next = function(value) {
if (this.active < this.concurrent) {
var index = this.index++;
var ish = tryCatch_1.tryCatch(this.accumulator)(this.acc, value);
var destination = this.destination;
if (ish === errorObject_1.errorObject) {
destination.error(errorObject_1.errorObject.e);
} else {
this.active++;
this._innerSub(ish, value, index);
}
} else {
this.buffer.push(value);
}
};
MergeScanSubscriber.prototype._innerSub = function(ish, value, index) {
this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
};
MergeScanSubscriber.prototype._complete = function() {
this.hasCompleted = true;
if (this.active === 0 && this.buffer.length === 0) {
if (this.hasValue === false) {
this.destination.next(this.acc);
}
this.destination.complete();
}
};
MergeScanSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
var destination = this.destination;
this.acc = innerValue;
this.hasValue = true;
destination.next(innerValue);
};
MergeScanSubscriber.prototype.notifyComplete = function(innerSub) {
var buffer = this.buffer;
this.remove(innerSub);
this.active--;
if (buffer.length > 0) {
this._next(buffer.shift());
} else if (this.active === 0 && this.hasCompleted) {
if (this.hasValue === false) {
this.destination.next(this.acc);
}
this.destination.complete();
}
};
return MergeScanSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.MergeScanSubscriber = MergeScanSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var min_1 = __webpack_require__(464);
Observable_1.Observable.prototype.min = min_1.min;
}, function(module, exports, __webpack_require__) {
"use strict";
var reduce_1 = __webpack_require__(182);
function min(comparer) {
var min = typeof comparer === "function" ? function(x, y) {
return comparer(x, y) < 0 ? x : y;
} : function(x, y) {
return x < y ? x : y;
};
return this.lift(new reduce_1.ReduceOperator(min));
}
exports.min = min;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var multicast_1 = __webpack_require__(121);
Observable_1.Observable.prototype.multicast = multicast_1.multicast;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var observeOn_1 = __webpack_require__(174);
Observable_1.Observable.prototype.observeOn = observeOn_1.observeOn;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var onErrorResumeNext_1 = __webpack_require__(342);
Observable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var pairwise_1 = __webpack_require__(469);
Observable_1.Observable.prototype.pairwise = pairwise_1.pairwise;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function pairwise() {
return this.lift(new PairwiseOperator());
}
exports.pairwise = pairwise;
var PairwiseOperator = function() {
function PairwiseOperator() {}
PairwiseOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new PairwiseSubscriber(subscriber));
};
return PairwiseOperator;
}();
var PairwiseSubscriber = function(_super) {
__extends(PairwiseSubscriber, _super);
function PairwiseSubscriber(destination) {
_super.call(this, destination);
this.hasPrev = false;
}
PairwiseSubscriber.prototype._next = function(value) {
if (this.hasPrev) {
this.destination.next([ this.prev, value ]);
} else {
this.hasPrev = true;
}
this.prev = value;
};
return PairwiseSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var partition_1 = __webpack_require__(471);
Observable_1.Observable.prototype.partition = partition_1.partition;
}, function(module, exports, __webpack_require__) {
"use strict";
var not_1 = __webpack_require__(472);
var filter_1 = __webpack_require__(186);
function partition(predicate, thisArg) {
return [ filter_1.filter.call(this, predicate, thisArg), filter_1.filter.call(this, not_1.not(predicate, thisArg)) ];
}
exports.partition = partition;
}, function(module, exports) {
"use strict";
function not(pred, thisArg) {
function notPred() {
return !notPred.pred.apply(notPred.thisArg, arguments);
}
notPred.pred = pred;
notPred.thisArg = thisArg;
return notPred;
}
exports.not = not;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var pluck_1 = __webpack_require__(474);
Observable_1.Observable.prototype.pluck = pluck_1.pluck;
}, function(module, exports, __webpack_require__) {
"use strict";
var map_1 = __webpack_require__(165);
function pluck() {
var properties = [];
for (var _i = 0; _i < arguments.length; _i++) {
properties[_i - 0] = arguments[_i];
}
var length = properties.length;
if (length === 0) {
throw new Error("list of properties cannot be empty.");
}
return map_1.map.call(this, plucker(properties, length));
}
exports.pluck = pluck;
function plucker(props, length) {
var mapper = function(x) {
var currentProp = x;
for (var i = 0; i < length; i++) {
var p = currentProp[props[i]];
if (typeof p !== "undefined") {
currentProp = p;
} else {
return undefined;
}
}
return currentProp;
};
return mapper;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var publish_1 = __webpack_require__(476);
Observable_1.Observable.prototype.publish = publish_1.publish;
}, function(module, exports, __webpack_require__) {
"use strict";
var Subject_1 = __webpack_require__(123);
var multicast_1 = __webpack_require__(121);
function publish(selector) {
return selector ? multicast_1.multicast.call(this, function() {
return new Subject_1.Subject();
}, selector) : multicast_1.multicast.call(this, new Subject_1.Subject());
}
exports.publish = publish;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var publishBehavior_1 = __webpack_require__(478);
Observable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;
}, function(module, exports, __webpack_require__) {
"use strict";
var BehaviorSubject_1 = __webpack_require__(169);
var multicast_1 = __webpack_require__(121);
function publishBehavior(value) {
return multicast_1.multicast.call(this, new BehaviorSubject_1.BehaviorSubject(value));
}
exports.publishBehavior = publishBehavior;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var publishReplay_1 = __webpack_require__(480);
Observable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;
}, function(module, exports, __webpack_require__) {
"use strict";
var ReplaySubject_1 = __webpack_require__(368);
var multicast_1 = __webpack_require__(121);
function publishReplay(bufferSize, windowTime, scheduler) {
if (bufferSize === void 0) {
bufferSize = Number.POSITIVE_INFINITY;
}
if (windowTime === void 0) {
windowTime = Number.POSITIVE_INFINITY;
}
return multicast_1.multicast.call(this, new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler));
}
exports.publishReplay = publishReplay;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var publishLast_1 = __webpack_require__(482);
Observable_1.Observable.prototype.publishLast = publishLast_1.publishLast;
}, function(module, exports, __webpack_require__) {
"use strict";
var AsyncSubject_1 = __webpack_require__(296);
var multicast_1 = __webpack_require__(121);
function publishLast() {
return multicast_1.multicast.call(this, new AsyncSubject_1.AsyncSubject());
}
exports.publishLast = publishLast;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var race_1 = __webpack_require__(335);
Observable_1.Observable.prototype.race = race_1.race;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var reduce_1 = __webpack_require__(182);
Observable_1.Observable.prototype.reduce = reduce_1.reduce;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var repeat_1 = __webpack_require__(486);
Observable_1.Observable.prototype.repeat = repeat_1.repeat;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var EmptyObservable_1 = __webpack_require__(111);
function repeat(count) {
if (count === void 0) {
count = -1;
}
if (count === 0) {
return new EmptyObservable_1.EmptyObservable();
} else if (count < 0) {
return this.lift(new RepeatOperator(-1, this));
} else {
return this.lift(new RepeatOperator(count - 1, this));
}
}
exports.repeat = repeat;
var RepeatOperator = function() {
function RepeatOperator(count, source) {
this.count = count;
this.source = source;
}
RepeatOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
};
return RepeatOperator;
}();
var RepeatSubscriber = function(_super) {
__extends(RepeatSubscriber, _super);
function RepeatSubscriber(destination, count, source) {
_super.call(this, destination);
this.count = count;
this.source = source;
}
RepeatSubscriber.prototype.complete = function() {
if (!this.isStopped) {
var _a = this, source = _a.source, count = _a.count;
if (count === 0) {
return _super.prototype.complete.call(this);
} else if (count > -1) {
this.count = count - 1;
}
source.subscribe(this._unsubscribeAndRecycle());
}
};
return RepeatSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var repeatWhen_1 = __webpack_require__(488);
Observable_1.Observable.prototype.repeatWhen = repeatWhen_1.repeatWhen;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(123);
var tryCatch_1 = __webpack_require__(101);
var errorObject_1 = __webpack_require__(102);
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function repeatWhen(notifier) {
return this.lift(new RepeatWhenOperator(notifier));
}
exports.repeatWhen = repeatWhen;
var RepeatWhenOperator = function() {
function RepeatWhenOperator(notifier) {
this.notifier = notifier;
}
RepeatWhenOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
};
return RepeatWhenOperator;
}();
var RepeatWhenSubscriber = function(_super) {
__extends(RepeatWhenSubscriber, _super);
function RepeatWhenSubscriber(destination, notifier, source) {
_super.call(this, destination);
this.notifier = notifier;
this.source = source;
this.sourceIsBeingSubscribedTo = true;
}
RepeatWhenSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.sourceIsBeingSubscribedTo = true;
this.source.subscribe(this);
};
RepeatWhenSubscriber.prototype.notifyComplete = function(innerSub) {
if (this.sourceIsBeingSubscribedTo === false) {
return _super.prototype.complete.call(this);
}
};
RepeatWhenSubscriber.prototype.complete = function() {
this.sourceIsBeingSubscribedTo = false;
if (!this.isStopped) {
if (!this.retries) {
this.subscribeToRetries();
} else if (this.retriesSubscription.closed) {
return _super.prototype.complete.call(this);
}
this._unsubscribeAndRecycle();
this.notifications.next();
}
};
RepeatWhenSubscriber.prototype._unsubscribe = function() {
var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
if (notifications) {
notifications.unsubscribe();
this.notifications = null;
}
if (retriesSubscription) {
retriesSubscription.unsubscribe();
this.retriesSubscription = null;
}
this.retries = null;
};
RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function() {
var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;
this.notifications = null;
this.retries = null;
this.retriesSubscription = null;
_super.prototype._unsubscribeAndRecycle.call(this);
this.notifications = notifications;
this.retries = retries;
this.retriesSubscription = retriesSubscription;
return this;
};
RepeatWhenSubscriber.prototype.subscribeToRetries = function() {
this.notifications = new Subject_1.Subject();
var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);
if (retries === errorObject_1.errorObject) {
return _super.prototype.complete.call(this);
}
this.retries = retries;
this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
};
return RepeatWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var retry_1 = __webpack_require__(490);
Observable_1.Observable.prototype.retry = retry_1.retry;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function retry(count) {
if (count === void 0) {
count = -1;
}
return this.lift(new RetryOperator(count, this));
}
exports.retry = retry;
var RetryOperator = function() {
function RetryOperator(count, source) {
this.count = count;
this.source = source;
}
RetryOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
};
return RetryOperator;
}();
var RetrySubscriber = function(_super) {
__extends(RetrySubscriber, _super);
function RetrySubscriber(destination, count, source) {
_super.call(this, destination);
this.count = count;
this.source = source;
}
RetrySubscriber.prototype.error = function(err) {
if (!this.isStopped) {
var _a = this, source = _a.source, count = _a.count;
if (count === 0) {
return _super.prototype.error.call(this, err);
} else if (count > -1) {
this.count = count - 1;
}
source.subscribe(this._unsubscribeAndRecycle());
}
};
return RetrySubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var retryWhen_1 = __webpack_require__(492);
Observable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(123);
var tryCatch_1 = __webpack_require__(101);
var errorObject_1 = __webpack_require__(102);
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function retryWhen(notifier) {
return this.lift(new RetryWhenOperator(notifier, this));
}
exports.retryWhen = retryWhen;
var RetryWhenOperator = function() {
function RetryWhenOperator(notifier, source) {
this.notifier = notifier;
this.source = source;
}
RetryWhenOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
};
return RetryWhenOperator;
}();
var RetryWhenSubscriber = function(_super) {
__extends(RetryWhenSubscriber, _super);
function RetryWhenSubscriber(destination, notifier, source) {
_super.call(this, destination);
this.notifier = notifier;
this.source = source;
}
RetryWhenSubscriber.prototype.error = function(err) {
if (!this.isStopped) {
var errors = this.errors;
var retries = this.retries;
var retriesSubscription = this.retriesSubscription;
if (!retries) {
errors = new Subject_1.Subject();
retries = tryCatch_1.tryCatch(this.notifier)(errors);
if (retries === errorObject_1.errorObject) {
return _super.prototype.error.call(this, errorObject_1.errorObject.e);
}
retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
} else {
this.errors = null;
this.retriesSubscription = null;
}
this._unsubscribeAndRecycle();
this.errors = errors;
this.retries = retries;
this.retriesSubscription = retriesSubscription;
errors.next(err);
}
};
RetryWhenSubscriber.prototype._unsubscribe = function() {
var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
if (errors) {
errors.unsubscribe();
this.errors = null;
}
if (retriesSubscription) {
retriesSubscription.unsubscribe();
this.retriesSubscription = null;
}
this.retries = null;
};
RetryWhenSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;
this.errors = null;
this.retries = null;
this.retriesSubscription = null;
this._unsubscribeAndRecycle();
this.errors = errors;
this.retries = retries;
this.retriesSubscription = retriesSubscription;
this.source.subscribe(this);
};
return RetryWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var sample_1 = __webpack_require__(494);
Observable_1.Observable.prototype.sample = sample_1.sample;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function sample(notifier) {
return this.lift(new SampleOperator(notifier));
}
exports.sample = sample;
var SampleOperator = function() {
function SampleOperator(notifier) {
this.notifier = notifier;
}
SampleOperator.prototype.call = function(subscriber, source) {
var sampleSubscriber = new SampleSubscriber(subscriber);
var subscription = source.subscribe(sampleSubscriber);
subscription.add(subscribeToResult_1.subscribeToResult(sampleSubscriber, this.notifier));
return subscription;
};
return SampleOperator;
}();
var SampleSubscriber = function(_super) {
__extends(SampleSubscriber, _super);
function SampleSubscriber() {
_super.apply(this, arguments);
this.hasValue = false;
}
SampleSubscriber.prototype._next = function(value) {
this.value = value;
this.hasValue = true;
};
SampleSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.emitValue();
};
SampleSubscriber.prototype.notifyComplete = function() {
this.emitValue();
};
SampleSubscriber.prototype.emitValue = function() {
if (this.hasValue) {
this.hasValue = false;
this.destination.next(this.value);
}
};
return SampleSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var sampleTime_1 = __webpack_require__(496);
Observable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var async_1 = __webpack_require__(328);
function sampleTime(period, scheduler) {
if (scheduler === void 0) {
scheduler = async_1.async;
}
return this.lift(new SampleTimeOperator(period, scheduler));
}
exports.sampleTime = sampleTime;
var SampleTimeOperator = function() {
function SampleTimeOperator(period, scheduler) {
this.period = period;
this.scheduler = scheduler;
}
SampleTimeOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
};
return SampleTimeOperator;
}();
var SampleTimeSubscriber = function(_super) {
__extends(SampleTimeSubscriber, _super);
function SampleTimeSubscriber(destination, period, scheduler) {
_super.call(this, destination);
this.period = period;
this.scheduler = scheduler;
this.hasValue = false;
this.add(scheduler.schedule(dispatchNotification, period, {
subscriber: this,
period: period
}));
}
SampleTimeSubscriber.prototype._next = function(value) {
this.lastValue = value;
this.hasValue = true;
};
SampleTimeSubscriber.prototype.notifyNext = function() {
if (this.hasValue) {
this.hasValue = false;
this.destination.next(this.lastValue);
}
};
return SampleTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchNotification(state) {
var subscriber = state.subscriber, period = state.period;
subscriber.notifyNext();
this.schedule(state, period);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var scan_1 = __webpack_require__(498);
Observable_1.Observable.prototype.scan = scan_1.scan;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function scan(accumulator, seed) {
var hasSeed = false;
if (arguments.length >= 2) {
hasSeed = true;
}
return this.lift(new ScanOperator(accumulator, seed, hasSeed));
}
exports.scan = scan;
var ScanOperator = function() {
function ScanOperator(accumulator, seed, hasSeed) {
if (hasSeed === void 0) {
hasSeed = false;
}
this.accumulator = accumulator;
this.seed = seed;
this.hasSeed = hasSeed;
}
ScanOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
};
return ScanOperator;
}();
var ScanSubscriber = function(_super) {
__extends(ScanSubscriber, _super);
function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
_super.call(this, destination);
this.accumulator = accumulator;
this._seed = _seed;
this.hasSeed = hasSeed;
this.index = 0;
}
Object.defineProperty(ScanSubscriber.prototype, "seed", {
get: function() {
return this._seed;
},
set: function(value) {
this.hasSeed = true;
this._seed = value;
},
enumerable: true,
configurable: true
});
ScanSubscriber.prototype._next = function(value) {
if (!this.hasSeed) {
this.seed = value;
this.destination.next(value);
} else {
return this._tryNext(value);
}
};
ScanSubscriber.prototype._tryNext = function(value) {
var index = this.index++;
var result;
try {
result = this.accumulator(this.seed, value, index);
} catch (err) {
this.destination.error(err);
}
this.seed = result;
this.destination.next(result);
};
return ScanSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var sequenceEqual_1 = __webpack_require__(500);
Observable_1.Observable.prototype.sequenceEqual = sequenceEqual_1.sequenceEqual;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var tryCatch_1 = __webpack_require__(101);
var errorObject_1 = __webpack_require__(102);
function sequenceEqual(compareTo, comparor) {
return this.lift(new SequenceEqualOperator(compareTo, comparor));
}
exports.sequenceEqual = sequenceEqual;
var SequenceEqualOperator = function() {
function SequenceEqualOperator(compareTo, comparor) {
this.compareTo = compareTo;
this.comparor = comparor;
}
SequenceEqualOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));
};
return SequenceEqualOperator;
}();
exports.SequenceEqualOperator = SequenceEqualOperator;
var SequenceEqualSubscriber = function(_super) {
__extends(SequenceEqualSubscriber, _super);
function SequenceEqualSubscriber(destination, compareTo, comparor) {
_super.call(this, destination);
this.compareTo = compareTo;
this.comparor = comparor;
this._a = [];
this._b = [];
this._oneComplete = false;
this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));
}
SequenceEqualSubscriber.prototype._next = function(value) {
if (this._oneComplete && this._b.length === 0) {
this.emit(false);
} else {
this._a.push(value);
this.checkValues();
}
};
SequenceEqualSubscriber.prototype._complete = function() {
if (this._oneComplete) {
this.emit(this._a.length === 0 && this._b.length === 0);
} else {
this._oneComplete = true;
}
};
SequenceEqualSubscriber.prototype.checkValues = function() {
var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;
while (_a.length > 0 && _b.length > 0) {
var a = _a.shift();
var b = _b.shift();
var areEqual = false;
if (comparor) {
areEqual = tryCatch_1.tryCatch(comparor)(a, b);
if (areEqual === errorObject_1.errorObject) {
this.destination.error(errorObject_1.errorObject.e);
}
} else {
areEqual = a === b;
}
if (!areEqual) {
this.emit(false);
}
}
};
SequenceEqualSubscriber.prototype.emit = function(value) {
var destination = this.destination;
destination.next(value);
destination.complete();
};
SequenceEqualSubscriber.prototype.nextB = function(value) {
if (this._oneComplete && this._a.length === 0) {
this.emit(false);
} else {
this._b.push(value);
this.checkValues();
}
};
return SequenceEqualSubscriber;
}(Subscriber_1.Subscriber);
exports.SequenceEqualSubscriber = SequenceEqualSubscriber;
var SequenceEqualCompareToSubscriber = function(_super) {
__extends(SequenceEqualCompareToSubscriber, _super);
function SequenceEqualCompareToSubscriber(destination, parent) {
_super.call(this, destination);
this.parent = parent;
}
SequenceEqualCompareToSubscriber.prototype._next = function(value) {
this.parent.nextB(value);
};
SequenceEqualCompareToSubscriber.prototype._error = function(err) {
this.parent.error(err);
};
SequenceEqualCompareToSubscriber.prototype._complete = function() {
this.parent._complete();
};
return SequenceEqualCompareToSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var share_1 = __webpack_require__(120);
Observable_1.Observable.prototype.share = share_1.share;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var single_1 = __webpack_require__(503);
Observable_1.Observable.prototype.single = single_1.single;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var EmptyError_1 = __webpack_require__(181);
function single(predicate) {
return this.lift(new SingleOperator(predicate, this));
}
exports.single = single;
var SingleOperator = function() {
function SingleOperator(predicate, source) {
this.predicate = predicate;
this.source = source;
}
SingleOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
};
return SingleOperator;
}();
var SingleSubscriber = function(_super) {
__extends(SingleSubscriber, _super);
function SingleSubscriber(destination, predicate, source) {
_super.call(this, destination);
this.predicate = predicate;
this.source = source;
this.seenValue = false;
this.index = 0;
}
SingleSubscriber.prototype.applySingleValue = function(value) {
if (this.seenValue) {
this.destination.error("Sequence contains more than one element");
} else {
this.seenValue = true;
this.singleValue = value;
}
};
SingleSubscriber.prototype._next = function(value) {
var index = this.index++;
if (this.predicate) {
this.tryNext(value, index);
} else {
this.applySingleValue(value);
}
};
SingleSubscriber.prototype.tryNext = function(value, index) {
try {
if (this.predicate(value, index, this.source)) {
this.applySingleValue(value);
}
} catch (err) {
this.destination.error(err);
}
};
SingleSubscriber.prototype._complete = function() {
var destination = this.destination;
if (this.index > 0) {
destination.next(this.seenValue ? this.singleValue : undefined);
destination.complete();
} else {
destination.error(new EmptyError_1.EmptyError());
}
};
return SingleSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var skip_1 = __webpack_require__(505);
Observable_1.Observable.prototype.skip = skip_1.skip;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function skip(count) {
return this.lift(new SkipOperator(count));
}
exports.skip = skip;
var SkipOperator = function() {
function SkipOperator(total) {
this.total = total;
}
SkipOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new SkipSubscriber(subscriber, this.total));
};
return SkipOperator;
}();
var SkipSubscriber = function(_super) {
__extends(SkipSubscriber, _super);
function SkipSubscriber(destination, total) {
_super.call(this, destination);
this.total = total;
this.count = 0;
}
SkipSubscriber.prototype._next = function(x) {
if (++this.count > this.total) {
this.destination.next(x);
}
};
return SkipSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var skipUntil_1 = __webpack_require__(507);
Observable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function skipUntil(notifier) {
return this.lift(new SkipUntilOperator(notifier));
}
exports.skipUntil = skipUntil;
var SkipUntilOperator = function() {
function SkipUntilOperator(notifier) {
this.notifier = notifier;
}
SkipUntilOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));
};
return SkipUntilOperator;
}();
var SkipUntilSubscriber = function(_super) {
__extends(SkipUntilSubscriber, _super);
function SkipUntilSubscriber(destination, notifier) {
_super.call(this, destination);
this.hasValue = false;
this.isInnerStopped = false;
this.add(subscribeToResult_1.subscribeToResult(this, notifier));
}
SkipUntilSubscriber.prototype._next = function(value) {
if (this.hasValue) {
_super.prototype._next.call(this, value);
}
};
SkipUntilSubscriber.prototype._complete = function() {
if (this.isInnerStopped) {
_super.prototype._complete.call(this);
} else {
this.unsubscribe();
}
};
SkipUntilSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.hasValue = true;
};
SkipUntilSubscriber.prototype.notifyComplete = function() {
this.isInnerStopped = true;
if (this.isStopped) {
_super.prototype._complete.call(this);
}
};
return SkipUntilSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var skipWhile_1 = __webpack_require__(509);
Observable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function skipWhile(predicate) {
return this.lift(new SkipWhileOperator(predicate));
}
exports.skipWhile = skipWhile;
var SkipWhileOperator = function() {
function SkipWhileOperator(predicate) {
this.predicate = predicate;
}
SkipWhileOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
};
return SkipWhileOperator;
}();
var SkipWhileSubscriber = function(_super) {
__extends(SkipWhileSubscriber, _super);
function SkipWhileSubscriber(destination, predicate) {
_super.call(this, destination);
this.predicate = predicate;
this.skipping = true;
this.index = 0;
}
SkipWhileSubscriber.prototype._next = function(value) {
var destination = this.destination;
if (this.skipping) {
this.tryCallPredicate(value);
}
if (!this.skipping) {
destination.next(value);
}
};
SkipWhileSubscriber.prototype.tryCallPredicate = function(value) {
try {
var result = this.predicate(value, this.index++);
this.skipping = Boolean(result);
} catch (err) {
this.destination.error(err);
}
};
return SkipWhileSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var startWith_1 = __webpack_require__(511);
Observable_1.Observable.prototype.startWith = startWith_1.startWith;
}, function(module, exports, __webpack_require__) {
"use strict";
var ArrayObservable_1 = __webpack_require__(109);
var ScalarObservable_1 = __webpack_require__(110);
var EmptyObservable_1 = __webpack_require__(111);
var concat_1 = __webpack_require__(305);
var isScheduler_1 = __webpack_require__(112);
function startWith() {
var array = [];
for (var _i = 0; _i < arguments.length; _i++) {
array[_i - 0] = arguments[_i];
}
var scheduler = array[array.length - 1];
if (isScheduler_1.isScheduler(scheduler)) {
array.pop();
} else {
scheduler = null;
}
var len = array.length;
if (len === 1) {
return concat_1.concatStatic(new ScalarObservable_1.ScalarObservable(array[0], scheduler), this);
} else if (len > 1) {
return concat_1.concatStatic(new ArrayObservable_1.ArrayObservable(array, scheduler), this);
} else {
return concat_1.concatStatic(new EmptyObservable_1.EmptyObservable(scheduler), this);
}
}
exports.startWith = startWith;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var subscribeOn_1 = __webpack_require__(513);
Observable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;
}, function(module, exports, __webpack_require__) {
"use strict";
var SubscribeOnObservable_1 = __webpack_require__(514);
function subscribeOn(scheduler, delay) {
if (delay === void 0) {
delay = 0;
}
return this.lift(new SubscribeOnOperator(scheduler, delay));
}
exports.subscribeOn = subscribeOn;
var SubscribeOnOperator = function() {
function SubscribeOnOperator(scheduler, delay) {
this.scheduler = scheduler;
this.delay = delay;
}
SubscribeOnOperator.prototype.call = function(subscriber, source) {
return new SubscribeOnObservable_1.SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);
};
return SubscribeOnOperator;
}();
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var asap_1 = __webpack_require__(515);
var isNumeric_1 = __webpack_require__(327);
var SubscribeOnObservable = function(_super) {
__extends(SubscribeOnObservable, _super);
function SubscribeOnObservable(source, delayTime, scheduler) {
if (delayTime === void 0) {
delayTime = 0;
}
if (scheduler === void 0) {
scheduler = asap_1.asap;
}
_super.call(this);
this.source = source;
this.delayTime = delayTime;
this.scheduler = scheduler;
if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {
this.delayTime = 0;
}
if (!scheduler || typeof scheduler.schedule !== "function") {
this.scheduler = asap_1.asap;
}
}
SubscribeOnObservable.create = function(source, delay, scheduler) {
if (delay === void 0) {
delay = 0;
}
if (scheduler === void 0) {
scheduler = asap_1.asap;
}
return new SubscribeOnObservable(source, delay, scheduler);
};
SubscribeOnObservable.dispatch = function(arg) {
var source = arg.source, subscriber = arg.subscriber;
return this.add(source.subscribe(subscriber));
};
SubscribeOnObservable.prototype._subscribe = function(subscriber) {
var delay = this.delayTime;
var source = this.source;
var scheduler = this.scheduler;
return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
source: source,
subscriber: subscriber
});
};
return SubscribeOnObservable;
}(Observable_1.Observable);
exports.SubscribeOnObservable = SubscribeOnObservable;
}, function(module, exports, __webpack_require__) {
"use strict";
var AsapAction_1 = __webpack_require__(516);
var AsapScheduler_1 = __webpack_require__(518);
exports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Immediate_1 = __webpack_require__(517);
var AsyncAction_1 = __webpack_require__(329);
var AsapAction = function(_super) {
__extends(AsapAction, _super);
function AsapAction(scheduler, work) {
_super.call(this, scheduler, work);
this.scheduler = scheduler;
this.work = work;
}
AsapAction.prototype.requestAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
if (delay !== null && delay > 0) {
return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
}
scheduler.actions.push(this);
return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
};
AsapAction.prototype.recycleAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
}
if (scheduler.actions.length === 0) {
Immediate_1.Immediate.clearImmediate(id);
scheduler.scheduled = undefined;
}
return undefined;
};
return AsapAction;
}(AsyncAction_1.AsyncAction);
exports.AsapAction = AsapAction;
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(94);
var ImmediateDefinition = function() {
function ImmediateDefinition(root) {
this.root = root;
if (root.setImmediate && typeof root.setImmediate === "function") {
this.setImmediate = root.setImmediate.bind(root);
this.clearImmediate = root.clearImmediate.bind(root);
} else {
this.nextHandle = 1;
this.tasksByHandle = {};
this.currentlyRunningATask = false;
if (this.canUseProcessNextTick()) {
this.setImmediate = this.createProcessNextTickSetImmediate();
} else if (this.canUsePostMessage()) {
this.setImmediate = this.createPostMessageSetImmediate();
} else if (this.canUseMessageChannel()) {
this.setImmediate = this.createMessageChannelSetImmediate();
} else if (this.canUseReadyStateChange()) {
this.setImmediate = this.createReadyStateChangeSetImmediate();
} else {
this.setImmediate = this.createSetTimeoutSetImmediate();
}
var ci = function clearImmediate(handle) {
delete clearImmediate.instance.tasksByHandle[handle];
};
ci.instance = this;
this.clearImmediate = ci;
}
}
ImmediateDefinition.prototype.identify = function(o) {
return this.root.Object.prototype.toString.call(o);
};
ImmediateDefinition.prototype.canUseProcessNextTick = function() {
return this.identify(this.root.process) === "[object process]";
};
ImmediateDefinition.prototype.canUseMessageChannel = function() {
return Boolean(this.root.MessageChannel);
};
ImmediateDefinition.prototype.canUseReadyStateChange = function() {
var document = this.root.document;
return Boolean(document && "onreadystatechange" in document.createElement("script"));
};
ImmediateDefinition.prototype.canUsePostMessage = function() {
var root = this.root;
if (root.postMessage && !root.importScripts) {
var postMessageIsAsynchronous_1 = true;
var oldOnMessage = root.onmessage;
root.onmessage = function() {
postMessageIsAsynchronous_1 = false;
};
root.postMessage("", "*");
root.onmessage = oldOnMessage;
return postMessageIsAsynchronous_1;
}
return false;
};
ImmediateDefinition.prototype.partiallyApplied = function(handler) {
var args = [];
for (var _i = 1; _i < arguments.length; _i++) {
args[_i - 1] = arguments[_i];
}
var fn = function result() {
var _a = result, handler = _a.handler, args = _a.args;
if (typeof handler === "function") {
handler.apply(undefined, args);
} else {
new Function("" + handler)();
}
};
fn.handler = handler;
fn.args = args;
return fn;
};
ImmediateDefinition.prototype.addFromSetImmediateArguments = function(args) {
this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);
return this.nextHandle++;
};
ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function() {
var fn = function setImmediate() {
var instance = setImmediate.instance;
var handle = instance.addFromSetImmediateArguments(arguments);
instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));
return handle;
};
fn.instance = this;
return fn;
};
ImmediateDefinition.prototype.createPostMessageSetImmediate = function() {
var root = this.root;
var messagePrefix = "setImmediate$" + root.Math.random() + "$";
var onGlobalMessage = function globalMessageHandler(event) {
var instance = globalMessageHandler.instance;
if (event.source === root && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
instance.runIfPresent(+event.data.slice(messagePrefix.length));
}
};
onGlobalMessage.instance = this;
root.addEventListener("message", onGlobalMessage, false);
var fn = function setImmediate() {
var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;
var handle = instance.addFromSetImmediateArguments(arguments);
instance.root.postMessage(messagePrefix + handle, "*");
return handle;
};
fn.instance = this;
fn.messagePrefix = messagePrefix;
return fn;
};
ImmediateDefinition.prototype.runIfPresent = function(handle) {
if (this.currentlyRunningATask) {
this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);
} else {
var task = this.tasksByHandle[handle];
if (task) {
this.currentlyRunningATask = true;
try {
task();
} finally {
this.clearImmediate(handle);
this.currentlyRunningATask = false;
}
}
}
};
ImmediateDefinition.prototype.createMessageChannelSetImmediate = function() {
var _this = this;
var channel = new this.root.MessageChannel();
channel.port1.onmessage = function(event) {
var handle = event.data;
_this.runIfPresent(handle);
};
var fn = function setImmediate() {
var _a = setImmediate, channel = _a.channel, instance = _a.instance;
var handle = instance.addFromSetImmediateArguments(arguments);
channel.port2.postMessage(handle);
return handle;
};
fn.channel = channel;
fn.instance = this;
return fn;
};
ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function() {
var fn = function setImmediate() {
var instance = setImmediate.instance;
var root = instance.root;
var doc = root.document;
var html = doc.documentElement;
var handle = instance.addFromSetImmediateArguments(arguments);
var script = doc.createElement("script");
script.onreadystatechange = function() {
instance.runIfPresent(handle);
script.onreadystatechange = null;
html.removeChild(script);
script = null;
};
html.appendChild(script);
return handle;
};
fn.instance = this;
return fn;
};
ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function() {
var fn = function setImmediate() {
var instance = setImmediate.instance;
var handle = instance.addFromSetImmediateArguments(arguments);
instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);
return handle;
};
fn.instance = this;
return fn;
};
return ImmediateDefinition;
}();
exports.ImmediateDefinition = ImmediateDefinition;
exports.Immediate = new ImmediateDefinition(root_1.root);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncScheduler_1 = __webpack_require__(331);
var AsapScheduler = function(_super) {
__extends(AsapScheduler, _super);
function AsapScheduler() {
_super.apply(this, arguments);
}
AsapScheduler.prototype.flush = function(action) {
this.active = true;
this.scheduled = undefined;
var actions = this.actions;
var error;
var index = -1;
var count = actions.length;
action = action || actions.shift();
do {
if (error = action.execute(action.state, action.delay)) {
break;
}
} while (++index < count && (action = actions.shift()));
this.active = false;
if (error) {
while (++index < count && (action = actions.shift())) {
action.unsubscribe();
}
throw error;
}
};
return AsapScheduler;
}(AsyncScheduler_1.AsyncScheduler);
exports.AsapScheduler = AsapScheduler;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var switch_1 = __webpack_require__(520);
Observable_1.Observable.prototype.switch = switch_1._switch;
Observable_1.Observable.prototype._switch = switch_1._switch;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function _switch() {
return this.lift(new SwitchOperator());
}
exports._switch = _switch;
var SwitchOperator = function() {
function SwitchOperator() {}
SwitchOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new SwitchSubscriber(subscriber));
};
return SwitchOperator;
}();
var SwitchSubscriber = function(_super) {
__extends(SwitchSubscriber, _super);
function SwitchSubscriber(destination) {
_super.call(this, destination);
this.active = 0;
this.hasCompleted = false;
}
SwitchSubscriber.prototype._next = function(value) {
this.unsubscribeInner();
this.active++;
this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, value));
};
SwitchSubscriber.prototype._complete = function() {
this.hasCompleted = true;
if (this.active === 0) {
this.destination.complete();
}
};
SwitchSubscriber.prototype.unsubscribeInner = function() {
this.active = this.active > 0 ? this.active - 1 : 0;
var innerSubscription = this.innerSubscription;
if (innerSubscription) {
innerSubscription.unsubscribe();
this.remove(innerSubscription);
}
};
SwitchSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.destination.next(innerValue);
};
SwitchSubscriber.prototype.notifyError = function(err) {
this.destination.error(err);
};
SwitchSubscriber.prototype.notifyComplete = function() {
this.unsubscribeInner();
if (this.hasCompleted && this.active === 0) {
this.destination.complete();
}
};
return SwitchSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var switchMap_1 = __webpack_require__(522);
Observable_1.Observable.prototype.switchMap = switchMap_1.switchMap;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function switchMap(project, resultSelector) {
return this.lift(new SwitchMapOperator(project, resultSelector));
}
exports.switchMap = switchMap;
var SwitchMapOperator = function() {
function SwitchMapOperator(project, resultSelector) {
this.project = project;
this.resultSelector = resultSelector;
}
SwitchMapOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));
};
return SwitchMapOperator;
}();
var SwitchMapSubscriber = function(_super) {
__extends(SwitchMapSubscriber, _super);
function SwitchMapSubscriber(destination, project, resultSelector) {
_super.call(this, destination);
this.project = project;
this.resultSelector = resultSelector;
this.index = 0;
}
SwitchMapSubscriber.prototype._next = function(value) {
var result;
var index = this.index++;
try {
result = this.project(value, index);
} catch (error) {
this.destination.error(error);
return;
}
this._innerSub(result, value, index);
};
SwitchMapSubscriber.prototype._innerSub = function(result, value, index) {
var innerSubscription = this.innerSubscription;
if (innerSubscription) {
innerSubscription.unsubscribe();
}
this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));
};
SwitchMapSubscriber.prototype._complete = function() {
var innerSubscription = this.innerSubscription;
if (!innerSubscription || innerSubscription.closed) {
_super.prototype._complete.call(this);
}
};
SwitchMapSubscriber.prototype._unsubscribe = function() {
this.innerSubscription = null;
};
SwitchMapSubscriber.prototype.notifyComplete = function(innerSub) {
this.remove(innerSub);
this.innerSubscription = null;
if (this.isStopped) {
_super.prototype._complete.call(this);
}
};
SwitchMapSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
if (this.resultSelector) {
this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);
} else {
this.destination.next(innerValue);
}
};
SwitchMapSubscriber.prototype._tryNotifyNext = function(outerValue, innerValue, outerIndex, innerIndex) {
var result;
try {
result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
} catch (err) {
this.destination.error(err);
return;
}
this.destination.next(result);
};
return SwitchMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var switchMapTo_1 = __webpack_require__(524);
Observable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function switchMapTo(innerObservable, resultSelector) {
return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));
}
exports.switchMapTo = switchMapTo;
var SwitchMapToOperator = function() {
function SwitchMapToOperator(observable, resultSelector) {
this.observable = observable;
this.resultSelector = resultSelector;
}
SwitchMapToOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));
};
return SwitchMapToOperator;
}();
var SwitchMapToSubscriber = function(_super) {
__extends(SwitchMapToSubscriber, _super);
function SwitchMapToSubscriber(destination, inner, resultSelector) {
_super.call(this, destination);
this.inner = inner;
this.resultSelector = resultSelector;
this.index = 0;
}
SwitchMapToSubscriber.prototype._next = function(value) {
var innerSubscription = this.innerSubscription;
if (innerSubscription) {
innerSubscription.unsubscribe();
}
this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));
};
SwitchMapToSubscriber.prototype._complete = function() {
var innerSubscription = this.innerSubscription;
if (!innerSubscription || innerSubscription.closed) {
_super.prototype._complete.call(this);
}
};
SwitchMapToSubscriber.prototype._unsubscribe = function() {
this.innerSubscription = null;
};
SwitchMapToSubscriber.prototype.notifyComplete = function(innerSub) {
this.remove(innerSub);
this.innerSubscription = null;
if (this.isStopped) {
_super.prototype._complete.call(this);
}
};
SwitchMapToSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
if (resultSelector) {
this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);
} else {
destination.next(innerValue);
}
};
SwitchMapToSubscriber.prototype.tryResultSelector = function(outerValue, innerValue, outerIndex, innerIndex) {
var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
var result;
try {
result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
} catch (err) {
destination.error(err);
return;
}
destination.next(result);
};
return SwitchMapToSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var take_1 = __webpack_require__(526);
Observable_1.Observable.prototype.take = take_1.take;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var ArgumentOutOfRangeError_1 = __webpack_require__(424);
var EmptyObservable_1 = __webpack_require__(111);
function take(count) {
if (count === 0) {
return new EmptyObservable_1.EmptyObservable();
} else {
return this.lift(new TakeOperator(count));
}
}
exports.take = take;
var TakeOperator = function() {
function TakeOperator(total) {
this.total = total;
if (this.total < 0) {
throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
}
}
TakeOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new TakeSubscriber(subscriber, this.total));
};
return TakeOperator;
}();
var TakeSubscriber = function(_super) {
__extends(TakeSubscriber, _super);
function TakeSubscriber(destination, total) {
_super.call(this, destination);
this.total = total;
this.count = 0;
}
TakeSubscriber.prototype._next = function(value) {
var total = this.total;
var count = ++this.count;
if (count <= total) {
this.destination.next(value);
if (count === total) {
this.destination.complete();
this.unsubscribe();
}
}
};
return TakeSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var takeLast_1 = __webpack_require__(528);
Observable_1.Observable.prototype.takeLast = takeLast_1.takeLast;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var ArgumentOutOfRangeError_1 = __webpack_require__(424);
var EmptyObservable_1 = __webpack_require__(111);
function takeLast(count) {
if (count === 0) {
return new EmptyObservable_1.EmptyObservable();
} else {
return this.lift(new TakeLastOperator(count));
}
}
exports.takeLast = takeLast;
var TakeLastOperator = function() {
function TakeLastOperator(total) {
this.total = total;
if (this.total < 0) {
throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
}
}
TakeLastOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
};
return TakeLastOperator;
}();
var TakeLastSubscriber = function(_super) {
__extends(TakeLastSubscriber, _super);
function TakeLastSubscriber(destination, total) {
_super.call(this, destination);
this.total = total;
this.ring = new Array();
this.count = 0;
}
TakeLastSubscriber.prototype._next = function(value) {
var ring = this.ring;
var total = this.total;
var count = this.count++;
if (ring.length < total) {
ring.push(value);
} else {
var index = count % total;
ring[index] = value;
}
};
TakeLastSubscriber.prototype._complete = function() {
var destination = this.destination;
var count = this.count;
if (count > 0) {
var total = this.count >= this.total ? this.total : this.count;
var ring = this.ring;
for (var i = 0; i < total; i++) {
var idx = count++ % total;
destination.next(ring[idx]);
}
}
destination.complete();
};
return TakeLastSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var takeUntil_1 = __webpack_require__(530);
Observable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function takeUntil(notifier) {
return this.lift(new TakeUntilOperator(notifier));
}
exports.takeUntil = takeUntil;
var TakeUntilOperator = function() {
function TakeUntilOperator(notifier) {
this.notifier = notifier;
}
TakeUntilOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));
};
return TakeUntilOperator;
}();
var TakeUntilSubscriber = function(_super) {
__extends(TakeUntilSubscriber, _super);
function TakeUntilSubscriber(destination, notifier) {
_super.call(this, destination);
this.notifier = notifier;
this.add(subscribeToResult_1.subscribeToResult(this, notifier));
}
TakeUntilSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.complete();
};
TakeUntilSubscriber.prototype.notifyComplete = function() {};
return TakeUntilSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var takeWhile_1 = __webpack_require__(532);
Observable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function takeWhile(predicate) {
return this.lift(new TakeWhileOperator(predicate));
}
exports.takeWhile = takeWhile;
var TakeWhileOperator = function() {
function TakeWhileOperator(predicate) {
this.predicate = predicate;
}
TakeWhileOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));
};
return TakeWhileOperator;
}();
var TakeWhileSubscriber = function(_super) {
__extends(TakeWhileSubscriber, _super);
function TakeWhileSubscriber(destination, predicate) {
_super.call(this, destination);
this.predicate = predicate;
this.index = 0;
}
TakeWhileSubscriber.prototype._next = function(value) {
var destination = this.destination;
var result;
try {
result = this.predicate(value, this.index++);
} catch (err) {
destination.error(err);
return;
}
this.nextOrComplete(value, result);
};
TakeWhileSubscriber.prototype.nextOrComplete = function(value, predicateResult) {
var destination = this.destination;
if (Boolean(predicateResult)) {
destination.next(value);
} else {
destination.complete();
}
};
return TakeWhileSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var throttle_1 = __webpack_require__(534);
Observable_1.Observable.prototype.throttle = throttle_1.throttle;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function throttle(durationSelector) {
return this.lift(new ThrottleOperator(durationSelector));
}
exports.throttle = throttle;
var ThrottleOperator = function() {
function ThrottleOperator(durationSelector) {
this.durationSelector = durationSelector;
}
ThrottleOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));
};
return ThrottleOperator;
}();
var ThrottleSubscriber = function(_super) {
__extends(ThrottleSubscriber, _super);
function ThrottleSubscriber(destination, durationSelector) {
_super.call(this, destination);
this.destination = destination;
this.durationSelector = durationSelector;
}
ThrottleSubscriber.prototype._next = function(value) {
if (!this.throttled) {
this.tryDurationSelector(value);
}
};
ThrottleSubscriber.prototype.tryDurationSelector = function(value) {
var duration = null;
try {
duration = this.durationSelector(value);
} catch (err) {
this.destination.error(err);
return;
}
this.emitAndThrottle(value, duration);
};
ThrottleSubscriber.prototype.emitAndThrottle = function(value, duration) {
this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));
this.destination.next(value);
};
ThrottleSubscriber.prototype._unsubscribe = function() {
var throttled = this.throttled;
if (throttled) {
this.remove(throttled);
this.throttled = null;
throttled.unsubscribe();
}
};
ThrottleSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this._unsubscribe();
};
ThrottleSubscriber.prototype.notifyComplete = function() {
this._unsubscribe();
};
return ThrottleSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var throttleTime_1 = __webpack_require__(536);
Observable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var async_1 = __webpack_require__(328);
function throttleTime(duration, scheduler) {
if (scheduler === void 0) {
scheduler = async_1.async;
}
return this.lift(new ThrottleTimeOperator(duration, scheduler));
}
exports.throttleTime = throttleTime;
var ThrottleTimeOperator = function() {
function ThrottleTimeOperator(duration, scheduler) {
this.duration = duration;
this.scheduler = scheduler;
}
ThrottleTimeOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));
};
return ThrottleTimeOperator;
}();
var ThrottleTimeSubscriber = function(_super) {
__extends(ThrottleTimeSubscriber, _super);
function ThrottleTimeSubscriber(destination, duration, scheduler) {
_super.call(this, destination);
this.duration = duration;
this.scheduler = scheduler;
}
ThrottleTimeSubscriber.prototype._next = function(value) {
if (!this.throttled) {
this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, {
subscriber: this
}));
this.destination.next(value);
}
};
ThrottleTimeSubscriber.prototype.clearThrottle = function() {
var throttled = this.throttled;
if (throttled) {
throttled.unsubscribe();
this.remove(throttled);
this.throttled = null;
}
};
return ThrottleTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchNext(arg) {
var subscriber = arg.subscriber;
subscriber.clearThrottle();
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var timeInterval_1 = __webpack_require__(538);
Observable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var async_1 = __webpack_require__(328);
function timeInterval(scheduler) {
if (scheduler === void 0) {
scheduler = async_1.async;
}
return this.lift(new TimeIntervalOperator(scheduler));
}
exports.timeInterval = timeInterval;
var TimeInterval = function() {
function TimeInterval(value, interval) {
this.value = value;
this.interval = interval;
}
return TimeInterval;
}();
exports.TimeInterval = TimeInterval;
var TimeIntervalOperator = function() {
function TimeIntervalOperator(scheduler) {
this.scheduler = scheduler;
}
TimeIntervalOperator.prototype.call = function(observer, source) {
return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));
};
return TimeIntervalOperator;
}();
var TimeIntervalSubscriber = function(_super) {
__extends(TimeIntervalSubscriber, _super);
function TimeIntervalSubscriber(destination, scheduler) {
_super.call(this, destination);
this.scheduler = scheduler;
this.lastTime = 0;
this.lastTime = scheduler.now();
}
TimeIntervalSubscriber.prototype._next = function(value) {
var now = this.scheduler.now();
var span = now - this.lastTime;
this.lastTime = now;
this.destination.next(new TimeInterval(value, span));
};
return TimeIntervalSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var timeout_1 = __webpack_require__(540);
Observable_1.Observable.prototype.timeout = timeout_1.timeout;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__(328);
var isDate_1 = __webpack_require__(358);
var Subscriber_1 = __webpack_require__(96);
var TimeoutError_1 = __webpack_require__(541);
function timeout(due, scheduler) {
if (scheduler === void 0) {
scheduler = async_1.async;
}
var absoluteTimeout = isDate_1.isDate(due);
var waitFor = absoluteTimeout ? +due - scheduler.now() : Math.abs(due);
return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError_1.TimeoutError()));
}
exports.timeout = timeout;
var TimeoutOperator = function() {
function TimeoutOperator(waitFor, absoluteTimeout, scheduler, errorInstance) {
this.waitFor = waitFor;
this.absoluteTimeout = absoluteTimeout;
this.scheduler = scheduler;
this.errorInstance = errorInstance;
}
TimeoutOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance));
};
return TimeoutOperator;
}();
var TimeoutSubscriber = function(_super) {
__extends(TimeoutSubscriber, _super);
function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {
_super.call(this, destination);
this.absoluteTimeout = absoluteTimeout;
this.waitFor = waitFor;
this.scheduler = scheduler;
this.errorInstance = errorInstance;
this.action = null;
this.scheduleTimeout();
}
TimeoutSubscriber.dispatchTimeout = function(subscriber) {
subscriber.error(subscriber.errorInstance);
};
TimeoutSubscriber.prototype.scheduleTimeout = function() {
var action = this.action;
if (action) {
this.action = action.schedule(this, this.waitFor);
} else {
this.add(this.action = this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, this));
}
};
TimeoutSubscriber.prototype._next = function(value) {
if (!this.absoluteTimeout) {
this.scheduleTimeout();
}
_super.prototype._next.call(this, value);
};
TimeoutSubscriber.prototype._unsubscribe = function() {
this.action = null;
this.scheduler = null;
this.errorInstance = null;
};
return TimeoutSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var TimeoutError = function(_super) {
__extends(TimeoutError, _super);
function TimeoutError() {
var err = _super.call(this, "Timeout has occurred");
this.name = err.name = "TimeoutError";
this.stack = err.stack;
this.message = err.message;
}
return TimeoutError;
}(Error);
exports.TimeoutError = TimeoutError;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var timeoutWith_1 = __webpack_require__(543);
Observable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__(328);
var isDate_1 = __webpack_require__(358);
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function timeoutWith(due, withObservable, scheduler) {
if (scheduler === void 0) {
scheduler = async_1.async;
}
var absoluteTimeout = isDate_1.isDate(due);
var waitFor = absoluteTimeout ? +due - scheduler.now() : Math.abs(due);
return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
}
exports.timeoutWith = timeoutWith;
var TimeoutWithOperator = function() {
function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
this.waitFor = waitFor;
this.absoluteTimeout = absoluteTimeout;
this.withObservable = withObservable;
this.scheduler = scheduler;
}
TimeoutWithOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
};
return TimeoutWithOperator;
}();
var TimeoutWithSubscriber = function(_super) {
__extends(TimeoutWithSubscriber, _super);
function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
_super.call(this, destination);
this.absoluteTimeout = absoluteTimeout;
this.waitFor = waitFor;
this.withObservable = withObservable;
this.scheduler = scheduler;
this.action = null;
this.scheduleTimeout();
}
TimeoutWithSubscriber.dispatchTimeout = function(subscriber) {
var withObservable = subscriber.withObservable;
subscriber._unsubscribeAndRecycle();
subscriber.add(subscribeToResult_1.subscribeToResult(subscriber, withObservable));
};
TimeoutWithSubscriber.prototype.scheduleTimeout = function() {
var action = this.action;
if (action) {
this.action = action.schedule(this, this.waitFor);
} else {
this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
}
};
TimeoutWithSubscriber.prototype._next = function(value) {
if (!this.absoluteTimeout) {
this.scheduleTimeout();
}
_super.prototype._next.call(this, value);
};
TimeoutWithSubscriber.prototype._unsubscribe = function() {
this.action = null;
this.scheduler = null;
this.withObservable = null;
};
return TimeoutWithSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var timestamp_1 = __webpack_require__(545);
Observable_1.Observable.prototype.timestamp = timestamp_1.timestamp;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var async_1 = __webpack_require__(328);
function timestamp(scheduler) {
if (scheduler === void 0) {
scheduler = async_1.async;
}
return this.lift(new TimestampOperator(scheduler));
}
exports.timestamp = timestamp;
var Timestamp = function() {
function Timestamp(value, timestamp) {
this.value = value;
this.timestamp = timestamp;
}
return Timestamp;
}();
exports.Timestamp = Timestamp;
var TimestampOperator = function() {
function TimestampOperator(scheduler) {
this.scheduler = scheduler;
}
TimestampOperator.prototype.call = function(observer, source) {
return source.subscribe(new TimestampSubscriber(observer, this.scheduler));
};
return TimestampOperator;
}();
var TimestampSubscriber = function(_super) {
__extends(TimestampSubscriber, _super);
function TimestampSubscriber(destination, scheduler) {
_super.call(this, destination);
this.scheduler = scheduler;
}
TimestampSubscriber.prototype._next = function(value) {
var now = this.scheduler.now();
this.destination.next(new Timestamp(value, now));
};
return TimestampSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var toArray_1 = __webpack_require__(547);
Observable_1.Observable.prototype.toArray = toArray_1.toArray;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
function toArray() {
return this.lift(new ToArrayOperator());
}
exports.toArray = toArray;
var ToArrayOperator = function() {
function ToArrayOperator() {}
ToArrayOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new ToArraySubscriber(subscriber));
};
return ToArrayOperator;
}();
var ToArraySubscriber = function(_super) {
__extends(ToArraySubscriber, _super);
function ToArraySubscriber(destination) {
_super.call(this, destination);
this.array = [];
}
ToArraySubscriber.prototype._next = function(x) {
this.array.push(x);
};
ToArraySubscriber.prototype._complete = function() {
this.destination.next(this.array);
this.destination.complete();
};
return ToArraySubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var toPromise_1 = __webpack_require__(549);
Observable_1.Observable.prototype.toPromise = toPromise_1.toPromise;
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(94);
function toPromise(PromiseCtor) {
var _this = this;
if (!PromiseCtor) {
if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
PromiseCtor = root_1.root.Rx.config.Promise;
} else if (root_1.root.Promise) {
PromiseCtor = root_1.root.Promise;
}
}
if (!PromiseCtor) {
throw new Error("no Promise impl found");
}
return new PromiseCtor(function(resolve, reject) {
var value;
_this.subscribe(function(x) {
return value = x;
}, function(err) {
return reject(err);
}, function() {
return resolve(value);
});
});
}
exports.toPromise = toPromise;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var window_1 = __webpack_require__(551);
Observable_1.Observable.prototype.window = window_1.window;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(123);
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function window(windowBoundaries) {
return this.lift(new WindowOperator(windowBoundaries));
}
exports.window = window;
var WindowOperator = function() {
function WindowOperator(windowBoundaries) {
this.windowBoundaries = windowBoundaries;
}
WindowOperator.prototype.call = function(subscriber, source) {
var windowSubscriber = new WindowSubscriber(subscriber);
var sourceSubscription = source.subscribe(windowSubscriber);
if (!sourceSubscription.closed) {
windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));
}
return sourceSubscription;
};
return WindowOperator;
}();
var WindowSubscriber = function(_super) {
__extends(WindowSubscriber, _super);
function WindowSubscriber(destination) {
_super.call(this, destination);
this.window = new Subject_1.Subject();
destination.next(this.window);
}
WindowSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.openWindow();
};
WindowSubscriber.prototype.notifyError = function(error, innerSub) {
this._error(error);
};
WindowSubscriber.prototype.notifyComplete = function(innerSub) {
this._complete();
};
WindowSubscriber.prototype._next = function(value) {
this.window.next(value);
};
WindowSubscriber.prototype._error = function(err) {
this.window.error(err);
this.destination.error(err);
};
WindowSubscriber.prototype._complete = function() {
this.window.complete();
this.destination.complete();
};
WindowSubscriber.prototype._unsubscribe = function() {
this.window = null;
};
WindowSubscriber.prototype.openWindow = function() {
var prevWindow = this.window;
if (prevWindow) {
prevWindow.complete();
}
var destination = this.destination;
var newWindow = this.window = new Subject_1.Subject();
destination.next(newWindow);
};
return WindowSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var windowCount_1 = __webpack_require__(553);
Observable_1.Observable.prototype.windowCount = windowCount_1.windowCount;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(96);
var Subject_1 = __webpack_require__(123);
function windowCount(windowSize, startWindowEvery) {
if (startWindowEvery === void 0) {
startWindowEvery = 0;
}
return this.lift(new WindowCountOperator(windowSize, startWindowEvery));
}
exports.windowCount = windowCount;
var WindowCountOperator = function() {
function WindowCountOperator(windowSize, startWindowEvery) {
this.windowSize = windowSize;
this.startWindowEvery = startWindowEvery;
}
WindowCountOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
};
return WindowCountOperator;
}();
var WindowCountSubscriber = function(_super) {
__extends(WindowCountSubscriber, _super);
function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
_super.call(this, destination);
this.destination = destination;
this.windowSize = windowSize;
this.startWindowEvery = startWindowEvery;
this.windows = [ new Subject_1.Subject() ];
this.count = 0;
destination.next(this.windows[0]);
}
WindowCountSubscriber.prototype._next = function(value) {
var startWindowEvery = this.startWindowEvery > 0 ? this.startWindowEvery : this.windowSize;
var destination = this.destination;
var windowSize = this.windowSize;
var windows = this.windows;
var len = windows.length;
for (var i = 0; i < len && !this.closed; i++) {
windows[i].next(value);
}
var c = this.count - windowSize + 1;
if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
windows.shift().complete();
}
if (++this.count % startWindowEvery === 0 && !this.closed) {
var window_1 = new Subject_1.Subject();
windows.push(window_1);
destination.next(window_1);
}
};
WindowCountSubscriber.prototype._error = function(err) {
var windows = this.windows;
if (windows) {
while (windows.length > 0 && !this.closed) {
windows.shift().error(err);
}
}
this.destination.error(err);
};
WindowCountSubscriber.prototype._complete = function() {
var windows = this.windows;
if (windows) {
while (windows.length > 0 && !this.closed) {
windows.shift().complete();
}
}
this.destination.complete();
};
WindowCountSubscriber.prototype._unsubscribe = function() {
this.count = 0;
this.windows = null;
};
return WindowCountSubscriber;
}(Subscriber_1.Subscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var windowTime_1 = __webpack_require__(555);
Observable_1.Observable.prototype.windowTime = windowTime_1.windowTime;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(123);
var async_1 = __webpack_require__(328);
var Subscriber_1 = __webpack_require__(96);
var isNumeric_1 = __webpack_require__(327);
var isScheduler_1 = __webpack_require__(112);
function windowTime(windowTimeSpan) {
var scheduler = async_1.async;
var windowCreationInterval = null;
var maxWindowSize = Number.POSITIVE_INFINITY;
if (isScheduler_1.isScheduler(arguments[3])) {
scheduler = arguments[3];
}
if (isScheduler_1.isScheduler(arguments[2])) {
scheduler = arguments[2];
} else if (isNumeric_1.isNumeric(arguments[2])) {
maxWindowSize = arguments[2];
}
if (isScheduler_1.isScheduler(arguments[1])) {
scheduler = arguments[1];
} else if (isNumeric_1.isNumeric(arguments[1])) {
windowCreationInterval = arguments[1];
}
return this.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));
}
exports.windowTime = windowTime;
var WindowTimeOperator = function() {
function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
this.windowTimeSpan = windowTimeSpan;
this.windowCreationInterval = windowCreationInterval;
this.maxWindowSize = maxWindowSize;
this.scheduler = scheduler;
}
WindowTimeOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
};
return WindowTimeOperator;
}();
var CountedSubject = function(_super) {
__extends(CountedSubject, _super);
function CountedSubject() {
_super.apply(this, arguments);
this._numberOfNextedValues = 0;
}
CountedSubject.prototype.next = function(value) {
this._numberOfNextedValues++;
_super.prototype.next.call(this, value);
};
Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
get: function() {
return this._numberOfNextedValues;
},
enumerable: true,
configurable: true
});
return CountedSubject;
}(Subject_1.Subject);
var WindowTimeSubscriber = function(_super) {
__extends(WindowTimeSubscriber, _super);
function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
_super.call(this, destination);
this.destination = destination;
this.windowTimeSpan = windowTimeSpan;
this.windowCreationInterval = windowCreationInterval;
this.maxWindowSize = maxWindowSize;
this.scheduler = scheduler;
this.windows = [];
var window = this.openWindow();
if (windowCreationInterval !== null && windowCreationInterval >= 0) {
var closeState = {
subscriber: this,
window: window,
context: null
};
var creationState = {
windowTimeSpan: windowTimeSpan,
windowCreationInterval: windowCreationInterval,
subscriber: this,
scheduler: scheduler
};
this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
} else {
var timeSpanOnlyState = {
subscriber: this,
window: window,
windowTimeSpan: windowTimeSpan
};
this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
}
}
WindowTimeSubscriber.prototype._next = function(value) {
var windows = this.windows;
var len = windows.length;
for (var i = 0; i < len; i++) {
var window_1 = windows[i];
if (!window_1.closed) {
window_1.next(value);
if (window_1.numberOfNextedValues >= this.maxWindowSize) {
this.closeWindow(window_1);
}
}
}
};
WindowTimeSubscriber.prototype._error = function(err) {
var windows = this.windows;
while (windows.length > 0) {
windows.shift().error(err);
}
this.destination.error(err);
};
WindowTimeSubscriber.prototype._complete = function() {
var windows = this.windows;
while (windows.length > 0) {
var window_2 = windows.shift();
if (!window_2.closed) {
window_2.complete();
}
}
this.destination.complete();
};
WindowTimeSubscriber.prototype.openWindow = function() {
var window = new CountedSubject();
this.windows.push(window);
var destination = this.destination;
destination.next(window);
return window;
};
WindowTimeSubscriber.prototype.closeWindow = function(window) {
window.complete();
var windows = this.windows;
windows.splice(windows.indexOf(window), 1);
};
return WindowTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchWindowTimeSpanOnly(state) {
var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
if (window) {
subscriber.closeWindow(window);
}
state.window = subscriber.openWindow();
this.schedule(state, windowTimeSpan);
}
function dispatchWindowCreation(state) {
var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
var window = subscriber.openWindow();
var action = this;
var context = {
action: action,
subscription: null
};
var timeSpanState = {
subscriber: subscriber,
window: window,
context: context
};
context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
action.add(context.subscription);
action.schedule(state, windowCreationInterval);
}
function dispatchWindowClose(state) {
var subscriber = state.subscriber, window = state.window, context = state.context;
if (context && context.action && context.subscription) {
context.action.remove(context.subscription);
}
subscriber.closeWindow(window);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var windowToggle_1 = __webpack_require__(557);
Observable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(123);
var Subscription_1 = __webpack_require__(98);
var tryCatch_1 = __webpack_require__(101);
var errorObject_1 = __webpack_require__(102);
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function windowToggle(openings, closingSelector) {
return this.lift(new WindowToggleOperator(openings, closingSelector));
}
exports.windowToggle = windowToggle;
var WindowToggleOperator = function() {
function WindowToggleOperator(openings, closingSelector) {
this.openings = openings;
this.closingSelector = closingSelector;
}
WindowToggleOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
};
return WindowToggleOperator;
}();
var WindowToggleSubscriber = function(_super) {
__extends(WindowToggleSubscriber, _super);
function WindowToggleSubscriber(destination, openings, closingSelector) {
_super.call(this, destination);
this.openings = openings;
this.closingSelector = closingSelector;
this.contexts = [];
this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));
}
WindowToggleSubscriber.prototype._next = function(value) {
var contexts = this.contexts;
if (contexts) {
var len = contexts.length;
for (var i = 0; i < len; i++) {
contexts[i].window.next(value);
}
}
};
WindowToggleSubscriber.prototype._error = function(err) {
var contexts = this.contexts;
this.contexts = null;
if (contexts) {
var len = contexts.length;
var index = -1;
while (++index < len) {
var context = contexts[index];
context.window.error(err);
context.subscription.unsubscribe();
}
}
_super.prototype._error.call(this, err);
};
WindowToggleSubscriber.prototype._complete = function() {
var contexts = this.contexts;
this.contexts = null;
if (contexts) {
var len = contexts.length;
var index = -1;
while (++index < len) {
var context = contexts[index];
context.window.complete();
context.subscription.unsubscribe();
}
}
_super.prototype._complete.call(this);
};
WindowToggleSubscriber.prototype._unsubscribe = function() {
var contexts = this.contexts;
this.contexts = null;
if (contexts) {
var len = contexts.length;
var index = -1;
while (++index < len) {
var context = contexts[index];
context.window.unsubscribe();
context.subscription.unsubscribe();
}
}
};
WindowToggleSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
if (outerValue === this.openings) {
var closingSelector = this.closingSelector;
var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);
if (closingNotifier === errorObject_1.errorObject) {
return this.error(errorObject_1.errorObject.e);
} else {
var window_1 = new Subject_1.Subject();
var subscription = new Subscription_1.Subscription();
var context = {
window: window_1,
subscription: subscription
};
this.contexts.push(context);
var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
if (innerSubscription.closed) {
this.closeWindow(this.contexts.length - 1);
} else {
innerSubscription.context = context;
subscription.add(innerSubscription);
}
this.destination.next(window_1);
}
} else {
this.closeWindow(this.contexts.indexOf(outerValue));
}
};
WindowToggleSubscriber.prototype.notifyError = function(err) {
this.error(err);
};
WindowToggleSubscriber.prototype.notifyComplete = function(inner) {
if (inner !== this.openSubscription) {
this.closeWindow(this.contexts.indexOf(inner.context));
}
};
WindowToggleSubscriber.prototype.closeWindow = function(index) {
if (index === -1) {
return;
}
var contexts = this.contexts;
var context = contexts[index];
var window = context.window, subscription = context.subscription;
contexts.splice(index, 1);
window.complete();
subscription.unsubscribe();
};
return WindowToggleSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var windowWhen_1 = __webpack_require__(559);
Observable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(123);
var tryCatch_1 = __webpack_require__(101);
var errorObject_1 = __webpack_require__(102);
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function windowWhen(closingSelector) {
return this.lift(new WindowOperator(closingSelector));
}
exports.windowWhen = windowWhen;
var WindowOperator = function() {
function WindowOperator(closingSelector) {
this.closingSelector = closingSelector;
}
WindowOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));
};
return WindowOperator;
}();
var WindowSubscriber = function(_super) {
__extends(WindowSubscriber, _super);
function WindowSubscriber(destination, closingSelector) {
_super.call(this, destination);
this.destination = destination;
this.closingSelector = closingSelector;
this.openWindow();
}
WindowSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.openWindow(innerSub);
};
WindowSubscriber.prototype.notifyError = function(error, innerSub) {
this._error(error);
};
WindowSubscriber.prototype.notifyComplete = function(innerSub) {
this.openWindow(innerSub);
};
WindowSubscriber.prototype._next = function(value) {
this.window.next(value);
};
WindowSubscriber.prototype._error = function(err) {
this.window.error(err);
this.destination.error(err);
this.unsubscribeClosingNotification();
};
WindowSubscriber.prototype._complete = function() {
this.window.complete();
this.destination.complete();
this.unsubscribeClosingNotification();
};
WindowSubscriber.prototype.unsubscribeClosingNotification = function() {
if (this.closingNotification) {
this.closingNotification.unsubscribe();
}
};
WindowSubscriber.prototype.openWindow = function(innerSub) {
if (innerSub === void 0) {
innerSub = null;
}
if (innerSub) {
this.remove(innerSub);
innerSub.unsubscribe();
}
var prevWindow = this.window;
if (prevWindow) {
prevWindow.complete();
}
var window = this.window = new Subject_1.Subject();
this.destination.next(window);
var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
if (closingNotifier === errorObject_1.errorObject) {
var err = errorObject_1.errorObject.e;
this.destination.error(err);
this.window.error(err);
} else {
this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));
}
};
return WindowSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var withLatestFrom_1 = __webpack_require__(561);
Observable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(114);
var subscribeToResult_1 = __webpack_require__(115);
function withLatestFrom() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
var project;
if (typeof args[args.length - 1] === "function") {
project = args.pop();
}
var observables = args;
return this.lift(new WithLatestFromOperator(observables, project));
}
exports.withLatestFrom = withLatestFrom;
var WithLatestFromOperator = function() {
function WithLatestFromOperator(observables, project) {
this.observables = observables;
this.project = project;
}
WithLatestFromOperator.prototype.call = function(subscriber, source) {
return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
};
return WithLatestFromOperator;
}();
var WithLatestFromSubscriber = function(_super) {
__extends(WithLatestFromSubscriber, _super);
function WithLatestFromSubscriber(destination, observables, project) {
_super.call(this, destination);
this.observables = observables;
this.project = project;
this.toRespond = [];
var len = observables.length;
this.values = new Array(len);
for (var i = 0; i < len; i++) {
this.toRespond.push(i);
}
for (var i = 0; i < len; i++) {
var observable = observables[i];
this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
}
}
WithLatestFromSubscriber.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
this.values[outerIndex] = innerValue;
var toRespond = this.toRespond;
if (toRespond.length > 0) {
var found = toRespond.indexOf(outerIndex);
if (found !== -1) {
toRespond.splice(found, 1);
}
}
};
WithLatestFromSubscriber.prototype.notifyComplete = function() {};
WithLatestFromSubscriber.prototype._next = function(value) {
if (this.toRespond.length === 0) {
var args = [ value ].concat(this.values);
if (this.project) {
this._tryProject(args);
} else {
this.destination.next(args);
}
}
};
WithLatestFromSubscriber.prototype._tryProject = function(args) {
var result;
try {
result = this.project.apply(this, args);
} catch (err) {
this.destination.error(err);
return;
}
this.destination.next(result);
};
return WithLatestFromSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var zip_1 = __webpack_require__(361);
Observable_1.Observable.prototype.zip = zip_1.zipProto;
}, function(module, exports, __webpack_require__) {
"use strict";
var Observable_1 = __webpack_require__(93);
var zipAll_1 = __webpack_require__(564);
Observable_1.Observable.prototype.zipAll = zipAll_1.zipAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var zip_1 = __webpack_require__(361);
function zipAll(project) {
return this.lift(new zip_1.ZipOperator(project));
}
exports.zipAll = zipAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var Notification_1 = __webpack_require__(175);
var ColdObservable_1 = __webpack_require__(566);
var HotObservable_1 = __webpack_require__(570);
var SubscriptionLog_1 = __webpack_require__(568);
var VirtualTimeScheduler_1 = __webpack_require__(571);
var defaultMaxFrame = 750;
var TestScheduler = function(_super) {
__extends(TestScheduler, _super);
function TestScheduler(assertDeepEqual) {
_super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame);
this.assertDeepEqual = assertDeepEqual;
this.hotObservables = [];
this.coldObservables = [];
this.flushTests = [];
}
TestScheduler.prototype.createTime = function(marbles) {
var indexOf = marbles.indexOf("|");
if (indexOf === -1) {
throw new Error('marble diagram for time should have a completion marker "|"');
}
return indexOf * TestScheduler.frameTimeFactor;
};
TestScheduler.prototype.createColdObservable = function(marbles, values, error) {
if (marbles.indexOf("^") !== -1) {
throw new Error('cold observable cannot have subscription offset "^"');
}
if (marbles.indexOf("!") !== -1) {
throw new Error('cold observable cannot have unsubscription marker "!"');
}
var messages = TestScheduler.parseMarbles(marbles, values, error);
var cold = new ColdObservable_1.ColdObservable(messages, this);
this.coldObservables.push(cold);
return cold;
};
TestScheduler.prototype.createHotObservable = function(marbles, values, error) {
if (marbles.indexOf("!") !== -1) {
throw new Error('hot observable cannot have unsubscription marker "!"');
}
var messages = TestScheduler.parseMarbles(marbles, values, error);
var subject = new HotObservable_1.HotObservable(messages, this);
this.hotObservables.push(subject);
return subject;
};
TestScheduler.prototype.materializeInnerObservable = function(observable, outerFrame) {
var _this = this;
var messages = [];
observable.subscribe(function(value) {
messages.push({
frame: _this.frame - outerFrame,
notification: Notification_1.Notification.createNext(value)
});
}, function(err) {
messages.push({
frame: _this.frame - outerFrame,
notification: Notification_1.Notification.createError(err)
});
}, function() {
messages.push({
frame: _this.frame - outerFrame,
notification: Notification_1.Notification.createComplete()
});
});
return messages;
};
TestScheduler.prototype.expectObservable = function(observable, unsubscriptionMarbles) {
var _this = this;
if (unsubscriptionMarbles === void 0) {
unsubscriptionMarbles = null;
}
var actual = [];
var flushTest = {
actual: actual,
ready: false
};
var unsubscriptionFrame = TestScheduler.parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;
var subscription;
this.schedule(function() {
subscription = observable.subscribe(function(x) {
var value = x;
if (x instanceof Observable_1.Observable) {
value = _this.materializeInnerObservable(value, _this.frame);
}
actual.push({
frame: _this.frame,
notification: Notification_1.Notification.createNext(value)
});
}, function(err) {
actual.push({
frame: _this.frame,
notification: Notification_1.Notification.createError(err)
});
}, function() {
actual.push({
frame: _this.frame,
notification: Notification_1.Notification.createComplete()
});
});
}, 0);
if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {
this.schedule(function() {
return subscription.unsubscribe();
}, unsubscriptionFrame);
}
this.flushTests.push(flushTest);
return {
toBe: function(marbles, values, errorValue) {
flushTest.ready = true;
flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);
}
};
};
TestScheduler.prototype.expectSubscriptions = function(actualSubscriptionLogs) {
var flushTest = {
actual: actualSubscriptionLogs,
ready: false
};
this.flushTests.push(flushTest);
return {
toBe: function(marbles) {
var marblesArray = typeof marbles === "string" ? [ marbles ] : marbles;
flushTest.ready = true;
flushTest.expected = marblesArray.map(function(marbles) {
return TestScheduler.parseMarblesAsSubscriptions(marbles);
});
}
};
};
TestScheduler.prototype.flush = function() {
var hotObservables = this.hotObservables;
while (hotObservables.length > 0) {
hotObservables.shift().setup();
}
_super.prototype.flush.call(this);
var readyFlushTests = this.flushTests.filter(function(test) {
return test.ready;
});
while (readyFlushTests.length > 0) {
var test = readyFlushTests.shift();
this.assertDeepEqual(test.actual, test.expected);
}
};
TestScheduler.parseMarblesAsSubscriptions = function(marbles) {
if (typeof marbles !== "string") {
return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);
}
var len = marbles.length;
var groupStart = -1;
var subscriptionFrame = Number.POSITIVE_INFINITY;
var unsubscriptionFrame = Number.POSITIVE_INFINITY;
for (var i = 0; i < len; i++) {
var frame = i * this.frameTimeFactor;
var c = marbles[i];
switch (c) {
case "-":
case " ":
break;

case "(":
groupStart = frame;
break;

case ")":
groupStart = -1;
break;

case "^":
if (subscriptionFrame !== Number.POSITIVE_INFINITY) {
throw new Error("found a second subscription point '^' in a " + "subscription marble diagram. There can only be one.");
}
subscriptionFrame = groupStart > -1 ? groupStart : frame;
break;

case "!":
if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {
throw new Error("found a second subscription point '^' in a " + "subscription marble diagram. There can only be one.");
}
unsubscriptionFrame = groupStart > -1 ? groupStart : frame;
break;

default:
throw new Error("there can only be '^' and '!' markers in a " + "subscription marble diagram. Found instead '" + c + "'.");
}
}
if (unsubscriptionFrame < 0) {
return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);
} else {
return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);
}
};
TestScheduler.parseMarbles = function(marbles, values, errorValue, materializeInnerObservables) {
if (materializeInnerObservables === void 0) {
materializeInnerObservables = false;
}
if (marbles.indexOf("!") !== -1) {
throw new Error("conventional marble diagrams cannot have the " + 'unsubscription marker "!"');
}
var len = marbles.length;
var testMessages = [];
var subIndex = marbles.indexOf("^");
var frameOffset = subIndex === -1 ? 0 : subIndex * -this.frameTimeFactor;
var getValue = typeof values !== "object" ? function(x) {
return x;
} : function(x) {
if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {
return values[x].messages;
}
return values[x];
};
var groupStart = -1;
for (var i = 0; i < len; i++) {
var frame = i * this.frameTimeFactor + frameOffset;
var notification = void 0;
var c = marbles[i];
switch (c) {
case "-":
case " ":
break;

case "(":
groupStart = frame;
break;

case ")":
groupStart = -1;
break;

case "|":
notification = Notification_1.Notification.createComplete();
break;

case "^":
break;

case "#":
notification = Notification_1.Notification.createError(errorValue || "error");
break;

default:
notification = Notification_1.Notification.createNext(getValue(c));
break;
}
if (notification) {
testMessages.push({
frame: groupStart > -1 ? groupStart : frame,
notification: notification
});
}
}
return testMessages;
};
return TestScheduler;
}(VirtualTimeScheduler_1.VirtualTimeScheduler);
exports.TestScheduler = TestScheduler;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(93);
var Subscription_1 = __webpack_require__(98);
var SubscriptionLoggable_1 = __webpack_require__(567);
var applyMixins_1 = __webpack_require__(569);
var ColdObservable = function(_super) {
__extends(ColdObservable, _super);
function ColdObservable(messages, scheduler) {
_super.call(this, function(subscriber) {
var observable = this;
var index = observable.logSubscribedFrame();
subscriber.add(new Subscription_1.Subscription(function() {
observable.logUnsubscribedFrame(index);
}));
observable.scheduleMessages(subscriber);
return subscriber;
});
this.messages = messages;
this.subscriptions = [];
this.scheduler = scheduler;
}
ColdObservable.prototype.scheduleMessages = function(subscriber) {
var messagesLength = this.messages.length;
for (var i = 0; i < messagesLength; i++) {
var message = this.messages[i];
subscriber.add(this.scheduler.schedule(function(_a) {
var message = _a.message, subscriber = _a.subscriber;
message.notification.observe(subscriber);
}, message.frame, {
message: message,
subscriber: subscriber
}));
}
};
return ColdObservable;
}(Observable_1.Observable);
exports.ColdObservable = ColdObservable;
applyMixins_1.applyMixins(ColdObservable, [ SubscriptionLoggable_1.SubscriptionLoggable ]);
}, function(module, exports, __webpack_require__) {
"use strict";
var SubscriptionLog_1 = __webpack_require__(568);
var SubscriptionLoggable = function() {
function SubscriptionLoggable() {
this.subscriptions = [];
}
SubscriptionLoggable.prototype.logSubscribedFrame = function() {
this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));
return this.subscriptions.length - 1;
};
SubscriptionLoggable.prototype.logUnsubscribedFrame = function(index) {
var subscriptionLogs = this.subscriptions;
var oldSubscriptionLog = subscriptionLogs[index];
subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());
};
return SubscriptionLoggable;
}();
exports.SubscriptionLoggable = SubscriptionLoggable;
}, function(module, exports) {
"use strict";
var SubscriptionLog = function() {
function SubscriptionLog(subscribedFrame, unsubscribedFrame) {
if (unsubscribedFrame === void 0) {
unsubscribedFrame = Number.POSITIVE_INFINITY;
}
this.subscribedFrame = subscribedFrame;
this.unsubscribedFrame = unsubscribedFrame;
}
return SubscriptionLog;
}();
exports.SubscriptionLog = SubscriptionLog;
}, function(module, exports) {
"use strict";
function applyMixins(derivedCtor, baseCtors) {
for (var i = 0, len = baseCtors.length; i < len; i++) {
var baseCtor = baseCtors[i];
var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);
for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {
var name_1 = propertyKeys[j];
derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];
}
}
}
exports.applyMixins = applyMixins;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(123);
var Subscription_1 = __webpack_require__(98);
var SubscriptionLoggable_1 = __webpack_require__(567);
var applyMixins_1 = __webpack_require__(569);
var HotObservable = function(_super) {
__extends(HotObservable, _super);
function HotObservable(messages, scheduler) {
_super.call(this);
this.messages = messages;
this.subscriptions = [];
this.scheduler = scheduler;
}
HotObservable.prototype._subscribe = function(subscriber) {
var subject = this;
var index = subject.logSubscribedFrame();
subscriber.add(new Subscription_1.Subscription(function() {
subject.logUnsubscribedFrame(index);
}));
return _super.prototype._subscribe.call(this, subscriber);
};
HotObservable.prototype.setup = function() {
var subject = this;
var messagesLength = subject.messages.length;
for (var i = 0; i < messagesLength; i++) {
(function() {
var message = subject.messages[i];
subject.scheduler.schedule(function() {
message.notification.observe(subject);
}, message.frame);
})();
}
};
return HotObservable;
}(Subject_1.Subject);
exports.HotObservable = HotObservable;
applyMixins_1.applyMixins(HotObservable, [ SubscriptionLoggable_1.SubscriptionLoggable ]);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncAction_1 = __webpack_require__(329);
var AsyncScheduler_1 = __webpack_require__(331);
var VirtualTimeScheduler = function(_super) {
__extends(VirtualTimeScheduler, _super);
function VirtualTimeScheduler(SchedulerAction, maxFrames) {
var _this = this;
if (SchedulerAction === void 0) {
SchedulerAction = VirtualAction;
}
if (maxFrames === void 0) {
maxFrames = Number.POSITIVE_INFINITY;
}
_super.call(this, SchedulerAction, function() {
return _this.frame;
});
this.maxFrames = maxFrames;
this.frame = 0;
this.index = -1;
}
VirtualTimeScheduler.prototype.flush = function() {
var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
var error, action;
while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
if (error = action.execute(action.state, action.delay)) {
break;
}
}
if (error) {
while (action = actions.shift()) {
action.unsubscribe();
}
throw error;
}
};
VirtualTimeScheduler.frameTimeFactor = 10;
return VirtualTimeScheduler;
}(AsyncScheduler_1.AsyncScheduler);
exports.VirtualTimeScheduler = VirtualTimeScheduler;
var VirtualAction = function(_super) {
__extends(VirtualAction, _super);
function VirtualAction(scheduler, work, index) {
if (index === void 0) {
index = scheduler.index += 1;
}
_super.call(this, scheduler, work);
this.scheduler = scheduler;
this.work = work;
this.index = index;
this.active = true;
this.index = scheduler.index = index;
}
VirtualAction.prototype.schedule = function(state, delay) {
if (delay === void 0) {
delay = 0;
}
if (!this.id) {
return _super.prototype.schedule.call(this, state, delay);
}
this.active = false;
var action = new VirtualAction(this.scheduler, this.work);
this.add(action);
return action.schedule(state, delay);
};
VirtualAction.prototype.requestAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
this.delay = scheduler.frame + delay;
var actions = scheduler.actions;
actions.push(this);
actions.sort(VirtualAction.sortActions);
return true;
};
VirtualAction.prototype.recycleAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
return undefined;
};
VirtualAction.prototype._execute = function(state, delay) {
if (this.active === true) {
return _super.prototype._execute.call(this, state, delay);
}
};
VirtualAction.sortActions = function(a, b) {
if (a.delay === b.delay) {
if (a.index === b.index) {
return 0;
} else if (a.index > b.index) {
return 1;
} else {
return -1;
}
} else if (a.delay > b.delay) {
return 1;
} else {
return -1;
}
};
return VirtualAction;
}(AsyncAction_1.AsyncAction);
exports.VirtualAction = VirtualAction;
}, function(module, exports, __webpack_require__) {
"use strict";
var AnimationFrameAction_1 = __webpack_require__(573);
var AnimationFrameScheduler_1 = __webpack_require__(575);
exports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncAction_1 = __webpack_require__(329);
var AnimationFrame_1 = __webpack_require__(574);
var AnimationFrameAction = function(_super) {
__extends(AnimationFrameAction, _super);
function AnimationFrameAction(scheduler, work) {
_super.call(this, scheduler, work);
this.scheduler = scheduler;
this.work = work;
}
AnimationFrameAction.prototype.requestAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
if (delay !== null && delay > 0) {
return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
}
scheduler.actions.push(this);
return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));
};
AnimationFrameAction.prototype.recycleAsyncId = function(scheduler, id, delay) {
if (delay === void 0) {
delay = 0;
}
if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
}
if (scheduler.actions.length === 0) {
AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);
scheduler.scheduled = undefined;
}
return undefined;
};
return AnimationFrameAction;
}(AsyncAction_1.AsyncAction);
exports.AnimationFrameAction = AnimationFrameAction;
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(94);
var RequestAnimationFrameDefinition = function() {
function RequestAnimationFrameDefinition(root) {
if (root.requestAnimationFrame) {
this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);
this.requestAnimationFrame = root.requestAnimationFrame.bind(root);
} else if (root.mozRequestAnimationFrame) {
this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);
this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);
} else if (root.webkitRequestAnimationFrame) {
this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);
this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);
} else if (root.msRequestAnimationFrame) {
this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);
this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);
} else if (root.oRequestAnimationFrame) {
this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);
this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);
} else {
this.cancelAnimationFrame = root.clearTimeout.bind(root);
this.requestAnimationFrame = function(cb) {
return root.setTimeout(cb, 1e3 / 60);
};
}
}
return RequestAnimationFrameDefinition;
}();
exports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;
exports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncScheduler_1 = __webpack_require__(331);
var AnimationFrameScheduler = function(_super) {
__extends(AnimationFrameScheduler, _super);
function AnimationFrameScheduler() {
_super.apply(this, arguments);
}
AnimationFrameScheduler.prototype.flush = function(action) {
this.active = true;
this.scheduled = undefined;
var actions = this.actions;
var error;
var index = -1;
var count = actions.length;
action = action || actions.shift();
do {
if (error = action.execute(action.state, action.delay)) {
break;
}
} while (++index < count && (action = actions.shift()));
this.active = false;
if (error) {
while (++index < count && (action = actions.shift())) {
action.unsubscribe();
}
throw error;
}
};
return AnimationFrameScheduler;
}(AsyncScheduler_1.AsyncScheduler);
exports.AnimationFrameScheduler = AnimationFrameScheduler;
}, function(module, exports) {
;"use strict";
}, function(module, exports, __webpack_require__) {
(function(root, factory) {
root.Rx = factory();
})(window || global || this, function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "../dist/cjs/Rx"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
});
}, function(module, exports, __webpack_require__) {
module.exports = __webpack_require__(579);
}, function(module, exports, __webpack_require__) {
(function(module) {
"use strict";
Object.defineProperty(exports, "__esModule", {
value: true
});
var _ponyfill = __webpack_require__(581);
var _ponyfill2 = _interopRequireDefault(_ponyfill);
function _interopRequireDefault(obj) {
return obj && obj.__esModule ? obj : {
default: obj
};
}
var root;
if (typeof self !== "undefined") {
root = self;
} else if (typeof window !== "undefined") {
root = window;
} else if (typeof global !== "undefined") {
root = global;
} else if (true) {
root = module;
} else {
root = Function("return this")();
}
var result = (0, _ponyfill2["default"])(root);
exports["default"] = result;
}).call(exports, __webpack_require__(580)(module));
}, function(module, exports) {
module.exports = function(module) {
if (!module.webpackPolyfill) {
module.deprecate = function() {};
module.paths = [];
module.children = [];
module.webpackPolyfill = 1;
}
return module;
};
}, function(module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
value: true
});
exports["default"] = symbolObservablePonyfill;
function symbolObservablePonyfill(root) {
var result;
var _Symbol = root.Symbol;
if (typeof _Symbol === "function") {
if (_Symbol.observable) {
result = _Symbol.observable;
} else {
result = _Symbol("observable");
_Symbol.observable = result;
}
} else {
result = "@@observable";
}
return result;
}
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var observable_1 = __webpack_require__(20);
var types_1 = __webpack_require__(17);
var properties_1 = __webpack_require__(34);
var propertyFromKey = {};
function generatePropertyKey(name, ownerType, validate) {
if (validate) {
validateRegisterParameters(name, ownerType);
}
return ownerType + "." + name;
}
function validateRegisterParameters(name, ownerType) {
if (name == null || name.trim().length === 0) {
throw new Error("Name should not be null or empty string.");
}
if (ownerType == null || ownerType.trim().length === 0) {
throw new Error("OwnerType should not be null or empty string.");
}
}
function getPropertyByNameAndType(name, owner) {
var result;
var key;
var classInfo = types_1.getClassInfo(owner);
while (classInfo) {
key = generatePropertyKey(name, classInfo.name);
result = propertyFromKey[key];
if (result) {
break;
}
classInfo = classInfo.baseClassInfo;
}
return result;
}
var PropertyMetadataSettings;
(function(PropertyMetadataSettings) {
PropertyMetadataSettings.None = 0;
PropertyMetadataSettings.AffectsLayout = 1;
PropertyMetadataSettings.AffectsStyle = 1 << 1;
PropertyMetadataSettings.Inheritable = 1 << 2;
})(PropertyMetadataSettings = exports.PropertyMetadataSettings || (exports.PropertyMetadataSettings = {}));
var ValueSource;
(function(ValueSource) {
ValueSource.Default = 0;
ValueSource.Inherited = 1;
ValueSource.Css = 2;
ValueSource.Local = 3;
ValueSource.VisualState = 4;
})(ValueSource = exports.ValueSource || (exports.ValueSource = {}));
var PropertyMetadata = function() {
function PropertyMetadata(defaultValue, options, onChanged, onValidateValue, equalityComparer) {
if (options === void 0) {
options = PropertyMetadataSettings.None;
}
this.defaultValue = defaultValue;
this.options = options;
throw new Error("* @deprecated use 'ui/core/properties' module instead.");
}
return PropertyMetadata;
}();
exports.PropertyMetadata = PropertyMetadata;
var Property = function() {
function Property(name, ownerType, metadata, valueConverter) {
this.name = name;
this.ownerType = ownerType;
this.metadata = metadata;
throw new Error("* @deprecated use 'ui/core/properties' module instead.");
}
return Property;
}();
exports.Property = Property;
var PropertyEntry = function() {
function PropertyEntry(property) {
this.property = property;
this.valueSource = ValueSource.Default;
throw new Error("* @deprecated use 'ui/core/properties' module instead.");
}
PropertyEntry.prototype.resetValue = function() {
this.valueSource = ValueSource.Default;
this.inheritedValue = this.cssValue = this.localValue = this.visualStateValue = this.effectiveValue = undefined;
};
return PropertyEntry;
}();
exports.PropertyEntry = PropertyEntry;
var DependencyObservable = function(_super) {
__extends(DependencyObservable, _super);
function DependencyObservable() {
var _this = _super.call(this) || this;
_this._propertyEntries = {};
throw new Error("* @deprecated use 'ui/core/view-base or ui/core/view' as base class.");
return _this;
}
DependencyObservable.prototype.set = function(name, value) {
var property = getPropertyByNameAndType(name, this);
if (property) {
this._setValueInternal(property, value, ValueSource.Local);
} else {
_super.prototype.set.call(this, name, value);
}
};
DependencyObservable.prototype.get = function(name) {
var property = getPropertyByNameAndType(name, this);
if (property) {
return this._getValue(property);
} else {
return _super.prototype.get.call(this, name);
}
};
DependencyObservable.prototype._setValue = function(property, value, source) {
this._setValueInternal(property, value, source || ValueSource.Local);
};
DependencyObservable.prototype._getValueSource = function(property) {
var entry = this._propertyEntries[property.id];
if (entry) {
return entry.valueSource;
}
return ValueSource.Default;
};
DependencyObservable.prototype._getValue = function(property) {
var entry = this._propertyEntries[property.id];
if (entry) {
return entry.effectiveValue;
} else {
return this._getDefaultValue(property);
}
};
DependencyObservable.prototype._getDefaultValue = function(property) {
if (property.defaultValueGetter) {
var defaultValueResult = property.defaultValueGetter(this);
var defaultValue = defaultValueResult.result;
if (defaultValueResult.cacheable) {
var entry = new PropertyEntry(property);
entry.effectiveValue = entry.defaultValue = defaultValue;
this._propertyEntries[property.id] = entry;
}
return defaultValue;
}
return property.defaultValue;
};
DependencyObservable.prototype._resetValues = function(valueSource) {
for (var i = 0, keys = Object.keys(this._propertyEntries); i < keys.length; i++) {
var key = keys[i];
var entry = this._propertyEntries[key];
this._resetValueInternal(entry.property, entry, valueSource);
}
};
DependencyObservable.prototype._resetValue = function(property, valueSource) {
if (valueSource === void 0) {
valueSource = ValueSource.Local;
}
var entry = this._propertyEntries[property.id];
if (!entry) {
return;
}
this._resetValueInternal(property, entry, valueSource);
};
DependencyObservable.prototype._resetValueInternal = function(property, entry, valueSource) {
switch (valueSource) {
case ValueSource.Inherited:
entry.inheritedValue = undefined;
break;

case ValueSource.Css:
entry.cssValue = undefined;
break;

case ValueSource.Local:
entry.localValue = undefined;
break;

case ValueSource.VisualState:
entry.visualStateValue = undefined;
break;
}
var currentValueSource = entry.valueSource;
if (currentValueSource !== valueSource) {
return;
}
var currentValue = entry.effectiveValue;
var newValue = this.getEffectiveValueAndUpdateEntry(currentValueSource, entry, property);
if (!property.equalityComparer(currentValue, newValue)) {
if (entry.valueSource === ValueSource.Default && !property.defaultValueGetter) {
delete this._propertyEntries[property.id];
} else {
entry.effectiveValue = newValue;
}
this._onPropertyChanged(property, currentValue, newValue);
}
};
DependencyObservable.prototype._onPropertyChanged = function(property, oldValue, newValue) {
var valueChanged = property.onValueChanged;
if (valueChanged) {
valueChanged({
object: this,
property: property,
eventName: observable_1.Observable.propertyChangeEvent,
newValue: newValue,
oldValue: oldValue
});
}
var propName = property.name;
if (this.hasListeners(observable_1.Observable.propertyChangeEvent)) {
this.notifyPropertyChange(propName, newValue);
}
var eventName = property.nameEvent;
if (this.hasListeners(eventName)) {
var ngChangedData = {
eventName: eventName,
propertyName: propName,
object: this,
value: newValue
};
this.notify(ngChangedData);
}
};
DependencyObservable.prototype._eachSetProperty = function(callback) {
for (var i = 0, keys = Object.keys(this._propertyEntries); i < keys.length; i++) {
var key = keys[i];
var entry = this._propertyEntries[key];
if (!callback(entry.property)) {
break;
}
}
};
DependencyObservable.prototype._eachSetPropertyValue = function(callback) {
for (var i = 0, keys = Object.keys(this._propertyEntries); i < keys.length; i++) {
var key = keys[i];
var entry = this._propertyEntries[key];
if (entry.valueSource === ValueSource.Default) {
continue;
}
if (!callback(entry.property, entry.effectiveValue)) {
break;
}
}
};
DependencyObservable.prototype._setValueInternal = function(property, value, source) {
if (value === properties_1.unsetValue) {
this._resetValue(property, source);
return;
}
var wrapped = value && value.wrapped;
var realValue = wrapped ? observable_1.WrappedValue.unwrap(value) : value;
var validate = property.onValidateValue;
if (validate && !validate(realValue)) {
throw new Error("Invalid value " + realValue + " for property " + property.name);
}
var converter = property.valueConverter;
if (converter && types_1.isString(realValue)) {
realValue = converter(realValue);
}
var entry = this._propertyEntries[property.id];
var currentValue;
if (!entry) {
entry = new PropertyEntry(property);
entry.effectiveValue = this._getDefaultValue(property);
this._propertyEntries[property.id] = entry;
}
currentValue = entry.effectiveValue;
switch (source) {
case ValueSource.Inherited:
entry.inheritedValue = realValue;
break;

case ValueSource.Css:
entry.cssValue = realValue;
break;

case ValueSource.Local:
entry.localValue = realValue;
break;

case ValueSource.VisualState:
entry.visualStateValue = realValue;
break;
}
var currentValueSource = entry.valueSource;
if (currentValueSource > source) {
return;
} else if (currentValueSource < source) {
entry.valueSource = source;
}
if (wrapped || !property.equalityComparer(currentValue, realValue)) {
entry.effectiveValue = realValue;
this._onPropertyChanged(property, currentValue, realValue);
}
};
DependencyObservable.prototype.getEffectiveValueAndUpdateEntry = function(currentValueSource, entry, property) {
var newValue;
switch (currentValueSource) {
case ValueSource.Inherited:
newValue = property.defaultValue;
entry.valueSource = ValueSource.Default;
break;

case ValueSource.Css:
if (entry.inheritedValue !== undefined) {
newValue = entry.inheritedValue;
entry.valueSource = ValueSource.Inherited;
} else {
newValue = entry.defaultValue !== undefined ? entry.defaultValue : property.defaultValue;
entry.valueSource = ValueSource.Default;
}
break;

case ValueSource.Local:
if (entry.cssValue !== undefined) {
newValue = entry.cssValue;
entry.valueSource = ValueSource.Css;
} else if (entry.inheritedValue !== undefined) {
newValue = entry.inheritedValue;
entry.valueSource = ValueSource.Inherited;
} else {
newValue = entry.defaultValue !== undefined ? entry.defaultValue : property.defaultValue;
entry.valueSource = ValueSource.Default;
}
break;

case ValueSource.VisualState:
if (entry.localValue !== undefined) {
newValue = entry.localValue;
entry.valueSource = ValueSource.Local;
} else if (entry.cssValue !== undefined) {
newValue = entry.cssValue;
entry.valueSource = ValueSource.Css;
} else if (entry.inheritedValue !== undefined) {
newValue = entry.inheritedValue;
entry.valueSource = ValueSource.Inherited;
} else {
newValue = entry.defaultValue !== undefined ? entry.defaultValue : property.defaultValue;
entry.valueSource = ValueSource.Default;
}
break;
}
return newValue;
};
return DependencyObservable;
}(observable_1.Observable);
exports.DependencyObservable = DependencyObservable;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var frame_1 = __webpack_require__(10);
var appModule = __webpack_require__(18);
var NativeScriptActivity = function(_super) {
__extends(NativeScriptActivity, _super);
function NativeScriptActivity() {
var _this = _super.call(this) || this;
return global.__native(_this);
}
NativeScriptActivity.prototype.onCreate = function(savedInstanceState) {
appModule.android.init(this.getApplication());
this.isNativeScriptActivity = true;
if (!this._callbacks) {
frame_1.setActivityCallbacks(this);
}
this._callbacks.onCreate(this, savedInstanceState, _super.prototype.onCreate);
};
NativeScriptActivity.prototype.onSaveInstanceState = function(outState) {
this._callbacks.onSaveInstanceState(this, outState, _super.prototype.onSaveInstanceState);
};
NativeScriptActivity.prototype.onStart = function() {
this._callbacks.onStart(this, _super.prototype.onStart);
};
NativeScriptActivity.prototype.onStop = function() {
this._callbacks.onStop(this, _super.prototype.onStop);
};
NativeScriptActivity.prototype.onDestroy = function() {
this._callbacks.onDestroy(this, _super.prototype.onDestroy);
};
NativeScriptActivity.prototype.onBackPressed = function() {
this._callbacks.onBackPressed(this, _super.prototype.onBackPressed);
};
NativeScriptActivity.prototype.onRequestPermissionsResult = function(requestCode, permissions, grantResults) {
this._callbacks.onRequestPermissionsResult(this, requestCode, permissions, grantResults, undefined);
};
NativeScriptActivity.prototype.onActivityResult = function(requestCode, resultCode, data) {
this._callbacks.onActivityResult(this, requestCode, resultCode, data, _super.prototype.onActivityResult);
};
return NativeScriptActivity;
}(android.app.Activity);
NativeScriptActivity = __decorate([ JavaProxy("com.tns.NativeScriptActivity") ], NativeScriptActivity);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var common = __webpack_require__(585);
var LruBitmapCacheClass;
function ensureLruBitmapCacheClass() {
if (LruBitmapCacheClass) {
return;
}
var LruBitmapCache = function(_super) {
__extends(LruBitmapCache, _super);
function LruBitmapCache(cacheSize) {
var _this = _super.call(this, cacheSize) || this;
return global.__native(_this);
}
LruBitmapCache.prototype.sizeOf = function(key, bitmap) {
var result = Math.round(bitmap.getByteCount() / 1024);
return result;
};
return LruBitmapCache;
}(android.util.LruCache);
LruBitmapCacheClass = LruBitmapCache;
}
var Cache = function(_super) {
__extends(Cache, _super);
function Cache() {
var _this = _super.call(this) || this;
ensureLruBitmapCacheClass();
var maxMemory = java.lang.Runtime.getRuntime().maxMemory() / 1024;
var cacheSize = maxMemory / 8;
_this._cache = new LruBitmapCacheClass(cacheSize);
var that = new WeakRef(_this);
_this._callback = new org.nativescript.widgets.Async.CompleteCallback({
onComplete: function(result, context) {
var instance = that.get();
if (instance) {
instance._onDownloadCompleted(context, result);
}
}
});
return _this;
}
Cache.prototype._downloadCore = function(request) {
org.nativescript.widgets.Async.Image.download(request.url, this._callback, request.key);
};
Cache.prototype.get = function(key) {
var result = this._cache.get(key);
return result;
};
Cache.prototype.set = function(key, image) {
this._cache.put(key, image);
};
Cache.prototype.remove = function(key) {
this._cache.remove(key);
};
Cache.prototype.clear = function() {
this._cache.evictAll();
};
return Cache;
}(common.Cache);
exports.Cache = Cache;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var observable = __webpack_require__(20);
var Cache = function(_super) {
__extends(Cache, _super);
function Cache() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this.maxRequests = 5;
_this._enabled = true;
_this._pendingDownloads = {};
_this._queue = [];
_this._currentDownloads = 0;
return _this;
}
Cache.prototype.enableDownload = function() {
if (this._enabled) {
return;
}
this._enabled = true;
var request;
while (this._queue.length > 0 && this._currentDownloads < this.maxRequests) {
request = this._queue.pop();
if (!(request.key in this._pendingDownloads)) {
this._download(request);
}
}
};
Cache.prototype.disableDownload = function() {
if (!this._enabled) {
return;
}
this._enabled = false;
};
Cache.prototype.push = function(request) {
this._addRequest(request, true);
};
Cache.prototype.enqueue = function(request) {
this._addRequest(request, false);
};
Cache.prototype._addRequest = function(request, onTop) {
if (request.key in this._pendingDownloads) {
var existingRequest = this._pendingDownloads[request.key];
this._mergeRequests(existingRequest, request);
} else {
var queueRequest;
for (var i = 0; i < this._queue.length; i++) {
if (this._queue[i].key === request.key) {
queueRequest = this._queue[i];
break;
}
}
if (queueRequest) {
this._mergeRequests(queueRequest, request);
} else {
if (this._shouldDownload(request, onTop)) {
this._download(request);
}
}
}
};
Cache.prototype._mergeRequests = function(existingRequest, newRequest) {
if (existingRequest.completed) {
if (newRequest.completed) {
var existingCompleted = existingRequest.completed;
var stackCompleted = function(result, key) {
existingCompleted(result, key);
newRequest.completed(result, key);
};
existingRequest.completed = stackCompleted;
}
} else {
existingRequest.completed = newRequest.completed;
}
};
Cache.prototype.get = function(key) {
throw new Error("Abstract");
};
Cache.prototype.set = function(key, image) {
throw new Error("Abstract");
};
Cache.prototype.remove = function(key) {
throw new Error("Abstract");
};
Cache.prototype.clear = function() {
throw new Error("Abstract");
};
Cache.prototype._downloadCore = function(request) {
throw new Error("Abstract");
};
Cache.prototype._onDownloadCompleted = function(key, image) {
var request = this._pendingDownloads[key];
if (request.key && image) {
this.set(request.key, image);
}
this._currentDownloads--;
if (request.completed) {
request.completed(image, request.key);
}
if (this.hasListeners(Cache.downloadedEvent)) {
this.notify({
eventName: Cache.downloadedEvent,
object: this,
key: key,
image: image
});
}
delete this._pendingDownloads[request.key];
this._updateQueue();
};
Cache.prototype._shouldDownload = function(request, onTop) {
if (this.get(request.key) || request.key in this._pendingDownloads) {
return false;
}
if (this._currentDownloads >= this.maxRequests || !this._enabled) {
if (onTop) {
this._queue.push(request);
} else {
this._queue.unshift(request);
}
return false;
}
return true;
};
Cache.prototype._download = function(request) {
this._currentDownloads++;
this._pendingDownloads[request.key] = request;
this._downloadCore(request);
};
Cache.prototype._updateQueue = function() {
if (!this._enabled || this._queue.length === 0 || this._currentDownloads === this.maxRequests) {
return;
}
var request = this._queue.pop();
this._download(request);
};
return Cache;
}(observable.Observable);
Cache.downloadedEvent = "downloaded";
exports.Cache = Cache;
}, function(module, exports) {}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_1 = __webpack_require__(135);
__export(__webpack_require__(135));
var OWNER = Symbol("_owner");
var NativeViewGroup;
function initializeNativeViewGroup() {
if (NativeViewGroup) {
return;
}
var NativeViewGroupImpl = function(_super) {
__extends(NativeViewGroupImpl, _super);
function NativeViewGroupImpl(context) {
var _this = _super.call(this, context) || this;
return global.__native(_this);
}
NativeViewGroupImpl.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var owner = this[OWNER];
owner.onMeasure(widthMeasureSpec, heightMeasureSpec);
this.setMeasuredDimension(owner.getMeasuredWidth(), owner.getMeasuredHeight());
};
NativeViewGroupImpl.prototype.onLayout = function(changed, left, top, right, bottom) {
var owner = this[OWNER];
owner.onLayout(left, top, right, bottom);
};
return NativeViewGroupImpl;
}(android.view.ViewGroup);
NativeViewGroup = NativeViewGroupImpl;
}
var Layout = function(_super) {
__extends(Layout, _super);
function Layout() {
return _super !== null && _super.apply(this, arguments) || this;
}
Layout.prototype.createNativeView = function() {
initializeNativeViewGroup();
return new NativeViewGroup(this._context);
};
Layout.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
this.nativeView[OWNER] = this;
};
Layout.prototype.disposeNativeView = function() {
this.nativeView[OWNER] = undefined;
_super.prototype.disposeNativeView.call(this);
};
Layout.prototype.measure = function(widthMeasureSpec, heightMeasureSpec) {
this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);
var view = this.nativeView;
if (view) {
if (layout_base_1.traceEnabled()) {
layout_base_1.traceWrite(this + " :measure: " + layout_base_1.layout.measureSpecToString(widthMeasureSpec) + ", " + layout_base_1.layout.measureSpecToString(heightMeasureSpec), layout_base_1.traceCategories.Layout);
}
view.measure(widthMeasureSpec, heightMeasureSpec);
}
};
Layout.prototype.layout = function(left, top, right, bottom) {
this._setCurrentLayoutBounds(left, top, right, bottom);
var view = this.nativeView;
if (view) {
this.layoutNativeView(left, top, right, bottom);
if (layout_base_1.traceEnabled()) {
layout_base_1.traceWrite(this + " :layout: " + left + ", " + top + ", " + (right - left) + ", " + (bottom - top), layout_base_1.traceCategories.Layout);
}
}
};
Layout.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {};
Layout.prototype.onLayout = function(left, top, right, bottom) {};
Layout.prototype.setMeasuredDimension = function(measuredWidth, measuredHeight) {
_super.prototype.setMeasuredDimension.call(this, measuredWidth, measuredHeight);
this._measuredWidth = measuredWidth;
this._measuredHeight = measuredHeight;
};
Layout.prototype.getMeasuredWidth = function() {
return this._measuredWidth;
};
Layout.prototype.getMeasuredHeight = function() {
return this._measuredHeight;
};
return Layout;
}(layout_base_1.LayoutBase);
exports.Layout = Layout;
}, function(module, exports) {}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
exports.merge = function(sourceExports, destExports) {
for (var key in sourceExports) {
destExports[key] = sourceExports[key];
}
};
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var epsilon = 1e-5;
function areClose(value1, value2) {
return Math.abs(value1 - value2) < epsilon;
}
exports.areClose = areClose;
function greaterThanOrClose(value1, value2) {
return value1 > value2 || areClose(value1, value2);
}
exports.greaterThanOrClose = greaterThanOrClose;
function greaterThan(value1, value2) {
return value1 > value2 && !areClose(value1, value2);
}
exports.greaterThan = greaterThan;
function lessThan(value1, value2) {
return value1 < value2 && !areClose(value1, value2);
}
exports.lessThan = lessThan;
function isZero(value) {
return Math.abs(value) < epsilon;
}
exports.isZero = isZero;
function greaterThanZero(value) {
return value > 0;
}
exports.greaterThanZero = greaterThanZero;
function notNegative(value) {
return value >= 0;
}
exports.notNegative = notNegative;
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory() : typeof define === "function" && define.amd ? define(factory) : factory();
})(this, function() {
"use strict";
var Zone$1 = function(global) {
if (global["Zone"]) {
throw new Error("Zone already loaded.");
}
var NO_ZONE = {
name: "NO ZONE"
};
var notScheduled = "notScheduled", scheduling = "scheduling", scheduled = "scheduled", running = "running", canceling = "canceling", unknown = "unknown";
var microTask = "microTask", macroTask = "macroTask", eventTask = "eventTask";
var Zone = function() {
function Zone(parent, zoneSpec) {
this._properties = null;
this._parent = parent;
this._name = zoneSpec ? zoneSpec.name || "unnamed" : "<root>";
this._properties = zoneSpec && zoneSpec.properties || {};
this._zoneDelegate = new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
}
Zone.assertZonePatched = function() {
if (global.Promise !== ZoneAwarePromise) {
throw new Error("Zone.js has detected that ZoneAwarePromise `(window|global).Promise` " + "has been overwritten.\n" + "Most likely cause is that a Promise polyfill has been loaded " + "after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. " + "If you must load one, do so before loading zone.js.)");
}
};
Object.defineProperty(Zone, "root", {
get: function() {
var zone = Zone.current;
while (zone.parent) {
zone = zone.parent;
}
return zone;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone, "current", {
get: function() {
return _currentZoneFrame.zone;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone, "currentTask", {
get: function() {
return _currentTask;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone.prototype, "name", {
get: function() {
return this._name;
},
enumerable: true,
configurable: true
});
Zone.prototype.get = function(key) {
var zone = this.getZoneWith(key);
if (zone) return zone._properties[key];
};
Zone.prototype.getZoneWith = function(key) {
var current = this;
while (current) {
if (current._properties.hasOwnProperty(key)) {
return current;
}
current = current._parent;
}
return null;
};
Zone.prototype.fork = function(zoneSpec) {
if (!zoneSpec) throw new Error("ZoneSpec required!");
return this._zoneDelegate.fork(this, zoneSpec);
};
Zone.prototype.wrap = function(callback, source) {
if (typeof callback !== "function") {
throw new Error("Expecting function got: " + callback);
}
var _callback = this._zoneDelegate.intercept(this, callback, source);
var zone = this;
return function() {
return zone.runGuarded(_callback, this, arguments, source);
};
};
Zone.prototype.run = function(callback, applyThis, applyArgs, source) {
if (applyThis === void 0) {
applyThis = undefined;
}
if (applyArgs === void 0) {
applyArgs = null;
}
if (source === void 0) {
source = null;
}
_currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
try {
return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
} finally {
_currentZoneFrame = _currentZoneFrame.parent;
}
};
Zone.prototype.runGuarded = function(callback, applyThis, applyArgs, source) {
if (applyThis === void 0) {
applyThis = null;
}
if (applyArgs === void 0) {
applyArgs = null;
}
if (source === void 0) {
source = null;
}
_currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
try {
try {
return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
} catch (error) {
if (this._zoneDelegate.handleError(this, error)) {
throw error;
}
}
} finally {
_currentZoneFrame = _currentZoneFrame.parent;
}
};
Zone.prototype.runTask = function(task, applyThis, applyArgs) {
if (task.zone != this) throw new Error("A task can only be run in the zone of creation! (Creation: " + (task.zone || NO_ZONE).name + "; Execution: " + this.name + ")");
var reEntryGuard = task.state != running;
reEntryGuard && task._transitionTo(running, scheduled);
task.runCount++;
var previousTask = _currentTask;
_currentTask = task;
_currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
try {
if (task.type == macroTask && task.data && !task.data.isPeriodic) {
task.cancelFn = null;
}
try {
return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
} catch (error) {
if (this._zoneDelegate.handleError(this, error)) {
throw error;
}
}
} finally {
if (task.state !== notScheduled && task.state !== unknown) {
if (task.type == eventTask || task.data && task.data.isPeriodic) {
reEntryGuard && task._transitionTo(scheduled, running);
} else {
task.runCount = 0;
this._updateTaskCount(task, -1);
reEntryGuard && task._transitionTo(notScheduled, running, notScheduled);
}
}
_currentZoneFrame = _currentZoneFrame.parent;
_currentTask = previousTask;
}
};
Zone.prototype.scheduleTask = function(task) {
if (task.zone && task.zone !== this) {
var newZone = this;
while (newZone) {
if (newZone === task.zone) {
throw Error("can not reschedule task to " + this.name + " which is descendants of the original zone " + task.zone.name);
}
newZone = newZone.parent;
}
}
task._transitionTo(scheduling, notScheduled);
var zoneDelegates = [];
task._zoneDelegates = zoneDelegates;
task._zone = this;
try {
task = this._zoneDelegate.scheduleTask(this, task);
} catch (err) {
task._transitionTo(unknown, scheduling, notScheduled);
this._zoneDelegate.handleError(this, err);
throw err;
}
if (task._zoneDelegates === zoneDelegates) {
this._updateTaskCount(task, 1);
}
if (task.state == scheduling) {
task._transitionTo(scheduled, scheduling);
}
return task;
};
Zone.prototype.scheduleMicroTask = function(source, callback, data, customSchedule) {
return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, null));
};
Zone.prototype.scheduleMacroTask = function(source, callback, data, customSchedule, customCancel) {
return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));
};
Zone.prototype.scheduleEventTask = function(source, callback, data, customSchedule, customCancel) {
return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));
};
Zone.prototype.cancelTask = function(task) {
if (task.zone != this) throw new Error("A task can only be cancelled in the zone of creation! (Creation: " + (task.zone || NO_ZONE).name + "; Execution: " + this.name + ")");
task._transitionTo(canceling, scheduled, running);
try {
this._zoneDelegate.cancelTask(this, task);
} catch (err) {
task._transitionTo(unknown, canceling);
this._zoneDelegate.handleError(this, err);
throw err;
}
this._updateTaskCount(task, -1);
task._transitionTo(notScheduled, canceling);
task.runCount = 0;
return task;
};
Zone.prototype._updateTaskCount = function(task, count) {
var zoneDelegates = task._zoneDelegates;
if (count == -1) {
task._zoneDelegates = null;
}
for (var i = 0; i < zoneDelegates.length; i++) {
zoneDelegates[i]._updateTaskCount(task.type, count);
}
};
return Zone;
}();
Zone.__symbol__ = __symbol__;
var DELEGATE_ZS = {
name: "",
onHasTask: function(delegate, _, target, hasTaskState) {
return delegate.hasTask(target, hasTaskState);
},
onScheduleTask: function(delegate, _, target, task) {
return delegate.scheduleTask(target, task);
},
onInvokeTask: function(delegate, _, target, task, applyThis, applyArgs) {
return delegate.invokeTask(target, task, applyThis, applyArgs);
},
onCancelTask: function(delegate, _, target, task) {
return delegate.cancelTask(target, task);
}
};
var ZoneDelegate = function() {
function ZoneDelegate(zone, parentDelegate, zoneSpec) {
this._taskCounts = {
microTask: 0,
macroTask: 0,
eventTask: 0
};
this.zone = zone;
this._parentDelegate = parentDelegate;
this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
this._forkCurrZone = zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate.zone);
this._interceptZS = zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
this._interceptDlgt = zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
this._interceptCurrZone = zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate.zone);
this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
this._invokeDlgt = zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
this._invokeCurrZone = zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate.zone);
this._handleErrorZS = zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
this._handleErrorDlgt = zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
this._handleErrorCurrZone = zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate.zone);
this._scheduleTaskZS = zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
this._scheduleTaskDlgt = zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
this._scheduleTaskCurrZone = zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate.zone);
this._invokeTaskZS = zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
this._invokeTaskDlgt = zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
this._invokeTaskCurrZone = zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate.zone);
this._cancelTaskZS = zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
this._cancelTaskDlgt = zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
this._cancelTaskCurrZone = zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate.zone);
this._hasTaskZS = null;
this._hasTaskDlgt = null;
this._hasTaskDlgtOwner = null;
this._hasTaskCurrZone = null;
var zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;
var parentHasTask = parentDelegate && parentDelegate._hasTaskZS;
if (zoneSpecHasTask || parentHasTask) {
this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;
this._hasTaskDlgt = parentDelegate;
this._hasTaskDlgtOwner = this;
this._hasTaskCurrZone = zone;
if (!zoneSpec.onScheduleTask) {
this._scheduleTaskZS = DELEGATE_ZS;
this._scheduleTaskDlgt = parentDelegate;
this._scheduleTaskCurrZone = this.zone;
}
if (!zoneSpec.onInvokeTask) {
this._invokeTaskZS = DELEGATE_ZS;
this._invokeTaskDlgt = parentDelegate;
this._invokeTaskCurrZone = this.zone;
}
if (!zoneSpec.onCancelTask) {
this._cancelTaskZS = DELEGATE_ZS;
this._cancelTaskDlgt = parentDelegate;
this._cancelTaskCurrZone = this.zone;
}
}
}
ZoneDelegate.prototype.fork = function(targetZone, zoneSpec) {
return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) : new Zone(targetZone, zoneSpec);
};
ZoneDelegate.prototype.intercept = function(targetZone, callback, source) {
return this._interceptZS ? this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) : callback;
};
ZoneDelegate.prototype.invoke = function(targetZone, callback, applyThis, applyArgs, source) {
return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) : callback.apply(applyThis, applyArgs);
};
ZoneDelegate.prototype.handleError = function(targetZone, error) {
return this._handleErrorZS ? this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) : true;
};
ZoneDelegate.prototype.scheduleTask = function(targetZone, task) {
var returnTask = task;
if (this._scheduleTaskZS) {
if (this._hasTaskZS) {
returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);
}
returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);
if (!returnTask) returnTask = task;
} else {
if (task.scheduleFn) {
task.scheduleFn(task);
} else if (task.type == microTask) {
scheduleMicroTask(task);
} else {
throw new Error("Task is missing scheduleFn.");
}
}
return returnTask;
};
ZoneDelegate.prototype.invokeTask = function(targetZone, task, applyThis, applyArgs) {
return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) : task.callback.apply(applyThis, applyArgs);
};
ZoneDelegate.prototype.cancelTask = function(targetZone, task) {
var value;
if (this._cancelTaskZS) {
value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);
} else {
if (!task.cancelFn) {
throw Error("Task is not cancelable");
}
value = task.cancelFn(task);
}
return value;
};
ZoneDelegate.prototype.hasTask = function(targetZone, isEmpty) {
try {
return this._hasTaskZS && this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);
} catch (err) {
this.handleError(targetZone, err);
}
};
ZoneDelegate.prototype._updateTaskCount = function(type, count) {
var counts = this._taskCounts;
var prev = counts[type];
var next = counts[type] = prev + count;
if (next < 0) {
throw new Error("More tasks executed then were scheduled.");
}
if (prev == 0 || next == 0) {
var isEmpty = {
microTask: counts.microTask > 0,
macroTask: counts.macroTask > 0,
eventTask: counts.eventTask > 0,
change: type
};
this.hasTask(this.zone, isEmpty);
}
};
return ZoneDelegate;
}();
var ZoneTask = function() {
function ZoneTask(type, source, callback, options, scheduleFn, cancelFn) {
this._zone = null;
this.runCount = 0;
this._zoneDelegates = null;
this._state = "notScheduled";
this.type = type;
this.source = source;
this.data = options;
this.scheduleFn = scheduleFn;
this.cancelFn = cancelFn;
this.callback = callback;
var self = this;
this.invoke = function() {
_numberOfNestedTaskFrames++;
try {
self.runCount++;
return self.zone.runTask(self, this, arguments);
} finally {
if (_numberOfNestedTaskFrames == 1) {
drainMicroTaskQueue();
}
_numberOfNestedTaskFrames--;
}
};
}
Object.defineProperty(ZoneTask.prototype, "zone", {
get: function() {
return this._zone;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ZoneTask.prototype, "state", {
get: function() {
return this._state;
},
enumerable: true,
configurable: true
});
ZoneTask.prototype.cancelScheduleRequest = function() {
this._transitionTo(notScheduled, scheduling);
};
ZoneTask.prototype._transitionTo = function(toState, fromState1, fromState2) {
if (this._state === fromState1 || this._state === fromState2) {
this._state = toState;
if (toState == notScheduled) {
this._zoneDelegates = null;
}
} else {
throw new Error(this.type + " '" + this.source + "': can not transition to '" + toState + "', expecting state '" + fromState1 + "'" + (fromState2 ? " or '" + fromState2 + "'" : "") + ", was '" + this._state + "'.");
}
};
ZoneTask.prototype.toString = function() {
if (this.data && typeof this.data.handleId !== "undefined") {
return this.data.handleId;
} else {
return Object.prototype.toString.call(this);
}
};
ZoneTask.prototype.toJSON = function() {
return {
type: this.type,
state: this.state,
source: this.source,
zone: this.zone.name,
invoke: this.invoke,
scheduleFn: this.scheduleFn,
cancelFn: this.cancelFn,
runCount: this.runCount,
callback: this.callback
};
};
return ZoneTask;
}();
var ZoneFrame = function() {
function ZoneFrame(parent, zone) {
this.parent = parent;
this.zone = zone;
}
return ZoneFrame;
}();
function __symbol__(name) {
return "__zone_symbol__" + name;
}
var symbolSetTimeout = __symbol__("setTimeout");
var symbolPromise = __symbol__("Promise");
var symbolThen = __symbol__("then");
var _currentZoneFrame = new ZoneFrame(null, new Zone(null, null));
var _currentTask = null;
var _microTaskQueue = [];
var _isDrainingMicrotaskQueue = false;
var _uncaughtPromiseErrors = [];
var _numberOfNestedTaskFrames = 0;
function scheduleQueueDrain() {
if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {
if (global[symbolPromise]) {
global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);
} else {
global[symbolSetTimeout](drainMicroTaskQueue, 0);
}
}
}
function scheduleMicroTask(task) {
scheduleQueueDrain();
_microTaskQueue.push(task);
}
function consoleError(e) {
if (Zone[__symbol__("ignoreConsoleErrorUncaughtError")]) {
return;
}
var rejection = e && e.rejection;
if (rejection) {
console.error("Unhandled Promise rejection:", rejection instanceof Error ? rejection.message : rejection, "; Zone:", e.zone.name, "; Task:", e.task && e.task.source, "; Value:", rejection, rejection instanceof Error ? rejection.stack : undefined);
}
console.error(e);
}
function handleUnhandledRejection(e) {
consoleError(e);
try {
var handler = Zone[__symbol__("unhandledPromiseRejectionHandler")];
if (handler && typeof handler === "function") {
handler.apply(this, [ e ]);
}
} catch (err) {}
}
function drainMicroTaskQueue() {
if (!_isDrainingMicrotaskQueue) {
_isDrainingMicrotaskQueue = true;
while (_microTaskQueue.length) {
var queue = _microTaskQueue;
_microTaskQueue = [];
for (var i = 0; i < queue.length; i++) {
var task = queue[i];
try {
task.zone.runTask(task, null, null);
} catch (error) {
consoleError(error);
}
}
}
while (_uncaughtPromiseErrors.length) {
var _loop_1 = function() {
var uncaughtPromiseError = _uncaughtPromiseErrors.shift();
try {
uncaughtPromiseError.zone.runGuarded(function() {
throw uncaughtPromiseError;
});
} catch (error) {
handleUnhandledRejection(error);
}
};
while (_uncaughtPromiseErrors.length) {
_loop_1();
}
}
_isDrainingMicrotaskQueue = false;
}
}
function isThenable(value) {
return value && value.then;
}
function forwardResolution(value) {
return value;
}
function forwardRejection(rejection) {
return ZoneAwarePromise.reject(rejection);
}
var symbolState = __symbol__("state");
var symbolValue = __symbol__("value");
var source = "Promise.then";
var UNRESOLVED = null;
var RESOLVED = true;
var REJECTED = false;
var REJECTED_NO_CATCH = 0;
function makeResolver(promise, state) {
return function(v) {
try {
resolvePromise(promise, state, v);
} catch (err) {
resolvePromise(promise, false, err);
}
};
}
var once = function() {
var wasCalled = false;
return function wrapper(wrappedFunction) {
return function() {
if (wasCalled) {
return;
}
wasCalled = true;
wrappedFunction.apply(null, arguments);
};
};
};
function resolvePromise(promise, state, value) {
var onceWrapper = once();
if (promise === value) {
throw new TypeError("Promise resolved with itself");
}
if (promise[symbolState] === UNRESOLVED) {
var then = null;
try {
if (typeof value === "object" || typeof value === "function") {
then = value && value.then;
}
} catch (err) {
onceWrapper(function() {
resolvePromise(promise, false, err);
})();
return promise;
}
if (state !== REJECTED && value instanceof ZoneAwarePromise && value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) && value[symbolState] !== UNRESOLVED) {
clearRejectedNoCatch(value);
resolvePromise(promise, value[symbolState], value[symbolValue]);
} else if (state !== REJECTED && typeof then === "function") {
try {
then.apply(value, [ onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false)) ]);
} catch (err) {
onceWrapper(function() {
resolvePromise(promise, false, err);
})();
}
} else {
promise[symbolState] = state;
var queue = promise[symbolValue];
promise[symbolValue] = value;
if (state === REJECTED && value instanceof Error) {
value[__symbol__("currentTask")] = Zone.currentTask;
}
for (var i = 0; i < queue.length; ) {
scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
}
if (queue.length == 0 && state == REJECTED) {
promise[symbolState] = REJECTED_NO_CATCH;
try {
throw new Error("Uncaught (in promise): " + value + (value && value.stack ? "\n" + value.stack : ""));
} catch (err) {
var error_1 = err;
error_1.rejection = value;
error_1.promise = promise;
error_1.zone = Zone.current;
error_1.task = Zone.currentTask;
_uncaughtPromiseErrors.push(error_1);
scheduleQueueDrain();
}
}
}
}
return promise;
}
function clearRejectedNoCatch(promise) {
if (promise[symbolState] === REJECTED_NO_CATCH) {
try {
var handler = Zone[__symbol__("rejectionHandledHandler")];
if (handler && typeof handler === "function") {
handler.apply(this, [ {
rejection: promise[symbolValue],
promise: promise
} ]);
}
} catch (err) {}
promise[symbolState] = REJECTED;
for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
if (promise === _uncaughtPromiseErrors[i].promise) {
_uncaughtPromiseErrors.splice(i, 1);
}
}
}
}
function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
clearRejectedNoCatch(promise);
var delegate = promise[symbolState] ? typeof onFulfilled === "function" ? onFulfilled : forwardResolution : typeof onRejected === "function" ? onRejected : forwardRejection;
zone.scheduleMicroTask(source, function() {
try {
resolvePromise(chainPromise, true, zone.run(delegate, undefined, [ promise[symbolValue] ]));
} catch (error) {
resolvePromise(chainPromise, false, error);
}
});
}
var ZoneAwarePromise = function() {
function ZoneAwarePromise(executor) {
var promise = this;
if (!(promise instanceof ZoneAwarePromise)) {
throw new Error("Must be an instanceof Promise.");
}
promise[symbolState] = UNRESOLVED;
promise[symbolValue] = [];
try {
executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
} catch (error) {
resolvePromise(promise, false, error);
}
}
ZoneAwarePromise.toString = function() {
return "function ZoneAwarePromise() { [native code] }";
};
ZoneAwarePromise.resolve = function(value) {
return resolvePromise(new this(null), RESOLVED, value);
};
ZoneAwarePromise.reject = function(error) {
return resolvePromise(new this(null), REJECTED, error);
};
ZoneAwarePromise.race = function(values) {
var resolve;
var reject;
var promise = new this(function(res, rej) {
_a = [ res, rej ], resolve = _a[0], reject = _a[1];
var _a;
});
function onResolve(value) {
promise && (promise = null || resolve(value));
}
function onReject(error) {
promise && (promise = null || reject(error));
}
for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
var value = values_1[_i];
if (!isThenable(value)) {
value = this.resolve(value);
}
value.then(onResolve, onReject);
}
return promise;
};
ZoneAwarePromise.all = function(values) {
var resolve;
var reject;
var promise = new this(function(res, rej) {
resolve = res;
reject = rej;
});
var count = 0;
var resolvedValues = [];
for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
var value = values_2[_i];
if (!isThenable(value)) {
value = this.resolve(value);
}
value.then(function(index) {
return function(value) {
resolvedValues[index] = value;
count--;
if (!count) {
resolve(resolvedValues);
}
};
}(count), reject);
count++;
}
if (!count) resolve(resolvedValues);
return promise;
};
ZoneAwarePromise.prototype.then = function(onFulfilled, onRejected) {
var chainPromise = new this.constructor(null);
var zone = Zone.current;
if (this[symbolState] == UNRESOLVED) {
this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
} else {
scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
}
return chainPromise;
};
ZoneAwarePromise.prototype.catch = function(onRejected) {
return this.then(null, onRejected);
};
return ZoneAwarePromise;
}();
ZoneAwarePromise["resolve"] = ZoneAwarePromise.resolve;
ZoneAwarePromise["reject"] = ZoneAwarePromise.reject;
ZoneAwarePromise["race"] = ZoneAwarePromise.race;
ZoneAwarePromise["all"] = ZoneAwarePromise.all;
var NativePromise = global[symbolPromise] = global["Promise"];
global["Promise"] = ZoneAwarePromise;
var symbolThenPatched = __symbol__("thenPatched");
function patchThen(Ctor) {
var proto = Ctor.prototype;
var originalThen = proto.then;
proto[symbolThen] = originalThen;
Ctor.prototype.then = function(onResolve, onReject) {
var _this = this;
var wrapped = new ZoneAwarePromise(function(resolve, reject) {
originalThen.call(_this, resolve, reject);
});
return wrapped.then(onResolve, onReject);
};
Ctor[symbolThenPatched] = true;
}
function zoneify(fn) {
return function() {
var resultPromise = fn.apply(this, arguments);
if (resultPromise instanceof ZoneAwarePromise) {
return resultPromise;
}
var ctor = resultPromise.constructor;
if (!ctor[symbolThenPatched]) {
patchThen(ctor);
}
return resultPromise;
};
}
if (NativePromise) {
patchThen(NativePromise);
var fetch_1 = global["fetch"];
if (typeof fetch_1 == "function") {
global["fetch"] = zoneify(fetch_1);
}
}
Promise[Zone.__symbol__("uncaughtPromiseErrors")] = _uncaughtPromiseErrors;
var blacklistedStackFramesSymbol = Zone.__symbol__("blacklistedStackFrames");
var NativeError = global[__symbol__("Error")] = global.Error;
var blackListedStackFrames = {};
var zoneAwareFrame1;
var zoneAwareFrame2;
global.Error = ZoneAwareError;
var stackRewrite = "stackRewrite";
function ZoneAwareError() {
var _this = this;
var error = NativeError.apply(this, arguments);
var originalStack = error["originalStack"] = error.stack;
if (ZoneAwareError[stackRewrite] && originalStack) {
var frames_1 = originalStack.split("\n");
var zoneFrame = _currentZoneFrame;
var i = 0;
while (!(frames_1[i] === zoneAwareFrame1 || frames_1[i] === zoneAwareFrame2) && i < frames_1.length) {
i++;
}
for (;i < frames_1.length && zoneFrame; i++) {
var frame = frames_1[i];
if (frame.trim()) {
switch (blackListedStackFrames[frame]) {
case 0:
frames_1.splice(i, 1);
i--;
break;

case 1:
if (zoneFrame.parent) {
zoneFrame = zoneFrame.parent;
} else {
zoneFrame = null;
}
frames_1.splice(i, 1);
i--;
break;

default:
frames_1[i] += " [" + zoneFrame.zone.name + "]";
}
}
}
try {
error.stack = error.zoneAwareStack = frames_1.join("\n");
} catch (e) {}
}
if (this instanceof NativeError && this.constructor != NativeError) {
Object.keys(error).concat("stack", "message").forEach(function(key) {
if (error[key] !== undefined) {
try {
_this[key] = error[key];
} catch (e) {}
}
});
return this;
}
return error;
}
ZoneAwareError.prototype = NativeError.prototype;
ZoneAwareError[blacklistedStackFramesSymbol] = blackListedStackFrames;
ZoneAwareError[stackRewrite] = false;
var specialPropertyNames = [ "stackTraceLimit", "captureStackTrace", "prepareStackTrace" ];
var nativeErrorProperties = Object.keys(NativeError);
if (nativeErrorProperties) {
nativeErrorProperties.forEach(function(prop) {
if (specialPropertyNames.filter(function(sp) {
return sp === prop;
}).length === 0) {
Object.defineProperty(ZoneAwareError, prop, {
get: function() {
return NativeError[prop];
},
set: function(value) {
NativeError[prop] = value;
}
});
}
});
}
if (NativeError.hasOwnProperty("stackTraceLimit")) {
NativeError.stackTraceLimit = Math.max(NativeError.stackTraceLimit, 15);
Object.defineProperty(ZoneAwareError, "stackTraceLimit", {
get: function() {
return NativeError.stackTraceLimit;
},
set: function(value) {
return NativeError.stackTraceLimit = value;
}
});
}
if (NativeError.hasOwnProperty("captureStackTrace")) {
Object.defineProperty(ZoneAwareError, "captureStackTrace", {
value: function zoneCaptureStackTrace(targetObject, constructorOpt) {
NativeError.captureStackTrace(targetObject, constructorOpt);
}
});
}
Object.defineProperty(ZoneAwareError, "prepareStackTrace", {
get: function() {
return NativeError.prepareStackTrace;
},
set: function(value) {
if (!value || typeof value !== "function") {
return NativeError.prepareStackTrace = value;
}
return NativeError.prepareStackTrace = function(error, structuredStackTrace) {
if (structuredStackTrace) {
for (var i = 0; i < structuredStackTrace.length; i++) {
var st = structuredStackTrace[i];
if (st.getFunctionName() === "zoneCaptureStackTrace") {
structuredStackTrace.splice(i, 1);
break;
}
}
}
return value.apply(this, [ error, structuredStackTrace ]);
};
}
});
var detectZone = Zone.current.fork({
name: "detect",
onHandleError: function(parentZD, current, target, error) {
if (error.originalStack && Error === ZoneAwareError) {
var frames_2 = error.originalStack.split(/\n/);
var runFrame = false, runGuardedFrame = false, runTaskFrame = false;
while (frames_2.length) {
var frame = frames_2.shift();
if (/:\d+:\d+/.test(frame)) {
var fnName = frame.split("(")[0].split("@")[0];
var frameType = 1;
if (fnName.indexOf("ZoneAwareError") !== -1) {
zoneAwareFrame1 = frame;
zoneAwareFrame2 = frame.replace("Error.", "");
blackListedStackFrames[zoneAwareFrame2] = 0;
}
if (fnName.indexOf("runGuarded") !== -1) {
runGuardedFrame = true;
} else if (fnName.indexOf("runTask") !== -1) {
runTaskFrame = true;
} else if (fnName.indexOf("run") !== -1) {
runFrame = true;
} else {
frameType = 0;
}
blackListedStackFrames[frame] = frameType;
if (runFrame && runGuardedFrame && runTaskFrame) {
ZoneAwareError[stackRewrite] = true;
break;
}
}
}
}
return false;
}
});
var childDetectZone = detectZone.fork({
name: "child",
onScheduleTask: function(delegate, curr, target, task) {
return delegate.scheduleTask(target, task);
},
onInvokeTask: function(delegate, curr, target, task, applyThis, applyArgs) {
return delegate.invokeTask(target, task, applyThis, applyArgs);
},
onCancelTask: function(delegate, curr, target, task) {
return delegate.cancelTask(target, task);
},
onInvoke: function(delegate, curr, target, callback, applyThis, applyArgs, source) {
return delegate.invoke(target, callback, applyThis, applyArgs, source);
}
});
var originalStackTraceLimit = Error.stackTraceLimit;
Error.stackTraceLimit = 100;
childDetectZone.run(function() {
childDetectZone.runGuarded(function() {
var fakeTransitionTo = function(toState, fromState1, fromState2) {};
childDetectZone.scheduleEventTask(blacklistedStackFramesSymbol, function() {
childDetectZone.scheduleMacroTask(blacklistedStackFramesSymbol, function() {
childDetectZone.scheduleMicroTask(blacklistedStackFramesSymbol, function() {
throw new ZoneAwareError(ZoneAwareError, NativeError);
}, null, function(t) {
t._transitionTo = fakeTransitionTo;
t.invoke();
});
}, null, function(t) {
t._transitionTo = fakeTransitionTo;
t.invoke();
}, function() {});
}, null, function(t) {
t._transitionTo = fakeTransitionTo;
t.invoke();
}, function() {});
});
});
Error.stackTraceLimit = originalStackTraceLimit;
return global["Zone"] = Zone;
}(typeof window !== "undefined" && window || typeof self !== "undefined" && self || global);
var zoneSymbol = function(n) {
return "__zone_symbol__" + n;
};
var _global$1 = typeof window === "object" && window || typeof self === "object" && self || global;
var isWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
var isNode = !("nw" in _global$1) && typeof process !== "undefined" && {}.toString.call(process) === "[object process]";
var isMix = typeof process !== "undefined" && {}.toString.call(process) === "[object process]" && !isWebWorker && !!(typeof window !== "undefined" && window["HTMLElement"]);
function patchProperty(obj, prop) {
var desc = Object.getOwnPropertyDescriptor(obj, prop) || {
enumerable: true,
configurable: true
};
if (!desc.configurable) {
return;
}
delete desc.writable;
delete desc.value;
var originalDescGet = desc.get;
var eventName = prop.substr(2);
var _prop = zoneSymbol("_" + prop);
desc.set = function(newValue) {
var target = this;
if (!target && obj === _global$1) {
target = _global$1;
}
if (!target) {
return;
}
var previousValue = target[_prop];
if (previousValue) {
target.removeEventListener(eventName, previousValue);
}
if (typeof newValue === "function") {
var wrapFn = function(event) {
var result = newValue.apply(this, arguments);
if (result != undefined && !result) {
event.preventDefault();
}
return result;
};
target[_prop] = wrapFn;
target.addEventListener(eventName, wrapFn, false);
} else {
target[_prop] = null;
}
};
desc.get = function() {
var target = this;
if (!target && obj === _global$1) {
target = _global$1;
}
if (!target) {
return null;
}
if (target.hasOwnProperty(_prop)) {
return target[_prop];
} else if (originalDescGet) {
var value = originalDescGet.apply(this);
if (value) {
desc.set.apply(this, [ value ]);
if (typeof target["removeAttribute"] === "function") {
target.removeAttribute(prop);
}
return value;
}
}
return null;
};
Object.defineProperty(obj, prop, desc);
}
function patchOnProperties(obj, properties) {
if (properties) {
for (var i = 0; i < properties.length; i++) {
patchProperty(obj, "on" + properties[i]);
}
} else {
var onProperties = [];
for (var prop in obj) {
if (prop.substr(0, 2) == "on") {
onProperties.push(prop);
}
}
for (var j = 0; j < onProperties.length; j++) {
patchProperty(obj, onProperties[j]);
}
}
}
var EVENT_TASKS = zoneSymbol("eventTasks");
var ADD_EVENT_LISTENER = "addEventListener";
var REMOVE_EVENT_LISTENER = "removeEventListener";
function compareEventListenerOptions(left, right) {
var leftCapture = typeof left === "boolean" ? left : typeof left === "object" ? left && left.capture : false;
var rightCapture = typeof right === "boolean" ? right : typeof right === "object" ? right && right.capture : false;
return !!leftCapture === !!rightCapture;
}
function findExistingRegisteredTask(target, handler, name, options, remove) {
var eventTasks = target[EVENT_TASKS];
if (eventTasks) {
for (var i = 0; i < eventTasks.length; i++) {
var eventTask = eventTasks[i];
var data = eventTask.data;
var listener = data.handler;
if ((data.handler === handler || listener.listener === handler) && compareEventListenerOptions(data.options, options) && data.eventName === name) {
if (remove) {
eventTasks.splice(i, 1);
}
return eventTask;
}
}
}
return null;
}
function findAllExistingRegisteredTasks(target, name, remove) {
var eventTasks = target[EVENT_TASKS];
if (eventTasks) {
var result = [];
for (var i = eventTasks.length - 1; i >= 0; i--) {
var eventTask = eventTasks[i];
var data = eventTask.data;
if (data.eventName === name) {
result.push(eventTask);
if (remove) {
eventTasks.splice(i, 1);
}
}
}
return result;
}
return null;
}
function attachRegisteredEvent(target, eventTask, isPrepend) {
var eventTasks = target[EVENT_TASKS];
if (!eventTasks) {
eventTasks = target[EVENT_TASKS] = [];
}
if (isPrepend) {
eventTasks.unshift(eventTask);
} else {
eventTasks.push(eventTask);
}
}
var defaultListenerMetaCreator = function(self, args) {
return {
options: args[2],
eventName: args[0],
handler: args[1],
target: self || _global$1,
name: args[0],
crossContext: false,
invokeAddFunc: function(addFnSymbol, delegate) {
if (!this.crossContext) {
if (delegate && delegate.invoke) {
return this.target[addFnSymbol](this.eventName, delegate.invoke, this.options);
} else {
return this.target[addFnSymbol](this.eventName, delegate, this.options);
}
} else {
try {
return this.target[addFnSymbol](this.eventName, delegate, this.options);
} catch (err) {}
}
},
invokeRemoveFunc: function(removeFnSymbol, delegate) {
if (!this.crossContext) {
if (delegate && delegate.invoke) {
return this.target[removeFnSymbol](this.eventName, delegate.invoke, this.options);
} else {
return this.target[removeFnSymbol](this.eventName, delegate, this.options);
}
} else {
try {
return this.target[removeFnSymbol](this.eventName, delegate, this.options);
} catch (err) {}
}
}
};
};
function makeZoneAwareAddListener(addFnName, removeFnName, useCapturingParam, allowDuplicates, isPrepend, metaCreator) {
if (useCapturingParam === void 0) {
useCapturingParam = true;
}
if (allowDuplicates === void 0) {
allowDuplicates = false;
}
if (isPrepend === void 0) {
isPrepend = false;
}
if (metaCreator === void 0) {
metaCreator = defaultListenerMetaCreator;
}
var addFnSymbol = zoneSymbol(addFnName);
var removeFnSymbol = zoneSymbol(removeFnName);
var defaultUseCapturing = useCapturingParam ? false : undefined;
function scheduleEventListener(eventTask) {
var meta = eventTask.data;
attachRegisteredEvent(meta.target, eventTask, isPrepend);
return meta.invokeAddFunc(addFnSymbol, eventTask);
}
function cancelEventListener(eventTask) {
var meta = eventTask.data;
findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.options, true);
return meta.invokeRemoveFunc(removeFnSymbol, eventTask);
}
return function zoneAwareAddListener(self, args) {
var data = metaCreator(self, args);
data.options = data.options || defaultUseCapturing;
var delegate = null;
if (typeof data.handler == "function") {
delegate = data.handler;
} else if (data.handler && data.handler.handleEvent) {
delegate = function(event) {
return data.handler.handleEvent(event);
};
}
var validZoneHandler = false;
try {
validZoneHandler = data.handler && data.handler.toString() === "[object FunctionWrapper]";
} catch (error) {
data.crossContext = true;
return data.invokeAddFunc(addFnSymbol, data.handler);
}
if (!delegate || validZoneHandler) {
return data.invokeAddFunc(addFnSymbol, data.handler);
}
if (!allowDuplicates) {
var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.options, false);
if (eventTask) {
return data.invokeAddFunc(addFnSymbol, eventTask);
}
}
var zone = Zone.current;
var source = data.target.constructor["name"] + "." + addFnName + ":" + data.eventName;
zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);
};
}
function makeZoneAwareRemoveListener(fnName, useCapturingParam, metaCreator) {
if (useCapturingParam === void 0) {
useCapturingParam = true;
}
if (metaCreator === void 0) {
metaCreator = defaultListenerMetaCreator;
}
var symbol = zoneSymbol(fnName);
var defaultUseCapturing = useCapturingParam ? false : undefined;
return function zoneAwareRemoveListener(self, args) {
var data = metaCreator(self, args);
data.options = data.options || defaultUseCapturing;
var delegate = null;
if (typeof data.handler == "function") {
delegate = data.handler;
} else if (data.handler && data.handler.handleEvent) {
delegate = function(event) {
return data.handler.handleEvent(event);
};
}
var validZoneHandler = false;
try {
validZoneHandler = data.handler && data.handler.toString() === "[object FunctionWrapper]";
} catch (error) {
data.crossContext = true;
return data.invokeRemoveFunc(symbol, data.handler);
}
if (!delegate || validZoneHandler) {
return data.invokeRemoveFunc(symbol, data.handler);
}
var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.options, true);
if (eventTask) {
eventTask.zone.cancelTask(eventTask);
} else {
data.invokeRemoveFunc(symbol, data.handler);
}
};
}
function makeZoneAwareRemoveAllListeners(fnName) {
var symbol = zoneSymbol(fnName);
return function zoneAwareRemoveAllListener(self, args) {
var target = self || _global$1;
if (args.length === 0) {
target[EVENT_TASKS] = [];
target[symbol]();
return;
}
var eventName = args[0];
findAllExistingRegisteredTasks(target, eventName, true);
target[symbol](eventName);
};
}
function makeZoneAwareListeners(fnName) {
return function zoneAwareEventListeners(self, args) {
var eventName = args[0];
var target = self || _global$1;
if (!target[EVENT_TASKS]) {
return [];
}
return target[EVENT_TASKS].filter(function(task) {
return task.data["eventName"] === eventName;
}).map(function(task) {
return task.data["handler"];
});
};
}
function patchEventTargetMethods(obj, addFnName, removeFnName, metaCreator) {
if (addFnName === void 0) {
addFnName = ADD_EVENT_LISTENER;
}
if (removeFnName === void 0) {
removeFnName = REMOVE_EVENT_LISTENER;
}
if (metaCreator === void 0) {
metaCreator = defaultListenerMetaCreator;
}
if (obj && obj[addFnName]) {
patchMethod(obj, addFnName, function() {
return makeZoneAwareAddListener(addFnName, removeFnName, true, false, false, metaCreator);
});
patchMethod(obj, removeFnName, function() {
return makeZoneAwareRemoveListener(removeFnName, true, metaCreator);
});
return true;
} else {
return false;
}
}
function createNamedFn(name, delegate) {
try {
return Function("f", "return function " + name + "(){return f(this, arguments)}")(delegate);
} catch (error) {
return function() {
return delegate(this, arguments);
};
}
}
function patchMethod(target, name, patchFn) {
var proto = target;
while (proto && Object.getOwnPropertyNames(proto).indexOf(name) === -1) {
proto = Object.getPrototypeOf(proto);
}
if (!proto && target[name]) {
proto = target;
}
var delegateName = zoneSymbol(name);
var delegate;
if (proto && !(delegate = proto[delegateName])) {
delegate = proto[delegateName] = proto[name];
proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));
attachOriginToPatched(proto[name], delegate);
}
return delegate;
}
function patchMacroTask(obj, funcName, metaCreator) {
var setNative = null;
function scheduleTask(task) {
var data = task.data;
data.args[data.callbackIndex] = function() {
task.invoke.apply(this, arguments);
};
setNative.apply(data.target, data.args);
return task;
}
setNative = patchMethod(obj, funcName, function(delegate) {
return function(self, args) {
var meta = metaCreator(self, args);
if (meta.callbackIndex >= 0 && typeof args[meta.callbackIndex] === "function") {
var task = Zone.current.scheduleMacroTask(meta.name, args[meta.callbackIndex], meta, scheduleTask, null);
return task;
} else {
return delegate.apply(self, args);
}
};
});
}
function patchMicroTask(obj, funcName, metaCreator) {
var setNative = null;
function scheduleTask(task) {
var data = task.data;
data.args[data.callbackIndex] = function() {
task.invoke.apply(this, arguments);
};
setNative.apply(data.target, data.args);
return task;
}
setNative = patchMethod(obj, funcName, function(delegate) {
return function(self, args) {
var meta = metaCreator(self, args);
if (meta.callbackIndex >= 0 && typeof args[meta.callbackIndex] === "function") {
var task = Zone.current.scheduleMicroTask(meta.name, args[meta.callbackIndex], meta, scheduleTask);
return task;
} else {
return delegate.apply(self, args);
}
};
});
}
function findEventTask(target, evtName) {
var eventTasks = target[zoneSymbol("eventTasks")];
var result = [];
if (eventTasks) {
for (var i = 0; i < eventTasks.length; i++) {
var eventTask = eventTasks[i];
var data = eventTask.data;
var eventName = data && data.eventName;
if (eventName === evtName) {
result.push(eventTask);
}
}
}
return result;
}
function attachOriginToPatched(patched, original) {
patched[zoneSymbol("OriginalDelegate")] = original;
}
Zone[zoneSymbol("patchEventTargetMethods")] = patchEventTargetMethods;
Zone[zoneSymbol("patchOnProperties")] = patchOnProperties;
var callAndReturnFirstParam = function(fn) {
return function(self, args) {
fn(self, args);
return self;
};
};
var EE_ADD_LISTENER = "addListener";
var EE_PREPEND_LISTENER = "prependListener";
var EE_REMOVE_LISTENER = "removeListener";
var EE_REMOVE_ALL_LISTENER = "removeAllListeners";
var EE_LISTENERS = "listeners";
var EE_ON = "on";
var zoneAwareAddListener = callAndReturnFirstParam(makeZoneAwareAddListener(EE_ADD_LISTENER, EE_REMOVE_LISTENER, false, true, false));
var zoneAwarePrependListener = callAndReturnFirstParam(makeZoneAwareAddListener(EE_PREPEND_LISTENER, EE_REMOVE_LISTENER, false, true, true));
var zoneAwareRemoveListener = callAndReturnFirstParam(makeZoneAwareRemoveListener(EE_REMOVE_LISTENER, false));
var zoneAwareRemoveAllListeners = callAndReturnFirstParam(makeZoneAwareRemoveAllListeners(EE_REMOVE_ALL_LISTENER));
var zoneAwareListeners = makeZoneAwareListeners(EE_LISTENERS);
function patchEventEmitterMethods(obj) {
if (obj && obj.addListener) {
patchMethod(obj, EE_ADD_LISTENER, function() {
return zoneAwareAddListener;
});
patchMethod(obj, EE_PREPEND_LISTENER, function() {
return zoneAwarePrependListener;
});
patchMethod(obj, EE_REMOVE_LISTENER, function() {
return zoneAwareRemoveListener;
});
patchMethod(obj, EE_REMOVE_ALL_LISTENER, function() {
return zoneAwareRemoveAllListeners;
});
patchMethod(obj, EE_LISTENERS, function() {
return zoneAwareListeners;
});
obj[EE_ON] = obj[EE_ADD_LISTENER];
return true;
} else {
return false;
}
}
var events;
try {
events = __webpack_require__(592);
} catch (err) {}
if (events && events.EventEmitter) {
patchEventEmitterMethods(events.EventEmitter.prototype);
}
var fs;
try {
fs = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "fs"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
} catch (err) {}
var TO_PATCH_MACROTASK_METHODS = [ "access", "appendFile", "chmod", "chown", "close", "exists", "fchmod", "fchown", "fdatasync", "fstat", "fsync", "ftruncate", "futimes", "lchmod", "lchown", "link", "lstat", "mkdir", "mkdtemp", "open", "read", "readdir", "readFile", "readlink", "realpath", "rename", "rmdir", "stat", "symlink", "truncate", "unlink", "utimes", "write", "writeFile" ];
if (fs) {
TO_PATCH_MACROTASK_METHODS.filter(function(name) {
return !!fs[name] && typeof fs[name] === "function";
}).forEach(function(name) {
patchMacroTask(fs, name, function(self, args) {
return {
name: "fs." + name,
args: args,
callbackIndex: args.length > 0 ? args.length - 1 : -1,
target: self
};
});
});
}
function patchTimer(window, setName, cancelName, nameSuffix) {
var setNative = null;
var clearNative = null;
setName += nameSuffix;
cancelName += nameSuffix;
var tasksByHandleId = {};
function scheduleTask(task) {
var data = task.data;
function timer() {
try {
task.invoke.apply(this, arguments);
} finally {
delete tasksByHandleId[data.handleId];
}
}
data.args[0] = timer;
data.handleId = setNative.apply(window, data.args);
tasksByHandleId[data.handleId] = task;
return task;
}
function clearTask(task) {
delete tasksByHandleId[task.data.handleId];
return clearNative(task.data.handleId);
}
setNative = patchMethod(window, setName, function(delegate) {
return function(self, args) {
if (typeof args[0] === "function") {
var zone = Zone.current;
var options = {
handleId: null,
isPeriodic: nameSuffix === "Interval",
delay: nameSuffix === "Timeout" || nameSuffix === "Interval" ? args[1] || 0 : null,
args: args
};
var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);
if (!task) {
return task;
}
var handle = task.data.handleId;
if (handle && handle.ref && handle.unref && typeof handle.ref === "function" && typeof handle.unref === "function") {
task.ref = handle.ref.bind(handle);
task.unref = handle.unref.bind(handle);
}
return task;
} else {
return delegate.apply(window, args);
}
};
});
clearNative = patchMethod(window, cancelName, function(delegate) {
return function(self, args) {
var task = typeof args[0] === "number" ? tasksByHandleId[args[0]] : args[0];
if (task && typeof task.type === "string") {
if (task.state !== "notScheduled" && (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {
task.zone.cancelTask(task);
}
} else {
delegate.apply(window, args);
}
};
});
}
function patchFuncToString() {
var originalFunctionToString = Function.prototype.toString;
var g = typeof window !== "undefined" && window || typeof self !== "undefined" && self || global;
Function.prototype.toString = function() {
if (typeof this === "function") {
if (this[zoneSymbol("OriginalDelegate")]) {
return originalFunctionToString.apply(this[zoneSymbol("OriginalDelegate")], arguments);
}
if (this === Promise) {
var nativePromise = g[zoneSymbol("Promise")];
if (nativePromise) {
return originalFunctionToString.apply(nativePromise, arguments);
}
}
if (this === Error) {
var nativeError = g[zoneSymbol("Error")];
if (nativeError) {
return originalFunctionToString.apply(nativeError, arguments);
}
}
}
return originalFunctionToString.apply(this, arguments);
};
}
function patchObjectToString() {
var originalObjectToString = Object.prototype.toString;
Object.prototype.toString = function() {
if (this instanceof Promise) {
return "[object Promise]";
}
return originalObjectToString.apply(this, arguments);
};
}
var set = "set";
var clear = "clear";
var _global = typeof window === "object" && window || typeof self === "object" && self || global;
var timers = __webpack_require__(593);
patchTimer(timers, set, clear, "Timeout");
patchTimer(timers, set, clear, "Interval");
patchTimer(timers, set, clear, "Immediate");
var shouldPatchGlobalTimers = global.setTimeout !== timers.setTimeout;
if (shouldPatchGlobalTimers) {
patchTimer(_global, set, clear, "Timeout");
patchTimer(_global, set, clear, "Interval");
patchTimer(_global, set, clear, "Immediate");
}
patchProcess();
handleUnhandledPromiseRejection();
patchFuncToString();
patchObjectToString();
var crypto;
try {
crypto = __webpack_require__(595);
} catch (err) {}
if (crypto) {
var methodNames = [ "randomBytes", "pbkdf2" ];
methodNames.forEach(function(name) {
patchMacroTask(crypto, name, function(self, args) {
return {
name: "crypto." + name,
args: args,
callbackIndex: args.length > 0 && typeof args[args.length - 1] === "function" ? args.length - 1 : -1,
target: crypto
};
});
});
}
function patchProcess() {
patchMicroTask(process, "nextTick", function(self, args) {
return {
name: "process.nextTick",
args: args,
callbackIndex: args.length > 0 && typeof args[0] === "function" ? 0 : -1,
target: process
};
});
}
function findProcessPromiseRejectionHandler(evtName) {
return function(e) {
var eventTasks = findEventTask(process, evtName);
eventTasks.forEach(function(eventTask) {
if (evtName === "unhandledRejection") {
eventTask.invoke(e.rejection, e.promise);
} else if (evtName === "rejectionHandled") {
eventTask.invoke(e.promise);
}
});
};
}
function handleUnhandledPromiseRejection() {
Zone[zoneSymbol("unhandledPromiseRejectionHandler")] = findProcessPromiseRejectionHandler("unhandledRejection");
Zone[zoneSymbol("rejectionHandledHandler")] = findProcessPromiseRejectionHandler("rejectionHandled");
}
});
}, function(module, exports) {
function EventEmitter() {
this._events = this._events || {};
this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;
EventEmitter.defaultMaxListeners = 10;
EventEmitter.prototype.setMaxListeners = function(n) {
if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError("n must be a positive number");
this._maxListeners = n;
return this;
};
EventEmitter.prototype.emit = function(type) {
var er, handler, len, args, i, listeners;
if (!this._events) this._events = {};
if (type === "error") {
if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
er = arguments[1];
if (er instanceof Error) {
throw er;
} else {
var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
err.context = er;
throw err;
}
}
}
handler = this._events[type];
if (isUndefined(handler)) return false;
if (isFunction(handler)) {
switch (arguments.length) {
case 1:
handler.call(this);
break;

case 2:
handler.call(this, arguments[1]);
break;

case 3:
handler.call(this, arguments[1], arguments[2]);
break;

default:
args = Array.prototype.slice.call(arguments, 1);
handler.apply(this, args);
}
} else if (isObject(handler)) {
args = Array.prototype.slice.call(arguments, 1);
listeners = handler.slice();
len = listeners.length;
for (i = 0; i < len; i++) listeners[i].apply(this, args);
}
return true;
};
EventEmitter.prototype.addListener = function(type, listener) {
var m;
if (!isFunction(listener)) throw TypeError("listener must be a function");
if (!this._events) this._events = {};
if (this._events.newListener) this.emit("newListener", type, isFunction(listener.listener) ? listener.listener : listener);
if (!this._events[type]) this._events[type] = listener; else if (isObject(this._events[type])) this._events[type].push(listener); else this._events[type] = [ this._events[type], listener ];
if (isObject(this._events[type]) && !this._events[type].warned) {
if (!isUndefined(this._maxListeners)) {
m = this._maxListeners;
} else {
m = EventEmitter.defaultMaxListeners;
}
if (m && m > 0 && this._events[type].length > m) {
this._events[type].warned = true;
console.error("(node) warning: possible EventEmitter memory " + "leak detected. %d listeners added. " + "Use emitter.setMaxListeners() to increase limit.", this._events[type].length);
if (typeof console.trace === "function") {
console.trace();
}
}
}
return this;
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.once = function(type, listener) {
if (!isFunction(listener)) throw TypeError("listener must be a function");
var fired = false;
function g() {
this.removeListener(type, g);
if (!fired) {
fired = true;
listener.apply(this, arguments);
}
}
g.listener = listener;
this.on(type, g);
return this;
};
EventEmitter.prototype.removeListener = function(type, listener) {
var list, position, length, i;
if (!isFunction(listener)) throw TypeError("listener must be a function");
if (!this._events || !this._events[type]) return this;
list = this._events[type];
length = list.length;
position = -1;
if (list === listener || isFunction(list.listener) && list.listener === listener) {
delete this._events[type];
if (this._events.removeListener) this.emit("removeListener", type, listener);
} else if (isObject(list)) {
for (i = length; i-- > 0; ) {
if (list[i] === listener || list[i].listener && list[i].listener === listener) {
position = i;
break;
}
}
if (position < 0) return this;
if (list.length === 1) {
list.length = 0;
delete this._events[type];
} else {
list.splice(position, 1);
}
if (this._events.removeListener) this.emit("removeListener", type, listener);
}
return this;
};
EventEmitter.prototype.removeAllListeners = function(type) {
var key, listeners;
if (!this._events) return this;
if (!this._events.removeListener) {
if (arguments.length === 0) this._events = {}; else if (this._events[type]) delete this._events[type];
return this;
}
if (arguments.length === 0) {
for (key in this._events) {
if (key === "removeListener") continue;
this.removeAllListeners(key);
}
this.removeAllListeners("removeListener");
this._events = {};
return this;
}
listeners = this._events[type];
if (isFunction(listeners)) {
this.removeListener(type, listeners);
} else if (listeners) {
while (listeners.length) this.removeListener(type, listeners[listeners.length - 1]);
}
delete this._events[type];
return this;
};
EventEmitter.prototype.listeners = function(type) {
var ret;
if (!this._events || !this._events[type]) ret = []; else if (isFunction(this._events[type])) ret = [ this._events[type] ]; else ret = this._events[type].slice();
return ret;
};
EventEmitter.prototype.listenerCount = function(type) {
if (this._events) {
var evlistener = this._events[type];
if (isFunction(evlistener)) return 1; else if (evlistener) return evlistener.length;
}
return 0;
};
EventEmitter.listenerCount = function(emitter, type) {
return emitter.listenerCount(type);
};
function isFunction(arg) {
return typeof arg === "function";
}
function isNumber(arg) {
return typeof arg === "number";
}
function isObject(arg) {
return typeof arg === "object" && arg !== null;
}
function isUndefined(arg) {
return arg === void 0;
}
}, function(module, exports, __webpack_require__) {
var nextTick = __webpack_require__(594).nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;
exports.setTimeout = function() {
return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout = exports.clearInterval = function(timeout) {
timeout.close();
};
function Timeout(id, clearFn) {
this._id = id;
this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
this._clearFn.call(window, this._id);
};
exports.enroll = function(item, msecs) {
clearTimeout(item._idleTimeoutId);
item._idleTimeout = msecs;
};
exports.unenroll = function(item) {
clearTimeout(item._idleTimeoutId);
item._idleTimeout = -1;
};
exports._unrefActive = exports.active = function(item) {
clearTimeout(item._idleTimeoutId);
var msecs = item._idleTimeout;
if (msecs >= 0) {
item._idleTimeoutId = setTimeout(function onTimeout() {
if (item._onTimeout) item._onTimeout();
}, msecs);
}
};
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
var id = nextImmediateId++;
var args = arguments.length < 2 ? false : slice.call(arguments, 1);
immediateIds[id] = true;
nextTick(function onNextTick() {
if (immediateIds[id]) {
if (args) {
fn.apply(null, args);
} else {
fn.call(null);
}
exports.clearImmediate(id);
}
});
return id;
};
exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
delete immediateIds[id];
};
}, function(module, exports) {
var process = module.exports = {};
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
throw new Error("clearTimeout has not been defined");
}
(function() {
try {
if (typeof setTimeout === "function") {
cachedSetTimeout = setTimeout;
} else {
cachedSetTimeout = defaultSetTimout;
}
} catch (e) {
cachedSetTimeout = defaultSetTimout;
}
try {
if (typeof clearTimeout === "function") {
cachedClearTimeout = clearTimeout;
} else {
cachedClearTimeout = defaultClearTimeout;
}
} catch (e) {
cachedClearTimeout = defaultClearTimeout;
}
})();
function runTimeout(fun) {
if (cachedSetTimeout === setTimeout) {
return setTimeout(fun, 0);
}
if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
cachedSetTimeout = setTimeout;
return setTimeout(fun, 0);
}
try {
return cachedSetTimeout(fun, 0);
} catch (e) {
try {
return cachedSetTimeout.call(null, fun, 0);
} catch (e) {
return cachedSetTimeout.call(this, fun, 0);
}
}
}
function runClearTimeout(marker) {
if (cachedClearTimeout === clearTimeout) {
return clearTimeout(marker);
}
if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
cachedClearTimeout = clearTimeout;
return clearTimeout(marker);
}
try {
return cachedClearTimeout(marker);
} catch (e) {
try {
return cachedClearTimeout.call(null, marker);
} catch (e) {
return cachedClearTimeout.call(this, marker);
}
}
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
if (!draining || !currentQueue) {
return;
}
draining = false;
if (currentQueue.length) {
queue = currentQueue.concat(queue);
} else {
queueIndex = -1;
}
if (queue.length) {
drainQueue();
}
}
function drainQueue() {
if (draining) {
return;
}
var timeout = runTimeout(cleanUpNextTick);
draining = true;
var len = queue.length;
while (len) {
currentQueue = queue;
queue = [];
while (++queueIndex < len) {
if (currentQueue) {
currentQueue[queueIndex].run();
}
}
queueIndex = -1;
len = queue.length;
}
currentQueue = null;
draining = false;
runClearTimeout(timeout);
}
process.nextTick = function(fun) {
var args = new Array(arguments.length - 1);
if (arguments.length > 1) {
for (var i = 1; i < arguments.length; i++) {
args[i - 1] = arguments[i];
}
}
queue.push(new Item(fun, args));
if (queue.length === 1 && !draining) {
runTimeout(drainQueue);
}
};
function Item(fun, array) {
this.fun = fun;
this.array = array;
}
Item.prototype.run = function() {
this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = "";
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
return [];
};
process.binding = function(name) {
throw new Error("process.binding is not supported");
};
process.cwd = function() {
return "/";
};
process.chdir = function(dir) {
throw new Error("process.chdir is not supported");
};
process.umask = function() {
return 0;
};
}, function(module, exports, __webpack_require__) {
var rng = __webpack_require__(596);
function error() {
var m = [].slice.call(arguments).join(" ");
throw new Error([ m, "we accept pull requests", "http://github.com/dominictarr/crypto-browserify" ].join("\n"));
}
exports.createHash = __webpack_require__(598);
exports.createHmac = __webpack_require__(614);
exports.randomBytes = function(size, callback) {
if (callback && callback.call) {
try {
callback.call(this, undefined, new Buffer(rng(size)));
} catch (err) {
callback(err);
}
} else {
return new Buffer(rng(size));
}
};
function each(a, f) {
for (var i in a) f(a[i], i);
}
exports.getHashes = function() {
return [ "sha1", "sha256", "sha512", "md5", "rmd160" ];
};
var p = __webpack_require__(615)(exports);
exports.pbkdf2 = p.pbkdf2;
exports.pbkdf2Sync = p.pbkdf2Sync;
each([ "createCredentials", "createCipher", "createCipheriv", "createDecipher", "createDecipheriv", "createSign", "createVerify", "createDiffieHellman" ], function(name) {
exports[name] = function() {
error("sorry,", name, "is not implemented yet");
};
});
}, function(module, exports, __webpack_require__) {
(function() {
var g = ("undefined" === typeof window ? global : window) || {};
_crypto = g.crypto || g.msCrypto || __webpack_require__(597);
module.exports = function(size) {
if (_crypto.getRandomValues) {
var bytes = new Buffer(size);
_crypto.getRandomValues(bytes);
return bytes;
} else if (_crypto.randomBytes) {
return _crypto.randomBytes(size);
} else throw new Error("secure random number generation not supported by this browser\n" + "use chrome, FireFox or Internet Explorer 11");
};
})();
}, function(module, exports) {}, function(module, exports, __webpack_require__) {
var createHash = __webpack_require__(599);
var md5 = toConstructor(__webpack_require__(611));
var rmd160 = toConstructor(__webpack_require__(613));
function toConstructor(fn) {
return function() {
var buffers = [];
var m = {
update: function(data, enc) {
if (!Buffer.isBuffer(data)) data = new Buffer(data, enc);
buffers.push(data);
return this;
},
digest: function(enc) {
var buf = Buffer.concat(buffers);
var r = fn(buf);
buffers = null;
return enc ? r.toString(enc) : r;
}
};
return m;
};
}
module.exports = function(alg) {
if ("md5" === alg) return new md5();
if ("rmd160" === alg) return new rmd160();
return createHash(alg);
};
}, function(module, exports, __webpack_require__) {
var exports = module.exports = function(alg) {
var Alg = exports[alg];
if (!Alg) throw new Error(alg + " is not supported (we accept pull requests)");
return new Alg();
};
var Buffer = __webpack_require__(600).Buffer;
var Hash = __webpack_require__(604)(Buffer);
exports.sha1 = __webpack_require__(605)(Buffer, Hash);
exports.sha256 = __webpack_require__(609)(Buffer, Hash);
exports.sha512 = __webpack_require__(610)(Buffer, Hash);
}, function(module, exports, __webpack_require__) {
"use strict";
var base64 = __webpack_require__(601);
var ieee754 = __webpack_require__(602);
var isArray = __webpack_require__(603);
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
exports.kMaxLength = kMaxLength();
function typedArraySupport() {
try {
var arr = new Uint8Array(1);
arr.__proto__ = {
__proto__: Uint8Array.prototype,
foo: function() {
return 42;
}
};
return arr.foo() === 42 && typeof arr.subarray === "function" && arr.subarray(1, 1).byteLength === 0;
} catch (e) {
return false;
}
}
function kMaxLength() {
return Buffer.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
}
function createBuffer(that, length) {
if (kMaxLength() < length) {
throw new RangeError("Invalid typed array length");
}
if (Buffer.TYPED_ARRAY_SUPPORT) {
that = new Uint8Array(length);
that.__proto__ = Buffer.prototype;
} else {
if (that === null) {
that = new Buffer(length);
}
that.length = length;
}
return that;
}
function Buffer(arg, encodingOrOffset, length) {
if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
return new Buffer(arg, encodingOrOffset, length);
}
if (typeof arg === "number") {
if (typeof encodingOrOffset === "string") {
throw new Error("If encoding is specified then the first argument must be a string");
}
return allocUnsafe(this, arg);
}
return from(this, arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192;
Buffer._augment = function(arr) {
arr.__proto__ = Buffer.prototype;
return arr;
};
function from(that, value, encodingOrOffset, length) {
if (typeof value === "number") {
throw new TypeError('"value" argument must not be a number');
}
if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
return fromArrayBuffer(that, value, encodingOrOffset, length);
}
if (typeof value === "string") {
return fromString(that, value, encodingOrOffset);
}
return fromObject(that, value);
}
Buffer.from = function(value, encodingOrOffset, length) {
return from(null, value, encodingOrOffset, length);
};
if (Buffer.TYPED_ARRAY_SUPPORT) {
Buffer.prototype.__proto__ = Uint8Array.prototype;
Buffer.__proto__ = Uint8Array;
if (typeof Symbol !== "undefined" && Symbol.species && Buffer[Symbol.species] === Buffer) {
Object.defineProperty(Buffer, Symbol.species, {
value: null,
configurable: true
});
}
}
function assertSize(size) {
if (typeof size !== "number") {
throw new TypeError('"size" argument must be a number');
} else if (size < 0) {
throw new RangeError('"size" argument must not be negative');
}
}
function alloc(that, size, fill, encoding) {
assertSize(size);
if (size <= 0) {
return createBuffer(that, size);
}
if (fill !== undefined) {
return typeof encoding === "string" ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
}
return createBuffer(that, size);
}
Buffer.alloc = function(size, fill, encoding) {
return alloc(null, size, fill, encoding);
};
function allocUnsafe(that, size) {
assertSize(size);
that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
if (!Buffer.TYPED_ARRAY_SUPPORT) {
for (var i = 0; i < size; ++i) {
that[i] = 0;
}
}
return that;
}
Buffer.allocUnsafe = function(size) {
return allocUnsafe(null, size);
};
Buffer.allocUnsafeSlow = function(size) {
return allocUnsafe(null, size);
};
function fromString(that, string, encoding) {
if (typeof encoding !== "string" || encoding === "") {
encoding = "utf8";
}
if (!Buffer.isEncoding(encoding)) {
throw new TypeError('"encoding" must be a valid string encoding');
}
var length = byteLength(string, encoding) | 0;
that = createBuffer(that, length);
var actual = that.write(string, encoding);
if (actual !== length) {
that = that.slice(0, actual);
}
return that;
}
function fromArrayLike(that, array) {
var length = array.length < 0 ? 0 : checked(array.length) | 0;
that = createBuffer(that, length);
for (var i = 0; i < length; i += 1) {
that[i] = array[i] & 255;
}
return that;
}
function fromArrayBuffer(that, array, byteOffset, length) {
array.byteLength;
if (byteOffset < 0 || array.byteLength < byteOffset) {
throw new RangeError("'offset' is out of bounds");
}
if (array.byteLength < byteOffset + (length || 0)) {
throw new RangeError("'length' is out of bounds");
}
if (byteOffset === undefined && length === undefined) {
array = new Uint8Array(array);
} else if (length === undefined) {
array = new Uint8Array(array, byteOffset);
} else {
array = new Uint8Array(array, byteOffset, length);
}
if (Buffer.TYPED_ARRAY_SUPPORT) {
that = array;
that.__proto__ = Buffer.prototype;
} else {
that = fromArrayLike(that, array);
}
return that;
}
function fromObject(that, obj) {
if (Buffer.isBuffer(obj)) {
var len = checked(obj.length) | 0;
that = createBuffer(that, len);
if (that.length === 0) {
return that;
}
obj.copy(that, 0, 0, len);
return that;
}
if (obj) {
if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
if (typeof obj.length !== "number" || isnan(obj.length)) {
return createBuffer(that, 0);
}
return fromArrayLike(that, obj);
}
if (obj.type === "Buffer" && isArray(obj.data)) {
return fromArrayLike(that, obj.data);
}
}
throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
}
function checked(length) {
if (length >= kMaxLength()) {
throw new RangeError("Attempt to allocate Buffer larger than maximum " + "size: 0x" + kMaxLength().toString(16) + " bytes");
}
return length | 0;
}
function SlowBuffer(length) {
if (+length != length) {
length = 0;
}
return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
return !!(b != null && b._isBuffer);
};
Buffer.compare = function compare(a, b) {
if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
throw new TypeError("Arguments must be Buffers");
}
if (a === b) return 0;
var x = a.length;
var y = b.length;
for (var i = 0, len = Math.min(x, y); i < len; ++i) {
if (a[i] !== b[i]) {
x = a[i];
y = b[i];
break;
}
}
if (x < y) return -1;
if (y < x) return 1;
return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
switch (String(encoding).toLowerCase()) {
case "hex":
case "utf8":
case "utf-8":
case "ascii":
case "latin1":
case "binary":
case "base64":
case "ucs2":
case "ucs-2":
case "utf16le":
case "utf-16le":
return true;

default:
return false;
}
};
Buffer.concat = function concat(list, length) {
if (!isArray(list)) {
throw new TypeError('"list" argument must be an Array of Buffers');
}
if (list.length === 0) {
return Buffer.alloc(0);
}
var i;
if (length === undefined) {
length = 0;
for (i = 0; i < list.length; ++i) {
length += list[i].length;
}
}
var buffer = Buffer.allocUnsafe(length);
var pos = 0;
for (i = 0; i < list.length; ++i) {
var buf = list[i];
if (!Buffer.isBuffer(buf)) {
throw new TypeError('"list" argument must be an Array of Buffers');
}
buf.copy(buffer, pos);
pos += buf.length;
}
return buffer;
};
function byteLength(string, encoding) {
if (Buffer.isBuffer(string)) {
return string.length;
}
if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
return string.byteLength;
}
if (typeof string !== "string") {
string = "" + string;
}
var len = string.length;
if (len === 0) return 0;
var loweredCase = false;
for (;;) {
switch (encoding) {
case "ascii":
case "latin1":
case "binary":
return len;

case "utf8":
case "utf-8":
case undefined:
return utf8ToBytes(string).length;

case "ucs2":
case "ucs-2":
case "utf16le":
case "utf-16le":
return len * 2;

case "hex":
return len >>> 1;

case "base64":
return base64ToBytes(string).length;

default:
if (loweredCase) return utf8ToBytes(string).length;
encoding = ("" + encoding).toLowerCase();
loweredCase = true;
}
}
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
var loweredCase = false;
if (start === undefined || start < 0) {
start = 0;
}
if (start > this.length) {
return "";
}
if (end === undefined || end > this.length) {
end = this.length;
}
if (end <= 0) {
return "";
}
end >>>= 0;
start >>>= 0;
if (end <= start) {
return "";
}
if (!encoding) encoding = "utf8";
while (true) {
switch (encoding) {
case "hex":
return hexSlice(this, start, end);

case "utf8":
case "utf-8":
return utf8Slice(this, start, end);

case "ascii":
return asciiSlice(this, start, end);

case "latin1":
case "binary":
return latin1Slice(this, start, end);

case "base64":
return base64Slice(this, start, end);

case "ucs2":
case "ucs-2":
case "utf16le":
case "utf-16le":
return utf16leSlice(this, start, end);

default:
if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
encoding = (encoding + "").toLowerCase();
loweredCase = true;
}
}
}
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
var i = b[n];
b[n] = b[m];
b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
var len = this.length;
if (len % 2 !== 0) {
throw new RangeError("Buffer size must be a multiple of 16-bits");
}
for (var i = 0; i < len; i += 2) {
swap(this, i, i + 1);
}
return this;
};
Buffer.prototype.swap32 = function swap32() {
var len = this.length;
if (len % 4 !== 0) {
throw new RangeError("Buffer size must be a multiple of 32-bits");
}
for (var i = 0; i < len; i += 4) {
swap(this, i, i + 3);
swap(this, i + 1, i + 2);
}
return this;
};
Buffer.prototype.swap64 = function swap64() {
var len = this.length;
if (len % 8 !== 0) {
throw new RangeError("Buffer size must be a multiple of 64-bits");
}
for (var i = 0; i < len; i += 8) {
swap(this, i, i + 7);
swap(this, i + 1, i + 6);
swap(this, i + 2, i + 5);
swap(this, i + 3, i + 4);
}
return this;
};
Buffer.prototype.toString = function toString() {
var length = this.length | 0;
if (length === 0) return "";
if (arguments.length === 0) return utf8Slice(this, 0, length);
return slowToString.apply(this, arguments);
};
Buffer.prototype.equals = function equals(b) {
if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
if (this === b) return true;
return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
var str = "";
var max = exports.INSPECT_MAX_BYTES;
if (this.length > 0) {
str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
if (this.length > max) str += " ... ";
}
return "<Buffer " + str + ">";
};
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
if (!Buffer.isBuffer(target)) {
throw new TypeError("Argument must be a Buffer");
}
if (start === undefined) {
start = 0;
}
if (end === undefined) {
end = target ? target.length : 0;
}
if (thisStart === undefined) {
thisStart = 0;
}
if (thisEnd === undefined) {
thisEnd = this.length;
}
if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
throw new RangeError("out of range index");
}
if (thisStart >= thisEnd && start >= end) {
return 0;
}
if (thisStart >= thisEnd) {
return -1;
}
if (start >= end) {
return 1;
}
start >>>= 0;
end >>>= 0;
thisStart >>>= 0;
thisEnd >>>= 0;
if (this === target) return 0;
var x = thisEnd - thisStart;
var y = end - start;
var len = Math.min(x, y);
var thisCopy = this.slice(thisStart, thisEnd);
var targetCopy = target.slice(start, end);
for (var i = 0; i < len; ++i) {
if (thisCopy[i] !== targetCopy[i]) {
x = thisCopy[i];
y = targetCopy[i];
break;
}
}
if (x < y) return -1;
if (y < x) return 1;
return 0;
};
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
if (buffer.length === 0) return -1;
if (typeof byteOffset === "string") {
encoding = byteOffset;
byteOffset = 0;
} else if (byteOffset > 2147483647) {
byteOffset = 2147483647;
} else if (byteOffset < -2147483648) {
byteOffset = -2147483648;
}
byteOffset = +byteOffset;
if (isNaN(byteOffset)) {
byteOffset = dir ? 0 : buffer.length - 1;
}
if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
if (byteOffset >= buffer.length) {
if (dir) return -1; else byteOffset = buffer.length - 1;
} else if (byteOffset < 0) {
if (dir) byteOffset = 0; else return -1;
}
if (typeof val === "string") {
val = Buffer.from(val, encoding);
}
if (Buffer.isBuffer(val)) {
if (val.length === 0) {
return -1;
}
return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
} else if (typeof val === "number") {
val = val & 255;
if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
if (dir) {
return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
} else {
return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
}
}
return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir);
}
throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
var indexSize = 1;
var arrLength = arr.length;
var valLength = val.length;
if (encoding !== undefined) {
encoding = String(encoding).toLowerCase();
if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
if (arr.length < 2 || val.length < 2) {
return -1;
}
indexSize = 2;
arrLength /= 2;
valLength /= 2;
byteOffset /= 2;
}
}
function read(buf, i) {
if (indexSize === 1) {
return buf[i];
} else {
return buf.readUInt16BE(i * indexSize);
}
}
var i;
if (dir) {
var foundIndex = -1;
for (i = byteOffset; i < arrLength; i++) {
if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
if (foundIndex === -1) foundIndex = i;
if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
} else {
if (foundIndex !== -1) i -= i - foundIndex;
foundIndex = -1;
}
}
} else {
if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
for (i = byteOffset; i >= 0; i--) {
var found = true;
for (var j = 0; j < valLength; j++) {
if (read(arr, i + j) !== read(val, j)) {
found = false;
break;
}
}
if (found) return i;
}
}
return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
offset = Number(offset) || 0;
var remaining = buf.length - offset;
if (!length) {
length = remaining;
} else {
length = Number(length);
if (length > remaining) {
length = remaining;
}
}
var strLen = string.length;
if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
if (length > strLen / 2) {
length = strLen / 2;
}
for (var i = 0; i < length; ++i) {
var parsed = parseInt(string.substr(i * 2, 2), 16);
if (isNaN(parsed)) return i;
buf[offset + i] = parsed;
}
return i;
}
function utf8Write(buf, string, offset, length) {
return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function latin1Write(buf, string, offset, length) {
return asciiWrite(buf, string, offset, length);
}
function base64Write(buf, string, offset, length) {
return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
if (offset === undefined) {
encoding = "utf8";
length = this.length;
offset = 0;
} else if (length === undefined && typeof offset === "string") {
encoding = offset;
length = this.length;
offset = 0;
} else if (isFinite(offset)) {
offset = offset | 0;
if (isFinite(length)) {
length = length | 0;
if (encoding === undefined) encoding = "utf8";
} else {
encoding = length;
length = undefined;
}
} else {
throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
}
var remaining = this.length - offset;
if (length === undefined || length > remaining) length = remaining;
if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
throw new RangeError("Attempt to write outside buffer bounds");
}
if (!encoding) encoding = "utf8";
var loweredCase = false;
for (;;) {
switch (encoding) {
case "hex":
return hexWrite(this, string, offset, length);

case "utf8":
case "utf-8":
return utf8Write(this, string, offset, length);

case "ascii":
return asciiWrite(this, string, offset, length);

case "latin1":
case "binary":
return latin1Write(this, string, offset, length);

case "base64":
return base64Write(this, string, offset, length);

case "ucs2":
case "ucs-2":
case "utf16le":
case "utf-16le":
return ucs2Write(this, string, offset, length);

default:
if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
encoding = ("" + encoding).toLowerCase();
loweredCase = true;
}
}
};
Buffer.prototype.toJSON = function toJSON() {
return {
type: "Buffer",
data: Array.prototype.slice.call(this._arr || this, 0)
};
};
function base64Slice(buf, start, end) {
if (start === 0 && end === buf.length) {
return base64.fromByteArray(buf);
} else {
return base64.fromByteArray(buf.slice(start, end));
}
}
function utf8Slice(buf, start, end) {
end = Math.min(buf.length, end);
var res = [];
var i = start;
while (i < end) {
var firstByte = buf[i];
var codePoint = null;
var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
if (i + bytesPerSequence <= end) {
var secondByte, thirdByte, fourthByte, tempCodePoint;
switch (bytesPerSequence) {
case 1:
if (firstByte < 128) {
codePoint = firstByte;
}
break;

case 2:
secondByte = buf[i + 1];
if ((secondByte & 192) === 128) {
tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
if (tempCodePoint > 127) {
codePoint = tempCodePoint;
}
}
break;

case 3:
secondByte = buf[i + 1];
thirdByte = buf[i + 2];
if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
codePoint = tempCodePoint;
}
}
break;

case 4:
secondByte = buf[i + 1];
thirdByte = buf[i + 2];
fourthByte = buf[i + 3];
if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
codePoint = tempCodePoint;
}
}
}
}
if (codePoint === null) {
codePoint = 65533;
bytesPerSequence = 1;
} else if (codePoint > 65535) {
codePoint -= 65536;
res.push(codePoint >>> 10 & 1023 | 55296);
codePoint = 56320 | codePoint & 1023;
}
res.push(codePoint);
i += bytesPerSequence;
}
return decodeCodePointsArray(res);
}
var MAX_ARGUMENTS_LENGTH = 4096;
function decodeCodePointsArray(codePoints) {
var len = codePoints.length;
if (len <= MAX_ARGUMENTS_LENGTH) {
return String.fromCharCode.apply(String, codePoints);
}
var res = "";
var i = 0;
while (i < len) {
res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
}
return res;
}
function asciiSlice(buf, start, end) {
var ret = "";
end = Math.min(buf.length, end);
for (var i = start; i < end; ++i) {
ret += String.fromCharCode(buf[i] & 127);
}
return ret;
}
function latin1Slice(buf, start, end) {
var ret = "";
end = Math.min(buf.length, end);
for (var i = start; i < end; ++i) {
ret += String.fromCharCode(buf[i]);
}
return ret;
}
function hexSlice(buf, start, end) {
var len = buf.length;
if (!start || start < 0) start = 0;
if (!end || end < 0 || end > len) end = len;
var out = "";
for (var i = start; i < end; ++i) {
out += toHex(buf[i]);
}
return out;
}
function utf16leSlice(buf, start, end) {
var bytes = buf.slice(start, end);
var res = "";
for (var i = 0; i < bytes.length; i += 2) {
res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
}
return res;
}
Buffer.prototype.slice = function slice(start, end) {
var len = this.length;
start = ~~start;
end = end === undefined ? len : ~~end;
if (start < 0) {
start += len;
if (start < 0) start = 0;
} else if (start > len) {
start = len;
}
if (end < 0) {
end += len;
if (end < 0) end = 0;
} else if (end > len) {
end = len;
}
if (end < start) end = start;
var newBuf;
if (Buffer.TYPED_ARRAY_SUPPORT) {
newBuf = this.subarray(start, end);
newBuf.__proto__ = Buffer.prototype;
} else {
var sliceLen = end - start;
newBuf = new Buffer(sliceLen, undefined);
for (var i = 0; i < sliceLen; ++i) {
newBuf[i] = this[i + start];
}
}
return newBuf;
};
function checkOffset(offset, ext, length) {
if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
offset = offset | 0;
byteLength = byteLength | 0;
if (!noAssert) checkOffset(offset, byteLength, this.length);
var val = this[offset];
var mul = 1;
var i = 0;
while (++i < byteLength && (mul *= 256)) {
val += this[offset + i] * mul;
}
return val;
};
Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
offset = offset | 0;
byteLength = byteLength | 0;
if (!noAssert) {
checkOffset(offset, byteLength, this.length);
}
var val = this[offset + --byteLength];
var mul = 1;
while (byteLength > 0 && (mul *= 256)) {
val += this[offset + --byteLength] * mul;
}
return val;
};
Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
if (!noAssert) checkOffset(offset, 1, this.length);
return this[offset];
};
Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 2, this.length);
return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 2, this.length);
return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 4, this.length);
return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
};
Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 4, this.length);
return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
offset = offset | 0;
byteLength = byteLength | 0;
if (!noAssert) checkOffset(offset, byteLength, this.length);
var val = this[offset];
var mul = 1;
var i = 0;
while (++i < byteLength && (mul *= 256)) {
val += this[offset + i] * mul;
}
mul *= 128;
if (val >= mul) val -= Math.pow(2, 8 * byteLength);
return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
offset = offset | 0;
byteLength = byteLength | 0;
if (!noAssert) checkOffset(offset, byteLength, this.length);
var i = byteLength;
var mul = 1;
var val = this[offset + --i];
while (i > 0 && (mul *= 256)) {
val += this[offset + --i] * mul;
}
mul *= 128;
if (val >= mul) val -= Math.pow(2, 8 * byteLength);
return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
if (!noAssert) checkOffset(offset, 1, this.length);
if (!(this[offset] & 128)) return this[offset];
return (255 - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 2, this.length);
var val = this[offset] | this[offset + 1] << 8;
return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 2, this.length);
var val = this[offset + 1] | this[offset] << 8;
return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 4, this.length);
return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 4, this.length);
return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 4, this.length);
return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 4, this.length);
return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 8, this.length);
return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 8, this.length);
return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
value = +value;
offset = offset | 0;
byteLength = byteLength | 0;
if (!noAssert) {
var maxBytes = Math.pow(2, 8 * byteLength) - 1;
checkInt(this, value, offset, byteLength, maxBytes, 0);
}
var mul = 1;
var i = 0;
this[offset] = value & 255;
while (++i < byteLength && (mul *= 256)) {
this[offset + i] = value / mul & 255;
}
return offset + byteLength;
};
Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
value = +value;
offset = offset | 0;
byteLength = byteLength | 0;
if (!noAssert) {
var maxBytes = Math.pow(2, 8 * byteLength) - 1;
checkInt(this, value, offset, byteLength, maxBytes, 0);
}
var i = byteLength - 1;
var mul = 1;
this[offset + i] = value & 255;
while (--i >= 0 && (mul *= 256)) {
this[offset + i] = value / mul & 255;
}
return offset + byteLength;
};
Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
this[offset] = value & 255;
return offset + 1;
};
function objectWriteUInt16(buf, value, offset, littleEndian) {
if (value < 0) value = 65535 + value + 1;
for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
}
}
Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
if (Buffer.TYPED_ARRAY_SUPPORT) {
this[offset] = value & 255;
this[offset + 1] = value >>> 8;
} else {
objectWriteUInt16(this, value, offset, true);
}
return offset + 2;
};
Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
if (Buffer.TYPED_ARRAY_SUPPORT) {
this[offset] = value >>> 8;
this[offset + 1] = value & 255;
} else {
objectWriteUInt16(this, value, offset, false);
}
return offset + 2;
};
function objectWriteUInt32(buf, value, offset, littleEndian) {
if (value < 0) value = 4294967295 + value + 1;
for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255;
}
}
Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
if (Buffer.TYPED_ARRAY_SUPPORT) {
this[offset + 3] = value >>> 24;
this[offset + 2] = value >>> 16;
this[offset + 1] = value >>> 8;
this[offset] = value & 255;
} else {
objectWriteUInt32(this, value, offset, true);
}
return offset + 4;
};
Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
if (Buffer.TYPED_ARRAY_SUPPORT) {
this[offset] = value >>> 24;
this[offset + 1] = value >>> 16;
this[offset + 2] = value >>> 8;
this[offset + 3] = value & 255;
} else {
objectWriteUInt32(this, value, offset, false);
}
return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) {
var limit = Math.pow(2, 8 * byteLength - 1);
checkInt(this, value, offset, byteLength, limit - 1, -limit);
}
var i = 0;
var mul = 1;
var sub = 0;
this[offset] = value & 255;
while (++i < byteLength && (mul *= 256)) {
if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
sub = 1;
}
this[offset + i] = (value / mul >> 0) - sub & 255;
}
return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) {
var limit = Math.pow(2, 8 * byteLength - 1);
checkInt(this, value, offset, byteLength, limit - 1, -limit);
}
var i = byteLength - 1;
var mul = 1;
var sub = 0;
this[offset + i] = value & 255;
while (--i >= 0 && (mul *= 256)) {
if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
sub = 1;
}
this[offset + i] = (value / mul >> 0) - sub & 255;
}
return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
if (value < 0) value = 255 + value + 1;
this[offset] = value & 255;
return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
if (Buffer.TYPED_ARRAY_SUPPORT) {
this[offset] = value & 255;
this[offset + 1] = value >>> 8;
} else {
objectWriteUInt16(this, value, offset, true);
}
return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
if (Buffer.TYPED_ARRAY_SUPPORT) {
this[offset] = value >>> 8;
this[offset + 1] = value & 255;
} else {
objectWriteUInt16(this, value, offset, false);
}
return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
if (Buffer.TYPED_ARRAY_SUPPORT) {
this[offset] = value & 255;
this[offset + 1] = value >>> 8;
this[offset + 2] = value >>> 16;
this[offset + 3] = value >>> 24;
} else {
objectWriteUInt32(this, value, offset, true);
}
return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
if (value < 0) value = 4294967295 + value + 1;
if (Buffer.TYPED_ARRAY_SUPPORT) {
this[offset] = value >>> 24;
this[offset + 1] = value >>> 16;
this[offset + 2] = value >>> 8;
this[offset + 3] = value & 255;
} else {
objectWriteUInt32(this, value, offset, false);
}
return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
if (offset + ext > buf.length) throw new RangeError("Index out of range");
if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
if (!noAssert) {
checkIEEE754(buf, value, offset, 4, 3.4028234663852886e38, -3.4028234663852886e38);
}
ieee754.write(buf, value, offset, littleEndian, 23, 4);
return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
if (!noAssert) {
checkIEEE754(buf, value, offset, 8, 1.7976931348623157e308, -1.7976931348623157e308);
}
ieee754.write(buf, value, offset, littleEndian, 52, 8);
return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
return writeDouble(this, value, offset, false, noAssert);
};
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
if (!start) start = 0;
if (!end && end !== 0) end = this.length;
if (targetStart >= target.length) targetStart = target.length;
if (!targetStart) targetStart = 0;
if (end > 0 && end < start) end = start;
if (end === start) return 0;
if (target.length === 0 || this.length === 0) return 0;
if (targetStart < 0) {
throw new RangeError("targetStart out of bounds");
}
if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
if (end < 0) throw new RangeError("sourceEnd out of bounds");
if (end > this.length) end = this.length;
if (target.length - targetStart < end - start) {
end = target.length - targetStart + start;
}
var len = end - start;
var i;
if (this === target && start < targetStart && targetStart < end) {
for (i = len - 1; i >= 0; --i) {
target[i + targetStart] = this[i + start];
}
} else if (len < 1e3 || !Buffer.TYPED_ARRAY_SUPPORT) {
for (i = 0; i < len; ++i) {
target[i + targetStart] = this[i + start];
}
} else {
Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
}
return len;
};
Buffer.prototype.fill = function fill(val, start, end, encoding) {
if (typeof val === "string") {
if (typeof start === "string") {
encoding = start;
start = 0;
end = this.length;
} else if (typeof end === "string") {
encoding = end;
end = this.length;
}
if (val.length === 1) {
var code = val.charCodeAt(0);
if (code < 256) {
val = code;
}
}
if (encoding !== undefined && typeof encoding !== "string") {
throw new TypeError("encoding must be a string");
}
if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) {
throw new TypeError("Unknown encoding: " + encoding);
}
} else if (typeof val === "number") {
val = val & 255;
}
if (start < 0 || this.length < start || this.length < end) {
throw new RangeError("Out of range index");
}
if (end <= start) {
return this;
}
start = start >>> 0;
end = end === undefined ? this.length : end >>> 0;
if (!val) val = 0;
var i;
if (typeof val === "number") {
for (i = start; i < end; ++i) {
this[i] = val;
}
} else {
var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
var len = bytes.length;
for (i = 0; i < end - start; ++i) {
this[i + start] = bytes[i % len];
}
}
return this;
};
var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
function base64clean(str) {
str = stringtrim(str).replace(INVALID_BASE64_RE, "");
if (str.length < 2) return "";
while (str.length % 4 !== 0) {
str = str + "=";
}
return str;
}
function stringtrim(str) {
if (str.trim) return str.trim();
return str.replace(/^\s+|\s+$/g, "");
}
function toHex(n) {
if (n < 16) return "0" + n.toString(16);
return n.toString(16);
}
function utf8ToBytes(string, units) {
units = units || Infinity;
var codePoint;
var length = string.length;
var leadSurrogate = null;
var bytes = [];
for (var i = 0; i < length; ++i) {
codePoint = string.charCodeAt(i);
if (codePoint > 55295 && codePoint < 57344) {
if (!leadSurrogate) {
if (codePoint > 56319) {
if ((units -= 3) > -1) bytes.push(239, 191, 189);
continue;
} else if (i + 1 === length) {
if ((units -= 3) > -1) bytes.push(239, 191, 189);
continue;
}
leadSurrogate = codePoint;
continue;
}
if (codePoint < 56320) {
if ((units -= 3) > -1) bytes.push(239, 191, 189);
leadSurrogate = codePoint;
continue;
}
codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
} else if (leadSurrogate) {
if ((units -= 3) > -1) bytes.push(239, 191, 189);
}
leadSurrogate = null;
if (codePoint < 128) {
if ((units -= 1) < 0) break;
bytes.push(codePoint);
} else if (codePoint < 2048) {
if ((units -= 2) < 0) break;
bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
} else if (codePoint < 65536) {
if ((units -= 3) < 0) break;
bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
} else if (codePoint < 1114112) {
if ((units -= 4) < 0) break;
bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
} else {
throw new Error("Invalid code point");
}
}
return bytes;
}
function asciiToBytes(str) {
var byteArray = [];
for (var i = 0; i < str.length; ++i) {
byteArray.push(str.charCodeAt(i) & 255);
}
return byteArray;
}
function utf16leToBytes(str, units) {
var c, hi, lo;
var byteArray = [];
for (var i = 0; i < str.length; ++i) {
if ((units -= 2) < 0) break;
c = str.charCodeAt(i);
hi = c >> 8;
lo = c % 256;
byteArray.push(lo);
byteArray.push(hi);
}
return byteArray;
}
function base64ToBytes(str) {
return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
for (var i = 0; i < length; ++i) {
if (i + offset >= dst.length || i >= src.length) break;
dst[i + offset] = src[i];
}
return i;
}
function isnan(val) {
return val !== val;
}
}, function(module, exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var i = 0, len = code.length; i < len; ++i) {
lookup[i] = code[i];
revLookup[code.charCodeAt(i)] = i;
}
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function placeHoldersCount(b64) {
var len = b64.length;
if (len % 4 > 0) {
throw new Error("Invalid string. Length must be a multiple of 4");
}
return b64[len - 2] === "=" ? 2 : b64[len - 1] === "=" ? 1 : 0;
}
function byteLength(b64) {
return b64.length * 3 / 4 - placeHoldersCount(b64);
}
function toByteArray(b64) {
var i, j, l, tmp, placeHolders, arr;
var len = b64.length;
placeHolders = placeHoldersCount(b64);
arr = new Arr(len * 3 / 4 - placeHolders);
l = placeHolders > 0 ? len - 4 : len;
var L = 0;
for (i = 0, j = 0; i < l; i += 4, j += 3) {
tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
arr[L++] = tmp >> 16 & 255;
arr[L++] = tmp >> 8 & 255;
arr[L++] = tmp & 255;
}
if (placeHolders === 2) {
tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
arr[L++] = tmp & 255;
} else if (placeHolders === 1) {
tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
arr[L++] = tmp >> 8 & 255;
arr[L++] = tmp & 255;
}
return arr;
}
function tripletToBase64(num) {
return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
var tmp;
var output = [];
for (var i = start; i < end; i += 3) {
tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
output.push(tripletToBase64(tmp));
}
return output.join("");
}
function fromByteArray(uint8) {
var tmp;
var len = uint8.length;
var extraBytes = len % 3;
var output = "";
var parts = [];
var maxChunkLength = 16383;
for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
}
if (extraBytes === 1) {
tmp = uint8[len - 1];
output += lookup[tmp >> 2];
output += lookup[tmp << 4 & 63];
output += "==";
} else if (extraBytes === 2) {
tmp = (uint8[len - 2] << 8) + uint8[len - 1];
output += lookup[tmp >> 10];
output += lookup[tmp >> 4 & 63];
output += lookup[tmp << 2 & 63];
output += "=";
}
parts.push(output);
return parts.join("");
}
}, function(module, exports) {
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
var e, m;
var eLen = nBytes * 8 - mLen - 1;
var eMax = (1 << eLen) - 1;
var eBias = eMax >> 1;
var nBits = -7;
var i = isLE ? nBytes - 1 : 0;
var d = isLE ? -1 : 1;
var s = buffer[offset + i];
i += d;
e = s & (1 << -nBits) - 1;
s >>= -nBits;
nBits += eLen;
for (;nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
m = e & (1 << -nBits) - 1;
e >>= -nBits;
nBits += mLen;
for (;nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
if (e === 0) {
e = 1 - eBias;
} else if (e === eMax) {
return m ? NaN : (s ? -1 : 1) * Infinity;
} else {
m = m + Math.pow(2, mLen);
e = e - eBias;
}
return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
var e, m, c;
var eLen = nBytes * 8 - mLen - 1;
var eMax = (1 << eLen) - 1;
var eBias = eMax >> 1;
var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
var i = isLE ? 0 : nBytes - 1;
var d = isLE ? 1 : -1;
var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
value = Math.abs(value);
if (isNaN(value) || value === Infinity) {
m = isNaN(value) ? 1 : 0;
e = eMax;
} else {
e = Math.floor(Math.log(value) / Math.LN2);
if (value * (c = Math.pow(2, -e)) < 1) {
e--;
c *= 2;
}
if (e + eBias >= 1) {
value += rt / c;
} else {
value += rt * Math.pow(2, 1 - eBias);
}
if (value * c >= 2) {
e++;
c /= 2;
}
if (e + eBias >= eMax) {
m = 0;
e = eMax;
} else if (e + eBias >= 1) {
m = (value * c - 1) * Math.pow(2, mLen);
e = e + eBias;
} else {
m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
e = 0;
}
}
for (;mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {}
e = e << mLen | m;
eLen += mLen;
for (;eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {}
buffer[offset + i - d] |= s * 128;
};
}, function(module, exports) {
var toString = {}.toString;
module.exports = Array.isArray || function(arr) {
return toString.call(arr) == "[object Array]";
};
}, function(module, exports) {
module.exports = function(Buffer) {
function Hash(blockSize, finalSize) {
this._block = new Buffer(blockSize);
this._finalSize = finalSize;
this._blockSize = blockSize;
this._len = 0;
this._s = 0;
}
Hash.prototype.init = function() {
this._s = 0;
this._len = 0;
};
Hash.prototype.update = function(data, enc) {
if ("string" === typeof data) {
enc = enc || "utf8";
data = new Buffer(data, enc);
}
var l = this._len += data.length;
var s = this._s = this._s || 0;
var f = 0;
var buffer = this._block;
while (s < l) {
var t = Math.min(data.length, f + this._blockSize - s % this._blockSize);
var ch = t - f;
for (var i = 0; i < ch; i++) {
buffer[s % this._blockSize + i] = data[i + f];
}
s += ch;
f += ch;
if (s % this._blockSize === 0) {
this._update(buffer);
}
}
this._s = s;
return this;
};
Hash.prototype.digest = function(enc) {
var l = this._len * 8;
this._block[this._len % this._blockSize] = 128;
this._block.fill(0, this._len % this._blockSize + 1);
if (l % (this._blockSize * 8) >= this._finalSize * 8) {
this._update(this._block);
this._block.fill(0);
}
this._block.writeInt32BE(l, this._blockSize - 4);
var hash = this._update(this._block) || this._hash();
return enc ? hash.toString(enc) : hash;
};
Hash.prototype._update = function() {
throw new Error("_update must be implemented by subclass");
};
return Hash;
};
}, function(module, exports, __webpack_require__) {
var inherits = __webpack_require__(606).inherits;
module.exports = function(Buffer, Hash) {
var A = 0 | 0;
var B = 4 | 0;
var C = 8 | 0;
var D = 12 | 0;
var E = 16 | 0;
var W = new (typeof Int32Array === "undefined" ? Array : Int32Array)(80);
var POOL = [];
function Sha1() {
if (POOL.length) return POOL.pop().init();
if (!(this instanceof Sha1)) return new Sha1();
this._w = W;
Hash.call(this, 16 * 4, 14 * 4);
this._h = null;
this.init();
}
inherits(Sha1, Hash);
Sha1.prototype.init = function() {
this._a = 1732584193;
this._b = 4023233417;
this._c = 2562383102;
this._d = 271733878;
this._e = 3285377520;
Hash.prototype.init.call(this);
return this;
};
Sha1.prototype._POOL = POOL;
Sha1.prototype._update = function(X) {
var a, b, c, d, e, _a, _b, _c, _d, _e;
a = _a = this._a;
b = _b = this._b;
c = _c = this._c;
d = _d = this._d;
e = _e = this._e;
var w = this._w;
for (var j = 0; j < 80; j++) {
var W = w[j] = j < 16 ? X.readInt32BE(j * 4) : rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
var t = add(add(rol(a, 5), sha1_ft(j, b, c, d)), add(add(e, W), sha1_kt(j)));
e = d;
d = c;
c = rol(b, 30);
b = a;
a = t;
}
this._a = add(a, _a);
this._b = add(b, _b);
this._c = add(c, _c);
this._d = add(d, _d);
this._e = add(e, _e);
};
Sha1.prototype._hash = function() {
if (POOL.length < 100) POOL.push(this);
var H = new Buffer(20);
H.writeInt32BE(this._a | 0, A);
H.writeInt32BE(this._b | 0, B);
H.writeInt32BE(this._c | 0, C);
H.writeInt32BE(this._d | 0, D);
H.writeInt32BE(this._e | 0, E);
return H;
};
function sha1_ft(t, b, c, d) {
if (t < 20) return b & c | ~b & d;
if (t < 40) return b ^ c ^ d;
if (t < 60) return b & c | b & d | c & d;
return b ^ c ^ d;
}
function sha1_kt(t) {
return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;
}
function add(x, y) {
return x + y | 0;
}
function rol(num, cnt) {
return num << cnt | num >>> 32 - cnt;
}
return Sha1;
};
}, function(module, exports, __webpack_require__) {
var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
if (!isString(f)) {
var objects = [];
for (var i = 0; i < arguments.length; i++) {
objects.push(inspect(arguments[i]));
}
return objects.join(" ");
}
var i = 1;
var args = arguments;
var len = args.length;
var str = String(f).replace(formatRegExp, function(x) {
if (x === "%%") return "%";
if (i >= len) return x;
switch (x) {
case "%s":
return String(args[i++]);

case "%d":
return Number(args[i++]);

case "%j":
try {
return JSON.stringify(args[i++]);
} catch (_) {
return "[Circular]";
}

default:
return x;
}
});
for (var x = args[i]; i < len; x = args[++i]) {
if (isNull(x) || !isObject(x)) {
str += " " + x;
} else {
str += " " + inspect(x);
}
}
return str;
};
exports.deprecate = function(fn, msg) {
if (isUndefined(global.process)) {
return function() {
return exports.deprecate(fn, msg).apply(this, arguments);
};
}
if (process.noDeprecation === true) {
return fn;
}
var warned = false;
function deprecated() {
if (!warned) {
if (process.throwDeprecation) {
throw new Error(msg);
} else if (process.traceDeprecation) {
console.trace(msg);
} else {
console.error(msg);
}
warned = true;
}
return fn.apply(this, arguments);
}
return deprecated;
};
var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || "";
set = set.toUpperCase();
if (!debugs[set]) {
if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
var pid = process.pid;
debugs[set] = function() {
var msg = exports.format.apply(exports, arguments);
console.error("%s %d: %s", set, pid, msg);
};
} else {
debugs[set] = function() {};
}
}
return debugs[set];
};
function inspect(obj, opts) {
var ctx = {
seen: [],
stylize: stylizeNoColor
};
if (arguments.length >= 3) ctx.depth = arguments[2];
if (arguments.length >= 4) ctx.colors = arguments[3];
if (isBoolean(opts)) {
ctx.showHidden = opts;
} else if (opts) {
exports._extend(ctx, opts);
}
if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
if (isUndefined(ctx.depth)) ctx.depth = 2;
if (isUndefined(ctx.colors)) ctx.colors = false;
if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
if (ctx.colors) ctx.stylize = stylizeWithColor;
return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;
inspect.colors = {
bold: [ 1, 22 ],
italic: [ 3, 23 ],
underline: [ 4, 24 ],
inverse: [ 7, 27 ],
white: [ 37, 39 ],
grey: [ 90, 39 ],
black: [ 30, 39 ],
blue: [ 34, 39 ],
cyan: [ 36, 39 ],
green: [ 32, 39 ],
magenta: [ 35, 39 ],
red: [ 31, 39 ],
yellow: [ 33, 39 ]
};
inspect.styles = {
special: "cyan",
number: "yellow",
boolean: "yellow",
undefined: "grey",
null: "bold",
string: "green",
date: "magenta",
regexp: "red"
};
function stylizeWithColor(str, styleType) {
var style = inspect.styles[styleType];
if (style) {
return "[" + inspect.colors[style][0] + "m" + str + "[" + inspect.colors[style][1] + "m";
} else {
return str;
}
}
function stylizeNoColor(str, styleType) {
return str;
}
function arrayToHash(array) {
var hash = {};
array.forEach(function(val, idx) {
hash[val] = true;
});
return hash;
}
function formatValue(ctx, value, recurseTimes) {
if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
var ret = value.inspect(recurseTimes, ctx);
if (!isString(ret)) {
ret = formatValue(ctx, ret, recurseTimes);
}
return ret;
}
var primitive = formatPrimitive(ctx, value);
if (primitive) {
return primitive;
}
var keys = Object.keys(value);
var visibleKeys = arrayToHash(keys);
if (ctx.showHidden) {
keys = Object.getOwnPropertyNames(value);
}
if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
return formatError(value);
}
if (keys.length === 0) {
if (isFunction(value)) {
var name = value.name ? ": " + value.name : "";
return ctx.stylize("[Function" + name + "]", "special");
}
if (isRegExp(value)) {
return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
}
if (isDate(value)) {
return ctx.stylize(Date.prototype.toString.call(value), "date");
}
if (isError(value)) {
return formatError(value);
}
}
var base = "", array = false, braces = [ "{", "}" ];
if (isArray(value)) {
array = true;
braces = [ "[", "]" ];
}
if (isFunction(value)) {
var n = value.name ? ": " + value.name : "";
base = " [Function" + n + "]";
}
if (isRegExp(value)) {
base = " " + RegExp.prototype.toString.call(value);
}
if (isDate(value)) {
base = " " + Date.prototype.toUTCString.call(value);
}
if (isError(value)) {
base = " " + formatError(value);
}
if (keys.length === 0 && (!array || value.length == 0)) {
return braces[0] + base + braces[1];
}
if (recurseTimes < 0) {
if (isRegExp(value)) {
return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
} else {
return ctx.stylize("[Object]", "special");
}
}
ctx.seen.push(value);
var output;
if (array) {
output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
} else {
output = keys.map(function(key) {
return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
});
}
ctx.seen.pop();
return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
if (isUndefined(value)) return ctx.stylize("undefined", "undefined");
if (isString(value)) {
var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
return ctx.stylize(simple, "string");
}
if (isNumber(value)) return ctx.stylize("" + value, "number");
if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
if (isNull(value)) return ctx.stylize("null", "null");
}
function formatError(value) {
return "[" + Error.prototype.toString.call(value) + "]";
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
var output = [];
for (var i = 0, l = value.length; i < l; ++i) {
if (hasOwnProperty(value, String(i))) {
output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
} else {
output.push("");
}
}
keys.forEach(function(key) {
if (!key.match(/^\d+$/)) {
output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
}
});
return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
var name, str, desc;
desc = Object.getOwnPropertyDescriptor(value, key) || {
value: value[key]
};
if (desc.get) {
if (desc.set) {
str = ctx.stylize("[Getter/Setter]", "special");
} else {
str = ctx.stylize("[Getter]", "special");
}
} else {
if (desc.set) {
str = ctx.stylize("[Setter]", "special");
}
}
if (!hasOwnProperty(visibleKeys, key)) {
name = "[" + key + "]";
}
if (!str) {
if (ctx.seen.indexOf(desc.value) < 0) {
if (isNull(recurseTimes)) {
str = formatValue(ctx, desc.value, null);
} else {
str = formatValue(ctx, desc.value, recurseTimes - 1);
}
if (str.indexOf("\n") > -1) {
if (array) {
str = str.split("\n").map(function(line) {
return "  " + line;
}).join("\n").substr(2);
} else {
str = "\n" + str.split("\n").map(function(line) {
return "   " + line;
}).join("\n");
}
}
} else {
str = ctx.stylize("[Circular]", "special");
}
}
if (isUndefined(name)) {
if (array && key.match(/^\d+$/)) {
return str;
}
name = JSON.stringify("" + key);
if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
name = name.substr(1, name.length - 2);
name = ctx.stylize(name, "name");
} else {
name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
name = ctx.stylize(name, "string");
}
}
return name + ": " + str;
}
function reduceToSingleString(output, base, braces) {
var numLinesEst = 0;
var length = output.reduce(function(prev, cur) {
numLinesEst++;
if (cur.indexOf("\n") >= 0) numLinesEst++;
return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
}, 0);
if (length > 60) {
return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
}
return braces[0] + base + " " + output.join(", ") + " " + braces[1];
}
function isArray(ar) {
return Array.isArray(ar);
}
exports.isArray = isArray;
function isBoolean(arg) {
return typeof arg === "boolean";
}
exports.isBoolean = isBoolean;
function isNull(arg) {
return arg === null;
}
exports.isNull = isNull;
function isNullOrUndefined(arg) {
return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function isNumber(arg) {
return typeof arg === "number";
}
exports.isNumber = isNumber;
function isString(arg) {
return typeof arg === "string";
}
exports.isString = isString;
function isSymbol(arg) {
return typeof arg === "symbol";
}
exports.isSymbol = isSymbol;
function isUndefined(arg) {
return arg === void 0;
}
exports.isUndefined = isUndefined;
function isRegExp(re) {
return isObject(re) && objectToString(re) === "[object RegExp]";
}
exports.isRegExp = isRegExp;
function isObject(arg) {
return typeof arg === "object" && arg !== null;
}
exports.isObject = isObject;
function isDate(d) {
return isObject(d) && objectToString(d) === "[object Date]";
}
exports.isDate = isDate;
function isError(e) {
return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
}
exports.isError = isError;
function isFunction(arg) {
return typeof arg === "function";
}
exports.isFunction = isFunction;
function isPrimitive(arg) {
return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || typeof arg === "undefined";
}
exports.isPrimitive = isPrimitive;
exports.isBuffer = __webpack_require__(607);
function objectToString(o) {
return Object.prototype.toString.call(o);
}
function pad(n) {
return n < 10 ? "0" + n.toString(10) : n.toString(10);
}
var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
function timestamp() {
var d = new Date();
var time = [ pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds()) ].join(":");
return [ d.getDate(), months[d.getMonth()], time ].join(" ");
}
exports.log = function() {
console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
};
exports.inherits = __webpack_require__(608);
exports._extend = function(origin, add) {
if (!add || !isObject(add)) return origin;
var keys = Object.keys(add);
var i = keys.length;
while (i--) {
origin[keys[i]] = add[keys[i]];
}
return origin;
};
function hasOwnProperty(obj, prop) {
return Object.prototype.hasOwnProperty.call(obj, prop);
}
}, function(module, exports) {
module.exports = function isBuffer(arg) {
return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
};
}, function(module, exports, __webpack_require__) {
module.exports = __webpack_require__(606).inherits;
}, function(module, exports, __webpack_require__) {
var inherits = __webpack_require__(606).inherits;
module.exports = function(Buffer, Hash) {
var K = [ 1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298 ];
var W = new Array(64);
function Sha256() {
this.init();
this._w = W;
Hash.call(this, 16 * 4, 14 * 4);
}
inherits(Sha256, Hash);
Sha256.prototype.init = function() {
this._a = 1779033703 | 0;
this._b = 3144134277 | 0;
this._c = 1013904242 | 0;
this._d = 2773480762 | 0;
this._e = 1359893119 | 0;
this._f = 2600822924 | 0;
this._g = 528734635 | 0;
this._h = 1541459225 | 0;
this._len = this._s = 0;
return this;
};
function S(X, n) {
return X >>> n | X << 32 - n;
}
function R(X, n) {
return X >>> n;
}
function Ch(x, y, z) {
return x & y ^ ~x & z;
}
function Maj(x, y, z) {
return x & y ^ x & z ^ y & z;
}
function Sigma0256(x) {
return S(x, 2) ^ S(x, 13) ^ S(x, 22);
}
function Sigma1256(x) {
return S(x, 6) ^ S(x, 11) ^ S(x, 25);
}
function Gamma0256(x) {
return S(x, 7) ^ S(x, 18) ^ R(x, 3);
}
function Gamma1256(x) {
return S(x, 17) ^ S(x, 19) ^ R(x, 10);
}
Sha256.prototype._update = function(M) {
var W = this._w;
var a, b, c, d, e, f, g, h;
var T1, T2;
a = this._a | 0;
b = this._b | 0;
c = this._c | 0;
d = this._d | 0;
e = this._e | 0;
f = this._f | 0;
g = this._g | 0;
h = this._h | 0;
for (var j = 0; j < 64; j++) {
var w = W[j] = j < 16 ? M.readInt32BE(j * 4) : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16];
T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w;
T2 = Sigma0256(a) + Maj(a, b, c);
h = g;
g = f;
f = e;
e = d + T1;
d = c;
c = b;
b = a;
a = T1 + T2;
}
this._a = a + this._a | 0;
this._b = b + this._b | 0;
this._c = c + this._c | 0;
this._d = d + this._d | 0;
this._e = e + this._e | 0;
this._f = f + this._f | 0;
this._g = g + this._g | 0;
this._h = h + this._h | 0;
};
Sha256.prototype._hash = function() {
var H = new Buffer(32);
H.writeInt32BE(this._a, 0);
H.writeInt32BE(this._b, 4);
H.writeInt32BE(this._c, 8);
H.writeInt32BE(this._d, 12);
H.writeInt32BE(this._e, 16);
H.writeInt32BE(this._f, 20);
H.writeInt32BE(this._g, 24);
H.writeInt32BE(this._h, 28);
return H;
};
return Sha256;
};
}, function(module, exports, __webpack_require__) {
var inherits = __webpack_require__(606).inherits;
module.exports = function(Buffer, Hash) {
var K = [ 1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591 ];
var W = new Array(160);
function Sha512() {
this.init();
this._w = W;
Hash.call(this, 128, 112);
}
inherits(Sha512, Hash);
Sha512.prototype.init = function() {
this._a = 1779033703 | 0;
this._b = 3144134277 | 0;
this._c = 1013904242 | 0;
this._d = 2773480762 | 0;
this._e = 1359893119 | 0;
this._f = 2600822924 | 0;
this._g = 528734635 | 0;
this._h = 1541459225 | 0;
this._al = 4089235720 | 0;
this._bl = 2227873595 | 0;
this._cl = 4271175723 | 0;
this._dl = 1595750129 | 0;
this._el = 2917565137 | 0;
this._fl = 725511199 | 0;
this._gl = 4215389547 | 0;
this._hl = 327033209 | 0;
this._len = this._s = 0;
return this;
};
function S(X, Xl, n) {
return X >>> n | Xl << 32 - n;
}
function Ch(x, y, z) {
return x & y ^ ~x & z;
}
function Maj(x, y, z) {
return x & y ^ x & z ^ y & z;
}
Sha512.prototype._update = function(M) {
var W = this._w;
var a, b, c, d, e, f, g, h;
var al, bl, cl, dl, el, fl, gl, hl;
a = this._a | 0;
b = this._b | 0;
c = this._c | 0;
d = this._d | 0;
e = this._e | 0;
f = this._f | 0;
g = this._g | 0;
h = this._h | 0;
al = this._al | 0;
bl = this._bl | 0;
cl = this._cl | 0;
dl = this._dl | 0;
el = this._el | 0;
fl = this._fl | 0;
gl = this._gl | 0;
hl = this._hl | 0;
for (var i = 0; i < 80; i++) {
var j = i * 2;
var Wi, Wil;
if (i < 16) {
Wi = W[j] = M.readInt32BE(j * 4);
Wil = W[j + 1] = M.readInt32BE(j * 4 + 4);
} else {
var x = W[j - 15 * 2];
var xl = W[j - 15 * 2 + 1];
var gamma0 = S(x, xl, 1) ^ S(x, xl, 8) ^ x >>> 7;
var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7);
x = W[j - 2 * 2];
xl = W[j - 2 * 2 + 1];
var gamma1 = S(x, xl, 19) ^ S(xl, x, 29) ^ x >>> 6;
var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6);
var Wi7 = W[j - 7 * 2];
var Wi7l = W[j - 7 * 2 + 1];
var Wi16 = W[j - 16 * 2];
var Wi16l = W[j - 16 * 2 + 1];
Wil = gamma0l + Wi7l;
Wi = gamma0 + Wi7 + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
Wil = Wil + gamma1l;
Wi = Wi + gamma1 + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
Wil = Wil + Wi16l;
Wi = Wi + Wi16 + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
W[j] = Wi;
W[j + 1] = Wil;
}
var maj = Maj(a, b, c);
var majl = Maj(al, bl, cl);
var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7);
var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7);
var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9);
var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9);
var Ki = K[j];
var Kil = K[j + 1];
var ch = Ch(e, f, g);
var chl = Ch(el, fl, gl);
var t1l = hl + sigma1l;
var t1 = h + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
t1l = t1l + chl;
t1 = t1 + ch + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
t1l = t1l + Kil;
t1 = t1 + Ki + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
t1l = t1l + Wil;
t1 = t1 + Wi + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
var t2l = sigma0l + majl;
var t2 = sigma0h + maj + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
h = g;
hl = gl;
g = f;
gl = fl;
f = e;
fl = el;
el = dl + t1l | 0;
e = d + t1 + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
d = c;
dl = cl;
c = b;
cl = bl;
b = a;
bl = al;
al = t1l + t2l | 0;
a = t1 + t2 + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
}
this._al = this._al + al | 0;
this._bl = this._bl + bl | 0;
this._cl = this._cl + cl | 0;
this._dl = this._dl + dl | 0;
this._el = this._el + el | 0;
this._fl = this._fl + fl | 0;
this._gl = this._gl + gl | 0;
this._hl = this._hl + hl | 0;
this._a = this._a + a + (this._al >>> 0 < al >>> 0 ? 1 : 0) | 0;
this._b = this._b + b + (this._bl >>> 0 < bl >>> 0 ? 1 : 0) | 0;
this._c = this._c + c + (this._cl >>> 0 < cl >>> 0 ? 1 : 0) | 0;
this._d = this._d + d + (this._dl >>> 0 < dl >>> 0 ? 1 : 0) | 0;
this._e = this._e + e + (this._el >>> 0 < el >>> 0 ? 1 : 0) | 0;
this._f = this._f + f + (this._fl >>> 0 < fl >>> 0 ? 1 : 0) | 0;
this._g = this._g + g + (this._gl >>> 0 < gl >>> 0 ? 1 : 0) | 0;
this._h = this._h + h + (this._hl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
};
Sha512.prototype._hash = function() {
var H = new Buffer(64);
function writeInt64BE(h, l, offset) {
H.writeInt32BE(h, offset);
H.writeInt32BE(l, offset + 4);
}
writeInt64BE(this._a, this._al, 0);
writeInt64BE(this._b, this._bl, 8);
writeInt64BE(this._c, this._cl, 16);
writeInt64BE(this._d, this._dl, 24);
writeInt64BE(this._e, this._el, 32);
writeInt64BE(this._f, this._fl, 40);
writeInt64BE(this._g, this._gl, 48);
writeInt64BE(this._h, this._hl, 56);
return H;
};
return Sha512;
};
}, function(module, exports, __webpack_require__) {
var helpers = __webpack_require__(612);
function core_md5(x, len) {
x[len >> 5] |= 128 << len % 32;
x[(len + 64 >>> 9 << 4) + 14] = len;
var a = 1732584193;
var b = -271733879;
var c = -1732584194;
var d = 271733878;
for (var i = 0; i < x.length; i += 16) {
var olda = a;
var oldb = b;
var oldc = c;
var oldd = d;
a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
a = safe_add(a, olda);
b = safe_add(b, oldb);
c = safe_add(c, oldc);
d = safe_add(d, oldd);
}
return Array(a, b, c, d);
}
function md5_cmn(q, a, b, x, s, t) {
return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
}
function md5_ff(a, b, c, d, x, s, t) {
return md5_cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t) {
return md5_cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t) {
return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t) {
return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
}
function safe_add(x, y) {
var lsw = (x & 65535) + (y & 65535);
var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
return msw << 16 | lsw & 65535;
}
function bit_rol(num, cnt) {
return num << cnt | num >>> 32 - cnt;
}
module.exports = function md5(buf) {
return helpers.hash(buf, core_md5, 16);
};
}, function(module, exports) {
var intSize = 4;
var zeroBuffer = new Buffer(intSize);
zeroBuffer.fill(0);
var chrsz = 8;
function toArray(buf, bigEndian) {
if (buf.length % intSize !== 0) {
var len = buf.length + (intSize - buf.length % intSize);
buf = Buffer.concat([ buf, zeroBuffer ], len);
}
var arr = [];
var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
for (var i = 0; i < buf.length; i += intSize) {
arr.push(fn.call(buf, i));
}
return arr;
}
function toBuffer(arr, size, bigEndian) {
var buf = new Buffer(size);
var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
for (var i = 0; i < arr.length; i++) {
fn.call(buf, arr[i], i * 4, true);
}
return buf;
}
function hash(buf, fn, hashSize, bigEndian) {
if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
return toBuffer(arr, hashSize, bigEndian);
}
module.exports = {
hash: hash
};
}, function(module, exports) {
module.exports = ripemd160;
var zl = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13 ];
var zr = [ 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11 ];
var sl = [ 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6 ];
var sr = [ 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11 ];
var hl = [ 0, 1518500249, 1859775393, 2400959708, 2840853838 ];
var hr = [ 1352829926, 1548603684, 1836072691, 2053994217, 0 ];
var bytesToWords = function(bytes) {
var words = [];
for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
words[b >>> 5] |= bytes[i] << 24 - b % 32;
}
return words;
};
var wordsToBytes = function(words) {
var bytes = [];
for (var b = 0; b < words.length * 32; b += 8) {
bytes.push(words[b >>> 5] >>> 24 - b % 32 & 255);
}
return bytes;
};
var processBlock = function(H, M, offset) {
for (var i = 0; i < 16; i++) {
var offset_i = offset + i;
var M_offset_i = M[offset_i];
M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
}
var al, bl, cl, dl, el;
var ar, br, cr, dr, er;
ar = al = H[0];
br = bl = H[1];
cr = cl = H[2];
dr = dl = H[3];
er = el = H[4];
var t;
for (var i = 0; i < 80; i += 1) {
t = al + M[offset + zl[i]] | 0;
if (i < 16) {
t += f1(bl, cl, dl) + hl[0];
} else if (i < 32) {
t += f2(bl, cl, dl) + hl[1];
} else if (i < 48) {
t += f3(bl, cl, dl) + hl[2];
} else if (i < 64) {
t += f4(bl, cl, dl) + hl[3];
} else {
t += f5(bl, cl, dl) + hl[4];
}
t = t | 0;
t = rotl(t, sl[i]);
t = t + el | 0;
al = el;
el = dl;
dl = rotl(cl, 10);
cl = bl;
bl = t;
t = ar + M[offset + zr[i]] | 0;
if (i < 16) {
t += f5(br, cr, dr) + hr[0];
} else if (i < 32) {
t += f4(br, cr, dr) + hr[1];
} else if (i < 48) {
t += f3(br, cr, dr) + hr[2];
} else if (i < 64) {
t += f2(br, cr, dr) + hr[3];
} else {
t += f1(br, cr, dr) + hr[4];
}
t = t | 0;
t = rotl(t, sr[i]);
t = t + er | 0;
ar = er;
er = dr;
dr = rotl(cr, 10);
cr = br;
br = t;
}
t = H[1] + cl + dr | 0;
H[1] = H[2] + dl + er | 0;
H[2] = H[3] + el + ar | 0;
H[3] = H[4] + al + br | 0;
H[4] = H[0] + bl + cr | 0;
H[0] = t;
};
function f1(x, y, z) {
return x ^ y ^ z;
}
function f2(x, y, z) {
return x & y | ~x & z;
}
function f3(x, y, z) {
return (x | ~y) ^ z;
}
function f4(x, y, z) {
return x & z | y & ~z;
}
function f5(x, y, z) {
return x ^ (y | ~z);
}
function rotl(x, n) {
return x << n | x >>> 32 - n;
}
function ripemd160(message) {
var H = [ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ];
if (typeof message == "string") message = new Buffer(message, "utf8");
var m = bytesToWords(message);
var nBitsLeft = message.length * 8;
var nBitsTotal = message.length * 8;
m[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
m[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
for (var i = 0; i < m.length; i += 16) {
processBlock(H, m, i);
}
for (var i = 0; i < 5; i++) {
var H_i = H[i];
H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
}
var digestbytes = wordsToBytes(H);
return new Buffer(digestbytes);
}
}, function(module, exports, __webpack_require__) {
var createHash = __webpack_require__(598);
var zeroBuffer = new Buffer(128);
zeroBuffer.fill(0);
module.exports = Hmac;
function Hmac(alg, key) {
if (!(this instanceof Hmac)) return new Hmac(alg, key);
this._opad = opad;
this._alg = alg;
var blocksize = alg === "sha512" ? 128 : 64;
key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key;
if (key.length > blocksize) {
key = createHash(alg).update(key).digest();
} else if (key.length < blocksize) {
key = Buffer.concat([ key, zeroBuffer ], blocksize);
}
var ipad = this._ipad = new Buffer(blocksize);
var opad = this._opad = new Buffer(blocksize);
for (var i = 0; i < blocksize; i++) {
ipad[i] = key[i] ^ 54;
opad[i] = key[i] ^ 92;
}
this._hash = createHash(alg).update(ipad);
}
Hmac.prototype.update = function(data, enc) {
this._hash.update(data, enc);
return this;
};
Hmac.prototype.digest = function(enc) {
var h = this._hash.digest();
return createHash(this._alg).update(this._opad).update(h).digest(enc);
};
}, function(module, exports, __webpack_require__) {
var pbkdf2Export = __webpack_require__(616);
module.exports = function(crypto, exports) {
exports = exports || {};
var exported = pbkdf2Export(crypto);
exports.pbkdf2 = exported.pbkdf2;
exports.pbkdf2Sync = exported.pbkdf2Sync;
return exports;
};
}, function(module, exports) {
module.exports = function(crypto) {
function pbkdf2(password, salt, iterations, keylen, digest, callback) {
if ("function" === typeof digest) {
callback = digest;
digest = undefined;
}
if ("function" !== typeof callback) throw new Error("No callback provided to pbkdf2");
setTimeout(function() {
var result;
try {
result = pbkdf2Sync(password, salt, iterations, keylen, digest);
} catch (e) {
return callback(e);
}
callback(undefined, result);
});
}
function pbkdf2Sync(password, salt, iterations, keylen, digest) {
if ("number" !== typeof iterations) throw new TypeError("Iterations not a number");
if (iterations < 0) throw new TypeError("Bad iterations");
if ("number" !== typeof keylen) throw new TypeError("Key length not a number");
if (keylen < 0) throw new TypeError("Bad key length");
digest = digest || "sha1";
if (!Buffer.isBuffer(password)) password = new Buffer(password);
if (!Buffer.isBuffer(salt)) salt = new Buffer(salt);
var hLen, l = 1, r, T;
var DK = new Buffer(keylen);
var block1 = new Buffer(salt.length + 4);
salt.copy(block1, 0, 0, salt.length);
for (var i = 1; i <= l; i++) {
block1.writeUInt32BE(i, salt.length);
var U = crypto.createHmac(digest, password).update(block1).digest();
if (!hLen) {
hLen = U.length;
T = new Buffer(hLen);
l = Math.ceil(keylen / hLen);
r = keylen - (l - 1) * hLen;
if (keylen > (Math.pow(2, 32) - 1) * hLen) throw new TypeError("keylen exceeds maximum length");
}
U.copy(T, 0, 0, hLen);
for (var j = 1; j < iterations; j++) {
U = crypto.createHmac(digest, password).update(U).digest();
for (var k = 0; k < hLen; k++) {
T[k] ^= U[k];
}
}
var destPos = (i - 1) * hLen;
var len = i == l ? r : hLen;
T.copy(DK, destPos, 0, len);
}
return DK;
}
return {
pbkdf2: pbkdf2,
pbkdf2Sync: pbkdf2Sync
};
};
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory() : typeof define === "function" && define.amd ? define(factory) : factory();
})(this, function() {
"use strict";
var AsyncTestZoneSpec = function() {
function AsyncTestZoneSpec(finishCallback, failCallback, namePrefix) {
this._pendingMicroTasks = false;
this._pendingMacroTasks = false;
this._alreadyErrored = false;
this.runZone = Zone.current;
this._finishCallback = finishCallback;
this._failCallback = failCallback;
this.name = "asyncTestZone for " + namePrefix;
}
AsyncTestZoneSpec.prototype._finishCallbackIfDone = function() {
var _this = this;
if (!(this._pendingMicroTasks || this._pendingMacroTasks)) {
this.runZone.run(function() {
setTimeout(function() {
if (!_this._alreadyErrored && !(_this._pendingMicroTasks || _this._pendingMacroTasks)) {
_this._finishCallback();
}
}, 0);
});
}
};
AsyncTestZoneSpec.prototype.onInvoke = function(parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {
try {
return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);
} finally {
this._finishCallbackIfDone();
}
};
AsyncTestZoneSpec.prototype.onHandleError = function(parentZoneDelegate, currentZone, targetZone, error) {
var result = parentZoneDelegate.handleError(targetZone, error);
if (result) {
this._failCallback(error);
this._alreadyErrored = true;
}
return false;
};
AsyncTestZoneSpec.prototype.onHasTask = function(delegate, current, target, hasTaskState) {
delegate.hasTask(target, hasTaskState);
if (hasTaskState.change == "microTask") {
this._pendingMicroTasks = hasTaskState.microTask;
this._finishCallbackIfDone();
} else if (hasTaskState.change == "macroTask") {
this._pendingMacroTasks = hasTaskState.macroTask;
this._finishCallbackIfDone();
}
};
return AsyncTestZoneSpec;
}();
Zone["AsyncTestZoneSpec"] = AsyncTestZoneSpec;
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory() : typeof define === "function" && define.amd ? define(factory) : factory();
})(this, function() {
"use strict";
(function(global) {
var Scheduler = function() {
function Scheduler() {
this.nextId = 0;
this._schedulerQueue = [];
this._currentTime = 0;
}
Scheduler.prototype.scheduleFunction = function(cb, delay, args, id) {
if (args === void 0) {
args = [];
}
if (id === void 0) {
id = -1;
}
var currentId = id < 0 ? this.nextId++ : id;
var endTime = this._currentTime + delay;
var newEntry = {
endTime: endTime,
id: currentId,
func: cb,
args: args,
delay: delay
};
var i = 0;
for (;i < this._schedulerQueue.length; i++) {
var currentEntry = this._schedulerQueue[i];
if (newEntry.endTime < currentEntry.endTime) {
break;
}
}
this._schedulerQueue.splice(i, 0, newEntry);
return currentId;
};
Scheduler.prototype.removeScheduledFunctionWithId = function(id) {
for (var i = 0; i < this._schedulerQueue.length; i++) {
if (this._schedulerQueue[i].id == id) {
this._schedulerQueue.splice(i, 1);
break;
}
}
};
Scheduler.prototype.tick = function(millis) {
if (millis === void 0) {
millis = 0;
}
var finalTime = this._currentTime + millis;
while (this._schedulerQueue.length > 0) {
var current = this._schedulerQueue[0];
if (finalTime < current.endTime) {
break;
} else {
var current_1 = this._schedulerQueue.shift();
this._currentTime = current_1.endTime;
var retval = current_1.func.apply(global, current_1.args);
if (!retval) {
break;
}
}
}
this._currentTime = finalTime;
};
return Scheduler;
}();
var FakeAsyncTestZoneSpec = function() {
function FakeAsyncTestZoneSpec(namePrefix) {
this._scheduler = new Scheduler();
this._microtasks = [];
this._lastError = null;
this._uncaughtPromiseErrors = Promise[Zone.__symbol__("uncaughtPromiseErrors")];
this.pendingPeriodicTimers = [];
this.pendingTimers = [];
this.properties = {
FakeAsyncTestZoneSpec: this
};
this.name = "fakeAsyncTestZone for " + namePrefix;
}
FakeAsyncTestZoneSpec.assertInZone = function() {
if (Zone.current.get("FakeAsyncTestZoneSpec") == null) {
throw new Error("The code should be running in the fakeAsync zone to call this function");
}
};
FakeAsyncTestZoneSpec.prototype._fnAndFlush = function(fn, completers) {
var _this = this;
return function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i] = arguments[_i];
}
fn.apply(global, args);
if (_this._lastError === null) {
if (completers.onSuccess != null) {
completers.onSuccess.apply(global);
}
_this.flushMicrotasks();
} else {
if (completers.onError != null) {
completers.onError.apply(global);
}
}
return _this._lastError === null;
};
};
FakeAsyncTestZoneSpec._removeTimer = function(timers, id) {
var index = timers.indexOf(id);
if (index > -1) {
timers.splice(index, 1);
}
};
FakeAsyncTestZoneSpec.prototype._dequeueTimer = function(id) {
var _this = this;
return function() {
FakeAsyncTestZoneSpec._removeTimer(_this.pendingTimers, id);
};
};
FakeAsyncTestZoneSpec.prototype._requeuePeriodicTimer = function(fn, interval, args, id) {
var _this = this;
return function() {
if (_this.pendingPeriodicTimers.indexOf(id) !== -1) {
_this._scheduler.scheduleFunction(fn, interval, args, id);
}
};
};
FakeAsyncTestZoneSpec.prototype._dequeuePeriodicTimer = function(id) {
var _this = this;
return function() {
FakeAsyncTestZoneSpec._removeTimer(_this.pendingPeriodicTimers, id);
};
};
FakeAsyncTestZoneSpec.prototype._setTimeout = function(fn, delay, args) {
var removeTimerFn = this._dequeueTimer(this._scheduler.nextId);
var cb = this._fnAndFlush(fn, {
onSuccess: removeTimerFn,
onError: removeTimerFn
});
var id = this._scheduler.scheduleFunction(cb, delay, args);
this.pendingTimers.push(id);
return id;
};
FakeAsyncTestZoneSpec.prototype._clearTimeout = function(id) {
FakeAsyncTestZoneSpec._removeTimer(this.pendingTimers, id);
this._scheduler.removeScheduledFunctionWithId(id);
};
FakeAsyncTestZoneSpec.prototype._setInterval = function(fn, interval) {
var args = [];
for (var _i = 2; _i < arguments.length; _i++) {
args[_i - 2] = arguments[_i];
}
var id = this._scheduler.nextId;
var completers = {
onSuccess: null,
onError: this._dequeuePeriodicTimer(id)
};
var cb = this._fnAndFlush(fn, completers);
completers.onSuccess = this._requeuePeriodicTimer(cb, interval, args, id);
this._scheduler.scheduleFunction(cb, interval, args);
this.pendingPeriodicTimers.push(id);
return id;
};
FakeAsyncTestZoneSpec.prototype._clearInterval = function(id) {
FakeAsyncTestZoneSpec._removeTimer(this.pendingPeriodicTimers, id);
this._scheduler.removeScheduledFunctionWithId(id);
};
FakeAsyncTestZoneSpec.prototype._resetLastErrorAndThrow = function() {
var error = this._lastError || this._uncaughtPromiseErrors[0];
this._uncaughtPromiseErrors.length = 0;
this._lastError = null;
throw error;
};
FakeAsyncTestZoneSpec.prototype.tick = function(millis) {
if (millis === void 0) {
millis = 0;
}
FakeAsyncTestZoneSpec.assertInZone();
this.flushMicrotasks();
this._scheduler.tick(millis);
if (this._lastError !== null) {
this._resetLastErrorAndThrow();
}
};
FakeAsyncTestZoneSpec.prototype.flushMicrotasks = function() {
var _this = this;
FakeAsyncTestZoneSpec.assertInZone();
var flushErrors = function() {
if (_this._lastError !== null || _this._uncaughtPromiseErrors.length) {
_this._resetLastErrorAndThrow();
}
};
while (this._microtasks.length > 0) {
var microtask = this._microtasks.shift();
microtask();
}
flushErrors();
};
FakeAsyncTestZoneSpec.prototype.onScheduleTask = function(delegate, current, target, task) {
switch (task.type) {
case "microTask":
this._microtasks.push(task.invoke);
break;

case "macroTask":
switch (task.source) {
case "setTimeout":
task.data["handleId"] = this._setTimeout(task.invoke, task.data["delay"], task.data["args"]);
break;

case "setInterval":
task.data["handleId"] = this._setInterval(task.invoke, task.data["delay"], task.data["args"]);
break;

case "XMLHttpRequest.send":
throw new Error("Cannot make XHRs from within a fake async test.");

default:
task = delegate.scheduleTask(target, task);
}
break;

case "eventTask":
task = delegate.scheduleTask(target, task);
break;
}
return task;
};
FakeAsyncTestZoneSpec.prototype.onCancelTask = function(delegate, current, target, task) {
switch (task.source) {
case "setTimeout":
return this._clearTimeout(task.data["handleId"]);

case "setInterval":
return this._clearInterval(task.data["handleId"]);

default:
return delegate.cancelTask(target, task);
}
};
FakeAsyncTestZoneSpec.prototype.onHandleError = function(parentZoneDelegate, currentZone, targetZone, error) {
this._lastError = error;
return false;
};
return FakeAsyncTestZoneSpec;
}();
Zone["FakeAsyncTestZoneSpec"] = FakeAsyncTestZoneSpec;
})(typeof window === "object" && window || typeof self === "object" && self || global);
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory() : typeof define === "function" && define.amd ? define(factory) : factory();
})(this, function() {
"use strict";
(function() {
var __extends = function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
if (!Zone) throw new Error("Missing: zone.js");
if (typeof jasmine == "undefined") throw new Error("Missing: jasmine.js");
if (jasmine["__zone_patch__"]) throw new Error("'jasmine' has already been patched with 'Zone'.");
jasmine["__zone_patch__"] = true;
var SyncTestZoneSpec = Zone["SyncTestZoneSpec"];
var ProxyZoneSpec = Zone["ProxyZoneSpec"];
if (!SyncTestZoneSpec) throw new Error("Missing: SyncTestZoneSpec");
if (!ProxyZoneSpec) throw new Error("Missing: ProxyZoneSpec");
var ambientZone = Zone.current;
var syncZone = ambientZone.fork(new SyncTestZoneSpec("jasmine.describe"));
var testProxyZone = null;
var jasmineEnv = jasmine.getEnv();
[ "describe", "xdescribe", "fdescribe" ].forEach(function(methodName) {
var originalJasmineFn = jasmineEnv[methodName];
jasmineEnv[methodName] = function(description, specDefinitions) {
return originalJasmineFn.call(this, description, wrapDescribeInZone(specDefinitions));
};
});
[ "it", "xit", "fit" ].forEach(function(methodName) {
var originalJasmineFn = jasmineEnv[methodName];
jasmineEnv[methodName] = function(description, specDefinitions, timeout) {
arguments[1] = wrapTestInZone(specDefinitions);
return originalJasmineFn.apply(this, arguments);
};
});
[ "beforeEach", "afterEach" ].forEach(function(methodName) {
var originalJasmineFn = jasmineEnv[methodName];
jasmineEnv[methodName] = function(specDefinitions, timeout) {
arguments[0] = wrapTestInZone(specDefinitions);
return originalJasmineFn.apply(this, arguments);
};
});
function wrapDescribeInZone(describeBody) {
return function() {
return syncZone.run(describeBody, this, arguments);
};
}
function wrapTestInZone(testBody) {
return testBody && (testBody.length ? function(done) {
return testProxyZone.run(testBody, this, [ done ]);
} : function() {
return testProxyZone.run(testBody, this);
});
}
var QueueRunner = jasmine.QueueRunner;
jasmine.QueueRunner = function(_super) {
__extends(ZoneQueueRunner, _super);
function ZoneQueueRunner(attrs) {
attrs.onComplete = function(fn) {
return function() {
testProxyZone = null;
ambientZone.scheduleMicroTask("jasmine.onComplete", fn);
};
}(attrs.onComplete);
_super.call(this, attrs);
}
ZoneQueueRunner.prototype.execute = function() {
var _this = this;
if (Zone.current !== ambientZone) throw new Error("Unexpected Zone: " + Zone.current.name);
testProxyZone = ambientZone.fork(new ProxyZoneSpec());
if (!Zone.currentTask) {
Zone.current.scheduleMicroTask("jasmine.execute().forceTask", function() {
return QueueRunner.prototype.execute.call(_this);
});
} else {
_super.prototype.execute.call(this);
}
};
return ZoneQueueRunner;
}(QueueRunner);
})();
});
}, function(module, exports, __webpack_require__) {
!function(e, n) {
true ? n() : "function" == typeof define && define.amd ? define(n) : n();
}(this, function() {
"use strict";
!function() {
function e(e) {
return function() {
return c.run(e, this, arguments);
};
}
function n(e) {
return e && (e.length ? function(n) {
return u.run(e, this, [ n ]);
} : function() {
return u.run(e, this);
});
}
var r = function(e, n) {
function r() {
this.constructor = e;
}
for (var t in n) n.hasOwnProperty(t) && (e[t] = n[t]);
e.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
};
if (!Zone) throw new Error("Missing: zone.js");
if ("undefined" == typeof jasmine) throw new Error("Missing: jasmine.js");
if (jasmine.__zone_patch__) throw new Error("'jasmine' has already been patched with 'Zone'.");
jasmine.__zone_patch__ = !0;
var t = Zone.SyncTestZoneSpec, o = Zone.ProxyZoneSpec;
if (!t) throw new Error("Missing: SyncTestZoneSpec");
if (!o) throw new Error("Missing: ProxyZoneSpec");
var i = Zone.current, c = i.fork(new t("jasmine.describe")), u = null, s = jasmine.getEnv();
[ "describe", "xdescribe", "fdescribe" ].forEach(function(n) {
var r = s[n];
s[n] = function(n, t) {
return r.call(this, n, e(t));
};
}), [ "it", "xit", "fit" ].forEach(function(e) {
var r = s[e];
s[e] = function(e, t, o) {
return arguments[1] = n(t), r.apply(this, arguments);
};
}), [ "beforeEach", "afterEach" ].forEach(function(e) {
var r = s[e];
s[e] = function(e, t) {
return arguments[0] = n(e), r.apply(this, arguments);
};
});
var f = jasmine.QueueRunner;
jasmine.QueueRunner = function(e) {
function n(n) {
n.onComplete = function(e) {
return function() {
u = null, i.scheduleMicroTask("jasmine.onComplete", e);
};
}(n.onComplete), e.call(this, n);
}
return r(n, e), n.prototype.execute = function() {
var n = this;
if (Zone.current !== i) throw new Error("Unexpected Zone: " + Zone.current.name);
u = i.fork(new o()), Zone.currentTask ? e.prototype.execute.call(this) : Zone.current.scheduleMicroTask("jasmine.execute().forceTask", function() {
return f.prototype.execute.call(n);
});
}, n;
}(f);
}();
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory() : typeof define === "function" && define.amd ? define(factory) : factory();
})(this, function() {
"use strict";
var NEWLINE = "\n";
var IGNORE_FRAMES = {};
var creationTrace = "__creationTrace__";
var ERROR_TAG = "STACKTRACE TRACKING";
var SEP_TAG = "__SEP_TAG__";
var sepTemplate = SEP_TAG + "@[native]";
var LongStackTrace = function() {
function LongStackTrace() {
this.error = getStacktrace();
this.timestamp = new Date();
}
return LongStackTrace;
}();
function getStacktraceWithUncaughtError() {
return new Error(ERROR_TAG);
}
function getStacktraceWithCaughtError() {
try {
throw getStacktraceWithUncaughtError();
} catch (err) {
return err;
}
}
var error = getStacktraceWithUncaughtError();
var caughtError = getStacktraceWithCaughtError();
var getStacktrace = error.stack ? getStacktraceWithUncaughtError : caughtError.stack ? getStacktraceWithCaughtError : getStacktraceWithUncaughtError;
function getFrames(error) {
return error.stack ? error.stack.split(NEWLINE) : [];
}
function addErrorStack(lines, error) {
var trace = getFrames(error);
for (var i = 0; i < trace.length; i++) {
var frame = trace[i];
if (!IGNORE_FRAMES.hasOwnProperty(frame)) {
lines.push(trace[i]);
}
}
}
function renderLongStackTrace(frames, stack) {
var longTrace = [ stack ? stack.trim() : "" ];
if (frames) {
var timestamp = new Date().getTime();
for (var i = 0; i < frames.length; i++) {
var traceFrames = frames[i];
var lastTime = traceFrames.timestamp;
var separator = "____________________Elapsed " + (timestamp - lastTime.getTime()) + " ms; At: " + lastTime;
separator = separator.replace(/[^\w\d]/g, "_");
longTrace.push(sepTemplate.replace(SEP_TAG, separator));
addErrorStack(longTrace, traceFrames.error);
timestamp = lastTime.getTime();
}
}
return longTrace.join(NEWLINE);
}
Zone["longStackTraceZoneSpec"] = {
name: "long-stack-trace",
longStackTraceLimit: 10,
getLongStackTrace: function(error) {
if (!error) {
return undefined;
}
var task = error[Zone.__symbol__("currentTask")];
var trace = task && task.data && task.data[creationTrace];
if (!trace) {
return error.stack;
}
return renderLongStackTrace(trace, error.stack);
},
onScheduleTask: function(parentZoneDelegate, currentZone, targetZone, task) {
if (Error.stackTraceLimit > 0) {
var currentTask = Zone.currentTask;
var trace = currentTask && currentTask.data && currentTask.data[creationTrace] || [];
trace = [ new LongStackTrace() ].concat(trace);
if (trace.length > this.longStackTraceLimit) {
trace.length = this.longStackTraceLimit;
}
if (!task.data) task.data = {};
task.data[creationTrace] = trace;
}
return parentZoneDelegate.scheduleTask(targetZone, task);
},
onHandleError: function(parentZoneDelegate, currentZone, targetZone, error) {
if (Error.stackTraceLimit > 0) {
var parentTask = Zone.currentTask || error.task;
if (error instanceof Error && parentTask) {
var longStack = renderLongStackTrace(parentTask.data && parentTask.data[creationTrace], error.stack);
try {
error.stack = error.longStack = longStack;
} catch (err) {}
}
}
return parentZoneDelegate.handleError(targetZone, error);
}
};
function captureStackTraces(stackTraces, count) {
if (count > 0) {
stackTraces.push(getFrames(new LongStackTrace().error));
captureStackTraces(stackTraces, count - 1);
}
}
function computeIgnoreFrames() {
if (Error.stackTraceLimit <= 0) {
return;
}
var frames = [];
captureStackTraces(frames, 2);
var frames1 = frames[0];
var frames2 = frames[1];
for (var i = 0; i < frames1.length; i++) {
var frame1 = frames1[i];
if (frame1.indexOf(ERROR_TAG) == -1) {
var match = frame1.match(/^\s*at\s+/);
if (match) {
sepTemplate = match[0] + SEP_TAG + " (http://localhost)";
break;
}
}
}
for (var i = 0; i < frames1.length; i++) {
var frame1 = frames1[i];
var frame2 = frames2[i];
if (frame1 === frame2) {
IGNORE_FRAMES[frame1] = true;
} else {
break;
}
}
}
computeIgnoreFrames();
});
}, function(module, exports, __webpack_require__) {
!function(t, r) {
true ? r() : "function" == typeof define && define.amd ? define(r) : r();
}(this, function() {
"use strict";
function t() {
return new Error(u);
}
function r() {
try {
throw t();
} catch (r) {
return r;
}
}
function a(t) {
return t.stack ? t.stack.split(o) : [];
}
function e(t, r) {
for (var e = a(r), n = 0; n < e.length; n++) {
var c = e[n];
s.hasOwnProperty(c) || t.push(e[n]);
}
}
function n(t, r) {
var a = [ r ? r.trim() : "" ];
if (t) for (var n = new Date().getTime(), c = 0; c < t.length; c++) {
var i = t[c], s = i.timestamp, f = "____________________Elapsed " + (n - s.getTime()) + " ms; At: " + s;
f = f.replace(/[^\w\d]/g, "_"), a.push(k.replace(_, f)), e(a, i.error), n = s.getTime();
}
return a.join(o);
}
function c(t, r) {
r > 0 && (t.push(a(new h().error)), c(t, r - 1));
}
function i() {
if (!(Error.stackTraceLimit <= 0)) {
var t = [];
c(t, 2);
for (var r = t[0], a = t[1], e = 0; e < r.length; e++) {
var n = r[e];
if (n.indexOf(u) == -1) {
var i = n.match(/^\s*at\s+/);
if (i) {
k = i[0] + _ + " (http://localhost)";
break;
}
}
}
for (var e = 0; e < r.length; e++) {
var n = r[e], o = a[e];
if (n !== o) break;
s[n] = !0;
}
}
}
var o = "\n", s = {}, f = "__creationTrace__", u = "STACKTRACE TRACKING", _ = "__SEP_TAG__", k = _ + "@[native]", h = function() {
function t() {
this.error = T(), this.timestamp = new Date();
}
return t;
}(), l = t(), d = r(), T = l.stack ? t : d.stack ? r : t;
Zone.longStackTraceZoneSpec = {
name: "long-stack-trace",
longStackTraceLimit: 10,
getLongStackTrace: function(t) {
if (t) {
var r = t[Zone.__symbol__("currentTask")], a = r && r.data && r.data[f];
return a ? n(a, t.stack) : t.stack;
}
},
onScheduleTask: function(t, r, a, e) {
if (Error.stackTraceLimit > 0) {
var n = Zone.currentTask, c = n && n.data && n.data[f] || [];
c = [ new h() ].concat(c), c.length > this.longStackTraceLimit && (c.length = this.longStackTraceLimit), 
e.data || (e.data = {}), e.data[f] = c;
}
return t.scheduleTask(a, e);
},
onHandleError: function(t, r, a, e) {
if (Error.stackTraceLimit > 0) {
var c = Zone.currentTask || e.task;
if (e instanceof Error && c) {
var i = n(c.data && c.data[f], e.stack);
try {
e.stack = e.longStack = i;
} catch (o) {}
}
}
return t.handleError(a, e);
}
}, i();
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory() : typeof define === "function" && define.amd ? define(factory) : factory();
})(this, function() {
"use strict";
(function(context) {
var Mocha = context.Mocha;
if (typeof Mocha === "undefined") {
throw new Error("Missing Mocha.js");
}
if (typeof Zone === "undefined") {
throw new Error("Missing Zone.js");
}
var ProxyZoneSpec = Zone["ProxyZoneSpec"];
var SyncTestZoneSpec = Zone["SyncTestZoneSpec"];
if (!ProxyZoneSpec) {
throw new Error("Missing ProxyZoneSpec");
}
if (Mocha["__zone_patch__"]) {
throw new Error('"Mocha" has already been patched with "Zone".');
}
Mocha["__zone_patch__"] = true;
var rootZone = Zone.current;
var syncZone = rootZone.fork(new SyncTestZoneSpec("Mocha.describe"));
var testZone = null;
var suiteZone = rootZone.fork(new ProxyZoneSpec());
var mochaOriginal = {
after: Mocha.after,
afterEach: Mocha.afterEach,
before: Mocha.before,
beforeEach: Mocha.beforeEach,
describe: Mocha.describe,
it: Mocha.it
};
function modifyArguments(args, syncTest, asyncTest) {
var _loop_1 = function(i) {
var arg = args[i];
if (typeof arg === "function") {
args[i] = arg.length === 0 ? syncTest(arg) : asyncTest(arg);
args[i].toString = function() {
return arg.toString();
};
}
};
for (var i = 0; i < args.length; i++) {
_loop_1(i);
}
return args;
}
function wrapDescribeInZone(args) {
var syncTest = function(fn) {
return function() {
return syncZone.run(fn, this, arguments);
};
};
return modifyArguments(args, syncTest);
}
function wrapTestInZone(args) {
var asyncTest = function(fn) {
return function(done) {
return testZone.run(fn, this, [ done ]);
};
};
var syncTest = function(fn) {
return function() {
return testZone.run(fn, this);
};
};
return modifyArguments(args, syncTest, asyncTest);
}
function wrapSuiteInZone(args) {
var asyncTest = function(fn) {
return function(done) {
return suiteZone.run(fn, this, [ done ]);
};
};
var syncTest = function(fn) {
return function() {
return suiteZone.run(fn, this);
};
};
return modifyArguments(args, syncTest, asyncTest);
}
context.describe = context.suite = Mocha.describe = function() {
return mochaOriginal.describe.apply(this, wrapDescribeInZone(arguments));
};
context.xdescribe = context.suite.skip = Mocha.describe.skip = function() {
return mochaOriginal.describe.skip.apply(this, wrapDescribeInZone(arguments));
};
context.describe.only = context.suite.only = Mocha.describe.only = function() {
return mochaOriginal.describe.only.apply(this, wrapDescribeInZone(arguments));
};
context.it = context.specify = context.test = Mocha.it = function() {
return mochaOriginal.it.apply(this, wrapTestInZone(arguments));
};
context.xit = context.xspecify = Mocha.it.skip = function() {
return mochaOriginal.it.skip.apply(this, wrapTestInZone(arguments));
};
context.it.only = context.test.only = Mocha.it.only = function() {
return mochaOriginal.it.only.apply(this, wrapTestInZone(arguments));
};
context.after = context.suiteTeardown = Mocha.after = function() {
return mochaOriginal.after.apply(this, wrapSuiteInZone(arguments));
};
context.afterEach = context.teardown = Mocha.afterEach = function() {
return mochaOriginal.afterEach.apply(this, wrapTestInZone(arguments));
};
context.before = context.suiteSetup = Mocha.before = function() {
return mochaOriginal.before.apply(this, wrapSuiteInZone(arguments));
};
context.beforeEach = context.setup = Mocha.beforeEach = function() {
return mochaOriginal.beforeEach.apply(this, wrapTestInZone(arguments));
};
(function(originalRunTest, originalRun) {
Mocha.Runner.prototype.runTest = function(fn) {
var _this = this;
Zone.current.scheduleMicroTask("mocha.forceTask", function() {
originalRunTest.call(_this, fn);
});
};
Mocha.Runner.prototype.run = function(fn) {
this.on("test", function(e) {
if (Zone.current !== rootZone) {
throw new Error("Unexpected zone: " + Zone.current.name);
}
testZone = rootZone.fork(new ProxyZoneSpec());
});
return originalRun.call(this, fn);
};
})(Mocha.Runner.prototype.runTest, Mocha.Runner.prototype.run);
})(window);
});
}, function(module, exports, __webpack_require__) {
!function(n, e) {
true ? e() : "function" == typeof define && define.amd ? define(e) : e();
}(this, function() {
"use strict";
!function(n) {
function e(n, e, t) {
for (var r = function(r) {
var o = n[r];
"function" == typeof o && (n[r] = 0 === o.length ? e(o) : t(o), n[r].toString = function() {
return o.toString();
});
}, o = 0; o < n.length; o++) r(o);
return n;
}
function t(n) {
var t = function(n) {
return function() {
return s.run(n, this, arguments);
};
};
return e(n, t);
}
function r(n) {
var t = function(n) {
return function(e) {
return a.run(n, this, [ e ]);
};
}, r = function(n) {
return function() {
return a.run(n, this);
};
};
return e(n, r, t);
}
function o(n) {
var t = function(n) {
return function(e) {
return p.run(n, this, [ e ]);
};
}, r = function(n) {
return function() {
return p.run(n, this);
};
};
return e(n, r, t);
}
var i = n.Mocha;
if ("undefined" == typeof i) throw new Error("Missing Mocha.js");
if ("undefined" == typeof Zone) throw new Error("Missing Zone.js");
var u = Zone.ProxyZoneSpec, c = Zone.SyncTestZoneSpec;
if (!u) throw new Error("Missing ProxyZoneSpec");
if (i.__zone_patch__) throw new Error('"Mocha" has already been patched with "Zone".');
i.__zone_patch__ = !0;
var f = Zone.current, s = f.fork(new c("Mocha.describe")), a = null, p = f.fork(new u()), h = {
after: i.after,
afterEach: i.afterEach,
before: i.before,
beforeEach: i.beforeEach,
describe: i.describe,
it: i.it
};
n.describe = n.suite = i.describe = function() {
return h.describe.apply(this, t(arguments));
}, n.xdescribe = n.suite.skip = i.describe.skip = function() {
return h.describe.skip.apply(this, t(arguments));
}, n.describe.only = n.suite.only = i.describe.only = function() {
return h.describe.only.apply(this, t(arguments));
}, n.it = n.specify = n.test = i.it = function() {
return h.it.apply(this, r(arguments));
}, n.xit = n.xspecify = i.it.skip = function() {
return h.it.skip.apply(this, r(arguments));
}, n.it.only = n.test.only = i.it.only = function() {
return h.it.only.apply(this, r(arguments));
}, n.after = n.suiteTeardown = i.after = function() {
return h.after.apply(this, o(arguments));
}, n.afterEach = n.teardown = i.afterEach = function() {
return h.afterEach.apply(this, r(arguments));
}, n.before = n.suiteSetup = i.before = function() {
return h.before.apply(this, o(arguments));
}, n.beforeEach = n.setup = i.beforeEach = function() {
return h.beforeEach.apply(this, r(arguments));
}, function(n, e) {
i.Runner.prototype.runTest = function(e) {
var t = this;
Zone.current.scheduleMicroTask("mocha.forceTask", function() {
n.call(t, e);
});
}, i.Runner.prototype.run = function(n) {
return this.on("test", function(n) {
if (Zone.current !== f) throw new Error("Unexpected zone: " + Zone.current.name);
a = f.fork(new u());
}), e.call(this, n);
};
}(i.Runner.prototype.runTest, i.Runner.prototype.run);
}(window);
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory() : typeof define === "function" && define.amd ? define(factory) : factory();
})(this, function() {
"use strict";
var ProxyZoneSpec = function() {
function ProxyZoneSpec(defaultSpecDelegate) {
if (defaultSpecDelegate === void 0) {
defaultSpecDelegate = null;
}
this.defaultSpecDelegate = defaultSpecDelegate;
this.name = "ProxyZone";
this.properties = {
ProxyZoneSpec: this
};
this.propertyKeys = null;
this.setDelegate(defaultSpecDelegate);
}
ProxyZoneSpec.get = function() {
return Zone.current.get("ProxyZoneSpec");
};
ProxyZoneSpec.isLoaded = function() {
return ProxyZoneSpec.get() instanceof ProxyZoneSpec;
};
ProxyZoneSpec.assertPresent = function() {
if (!this.isLoaded()) {
throw new Error("Expected to be running in 'ProxyZone', but it was not found.");
}
return ProxyZoneSpec.get();
};
ProxyZoneSpec.prototype.setDelegate = function(delegateSpec) {
var _this = this;
this._delegateSpec = delegateSpec;
this.propertyKeys && this.propertyKeys.forEach(function(key) {
return delete _this.properties[key];
});
this.propertyKeys = null;
if (delegateSpec && delegateSpec.properties) {
this.propertyKeys = Object.keys(delegateSpec.properties);
this.propertyKeys.forEach(function(k) {
return _this.properties[k] = delegateSpec.properties[k];
});
}
};
ProxyZoneSpec.prototype.getDelegate = function() {
return this._delegateSpec;
};
ProxyZoneSpec.prototype.resetDelegate = function() {
this.setDelegate(this.defaultSpecDelegate);
};
ProxyZoneSpec.prototype.onFork = function(parentZoneDelegate, currentZone, targetZone, zoneSpec) {
if (this._delegateSpec && this._delegateSpec.onFork) {
return this._delegateSpec.onFork(parentZoneDelegate, currentZone, targetZone, zoneSpec);
} else {
return parentZoneDelegate.fork(targetZone, zoneSpec);
}
};
ProxyZoneSpec.prototype.onIntercept = function(parentZoneDelegate, currentZone, targetZone, delegate, source) {
if (this._delegateSpec && this._delegateSpec.onIntercept) {
return this._delegateSpec.onIntercept(parentZoneDelegate, currentZone, targetZone, delegate, source);
} else {
return parentZoneDelegate.intercept(targetZone, delegate, source);
}
};
ProxyZoneSpec.prototype.onInvoke = function(parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {
if (this._delegateSpec && this._delegateSpec.onInvoke) {
return this._delegateSpec.onInvoke(parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source);
} else {
return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);
}
};
ProxyZoneSpec.prototype.onHandleError = function(parentZoneDelegate, currentZone, targetZone, error) {
if (this._delegateSpec && this._delegateSpec.onHandleError) {
return this._delegateSpec.onHandleError(parentZoneDelegate, currentZone, targetZone, error);
} else {
return parentZoneDelegate.handleError(targetZone, error);
}
};
ProxyZoneSpec.prototype.onScheduleTask = function(parentZoneDelegate, currentZone, targetZone, task) {
if (this._delegateSpec && this._delegateSpec.onScheduleTask) {
return this._delegateSpec.onScheduleTask(parentZoneDelegate, currentZone, targetZone, task);
} else {
return parentZoneDelegate.scheduleTask(targetZone, task);
}
};
ProxyZoneSpec.prototype.onInvokeTask = function(parentZoneDelegate, currentZone, targetZone, task, applyThis, applyArgs) {
if (this._delegateSpec && this._delegateSpec.onFork) {
return this._delegateSpec.onInvokeTask(parentZoneDelegate, currentZone, targetZone, task, applyThis, applyArgs);
} else {
return parentZoneDelegate.invokeTask(targetZone, task, applyThis, applyArgs);
}
};
ProxyZoneSpec.prototype.onCancelTask = function(parentZoneDelegate, currentZone, targetZone, task) {
if (this._delegateSpec && this._delegateSpec.onCancelTask) {
return this._delegateSpec.onCancelTask(parentZoneDelegate, currentZone, targetZone, task);
} else {
return parentZoneDelegate.cancelTask(targetZone, task);
}
};
ProxyZoneSpec.prototype.onHasTask = function(delegate, current, target, hasTaskState) {
if (this._delegateSpec && this._delegateSpec.onHasTask) {
this._delegateSpec.onHasTask(delegate, current, target, hasTaskState);
} else {
delegate.hasTask(target, hasTaskState);
}
};
return ProxyZoneSpec;
}();
Zone["ProxyZoneSpec"] = ProxyZoneSpec;
});
}, function(module, exports, __webpack_require__) {
!function(e, t) {
true ? t() : "function" == typeof define && define.amd ? define(t) : t();
}(this, function() {
"use strict";
var e = function() {
function e(e) {
void 0 === e && (e = null), this.defaultSpecDelegate = e, this.name = "ProxyZone", 
this.properties = {
ProxyZoneSpec: this
}, this.propertyKeys = null, this.setDelegate(e);
}
return e.get = function() {
return Zone.current.get("ProxyZoneSpec");
}, e.isLoaded = function() {
return e.get() instanceof e;
}, e.assertPresent = function() {
if (!this.isLoaded()) throw new Error("Expected to be running in 'ProxyZone', but it was not found.");
return e.get();
}, e.prototype.setDelegate = function(e) {
var t = this;
this._delegateSpec = e, this.propertyKeys && this.propertyKeys.forEach(function(e) {
return delete t.properties[e];
}), this.propertyKeys = null, e && e.properties && (this.propertyKeys = Object.keys(e.properties), 
this.propertyKeys.forEach(function(n) {
return t.properties[n] = e.properties[n];
}));
}, e.prototype.getDelegate = function() {
return this._delegateSpec;
}, e.prototype.resetDelegate = function() {
this.setDelegate(this.defaultSpecDelegate);
}, e.prototype.onFork = function(e, t, n, o) {
return this._delegateSpec && this._delegateSpec.onFork ? this._delegateSpec.onFork(e, t, n, o) : e.fork(n, o);
}, e.prototype.onIntercept = function(e, t, n, o, r) {
return this._delegateSpec && this._delegateSpec.onIntercept ? this._delegateSpec.onIntercept(e, t, n, o, r) : e.intercept(n, o, r);
}, e.prototype.onInvoke = function(e, t, n, o, r, s, p) {
return this._delegateSpec && this._delegateSpec.onInvoke ? this._delegateSpec.onInvoke(e, t, n, o, r, s, p) : e.invoke(n, o, r, s, p);
}, e.prototype.onHandleError = function(e, t, n, o) {
return this._delegateSpec && this._delegateSpec.onHandleError ? this._delegateSpec.onHandleError(e, t, n, o) : e.handleError(n, o);
}, e.prototype.onScheduleTask = function(e, t, n, o) {
return this._delegateSpec && this._delegateSpec.onScheduleTask ? this._delegateSpec.onScheduleTask(e, t, n, o) : e.scheduleTask(n, o);
}, e.prototype.onInvokeTask = function(e, t, n, o, r, s) {
return this._delegateSpec && this._delegateSpec.onFork ? this._delegateSpec.onInvokeTask(e, t, n, o, r, s) : e.invokeTask(n, o, r, s);
}, e.prototype.onCancelTask = function(e, t, n, o) {
return this._delegateSpec && this._delegateSpec.onCancelTask ? this._delegateSpec.onCancelTask(e, t, n, o) : e.cancelTask(n, o);
}, e.prototype.onHasTask = function(e, t, n, o) {
this._delegateSpec && this._delegateSpec.onHasTask ? this._delegateSpec.onHasTask(e, t, n, o) : e.hasTask(n, o);
}, e;
}();
Zone.ProxyZoneSpec = e;
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory() : typeof define === "function" && define.amd ? define(factory) : factory();
})(this, function() {
"use strict";
var SyncTestZoneSpec = function() {
function SyncTestZoneSpec(namePrefix) {
this.runZone = Zone.current;
this.name = "syncTestZone for " + namePrefix;
}
SyncTestZoneSpec.prototype.onScheduleTask = function(delegate, current, target, task) {
switch (task.type) {
case "microTask":
case "macroTask":
throw new Error("Cannot call " + task.source + " from within a sync test.");

case "eventTask":
task = delegate.scheduleTask(target, task);
break;
}
return task;
};
return SyncTestZoneSpec;
}();
Zone["SyncTestZoneSpec"] = SyncTestZoneSpec;
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory() : typeof define === "function" && define.amd ? define(factory) : factory();
})(this, function() {
"use strict";
var TaskTrackingZoneSpec = function() {
function TaskTrackingZoneSpec() {
this.name = "TaskTrackingZone";
this.microTasks = [];
this.macroTasks = [];
this.eventTasks = [];
this.properties = {
TaskTrackingZone: this
};
}
TaskTrackingZoneSpec.get = function() {
return Zone.current.get("TaskTrackingZone");
};
TaskTrackingZoneSpec.prototype.getTasksFor = function(type) {
switch (type) {
case "microTask":
return this.microTasks;

case "macroTask":
return this.macroTasks;

case "eventTask":
return this.eventTasks;
}
throw new Error("Unknown task format: " + type);
};
TaskTrackingZoneSpec.prototype.onScheduleTask = function(parentZoneDelegate, currentZone, targetZone, task) {
task["creationLocation"] = new Error("Task '" + task.type + "' from '" + task.source + "'.");
var tasks = this.getTasksFor(task.type);
tasks.push(task);
return parentZoneDelegate.scheduleTask(targetZone, task);
};
TaskTrackingZoneSpec.prototype.onCancelTask = function(parentZoneDelegate, currentZone, targetZone, task) {
var tasks = this.getTasksFor(task.type);
for (var i = 0; i < tasks.length; i++) {
if (tasks[i] == task) {
tasks.splice(i, 1);
break;
}
}
return parentZoneDelegate.cancelTask(targetZone, task);
};
TaskTrackingZoneSpec.prototype.onInvokeTask = function(parentZoneDelegate, currentZone, targetZone, task, applyThis, applyArgs) {
if (task.type === "eventTask") return parentZoneDelegate.invokeTask(targetZone, task, applyThis, applyArgs);
var tasks = this.getTasksFor(task.type);
for (var i = 0; i < tasks.length; i++) {
if (tasks[i] == task) {
tasks.splice(i, 1);
break;
}
}
return parentZoneDelegate.invokeTask(targetZone, task, applyThis, applyArgs);
};
TaskTrackingZoneSpec.prototype.clearEvents = function() {
while (this.eventTasks.length) {
Zone.current.cancelTask(this.eventTasks[0]);
}
};
return TaskTrackingZoneSpec;
}();
Zone["TaskTrackingZoneSpec"] = TaskTrackingZoneSpec;
});
}, function(module, exports, __webpack_require__) {
!function(e, t) {
true ? t() : "function" == typeof define && define.amd ? define(t) : t();
}(this, function() {
"use strict";
var e = function() {
function e() {
this.name = "TaskTrackingZone", this.microTasks = [], this.macroTasks = [], this.eventTasks = [], 
this.properties = {
TaskTrackingZone: this
};
}
return e.get = function() {
return Zone.current.get("TaskTrackingZone");
}, e.prototype.getTasksFor = function(e) {
switch (e) {
case "microTask":
return this.microTasks;

case "macroTask":
return this.macroTasks;

case "eventTask":
return this.eventTasks;
}
throw new Error("Unknown task format: " + e);
}, e.prototype.onScheduleTask = function(e, t, n, s) {
s.creationLocation = new Error("Task '" + s.type + "' from '" + s.source + "'.");
var r = this.getTasksFor(s.type);
return r.push(s), e.scheduleTask(n, s);
}, e.prototype.onCancelTask = function(e, t, n, s) {
for (var r = this.getTasksFor(s.type), o = 0; o < r.length; o++) if (r[o] == s) {
r.splice(o, 1);
break;
}
return e.cancelTask(n, s);
}, e.prototype.onInvokeTask = function(e, t, n, s, r, o) {
if ("eventTask" === s.type) return e.invokeTask(n, s, r, o);
for (var a = this.getTasksFor(s.type), i = 0; i < a.length; i++) if (a[i] == s) {
a.splice(i, 1);
break;
}
return e.invokeTask(n, s, r, o);
}, e.prototype.clearEvents = function() {
for (;this.eventTasks.length; ) Zone.current.cancelTask(this.eventTasks[0]);
}, e;
}();
Zone.TaskTrackingZoneSpec = e;
});
}, function(module, exports, __webpack_require__) {
!function(e, n) {
true ? n() : "function" == typeof define && define.amd ? define(n) : n();
}(this, function() {
"use strict";
function e(e, n, t, r, i) {
var u = e[c];
if (u) for (var o = 0; o < u.length; o++) {
var a = u[o], v = a.data, s = v.handler;
if ((v.handler === n || s.listener === n) && v.useCapturing === r && v.eventName === t) return i && u.splice(o, 1), 
a;
}
return null;
}
function n(e, n, t) {
var r = e[c];
r || (r = e[c] = []), t ? r.unshift(n) : r.push(n);
}
function t(t, r, i, u, o, v) {
function c(e) {
var t = e.data;
return n(t.target, e, o), t.invokeAddFunc(d, e);
}
function s(n) {
var t = n.data;
return e(t.target, n.invoke, t.eventName, t.useCapturing, !0), t.invokeRemoveFunc(h, n);
}
void 0 === i && (i = !0), void 0 === u && (u = !1), void 0 === o && (o = !1), void 0 === v && (v = f);
var d = a(t), h = a(r), l = !i && void 0;
return function(n, r) {
var i = v(n, r);
i.useCapturing = i.useCapturing || l;
var o = null;
"function" == typeof i.handler ? o = i.handler : i.handler && i.handler.handleEvent && (o = function(e) {
return i.handler.handleEvent(e);
});
var a = !1;
try {
a = i.handler && "[object FunctionWrapper]" === i.handler.toString();
} catch (f) {
return;
}
if (!o || a) return i.invokeAddFunc(d, i.handler);
if (!u) {
var h = e(i.target, i.handler, i.eventName, i.useCapturing, !1);
if (h) return i.invokeAddFunc(d, h);
}
var g = Zone.current, p = i.target.constructor.name + "." + t + ":" + i.eventName;
g.scheduleEventTask(p, o, i, c, s);
};
}
function r(n, t, r) {
void 0 === t && (t = !0), void 0 === r && (r = f);
var i = a(n), u = !t && void 0;
return function(n, t) {
var o = r(n, t);
o.useCapturing = o.useCapturing || u;
var a = e(o.target, o.handler, o.eventName, o.useCapturing, !0);
a ? a.zone.cancelTask(a) : o.invokeRemoveFunc(i, o.handler);
};
}
function i(e, n, i, u) {
return void 0 === n && (n = s), void 0 === i && (i = d), void 0 === u && (u = f), 
!(!e || !e[n]) && (o(e, n, function() {
return t(n, i, !0, !1, !1, u);
}), o(e, i, function() {
return r(i, !0, u);
}), !0);
}
function u(e, n) {
try {
return Function("f", "return function " + e + "(){return f(this, arguments)}")(n);
} catch (t) {
return function() {
return n(this, arguments);
};
}
}
function o(e, n, t) {
for (var r = e; r && Object.getOwnPropertyNames(r).indexOf(n) === -1; ) r = Object.getPrototypeOf(r);
!r && e[n] && (r = e);
var i, o = a(n);
return r && !(i = r[o]) && (i = r[o] = r[n], r[n] = u(n, t(i, o, n))), i;
}
var a = function(e) {
return "__zone_symbol__" + e;
}, v = "object" == typeof window && window || "object" == typeof self && self || global, c = (!("nw" in v) && "undefined" != typeof process && "[object process]" === {}.toString.call(process), 
a("eventTasks")), s = "addEventListener", d = "removeEventListener", f = function(e, n) {
return {
useCapturing: n[2],
eventName: n[0],
handler: n[1],
target: e || v,
name: n[0],
invokeAddFunc: function(e, n) {
return n && n.invoke ? this.target[e](this.eventName, n.invoke, this.useCapturing) : this.target[e](this.eventName, n, this.useCapturing);
},
invokeRemoveFunc: function(e, n) {
return n && n.invoke ? this.target[e](this.eventName, n.invoke, this.useCapturing) : this.target[e](this.eventName, n, this.useCapturing);
}
};
};
t(s, d), r(d), a("originalInstance");
!function(e) {
function n(e) {
e.MediaQueryList && i(e.MediaQueryList.prototype, "addListener", "removeListener", function(n, t) {
return {
useCapturing: !1,
eventName: "mediaQuery",
handler: t[0],
target: n || e,
name: "mediaQuery",
invokeAddFunc: function(e, n) {
return n && n.invoke ? this.target[e](n.invoke) : this.target[e](n);
},
invokeRemoveFunc: function(e, n) {
return n && n.invoke ? this.target[e](n.invoke) : this.target[e](n);
}
};
});
}
n(e);
}("object" == typeof window && window || "object" == typeof self && self || global);
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory() : typeof define === "function" && define.amd ? define(factory) : factory();
})(this, function() {
"use strict";
(function(_global) {
patchMediaQuery(_global);
function patchMediaQuery(_global) {
if (!_global["MediaQueryList"]) {
return;
}
var patchEventTargetMethods = Zone[Zone.__symbol__("patchEventTargetMethods")];
patchEventTargetMethods(_global["MediaQueryList"].prototype, "addListener", "removeListener", function(self, args) {
return {
useCapturing: false,
eventName: "mediaQuery",
handler: args[0],
target: self || _global,
name: "mediaQuery",
invokeAddFunc: function(addFnSymbol, delegate) {
if (delegate && delegate.invoke) {
return this.target[addFnSymbol](delegate.invoke);
} else {
return this.target[addFnSymbol](delegate);
}
},
invokeRemoveFunc: function(removeFnSymbol, delegate) {
if (delegate && delegate.invoke) {
return this.target[removeFnSymbol](delegate.invoke);
} else {
return this.target[removeFnSymbol](delegate);
}
}
};
});
}
})(typeof window === "object" && window || typeof self === "object" && self || global);
});
}, function(module, exports, __webpack_require__) {
!function(e, t) {
true ? t() : "function" == typeof define && define.amd ? define(t) : t();
}(this, function() {
"use strict";
!function(e) {
function t(e) {
if (e.MediaQueryList) {
var t = Zone[Zone.__symbol__("patchEventTargetMethods")];
t(e.MediaQueryList.prototype, "addListener", "removeListener", function(t, n) {
return {
useCapturing: !1,
eventName: "mediaQuery",
handler: n[0],
target: t || e,
name: "mediaQuery",
invokeAddFunc: function(e, t) {
return t && t.invoke ? this.target[e](t.invoke) : this.target[e](t);
},
invokeRemoveFunc: function(e, t) {
return t && t.invoke ? this.target[e](t.invoke) : this.target[e](t);
}
};
});
}
}
t(e);
}("object" == typeof window && window || "object" == typeof self && self || global);
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory() : typeof define === "function" && define.amd ? define(factory) : factory();
})(this, function() {
"use strict";
(function(_global) {
patchNotification(_global);
function patchNotification(_global) {
var Notification = _global["Notification"];
if (!Notification || !Notification.prototype) {
return;
}
var desc = Object.getOwnPropertyDescriptor(Notification.prototype, "onerror");
if (!desc || !desc.configurable) {
return;
}
var patchOnProperties = Zone[Zone.__symbol__("patchOnProperties")];
patchOnProperties(Notification.prototype, null);
}
})(typeof window === "object" && window || typeof self === "object" && self || global);
});
}, function(module, exports, __webpack_require__) {
!function(o, e) {
true ? e() : "function" == typeof define && define.amd ? define(e) : e();
}(this, function() {
"use strict";
!function(o) {
function e(o) {
var e = o.Notification;
if (e && e.prototype) {
var t = Object.getOwnPropertyDescriptor(e.prototype, "onerror");
if (t && t.configurable) {
var n = Zone[Zone.__symbol__("patchOnProperties")];
n(e.prototype, null);
}
}
}
e(o);
}("object" == typeof window && window || "object" == typeof self && self || global);
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory() : typeof define === "function" && define.amd ? define(factory) : factory();
})(this, function() {
"use strict";
(function(global) {
var wtfTrace = null;
var wtfEvents = null;
var wtfEnabled = function() {
var wtf = global["wtf"];
if (wtf) {
wtfTrace = wtf.trace;
if (wtfTrace) {
wtfEvents = wtfTrace.events;
return true;
}
}
return false;
}();
var WtfZoneSpec = function() {
function WtfZoneSpec() {
this.name = "WTF";
}
WtfZoneSpec.prototype.onFork = function(parentZoneDelegate, currentZone, targetZone, zoneSpec) {
var retValue = parentZoneDelegate.fork(targetZone, zoneSpec);
WtfZoneSpec.forkInstance(zonePathName(targetZone), retValue.name);
return retValue;
};
WtfZoneSpec.prototype.onInvoke = function(parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {
var scope = WtfZoneSpec.invokeScope[source];
if (!scope) {
scope = WtfZoneSpec.invokeScope[source] = wtfEvents.createScope("Zone:invoke:" + source + "(ascii zone)");
}
return wtfTrace.leaveScope(scope(zonePathName(targetZone)), parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source));
};
WtfZoneSpec.prototype.onHandleError = function(parentZoneDelegate, currentZone, targetZone, error) {
return parentZoneDelegate.handleError(targetZone, error);
};
WtfZoneSpec.prototype.onScheduleTask = function(parentZoneDelegate, currentZone, targetZone, task) {
var key = task.type + ":" + task.source;
var instance = WtfZoneSpec.scheduleInstance[key];
if (!instance) {
instance = WtfZoneSpec.scheduleInstance[key] = wtfEvents.createInstance("Zone:schedule:" + key + "(ascii zone, any data)");
}
var retValue = parentZoneDelegate.scheduleTask(targetZone, task);
instance(zonePathName(targetZone), shallowObj(task.data, 2));
return retValue;
};
WtfZoneSpec.prototype.onInvokeTask = function(parentZoneDelegate, currentZone, targetZone, task, applyThis, applyArgs) {
var source = task.source;
var scope = WtfZoneSpec.invokeTaskScope[source];
if (!scope) {
scope = WtfZoneSpec.invokeTaskScope[source] = wtfEvents.createScope("Zone:invokeTask:" + source + "(ascii zone)");
}
return wtfTrace.leaveScope(scope(zonePathName(targetZone)), parentZoneDelegate.invokeTask(targetZone, task, applyThis, applyArgs));
};
WtfZoneSpec.prototype.onCancelTask = function(parentZoneDelegate, currentZone, targetZone, task) {
var key = task.source;
var instance = WtfZoneSpec.cancelInstance[key];
if (!instance) {
instance = WtfZoneSpec.cancelInstance[key] = wtfEvents.createInstance("Zone:cancel:" + key + "(ascii zone, any options)");
}
var retValue = parentZoneDelegate.cancelTask(targetZone, task);
instance(zonePathName(targetZone), shallowObj(task.data, 2));
return retValue;
};
return WtfZoneSpec;
}();
WtfZoneSpec.forkInstance = wtfEnabled && wtfEvents.createInstance("Zone:fork(ascii zone, ascii newZone)");
WtfZoneSpec.scheduleInstance = {};
WtfZoneSpec.cancelInstance = {};
WtfZoneSpec.invokeScope = {};
WtfZoneSpec.invokeTaskScope = {};
function shallowObj(obj, depth) {
if (!depth) return null;
var out = {};
for (var key in obj) {
if (obj.hasOwnProperty(key)) {
var value = obj[key];
switch (typeof value) {
case "object":
var name_1 = value && value.constructor && value.constructor.name;
value = name_1 == Object.name ? shallowObj(value, depth - 1) : name_1;
break;

case "function":
value = value.name || undefined;
break;
}
out[key] = value;
}
}
return out;
}
function zonePathName(zone) {
var name = zone.name;
zone = zone.parent;
while (zone != null) {
name = zone.name + "::" + name;
zone = zone.parent;
}
return name;
}
Zone["wtfZoneSpec"] = !wtfEnabled ? null : new WtfZoneSpec();
})(typeof window === "object" && window || typeof self === "object" && self || global);
});
}, function(module, exports, __webpack_require__) {
!function(e, n) {
true ? n() : "function" == typeof define && define.amd ? define(n) : n();
}(this, function() {
"use strict";
!function(e) {
function n(e, o) {
if (!o) return null;
var t = {};
for (var c in e) if (e.hasOwnProperty(c)) {
var a = e[c];
switch (typeof a) {
case "object":
var r = a && a.constructor && a.constructor.name;
a = r == Object.name ? n(a, o - 1) : r;
break;

case "function":
a = a.name || void 0;
}
t[c] = a;
}
return t;
}
function o(e) {
var n = e.name;
for (e = e.parent; null != e; ) n = e.name + "::" + n, e = e.parent;
return n;
}
var t = null, c = null, a = function() {
var n = e.wtf;
return !(!n || !(t = n.trace)) && (c = t.events, !0);
}(), r = function() {
function e() {
this.name = "WTF";
}
return e.prototype.onFork = function(n, t, c, a) {
var r = n.fork(c, a);
return e.forkInstance(o(c), r.name), r;
}, e.prototype.onInvoke = function(n, a, r, i, s, u, f) {
var p = e.invokeScope[f];
return p || (p = e.invokeScope[f] = c.createScope("Zone:invoke:" + f + "(ascii zone)")), 
t.leaveScope(p(o(r)), n.invoke(r, i, s, u, f));
}, e.prototype.onHandleError = function(e, n, o, t) {
return e.handleError(o, t);
}, e.prototype.onScheduleTask = function(t, a, r, i) {
var s = i.type + ":" + i.source, u = e.scheduleInstance[s];
u || (u = e.scheduleInstance[s] = c.createInstance("Zone:schedule:" + s + "(ascii zone, any data)"));
var f = t.scheduleTask(r, i);
return u(o(r), n(i.data, 2)), f;
}, e.prototype.onInvokeTask = function(n, a, r, i, s, u) {
var f = i.source, p = e.invokeTaskScope[f];
return p || (p = e.invokeTaskScope[f] = c.createScope("Zone:invokeTask:" + f + "(ascii zone)")), 
t.leaveScope(p(o(r)), n.invokeTask(r, i, s, u));
}, e.prototype.onCancelTask = function(t, a, r, i) {
var s = i.source, u = e.cancelInstance[s];
u || (u = e.cancelInstance[s] = c.createInstance("Zone:cancel:" + s + "(ascii zone, any options)"));
var f = t.cancelTask(r, i);
return u(o(r), n(i.data, 2)), f;
}, e;
}();
r.forkInstance = a && c.createInstance("Zone:fork(ascii zone, ascii newZone)"), 
r.scheduleInstance = {}, r.cancelInstance = {}, r.invokeScope = {}, r.invokeTaskScope = {}, 
Zone.wtfZoneSpec = a ? new r() : null;
}("object" == typeof window && window || "object" == typeof self && self || global);
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory() : typeof define === "function" && define.amd ? define(factory) : factory();
})(this, function() {
"use strict";
var Zone$1 = function(global) {
if (global["Zone"]) {
throw new Error("Zone already loaded.");
}
var NO_ZONE = {
name: "NO ZONE"
};
var notScheduled = "notScheduled", scheduling = "scheduling", scheduled = "scheduled", running = "running", canceling = "canceling", unknown = "unknown";
var microTask = "microTask", macroTask = "macroTask", eventTask = "eventTask";
var Zone = function() {
function Zone(parent, zoneSpec) {
this._properties = null;
this._parent = parent;
this._name = zoneSpec ? zoneSpec.name || "unnamed" : "<root>";
this._properties = zoneSpec && zoneSpec.properties || {};
this._zoneDelegate = new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
}
Zone.assertZonePatched = function() {
if (global.Promise !== ZoneAwarePromise) {
throw new Error("Zone.js has detected that ZoneAwarePromise `(window|global).Promise` " + "has been overwritten.\n" + "Most likely cause is that a Promise polyfill has been loaded " + "after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. " + "If you must load one, do so before loading zone.js.)");
}
};
Object.defineProperty(Zone, "root", {
get: function() {
var zone = Zone.current;
while (zone.parent) {
zone = zone.parent;
}
return zone;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone, "current", {
get: function() {
return _currentZoneFrame.zone;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone, "currentTask", {
get: function() {
return _currentTask;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone.prototype, "name", {
get: function() {
return this._name;
},
enumerable: true,
configurable: true
});
Zone.prototype.get = function(key) {
var zone = this.getZoneWith(key);
if (zone) return zone._properties[key];
};
Zone.prototype.getZoneWith = function(key) {
var current = this;
while (current) {
if (current._properties.hasOwnProperty(key)) {
return current;
}
current = current._parent;
}
return null;
};
Zone.prototype.fork = function(zoneSpec) {
if (!zoneSpec) throw new Error("ZoneSpec required!");
return this._zoneDelegate.fork(this, zoneSpec);
};
Zone.prototype.wrap = function(callback, source) {
if (typeof callback !== "function") {
throw new Error("Expecting function got: " + callback);
}
var _callback = this._zoneDelegate.intercept(this, callback, source);
var zone = this;
return function() {
return zone.runGuarded(_callback, this, arguments, source);
};
};
Zone.prototype.run = function(callback, applyThis, applyArgs, source) {
if (applyThis === void 0) {
applyThis = undefined;
}
if (applyArgs === void 0) {
applyArgs = null;
}
if (source === void 0) {
source = null;
}
_currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
try {
return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
} finally {
_currentZoneFrame = _currentZoneFrame.parent;
}
};
Zone.prototype.runGuarded = function(callback, applyThis, applyArgs, source) {
if (applyThis === void 0) {
applyThis = null;
}
if (applyArgs === void 0) {
applyArgs = null;
}
if (source === void 0) {
source = null;
}
_currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
try {
try {
return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
} catch (error) {
if (this._zoneDelegate.handleError(this, error)) {
throw error;
}
}
} finally {
_currentZoneFrame = _currentZoneFrame.parent;
}
};
Zone.prototype.runTask = function(task, applyThis, applyArgs) {
if (task.zone != this) throw new Error("A task can only be run in the zone of creation! (Creation: " + (task.zone || NO_ZONE).name + "; Execution: " + this.name + ")");
var reEntryGuard = task.state != running;
reEntryGuard && task._transitionTo(running, scheduled);
task.runCount++;
var previousTask = _currentTask;
_currentTask = task;
_currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
try {
if (task.type == macroTask && task.data && !task.data.isPeriodic) {
task.cancelFn = null;
}
try {
return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
} catch (error) {
if (this._zoneDelegate.handleError(this, error)) {
throw error;
}
}
} finally {
if (task.state !== notScheduled && task.state !== unknown) {
if (task.type == eventTask || task.data && task.data.isPeriodic) {
reEntryGuard && task._transitionTo(scheduled, running);
} else {
task.runCount = 0;
this._updateTaskCount(task, -1);
reEntryGuard && task._transitionTo(notScheduled, running, notScheduled);
}
}
_currentZoneFrame = _currentZoneFrame.parent;
_currentTask = previousTask;
}
};
Zone.prototype.scheduleTask = function(task) {
if (task.zone && task.zone !== this) {
var newZone = this;
while (newZone) {
if (newZone === task.zone) {
throw Error("can not reschedule task to " + this.name + " which is descendants of the original zone " + task.zone.name);
}
newZone = newZone.parent;
}
}
task._transitionTo(scheduling, notScheduled);
var zoneDelegates = [];
task._zoneDelegates = zoneDelegates;
task._zone = this;
try {
task = this._zoneDelegate.scheduleTask(this, task);
} catch (err) {
task._transitionTo(unknown, scheduling, notScheduled);
this._zoneDelegate.handleError(this, err);
throw err;
}
if (task._zoneDelegates === zoneDelegates) {
this._updateTaskCount(task, 1);
}
if (task.state == scheduling) {
task._transitionTo(scheduled, scheduling);
}
return task;
};
Zone.prototype.scheduleMicroTask = function(source, callback, data, customSchedule) {
return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, null));
};
Zone.prototype.scheduleMacroTask = function(source, callback, data, customSchedule, customCancel) {
return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));
};
Zone.prototype.scheduleEventTask = function(source, callback, data, customSchedule, customCancel) {
return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));
};
Zone.prototype.cancelTask = function(task) {
if (task.zone != this) throw new Error("A task can only be cancelled in the zone of creation! (Creation: " + (task.zone || NO_ZONE).name + "; Execution: " + this.name + ")");
task._transitionTo(canceling, scheduled, running);
try {
this._zoneDelegate.cancelTask(this, task);
} catch (err) {
task._transitionTo(unknown, canceling);
this._zoneDelegate.handleError(this, err);
throw err;
}
this._updateTaskCount(task, -1);
task._transitionTo(notScheduled, canceling);
task.runCount = 0;
return task;
};
Zone.prototype._updateTaskCount = function(task, count) {
var zoneDelegates = task._zoneDelegates;
if (count == -1) {
task._zoneDelegates = null;
}
for (var i = 0; i < zoneDelegates.length; i++) {
zoneDelegates[i]._updateTaskCount(task.type, count);
}
};
return Zone;
}();
Zone.__symbol__ = __symbol__;
var DELEGATE_ZS = {
name: "",
onHasTask: function(delegate, _, target, hasTaskState) {
return delegate.hasTask(target, hasTaskState);
},
onScheduleTask: function(delegate, _, target, task) {
return delegate.scheduleTask(target, task);
},
onInvokeTask: function(delegate, _, target, task, applyThis, applyArgs) {
return delegate.invokeTask(target, task, applyThis, applyArgs);
},
onCancelTask: function(delegate, _, target, task) {
return delegate.cancelTask(target, task);
}
};
var ZoneDelegate = function() {
function ZoneDelegate(zone, parentDelegate, zoneSpec) {
this._taskCounts = {
microTask: 0,
macroTask: 0,
eventTask: 0
};
this.zone = zone;
this._parentDelegate = parentDelegate;
this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
this._forkCurrZone = zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate.zone);
this._interceptZS = zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
this._interceptDlgt = zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
this._interceptCurrZone = zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate.zone);
this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
this._invokeDlgt = zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
this._invokeCurrZone = zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate.zone);
this._handleErrorZS = zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
this._handleErrorDlgt = zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
this._handleErrorCurrZone = zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate.zone);
this._scheduleTaskZS = zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
this._scheduleTaskDlgt = zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
this._scheduleTaskCurrZone = zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate.zone);
this._invokeTaskZS = zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
this._invokeTaskDlgt = zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
this._invokeTaskCurrZone = zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate.zone);
this._cancelTaskZS = zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
this._cancelTaskDlgt = zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
this._cancelTaskCurrZone = zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate.zone);
this._hasTaskZS = null;
this._hasTaskDlgt = null;
this._hasTaskDlgtOwner = null;
this._hasTaskCurrZone = null;
var zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;
var parentHasTask = parentDelegate && parentDelegate._hasTaskZS;
if (zoneSpecHasTask || parentHasTask) {
this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;
this._hasTaskDlgt = parentDelegate;
this._hasTaskDlgtOwner = this;
this._hasTaskCurrZone = zone;
if (!zoneSpec.onScheduleTask) {
this._scheduleTaskZS = DELEGATE_ZS;
this._scheduleTaskDlgt = parentDelegate;
this._scheduleTaskCurrZone = this.zone;
}
if (!zoneSpec.onInvokeTask) {
this._invokeTaskZS = DELEGATE_ZS;
this._invokeTaskDlgt = parentDelegate;
this._invokeTaskCurrZone = this.zone;
}
if (!zoneSpec.onCancelTask) {
this._cancelTaskZS = DELEGATE_ZS;
this._cancelTaskDlgt = parentDelegate;
this._cancelTaskCurrZone = this.zone;
}
}
}
ZoneDelegate.prototype.fork = function(targetZone, zoneSpec) {
return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) : new Zone(targetZone, zoneSpec);
};
ZoneDelegate.prototype.intercept = function(targetZone, callback, source) {
return this._interceptZS ? this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) : callback;
};
ZoneDelegate.prototype.invoke = function(targetZone, callback, applyThis, applyArgs, source) {
return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) : callback.apply(applyThis, applyArgs);
};
ZoneDelegate.prototype.handleError = function(targetZone, error) {
return this._handleErrorZS ? this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) : true;
};
ZoneDelegate.prototype.scheduleTask = function(targetZone, task) {
var returnTask = task;
if (this._scheduleTaskZS) {
if (this._hasTaskZS) {
returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);
}
returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);
if (!returnTask) returnTask = task;
} else {
if (task.scheduleFn) {
task.scheduleFn(task);
} else if (task.type == microTask) {
scheduleMicroTask(task);
} else {
throw new Error("Task is missing scheduleFn.");
}
}
return returnTask;
};
ZoneDelegate.prototype.invokeTask = function(targetZone, task, applyThis, applyArgs) {
return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) : task.callback.apply(applyThis, applyArgs);
};
ZoneDelegate.prototype.cancelTask = function(targetZone, task) {
var value;
if (this._cancelTaskZS) {
value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);
} else {
if (!task.cancelFn) {
throw Error("Task is not cancelable");
}
value = task.cancelFn(task);
}
return value;
};
ZoneDelegate.prototype.hasTask = function(targetZone, isEmpty) {
try {
return this._hasTaskZS && this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);
} catch (err) {
this.handleError(targetZone, err);
}
};
ZoneDelegate.prototype._updateTaskCount = function(type, count) {
var counts = this._taskCounts;
var prev = counts[type];
var next = counts[type] = prev + count;
if (next < 0) {
throw new Error("More tasks executed then were scheduled.");
}
if (prev == 0 || next == 0) {
var isEmpty = {
microTask: counts.microTask > 0,
macroTask: counts.macroTask > 0,
eventTask: counts.eventTask > 0,
change: type
};
this.hasTask(this.zone, isEmpty);
}
};
return ZoneDelegate;
}();
var ZoneTask = function() {
function ZoneTask(type, source, callback, options, scheduleFn, cancelFn) {
this._zone = null;
this.runCount = 0;
this._zoneDelegates = null;
this._state = "notScheduled";
this.type = type;
this.source = source;
this.data = options;
this.scheduleFn = scheduleFn;
this.cancelFn = cancelFn;
this.callback = callback;
var self = this;
this.invoke = function() {
_numberOfNestedTaskFrames++;
try {
self.runCount++;
return self.zone.runTask(self, this, arguments);
} finally {
if (_numberOfNestedTaskFrames == 1) {
drainMicroTaskQueue();
}
_numberOfNestedTaskFrames--;
}
};
}
Object.defineProperty(ZoneTask.prototype, "zone", {
get: function() {
return this._zone;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ZoneTask.prototype, "state", {
get: function() {
return this._state;
},
enumerable: true,
configurable: true
});
ZoneTask.prototype.cancelScheduleRequest = function() {
this._transitionTo(notScheduled, scheduling);
};
ZoneTask.prototype._transitionTo = function(toState, fromState1, fromState2) {
if (this._state === fromState1 || this._state === fromState2) {
this._state = toState;
if (toState == notScheduled) {
this._zoneDelegates = null;
}
} else {
throw new Error(this.type + " '" + this.source + "': can not transition to '" + toState + "', expecting state '" + fromState1 + "'" + (fromState2 ? " or '" + fromState2 + "'" : "") + ", was '" + this._state + "'.");
}
};
ZoneTask.prototype.toString = function() {
if (this.data && typeof this.data.handleId !== "undefined") {
return this.data.handleId;
} else {
return Object.prototype.toString.call(this);
}
};
ZoneTask.prototype.toJSON = function() {
return {
type: this.type,
state: this.state,
source: this.source,
zone: this.zone.name,
invoke: this.invoke,
scheduleFn: this.scheduleFn,
cancelFn: this.cancelFn,
runCount: this.runCount,
callback: this.callback
};
};
return ZoneTask;
}();
var ZoneFrame = function() {
function ZoneFrame(parent, zone) {
this.parent = parent;
this.zone = zone;
}
return ZoneFrame;
}();
function __symbol__(name) {
return "__zone_symbol__" + name;
}
var symbolSetTimeout = __symbol__("setTimeout");
var symbolPromise = __symbol__("Promise");
var symbolThen = __symbol__("then");
var _currentZoneFrame = new ZoneFrame(null, new Zone(null, null));
var _currentTask = null;
var _microTaskQueue = [];
var _isDrainingMicrotaskQueue = false;
var _uncaughtPromiseErrors = [];
var _numberOfNestedTaskFrames = 0;
function scheduleQueueDrain() {
if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {
if (global[symbolPromise]) {
global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);
} else {
global[symbolSetTimeout](drainMicroTaskQueue, 0);
}
}
}
function scheduleMicroTask(task) {
scheduleQueueDrain();
_microTaskQueue.push(task);
}
function consoleError(e) {
if (Zone[__symbol__("ignoreConsoleErrorUncaughtError")]) {
return;
}
var rejection = e && e.rejection;
if (rejection) {
console.error("Unhandled Promise rejection:", rejection instanceof Error ? rejection.message : rejection, "; Zone:", e.zone.name, "; Task:", e.task && e.task.source, "; Value:", rejection, rejection instanceof Error ? rejection.stack : undefined);
}
console.error(e);
}
function handleUnhandledRejection(e) {
consoleError(e);
try {
var handler = Zone[__symbol__("unhandledPromiseRejectionHandler")];
if (handler && typeof handler === "function") {
handler.apply(this, [ e ]);
}
} catch (err) {}
}
function drainMicroTaskQueue() {
if (!_isDrainingMicrotaskQueue) {
_isDrainingMicrotaskQueue = true;
while (_microTaskQueue.length) {
var queue = _microTaskQueue;
_microTaskQueue = [];
for (var i = 0; i < queue.length; i++) {
var task = queue[i];
try {
task.zone.runTask(task, null, null);
} catch (error) {
consoleError(error);
}
}
}
while (_uncaughtPromiseErrors.length) {
var _loop_1 = function() {
var uncaughtPromiseError = _uncaughtPromiseErrors.shift();
try {
uncaughtPromiseError.zone.runGuarded(function() {
throw uncaughtPromiseError;
});
} catch (error) {
handleUnhandledRejection(error);
}
};
while (_uncaughtPromiseErrors.length) {
_loop_1();
}
}
_isDrainingMicrotaskQueue = false;
}
}
function isThenable(value) {
return value && value.then;
}
function forwardResolution(value) {
return value;
}
function forwardRejection(rejection) {
return ZoneAwarePromise.reject(rejection);
}
var symbolState = __symbol__("state");
var symbolValue = __symbol__("value");
var source = "Promise.then";
var UNRESOLVED = null;
var RESOLVED = true;
var REJECTED = false;
var REJECTED_NO_CATCH = 0;
function makeResolver(promise, state) {
return function(v) {
try {
resolvePromise(promise, state, v);
} catch (err) {
resolvePromise(promise, false, err);
}
};
}
var once = function() {
var wasCalled = false;
return function wrapper(wrappedFunction) {
return function() {
if (wasCalled) {
return;
}
wasCalled = true;
wrappedFunction.apply(null, arguments);
};
};
};
function resolvePromise(promise, state, value) {
var onceWrapper = once();
if (promise === value) {
throw new TypeError("Promise resolved with itself");
}
if (promise[symbolState] === UNRESOLVED) {
var then = null;
try {
if (typeof value === "object" || typeof value === "function") {
then = value && value.then;
}
} catch (err) {
onceWrapper(function() {
resolvePromise(promise, false, err);
})();
return promise;
}
if (state !== REJECTED && value instanceof ZoneAwarePromise && value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) && value[symbolState] !== UNRESOLVED) {
clearRejectedNoCatch(value);
resolvePromise(promise, value[symbolState], value[symbolValue]);
} else if (state !== REJECTED && typeof then === "function") {
try {
then.apply(value, [ onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false)) ]);
} catch (err) {
onceWrapper(function() {
resolvePromise(promise, false, err);
})();
}
} else {
promise[symbolState] = state;
var queue = promise[symbolValue];
promise[symbolValue] = value;
if (state === REJECTED && value instanceof Error) {
value[__symbol__("currentTask")] = Zone.currentTask;
}
for (var i = 0; i < queue.length; ) {
scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
}
if (queue.length == 0 && state == REJECTED) {
promise[symbolState] = REJECTED_NO_CATCH;
try {
throw new Error("Uncaught (in promise): " + value + (value && value.stack ? "\n" + value.stack : ""));
} catch (err) {
var error_1 = err;
error_1.rejection = value;
error_1.promise = promise;
error_1.zone = Zone.current;
error_1.task = Zone.currentTask;
_uncaughtPromiseErrors.push(error_1);
scheduleQueueDrain();
}
}
}
}
return promise;
}
function clearRejectedNoCatch(promise) {
if (promise[symbolState] === REJECTED_NO_CATCH) {
try {
var handler = Zone[__symbol__("rejectionHandledHandler")];
if (handler && typeof handler === "function") {
handler.apply(this, [ {
rejection: promise[symbolValue],
promise: promise
} ]);
}
} catch (err) {}
promise[symbolState] = REJECTED;
for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
if (promise === _uncaughtPromiseErrors[i].promise) {
_uncaughtPromiseErrors.splice(i, 1);
}
}
}
}
function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
clearRejectedNoCatch(promise);
var delegate = promise[symbolState] ? typeof onFulfilled === "function" ? onFulfilled : forwardResolution : typeof onRejected === "function" ? onRejected : forwardRejection;
zone.scheduleMicroTask(source, function() {
try {
resolvePromise(chainPromise, true, zone.run(delegate, undefined, [ promise[symbolValue] ]));
} catch (error) {
resolvePromise(chainPromise, false, error);
}
});
}
var ZoneAwarePromise = function() {
function ZoneAwarePromise(executor) {
var promise = this;
if (!(promise instanceof ZoneAwarePromise)) {
throw new Error("Must be an instanceof Promise.");
}
promise[symbolState] = UNRESOLVED;
promise[symbolValue] = [];
try {
executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
} catch (error) {
resolvePromise(promise, false, error);
}
}
ZoneAwarePromise.toString = function() {
return "function ZoneAwarePromise() { [native code] }";
};
ZoneAwarePromise.resolve = function(value) {
return resolvePromise(new this(null), RESOLVED, value);
};
ZoneAwarePromise.reject = function(error) {
return resolvePromise(new this(null), REJECTED, error);
};
ZoneAwarePromise.race = function(values) {
var resolve;
var reject;
var promise = new this(function(res, rej) {
_a = [ res, rej ], resolve = _a[0], reject = _a[1];
var _a;
});
function onResolve(value) {
promise && (promise = null || resolve(value));
}
function onReject(error) {
promise && (promise = null || reject(error));
}
for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
var value = values_1[_i];
if (!isThenable(value)) {
value = this.resolve(value);
}
value.then(onResolve, onReject);
}
return promise;
};
ZoneAwarePromise.all = function(values) {
var resolve;
var reject;
var promise = new this(function(res, rej) {
resolve = res;
reject = rej;
});
var count = 0;
var resolvedValues = [];
for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
var value = values_2[_i];
if (!isThenable(value)) {
value = this.resolve(value);
}
value.then(function(index) {
return function(value) {
resolvedValues[index] = value;
count--;
if (!count) {
resolve(resolvedValues);
}
};
}(count), reject);
count++;
}
if (!count) resolve(resolvedValues);
return promise;
};
ZoneAwarePromise.prototype.then = function(onFulfilled, onRejected) {
var chainPromise = new this.constructor(null);
var zone = Zone.current;
if (this[symbolState] == UNRESOLVED) {
this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
} else {
scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
}
return chainPromise;
};
ZoneAwarePromise.prototype.catch = function(onRejected) {
return this.then(null, onRejected);
};
return ZoneAwarePromise;
}();
ZoneAwarePromise["resolve"] = ZoneAwarePromise.resolve;
ZoneAwarePromise["reject"] = ZoneAwarePromise.reject;
ZoneAwarePromise["race"] = ZoneAwarePromise.race;
ZoneAwarePromise["all"] = ZoneAwarePromise.all;
var NativePromise = global[symbolPromise] = global["Promise"];
global["Promise"] = ZoneAwarePromise;
var symbolThenPatched = __symbol__("thenPatched");
function patchThen(Ctor) {
var proto = Ctor.prototype;
var originalThen = proto.then;
proto[symbolThen] = originalThen;
Ctor.prototype.then = function(onResolve, onReject) {
var _this = this;
var wrapped = new ZoneAwarePromise(function(resolve, reject) {
originalThen.call(_this, resolve, reject);
});
return wrapped.then(onResolve, onReject);
};
Ctor[symbolThenPatched] = true;
}
function zoneify(fn) {
return function() {
var resultPromise = fn.apply(this, arguments);
if (resultPromise instanceof ZoneAwarePromise) {
return resultPromise;
}
var ctor = resultPromise.constructor;
if (!ctor[symbolThenPatched]) {
patchThen(ctor);
}
return resultPromise;
};
}
if (NativePromise) {
patchThen(NativePromise);
var fetch_1 = global["fetch"];
if (typeof fetch_1 == "function") {
global["fetch"] = zoneify(fetch_1);
}
}
Promise[Zone.__symbol__("uncaughtPromiseErrors")] = _uncaughtPromiseErrors;
var blacklistedStackFramesSymbol = Zone.__symbol__("blacklistedStackFrames");
var NativeError = global[__symbol__("Error")] = global.Error;
var blackListedStackFrames = {};
var zoneAwareFrame1;
var zoneAwareFrame2;
global.Error = ZoneAwareError;
var stackRewrite = "stackRewrite";
function ZoneAwareError() {
var _this = this;
var error = NativeError.apply(this, arguments);
var originalStack = error["originalStack"] = error.stack;
if (ZoneAwareError[stackRewrite] && originalStack) {
var frames_1 = originalStack.split("\n");
var zoneFrame = _currentZoneFrame;
var i = 0;
while (!(frames_1[i] === zoneAwareFrame1 || frames_1[i] === zoneAwareFrame2) && i < frames_1.length) {
i++;
}
for (;i < frames_1.length && zoneFrame; i++) {
var frame = frames_1[i];
if (frame.trim()) {
switch (blackListedStackFrames[frame]) {
case 0:
frames_1.splice(i, 1);
i--;
break;

case 1:
if (zoneFrame.parent) {
zoneFrame = zoneFrame.parent;
} else {
zoneFrame = null;
}
frames_1.splice(i, 1);
i--;
break;

default:
frames_1[i] += " [" + zoneFrame.zone.name + "]";
}
}
}
try {
error.stack = error.zoneAwareStack = frames_1.join("\n");
} catch (e) {}
}
if (this instanceof NativeError && this.constructor != NativeError) {
Object.keys(error).concat("stack", "message").forEach(function(key) {
if (error[key] !== undefined) {
try {
_this[key] = error[key];
} catch (e) {}
}
});
return this;
}
return error;
}
ZoneAwareError.prototype = NativeError.prototype;
ZoneAwareError[blacklistedStackFramesSymbol] = blackListedStackFrames;
ZoneAwareError[stackRewrite] = false;
var specialPropertyNames = [ "stackTraceLimit", "captureStackTrace", "prepareStackTrace" ];
var nativeErrorProperties = Object.keys(NativeError);
if (nativeErrorProperties) {
nativeErrorProperties.forEach(function(prop) {
if (specialPropertyNames.filter(function(sp) {
return sp === prop;
}).length === 0) {
Object.defineProperty(ZoneAwareError, prop, {
get: function() {
return NativeError[prop];
},
set: function(value) {
NativeError[prop] = value;
}
});
}
});
}
if (NativeError.hasOwnProperty("stackTraceLimit")) {
NativeError.stackTraceLimit = Math.max(NativeError.stackTraceLimit, 15);
Object.defineProperty(ZoneAwareError, "stackTraceLimit", {
get: function() {
return NativeError.stackTraceLimit;
},
set: function(value) {
return NativeError.stackTraceLimit = value;
}
});
}
if (NativeError.hasOwnProperty("captureStackTrace")) {
Object.defineProperty(ZoneAwareError, "captureStackTrace", {
value: function zoneCaptureStackTrace(targetObject, constructorOpt) {
NativeError.captureStackTrace(targetObject, constructorOpt);
}
});
}
Object.defineProperty(ZoneAwareError, "prepareStackTrace", {
get: function() {
return NativeError.prepareStackTrace;
},
set: function(value) {
if (!value || typeof value !== "function") {
return NativeError.prepareStackTrace = value;
}
return NativeError.prepareStackTrace = function(error, structuredStackTrace) {
if (structuredStackTrace) {
for (var i = 0; i < structuredStackTrace.length; i++) {
var st = structuredStackTrace[i];
if (st.getFunctionName() === "zoneCaptureStackTrace") {
structuredStackTrace.splice(i, 1);
break;
}
}
}
return value.apply(this, [ error, structuredStackTrace ]);
};
}
});
var detectZone = Zone.current.fork({
name: "detect",
onHandleError: function(parentZD, current, target, error) {
if (error.originalStack && Error === ZoneAwareError) {
var frames_2 = error.originalStack.split(/\n/);
var runFrame = false, runGuardedFrame = false, runTaskFrame = false;
while (frames_2.length) {
var frame = frames_2.shift();
if (/:\d+:\d+/.test(frame)) {
var fnName = frame.split("(")[0].split("@")[0];
var frameType = 1;
if (fnName.indexOf("ZoneAwareError") !== -1) {
zoneAwareFrame1 = frame;
zoneAwareFrame2 = frame.replace("Error.", "");
blackListedStackFrames[zoneAwareFrame2] = 0;
}
if (fnName.indexOf("runGuarded") !== -1) {
runGuardedFrame = true;
} else if (fnName.indexOf("runTask") !== -1) {
runTaskFrame = true;
} else if (fnName.indexOf("run") !== -1) {
runFrame = true;
} else {
frameType = 0;
}
blackListedStackFrames[frame] = frameType;
if (runFrame && runGuardedFrame && runTaskFrame) {
ZoneAwareError[stackRewrite] = true;
break;
}
}
}
}
return false;
}
});
var childDetectZone = detectZone.fork({
name: "child",
onScheduleTask: function(delegate, curr, target, task) {
return delegate.scheduleTask(target, task);
},
onInvokeTask: function(delegate, curr, target, task, applyThis, applyArgs) {
return delegate.invokeTask(target, task, applyThis, applyArgs);
},
onCancelTask: function(delegate, curr, target, task) {
return delegate.cancelTask(target, task);
},
onInvoke: function(delegate, curr, target, callback, applyThis, applyArgs, source) {
return delegate.invoke(target, callback, applyThis, applyArgs, source);
}
});
var originalStackTraceLimit = Error.stackTraceLimit;
Error.stackTraceLimit = 100;
childDetectZone.run(function() {
childDetectZone.runGuarded(function() {
var fakeTransitionTo = function(toState, fromState1, fromState2) {};
childDetectZone.scheduleEventTask(blacklistedStackFramesSymbol, function() {
childDetectZone.scheduleMacroTask(blacklistedStackFramesSymbol, function() {
childDetectZone.scheduleMicroTask(blacklistedStackFramesSymbol, function() {
throw new ZoneAwareError(ZoneAwareError, NativeError);
}, null, function(t) {
t._transitionTo = fakeTransitionTo;
t.invoke();
});
}, null, function(t) {
t._transitionTo = fakeTransitionTo;
t.invoke();
}, function() {});
}, null, function(t) {
t._transitionTo = fakeTransitionTo;
t.invoke();
}, function() {});
});
});
Error.stackTraceLimit = originalStackTraceLimit;
return global["Zone"] = Zone;
}(typeof window !== "undefined" && window || typeof self !== "undefined" && self || global);
var zoneSymbol = function(n) {
return "__zone_symbol__" + n;
};
var _global$1 = typeof window === "object" && window || typeof self === "object" && self || global;
function bindArguments(args, source) {
for (var i = args.length - 1; i >= 0; i--) {
if (typeof args[i] === "function") {
args[i] = Zone.current.wrap(args[i], source + "_" + i);
}
}
return args;
}
function patchPrototype(prototype, fnNames) {
var source = prototype.constructor["name"];
var _loop_1 = function(i) {
var name_1 = fnNames[i];
var delegate = prototype[name_1];
if (delegate) {
prototype[name_1] = function(delegate) {
var patched = function() {
return delegate.apply(this, bindArguments(arguments, source + "." + name_1));
};
attachOriginToPatched(patched, delegate);
return patched;
}(delegate);
}
};
for (var i = 0; i < fnNames.length; i++) {
_loop_1(i);
}
}
var isWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
var isNode = !("nw" in _global$1) && typeof process !== "undefined" && {}.toString.call(process) === "[object process]";
var isBrowser = !isNode && !isWebWorker && !!(typeof window !== "undefined" && window["HTMLElement"]);
var isMix = typeof process !== "undefined" && {}.toString.call(process) === "[object process]" && !isWebWorker && !!(typeof window !== "undefined" && window["HTMLElement"]);
function patchProperty(obj, prop) {
var desc = Object.getOwnPropertyDescriptor(obj, prop) || {
enumerable: true,
configurable: true
};
if (!desc.configurable) {
return;
}
delete desc.writable;
delete desc.value;
var originalDescGet = desc.get;
var eventName = prop.substr(2);
var _prop = zoneSymbol("_" + prop);
desc.set = function(newValue) {
var target = this;
if (!target && obj === _global$1) {
target = _global$1;
}
if (!target) {
return;
}
var previousValue = target[_prop];
if (previousValue) {
target.removeEventListener(eventName, previousValue);
}
if (typeof newValue === "function") {
var wrapFn = function(event) {
var result = newValue.apply(this, arguments);
if (result != undefined && !result) {
event.preventDefault();
}
return result;
};
target[_prop] = wrapFn;
target.addEventListener(eventName, wrapFn, false);
} else {
target[_prop] = null;
}
};
desc.get = function() {
var target = this;
if (!target && obj === _global$1) {
target = _global$1;
}
if (!target) {
return null;
}
if (target.hasOwnProperty(_prop)) {
return target[_prop];
} else if (originalDescGet) {
var value = originalDescGet.apply(this);
if (value) {
desc.set.apply(this, [ value ]);
if (typeof target["removeAttribute"] === "function") {
target.removeAttribute(prop);
}
return value;
}
}
return null;
};
Object.defineProperty(obj, prop, desc);
}
function patchOnProperties(obj, properties) {
if (properties) {
for (var i = 0; i < properties.length; i++) {
patchProperty(obj, "on" + properties[i]);
}
} else {
var onProperties = [];
for (var prop in obj) {
if (prop.substr(0, 2) == "on") {
onProperties.push(prop);
}
}
for (var j = 0; j < onProperties.length; j++) {
patchProperty(obj, onProperties[j]);
}
}
}
var EVENT_TASKS = zoneSymbol("eventTasks");
var ADD_EVENT_LISTENER = "addEventListener";
var REMOVE_EVENT_LISTENER = "removeEventListener";
function compareEventListenerOptions(left, right) {
var leftCapture = typeof left === "boolean" ? left : typeof left === "object" ? left && left.capture : false;
var rightCapture = typeof right === "boolean" ? right : typeof right === "object" ? right && right.capture : false;
return !!leftCapture === !!rightCapture;
}
function findExistingRegisteredTask(target, handler, name, options, remove) {
var eventTasks = target[EVENT_TASKS];
if (eventTasks) {
for (var i = 0; i < eventTasks.length; i++) {
var eventTask = eventTasks[i];
var data = eventTask.data;
var listener = data.handler;
if ((data.handler === handler || listener.listener === handler) && compareEventListenerOptions(data.options, options) && data.eventName === name) {
if (remove) {
eventTasks.splice(i, 1);
}
return eventTask;
}
}
}
return null;
}
function attachRegisteredEvent(target, eventTask, isPrepend) {
var eventTasks = target[EVENT_TASKS];
if (!eventTasks) {
eventTasks = target[EVENT_TASKS] = [];
}
if (isPrepend) {
eventTasks.unshift(eventTask);
} else {
eventTasks.push(eventTask);
}
}
var defaultListenerMetaCreator = function(self, args) {
return {
options: args[2],
eventName: args[0],
handler: args[1],
target: self || _global$1,
name: args[0],
crossContext: false,
invokeAddFunc: function(addFnSymbol, delegate) {
if (!this.crossContext) {
if (delegate && delegate.invoke) {
return this.target[addFnSymbol](this.eventName, delegate.invoke, this.options);
} else {
return this.target[addFnSymbol](this.eventName, delegate, this.options);
}
} else {
try {
return this.target[addFnSymbol](this.eventName, delegate, this.options);
} catch (err) {}
}
},
invokeRemoveFunc: function(removeFnSymbol, delegate) {
if (!this.crossContext) {
if (delegate && delegate.invoke) {
return this.target[removeFnSymbol](this.eventName, delegate.invoke, this.options);
} else {
return this.target[removeFnSymbol](this.eventName, delegate, this.options);
}
} else {
try {
return this.target[removeFnSymbol](this.eventName, delegate, this.options);
} catch (err) {}
}
}
};
};
function makeZoneAwareAddListener(addFnName, removeFnName, useCapturingParam, allowDuplicates, isPrepend, metaCreator) {
if (useCapturingParam === void 0) {
useCapturingParam = true;
}
if (allowDuplicates === void 0) {
allowDuplicates = false;
}
if (isPrepend === void 0) {
isPrepend = false;
}
if (metaCreator === void 0) {
metaCreator = defaultListenerMetaCreator;
}
var addFnSymbol = zoneSymbol(addFnName);
var removeFnSymbol = zoneSymbol(removeFnName);
var defaultUseCapturing = useCapturingParam ? false : undefined;
function scheduleEventListener(eventTask) {
var meta = eventTask.data;
attachRegisteredEvent(meta.target, eventTask, isPrepend);
return meta.invokeAddFunc(addFnSymbol, eventTask);
}
function cancelEventListener(eventTask) {
var meta = eventTask.data;
findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.options, true);
return meta.invokeRemoveFunc(removeFnSymbol, eventTask);
}
return function zoneAwareAddListener(self, args) {
var data = metaCreator(self, args);
data.options = data.options || defaultUseCapturing;
var delegate = null;
if (typeof data.handler == "function") {
delegate = data.handler;
} else if (data.handler && data.handler.handleEvent) {
delegate = function(event) {
return data.handler.handleEvent(event);
};
}
var validZoneHandler = false;
try {
validZoneHandler = data.handler && data.handler.toString() === "[object FunctionWrapper]";
} catch (error) {
data.crossContext = true;
return data.invokeAddFunc(addFnSymbol, data.handler);
}
if (!delegate || validZoneHandler) {
return data.invokeAddFunc(addFnSymbol, data.handler);
}
if (!allowDuplicates) {
var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.options, false);
if (eventTask) {
return data.invokeAddFunc(addFnSymbol, eventTask);
}
}
var zone = Zone.current;
var source = data.target.constructor["name"] + "." + addFnName + ":" + data.eventName;
zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);
};
}
function makeZoneAwareRemoveListener(fnName, useCapturingParam, metaCreator) {
if (useCapturingParam === void 0) {
useCapturingParam = true;
}
if (metaCreator === void 0) {
metaCreator = defaultListenerMetaCreator;
}
var symbol = zoneSymbol(fnName);
var defaultUseCapturing = useCapturingParam ? false : undefined;
return function zoneAwareRemoveListener(self, args) {
var data = metaCreator(self, args);
data.options = data.options || defaultUseCapturing;
var delegate = null;
if (typeof data.handler == "function") {
delegate = data.handler;
} else if (data.handler && data.handler.handleEvent) {
delegate = function(event) {
return data.handler.handleEvent(event);
};
}
var validZoneHandler = false;
try {
validZoneHandler = data.handler && data.handler.toString() === "[object FunctionWrapper]";
} catch (error) {
data.crossContext = true;
return data.invokeRemoveFunc(symbol, data.handler);
}
if (!delegate || validZoneHandler) {
return data.invokeRemoveFunc(symbol, data.handler);
}
var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.options, true);
if (eventTask) {
eventTask.zone.cancelTask(eventTask);
} else {
data.invokeRemoveFunc(symbol, data.handler);
}
};
}
function patchEventTargetMethods(obj, addFnName, removeFnName, metaCreator) {
if (addFnName === void 0) {
addFnName = ADD_EVENT_LISTENER;
}
if (removeFnName === void 0) {
removeFnName = REMOVE_EVENT_LISTENER;
}
if (metaCreator === void 0) {
metaCreator = defaultListenerMetaCreator;
}
if (obj && obj[addFnName]) {
patchMethod(obj, addFnName, function() {
return makeZoneAwareAddListener(addFnName, removeFnName, true, false, false, metaCreator);
});
patchMethod(obj, removeFnName, function() {
return makeZoneAwareRemoveListener(removeFnName, true, metaCreator);
});
return true;
} else {
return false;
}
}
var originalInstanceKey = zoneSymbol("originalInstance");
function patchClass(className) {
var OriginalClass = _global$1[className];
if (!OriginalClass) return;
_global$1[zoneSymbol(className)] = OriginalClass;
_global$1[className] = function() {
var a = bindArguments(arguments, className);
switch (a.length) {
case 0:
this[originalInstanceKey] = new OriginalClass();
break;

case 1:
this[originalInstanceKey] = new OriginalClass(a[0]);
break;

case 2:
this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
break;

case 3:
this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
break;

case 4:
this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
break;

default:
throw new Error("Arg list too long.");
}
};
attachOriginToPatched(_global$1[className], OriginalClass);
var instance = new OriginalClass(function() {});
var prop;
for (prop in instance) {
if (className === "XMLHttpRequest" && prop === "responseBlob") continue;
(function(prop) {
if (typeof instance[prop] === "function") {
_global$1[className].prototype[prop] = function() {
return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
};
} else {
Object.defineProperty(_global$1[className].prototype, prop, {
set: function(fn) {
if (typeof fn === "function") {
this[originalInstanceKey][prop] = Zone.current.wrap(fn, className + "." + prop);
attachOriginToPatched(this[originalInstanceKey][prop], fn);
} else {
this[originalInstanceKey][prop] = fn;
}
},
get: function() {
return this[originalInstanceKey][prop];
}
});
}
})(prop);
}
for (prop in OriginalClass) {
if (prop !== "prototype" && OriginalClass.hasOwnProperty(prop)) {
_global$1[className][prop] = OriginalClass[prop];
}
}
}
function createNamedFn(name, delegate) {
try {
return Function("f", "return function " + name + "(){return f(this, arguments)}")(delegate);
} catch (error) {
return function() {
return delegate(this, arguments);
};
}
}
function patchMethod(target, name, patchFn) {
var proto = target;
while (proto && Object.getOwnPropertyNames(proto).indexOf(name) === -1) {
proto = Object.getPrototypeOf(proto);
}
if (!proto && target[name]) {
proto = target;
}
var delegateName = zoneSymbol(name);
var delegate;
if (proto && !(delegate = proto[delegateName])) {
delegate = proto[delegateName] = proto[name];
proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));
attachOriginToPatched(proto[name], delegate);
}
return delegate;
}
function findEventTask(target, evtName) {
var eventTasks = target[zoneSymbol("eventTasks")];
var result = [];
if (eventTasks) {
for (var i = 0; i < eventTasks.length; i++) {
var eventTask = eventTasks[i];
var data = eventTask.data;
var eventName = data && data.eventName;
if (eventName === evtName) {
result.push(eventTask);
}
}
}
return result;
}
function attachOriginToPatched(patched, original) {
patched[zoneSymbol("OriginalDelegate")] = original;
}
Zone[zoneSymbol("patchEventTargetMethods")] = patchEventTargetMethods;
Zone[zoneSymbol("patchOnProperties")] = patchOnProperties;
function patchTimer(window, setName, cancelName, nameSuffix) {
var setNative = null;
var clearNative = null;
setName += nameSuffix;
cancelName += nameSuffix;
var tasksByHandleId = {};
function scheduleTask(task) {
var data = task.data;
function timer() {
try {
task.invoke.apply(this, arguments);
} finally {
delete tasksByHandleId[data.handleId];
}
}
data.args[0] = timer;
data.handleId = setNative.apply(window, data.args);
tasksByHandleId[data.handleId] = task;
return task;
}
function clearTask(task) {
delete tasksByHandleId[task.data.handleId];
return clearNative(task.data.handleId);
}
setNative = patchMethod(window, setName, function(delegate) {
return function(self, args) {
if (typeof args[0] === "function") {
var zone = Zone.current;
var options = {
handleId: null,
isPeriodic: nameSuffix === "Interval",
delay: nameSuffix === "Timeout" || nameSuffix === "Interval" ? args[1] || 0 : null,
args: args
};
var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);
if (!task) {
return task;
}
var handle = task.data.handleId;
if (handle && handle.ref && handle.unref && typeof handle.ref === "function" && typeof handle.unref === "function") {
task.ref = handle.ref.bind(handle);
task.unref = handle.unref.bind(handle);
}
return task;
} else {
return delegate.apply(window, args);
}
};
});
clearNative = patchMethod(window, cancelName, function(delegate) {
return function(self, args) {
var task = typeof args[0] === "number" ? tasksByHandleId[args[0]] : args[0];
if (task && typeof task.type === "string") {
if (task.state !== "notScheduled" && (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {
task.zone.cancelTask(task);
}
} else {
delegate.apply(window, args);
}
};
});
}
function patchFuncToString() {
var originalFunctionToString = Function.prototype.toString;
var g = typeof window !== "undefined" && window || typeof self !== "undefined" && self || global;
Function.prototype.toString = function() {
if (typeof this === "function") {
if (this[zoneSymbol("OriginalDelegate")]) {
return originalFunctionToString.apply(this[zoneSymbol("OriginalDelegate")], arguments);
}
if (this === Promise) {
var nativePromise = g[zoneSymbol("Promise")];
if (nativePromise) {
return originalFunctionToString.apply(nativePromise, arguments);
}
}
if (this === Error) {
var nativeError = g[zoneSymbol("Error")];
if (nativeError) {
return originalFunctionToString.apply(nativeError, arguments);
}
}
}
return originalFunctionToString.apply(this, arguments);
};
}
function patchObjectToString() {
var originalObjectToString = Object.prototype.toString;
Object.prototype.toString = function() {
if (this instanceof Promise) {
return "[object Promise]";
}
return originalObjectToString.apply(this, arguments);
};
}
var _defineProperty = Object[zoneSymbol("defineProperty")] = Object.defineProperty;
var _getOwnPropertyDescriptor = Object[zoneSymbol("getOwnPropertyDescriptor")] = Object.getOwnPropertyDescriptor;
var _create = Object.create;
var unconfigurablesKey = zoneSymbol("unconfigurables");
function propertyPatch() {
Object.defineProperty = function(obj, prop, desc) {
if (isUnconfigurable(obj, prop)) {
throw new TypeError("Cannot assign to read only property '" + prop + "' of " + obj);
}
var originalConfigurableFlag = desc.configurable;
if (prop !== "prototype") {
desc = rewriteDescriptor(obj, prop, desc);
}
return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
};
Object.defineProperties = function(obj, props) {
Object.keys(props).forEach(function(prop) {
Object.defineProperty(obj, prop, props[prop]);
});
return obj;
};
Object.create = function(obj, proto) {
if (typeof proto === "object" && !Object.isFrozen(proto)) {
Object.keys(proto).forEach(function(prop) {
proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
});
}
return _create(obj, proto);
};
Object.getOwnPropertyDescriptor = function(obj, prop) {
var desc = _getOwnPropertyDescriptor(obj, prop);
if (isUnconfigurable(obj, prop)) {
desc.configurable = false;
}
return desc;
};
}
function _redefineProperty(obj, prop, desc) {
var originalConfigurableFlag = desc.configurable;
desc = rewriteDescriptor(obj, prop, desc);
return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
}
function isUnconfigurable(obj, prop) {
return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
}
function rewriteDescriptor(obj, prop, desc) {
desc.configurable = true;
if (!desc.configurable) {
if (!obj[unconfigurablesKey]) {
_defineProperty(obj, unconfigurablesKey, {
writable: true,
value: {}
});
}
obj[unconfigurablesKey][prop] = true;
}
return desc;
}
function _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {
try {
return _defineProperty(obj, prop, desc);
} catch (error) {
if (desc.configurable) {
if (typeof originalConfigurableFlag == "undefined") {
delete desc.configurable;
} else {
desc.configurable = originalConfigurableFlag;
}
try {
return _defineProperty(obj, prop, desc);
} catch (error) {
var descJson = null;
try {
descJson = JSON.stringify(desc);
} catch (error) {
descJson = descJson.toString();
}
console.log("Attempting to configure '" + prop + "' with descriptor '" + descJson + "' on object '" + obj + "' and got error, giving up: " + error);
}
} else {
throw error;
}
}
}
var WTF_ISSUE_555 = "Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video";
var NO_EVENT_TARGET = "ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex,WebSocket".split(",");
var EVENT_TARGET = "EventTarget";
function eventTargetPatch(_global) {
var apis = [];
var isWtf = _global["wtf"];
if (isWtf) {
apis = WTF_ISSUE_555.split(",").map(function(v) {
return "HTML" + v + "Element";
}).concat(NO_EVENT_TARGET);
} else if (_global[EVENT_TARGET]) {
apis.push(EVENT_TARGET);
} else {
apis = NO_EVENT_TARGET;
}
for (var i = 0; i < apis.length; i++) {
var type = _global[apis[i]];
patchEventTargetMethods(type && type.prototype);
}
}
function apply(_global) {
var WS = _global.WebSocket;
if (!_global.EventTarget) {
patchEventTargetMethods(WS.prototype);
}
_global.WebSocket = function(a, b) {
var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);
var proxySocket;
var onmessageDesc = Object.getOwnPropertyDescriptor(socket, "onmessage");
if (onmessageDesc && onmessageDesc.configurable === false) {
proxySocket = Object.create(socket);
[ "addEventListener", "removeEventListener", "send", "close" ].forEach(function(propName) {
proxySocket[propName] = function() {
return socket[propName].apply(socket, arguments);
};
});
} else {
proxySocket = socket;
}
patchOnProperties(proxySocket, [ "close", "error", "message", "open" ]);
return proxySocket;
};
for (var prop in WS) {
_global.WebSocket[prop] = WS[prop];
}
}
var eventNames = "copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror".split(" ");
function propertyDescriptorPatch(_global) {
if (isNode && !isMix) {
return;
}
var supportsWebSocket = typeof WebSocket !== "undefined";
if (canPatchViaPropertyDescriptor()) {
if (isBrowser) {
patchOnProperties(window, eventNames.concat([ "resize" ]));
patchOnProperties(Document.prototype, eventNames);
if (typeof window["SVGElement"] !== "undefined") {
patchOnProperties(window["SVGElement"].prototype, eventNames);
}
patchOnProperties(HTMLElement.prototype, eventNames);
}
patchOnProperties(XMLHttpRequest.prototype, null);
if (typeof IDBIndex !== "undefined") {
patchOnProperties(IDBIndex.prototype, null);
patchOnProperties(IDBRequest.prototype, null);
patchOnProperties(IDBOpenDBRequest.prototype, null);
patchOnProperties(IDBDatabase.prototype, null);
patchOnProperties(IDBTransaction.prototype, null);
patchOnProperties(IDBCursor.prototype, null);
}
if (supportsWebSocket) {
patchOnProperties(WebSocket.prototype, null);
}
} else {
patchViaCapturingAllTheEvents();
patchClass("XMLHttpRequest");
if (supportsWebSocket) {
apply(_global);
}
}
}
function canPatchViaPropertyDescriptor() {
if ((isBrowser || isMix) && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, "onclick") && typeof Element !== "undefined") {
var desc = Object.getOwnPropertyDescriptor(Element.prototype, "onclick");
if (desc && !desc.configurable) return false;
}
var xhrDesc = Object.getOwnPropertyDescriptor(XMLHttpRequest.prototype, "onreadystatechange");
if (xhrDesc) {
Object.defineProperty(XMLHttpRequest.prototype, "onreadystatechange", {
enumerable: true,
configurable: true,
get: function() {
return true;
}
});
var req = new XMLHttpRequest();
var result = !!req.onreadystatechange;
Object.defineProperty(XMLHttpRequest.prototype, "onreadystatechange", xhrDesc || {});
return result;
} else {
Object.defineProperty(XMLHttpRequest.prototype, "onreadystatechange", {
enumerable: true,
configurable: true,
get: function() {
return this[zoneSymbol("fakeonreadystatechange")];
},
set: function(value) {
this[zoneSymbol("fakeonreadystatechange")] = value;
}
});
var req = new XMLHttpRequest();
var detectFunc = function() {};
req.onreadystatechange = detectFunc;
var result = req[zoneSymbol("fakeonreadystatechange")] === detectFunc;
req.onreadystatechange = null;
return result;
}
}
var unboundKey = zoneSymbol("unbound");
function patchViaCapturingAllTheEvents() {
var _loop_1 = function(i) {
var property = eventNames[i];
var onproperty = "on" + property;
self.addEventListener(property, function(event) {
var elt = event.target, bound, source;
if (elt) {
source = elt.constructor["name"] + "." + onproperty;
} else {
source = "unknown." + onproperty;
}
while (elt) {
if (elt[onproperty] && !elt[onproperty][unboundKey]) {
bound = Zone.current.wrap(elt[onproperty], source);
bound[unboundKey] = elt[onproperty];
elt[onproperty] = bound;
}
elt = elt.parentElement;
}
}, true);
};
for (var i = 0; i < eventNames.length; i++) {
_loop_1(i);
}
}
function registerElementPatch(_global) {
if (!isBrowser && !isMix || !("registerElement" in _global.document)) {
return;
}
var _registerElement = document.registerElement;
var callbacks = [ "createdCallback", "attachedCallback", "detachedCallback", "attributeChangedCallback" ];
document.registerElement = function(name, opts) {
if (opts && opts.prototype) {
callbacks.forEach(function(callback) {
var source = "Document.registerElement::" + callback;
if (opts.prototype.hasOwnProperty(callback)) {
var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);
if (descriptor && descriptor.value) {
descriptor.value = Zone.current.wrap(descriptor.value, source);
_redefineProperty(opts.prototype, callback, descriptor);
} else {
opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
}
} else if (opts.prototype[callback]) {
opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
}
});
}
return _registerElement.apply(document, [ name, opts ]);
};
attachOriginToPatched(document.registerElement, _registerElement);
}
var set = "set";
var clear = "clear";
var blockingMethods = [ "alert", "prompt", "confirm" ];
var _global = typeof window !== "undefined" && window || typeof self !== "undefined" && self || global;
patchTimer(_global, set, clear, "Timeout");
patchTimer(_global, set, clear, "Interval");
patchTimer(_global, set, clear, "Immediate");
patchTimer(_global, "request", "cancel", "AnimationFrame");
patchTimer(_global, "mozRequest", "mozCancel", "AnimationFrame");
patchTimer(_global, "webkitRequest", "webkitCancel", "AnimationFrame");
for (var i = 0; i < blockingMethods.length; i++) {
var name_1 = blockingMethods[i];
patchMethod(_global, name_1, function(delegate, symbol, name) {
return function(s, args) {
return Zone.current.run(delegate, _global, args, name);
};
});
}
eventTargetPatch(_global);
var XMLHttpRequestEventTarget = _global["XMLHttpRequestEventTarget"];
if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {
patchEventTargetMethods(XMLHttpRequestEventTarget.prototype);
}
propertyDescriptorPatch(_global);
patchClass("MutationObserver");
patchClass("WebKitMutationObserver");
patchClass("FileReader");
propertyPatch();
registerElementPatch(_global);
patchXHR(_global);
var XHR_TASK = zoneSymbol("xhrTask");
var XHR_SYNC = zoneSymbol("xhrSync");
var XHR_LISTENER = zoneSymbol("xhrListener");
var XHR_SCHEDULED = zoneSymbol("xhrScheduled");
function patchXHR(window) {
function findPendingTask(target) {
var pendingTask = target[XHR_TASK];
return pendingTask;
}
function scheduleTask(task) {
XMLHttpRequest[XHR_SCHEDULED] = false;
var data = task.data;
var listener = data.target[XHR_LISTENER];
if (listener) {
data.target.removeEventListener("readystatechange", listener);
}
var newListener = data.target[XHR_LISTENER] = function() {
if (data.target.readyState === data.target.DONE) {
if (!data.aborted && XMLHttpRequest[XHR_SCHEDULED] && task.state === "scheduled") {
task.invoke();
}
}
};
data.target.addEventListener("readystatechange", newListener);
var storedTask = data.target[XHR_TASK];
if (!storedTask) {
data.target[XHR_TASK] = task;
}
sendNative.apply(data.target, data.args);
XMLHttpRequest[XHR_SCHEDULED] = true;
return task;
}
function placeholderCallback() {}
function clearTask(task) {
var data = task.data;
data.aborted = true;
return abortNative.apply(data.target, data.args);
}
var openNative = patchMethod(window.XMLHttpRequest.prototype, "open", function() {
return function(self, args) {
self[XHR_SYNC] = args[2] == false;
return openNative.apply(self, args);
};
});
var sendNative = patchMethod(window.XMLHttpRequest.prototype, "send", function() {
return function(self, args) {
var zone = Zone.current;
if (self[XHR_SYNC]) {
return sendNative.apply(self, args);
} else {
var options = {
target: self,
isPeriodic: false,
delay: null,
args: args,
aborted: false
};
return zone.scheduleMacroTask("XMLHttpRequest.send", placeholderCallback, options, scheduleTask, clearTask);
}
};
});
var abortNative = patchMethod(window.XMLHttpRequest.prototype, "abort", function(delegate) {
return function(self, args) {
var task = findPendingTask(self);
if (task && typeof task.type == "string") {
if (task.cancelFn == null || task.data && task.data.aborted) {
return;
}
task.zone.cancelTask(task);
}
};
});
}
if (_global["navigator"] && _global["navigator"].geolocation) {
patchPrototype(_global["navigator"].geolocation, [ "getCurrentPosition", "watchPosition" ]);
}
patchFuncToString();
patchObjectToString();
function findPromiseRejectionHandler(evtName) {
return function(e) {
var eventTasks = findEventTask(_global, evtName);
eventTasks.forEach(function(eventTask) {
var PromiseRejectionEvent = _global["PromiseRejectionEvent"];
if (PromiseRejectionEvent) {
var evt = new PromiseRejectionEvent(evtName, {
promise: e.promise,
reason: e.rejection
});
eventTask.invoke(evt);
}
});
};
}
if (_global["PromiseRejectionEvent"]) {
Zone[zoneSymbol("unhandledPromiseRejectionHandler")] = findPromiseRejectionHandler("unhandledrejection");
Zone[zoneSymbol("rejectionHandledHandler")] = findPromiseRejectionHandler("rejectionhandled");
}
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory() : typeof define === "function" && define.amd ? define(factory) : factory();
})(this, function() {
"use strict";
(function() {
var __symbol__ = Zone.__symbol__;
Zone[__symbol__("bluebird")] = function patchBluebird(Bluebird) {
Bluebird.setScheduler(function(fn) {
Zone.current.scheduleMicroTask("bluebird", fn);
});
};
})();
});
}, function(module, exports, __webpack_require__) {
!function(e, n) {
true ? n() : "function" == typeof define && define.amd ? define(n) : n();
}(this, function() {
"use strict";
!function() {
var e = Zone.__symbol__;
Zone[e("bluebird")] = function(e) {
e.setScheduler(function(e) {
Zone.current.scheduleMicroTask("bluebird", e);
});
};
}();
});
}, function(module, exports, __webpack_require__) {
(function(global, factory) {
true ? factory() : typeof define === "function" && define.amd ? define(factory) : factory();
})(this, function() {
"use strict";
var Zone$1 = function(global) {
if (global["Zone"]) {
throw new Error("Zone already loaded.");
}
var NO_ZONE = {
name: "NO ZONE"
};
var notScheduled = "notScheduled", scheduling = "scheduling", scheduled = "scheduled", running = "running", canceling = "canceling", unknown = "unknown";
var microTask = "microTask", macroTask = "macroTask", eventTask = "eventTask";
var Zone = function() {
function Zone(parent, zoneSpec) {
this._properties = null;
this._parent = parent;
this._name = zoneSpec ? zoneSpec.name || "unnamed" : "<root>";
this._properties = zoneSpec && zoneSpec.properties || {};
this._zoneDelegate = new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
}
Zone.assertZonePatched = function() {
if (global.Promise !== ZoneAwarePromise) {
throw new Error("Zone.js has detected that ZoneAwarePromise `(window|global).Promise` " + "has been overwritten.\n" + "Most likely cause is that a Promise polyfill has been loaded " + "after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. " + "If you must load one, do so before loading zone.js.)");
}
};
Object.defineProperty(Zone, "root", {
get: function() {
var zone = Zone.current;
while (zone.parent) {
zone = zone.parent;
}
return zone;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone, "current", {
get: function() {
return _currentZoneFrame.zone;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone, "currentTask", {
get: function() {
return _currentTask;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone.prototype, "name", {
get: function() {
return this._name;
},
enumerable: true,
configurable: true
});
Zone.prototype.get = function(key) {
var zone = this.getZoneWith(key);
if (zone) return zone._properties[key];
};
Zone.prototype.getZoneWith = function(key) {
var current = this;
while (current) {
if (current._properties.hasOwnProperty(key)) {
return current;
}
current = current._parent;
}
return null;
};
Zone.prototype.fork = function(zoneSpec) {
if (!zoneSpec) throw new Error("ZoneSpec required!");
return this._zoneDelegate.fork(this, zoneSpec);
};
Zone.prototype.wrap = function(callback, source) {
if (typeof callback !== "function") {
throw new Error("Expecting function got: " + callback);
}
var _callback = this._zoneDelegate.intercept(this, callback, source);
var zone = this;
return function() {
return zone.runGuarded(_callback, this, arguments, source);
};
};
Zone.prototype.run = function(callback, applyThis, applyArgs, source) {
if (applyThis === void 0) {
applyThis = undefined;
}
if (applyArgs === void 0) {
applyArgs = null;
}
if (source === void 0) {
source = null;
}
_currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
try {
return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
} finally {
_currentZoneFrame = _currentZoneFrame.parent;
}
};
Zone.prototype.runGuarded = function(callback, applyThis, applyArgs, source) {
if (applyThis === void 0) {
applyThis = null;
}
if (applyArgs === void 0) {
applyArgs = null;
}
if (source === void 0) {
source = null;
}
_currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
try {
try {
return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
} catch (error) {
if (this._zoneDelegate.handleError(this, error)) {
throw error;
}
}
} finally {
_currentZoneFrame = _currentZoneFrame.parent;
}
};
Zone.prototype.runTask = function(task, applyThis, applyArgs) {
if (task.zone != this) throw new Error("A task can only be run in the zone of creation! (Creation: " + (task.zone || NO_ZONE).name + "; Execution: " + this.name + ")");
var reEntryGuard = task.state != running;
reEntryGuard && task._transitionTo(running, scheduled);
task.runCount++;
var previousTask = _currentTask;
_currentTask = task;
_currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
try {
if (task.type == macroTask && task.data && !task.data.isPeriodic) {
task.cancelFn = null;
}
try {
return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
} catch (error) {
if (this._zoneDelegate.handleError(this, error)) {
throw error;
}
}
} finally {
if (task.state !== notScheduled && task.state !== unknown) {
if (task.type == eventTask || task.data && task.data.isPeriodic) {
reEntryGuard && task._transitionTo(scheduled, running);
} else {
task.runCount = 0;
this._updateTaskCount(task, -1);
reEntryGuard && task._transitionTo(notScheduled, running, notScheduled);
}
}
_currentZoneFrame = _currentZoneFrame.parent;
_currentTask = previousTask;
}
};
Zone.prototype.scheduleTask = function(task) {
if (task.zone && task.zone !== this) {
var newZone = this;
while (newZone) {
if (newZone === task.zone) {
throw Error("can not reschedule task to " + this.name + " which is descendants of the original zone " + task.zone.name);
}
newZone = newZone.parent;
}
}
task._transitionTo(scheduling, notScheduled);
var zoneDelegates = [];
task._zoneDelegates = zoneDelegates;
task._zone = this;
try {
task = this._zoneDelegate.scheduleTask(this, task);
} catch (err) {
task._transitionTo(unknown, scheduling, notScheduled);
this._zoneDelegate.handleError(this, err);
throw err;
}
if (task._zoneDelegates === zoneDelegates) {
this._updateTaskCount(task, 1);
}
if (task.state == scheduling) {
task._transitionTo(scheduled, scheduling);
}
return task;
};
Zone.prototype.scheduleMicroTask = function(source, callback, data, customSchedule) {
return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, null));
};
Zone.prototype.scheduleMacroTask = function(source, callback, data, customSchedule, customCancel) {
return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));
};
Zone.prototype.scheduleEventTask = function(source, callback, data, customSchedule, customCancel) {
return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));
};
Zone.prototype.cancelTask = function(task) {
if (task.zone != this) throw new Error("A task can only be cancelled in the zone of creation! (Creation: " + (task.zone || NO_ZONE).name + "; Execution: " + this.name + ")");
task._transitionTo(canceling, scheduled, running);
try {
this._zoneDelegate.cancelTask(this, task);
} catch (err) {
task._transitionTo(unknown, canceling);
this._zoneDelegate.handleError(this, err);
throw err;
}
this._updateTaskCount(task, -1);
task._transitionTo(notScheduled, canceling);
task.runCount = 0;
return task;
};
Zone.prototype._updateTaskCount = function(task, count) {
var zoneDelegates = task._zoneDelegates;
if (count == -1) {
task._zoneDelegates = null;
}
for (var i = 0; i < zoneDelegates.length; i++) {
zoneDelegates[i]._updateTaskCount(task.type, count);
}
};
return Zone;
}();
Zone.__symbol__ = __symbol__;
var DELEGATE_ZS = {
name: "",
onHasTask: function(delegate, _, target, hasTaskState) {
return delegate.hasTask(target, hasTaskState);
},
onScheduleTask: function(delegate, _, target, task) {
return delegate.scheduleTask(target, task);
},
onInvokeTask: function(delegate, _, target, task, applyThis, applyArgs) {
return delegate.invokeTask(target, task, applyThis, applyArgs);
},
onCancelTask: function(delegate, _, target, task) {
return delegate.cancelTask(target, task);
}
};
var ZoneDelegate = function() {
function ZoneDelegate(zone, parentDelegate, zoneSpec) {
this._taskCounts = {
microTask: 0,
macroTask: 0,
eventTask: 0
};
this.zone = zone;
this._parentDelegate = parentDelegate;
this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
this._forkCurrZone = zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate.zone);
this._interceptZS = zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
this._interceptDlgt = zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
this._interceptCurrZone = zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate.zone);
this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
this._invokeDlgt = zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
this._invokeCurrZone = zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate.zone);
this._handleErrorZS = zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
this._handleErrorDlgt = zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
this._handleErrorCurrZone = zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate.zone);
this._scheduleTaskZS = zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
this._scheduleTaskDlgt = zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
this._scheduleTaskCurrZone = zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate.zone);
this._invokeTaskZS = zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
this._invokeTaskDlgt = zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
this._invokeTaskCurrZone = zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate.zone);
this._cancelTaskZS = zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
this._cancelTaskDlgt = zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
this._cancelTaskCurrZone = zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate.zone);
this._hasTaskZS = null;
this._hasTaskDlgt = null;
this._hasTaskDlgtOwner = null;
this._hasTaskCurrZone = null;
var zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;
var parentHasTask = parentDelegate && parentDelegate._hasTaskZS;
if (zoneSpecHasTask || parentHasTask) {
this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;
this._hasTaskDlgt = parentDelegate;
this._hasTaskDlgtOwner = this;
this._hasTaskCurrZone = zone;
if (!zoneSpec.onScheduleTask) {
this._scheduleTaskZS = DELEGATE_ZS;
this._scheduleTaskDlgt = parentDelegate;
this._scheduleTaskCurrZone = this.zone;
}
if (!zoneSpec.onInvokeTask) {
this._invokeTaskZS = DELEGATE_ZS;
this._invokeTaskDlgt = parentDelegate;
this._invokeTaskCurrZone = this.zone;
}
if (!zoneSpec.onCancelTask) {
this._cancelTaskZS = DELEGATE_ZS;
this._cancelTaskDlgt = parentDelegate;
this._cancelTaskCurrZone = this.zone;
}
}
}
ZoneDelegate.prototype.fork = function(targetZone, zoneSpec) {
return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) : new Zone(targetZone, zoneSpec);
};
ZoneDelegate.prototype.intercept = function(targetZone, callback, source) {
return this._interceptZS ? this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) : callback;
};
ZoneDelegate.prototype.invoke = function(targetZone, callback, applyThis, applyArgs, source) {
return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) : callback.apply(applyThis, applyArgs);
};
ZoneDelegate.prototype.handleError = function(targetZone, error) {
return this._handleErrorZS ? this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) : true;
};
ZoneDelegate.prototype.scheduleTask = function(targetZone, task) {
var returnTask = task;
if (this._scheduleTaskZS) {
if (this._hasTaskZS) {
returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);
}
returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);
if (!returnTask) returnTask = task;
} else {
if (task.scheduleFn) {
task.scheduleFn(task);
} else if (task.type == microTask) {
scheduleMicroTask(task);
} else {
throw new Error("Task is missing scheduleFn.");
}
}
return returnTask;
};
ZoneDelegate.prototype.invokeTask = function(targetZone, task, applyThis, applyArgs) {
return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) : task.callback.apply(applyThis, applyArgs);
};
ZoneDelegate.prototype.cancelTask = function(targetZone, task) {
var value;
if (this._cancelTaskZS) {
value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);
} else {
if (!task.cancelFn) {
throw Error("Task is not cancelable");
}
value = task.cancelFn(task);
}
return value;
};
ZoneDelegate.prototype.hasTask = function(targetZone, isEmpty) {
try {
return this._hasTaskZS && this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);
} catch (err) {
this.handleError(targetZone, err);
}
};
ZoneDelegate.prototype._updateTaskCount = function(type, count) {
var counts = this._taskCounts;
var prev = counts[type];
var next = counts[type] = prev + count;
if (next < 0) {
throw new Error("More tasks executed then were scheduled.");
}
if (prev == 0 || next == 0) {
var isEmpty = {
microTask: counts.microTask > 0,
macroTask: counts.macroTask > 0,
eventTask: counts.eventTask > 0,
change: type
};
this.hasTask(this.zone, isEmpty);
}
};
return ZoneDelegate;
}();
var ZoneTask = function() {
function ZoneTask(type, source, callback, options, scheduleFn, cancelFn) {
this._zone = null;
this.runCount = 0;
this._zoneDelegates = null;
this._state = "notScheduled";
this.type = type;
this.source = source;
this.data = options;
this.scheduleFn = scheduleFn;
this.cancelFn = cancelFn;
this.callback = callback;
var self = this;
this.invoke = function() {
_numberOfNestedTaskFrames++;
try {
self.runCount++;
return self.zone.runTask(self, this, arguments);
} finally {
if (_numberOfNestedTaskFrames == 1) {
drainMicroTaskQueue();
}
_numberOfNestedTaskFrames--;
}
};
}
Object.defineProperty(ZoneTask.prototype, "zone", {
get: function() {
return this._zone;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ZoneTask.prototype, "state", {
get: function() {
return this._state;
},
enumerable: true,
configurable: true
});
ZoneTask.prototype.cancelScheduleRequest = function() {
this._transitionTo(notScheduled, scheduling);
};
ZoneTask.prototype._transitionTo = function(toState, fromState1, fromState2) {
if (this._state === fromState1 || this._state === fromState2) {
this._state = toState;
if (toState == notScheduled) {
this._zoneDelegates = null;
}
} else {
throw new Error(this.type + " '" + this.source + "': can not transition to '" + toState + "', expecting state '" + fromState1 + "'" + (fromState2 ? " or '" + fromState2 + "'" : "") + ", was '" + this._state + "'.");
}
};
ZoneTask.prototype.toString = function() {
if (this.data && typeof this.data.handleId !== "undefined") {
return this.data.handleId;
} else {
return Object.prototype.toString.call(this);
}
};
ZoneTask.prototype.toJSON = function() {
return {
type: this.type,
state: this.state,
source: this.source,
zone: this.zone.name,
invoke: this.invoke,
scheduleFn: this.scheduleFn,
cancelFn: this.cancelFn,
runCount: this.runCount,
callback: this.callback
};
};
return ZoneTask;
}();
var ZoneFrame = function() {
function ZoneFrame(parent, zone) {
this.parent = parent;
this.zone = zone;
}
return ZoneFrame;
}();
function __symbol__(name) {
return "__zone_symbol__" + name;
}
var symbolSetTimeout = __symbol__("setTimeout");
var symbolPromise = __symbol__("Promise");
var symbolThen = __symbol__("then");
var _currentZoneFrame = new ZoneFrame(null, new Zone(null, null));
var _currentTask = null;
var _microTaskQueue = [];
var _isDrainingMicrotaskQueue = false;
var _uncaughtPromiseErrors = [];
var _numberOfNestedTaskFrames = 0;
function scheduleQueueDrain() {
if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {
if (global[symbolPromise]) {
global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);
} else {
global[symbolSetTimeout](drainMicroTaskQueue, 0);
}
}
}
function scheduleMicroTask(task) {
scheduleQueueDrain();
_microTaskQueue.push(task);
}
function consoleError(e) {
if (Zone[__symbol__("ignoreConsoleErrorUncaughtError")]) {
return;
}
var rejection = e && e.rejection;
if (rejection) {
console.error("Unhandled Promise rejection:", rejection instanceof Error ? rejection.message : rejection, "; Zone:", e.zone.name, "; Task:", e.task && e.task.source, "; Value:", rejection, rejection instanceof Error ? rejection.stack : undefined);
}
console.error(e);
}
function handleUnhandledRejection(e) {
consoleError(e);
try {
var handler = Zone[__symbol__("unhandledPromiseRejectionHandler")];
if (handler && typeof handler === "function") {
handler.apply(this, [ e ]);
}
} catch (err) {}
}
function drainMicroTaskQueue() {
if (!_isDrainingMicrotaskQueue) {
_isDrainingMicrotaskQueue = true;
while (_microTaskQueue.length) {
var queue = _microTaskQueue;
_microTaskQueue = [];
for (var i = 0; i < queue.length; i++) {
var task = queue[i];
try {
task.zone.runTask(task, null, null);
} catch (error) {
consoleError(error);
}
}
}
while (_uncaughtPromiseErrors.length) {
var _loop_1 = function() {
var uncaughtPromiseError = _uncaughtPromiseErrors.shift();
try {
uncaughtPromiseError.zone.runGuarded(function() {
throw uncaughtPromiseError;
});
} catch (error) {
handleUnhandledRejection(error);
}
};
while (_uncaughtPromiseErrors.length) {
_loop_1();
}
}
_isDrainingMicrotaskQueue = false;
}
}
function isThenable(value) {
return value && value.then;
}
function forwardResolution(value) {
return value;
}
function forwardRejection(rejection) {
return ZoneAwarePromise.reject(rejection);
}
var symbolState = __symbol__("state");
var symbolValue = __symbol__("value");
var source = "Promise.then";
var UNRESOLVED = null;
var RESOLVED = true;
var REJECTED = false;
var REJECTED_NO_CATCH = 0;
function makeResolver(promise, state) {
return function(v) {
try {
resolvePromise(promise, state, v);
} catch (err) {
resolvePromise(promise, false, err);
}
};
}
var once = function() {
var wasCalled = false;
return function wrapper(wrappedFunction) {
return function() {
if (wasCalled) {
return;
}
wasCalled = true;
wrappedFunction.apply(null, arguments);
};
};
};
function resolvePromise(promise, state, value) {
var onceWrapper = once();
if (promise === value) {
throw new TypeError("Promise resolved with itself");
}
if (promise[symbolState] === UNRESOLVED) {
var then = null;
try {
if (typeof value === "object" || typeof value === "function") {
then = value && value.then;
}
} catch (err) {
onceWrapper(function() {
resolvePromise(promise, false, err);
})();
return promise;
}
if (state !== REJECTED && value instanceof ZoneAwarePromise && value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) && value[symbolState] !== UNRESOLVED) {
clearRejectedNoCatch(value);
resolvePromise(promise, value[symbolState], value[symbolValue]);
} else if (state !== REJECTED && typeof then === "function") {
try {
then.apply(value, [ onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false)) ]);
} catch (err) {
onceWrapper(function() {
resolvePromise(promise, false, err);
})();
}
} else {
promise[symbolState] = state;
var queue = promise[symbolValue];
promise[symbolValue] = value;
if (state === REJECTED && value instanceof Error) {
value[__symbol__("currentTask")] = Zone.currentTask;
}
for (var i = 0; i < queue.length; ) {
scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
}
if (queue.length == 0 && state == REJECTED) {
promise[symbolState] = REJECTED_NO_CATCH;
try {
throw new Error("Uncaught (in promise): " + value + (value && value.stack ? "\n" + value.stack : ""));
} catch (err) {
var error_1 = err;
error_1.rejection = value;
error_1.promise = promise;
error_1.zone = Zone.current;
error_1.task = Zone.currentTask;
_uncaughtPromiseErrors.push(error_1);
scheduleQueueDrain();
}
}
}
}
return promise;
}
function clearRejectedNoCatch(promise) {
if (promise[symbolState] === REJECTED_NO_CATCH) {
try {
var handler = Zone[__symbol__("rejectionHandledHandler")];
if (handler && typeof handler === "function") {
handler.apply(this, [ {
rejection: promise[symbolValue],
promise: promise
} ]);
}
} catch (err) {}
promise[symbolState] = REJECTED;
for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
if (promise === _uncaughtPromiseErrors[i].promise) {
_uncaughtPromiseErrors.splice(i, 1);
}
}
}
}
function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
clearRejectedNoCatch(promise);
var delegate = promise[symbolState] ? typeof onFulfilled === "function" ? onFulfilled : forwardResolution : typeof onRejected === "function" ? onRejected : forwardRejection;
zone.scheduleMicroTask(source, function() {
try {
resolvePromise(chainPromise, true, zone.run(delegate, undefined, [ promise[symbolValue] ]));
} catch (error) {
resolvePromise(chainPromise, false, error);
}
});
}
var ZoneAwarePromise = function() {
function ZoneAwarePromise(executor) {
var promise = this;
if (!(promise instanceof ZoneAwarePromise)) {
throw new Error("Must be an instanceof Promise.");
}
promise[symbolState] = UNRESOLVED;
promise[symbolValue] = [];
try {
executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
} catch (error) {
resolvePromise(promise, false, error);
}
}
ZoneAwarePromise.toString = function() {
return "function ZoneAwarePromise() { [native code] }";
};
ZoneAwarePromise.resolve = function(value) {
return resolvePromise(new this(null), RESOLVED, value);
};
ZoneAwarePromise.reject = function(error) {
return resolvePromise(new this(null), REJECTED, error);
};
ZoneAwarePromise.race = function(values) {
var resolve;
var reject;
var promise = new this(function(res, rej) {
_a = [ res, rej ], resolve = _a[0], reject = _a[1];
var _a;
});
function onResolve(value) {
promise && (promise = null || resolve(value));
}
function onReject(error) {
promise && (promise = null || reject(error));
}
for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
var value = values_1[_i];
if (!isThenable(value)) {
value = this.resolve(value);
}
value.then(onResolve, onReject);
}
return promise;
};
ZoneAwarePromise.all = function(values) {
var resolve;
var reject;
var promise = new this(function(res, rej) {
resolve = res;
reject = rej;
});
var count = 0;
var resolvedValues = [];
for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
var value = values_2[_i];
if (!isThenable(value)) {
value = this.resolve(value);
}
value.then(function(index) {
return function(value) {
resolvedValues[index] = value;
count--;
if (!count) {
resolve(resolvedValues);
}
};
}(count), reject);
count++;
}
if (!count) resolve(resolvedValues);
return promise;
};
ZoneAwarePromise.prototype.then = function(onFulfilled, onRejected) {
var chainPromise = new this.constructor(null);
var zone = Zone.current;
if (this[symbolState] == UNRESOLVED) {
this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
} else {
scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
}
return chainPromise;
};
ZoneAwarePromise.prototype.catch = function(onRejected) {
return this.then(null, onRejected);
};
return ZoneAwarePromise;
}();
ZoneAwarePromise["resolve"] = ZoneAwarePromise.resolve;
ZoneAwarePromise["reject"] = ZoneAwarePromise.reject;
ZoneAwarePromise["race"] = ZoneAwarePromise.race;
ZoneAwarePromise["all"] = ZoneAwarePromise.all;
var NativePromise = global[symbolPromise] = global["Promise"];
global["Promise"] = ZoneAwarePromise;
var symbolThenPatched = __symbol__("thenPatched");
function patchThen(Ctor) {
var proto = Ctor.prototype;
var originalThen = proto.then;
proto[symbolThen] = originalThen;
Ctor.prototype.then = function(onResolve, onReject) {
var _this = this;
var wrapped = new ZoneAwarePromise(function(resolve, reject) {
originalThen.call(_this, resolve, reject);
});
return wrapped.then(onResolve, onReject);
};
Ctor[symbolThenPatched] = true;
}
function zoneify(fn) {
return function() {
var resultPromise = fn.apply(this, arguments);
if (resultPromise instanceof ZoneAwarePromise) {
return resultPromise;
}
var ctor = resultPromise.constructor;
if (!ctor[symbolThenPatched]) {
patchThen(ctor);
}
return resultPromise;
};
}
if (NativePromise) {
patchThen(NativePromise);
var fetch_1 = global["fetch"];
if (typeof fetch_1 == "function") {
global["fetch"] = zoneify(fetch_1);
}
}
Promise[Zone.__symbol__("uncaughtPromiseErrors")] = _uncaughtPromiseErrors;
var blacklistedStackFramesSymbol = Zone.__symbol__("blacklistedStackFrames");
var NativeError = global[__symbol__("Error")] = global.Error;
var blackListedStackFrames = {};
var zoneAwareFrame1;
var zoneAwareFrame2;
global.Error = ZoneAwareError;
var stackRewrite = "stackRewrite";
function ZoneAwareError() {
var _this = this;
var error = NativeError.apply(this, arguments);
var originalStack = error["originalStack"] = error.stack;
if (ZoneAwareError[stackRewrite] && originalStack) {
var frames_1 = originalStack.split("\n");
var zoneFrame = _currentZoneFrame;
var i = 0;
while (!(frames_1[i] === zoneAwareFrame1 || frames_1[i] === zoneAwareFrame2) && i < frames_1.length) {
i++;
}
for (;i < frames_1.length && zoneFrame; i++) {
var frame = frames_1[i];
if (frame.trim()) {
switch (blackListedStackFrames[frame]) {
case 0:
frames_1.splice(i, 1);
i--;
break;

case 1:
if (zoneFrame.parent) {
zoneFrame = zoneFrame.parent;
} else {
zoneFrame = null;
}
frames_1.splice(i, 1);
i--;
break;

default:
frames_1[i] += " [" + zoneFrame.zone.name + "]";
}
}
}
try {
error.stack = error.zoneAwareStack = frames_1.join("\n");
} catch (e) {}
}
if (this instanceof NativeError && this.constructor != NativeError) {
Object.keys(error).concat("stack", "message").forEach(function(key) {
if (error[key] !== undefined) {
try {
_this[key] = error[key];
} catch (e) {}
}
});
return this;
}
return error;
}
ZoneAwareError.prototype = NativeError.prototype;
ZoneAwareError[blacklistedStackFramesSymbol] = blackListedStackFrames;
ZoneAwareError[stackRewrite] = false;
var specialPropertyNames = [ "stackTraceLimit", "captureStackTrace", "prepareStackTrace" ];
var nativeErrorProperties = Object.keys(NativeError);
if (nativeErrorProperties) {
nativeErrorProperties.forEach(function(prop) {
if (specialPropertyNames.filter(function(sp) {
return sp === prop;
}).length === 0) {
Object.defineProperty(ZoneAwareError, prop, {
get: function() {
return NativeError[prop];
},
set: function(value) {
NativeError[prop] = value;
}
});
}
});
}
if (NativeError.hasOwnProperty("stackTraceLimit")) {
NativeError.stackTraceLimit = Math.max(NativeError.stackTraceLimit, 15);
Object.defineProperty(ZoneAwareError, "stackTraceLimit", {
get: function() {
return NativeError.stackTraceLimit;
},
set: function(value) {
return NativeError.stackTraceLimit = value;
}
});
}
if (NativeError.hasOwnProperty("captureStackTrace")) {
Object.defineProperty(ZoneAwareError, "captureStackTrace", {
value: function zoneCaptureStackTrace(targetObject, constructorOpt) {
NativeError.captureStackTrace(targetObject, constructorOpt);
}
});
}
Object.defineProperty(ZoneAwareError, "prepareStackTrace", {
get: function() {
return NativeError.prepareStackTrace;
},
set: function(value) {
if (!value || typeof value !== "function") {
return NativeError.prepareStackTrace = value;
}
return NativeError.prepareStackTrace = function(error, structuredStackTrace) {
if (structuredStackTrace) {
for (var i = 0; i < structuredStackTrace.length; i++) {
var st = structuredStackTrace[i];
if (st.getFunctionName() === "zoneCaptureStackTrace") {
structuredStackTrace.splice(i, 1);
break;
}
}
}
return value.apply(this, [ error, structuredStackTrace ]);
};
}
});
var detectZone = Zone.current.fork({
name: "detect",
onHandleError: function(parentZD, current, target, error) {
if (error.originalStack && Error === ZoneAwareError) {
var frames_2 = error.originalStack.split(/\n/);
var runFrame = false, runGuardedFrame = false, runTaskFrame = false;
while (frames_2.length) {
var frame = frames_2.shift();
if (/:\d+:\d+/.test(frame)) {
var fnName = frame.split("(")[0].split("@")[0];
var frameType = 1;
if (fnName.indexOf("ZoneAwareError") !== -1) {
zoneAwareFrame1 = frame;
zoneAwareFrame2 = frame.replace("Error.", "");
blackListedStackFrames[zoneAwareFrame2] = 0;
}
if (fnName.indexOf("runGuarded") !== -1) {
runGuardedFrame = true;
} else if (fnName.indexOf("runTask") !== -1) {
runTaskFrame = true;
} else if (fnName.indexOf("run") !== -1) {
runFrame = true;
} else {
frameType = 0;
}
blackListedStackFrames[frame] = frameType;
if (runFrame && runGuardedFrame && runTaskFrame) {
ZoneAwareError[stackRewrite] = true;
break;
}
}
}
}
return false;
}
});
var childDetectZone = detectZone.fork({
name: "child",
onScheduleTask: function(delegate, curr, target, task) {
return delegate.scheduleTask(target, task);
},
onInvokeTask: function(delegate, curr, target, task, applyThis, applyArgs) {
return delegate.invokeTask(target, task, applyThis, applyArgs);
},
onCancelTask: function(delegate, curr, target, task) {
return delegate.cancelTask(target, task);
},
onInvoke: function(delegate, curr, target, callback, applyThis, applyArgs, source) {
return delegate.invoke(target, callback, applyThis, applyArgs, source);
}
});
var originalStackTraceLimit = Error.stackTraceLimit;
Error.stackTraceLimit = 100;
childDetectZone.run(function() {
childDetectZone.runGuarded(function() {
var fakeTransitionTo = function(toState, fromState1, fromState2) {};
childDetectZone.scheduleEventTask(blacklistedStackFramesSymbol, function() {
childDetectZone.scheduleMacroTask(blacklistedStackFramesSymbol, function() {
childDetectZone.scheduleMicroTask(blacklistedStackFramesSymbol, function() {
throw new ZoneAwareError(ZoneAwareError, NativeError);
}, null, function(t) {
t._transitionTo = fakeTransitionTo;
t.invoke();
});
}, null, function(t) {
t._transitionTo = fakeTransitionTo;
t.invoke();
}, function() {});
}, null, function(t) {
t._transitionTo = fakeTransitionTo;
t.invoke();
}, function() {});
});
});
Error.stackTraceLimit = originalStackTraceLimit;
return global["Zone"] = Zone;
}(typeof window !== "undefined" && window || typeof self !== "undefined" && self || global);
var zoneSymbol = function(n) {
return "__zone_symbol__" + n;
};
var _global$1 = typeof window === "object" && window || typeof self === "object" && self || global;
function bindArguments(args, source) {
for (var i = args.length - 1; i >= 0; i--) {
if (typeof args[i] === "function") {
args[i] = Zone.current.wrap(args[i], source + "_" + i);
}
}
return args;
}
function patchPrototype(prototype, fnNames) {
var source = prototype.constructor["name"];
var _loop_1 = function(i) {
var name_1 = fnNames[i];
var delegate = prototype[name_1];
if (delegate) {
prototype[name_1] = function(delegate) {
var patched = function() {
return delegate.apply(this, bindArguments(arguments, source + "." + name_1));
};
attachOriginToPatched(patched, delegate);
return patched;
}(delegate);
}
};
for (var i = 0; i < fnNames.length; i++) {
_loop_1(i);
}
}
var isWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
var isNode = !("nw" in _global$1) && typeof process !== "undefined" && {}.toString.call(process) === "[object process]";
var isBrowser = !isNode && !isWebWorker && !!(typeof window !== "undefined" && window["HTMLElement"]);
var isMix = typeof process !== "undefined" && {}.toString.call(process) === "[object process]" && !isWebWorker && !!(typeof window !== "undefined" && window["HTMLElement"]);
function patchProperty(obj, prop) {
var desc = Object.getOwnPropertyDescriptor(obj, prop) || {
enumerable: true,
configurable: true
};
if (!desc.configurable) {
return;
}
delete desc.writable;
delete desc.value;
var originalDescGet = desc.get;
var eventName = prop.substr(2);
var _prop = zoneSymbol("_" + prop);
desc.set = function(newValue) {
var target = this;
if (!target && obj === _global$1) {
target = _global$1;
}
if (!target) {
return;
}
var previousValue = target[_prop];
if (previousValue) {
target.removeEventListener(eventName, previousValue);
}
if (typeof newValue === "function") {
var wrapFn = function(event) {
var result = newValue.apply(this, arguments);
if (result != undefined && !result) {
event.preventDefault();
}
return result;
};
target[_prop] = wrapFn;
target.addEventListener(eventName, wrapFn, false);
} else {
target[_prop] = null;
}
};
desc.get = function() {
var target = this;
if (!target && obj === _global$1) {
target = _global$1;
}
if (!target) {
return null;
}
if (target.hasOwnProperty(_prop)) {
return target[_prop];
} else if (originalDescGet) {
var value = originalDescGet.apply(this);
if (value) {
desc.set.apply(this, [ value ]);
if (typeof target["removeAttribute"] === "function") {
target.removeAttribute(prop);
}
return value;
}
}
return null;
};
Object.defineProperty(obj, prop, desc);
}
function patchOnProperties(obj, properties) {
if (properties) {
for (var i = 0; i < properties.length; i++) {
patchProperty(obj, "on" + properties[i]);
}
} else {
var onProperties = [];
for (var prop in obj) {
if (prop.substr(0, 2) == "on") {
onProperties.push(prop);
}
}
for (var j = 0; j < onProperties.length; j++) {
patchProperty(obj, onProperties[j]);
}
}
}
var EVENT_TASKS = zoneSymbol("eventTasks");
var ADD_EVENT_LISTENER = "addEventListener";
var REMOVE_EVENT_LISTENER = "removeEventListener";
function compareEventListenerOptions(left, right) {
var leftCapture = typeof left === "boolean" ? left : typeof left === "object" ? left && left.capture : false;
var rightCapture = typeof right === "boolean" ? right : typeof right === "object" ? right && right.capture : false;
return !!leftCapture === !!rightCapture;
}
function findExistingRegisteredTask(target, handler, name, options, remove) {
var eventTasks = target[EVENT_TASKS];
if (eventTasks) {
for (var i = 0; i < eventTasks.length; i++) {
var eventTask = eventTasks[i];
var data = eventTask.data;
var listener = data.handler;
if ((data.handler === handler || listener.listener === handler) && compareEventListenerOptions(data.options, options) && data.eventName === name) {
if (remove) {
eventTasks.splice(i, 1);
}
return eventTask;
}
}
}
return null;
}
function findAllExistingRegisteredTasks(target, name, remove) {
var eventTasks = target[EVENT_TASKS];
if (eventTasks) {
var result = [];
for (var i = eventTasks.length - 1; i >= 0; i--) {
var eventTask = eventTasks[i];
var data = eventTask.data;
if (data.eventName === name) {
result.push(eventTask);
if (remove) {
eventTasks.splice(i, 1);
}
}
}
return result;
}
return null;
}
function attachRegisteredEvent(target, eventTask, isPrepend) {
var eventTasks = target[EVENT_TASKS];
if (!eventTasks) {
eventTasks = target[EVENT_TASKS] = [];
}
if (isPrepend) {
eventTasks.unshift(eventTask);
} else {
eventTasks.push(eventTask);
}
}
var defaultListenerMetaCreator = function(self, args) {
return {
options: args[2],
eventName: args[0],
handler: args[1],
target: self || _global$1,
name: args[0],
crossContext: false,
invokeAddFunc: function(addFnSymbol, delegate) {
if (!this.crossContext) {
if (delegate && delegate.invoke) {
return this.target[addFnSymbol](this.eventName, delegate.invoke, this.options);
} else {
return this.target[addFnSymbol](this.eventName, delegate, this.options);
}
} else {
try {
return this.target[addFnSymbol](this.eventName, delegate, this.options);
} catch (err) {}
}
},
invokeRemoveFunc: function(removeFnSymbol, delegate) {
if (!this.crossContext) {
if (delegate && delegate.invoke) {
return this.target[removeFnSymbol](this.eventName, delegate.invoke, this.options);
} else {
return this.target[removeFnSymbol](this.eventName, delegate, this.options);
}
} else {
try {
return this.target[removeFnSymbol](this.eventName, delegate, this.options);
} catch (err) {}
}
}
};
};
function makeZoneAwareAddListener(addFnName, removeFnName, useCapturingParam, allowDuplicates, isPrepend, metaCreator) {
if (useCapturingParam === void 0) {
useCapturingParam = true;
}
if (allowDuplicates === void 0) {
allowDuplicates = false;
}
if (isPrepend === void 0) {
isPrepend = false;
}
if (metaCreator === void 0) {
metaCreator = defaultListenerMetaCreator;
}
var addFnSymbol = zoneSymbol(addFnName);
var removeFnSymbol = zoneSymbol(removeFnName);
var defaultUseCapturing = useCapturingParam ? false : undefined;
function scheduleEventListener(eventTask) {
var meta = eventTask.data;
attachRegisteredEvent(meta.target, eventTask, isPrepend);
return meta.invokeAddFunc(addFnSymbol, eventTask);
}
function cancelEventListener(eventTask) {
var meta = eventTask.data;
findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.options, true);
return meta.invokeRemoveFunc(removeFnSymbol, eventTask);
}
return function zoneAwareAddListener(self, args) {
var data = metaCreator(self, args);
data.options = data.options || defaultUseCapturing;
var delegate = null;
if (typeof data.handler == "function") {
delegate = data.handler;
} else if (data.handler && data.handler.handleEvent) {
delegate = function(event) {
return data.handler.handleEvent(event);
};
}
var validZoneHandler = false;
try {
validZoneHandler = data.handler && data.handler.toString() === "[object FunctionWrapper]";
} catch (error) {
data.crossContext = true;
return data.invokeAddFunc(addFnSymbol, data.handler);
}
if (!delegate || validZoneHandler) {
return data.invokeAddFunc(addFnSymbol, data.handler);
}
if (!allowDuplicates) {
var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.options, false);
if (eventTask) {
return data.invokeAddFunc(addFnSymbol, eventTask);
}
}
var zone = Zone.current;
var source = data.target.constructor["name"] + "." + addFnName + ":" + data.eventName;
zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);
};
}
function makeZoneAwareRemoveListener(fnName, useCapturingParam, metaCreator) {
if (useCapturingParam === void 0) {
useCapturingParam = true;
}
if (metaCreator === void 0) {
metaCreator = defaultListenerMetaCreator;
}
var symbol = zoneSymbol(fnName);
var defaultUseCapturing = useCapturingParam ? false : undefined;
return function zoneAwareRemoveListener(self, args) {
var data = metaCreator(self, args);
data.options = data.options || defaultUseCapturing;
var delegate = null;
if (typeof data.handler == "function") {
delegate = data.handler;
} else if (data.handler && data.handler.handleEvent) {
delegate = function(event) {
return data.handler.handleEvent(event);
};
}
var validZoneHandler = false;
try {
validZoneHandler = data.handler && data.handler.toString() === "[object FunctionWrapper]";
} catch (error) {
data.crossContext = true;
return data.invokeRemoveFunc(symbol, data.handler);
}
if (!delegate || validZoneHandler) {
return data.invokeRemoveFunc(symbol, data.handler);
}
var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.options, true);
if (eventTask) {
eventTask.zone.cancelTask(eventTask);
} else {
data.invokeRemoveFunc(symbol, data.handler);
}
};
}
function makeZoneAwareRemoveAllListeners(fnName) {
var symbol = zoneSymbol(fnName);
return function zoneAwareRemoveAllListener(self, args) {
var target = self || _global$1;
if (args.length === 0) {
target[EVENT_TASKS] = [];
target[symbol]();
return;
}
var eventName = args[0];
findAllExistingRegisteredTasks(target, eventName, true);
target[symbol](eventName);
};
}
function makeZoneAwareListeners(fnName) {
return function zoneAwareEventListeners(self, args) {
var eventName = args[0];
var target = self || _global$1;
if (!target[EVENT_TASKS]) {
return [];
}
return target[EVENT_TASKS].filter(function(task) {
return task.data["eventName"] === eventName;
}).map(function(task) {
return task.data["handler"];
});
};
}
function patchEventTargetMethods(obj, addFnName, removeFnName, metaCreator) {
if (addFnName === void 0) {
addFnName = ADD_EVENT_LISTENER;
}
if (removeFnName === void 0) {
removeFnName = REMOVE_EVENT_LISTENER;
}
if (metaCreator === void 0) {
metaCreator = defaultListenerMetaCreator;
}
if (obj && obj[addFnName]) {
patchMethod(obj, addFnName, function() {
return makeZoneAwareAddListener(addFnName, removeFnName, true, false, false, metaCreator);
});
patchMethod(obj, removeFnName, function() {
return makeZoneAwareRemoveListener(removeFnName, true, metaCreator);
});
return true;
} else {
return false;
}
}
var originalInstanceKey = zoneSymbol("originalInstance");
function patchClass(className) {
var OriginalClass = _global$1[className];
if (!OriginalClass) return;
_global$1[zoneSymbol(className)] = OriginalClass;
_global$1[className] = function() {
var a = bindArguments(arguments, className);
switch (a.length) {
case 0:
this[originalInstanceKey] = new OriginalClass();
break;

case 1:
this[originalInstanceKey] = new OriginalClass(a[0]);
break;

case 2:
this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
break;

case 3:
this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
break;

case 4:
this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
break;

default:
throw new Error("Arg list too long.");
}
};
attachOriginToPatched(_global$1[className], OriginalClass);
var instance = new OriginalClass(function() {});
var prop;
for (prop in instance) {
if (className === "XMLHttpRequest" && prop === "responseBlob") continue;
(function(prop) {
if (typeof instance[prop] === "function") {
_global$1[className].prototype[prop] = function() {
return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
};
} else {
Object.defineProperty(_global$1[className].prototype, prop, {
set: function(fn) {
if (typeof fn === "function") {
this[originalInstanceKey][prop] = Zone.current.wrap(fn, className + "." + prop);
attachOriginToPatched(this[originalInstanceKey][prop], fn);
} else {
this[originalInstanceKey][prop] = fn;
}
},
get: function() {
return this[originalInstanceKey][prop];
}
});
}
})(prop);
}
for (prop in OriginalClass) {
if (prop !== "prototype" && OriginalClass.hasOwnProperty(prop)) {
_global$1[className][prop] = OriginalClass[prop];
}
}
}
function createNamedFn(name, delegate) {
try {
return Function("f", "return function " + name + "(){return f(this, arguments)}")(delegate);
} catch (error) {
return function() {
return delegate(this, arguments);
};
}
}
function patchMethod(target, name, patchFn) {
var proto = target;
while (proto && Object.getOwnPropertyNames(proto).indexOf(name) === -1) {
proto = Object.getPrototypeOf(proto);
}
if (!proto && target[name]) {
proto = target;
}
var delegateName = zoneSymbol(name);
var delegate;
if (proto && !(delegate = proto[delegateName])) {
delegate = proto[delegateName] = proto[name];
proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));
attachOriginToPatched(proto[name], delegate);
}
return delegate;
}
function patchMacroTask(obj, funcName, metaCreator) {
var setNative = null;
function scheduleTask(task) {
var data = task.data;
data.args[data.callbackIndex] = function() {
task.invoke.apply(this, arguments);
};
setNative.apply(data.target, data.args);
return task;
}
setNative = patchMethod(obj, funcName, function(delegate) {
return function(self, args) {
var meta = metaCreator(self, args);
if (meta.callbackIndex >= 0 && typeof args[meta.callbackIndex] === "function") {
var task = Zone.current.scheduleMacroTask(meta.name, args[meta.callbackIndex], meta, scheduleTask, null);
return task;
} else {
return delegate.apply(self, args);
}
};
});
}
function patchMicroTask(obj, funcName, metaCreator) {
var setNative = null;
function scheduleTask(task) {
var data = task.data;
data.args[data.callbackIndex] = function() {
task.invoke.apply(this, arguments);
};
setNative.apply(data.target, data.args);
return task;
}
setNative = patchMethod(obj, funcName, function(delegate) {
return function(self, args) {
var meta = metaCreator(self, args);
if (meta.callbackIndex >= 0 && typeof args[meta.callbackIndex] === "function") {
var task = Zone.current.scheduleMicroTask(meta.name, args[meta.callbackIndex], meta, scheduleTask);
return task;
} else {
return delegate.apply(self, args);
}
};
});
}
function findEventTask(target, evtName) {
var eventTasks = target[zoneSymbol("eventTasks")];
var result = [];
if (eventTasks) {
for (var i = 0; i < eventTasks.length; i++) {
var eventTask = eventTasks[i];
var data = eventTask.data;
var eventName = data && data.eventName;
if (eventName === evtName) {
result.push(eventTask);
}
}
}
return result;
}
function attachOriginToPatched(patched, original) {
patched[zoneSymbol("OriginalDelegate")] = original;
}
Zone[zoneSymbol("patchEventTargetMethods")] = patchEventTargetMethods;
Zone[zoneSymbol("patchOnProperties")] = patchOnProperties;
function patchTimer(window, setName, cancelName, nameSuffix) {
var setNative = null;
var clearNative = null;
setName += nameSuffix;
cancelName += nameSuffix;
var tasksByHandleId = {};
function scheduleTask(task) {
var data = task.data;
function timer() {
try {
task.invoke.apply(this, arguments);
} finally {
delete tasksByHandleId[data.handleId];
}
}
data.args[0] = timer;
data.handleId = setNative.apply(window, data.args);
tasksByHandleId[data.handleId] = task;
return task;
}
function clearTask(task) {
delete tasksByHandleId[task.data.handleId];
return clearNative(task.data.handleId);
}
setNative = patchMethod(window, setName, function(delegate) {
return function(self, args) {
if (typeof args[0] === "function") {
var zone = Zone.current;
var options = {
handleId: null,
isPeriodic: nameSuffix === "Interval",
delay: nameSuffix === "Timeout" || nameSuffix === "Interval" ? args[1] || 0 : null,
args: args
};
var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);
if (!task) {
return task;
}
var handle = task.data.handleId;
if (handle && handle.ref && handle.unref && typeof handle.ref === "function" && typeof handle.unref === "function") {
task.ref = handle.ref.bind(handle);
task.unref = handle.unref.bind(handle);
}
return task;
} else {
return delegate.apply(window, args);
}
};
});
clearNative = patchMethod(window, cancelName, function(delegate) {
return function(self, args) {
var task = typeof args[0] === "number" ? tasksByHandleId[args[0]] : args[0];
if (task && typeof task.type === "string") {
if (task.state !== "notScheduled" && (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {
task.zone.cancelTask(task);
}
} else {
delegate.apply(window, args);
}
};
});
}
function patchFuncToString() {
var originalFunctionToString = Function.prototype.toString;
var g = typeof window !== "undefined" && window || typeof self !== "undefined" && self || global;
Function.prototype.toString = function() {
if (typeof this === "function") {
if (this[zoneSymbol("OriginalDelegate")]) {
return originalFunctionToString.apply(this[zoneSymbol("OriginalDelegate")], arguments);
}
if (this === Promise) {
var nativePromise = g[zoneSymbol("Promise")];
if (nativePromise) {
return originalFunctionToString.apply(nativePromise, arguments);
}
}
if (this === Error) {
var nativeError = g[zoneSymbol("Error")];
if (nativeError) {
return originalFunctionToString.apply(nativeError, arguments);
}
}
}
return originalFunctionToString.apply(this, arguments);
};
}
function patchObjectToString() {
var originalObjectToString = Object.prototype.toString;
Object.prototype.toString = function() {
if (this instanceof Promise) {
return "[object Promise]";
}
return originalObjectToString.apply(this, arguments);
};
}
var _defineProperty = Object[zoneSymbol("defineProperty")] = Object.defineProperty;
var _getOwnPropertyDescriptor = Object[zoneSymbol("getOwnPropertyDescriptor")] = Object.getOwnPropertyDescriptor;
var _create = Object.create;
var unconfigurablesKey = zoneSymbol("unconfigurables");
function propertyPatch() {
Object.defineProperty = function(obj, prop, desc) {
if (isUnconfigurable(obj, prop)) {
throw new TypeError("Cannot assign to read only property '" + prop + "' of " + obj);
}
var originalConfigurableFlag = desc.configurable;
if (prop !== "prototype") {
desc = rewriteDescriptor(obj, prop, desc);
}
return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
};
Object.defineProperties = function(obj, props) {
Object.keys(props).forEach(function(prop) {
Object.defineProperty(obj, prop, props[prop]);
});
return obj;
};
Object.create = function(obj, proto) {
if (typeof proto === "object" && !Object.isFrozen(proto)) {
Object.keys(proto).forEach(function(prop) {
proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
});
}
return _create(obj, proto);
};
Object.getOwnPropertyDescriptor = function(obj, prop) {
var desc = _getOwnPropertyDescriptor(obj, prop);
if (isUnconfigurable(obj, prop)) {
desc.configurable = false;
}
return desc;
};
}
function _redefineProperty(obj, prop, desc) {
var originalConfigurableFlag = desc.configurable;
desc = rewriteDescriptor(obj, prop, desc);
return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
}
function isUnconfigurable(obj, prop) {
return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
}
function rewriteDescriptor(obj, prop, desc) {
desc.configurable = true;
if (!desc.configurable) {
if (!obj[unconfigurablesKey]) {
_defineProperty(obj, unconfigurablesKey, {
writable: true,
value: {}
});
}
obj[unconfigurablesKey][prop] = true;
}
return desc;
}
function _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {
try {
return _defineProperty(obj, prop, desc);
} catch (error) {
if (desc.configurable) {
if (typeof originalConfigurableFlag == "undefined") {
delete desc.configurable;
} else {
desc.configurable = originalConfigurableFlag;
}
try {
return _defineProperty(obj, prop, desc);
} catch (error) {
var descJson = null;
try {
descJson = JSON.stringify(desc);
} catch (error) {
descJson = descJson.toString();
}
console.log("Attempting to configure '" + prop + "' with descriptor '" + descJson + "' on object '" + obj + "' and got error, giving up: " + error);
}
} else {
throw error;
}
}
}
var WTF_ISSUE_555 = "Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video";
var NO_EVENT_TARGET = "ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex,WebSocket".split(",");
var EVENT_TARGET = "EventTarget";
function eventTargetPatch(_global) {
var apis = [];
var isWtf = _global["wtf"];
if (isWtf) {
apis = WTF_ISSUE_555.split(",").map(function(v) {
return "HTML" + v + "Element";
}).concat(NO_EVENT_TARGET);
} else if (_global[EVENT_TARGET]) {
apis.push(EVENT_TARGET);
} else {
apis = NO_EVENT_TARGET;
}
for (var i = 0; i < apis.length; i++) {
var type = _global[apis[i]];
patchEventTargetMethods(type && type.prototype);
}
}
function apply(_global) {
var WS = _global.WebSocket;
if (!_global.EventTarget) {
patchEventTargetMethods(WS.prototype);
}
_global.WebSocket = function(a, b) {
var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);
var proxySocket;
var onmessageDesc = Object.getOwnPropertyDescriptor(socket, "onmessage");
if (onmessageDesc && onmessageDesc.configurable === false) {
proxySocket = Object.create(socket);
[ "addEventListener", "removeEventListener", "send", "close" ].forEach(function(propName) {
proxySocket[propName] = function() {
return socket[propName].apply(socket, arguments);
};
});
} else {
proxySocket = socket;
}
patchOnProperties(proxySocket, [ "close", "error", "message", "open" ]);
return proxySocket;
};
for (var prop in WS) {
_global.WebSocket[prop] = WS[prop];
}
}
var eventNames = "copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror".split(" ");
function propertyDescriptorPatch(_global) {
if (isNode && !isMix) {
return;
}
var supportsWebSocket = typeof WebSocket !== "undefined";
if (canPatchViaPropertyDescriptor()) {
if (isBrowser) {
patchOnProperties(window, eventNames.concat([ "resize" ]));
patchOnProperties(Document.prototype, eventNames);
if (typeof window["SVGElement"] !== "undefined") {
patchOnProperties(window["SVGElement"].prototype, eventNames);
}
patchOnProperties(HTMLElement.prototype, eventNames);
}
patchOnProperties(XMLHttpRequest.prototype, null);
if (typeof IDBIndex !== "undefined") {
patchOnProperties(IDBIndex.prototype, null);
patchOnProperties(IDBRequest.prototype, null);
patchOnProperties(IDBOpenDBRequest.prototype, null);
patchOnProperties(IDBDatabase.prototype, null);
patchOnProperties(IDBTransaction.prototype, null);
patchOnProperties(IDBCursor.prototype, null);
}
if (supportsWebSocket) {
patchOnProperties(WebSocket.prototype, null);
}
} else {
patchViaCapturingAllTheEvents();
patchClass("XMLHttpRequest");
if (supportsWebSocket) {
apply(_global);
}
}
}
function canPatchViaPropertyDescriptor() {
if ((isBrowser || isMix) && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, "onclick") && typeof Element !== "undefined") {
var desc = Object.getOwnPropertyDescriptor(Element.prototype, "onclick");
if (desc && !desc.configurable) return false;
}
var xhrDesc = Object.getOwnPropertyDescriptor(XMLHttpRequest.prototype, "onreadystatechange");
if (xhrDesc) {
Object.defineProperty(XMLHttpRequest.prototype, "onreadystatechange", {
enumerable: true,
configurable: true,
get: function() {
return true;
}
});
var req = new XMLHttpRequest();
var result = !!req.onreadystatechange;
Object.defineProperty(XMLHttpRequest.prototype, "onreadystatechange", xhrDesc || {});
return result;
} else {
Object.defineProperty(XMLHttpRequest.prototype, "onreadystatechange", {
enumerable: true,
configurable: true,
get: function() {
return this[zoneSymbol("fakeonreadystatechange")];
},
set: function(value) {
this[zoneSymbol("fakeonreadystatechange")] = value;
}
});
var req = new XMLHttpRequest();
var detectFunc = function() {};
req.onreadystatechange = detectFunc;
var result = req[zoneSymbol("fakeonreadystatechange")] === detectFunc;
req.onreadystatechange = null;
return result;
}
}
var unboundKey = zoneSymbol("unbound");
function patchViaCapturingAllTheEvents() {
var _loop_1 = function(i) {
var property = eventNames[i];
var onproperty = "on" + property;
self.addEventListener(property, function(event) {
var elt = event.target, bound, source;
if (elt) {
source = elt.constructor["name"] + "." + onproperty;
} else {
source = "unknown." + onproperty;
}
while (elt) {
if (elt[onproperty] && !elt[onproperty][unboundKey]) {
bound = Zone.current.wrap(elt[onproperty], source);
bound[unboundKey] = elt[onproperty];
elt[onproperty] = bound;
}
elt = elt.parentElement;
}
}, true);
};
for (var i = 0; i < eventNames.length; i++) {
_loop_1(i);
}
}
function registerElementPatch(_global) {
if (!isBrowser && !isMix || !("registerElement" in _global.document)) {
return;
}
var _registerElement = document.registerElement;
var callbacks = [ "createdCallback", "attachedCallback", "detachedCallback", "attributeChangedCallback" ];
document.registerElement = function(name, opts) {
if (opts && opts.prototype) {
callbacks.forEach(function(callback) {
var source = "Document.registerElement::" + callback;
if (opts.prototype.hasOwnProperty(callback)) {
var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);
if (descriptor && descriptor.value) {
descriptor.value = Zone.current.wrap(descriptor.value, source);
_redefineProperty(opts.prototype, callback, descriptor);
} else {
opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
}
} else if (opts.prototype[callback]) {
opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
}
});
}
return _registerElement.apply(document, [ name, opts ]);
};
attachOriginToPatched(document.registerElement, _registerElement);
}
var set = "set";
var clear = "clear";
var blockingMethods = [ "alert", "prompt", "confirm" ];
var _global = typeof window !== "undefined" && window || typeof self !== "undefined" && self || global;
patchTimer(_global, set, clear, "Timeout");
patchTimer(_global, set, clear, "Interval");
patchTimer(_global, set, clear, "Immediate");
patchTimer(_global, "request", "cancel", "AnimationFrame");
patchTimer(_global, "mozRequest", "mozCancel", "AnimationFrame");
patchTimer(_global, "webkitRequest", "webkitCancel", "AnimationFrame");
for (var i = 0; i < blockingMethods.length; i++) {
var name_1 = blockingMethods[i];
patchMethod(_global, name_1, function(delegate, symbol, name) {
return function(s, args) {
return Zone.current.run(delegate, _global, args, name);
};
});
}
eventTargetPatch(_global);
var XMLHttpRequestEventTarget = _global["XMLHttpRequestEventTarget"];
if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {
patchEventTargetMethods(XMLHttpRequestEventTarget.prototype);
}
propertyDescriptorPatch(_global);
patchClass("MutationObserver");
patchClass("WebKitMutationObserver");
patchClass("FileReader");
propertyPatch();
registerElementPatch(_global);
patchXHR(_global);
var XHR_TASK = zoneSymbol("xhrTask");
var XHR_SYNC = zoneSymbol("xhrSync");
var XHR_LISTENER = zoneSymbol("xhrListener");
var XHR_SCHEDULED = zoneSymbol("xhrScheduled");
function patchXHR(window) {
function findPendingTask(target) {
var pendingTask = target[XHR_TASK];
return pendingTask;
}
function scheduleTask(task) {
XMLHttpRequest[XHR_SCHEDULED] = false;
var data = task.data;
var listener = data.target[XHR_LISTENER];
if (listener) {
data.target.removeEventListener("readystatechange", listener);
}
var newListener = data.target[XHR_LISTENER] = function() {
if (data.target.readyState === data.target.DONE) {
if (!data.aborted && XMLHttpRequest[XHR_SCHEDULED] && task.state === "scheduled") {
task.invoke();
}
}
};
data.target.addEventListener("readystatechange", newListener);
var storedTask = data.target[XHR_TASK];
if (!storedTask) {
data.target[XHR_TASK] = task;
}
sendNative.apply(data.target, data.args);
XMLHttpRequest[XHR_SCHEDULED] = true;
return task;
}
function placeholderCallback() {}
function clearTask(task) {
var data = task.data;
data.aborted = true;
return abortNative.apply(data.target, data.args);
}
var openNative = patchMethod(window.XMLHttpRequest.prototype, "open", function() {
return function(self, args) {
self[XHR_SYNC] = args[2] == false;
return openNative.apply(self, args);
};
});
var sendNative = patchMethod(window.XMLHttpRequest.prototype, "send", function() {
return function(self, args) {
var zone = Zone.current;
if (self[XHR_SYNC]) {
return sendNative.apply(self, args);
} else {
var options = {
target: self,
isPeriodic: false,
delay: null,
args: args,
aborted: false
};
return zone.scheduleMacroTask("XMLHttpRequest.send", placeholderCallback, options, scheduleTask, clearTask);
}
};
});
var abortNative = patchMethod(window.XMLHttpRequest.prototype, "abort", function(delegate) {
return function(self, args) {
var task = findPendingTask(self);
if (task && typeof task.type == "string") {
if (task.cancelFn == null || task.data && task.data.aborted) {
return;
}
task.zone.cancelTask(task);
}
};
});
}
if (_global["navigator"] && _global["navigator"].geolocation) {
patchPrototype(_global["navigator"].geolocation, [ "getCurrentPosition", "watchPosition" ]);
}
patchFuncToString();
patchObjectToString();
function findPromiseRejectionHandler(evtName) {
return function(e) {
var eventTasks = findEventTask(_global, evtName);
eventTasks.forEach(function(eventTask) {
var PromiseRejectionEvent = _global["PromiseRejectionEvent"];
if (PromiseRejectionEvent) {
var evt = new PromiseRejectionEvent(evtName, {
promise: e.promise,
reason: e.rejection
});
eventTask.invoke(evt);
}
});
};
}
if (_global["PromiseRejectionEvent"]) {
Zone[zoneSymbol("unhandledPromiseRejectionHandler")] = findPromiseRejectionHandler("unhandledrejection");
Zone[zoneSymbol("rejectionHandledHandler")] = findPromiseRejectionHandler("rejectionhandled");
}
var callAndReturnFirstParam = function(fn) {
return function(self, args) {
fn(self, args);
return self;
};
};
var EE_ADD_LISTENER = "addListener";
var EE_PREPEND_LISTENER = "prependListener";
var EE_REMOVE_LISTENER = "removeListener";
var EE_REMOVE_ALL_LISTENER = "removeAllListeners";
var EE_LISTENERS = "listeners";
var EE_ON = "on";
var zoneAwareAddListener = callAndReturnFirstParam(makeZoneAwareAddListener(EE_ADD_LISTENER, EE_REMOVE_LISTENER, false, true, false));
var zoneAwarePrependListener = callAndReturnFirstParam(makeZoneAwareAddListener(EE_PREPEND_LISTENER, EE_REMOVE_LISTENER, false, true, true));
var zoneAwareRemoveListener = callAndReturnFirstParam(makeZoneAwareRemoveListener(EE_REMOVE_LISTENER, false));
var zoneAwareRemoveAllListeners = callAndReturnFirstParam(makeZoneAwareRemoveAllListeners(EE_REMOVE_ALL_LISTENER));
var zoneAwareListeners = makeZoneAwareListeners(EE_LISTENERS);
function patchEventEmitterMethods(obj) {
if (obj && obj.addListener) {
patchMethod(obj, EE_ADD_LISTENER, function() {
return zoneAwareAddListener;
});
patchMethod(obj, EE_PREPEND_LISTENER, function() {
return zoneAwarePrependListener;
});
patchMethod(obj, EE_REMOVE_LISTENER, function() {
return zoneAwareRemoveListener;
});
patchMethod(obj, EE_REMOVE_ALL_LISTENER, function() {
return zoneAwareRemoveAllListeners;
});
patchMethod(obj, EE_LISTENERS, function() {
return zoneAwareListeners;
});
obj[EE_ON] = obj[EE_ADD_LISTENER];
return true;
} else {
return false;
}
}
var events;
try {
events = __webpack_require__(592);
} catch (err) {}
if (events && events.EventEmitter) {
patchEventEmitterMethods(events.EventEmitter.prototype);
}
var fs;
try {
fs = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "fs"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
} catch (err) {}
var TO_PATCH_MACROTASK_METHODS = [ "access", "appendFile", "chmod", "chown", "close", "exists", "fchmod", "fchown", "fdatasync", "fstat", "fsync", "ftruncate", "futimes", "lchmod", "lchown", "link", "lstat", "mkdir", "mkdtemp", "open", "read", "readdir", "readFile", "readlink", "realpath", "rename", "rmdir", "stat", "symlink", "truncate", "unlink", "utimes", "write", "writeFile" ];
if (fs) {
TO_PATCH_MACROTASK_METHODS.filter(function(name) {
return !!fs[name] && typeof fs[name] === "function";
}).forEach(function(name) {
patchMacroTask(fs, name, function(self, args) {
return {
name: "fs." + name,
args: args,
callbackIndex: args.length > 0 ? args.length - 1 : -1,
target: self
};
});
});
}
var set$1 = "set";
var clear$1 = "clear";
var _global$2 = typeof window === "object" && window || typeof self === "object" && self || global;
var timers = __webpack_require__(593);
patchTimer(timers, set$1, clear$1, "Timeout");
patchTimer(timers, set$1, clear$1, "Interval");
patchTimer(timers, set$1, clear$1, "Immediate");
var shouldPatchGlobalTimers = global.setTimeout !== timers.setTimeout;
if (shouldPatchGlobalTimers) {
patchTimer(_global$2, set$1, clear$1, "Timeout");
patchTimer(_global$2, set$1, clear$1, "Interval");
patchTimer(_global$2, set$1, clear$1, "Immediate");
}
patchProcess();
handleUnhandledPromiseRejection();
patchFuncToString();
patchObjectToString();
var crypto;
try {
crypto = __webpack_require__(595);
} catch (err) {}
if (crypto) {
var methodNames = [ "randomBytes", "pbkdf2" ];
methodNames.forEach(function(name) {
patchMacroTask(crypto, name, function(self, args) {
return {
name: "crypto." + name,
args: args,
callbackIndex: args.length > 0 && typeof args[args.length - 1] === "function" ? args.length - 1 : -1,
target: crypto
};
});
});
}
function patchProcess() {
patchMicroTask(process, "nextTick", function(self, args) {
return {
name: "process.nextTick",
args: args,
callbackIndex: args.length > 0 && typeof args[0] === "function" ? 0 : -1,
target: process
};
});
}
function findProcessPromiseRejectionHandler(evtName) {
return function(e) {
var eventTasks = findEventTask(process, evtName);
eventTasks.forEach(function(eventTask) {
if (evtName === "unhandledRejection") {
eventTask.invoke(e.rejection, e.promise);
} else if (evtName === "rejectionHandled") {
eventTask.invoke(e.promise);
}
});
};
}
function handleUnhandledPromiseRejection() {
Zone[zoneSymbol("unhandledPromiseRejectionHandler")] = findProcessPromiseRejectionHandler("unhandledRejection");
Zone[zoneSymbol("rejectionHandledHandler")] = findProcessPromiseRejectionHandler("rejectionHandled");
}
});
}, function(module, exports, __webpack_require__) {
!function(e, t) {
true ? t() : "function" == typeof define && define.amd ? define(t) : t();
}(this, function() {
"use strict";
function e(e, t) {
for (var n = e.length - 1; n >= 0; n--) "function" == typeof e[n] && (e[n] = Zone.current.wrap(e[n], t + "_" + n));
return e;
}
function t(t, n) {
for (var r = t.constructor.name, o = function(o) {
var a = n[o], i = t[a];
i && (t[a] = function(t) {
var n = function() {
return t.apply(this, e(arguments, r + "." + a));
};
return d(n, t), n;
}(i));
}, a = 0; a < n.length; a++) o(a);
}
function n(e, t) {
var n = Object.getOwnPropertyDescriptor(e, t) || {
enumerable: !0,
configurable: !0
};
if (n.configurable) {
delete n.writable, delete n.value;
var r = n.get, o = t.substr(2), a = P("_" + t);
n.set = function(t) {
var n = this;
if (n || e !== C || (n = C), n) {
var r = n[a];
if (r && n.removeEventListener(o, r), "function" == typeof t) {
var i = function(e) {
var n = t.apply(this, arguments);
return void 0 == n || n || e.preventDefault(), n;
};
n[a] = i, n.addEventListener(o, i, !1);
} else n[a] = null;
}
}, n.get = function() {
var o = this;
if (o || e !== C || (o = C), !o) return null;
if (o.hasOwnProperty(a)) return o[a];
if (r) {
var i = r.apply(this);
if (i) return n.set.apply(this, [ i ]), "function" == typeof o.removeAttribute && o.removeAttribute(t), 
i;
}
return null;
}, Object.defineProperty(e, t, n);
}
}
function r(e, t) {
if (t) for (var r = 0; r < t.length; r++) n(e, "on" + t[r]); else {
var o = [];
for (var a in e) "on" == a.substr(0, 2) && o.push(a);
for (var i = 0; i < o.length; i++) n(e, o[i]);
}
}
function o(e, t) {
var n = "boolean" == typeof e ? e : "object" == typeof e && (e && e.capture), r = "boolean" == typeof t ? t : "object" == typeof t && (t && t.capture);
return !!n == !!r;
}
function a(e, t, n, r, a) {
var i = e[H];
if (i) for (var s = 0; s < i.length; s++) {
var c = i[s], u = c.data, l = u.handler;
if ((u.handler === t || l.listener === t) && o(u.options, r) && u.eventName === n) return a && i.splice(s, 1), 
c;
}
return null;
}
function i(e, t, n) {
var r = e[H];
r || (r = e[H] = []), n ? r.unshift(t) : r.push(t);
}
function s(e, t, n, r, o, s) {
function c(e) {
var t = e.data;
return i(t.target, e, o), t.invokeAddFunc(l, e);
}
function u(e) {
var t = e.data;
return a(t.target, e.invoke, t.eventName, t.options, !0), t.invokeRemoveFunc(h, e);
}
void 0 === n && (n = !0), void 0 === r && (r = !1), void 0 === o && (o = !1), void 0 === s && (s = q);
var l = P(e), h = P(t), f = !n && void 0;
return function(t, n) {
var o = s(t, n);
o.options = o.options || f;
var i = null;
"function" == typeof o.handler ? i = o.handler : o.handler && o.handler.handleEvent && (i = function(e) {
return o.handler.handleEvent(e);
});
var h = !1;
try {
h = o.handler && "[object FunctionWrapper]" === o.handler.toString();
} catch (p) {
return o.crossContext = !0, o.invokeAddFunc(l, o.handler);
}
if (!i || h) return o.invokeAddFunc(l, o.handler);
if (!r) {
var d = a(o.target, o.handler, o.eventName, o.options, !1);
if (d) return o.invokeAddFunc(l, d);
}
var v = Zone.current, k = o.target.constructor.name + "." + e + ":" + o.eventName;
v.scheduleEventTask(k, i, o, c, u);
};
}
function c(e, t, n) {
void 0 === t && (t = !0), void 0 === n && (n = q);
var r = P(e), o = !t && void 0;
return function(e, t) {
var i = n(e, t);
i.options = i.options || o;
var s = null;
"function" == typeof i.handler ? s = i.handler : i.handler && i.handler.handleEvent && (s = function(e) {
return i.handler.handleEvent(e);
});
var c = !1;
try {
c = i.handler && "[object FunctionWrapper]" === i.handler.toString();
} catch (u) {
return i.crossContext = !0, i.invokeRemoveFunc(r, i.handler);
}
if (!s || c) return i.invokeRemoveFunc(r, i.handler);
var l = a(i.target, i.handler, i.eventName, i.options, !0);
l ? l.zone.cancelTask(l) : i.invokeRemoveFunc(r, i.handler);
};
}
function u(e, t, n, r) {
return void 0 === t && (t = R), void 0 === n && (n = x), void 0 === r && (r = q), 
!(!e || !e[t]) && (f(e, t, function() {
return s(t, n, !0, !1, !1, r);
}), f(e, n, function() {
return c(n, !0, r);
}), !0);
}
function l(t) {
var n = C[t];
if (n) {
C[P(t)] = n, C[t] = function() {
var r = e(arguments, t);
switch (r.length) {
case 0:
this[A] = new n();
break;

case 1:
this[A] = new n(r[0]);
break;

case 2:
this[A] = new n(r[0], r[1]);
break;

case 3:
this[A] = new n(r[0], r[1], r[2]);
break;

case 4:
this[A] = new n(r[0], r[1], r[2], r[3]);
break;

default:
throw new Error("Arg list too long.");
}
}, d(C[t], n);
var r, o = new n(function() {});
for (r in o) "XMLHttpRequest" === t && "responseBlob" === r || !function(e) {
"function" == typeof o[e] ? C[t].prototype[e] = function() {
return this[A][e].apply(this[A], arguments);
} : Object.defineProperty(C[t].prototype, e, {
set: function(n) {
"function" == typeof n ? (this[A][e] = Zone.current.wrap(n, t + "." + e), d(this[A][e], n)) : this[A][e] = n;
},
get: function() {
return this[A][e];
}
});
}(r);
for (r in n) "prototype" !== r && n.hasOwnProperty(r) && (C[t][r] = n[r]);
}
}
function h(e, t) {
try {
return Function("f", "return function " + e + "(){return f(this, arguments)}")(t);
} catch (n) {
return function() {
return t(this, arguments);
};
}
}
function f(e, t, n) {
for (var r = e; r && Object.getOwnPropertyNames(r).indexOf(t) === -1; ) r = Object.getPrototypeOf(r);
!r && e[t] && (r = e);
var o, a = P(t);
return r && !(o = r[a]) && (o = r[a] = r[t], r[t] = h(t, n(o, a, t)), d(r[t], o)), 
o;
}
function p(e, t) {
var n = e[P("eventTasks")], r = [];
if (n) for (var o = 0; o < n.length; o++) {
var a = n[o], i = a.data, s = i && i.eventName;
s === t && r.push(a);
}
return r;
}
function d(e, t) {
e[P("OriginalDelegate")] = t;
}
function v(e, t, n, r) {
function o(t) {
function n() {
try {
t.invoke.apply(this, arguments);
} finally {
delete c[r.handleId];
}
}
var r = t.data;
return r.args[0] = n, r.handleId = i.apply(e, r.args), c[r.handleId] = t, t;
}
function a(e) {
return delete c[e.data.handleId], s(e.data.handleId);
}
var i = null, s = null;
t += r, n += r;
var c = {};
i = f(e, t, function(n) {
return function(i, s) {
if ("function" == typeof s[0]) {
var c = Zone.current, u = {
handleId: null,
isPeriodic: "Interval" === r,
delay: "Timeout" === r || "Interval" === r ? s[1] || 0 : null,
args: s
}, l = c.scheduleMacroTask(t, s[0], u, o, a);
if (!l) return l;
var h = l.data.handleId;
return h && h.ref && h.unref && "function" == typeof h.ref && "function" == typeof h.unref && (l.ref = h.ref.bind(h), 
l.unref = h.unref.bind(h)), l;
}
return n.apply(e, s);
};
}), s = f(e, n, function(t) {
return function(n, r) {
var o = "number" == typeof r[0] ? c[r[0]] : r[0];
o && "string" == typeof o.type ? "notScheduled" !== o.state && (o.cancelFn && o.data.isPeriodic || 0 === o.runCount) && o.zone.cancelTask(o) : t.apply(e, r);
};
});
}
function k() {
var e = Function.prototype.toString, t = "undefined" != typeof window && window || "undefined" != typeof self && self || global;
Function.prototype.toString = function() {
if ("function" == typeof this) {
if (this[P("OriginalDelegate")]) return e.apply(this[P("OriginalDelegate")], arguments);
if (this === Promise) {
var n = t[P("Promise")];
if (n) return e.apply(n, arguments);
}
if (this === Error) {
var r = t[P("Error")];
if (r) return e.apply(r, arguments);
}
}
return e.apply(this, arguments);
};
}
function y() {
var e = Object.prototype.toString;
Object.prototype.toString = function() {
return this instanceof Promise ? "[object Promise]" : e.apply(this, arguments);
};
}
function g() {
Object.defineProperty = function(e, t, n) {
if (m(e, t)) throw new TypeError("Cannot assign to read only property '" + t + "' of " + e);
var r = n.configurable;
return "prototype" !== t && (n = b(e, t, n)), _(e, t, n, r);
}, Object.defineProperties = function(e, t) {
return Object.keys(t).forEach(function(n) {
Object.defineProperty(e, n, t[n]);
}), e;
}, Object.create = function(e, t) {
return "object" != typeof t || Object.isFrozen(t) || Object.keys(t).forEach(function(n) {
t[n] = b(e, n, t[n]);
}), X(e, t);
}, Object.getOwnPropertyDescriptor = function(e, t) {
var n = B(e, t);
return m(e, t) && (n.configurable = !1), n;
};
}
function T(e, t, n) {
var r = n.configurable;
return n = b(e, t, n), _(e, t, n, r);
}
function m(e, t) {
return e && e[W] && e[W][t];
}
function b(e, t, n) {
return n.configurable = !0, n.configurable || (e[W] || N(e, W, {
writable: !0,
value: {}
}), e[W][t] = !0), n;
}
function _(e, t, n, r) {
try {
return N(e, t, n);
} catch (o) {
if (!n.configurable) throw o;
"undefined" == typeof r ? delete n.configurable : n.configurable = r;
try {
return N(e, t, n);
} catch (o) {
var a = null;
try {
a = JSON.stringify(n);
} catch (o) {
a = a.toString();
}
console.log("Attempting to configure '" + t + "' with descriptor '" + a + "' on object '" + e + "' and got error, giving up: " + o);
}
}
}
function w(e) {
var t = [], n = e.wtf;
n ? t = G.split(",").map(function(e) {
return "HTML" + e + "Element";
}).concat(U) : e[V] ? t.push(V) : t = U;
for (var r = 0; r < t.length; r++) {
var o = e[t[r]];
u(o && o.prototype);
}
}
function E(e) {
var t = e.WebSocket;
e.EventTarget || u(t.prototype), e.WebSocket = function(e, n) {
var o, a = arguments.length > 1 ? new t(e, n) : new t(e), i = Object.getOwnPropertyDescriptor(a, "onmessage");
return i && i.configurable === !1 ? (o = Object.create(a), [ "addEventListener", "removeEventListener", "send", "close" ].forEach(function(e) {
o[e] = function() {
return a[e].apply(a, arguments);
};
})) : o = a, r(o, [ "close", "error", "message", "open" ]), o;
};
for (var n in t) e.WebSocket[n] = t[n];
}
function S(e) {
if (!I || M) {
var t = "undefined" != typeof WebSocket;
O() ? (F && (r(window, K.concat([ "resize" ])), r(Document.prototype, K), "undefined" != typeof window.SVGElement && r(window.SVGElement.prototype, K), 
r(HTMLElement.prototype, K)), r(XMLHttpRequest.prototype, null), "undefined" != typeof IDBIndex && (r(IDBIndex.prototype, null), 
r(IDBRequest.prototype, null), r(IDBOpenDBRequest.prototype, null), r(IDBDatabase.prototype, null), 
r(IDBTransaction.prototype, null), r(IDBCursor.prototype, null)), t && r(WebSocket.prototype, null)) : (D(), 
l("XMLHttpRequest"), t && E(e));
}
}
function O() {
if ((F || M) && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, "onclick") && "undefined" != typeof Element) {
var e = Object.getOwnPropertyDescriptor(Element.prototype, "onclick");
if (e && !e.configurable) return !1;
}
var t = Object.getOwnPropertyDescriptor(XMLHttpRequest.prototype, "onreadystatechange");
if (t) {
Object.defineProperty(XMLHttpRequest.prototype, "onreadystatechange", {
enumerable: !0,
configurable: !0,
get: function() {
return !0;
}
});
var n = new XMLHttpRequest(), r = !!n.onreadystatechange;
return Object.defineProperty(XMLHttpRequest.prototype, "onreadystatechange", t || {}), 
r;
}
Object.defineProperty(XMLHttpRequest.prototype, "onreadystatechange", {
enumerable: !0,
configurable: !0,
get: function() {
return this[P("fakeonreadystatechange")];
},
set: function(e) {
this[P("fakeonreadystatechange")] = e;
}
});
var n = new XMLHttpRequest(), o = function() {};
n.onreadystatechange = o;
var r = n[P("fakeonreadystatechange")] === o;
return n.onreadystatechange = null, r;
}
function D() {
for (var e = function(e) {
var t = K[e], n = "on" + t;
self.addEventListener(t, function(e) {
var t, r, o = e.target;
for (r = o ? o.constructor.name + "." + n : "unknown." + n; o; ) o[n] && !o[n][J] && (t = Zone.current.wrap(o[n], r), 
t[J] = o[n], o[n] = t), o = o.parentElement;
}, !0);
}, t = 0; t < K.length; t++) e(t);
}
function Z(e) {
if ((F || M) && "registerElement" in e.document) {
var t = document.registerElement, n = [ "createdCallback", "attachedCallback", "detachedCallback", "attributeChangedCallback" ];
document.registerElement = function(e, r) {
return r && r.prototype && n.forEach(function(e) {
var t = "Document.registerElement::" + e;
if (r.prototype.hasOwnProperty(e)) {
var n = Object.getOwnPropertyDescriptor(r.prototype, e);
n && n.value ? (n.value = Zone.current.wrap(n.value, t), T(r.prototype, e, n)) : r.prototype[e] = Zone.current.wrap(r.prototype[e], t);
} else r.prototype[e] && (r.prototype[e] = Zone.current.wrap(r.prototype[e], t));
}), t.apply(document, [ e, r ]);
}, d(document.registerElement, t);
}
}
function z(e) {
function t(e) {
var t = e[oe];
return t;
}
function n(e) {
XMLHttpRequest[se] = !1;
var t = e.data, n = t.target[ie];
n && t.target.removeEventListener("readystatechange", n);
var r = t.target[ie] = function() {
t.target.readyState === t.target.DONE && !t.aborted && XMLHttpRequest[se] && "scheduled" === e.state && e.invoke();
};
t.target.addEventListener("readystatechange", r);
var o = t.target[oe];
return o || (t.target[oe] = e), i.apply(t.target, t.args), XMLHttpRequest[se] = !0, 
e;
}
function r() {}
function o(e) {
var t = e.data;
return t.aborted = !0, s.apply(t.target, t.args);
}
var a = f(e.XMLHttpRequest.prototype, "open", function() {
return function(e, t) {
return e[ae] = 0 == t[2], a.apply(e, t);
};
}), i = f(e.XMLHttpRequest.prototype, "send", function() {
return function(e, t) {
var a = Zone.current;
if (e[ae]) return i.apply(e, t);
var s = {
target: e,
isPeriodic: !1,
delay: null,
args: t,
aborted: !1
};
return a.scheduleMacroTask("XMLHttpRequest.send", r, s, n, o);
};
}), s = f(e.XMLHttpRequest.prototype, "abort", function(e) {
return function(e, n) {
var r = t(e);
if (r && "string" == typeof r.type) {
if (null == r.cancelFn || r.data && r.data.aborted) return;
r.zone.cancelTask(r);
}
};
});
}
function j(e) {
return function(t) {
var n = p(ee, e);
n.forEach(function(n) {
var r = ee.PromiseRejectionEvent;
if (r) {
var o = new r(e, {
promise: t.promise,
reason: t.rejection
});
n.invoke(o);
}
});
};
}
var P = (function(e) {
function t(e) {
return "__zone_symbol__" + e;
}
function n() {
0 === q && 0 === H.length && (e[L] ? e[L].resolve(0)[I](i) : e[C](i, 0));
}
function r(e) {
n(), H.push(e);
}
function o(e) {
if (!D[t("ignoreConsoleErrorUncaughtError")]) {
var n = e && e.rejection;
n && console.error("Unhandled Promise rejection:", n instanceof Error ? n.message : n, "; Zone:", e.zone.name, "; Task:", e.task && e.task.source, "; Value:", n, n instanceof Error ? n.stack : void 0), 
console.error(e);
}
}
function a(e) {
o(e);
try {
var n = D[t("unhandledPromiseRejectionHandler")];
n && "function" == typeof n && n.apply(this, [ e ]);
} catch (r) {}
}
function i() {
if (!R) {
for (R = !0; H.length; ) {
var e = H;
H = [];
for (var t = 0; t < e.length; t++) {
var n = e[t];
try {
n.zone.runTask(n, null, null);
} catch (r) {
o(r);
}
}
}
for (;x.length; ) for (var i = function() {
var e = x.shift();
try {
e.zone.runGuarded(function() {
throw e;
});
} catch (t) {
a(t);
}
}; x.length; ) i();
R = !1;
}
}
function s(e) {
return e && e.then;
}
function c(e) {
return e;
}
function u(e) {
return K.reject(e);
}
function l(e, t) {
return function(n) {
try {
h(e, t, n);
} catch (r) {
h(e, !1, r);
}
};
}
function h(e, r, o) {
var a = V();
if (e === o) throw new TypeError("Promise resolved with itself");
if (e[A] === X) {
var i = null;
try {
"object" != typeof o && "function" != typeof o || (i = o && o.then);
} catch (s) {
return a(function() {
h(e, !1, s);
})(), e;
}
if (r !== G && o instanceof K && o.hasOwnProperty(A) && o.hasOwnProperty(N) && o[A] !== X) f(o), 
h(e, o[A], o[N]); else if (r !== G && "function" == typeof i) try {
i.apply(o, [ a(l(e, r)), a(l(e, !1)) ]);
} catch (s) {
a(function() {
h(e, !1, s);
})();
} else {
e[A] = r;
var c = e[N];
e[N] = o, r === G && o instanceof Error && (o[t("currentTask")] = D.currentTask);
for (var u = 0; u < c.length; ) p(e, c[u++], c[u++], c[u++], c[u++]);
if (0 == c.length && r == G) {
e[A] = U;
try {
throw new Error("Uncaught (in promise): " + o + (o && o.stack ? "\n" + o.stack : ""));
} catch (s) {
var d = s;
d.rejection = o, d.promise = e, d.zone = D.current, d.task = D.currentTask, x.push(d), 
n();
}
}
}
}
return e;
}
function f(e) {
if (e[A] === U) {
try {
var n = D[t("rejectionHandledHandler")];
n && "function" == typeof n && n.apply(this, [ {
rejection: e[N],
promise: e
} ]);
} catch (r) {}
e[A] = G;
for (var o = 0; o < x.length; o++) e === x[o].promise && x.splice(o, 1);
}
}
function p(e, t, n, r, o) {
f(e);
var a = e[A] ? "function" == typeof r ? r : c : "function" == typeof o ? o : u;
t.scheduleMicroTask(B, function() {
try {
h(n, !0, t.run(a, void 0, [ e[N] ]));
} catch (r) {
h(n, !1, r);
}
});
}
function d(e) {
var t = e.prototype, n = t.then;
t[I] = n, e.prototype.then = function(e, t) {
var r = this, o = new K(function(e, t) {
n.call(r, e, t);
});
return o.then(e, t);
}, e[Q] = !0;
}
function v(e) {
return function() {
var t = e.apply(this, arguments);
if (t instanceof K) return t;
var n = t.constructor;
return n[Q] || d(n), t;
};
}
function k() {
var e = this, t = ne.apply(this, arguments), n = t.originalStack = t.stack;
if (k[oe] && n) {
for (var r = n.split("\n"), o = F, a = 0; r[a] !== $ && r[a] !== ee && a < r.length; ) a++;
for (;a < r.length && o; a++) {
var i = r[a];
if (i.trim()) switch (re[i]) {
case 0:
r.splice(a, 1), a--;
break;

case 1:
o = o.parent ? o.parent : null, r.splice(a, 1), a--;
break;

default:
r[a] += " [" + o.zone.name + "]";
}
}
try {
t.stack = t.zoneAwareStack = r.join("\n");
} catch (s) {}
}
return this instanceof ne && this.constructor != ne ? (Object.keys(t).concat("stack", "message").forEach(function(n) {
if (void 0 !== t[n]) try {
e[n] = t[n];
} catch (r) {}
}), this) : t;
}
if (e.Zone) throw new Error("Zone already loaded.");
var y = {
name: "NO ZONE"
}, g = "notScheduled", T = "scheduling", m = "scheduled", b = "running", _ = "canceling", w = "unknown", E = "microTask", S = "macroTask", O = "eventTask", D = function() {
function t(e, t) {
this._properties = null, this._parent = e, this._name = t ? t.name || "unnamed" : "<root>", 
this._properties = t && t.properties || {}, this._zoneDelegate = new z(this, this._parent && this._parent._zoneDelegate, t);
}
return t.assertZonePatched = function() {
if (e.Promise !== K) throw new Error("Zone.js has detected that ZoneAwarePromise `(window|global).Promise` has been overwritten.\nMost likely cause is that a Promise polyfill has been loaded after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. If you must load one, do so before loading zone.js.)");
}, Object.defineProperty(t, "root", {
get: function() {
for (var e = t.current; e.parent; ) e = e.parent;
return e;
},
enumerable: !0,
configurable: !0
}), Object.defineProperty(t, "current", {
get: function() {
return F.zone;
},
enumerable: !0,
configurable: !0
}), Object.defineProperty(t, "currentTask", {
get: function() {
return M;
},
enumerable: !0,
configurable: !0
}), Object.defineProperty(t.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: !0,
configurable: !0
}), Object.defineProperty(t.prototype, "name", {
get: function() {
return this._name;
},
enumerable: !0,
configurable: !0
}), t.prototype.get = function(e) {
var t = this.getZoneWith(e);
if (t) return t._properties[e];
}, t.prototype.getZoneWith = function(e) {
for (var t = this; t; ) {
if (t._properties.hasOwnProperty(e)) return t;
t = t._parent;
}
return null;
}, t.prototype.fork = function(e) {
if (!e) throw new Error("ZoneSpec required!");
return this._zoneDelegate.fork(this, e);
}, t.prototype.wrap = function(e, t) {
if ("function" != typeof e) throw new Error("Expecting function got: " + e);
var n = this._zoneDelegate.intercept(this, e, t), r = this;
return function() {
return r.runGuarded(n, this, arguments, t);
};
}, t.prototype.run = function(e, t, n, r) {
void 0 === t && (t = void 0), void 0 === n && (n = null), void 0 === r && (r = null), 
F = new P(F, this);
try {
return this._zoneDelegate.invoke(this, e, t, n, r);
} finally {
F = F.parent;
}
}, t.prototype.runGuarded = function(e, t, n, r) {
void 0 === t && (t = null), void 0 === n && (n = null), void 0 === r && (r = null), 
F = new P(F, this);
try {
try {
return this._zoneDelegate.invoke(this, e, t, n, r);
} catch (o) {
if (this._zoneDelegate.handleError(this, o)) throw o;
}
} finally {
F = F.parent;
}
}, t.prototype.runTask = function(e, t, n) {
if (e.zone != this) throw new Error("A task can only be run in the zone of creation! (Creation: " + (e.zone || y).name + "; Execution: " + this.name + ")");
var r = e.state != b;
r && e._transitionTo(b, m), e.runCount++;
var o = M;
M = e, F = new P(F, this);
try {
e.type == S && e.data && !e.data.isPeriodic && (e.cancelFn = null);
try {
return this._zoneDelegate.invokeTask(this, e, t, n);
} catch (a) {
if (this._zoneDelegate.handleError(this, a)) throw a;
}
} finally {
e.state !== g && e.state !== w && (e.type == O || e.data && e.data.isPeriodic ? r && e._transitionTo(m, b) : (e.runCount = 0, 
this._updateTaskCount(e, -1), r && e._transitionTo(g, b, g))), F = F.parent, M = o;
}
}, t.prototype.scheduleTask = function(e) {
if (e.zone && e.zone !== this) for (var t = this; t; ) {
if (t === e.zone) throw Error("can not reschedule task to " + this.name + " which is descendants of the original zone " + e.zone.name);
t = t.parent;
}
e._transitionTo(T, g);
var n = [];
e._zoneDelegates = n, e._zone = this;
try {
e = this._zoneDelegate.scheduleTask(this, e);
} catch (r) {
throw e._transitionTo(w, T, g), this._zoneDelegate.handleError(this, r), r;
}
return e._zoneDelegates === n && this._updateTaskCount(e, 1), e.state == T && e._transitionTo(m, T), 
e;
}, t.prototype.scheduleMicroTask = function(e, t, n, r) {
return this.scheduleTask(new j(E, e, t, n, r, null));
}, t.prototype.scheduleMacroTask = function(e, t, n, r, o) {
return this.scheduleTask(new j(S, e, t, n, r, o));
}, t.prototype.scheduleEventTask = function(e, t, n, r, o) {
return this.scheduleTask(new j(O, e, t, n, r, o));
}, t.prototype.cancelTask = function(e) {
if (e.zone != this) throw new Error("A task can only be cancelled in the zone of creation! (Creation: " + (e.zone || y).name + "; Execution: " + this.name + ")");
e._transitionTo(_, m, b);
try {
this._zoneDelegate.cancelTask(this, e);
} catch (t) {
throw e._transitionTo(w, _), this._zoneDelegate.handleError(this, t), t;
}
return this._updateTaskCount(e, -1), e._transitionTo(g, _), e.runCount = 0, e;
}, t.prototype._updateTaskCount = function(e, t) {
var n = e._zoneDelegates;
t == -1 && (e._zoneDelegates = null);
for (var r = 0; r < n.length; r++) n[r]._updateTaskCount(e.type, t);
}, t;
}();
D.__symbol__ = t;
var Z = {
name: "",
onHasTask: function(e, t, n, r) {
return e.hasTask(n, r);
},
onScheduleTask: function(e, t, n, r) {
return e.scheduleTask(n, r);
},
onInvokeTask: function(e, t, n, r, o, a) {
return e.invokeTask(n, r, o, a);
},
onCancelTask: function(e, t, n, r) {
return e.cancelTask(n, r);
}
}, z = function() {
function e(e, t, n) {
this._taskCounts = {
microTask: 0,
macroTask: 0,
eventTask: 0
}, this.zone = e, this._parentDelegate = t, this._forkZS = n && (n && n.onFork ? n : t._forkZS), 
this._forkDlgt = n && (n.onFork ? t : t._forkDlgt), this._forkCurrZone = n && (n.onFork ? this.zone : t.zone), 
this._interceptZS = n && (n.onIntercept ? n : t._interceptZS), this._interceptDlgt = n && (n.onIntercept ? t : t._interceptDlgt), 
this._interceptCurrZone = n && (n.onIntercept ? this.zone : t.zone), this._invokeZS = n && (n.onInvoke ? n : t._invokeZS), 
this._invokeDlgt = n && (n.onInvoke ? t : t._invokeDlgt), this._invokeCurrZone = n && (n.onInvoke ? this.zone : t.zone), 
this._handleErrorZS = n && (n.onHandleError ? n : t._handleErrorZS), this._handleErrorDlgt = n && (n.onHandleError ? t : t._handleErrorDlgt), 
this._handleErrorCurrZone = n && (n.onHandleError ? this.zone : t.zone), this._scheduleTaskZS = n && (n.onScheduleTask ? n : t._scheduleTaskZS), 
this._scheduleTaskDlgt = n && (n.onScheduleTask ? t : t._scheduleTaskDlgt), this._scheduleTaskCurrZone = n && (n.onScheduleTask ? this.zone : t.zone), 
this._invokeTaskZS = n && (n.onInvokeTask ? n : t._invokeTaskZS), this._invokeTaskDlgt = n && (n.onInvokeTask ? t : t._invokeTaskDlgt), 
this._invokeTaskCurrZone = n && (n.onInvokeTask ? this.zone : t.zone), this._cancelTaskZS = n && (n.onCancelTask ? n : t._cancelTaskZS), 
this._cancelTaskDlgt = n && (n.onCancelTask ? t : t._cancelTaskDlgt), this._cancelTaskCurrZone = n && (n.onCancelTask ? this.zone : t.zone), 
this._hasTaskZS = null, this._hasTaskDlgt = null, this._hasTaskDlgtOwner = null, 
this._hasTaskCurrZone = null;
var r = n && n.onHasTask, o = t && t._hasTaskZS;
(r || o) && (this._hasTaskZS = r ? n : Z, this._hasTaskDlgt = t, this._hasTaskDlgtOwner = this, 
this._hasTaskCurrZone = e, n.onScheduleTask || (this._scheduleTaskZS = Z, this._scheduleTaskDlgt = t, 
this._scheduleTaskCurrZone = this.zone), n.onInvokeTask || (this._invokeTaskZS = Z, 
this._invokeTaskDlgt = t, this._invokeTaskCurrZone = this.zone), n.onCancelTask || (this._cancelTaskZS = Z, 
this._cancelTaskDlgt = t, this._cancelTaskCurrZone = this.zone));
}
return e.prototype.fork = function(e, t) {
return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, e, t) : new D(e, t);
}, e.prototype.intercept = function(e, t, n) {
return this._interceptZS ? this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, e, t, n) : t;
}, e.prototype.invoke = function(e, t, n, r, o) {
return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, e, t, n, r, o) : t.apply(n, r);
}, e.prototype.handleError = function(e, t) {
return !this._handleErrorZS || this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, e, t);
}, e.prototype.scheduleTask = function(e, t) {
var n = t;
if (this._scheduleTaskZS) this._hasTaskZS && n._zoneDelegates.push(this._hasTaskDlgtOwner), 
n = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, e, t), 
n || (n = t); else if (t.scheduleFn) t.scheduleFn(t); else {
if (t.type != E) throw new Error("Task is missing scheduleFn.");
r(t);
}
return n;
}, e.prototype.invokeTask = function(e, t, n, r) {
return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, e, t, n, r) : t.callback.apply(n, r);
}, e.prototype.cancelTask = function(e, t) {
var n;
if (this._cancelTaskZS) n = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, e, t); else {
if (!t.cancelFn) throw Error("Task is not cancelable");
n = t.cancelFn(t);
}
return n;
}, e.prototype.hasTask = function(e, t) {
try {
return this._hasTaskZS && this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, e, t);
} catch (n) {
this.handleError(e, n);
}
}, e.prototype._updateTaskCount = function(e, t) {
var n = this._taskCounts, r = n[e], o = n[e] = r + t;
if (o < 0) throw new Error("More tasks executed then were scheduled.");
if (0 == r || 0 == o) {
var a = {
microTask: n.microTask > 0,
macroTask: n.macroTask > 0,
eventTask: n.eventTask > 0,
change: e
};
this.hasTask(this.zone, a);
}
}, e;
}(), j = function() {
function e(e, t, n, r, o, a) {
this._zone = null, this.runCount = 0, this._zoneDelegates = null, this._state = "notScheduled", 
this.type = e, this.source = t, this.data = r, this.scheduleFn = o, this.cancelFn = a, 
this.callback = n;
var s = this;
this.invoke = function() {
q++;
try {
return s.runCount++, s.zone.runTask(s, this, arguments);
} finally {
1 == q && i(), q--;
}
};
}
return Object.defineProperty(e.prototype, "zone", {
get: function() {
return this._zone;
},
enumerable: !0,
configurable: !0
}), Object.defineProperty(e.prototype, "state", {
get: function() {
return this._state;
},
enumerable: !0,
configurable: !0
}), e.prototype.cancelScheduleRequest = function() {
this._transitionTo(g, T);
}, e.prototype._transitionTo = function(e, t, n) {
if (this._state !== t && this._state !== n) throw new Error(this.type + " '" + this.source + "': can not transition to '" + e + "', expecting state '" + t + "'" + (n ? " or '" + n + "'" : "") + ", was '" + this._state + "'.");
this._state = e, e == g && (this._zoneDelegates = null);
}, e.prototype.toString = function() {
return this.data && "undefined" != typeof this.data.handleId ? this.data.handleId : Object.prototype.toString.call(this);
}, e.prototype.toJSON = function() {
return {
type: this.type,
state: this.state,
source: this.source,
zone: this.zone.name,
invoke: this.invoke,
scheduleFn: this.scheduleFn,
cancelFn: this.cancelFn,
runCount: this.runCount,
callback: this.callback
};
}, e;
}(), P = function() {
function e(e, t) {
this.parent = e, this.zone = t;
}
return e;
}(), C = t("setTimeout"), L = t("Promise"), I = t("then"), F = new P(null, new D(null, null)), M = null, H = [], R = !1, x = [], q = 0, A = t("state"), N = t("value"), B = "Promise.then", X = null, W = !0, G = !1, U = 0, V = function() {
var e = !1;
return function(t) {
return function() {
e || (e = !0, t.apply(null, arguments));
};
};
}, K = function() {
function e(t) {
var n = this;
if (!(n instanceof e)) throw new Error("Must be an instanceof Promise.");
n[A] = X, n[N] = [];
try {
t && t(l(n, W), l(n, G));
} catch (r) {
h(n, !1, r);
}
}
return e.toString = function() {
return "function ZoneAwarePromise() { [native code] }";
}, e.resolve = function(e) {
return h(new this(null), W, e);
}, e.reject = function(e) {
return h(new this(null), G, e);
}, e.race = function(e) {
function t(e) {
a && (a = r(e));
}
function n(e) {
a && (a = o(e));
}
for (var r, o, a = new this(function(e, t) {
n = [ e, t ], r = n[0], o = n[1];
var n;
}), i = 0, c = e; i < c.length; i++) {
var u = c[i];
s(u) || (u = this.resolve(u)), u.then(t, n);
}
return a;
}, e.all = function(e) {
for (var t, n, r = new this(function(e, r) {
t = e, n = r;
}), o = 0, a = [], i = 0, c = e; i < c.length; i++) {
var u = c[i];
s(u) || (u = this.resolve(u)), u.then(function(e) {
return function(n) {
a[e] = n, o--, o || t(a);
};
}(o), n), o++;
}
return o || t(a), r;
}, e.prototype.then = function(e, t) {
var n = new this.constructor(null), r = D.current;
return this[A] == X ? this[N].push(r, n, e, t) : p(this, r, n, e, t), n;
}, e.prototype["catch"] = function(e) {
return this.then(null, e);
}, e;
}();
K.resolve = K.resolve, K.reject = K.reject, K.race = K.race, K.all = K.all;
var J = e[L] = e.Promise;
e.Promise = K;
var Q = t("thenPatched");
if (J) {
d(J);
var Y = e.fetch;
"function" == typeof Y && (e.fetch = v(Y));
}
Promise[D.__symbol__("uncaughtPromiseErrors")] = x;
var $, ee, te = D.__symbol__("blacklistedStackFrames"), ne = e[t("Error")] = e.Error, re = {};
e.Error = k;
var oe = "stackRewrite";
k.prototype = ne.prototype, k[te] = re, k[oe] = !1;
var ae = [ "stackTraceLimit", "captureStackTrace", "prepareStackTrace" ], ie = Object.keys(ne);
ie && ie.forEach(function(e) {
0 === ae.filter(function(t) {
return t === e;
}).length && Object.defineProperty(k, e, {
get: function() {
return ne[e];
},
set: function(t) {
ne[e] = t;
}
});
}), ne.hasOwnProperty("stackTraceLimit") && (ne.stackTraceLimit = Math.max(ne.stackTraceLimit, 15), 
Object.defineProperty(k, "stackTraceLimit", {
get: function() {
return ne.stackTraceLimit;
},
set: function(e) {
return ne.stackTraceLimit = e;
}
})), ne.hasOwnProperty("captureStackTrace") && Object.defineProperty(k, "captureStackTrace", {
value: function(e, t) {
ne.captureStackTrace(e, t);
}
}), Object.defineProperty(k, "prepareStackTrace", {
get: function() {
return ne.prepareStackTrace;
},
set: function(e) {
return e && "function" == typeof e ? ne.prepareStackTrace = function(t, n) {
if (n) for (var r = 0; r < n.length; r++) {
var o = n[r];
if ("zoneCaptureStackTrace" === o.getFunctionName()) {
n.splice(r, 1);
break;
}
}
return e.apply(this, [ t, n ]);
} : ne.prepareStackTrace = e;
}
});
var se = D.current.fork({
name: "detect",
onHandleError: function(e, t, n, r) {
if (r.originalStack && Error === k) for (var o = r.originalStack.split(/\n/), a = !1, i = !1, s = !1; o.length; ) {
var c = o.shift();
if (/:\d+:\d+/.test(c)) {
var u = c.split("(")[0].split("@")[0], l = 1;
if (u.indexOf("ZoneAwareError") !== -1 && ($ = c, ee = c.replace("Error.", ""), 
re[ee] = 0), u.indexOf("runGuarded") !== -1 ? i = !0 : u.indexOf("runTask") !== -1 ? s = !0 : u.indexOf("run") !== -1 ? a = !0 : l = 0, 
re[c] = l, a && i && s) {
k[oe] = !0;
break;
}
}
}
return !1;
}
}), ce = se.fork({
name: "child",
onScheduleTask: function(e, t, n, r) {
return e.scheduleTask(n, r);
},
onInvokeTask: function(e, t, n, r, o, a) {
return e.invokeTask(n, r, o, a);
},
onCancelTask: function(e, t, n, r) {
return e.cancelTask(n, r);
},
onInvoke: function(e, t, n, r, o, a, i) {
return e.invoke(n, r, o, a, i);
}
}), ue = Error.stackTraceLimit;
return Error.stackTraceLimit = 100, ce.run(function() {
ce.runGuarded(function() {
var e = function(e, t, n) {};
ce.scheduleEventTask(te, function() {
ce.scheduleMacroTask(te, function() {
ce.scheduleMicroTask(te, function() {
throw new k(k, ne);
}, null, function(t) {
t._transitionTo = e, t.invoke();
});
}, null, function(t) {
t._transitionTo = e, t.invoke();
}, function() {});
}, null, function(t) {
t._transitionTo = e, t.invoke();
}, function() {});
});
}), Error.stackTraceLimit = ue, e.Zone = D;
}("undefined" != typeof window && window || "undefined" != typeof self && self || global), 
function(e) {
return "__zone_symbol__" + e;
}), C = "object" == typeof window && window || "object" == typeof self && self || global, L = "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope, I = !("nw" in C) && "undefined" != typeof process && "[object process]" === {}.toString.call(process), F = !I && !L && !("undefined" == typeof window || !window.HTMLElement), M = "undefined" != typeof process && "[object process]" === {}.toString.call(process) && !L && !("undefined" == typeof window || !window.HTMLElement), H = P("eventTasks"), R = "addEventListener", x = "removeEventListener", q = function(e, t) {
return {
options: t[2],
eventName: t[0],
handler: t[1],
target: e || C,
name: t[0],
crossContext: !1,
invokeAddFunc: function(e, t) {
if (!this.crossContext) return t && t.invoke ? this.target[e](this.eventName, t.invoke, this.options) : this.target[e](this.eventName, t, this.options);
try {
return this.target[e](this.eventName, t, this.options);
} catch (n) {}
},
invokeRemoveFunc: function(e, t) {
if (!this.crossContext) return t && t.invoke ? this.target[e](this.eventName, t.invoke, this.options) : this.target[e](this.eventName, t, this.options);
try {
return this.target[e](this.eventName, t, this.options);
} catch (n) {}
}
};
}, A = P("originalInstance");
Zone[P("patchEventTargetMethods")] = u, Zone[P("patchOnProperties")] = r;
var N = Object[P("defineProperty")] = Object.defineProperty, B = Object[P("getOwnPropertyDescriptor")] = Object.getOwnPropertyDescriptor, X = Object.create, W = P("unconfigurables"), G = "Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video", U = "ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex,WebSocket".split(","), V = "EventTarget", K = "copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror".split(" "), J = P("unbound"), Q = "set", Y = "clear", $ = [ "alert", "prompt", "confirm" ], ee = "undefined" != typeof window && window || "undefined" != typeof self && self || global;
v(ee, Q, Y, "Timeout"), v(ee, Q, Y, "Interval"), v(ee, Q, Y, "Immediate"), v(ee, "request", "cancel", "AnimationFrame"), 
v(ee, "mozRequest", "mozCancel", "AnimationFrame"), v(ee, "webkitRequest", "webkitCancel", "AnimationFrame");
for (var te = 0; te < $.length; te++) {
var ne = $[te];
f(ee, ne, function(e, t, n) {
return function(t, r) {
return Zone.current.run(e, ee, r, n);
};
});
}
w(ee);
var re = ee.XMLHttpRequestEventTarget;
re && re.prototype && u(re.prototype), S(ee), l("MutationObserver"), l("WebKitMutationObserver"), 
l("FileReader"), g(), Z(ee), z(ee);
var oe = P("xhrTask"), ae = P("xhrSync"), ie = P("xhrListener"), se = P("xhrScheduled");
ee.navigator && ee.navigator.geolocation && t(ee.navigator.geolocation, [ "getCurrentPosition", "watchPosition" ]), 
k(), y(), ee.PromiseRejectionEvent && (Zone[P("unhandledPromiseRejectionHandler")] = j("unhandledrejection"), 
Zone[P("rejectionHandledHandler")] = j("rejectionhandled"));
});
}, function(module, exports) {
var Zone = function() {};
Zone.prototype.parent;
Zone.prototype.name;
Zone.assertZonePatched = function() {};
Zone.current;
Zone.currentTask;
Zone.root;
Zone.prototype.get = function(key) {};
Zone.prototype.getZoneWith = function(key) {};
Zone.prototype.fork = function(zoneSpec) {};
Zone.prototype.wrap = function(callback, source) {};
Zone.prototype.run = function(callback, applyThis, applyArgs, source) {};
Zone.prototype.runGuarded = function(callback, applyThis, applyArgs, source) {};
Zone.prototype.runTask = function(task, applyThis, applyArgs) {};
Zone.prototype.scheduleMicroTask = function(source, callback, data, customSchedule) {};
Zone.prototype.scheduleMacroTask = function(source, callback, data, customSchedule, customCancel) {};
Zone.prototype.scheduleEventTask = function(source, callback, data, customSchedule, customCancel) {};
Zone.prototype.scheduleTask = function(task) {};
Zone.prototype.cancelTask = function(task) {};
var ZoneSpec = function() {};
ZoneSpec.prototype.name;
ZoneSpec.prototype.properties;
ZoneSpec.prototype.onFork;
ZoneSpec.prototype.onIntercept;
ZoneSpec.prototype.onInvoke;
ZoneSpec.prototype.onHandleError;
ZoneSpec.prototype.onScheduleTask;
ZoneSpec.prototype.onInvokeTask;
ZoneSpec.prototype.onCancelTask;
ZoneSpec.prototype.onHasTask;
var ZoneDelegate = function() {};
ZoneDelegate.prototype.zone;
ZoneDelegate.prototype.fork = function(targetZone, zoneSpec) {};
ZoneDelegate.prototype.intercept = function(targetZone, callback, source) {};
ZoneDelegate.prototype.invoke = function(targetZone, callback, applyThis, applyArgs, source) {};
ZoneDelegate.prototype.handleError = function(targetZone, error) {};
ZoneDelegate.prototype.scheduleTask = function(targetZone, task) {};
ZoneDelegate.prototype.invokeTask = function(targetZone, task, applyThis, applyArgs) {};
ZoneDelegate.prototype.cancelTask = function(targetZone, task) {};
ZoneDelegate.prototype.hasTask = function(targetZone, hasTaskState) {};
var HasTaskState = function() {};
HasTaskState.prototype.microTask;
HasTaskState.prototype.macroTask;
HasTaskState.prototype.eventTask;
HasTaskState.prototype.change;
var TaskType = function() {};
var TaskState = function() {};
var TaskData = function() {};
TaskData.prototype.isPeriodic;
TaskData.prototype.delay;
TaskData.prototype.handleId;
var Task = function() {};
Task.prototype.type;
Task.prototype.state;
Task.prototype.source;
Task.prototype.invoke;
Task.prototype.callback;
Task.prototype.data;
Task.prototype.scheduleFn = function(task) {};
Task.prototype.cancelFn = function(task) {};
Task.prototype.zone;
Task.prototype.runCount;
Task.prototype.cancelSchduleRequest = function() {};
var MicroTask = function() {};
var MacroTask = function() {};
var EventTask = function() {};
Error.prototype.zoneAwareStack;
Error.prototype.originalStack;
} ]);
